use crate::*;
use squote::{quote, TokenStream};

#[derive(Debug)]
pub struct Class32 {
    pub name: TypeName,
}

impl Class32 {
    pub fn from_type_name(name: TypeName) -> Self {
        Self { name }
    }

    pub fn gen(&self) -> TokenStream {
        // TODO: for methods recognize certain signatures like `fn(GUID&, void**) -> HRESULT` and `fn(IUnknown**) -> HRESULT`
        // and turn those into generics and/or Result<T> return types.

        // TODO: need some way to pass the use paths to this gen function to limit what things are generated.

        // TODO: need to use windows.lib generated by dedicated tool rather than onecoreuap.lib ...

        let name = self.name.gen();

        quote! {
            #[link(name = "onecoreuap")]
            extern "system" {
                pub fn #name();
            }
        }
    }

    pub fn dependencies(&self) -> Vec<winmd::TypeDef> {
        Vec::new()
    }
}
