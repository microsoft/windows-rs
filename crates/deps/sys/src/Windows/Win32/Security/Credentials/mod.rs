#![allow(non_snake_case, non_camel_case_types)]
#[link(name = "windows")]
extern "system" {
    fn CredDeleteA();
    fn CredDeleteW();
    fn CredEnumerateA();
    fn CredEnumerateW();
    fn CredFindBestCredentialA();
    fn CredFindBestCredentialW();
    fn CredFree();
    fn CredGetSessionTypes();
    fn CredGetTargetInfoA();
    fn CredGetTargetInfoW();
    fn CredIsMarshaledCredentialA();
    fn CredIsMarshaledCredentialW();
    fn CredIsProtectedA();
    fn CredIsProtectedW();
    fn CredMarshalCredentialA();
    fn CredMarshalCredentialW();
    fn CredPackAuthenticationBufferA();
    fn CredPackAuthenticationBufferW();
    fn CredProtectA();
    fn CredProtectW();
    fn CredReadA();
    fn CredReadDomainCredentialsA();
    fn CredReadDomainCredentialsW();
    fn CredReadW();
    fn CredRenameA();
    fn CredRenameW();
    fn CredUICmdLinePromptForCredentialsA();
    fn CredUICmdLinePromptForCredentialsW();
    fn CredUIConfirmCredentialsA();
    fn CredUIConfirmCredentialsW();
    fn CredUIParseUserNameA();
    fn CredUIParseUserNameW();
    fn CredUIPromptForCredentialsA();
    fn CredUIPromptForCredentialsW();
    fn CredUIPromptForWindowsCredentialsA();
    fn CredUIPromptForWindowsCredentialsW();
    fn CredUIReadSSOCredW();
    fn CredUIStoreSSOCredW();
    fn CredUnPackAuthenticationBufferA();
    fn CredUnPackAuthenticationBufferW();
    fn CredUnmarshalCredentialA();
    fn CredUnmarshalCredentialW();
    fn CredUnprotectA();
    fn CredUnprotectW();
    fn CredWriteA();
    fn CredWriteDomainCredentialsA();
    fn CredWriteDomainCredentialsW();
    fn CredWriteW();
    fn GetOpenCardNameA();
    fn GetOpenCardNameW();
    fn KeyCredentialManagerFreeInformation();
    fn KeyCredentialManagerGetInformation();
    fn KeyCredentialManagerGetOperationErrorStates();
    fn KeyCredentialManagerShowUIOperation();
    fn SCardAccessStartedEvent();
    fn SCardAddReaderToGroupA();
    fn SCardAddReaderToGroupW();
    fn SCardAudit();
    fn SCardBeginTransaction();
    fn SCardCancel();
    fn SCardConnectA();
    fn SCardConnectW();
    fn SCardControl();
    fn SCardDisconnect();
    fn SCardDlgExtendedError();
    fn SCardEndTransaction();
    fn SCardEstablishContext();
    fn SCardForgetCardTypeA();
    fn SCardForgetCardTypeW();
    fn SCardForgetReaderA();
    fn SCardForgetReaderGroupA();
    fn SCardForgetReaderGroupW();
    fn SCardForgetReaderW();
    fn SCardFreeMemory();
    fn SCardGetAttrib();
    fn SCardGetCardTypeProviderNameA();
    fn SCardGetCardTypeProviderNameW();
    fn SCardGetDeviceTypeIdA();
    fn SCardGetDeviceTypeIdW();
    fn SCardGetProviderIdA();
    fn SCardGetProviderIdW();
    fn SCardGetReaderDeviceInstanceIdA();
    fn SCardGetReaderDeviceInstanceIdW();
    fn SCardGetReaderIconA();
    fn SCardGetReaderIconW();
    fn SCardGetStatusChangeA();
    fn SCardGetStatusChangeW();
    fn SCardGetTransmitCount();
    fn SCardIntroduceCardTypeA();
    fn SCardIntroduceCardTypeW();
    fn SCardIntroduceReaderA();
    fn SCardIntroduceReaderGroupA();
    fn SCardIntroduceReaderGroupW();
    fn SCardIntroduceReaderW();
    fn SCardIsValidContext();
    fn SCardListCardsA();
    fn SCardListCardsW();
    fn SCardListInterfacesA();
    fn SCardListInterfacesW();
    fn SCardListReaderGroupsA();
    fn SCardListReaderGroupsW();
    fn SCardListReadersA();
    fn SCardListReadersW();
    fn SCardListReadersWithDeviceInstanceIdA();
    fn SCardListReadersWithDeviceInstanceIdW();
    fn SCardLocateCardsA();
    fn SCardLocateCardsByATRA();
    fn SCardLocateCardsByATRW();
    fn SCardLocateCardsW();
    fn SCardReadCacheA();
    fn SCardReadCacheW();
    fn SCardReconnect();
    fn SCardReleaseContext();
    fn SCardReleaseStartedEvent();
    fn SCardRemoveReaderFromGroupA();
    fn SCardRemoveReaderFromGroupW();
    fn SCardSetAttrib();
    fn SCardSetCardTypeProviderNameA();
    fn SCardSetCardTypeProviderNameW();
    fn SCardState();
    fn SCardStatusA();
    fn SCardStatusW();
    fn SCardTransmit();
    fn SCardUIDlgSelectCardA();
    fn SCardUIDlgSelectCardW();
    fn SCardWriteCacheA();
    fn SCardWriteCacheW();
}
