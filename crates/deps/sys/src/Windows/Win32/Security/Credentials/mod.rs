#![allow(non_snake_case, non_camel_case_types)]
#[link(name = "windows")]
extern "system" {
    fn BINARY_BLOB_CREDENTIAL_INFO();
    fn CERT_CREDENTIAL_INFO();
    fn CERT_HASH_LENGTH();
    fn CREDENTIALA();
    fn CREDENTIALW();
    fn CREDENTIAL_ATTRIBUTEA();
    fn CREDENTIAL_ATTRIBUTEW();
    fn CREDENTIAL_TARGET_INFORMATIONA();
    fn CREDENTIAL_TARGET_INFORMATIONW();
    fn CREDSPP_SUBMIT_TYPE();
    fn CREDSSP_CRED();
    fn CREDSSP_CRED_EX();
    fn CREDSSP_CRED_EX_VERSION();
    fn CREDSSP_FLAG_REDIRECT();
    fn CREDSSP_SERVER_AUTH_CERTIFICATE();
    fn CREDSSP_SERVER_AUTH_LOOPBACK();
    fn CREDSSP_SERVER_AUTH_NEGOTIATE();
    fn CREDUIWIN_DOWNLEVEL_HELLO_AS_SMART_CARD();
    fn CREDUIWIN_FLAGS();
    fn CREDUIWIN_IGNORE_CLOUDAUTHORITY_NAME();
    fn CREDUI_FLAGS();
    fn CREDUI_INFOA();
    fn CREDUI_INFOW();
    fn CREDUI_MAX_CAPTION_LENGTH();
    fn CREDUI_MAX_GENERIC_TARGET_LENGTH();
    fn CREDUI_MAX_MESSAGE_LENGTH();
    fn CRED_ALLOW_NAME_RESOLUTION();
    fn CRED_CACHE_TARGET_INFORMATION();
    fn CRED_ENUMERATE_FLAGS();
    fn CRED_FLAGS();
    fn CRED_LOGON_TYPES_MASK();
    fn CRED_MARSHAL_TYPE();
    fn CRED_MAX_ATTRIBUTES();
    fn CRED_MAX_GENERIC_TARGET_NAME_LENGTH();
    fn CRED_MAX_STRING_LENGTH();
    fn CRED_MAX_TARGETNAME_ATTRIBUTE_LENGTH();
    fn CRED_MAX_TARGETNAME_NAMESPACE_LENGTH();
    fn CRED_MAX_VALUE_SIZE();
    fn CRED_PACK_FLAGS();
    fn CRED_PERSIST();
    fn CRED_PRESERVE_CREDENTIAL_BLOB();
    fn CRED_PROTECTION_TYPE();
    fn CRED_PROTECT_AS_SELF();
    fn CRED_PROTECT_TO_SYSTEM();
    fn CRED_TI_CREATE_EXPLICIT_CRED();
    fn CRED_TI_DNSTREE_IS_DFS_SERVER();
    fn CRED_TI_DOMAIN_FORMAT_UNKNOWN();
    fn CRED_TI_ONLY_PASSWORD_REQUIRED();
    fn CRED_TI_SERVER_FORMAT_UNKNOWN();
    fn CRED_TI_USERNAME_TARGET();
    fn CRED_TI_VALID_FLAGS();
    fn CRED_TI_WORKGROUP_MEMBER();
    fn CRED_TYPE();
    fn CRED_UNPROTECT_ALLOW_TO_SYSTEM();
    fn CRED_UNPROTECT_AS_SELF();
    fn CredDeleteA();
    fn CredDeleteW();
    fn CredEnumerateA();
    fn CredEnumerateW();
    fn CredFindBestCredentialA();
    fn CredFindBestCredentialW();
    fn CredFree();
    fn CredGetSessionTypes();
    fn CredGetTargetInfoA();
    fn CredGetTargetInfoW();
    fn CredIsMarshaledCredentialA();
    fn CredIsMarshaledCredentialW();
    fn CredIsProtectedA();
    fn CredIsProtectedW();
    fn CredMarshalCredentialA();
    fn CredMarshalCredentialW();
    fn CredPackAuthenticationBufferA();
    fn CredPackAuthenticationBufferW();
    fn CredProtectA();
    fn CredProtectW();
    fn CredReadA();
    fn CredReadDomainCredentialsA();
    fn CredReadDomainCredentialsW();
    fn CredReadW();
    fn CredRenameA();
    fn CredRenameW();
    fn CredUICmdLinePromptForCredentialsA();
    fn CredUICmdLinePromptForCredentialsW();
    fn CredUIConfirmCredentialsA();
    fn CredUIConfirmCredentialsW();
    fn CredUIParseUserNameA();
    fn CredUIParseUserNameW();
    fn CredUIPromptForCredentialsA();
    fn CredUIPromptForCredentialsW();
    fn CredUIPromptForWindowsCredentialsA();
    fn CredUIPromptForWindowsCredentialsW();
    fn CredUIReadSSOCredW();
    fn CredUIStoreSSOCredW();
    fn CredUnPackAuthenticationBufferA();
    fn CredUnPackAuthenticationBufferW();
    fn CredUnmarshalCredentialA();
    fn CredUnmarshalCredentialW();
    fn CredUnprotectA();
    fn CredUnprotectW();
    fn CredWriteA();
    fn CredWriteDomainCredentialsA();
    fn CredWriteDomainCredentialsW();
    fn CredWriteW();
    fn FILE_DEVICE_SMARTCARD();
    fn GUID_DEVINTERFACE_SMARTCARD_READER();
    fn GetOpenCardNameA();
    fn GetOpenCardNameW();
    fn KeyCredentialManagerFreeInformation();
    fn KeyCredentialManagerGetInformation();
    fn KeyCredentialManagerGetOperationErrorStates();
    fn KeyCredentialManagerInfo();
    fn KeyCredentialManagerOperationErrorStates();
    fn KeyCredentialManagerOperationType();
    fn KeyCredentialManagerShowUIOperation();
    fn LPOCNCHKPROC();
    fn LPOCNCONNPROCA();
    fn LPOCNCONNPROCW();
    fn LPOCNDSCPROC();
    fn MAXIMUM_ATTR_STRING_LENGTH();
    fn MAXIMUM_SMARTCARD_READERS();
    fn OPENCARDNAMEA();
    fn OPENCARDNAMEW();
    fn OPENCARDNAME_EXA();
    fn OPENCARDNAME_EXW();
    fn OPENCARD_SEARCH_CRITERIAA();
    fn OPENCARD_SEARCH_CRITERIAW();
    fn READER_SEL_REQUEST();
    fn READER_SEL_REQUEST_MATCH_TYPE();
    fn READER_SEL_RESPONSE();
    fn SCARD_ABSENT();
    fn SCARD_ATRMASK();
    fn SCARD_ATR_LENGTH();
    fn SCARD_AUDIT_CHV_FAILURE();
    fn SCARD_AUDIT_CHV_SUCCESS();
    fn SCARD_CLASS_COMMUNICATIONS();
    fn SCARD_CLASS_ICC_STATE();
    fn SCARD_CLASS_IFD_PROTOCOL();
    fn SCARD_CLASS_MECHANICAL();
    fn SCARD_CLASS_PERF();
    fn SCARD_CLASS_POWER_MGMT();
    fn SCARD_CLASS_PROTOCOL();
    fn SCARD_CLASS_SECURITY();
    fn SCARD_CLASS_SYSTEM();
    fn SCARD_CLASS_VENDOR_DEFINED();
    fn SCARD_CLASS_VENDOR_INFO();
    fn SCARD_COLD_RESET();
    fn SCARD_EJECT_CARD();
    fn SCARD_IO_REQUEST();
    fn SCARD_LEAVE_CARD();
    fn SCARD_NEGOTIABLE();
    fn SCARD_POWERED();
    fn SCARD_POWER_DOWN();
    fn SCARD_PRESENT();
    fn SCARD_PROTOCOL_DEFAULT();
    fn SCARD_PROTOCOL_OPTIMAL();
    fn SCARD_PROTOCOL_RAW();
    fn SCARD_PROTOCOL_T0();
    fn SCARD_PROTOCOL_T1();
    fn SCARD_PROTOCOL_UNDEFINED();
    fn SCARD_PROVIDER_CSP();
    fn SCARD_PROVIDER_KSP();
    fn SCARD_PROVIDER_PRIMARY();
    fn SCARD_READERSTATEA();
    fn SCARD_READERSTATEW();
    fn SCARD_READER_CONFISCATES();
    fn SCARD_READER_CONTACTLESS();
    fn SCARD_READER_EJECTS();
    fn SCARD_READER_SWALLOWS();
    fn SCARD_READER_TYPE_EMBEDDEDSE();
    fn SCARD_READER_TYPE_IDE();
    fn SCARD_READER_TYPE_KEYBOARD();
    fn SCARD_READER_TYPE_NFC();
    fn SCARD_READER_TYPE_NGC();
    fn SCARD_READER_TYPE_PARALELL();
    fn SCARD_READER_TYPE_PCMCIA();
    fn SCARD_READER_TYPE_SCSI();
    fn SCARD_READER_TYPE_SERIAL();
    fn SCARD_READER_TYPE_TPM();
    fn SCARD_READER_TYPE_UICC();
    fn SCARD_READER_TYPE_USB();
    fn SCARD_READER_TYPE_VENDOR();
    fn SCARD_RESET_CARD();
    fn SCARD_SCOPE();
    fn SCARD_SCOPE_TERMINAL();
    fn SCARD_SHARE_DIRECT();
    fn SCARD_SHARE_EXCLUSIVE();
    fn SCARD_SHARE_SHARED();
    fn SCARD_SPECIFIC();
    fn SCARD_STATE();
    fn SCARD_STATE_UNPOWERED();
    fn SCARD_SWALLOWED();
    fn SCARD_T0_CMD_LENGTH();
    fn SCARD_T0_COMMAND();
    fn SCARD_T0_HEADER_LENGTH();
    fn SCARD_T0_REQUEST();
    fn SCARD_T1_EPILOGUE_LENGTH();
    fn SCARD_T1_EPILOGUE_LENGTH_LRC();
    fn SCARD_T1_MAX_IFS();
    fn SCARD_T1_PROLOGUE_LENGTH();
    fn SCARD_T1_REQUEST();
    fn SCARD_UNKNOWN();
    fn SCARD_UNPOWER_CARD();
    fn SCARD_WARM_RESET();
    fn SCERR_NOCARDNAME();
    fn SCERR_NOGUIDS();
    fn SC_DLG_FORCE_UI();
    fn SC_DLG_MINIMAL_UI();
    fn SC_DLG_NO_UI();
    fn SCardAccessStartedEvent();
    fn SCardAddReaderToGroupA();
    fn SCardAddReaderToGroupW();
    fn SCardAudit();
    fn SCardBeginTransaction();
    fn SCardCancel();
    fn SCardConnectA();
    fn SCardConnectW();
    fn SCardControl();
    fn SCardDisconnect();
    fn SCardDlgExtendedError();
    fn SCardEndTransaction();
    fn SCardEstablishContext();
    fn SCardForgetCardTypeA();
    fn SCardForgetCardTypeW();
    fn SCardForgetReaderA();
    fn SCardForgetReaderGroupA();
    fn SCardForgetReaderGroupW();
    fn SCardForgetReaderW();
    fn SCardFreeMemory();
    fn SCardGetAttrib();
    fn SCardGetCardTypeProviderNameA();
    fn SCardGetCardTypeProviderNameW();
    fn SCardGetDeviceTypeIdA();
    fn SCardGetDeviceTypeIdW();
    fn SCardGetProviderIdA();
    fn SCardGetProviderIdW();
    fn SCardGetReaderDeviceInstanceIdA();
    fn SCardGetReaderDeviceInstanceIdW();
    fn SCardGetReaderIconA();
    fn SCardGetReaderIconW();
    fn SCardGetStatusChangeA();
    fn SCardGetStatusChangeW();
    fn SCardGetTransmitCount();
    fn SCardIntroduceCardTypeA();
    fn SCardIntroduceCardTypeW();
    fn SCardIntroduceReaderA();
    fn SCardIntroduceReaderGroupA();
    fn SCardIntroduceReaderGroupW();
    fn SCardIntroduceReaderW();
    fn SCardIsValidContext();
    fn SCardListCardsA();
    fn SCardListCardsW();
    fn SCardListInterfacesA();
    fn SCardListInterfacesW();
    fn SCardListReaderGroupsA();
    fn SCardListReaderGroupsW();
    fn SCardListReadersA();
    fn SCardListReadersW();
    fn SCardListReadersWithDeviceInstanceIdA();
    fn SCardListReadersWithDeviceInstanceIdW();
    fn SCardLocateCardsA();
    fn SCardLocateCardsByATRA();
    fn SCardLocateCardsByATRW();
    fn SCardLocateCardsW();
    fn SCardReadCacheA();
    fn SCardReadCacheW();
    fn SCardReconnect();
    fn SCardReleaseContext();
    fn SCardReleaseStartedEvent();
    fn SCardRemoveReaderFromGroupA();
    fn SCardRemoveReaderFromGroupW();
    fn SCardSetAttrib();
    fn SCardSetCardTypeProviderNameA();
    fn SCardSetCardTypeProviderNameW();
    fn SCardState();
    fn SCardStatusA();
    fn SCardStatusW();
    fn SCardTransmit();
    fn SCardUIDlgSelectCardA();
    fn SCardUIDlgSelectCardW();
    fn SCardWriteCacheA();
    fn SCardWriteCacheW();
    fn SECPKG_ALT_ATTR();
    fn SECPKG_ATTR_C_FULL_IDENT_TOKEN();
    fn STATUS_ACCESS_DENIED();
    fn STATUS_ACCOUNT_DISABLED();
    fn STATUS_ACCOUNT_EXPIRED();
    fn STATUS_ACCOUNT_LOCKED_OUT();
    fn STATUS_ACCOUNT_RESTRICTION();
    fn STATUS_AUTHENTICATION_FIREWALL_FAILED();
    fn STATUS_DOWNGRADE_DETECTED();
    fn STATUS_LOGON_FAILURE();
    fn STATUS_LOGON_TYPE_NOT_GRANTED();
    fn STATUS_NO_SUCH_LOGON_SESSION();
    fn STATUS_NO_SUCH_USER();
    fn STATUS_PASSWORD_EXPIRED();
    fn STATUS_PASSWORD_MUST_CHANGE();
    fn STATUS_WRONG_PASSWORD();
    fn SecHandle();
    fn SecPkgContext_ClientCreds();
    fn USERNAME_TARGET_CREDENTIAL_INFO();
}
