#![allow(non_snake_case, non_camel_case_types)]
#[link(name = "windows")]
extern "system" {
    fn APOERR_ALREADY_INITIALIZED();
    fn APOERR_ALREADY_UNLOCKED();
    fn APOERR_APO_LOCKED();
    fn APOERR_BUFFERS_OVERLAP();
    fn APOERR_FORMAT_NOT_SUPPORTED();
    fn APOERR_INVALID_APO_CLSID();
    fn APOERR_INVALID_COEFFCOUNT();
    fn APOERR_INVALID_COEFFICIENT();
    fn APOERR_INVALID_CONNECTION_FORMAT();
    fn APOERR_INVALID_CURVE_PARAM();
    fn APOERR_INVALID_INPUTID();
    fn APOERR_INVALID_OUTPUT_MAXFRAMECOUNT();
    fn APOERR_NOT_INITIALIZED();
    fn APOERR_NUM_CONNECTIONS_INVALID();
    fn APOInitBaseStruct();
    fn APOInitSystemEffects();
    fn APOInitSystemEffects2();
    fn APOInitSystemEffects3();
    fn APO_BUFFER_FLAGS();
    fn APO_CONNECTION_BUFFER_TYPE();
    fn APO_CONNECTION_DESCRIPTOR();
    fn APO_CONNECTION_PROPERTY();
    fn APO_CONNECTION_PROPERTY_V2();
    fn APO_FLAG();
    fn APO_LOG_LEVEL();
    fn APO_NOTIFICATION();
    fn APO_NOTIFICATION_DESCRIPTOR();
    fn APO_NOTIFICATION_TYPE();
    fn APO_REG_PROPERTIES();
    fn AUDIOMEDIATYPE_EQUAL_FORMAT_DATA();
    fn AUDIOMEDIATYPE_EQUAL_FORMAT_TYPES();
    fn AUDIOMEDIATYPE_EQUAL_FORMAT_USER_DATA();
    fn AUDIO_ENDPOINT_PROPERTY_CHANGE_APO_NOTIFICATION_DESCRIPTOR();
    fn AUDIO_ENDPOINT_PROPERTY_CHANGE_NOTIFICATION();
    fn AUDIO_ENDPOINT_VOLUME_APO_NOTIFICATION_DESCRIPTOR();
    fn AUDIO_ENDPOINT_VOLUME_CHANGE_NOTIFICATION();
    fn AUDIO_FLOW_TYPE();
    fn AUDIO_MAX_CHANNELS();
    fn AUDIO_MAX_FRAMERATE();
    fn AUDIO_MIN_CHANNELS();
    fn AUDIO_MIN_FRAMERATE();
    fn AUDIO_SYSTEMEFFECT();
    fn AUDIO_SYSTEMEFFECTS_PROPERTY_CHANGE_APO_NOTIFICATION_DESCRIPTOR();
    fn AUDIO_SYSTEMEFFECTS_PROPERTY_CHANGE_NOTIFICATION();
    fn AUDIO_SYSTEMEFFECT_STATE();
    fn AudioFXExtensionParams();
    fn EAudioConstriction();
    fn FNAPONOTIFICATIONCALLBACK();
    fn IApoAcousticEchoCancellation();
    fn IApoAuxiliaryInputConfiguration();
    fn IApoAuxiliaryInputRT();
    fn IAudioDeviceModulesClient();
    fn IAudioMediaType();
    fn IAudioProcessingObject();
    fn IAudioProcessingObjectConfiguration();
    fn IAudioProcessingObjectLoggingService();
    fn IAudioProcessingObjectNotifications();
    fn IAudioProcessingObjectRT();
    fn IAudioProcessingObjectRTQueueService();
    fn IAudioProcessingObjectVBR();
    fn IAudioSystemEffects();
    fn IAudioSystemEffects2();
    fn IAudioSystemEffects3();
    fn IAudioSystemEffectsCustomFormats();
    fn PKEY_APO_SWFallback_ProcessingModes();
    fn PKEY_CompositeFX_EndpointEffectClsid();
    fn PKEY_CompositeFX_KeywordDetector_EndpointEffectClsid();
    fn PKEY_CompositeFX_KeywordDetector_ModeEffectClsid();
    fn PKEY_CompositeFX_KeywordDetector_StreamEffectClsid();
    fn PKEY_CompositeFX_ModeEffectClsid();
    fn PKEY_CompositeFX_Offload_ModeEffectClsid();
    fn PKEY_CompositeFX_Offload_StreamEffectClsid();
    fn PKEY_CompositeFX_StreamEffectClsid();
    fn PKEY_EFX_KeywordDetector_ProcessingModes_Supported_For_Streaming();
    fn PKEY_EFX_ProcessingModes_Supported_For_Streaming();
    fn PKEY_FX_Association();
    fn PKEY_FX_EndpointEffectClsid();
    fn PKEY_FX_FriendlyName();
    fn PKEY_FX_KeywordDetector_EndpointEffectClsid();
    fn PKEY_FX_KeywordDetector_ModeEffectClsid();
    fn PKEY_FX_KeywordDetector_StreamEffectClsid();
    fn PKEY_FX_ModeEffectClsid();
    fn PKEY_FX_Offload_ModeEffectClsid();
    fn PKEY_FX_Offload_StreamEffectClsid();
    fn PKEY_FX_PostMixEffectClsid();
    fn PKEY_FX_PreMixEffectClsid();
    fn PKEY_FX_StreamEffectClsid();
    fn PKEY_FX_UserInterfaceClsid();
    fn PKEY_MFX_KeywordDetector_ProcessingModes_Supported_For_Streaming();
    fn PKEY_MFX_Offload_ProcessingModes_Supported_For_Streaming();
    fn PKEY_MFX_ProcessingModes_Supported_For_Streaming();
    fn PKEY_SFX_KeywordDetector_ProcessingModes_Supported_For_Streaming();
    fn PKEY_SFX_Offload_ProcessingModes_Supported_For_Streaming();
    fn PKEY_SFX_ProcessingModes_Supported_For_Streaming();
    fn SID_AudioProcessingObjectLoggingService();
    fn SID_AudioProcessingObjectRTQueue();
    fn UNCOMPRESSEDAUDIOFORMAT();
}
