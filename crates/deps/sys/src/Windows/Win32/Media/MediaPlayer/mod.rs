#![allow(non_snake_case, non_camel_case_types, non_upper_case_globals, clashing_extern_declarations, clippy::all)]
#[link(name = "windows")]
extern "system" {}
pub const CLSID_WMPMediaPluginRegistrar: ::windows_sys::core::GUID = ::windows_sys::core::GUID {
    data1: 1433004021,
    data2: 16971,
    data3: 19347,
    data4: [137, 202, 121, 209, 121, 36, 104, 154],
};
pub const CLSID_WMPSkinManager: ::windows_sys::core::GUID = ::windows_sys::core::GUID {
    data1: 2997353810,
    data2: 12319,
    data3: 17224,
    data4: [185, 58, 99, 140, 109, 228, 146, 41],
};
pub const CLSID_XFeedsManager: ::windows_sys::core::GUID = ::windows_sys::core::GUID { data1: 4268429763, data2: 50990, data3: 16481, data4: [134, 198, 157, 22, 49, 33, 242, 41] };
pub const DISPID_DELTA: u32 = 50u32;
pub const DISPID_FEEDENCLOSURE_AsyncDownload: u32 = 24579u32;
pub const DISPID_FEEDENCLOSURE_CancelAsyncDownload: u32 = 24580u32;
pub const DISPID_FEEDENCLOSURE_DownloadMimeType: u32 = 24586u32;
pub const DISPID_FEEDENCLOSURE_DownloadStatus: u32 = 24581u32;
pub const DISPID_FEEDENCLOSURE_DownloadUrl: u32 = 24585u32;
pub const DISPID_FEEDENCLOSURE_LastDownloadError: u32 = 24582u32;
pub const DISPID_FEEDENCLOSURE_Length: u32 = 24578u32;
pub const DISPID_FEEDENCLOSURE_LocalPath: u32 = 24583u32;
pub const DISPID_FEEDENCLOSURE_Parent: u32 = 24584u32;
pub const DISPID_FEEDENCLOSURE_RemoveFile: u32 = 24587u32;
pub const DISPID_FEEDENCLOSURE_SetFile: u32 = 24588u32;
pub const DISPID_FEEDENCLOSURE_Type: u32 = 24577u32;
pub const DISPID_FEEDENCLOSURE_Url: u32 = 24576u32;
pub const DISPID_FEEDEVENTS_Error: u32 = 32768u32;
pub const DISPID_FEEDEVENTS_FeedDeleted: u32 = 32769u32;
pub const DISPID_FEEDEVENTS_FeedDownloadCompleted: u32 = 32774u32;
pub const DISPID_FEEDEVENTS_FeedDownloading: u32 = 32773u32;
pub const DISPID_FEEDEVENTS_FeedItemCountChanged: u32 = 32775u32;
pub const DISPID_FEEDEVENTS_FeedMoved: u32 = 32772u32;
pub const DISPID_FEEDEVENTS_FeedRenamed: u32 = 32770u32;
pub const DISPID_FEEDEVENTS_FeedUrlChanged: u32 = 32771u32;
pub const DISPID_FEEDFOLDEREVENTS_Error: u32 = 28672u32;
pub const DISPID_FEEDFOLDEREVENTS_FeedAdded: u32 = 28679u32;
pub const DISPID_FEEDFOLDEREVENTS_FeedDeleted: u32 = 28680u32;
pub const DISPID_FEEDFOLDEREVENTS_FeedDownloadCompleted: u32 = 28686u32;
pub const DISPID_FEEDFOLDEREVENTS_FeedDownloading: u32 = 28685u32;
pub const DISPID_FEEDFOLDEREVENTS_FeedItemCountChanged: u32 = 28687u32;
pub const DISPID_FEEDFOLDEREVENTS_FeedMovedFrom: u32 = 28683u32;
pub const DISPID_FEEDFOLDEREVENTS_FeedMovedTo: u32 = 28684u32;
pub const DISPID_FEEDFOLDEREVENTS_FeedRenamed: u32 = 28681u32;
pub const DISPID_FEEDFOLDEREVENTS_FeedUrlChanged: u32 = 28682u32;
pub const DISPID_FEEDFOLDEREVENTS_FolderAdded: u32 = 28673u32;
pub const DISPID_FEEDFOLDEREVENTS_FolderDeleted: u32 = 28674u32;
pub const DISPID_FEEDFOLDEREVENTS_FolderItemCountChanged: u32 = 28678u32;
pub const DISPID_FEEDFOLDEREVENTS_FolderMovedFrom: u32 = 28676u32;
pub const DISPID_FEEDFOLDEREVENTS_FolderMovedTo: u32 = 28677u32;
pub const DISPID_FEEDFOLDEREVENTS_FolderRenamed: u32 = 28675u32;
pub const DISPID_FEEDFOLDER_CreateFeed: u32 = 12290u32;
pub const DISPID_FEEDFOLDER_CreateSubfolder: u32 = 12291u32;
pub const DISPID_FEEDFOLDER_Delete: u32 = 12296u32;
pub const DISPID_FEEDFOLDER_ExistsFeed: u32 = 12292u32;
pub const DISPID_FEEDFOLDER_ExistsSubfolder: u32 = 12294u32;
pub const DISPID_FEEDFOLDER_Feeds: u32 = 12288u32;
pub const DISPID_FEEDFOLDER_GetFeed: u32 = 12293u32;
pub const DISPID_FEEDFOLDER_GetSubfolder: u32 = 12295u32;
pub const DISPID_FEEDFOLDER_GetWatcher: u32 = 12305u32;
pub const DISPID_FEEDFOLDER_IsRoot: u32 = 12302u32;
pub const DISPID_FEEDFOLDER_Move: u32 = 12300u32;
pub const DISPID_FEEDFOLDER_Name: u32 = 12297u32;
pub const DISPID_FEEDFOLDER_Parent: u32 = 12301u32;
pub const DISPID_FEEDFOLDER_Path: u32 = 12299u32;
pub const DISPID_FEEDFOLDER_Rename: u32 = 12298u32;
pub const DISPID_FEEDFOLDER_Subfolders: u32 = 12289u32;
pub const DISPID_FEEDFOLDER_TotalItemCount: u32 = 12304u32;
pub const DISPID_FEEDFOLDER_TotalUnreadItemCount: u32 = 12303u32;
pub const DISPID_FEEDITEM_Author: u32 = 20487u32;
pub const DISPID_FEEDITEM_Comments: u32 = 20486u32;
pub const DISPID_FEEDITEM_Delete: u32 = 20492u32;
pub const DISPID_FEEDITEM_Description: u32 = 20484u32;
pub const DISPID_FEEDITEM_DownloadUrl: u32 = 20493u32;
pub const DISPID_FEEDITEM_EffectiveId: u32 = 20496u32;
pub const DISPID_FEEDITEM_Enclosure: u32 = 20488u32;
pub const DISPID_FEEDITEM_Guid: u32 = 20483u32;
pub const DISPID_FEEDITEM_IsRead: u32 = 20489u32;
pub const DISPID_FEEDITEM_LastDownloadTime: u32 = 20494u32;
pub const DISPID_FEEDITEM_Link: u32 = 20482u32;
pub const DISPID_FEEDITEM_LocalId: u32 = 20490u32;
pub const DISPID_FEEDITEM_Modified: u32 = 20495u32;
pub const DISPID_FEEDITEM_Parent: u32 = 20491u32;
pub const DISPID_FEEDITEM_PubDate: u32 = 20485u32;
pub const DISPID_FEEDITEM_Title: u32 = 20481u32;
pub const DISPID_FEEDITEM_Xml: u32 = 20480u32;
pub const DISPID_FEEDSENUM_Count: u32 = 8192u32;
pub const DISPID_FEEDSENUM_Item: u32 = 8193u32;
pub const DISPID_FEEDS_AsyncSyncAll: u32 = 4108u32;
pub const DISPID_FEEDS_BackgroundSync: u32 = 4105u32;
pub const DISPID_FEEDS_BackgroundSyncStatus: u32 = 4106u32;
pub const DISPID_FEEDS_DefaultInterval: u32 = 4107u32;
pub const DISPID_FEEDS_DeleteFeed: u32 = 4102u32;
pub const DISPID_FEEDS_DeleteFolder: u32 = 4103u32;
pub const DISPID_FEEDS_ExistsFeed: u32 = 4098u32;
pub const DISPID_FEEDS_ExistsFolder: u32 = 4100u32;
pub const DISPID_FEEDS_GetFeed: u32 = 4099u32;
pub const DISPID_FEEDS_GetFeedByUrl: u32 = 4104u32;
pub const DISPID_FEEDS_GetFolder: u32 = 4101u32;
pub const DISPID_FEEDS_IsSubscribed: u32 = 4097u32;
pub const DISPID_FEEDS_ItemCountLimit: u32 = 4110u32;
pub const DISPID_FEEDS_Normalize: u32 = 4109u32;
pub const DISPID_FEEDS_RootFolder: u32 = 4096u32;
pub const DISPID_FEED_AsyncDownload: u32 = 16395u32;
pub const DISPID_FEED_CancelAsyncDownload: u32 = 16396u32;
pub const DISPID_FEED_ClearCredentials: u32 = 16428u32;
pub const DISPID_FEED_Copyright: u32 = 16411u32;
pub const DISPID_FEED_Delete: u32 = 16393u32;
pub const DISPID_FEED_Description: u32 = 16404u32;
pub const DISPID_FEED_Download: u32 = 16394u32;
pub const DISPID_FEED_DownloadEnclosuresAutomatically: u32 = 16412u32;
pub const DISPID_FEED_DownloadStatus: u32 = 16413u32;
pub const DISPID_FEED_DownloadUrl: u32 = 16416u32;
pub const DISPID_FEED_GetItem: u32 = 16402u32;
pub const DISPID_FEED_GetItemByEffectiveId: u32 = 16423u32;
pub const DISPID_FEED_GetWatcher: u32 = 16419u32;
pub const DISPID_FEED_Image: u32 = 16406u32;
pub const DISPID_FEED_Interval: u32 = 16397u32;
pub const DISPID_FEED_IsList: u32 = 16417u32;
pub const DISPID_FEED_ItemCount: u32 = 16421u32;
pub const DISPID_FEED_Items: u32 = 16401u32;
pub const DISPID_FEED_Language: u32 = 16410u32;
pub const DISPID_FEED_LastBuildDate: u32 = 16407u32;
pub const DISPID_FEED_LastDownloadError: u32 = 16414u32;
pub const DISPID_FEED_LastDownloadTime: u32 = 16399u32;
pub const DISPID_FEED_LastItemDownloadTime: u32 = 16424u32;
pub const DISPID_FEED_LastWriteTime: u32 = 16392u32;
pub const DISPID_FEED_Link: u32 = 16405u32;
pub const DISPID_FEED_LocalEnclosurePath: u32 = 16400u32;
pub const DISPID_FEED_LocalId: u32 = 16388u32;
pub const DISPID_FEED_MarkAllItemsRead: u32 = 16418u32;
pub const DISPID_FEED_MaxItemCount: u32 = 16422u32;
pub const DISPID_FEED_Merge: u32 = 16415u32;
pub const DISPID_FEED_Move: u32 = 16390u32;
pub const DISPID_FEED_Name: u32 = 16385u32;
pub const DISPID_FEED_Parent: u32 = 16391u32;
pub const DISPID_FEED_Password: u32 = 16426u32;
pub const DISPID_FEED_Path: u32 = 16389u32;
pub const DISPID_FEED_PubDate: u32 = 16408u32;
pub const DISPID_FEED_Rename: u32 = 16386u32;
pub const DISPID_FEED_SetCredentials: u32 = 16427u32;
pub const DISPID_FEED_SyncSetting: u32 = 16398u32;
pub const DISPID_FEED_Title: u32 = 16403u32;
pub const DISPID_FEED_Ttl: u32 = 16409u32;
pub const DISPID_FEED_UnreadItemCount: u32 = 16420u32;
pub const DISPID_FEED_Url: u32 = 16387u32;
pub const DISPID_FEED_Username: u32 = 16425u32;
pub const DISPID_FEED_Xml: u32 = 16384u32;
pub const DISPID_WMPCDROMCOLLECTION_BASE: u32 = 300u32;
pub const DISPID_WMPCDROMCOLLECTION_COUNT: u32 = 301u32;
pub const DISPID_WMPCDROMCOLLECTION_GETBYDRIVESPECIFIER: u32 = 303u32;
pub const DISPID_WMPCDROMCOLLECTION_ITEM: u32 = 302u32;
pub const DISPID_WMPCDROMCOLLECTION_STARTMONITORINGCDROMS: u32 = 304u32;
pub const DISPID_WMPCDROMCOLLECTION_STOPMONITORINGCDROMS: u32 = 305u32;
pub const DISPID_WMPCDROM_BASE: u32 = 250u32;
pub const DISPID_WMPCDROM_DRIVESPECIFIER: u32 = 251u32;
pub const DISPID_WMPCDROM_EJECT: u32 = 253u32;
pub const DISPID_WMPCDROM_PLAYLIST: u32 = 252u32;
pub const DISPID_WMPCLOSEDCAPTION2_GETLANGCOUNT: u32 = 955u32;
pub const DISPID_WMPCLOSEDCAPTION2_GETLANGID: u32 = 957u32;
pub const DISPID_WMPCLOSEDCAPTION2_GETLANGNAME: u32 = 956u32;
pub const DISPID_WMPCLOSEDCAPTION2_GETSTYLECOUNT: u32 = 958u32;
pub const DISPID_WMPCLOSEDCAPTION2_GETSTYLENAME: u32 = 959u32;
pub const DISPID_WMPCLOSEDCAPTION_BASE: u32 = 950u32;
pub const DISPID_WMPCLOSEDCAPTION_CAPTIONINGID: u32 = 954u32;
pub const DISPID_WMPCLOSEDCAPTION_SAMIFILENAME: u32 = 953u32;
pub const DISPID_WMPCLOSEDCAPTION_SAMILANG: u32 = 952u32;
pub const DISPID_WMPCLOSEDCAPTION_SAMISTYLE: u32 = 951u32;
pub const DISPID_WMPCONTROLS2_STEP: u32 = 64u32;
pub const DISPID_WMPCONTROLS3_AUDIOLANGUAGECOUNT: u32 = 65u32;
pub const DISPID_WMPCONTROLS3_CURRENTAUDIOLANGUAGE: u32 = 68u32;
pub const DISPID_WMPCONTROLS3_CURRENTAUDIOLANGUAGEINDEX: u32 = 69u32;
pub const DISPID_WMPCONTROLS3_CURRENTPOSITIONTIMECODE: u32 = 71u32;
pub const DISPID_WMPCONTROLS3_GETAUDIOLANGUAGEDESC: u32 = 67u32;
pub const DISPID_WMPCONTROLS3_GETAUDIOLANGUAGEID: u32 = 66u32;
pub const DISPID_WMPCONTROLS3_GETLANGUAGENAME: u32 = 70u32;
pub const DISPID_WMPCONTROLSFAKE_TIMECOMPRESSION: u32 = 72u32;
pub const DISPID_WMPCONTROLS_BASE: u32 = 50u32;
pub const DISPID_WMPCONTROLS_CURRENTITEM: u32 = 60u32;
pub const DISPID_WMPCONTROLS_CURRENTMARKER: u32 = 61u32;
pub const DISPID_WMPCONTROLS_CURRENTPOSITION: u32 = 56u32;
pub const DISPID_WMPCONTROLS_CURRENTPOSITIONSTRING: u32 = 57u32;
pub const DISPID_WMPCONTROLS_FASTFORWARD: u32 = 54u32;
pub const DISPID_WMPCONTROLS_FASTREVERSE: u32 = 55u32;
pub const DISPID_WMPCONTROLS_ISAVAILABLE: u32 = 62u32;
pub const DISPID_WMPCONTROLS_NEXT: u32 = 58u32;
pub const DISPID_WMPCONTROLS_PAUSE: u32 = 53u32;
pub const DISPID_WMPCONTROLS_PLAY: u32 = 51u32;
pub const DISPID_WMPCONTROLS_PLAYITEM: u32 = 63u32;
pub const DISPID_WMPCONTROLS_PREVIOUS: u32 = 59u32;
pub const DISPID_WMPCONTROLS_STOP: u32 = 52u32;
pub const DISPID_WMPCORE2_BASE: u32 = 39u32;
pub const DISPID_WMPCORE2_DVD: u32 = 40u32;
pub const DISPID_WMPCORE3_NEWMEDIA: u32 = 42u32;
pub const DISPID_WMPCORE3_NEWPLAYLIST: u32 = 41u32;
pub const DISPID_WMPCOREEVENT_AUDIOLANGUAGECHANGE: u32 = 5102u32;
pub const DISPID_WMPCOREEVENT_BUFFERING: u32 = 5402u32;
pub const DISPID_WMPCOREEVENT_CDROMMEDIACHANGE: u32 = 5701u32;
pub const DISPID_WMPCOREEVENT_CURRENTITEMCHANGE: u32 = 5806u32;
pub const DISPID_WMPCOREEVENT_CURRENTMEDIAITEMAVAILABLE: u32 = 5803u32;
pub const DISPID_WMPCOREEVENT_CURRENTPLAYLISTCHANGE: u32 = 5804u32;
pub const DISPID_WMPCOREEVENT_CURRENTPLAYLISTITEMAVAILABLE: u32 = 5805u32;
pub const DISPID_WMPCOREEVENT_DISCONNECT: u32 = 5401u32;
pub const DISPID_WMPCOREEVENT_DOMAINCHANGE: u32 = 5822u32;
pub const DISPID_WMPCOREEVENT_DURATIONUNITCHANGE: u32 = 5204u32;
pub const DISPID_WMPCOREEVENT_ENDOFSTREAM: u32 = 5201u32;
pub const DISPID_WMPCOREEVENT_ERROR: u32 = 5501u32;
pub const DISPID_WMPCOREEVENT_MARKERHIT: u32 = 5203u32;
pub const DISPID_WMPCOREEVENT_MEDIACHANGE: u32 = 5802u32;
pub const DISPID_WMPCOREEVENT_MEDIACOLLECTIONATTRIBUTESTRINGADDED: u32 = 5808u32;
pub const DISPID_WMPCOREEVENT_MEDIACOLLECTIONATTRIBUTESTRINGCHANGED: u32 = 5820u32;
pub const DISPID_WMPCOREEVENT_MEDIACOLLECTIONATTRIBUTESTRINGREMOVED: u32 = 5809u32;
pub const DISPID_WMPCOREEVENT_MEDIACOLLECTIONCHANGE: u32 = 5807u32;
pub const DISPID_WMPCOREEVENT_MEDIACOLLECTIONCONTENTSCANADDEDITEM: u32 = 5813u32;
pub const DISPID_WMPCOREEVENT_MEDIACOLLECTIONCONTENTSCANPROGRESS: u32 = 5814u32;
pub const DISPID_WMPCOREEVENT_MEDIACOLLECTIONMEDIAADDED: u32 = 5825u32;
pub const DISPID_WMPCOREEVENT_MEDIACOLLECTIONMEDIAREMOVED: u32 = 5826u32;
pub const DISPID_WMPCOREEVENT_MEDIACOLLECTIONSEARCHCOMPLETE: u32 = 5817u32;
pub const DISPID_WMPCOREEVENT_MEDIACOLLECTIONSEARCHFOUNDITEM: u32 = 5815u32;
pub const DISPID_WMPCOREEVENT_MEDIACOLLECTIONSEARCHPROGRESS: u32 = 5816u32;
pub const DISPID_WMPCOREEVENT_MEDIAERROR: u32 = 5821u32;
pub const DISPID_WMPCOREEVENT_MODECHANGE: u32 = 5819u32;
pub const DISPID_WMPCOREEVENT_NEWSTREAM: u32 = 5403u32;
pub const DISPID_WMPCOREEVENT_OPENPLAYLISTSWITCH: u32 = 5823u32;
pub const DISPID_WMPCOREEVENT_OPENSTATECHANGE: u32 = 5001u32;
pub const DISPID_WMPCOREEVENT_PLAYLISTCHANGE: u32 = 5801u32;
pub const DISPID_WMPCOREEVENT_PLAYLISTCOLLECTIONCHANGE: u32 = 5810u32;
pub const DISPID_WMPCOREEVENT_PLAYLISTCOLLECTIONPLAYLISTADDED: u32 = 5811u32;
pub const DISPID_WMPCOREEVENT_PLAYLISTCOLLECTIONPLAYLISTREMOVED: u32 = 5812u32;
pub const DISPID_WMPCOREEVENT_PLAYLISTCOLLECTIONPLAYLISTSETASDELETED: u32 = 5818u32;
pub const DISPID_WMPCOREEVENT_PLAYSTATECHANGE: u32 = 5101u32;
pub const DISPID_WMPCOREEVENT_POSITIONCHANGE: u32 = 5202u32;
pub const DISPID_WMPCOREEVENT_SCRIPTCOMMAND: u32 = 5301u32;
pub const DISPID_WMPCOREEVENT_STATUSCHANGE: u32 = 5002u32;
pub const DISPID_WMPCOREEVENT_STRINGCOLLECTIONCHANGE: u32 = 5824u32;
pub const DISPID_WMPCOREEVENT_WARNING: u32 = 5601u32;
pub const DISPID_WMPCORE_BASE: u32 = 0u32;
pub const DISPID_WMPCORE_CDROMCOLLECTION: u32 = 14u32;
pub const DISPID_WMPCORE_CLOSE: u32 = 3u32;
pub const DISPID_WMPCORE_CLOSEDCAPTION: u32 = 15u32;
pub const DISPID_WMPCORE_CONTROLS: u32 = 4u32;
pub const DISPID_WMPCORE_CURRENTMEDIA: u32 = 6u32;
pub const DISPID_WMPCORE_CURRENTPLAYLIST: u32 = 13u32;
pub const DISPID_WMPCORE_ERROR: u32 = 17u32;
pub const DISPID_WMPCORE_ISONLINE: u32 = 16u32;
pub const DISPID_WMPCORE_LAST: u32 = 18u32;
pub const DISPID_WMPCORE_LAUNCHURL: u32 = 12u32;
pub const DISPID_WMPCORE_MAX: u32 = 1454u32;
pub const DISPID_WMPCORE_MEDIACOLLECTION: u32 = 8u32;
pub const DISPID_WMPCORE_MIN: u32 = 1u32;
pub const DISPID_WMPCORE_NETWORK: u32 = 7u32;
pub const DISPID_WMPCORE_OPENSTATE: u32 = 2u32;
pub const DISPID_WMPCORE_PLAYLISTCOLLECTION: u32 = 9u32;
pub const DISPID_WMPCORE_PLAYSTATE: u32 = 10u32;
pub const DISPID_WMPCORE_SETTINGS: u32 = 5u32;
pub const DISPID_WMPCORE_STATUS: u32 = 18u32;
pub const DISPID_WMPCORE_URL: u32 = 1u32;
pub const DISPID_WMPCORE_VERSIONINFO: u32 = 11u32;
pub const DISPID_WMPDOWNLOADCOLLECTION_BASE: u32 = 1200u32;
pub const DISPID_WMPDOWNLOADCOLLECTION_CLEAR: u32 = 1206u32;
pub const DISPID_WMPDOWNLOADCOLLECTION_COUNT: u32 = 1202u32;
pub const DISPID_WMPDOWNLOADCOLLECTION_ID: u32 = 1201u32;
pub const DISPID_WMPDOWNLOADCOLLECTION_ITEM: u32 = 1203u32;
pub const DISPID_WMPDOWNLOADCOLLECTION_REMOVEITEM: u32 = 1205u32;
pub const DISPID_WMPDOWNLOADCOLLECTION_STARTDOWNLOAD: u32 = 1204u32;
pub const DISPID_WMPDOWNLOADITEM2_BASE: u32 = 1300u32;
pub const DISPID_WMPDOWNLOADITEM2_GETITEMINFO: u32 = 1301u32;
pub const DISPID_WMPDOWNLOADITEM_BASE: u32 = 1250u32;
pub const DISPID_WMPDOWNLOADITEM_CANCEL: u32 = 1258u32;
pub const DISPID_WMPDOWNLOADITEM_DOWNLOADSTATE: u32 = 1255u32;
pub const DISPID_WMPDOWNLOADITEM_PAUSE: u32 = 1256u32;
pub const DISPID_WMPDOWNLOADITEM_PROGRESS: u32 = 1254u32;
pub const DISPID_WMPDOWNLOADITEM_RESUME: u32 = 1257u32;
pub const DISPID_WMPDOWNLOADITEM_SIZE: u32 = 1252u32;
pub const DISPID_WMPDOWNLOADITEM_SOURCEURL: u32 = 1251u32;
pub const DISPID_WMPDOWNLOADITEM_TYPE: u32 = 1253u32;
pub const DISPID_WMPDOWNLOADMANAGER_BASE: u32 = 1150u32;
pub const DISPID_WMPDOWNLOADMANAGER_CREATEDOWNLOADCOLLECTION: u32 = 1152u32;
pub const DISPID_WMPDOWNLOADMANAGER_GETDOWNLOADCOLLECTION: u32 = 1151u32;
pub const DISPID_WMPDVD_BACK: u32 = 1005u32;
pub const DISPID_WMPDVD_BASE: u32 = 1000u32;
pub const DISPID_WMPDVD_DOMAIN: u32 = 1002u32;
pub const DISPID_WMPDVD_ISAVAILABLE: u32 = 1001u32;
pub const DISPID_WMPDVD_RESUME: u32 = 1006u32;
pub const DISPID_WMPDVD_TITLEMENU: u32 = 1004u32;
pub const DISPID_WMPDVD_TOPMENU: u32 = 1003u32;
pub const DISPID_WMPERRORITEM2_CONDITION: u32 = 906u32;
pub const DISPID_WMPERRORITEM_BASE: u32 = 900u32;
pub const DISPID_WMPERRORITEM_CUSTOMURL: u32 = 905u32;
pub const DISPID_WMPERRORITEM_ERRORCODE: u32 = 901u32;
pub const DISPID_WMPERRORITEM_ERRORCONTEXT: u32 = 903u32;
pub const DISPID_WMPERRORITEM_ERRORDESCRIPTION: u32 = 902u32;
pub const DISPID_WMPERRORITEM_REMEDY: u32 = 904u32;
pub const DISPID_WMPERROR_BASE: u32 = 850u32;
pub const DISPID_WMPERROR_CLEARERRORQUEUE: u32 = 851u32;
pub const DISPID_WMPERROR_ERRORCOUNT: u32 = 852u32;
pub const DISPID_WMPERROR_ITEM: u32 = 853u32;
pub const DISPID_WMPERROR_WEBHELP: u32 = 854u32;
pub const DISPID_WMPMEDIA2_ERROR: u32 = 768u32;
pub const DISPID_WMPMEDIA3_GETATTRIBUTECOUNTBYTYPE: u32 = 769u32;
pub const DISPID_WMPMEDIA3_GETITEMINFOBYTYPE: u32 = 770u32;
pub const DISPID_WMPMEDIACOLLECTION2_BASE: u32 = 1400u32;
pub const DISPID_WMPMEDIACOLLECTION2_CREATEQUERY: u32 = 1401u32;
pub const DISPID_WMPMEDIACOLLECTION2_GETBYATTRANDMEDIATYPE: u32 = 1404u32;
pub const DISPID_WMPMEDIACOLLECTION2_GETPLAYLISTBYQUERY: u32 = 1402u32;
pub const DISPID_WMPMEDIACOLLECTION2_GETSTRINGCOLLBYQUERY: u32 = 1403u32;
pub const DISPID_WMPMEDIACOLLECTION_ADD: u32 = 452u32;
pub const DISPID_WMPMEDIACOLLECTION_BASE: u32 = 450u32;
pub const DISPID_WMPMEDIACOLLECTION_FREEZECOLLECTIONCHANGE: u32 = 474u32;
pub const DISPID_WMPMEDIACOLLECTION_GETALL: u32 = 453u32;
pub const DISPID_WMPMEDIACOLLECTION_GETATTRIBUTESTRINGCOLLECTION: u32 = 461u32;
pub const DISPID_WMPMEDIACOLLECTION_GETBYALBUM: u32 = 457u32;
pub const DISPID_WMPMEDIACOLLECTION_GETBYATTRIBUTE: u32 = 458u32;
pub const DISPID_WMPMEDIACOLLECTION_GETBYAUTHOR: u32 = 456u32;
pub const DISPID_WMPMEDIACOLLECTION_GETBYGENRE: u32 = 455u32;
pub const DISPID_WMPMEDIACOLLECTION_GETBYNAME: u32 = 454u32;
pub const DISPID_WMPMEDIACOLLECTION_GETBYQUERYDESCRIPTION: u32 = 473u32;
pub const DISPID_WMPMEDIACOLLECTION_GETMEDIAATOM: u32 = 470u32;
pub const DISPID_WMPMEDIACOLLECTION_ISDELETED: u32 = 472u32;
pub const DISPID_WMPMEDIACOLLECTION_NEWQUERY: u32 = 462u32;
pub const DISPID_WMPMEDIACOLLECTION_POSTCOLLECTIONCHANGE: u32 = 476u32;
pub const DISPID_WMPMEDIACOLLECTION_REMOVE: u32 = 459u32;
pub const DISPID_WMPMEDIACOLLECTION_SETDELETED: u32 = 471u32;
pub const DISPID_WMPMEDIACOLLECTION_STARTCONTENTSCAN: u32 = 465u32;
pub const DISPID_WMPMEDIACOLLECTION_STARTMONITORING: u32 = 463u32;
pub const DISPID_WMPMEDIACOLLECTION_STARTSEARCH: u32 = 467u32;
pub const DISPID_WMPMEDIACOLLECTION_STOPCONTENTSCAN: u32 = 466u32;
pub const DISPID_WMPMEDIACOLLECTION_STOPMONITORING: u32 = 464u32;
pub const DISPID_WMPMEDIACOLLECTION_STOPSEARCH: u32 = 468u32;
pub const DISPID_WMPMEDIACOLLECTION_UNFREEZECOLLECTIONCHANGE: u32 = 475u32;
pub const DISPID_WMPMEDIACOLLECTION_UPDATEMETADATA: u32 = 469u32;
pub const DISPID_WMPMEDIA_ATTRIBUTECOUNT: u32 = 759u32;
pub const DISPID_WMPMEDIA_BASE: u32 = 750u32;
pub const DISPID_WMPMEDIA_DURATION: u32 = 757u32;
pub const DISPID_WMPMEDIA_DURATIONSTRING: u32 = 758u32;
pub const DISPID_WMPMEDIA_GETATTRIBUTENAME: u32 = 760u32;
pub const DISPID_WMPMEDIA_GETITEMINFO: u32 = 761u32;
pub const DISPID_WMPMEDIA_GETITEMINFOBYATOM: u32 = 765u32;
pub const DISPID_WMPMEDIA_GETMARKERNAME: u32 = 756u32;
pub const DISPID_WMPMEDIA_GETMARKERTIME: u32 = 755u32;
pub const DISPID_WMPMEDIA_IMAGESOURCEHEIGHT: u32 = 753u32;
pub const DISPID_WMPMEDIA_IMAGESOURCEWIDTH: u32 = 752u32;
pub const DISPID_WMPMEDIA_ISIDENTICAL: u32 = 763u32;
pub const DISPID_WMPMEDIA_ISMEMBEROF: u32 = 766u32;
pub const DISPID_WMPMEDIA_ISREADONLYITEM: u32 = 767u32;
pub const DISPID_WMPMEDIA_MARKERCOUNT: u32 = 754u32;
pub const DISPID_WMPMEDIA_NAME: u32 = 764u32;
pub const DISPID_WMPMEDIA_SETITEMINFO: u32 = 762u32;
pub const DISPID_WMPMEDIA_SOURCEURL: u32 = 751u32;
pub const DISPID_WMPMETADATA_BASE: u32 = 1050u32;
pub const DISPID_WMPMETADATA_PICTURE_DESCRIPTION: u32 = 1053u32;
pub const DISPID_WMPMETADATA_PICTURE_MIMETYPE: u32 = 1051u32;
pub const DISPID_WMPMETADATA_PICTURE_PICTURETYPE: u32 = 1052u32;
pub const DISPID_WMPMETADATA_PICTURE_URL: u32 = 1054u32;
pub const DISPID_WMPMETADATA_TEXT_DESCRIPTION: u32 = 1056u32;
pub const DISPID_WMPMETADATA_TEXT_TEXT: u32 = 1055u32;
pub const DISPID_WMPNETWORK_BANDWIDTH: u32 = 801u32;
pub const DISPID_WMPNETWORK_BASE: u32 = 800u32;
pub const DISPID_WMPNETWORK_BITRATE: u32 = 812u32;
pub const DISPID_WMPNETWORK_BUFFERINGCOUNT: u32 = 807u32;
pub const DISPID_WMPNETWORK_BUFFERINGPROGRESS: u32 = 808u32;
pub const DISPID_WMPNETWORK_BUFFERINGTIME: u32 = 809u32;
pub const DISPID_WMPNETWORK_DOWNLOADPROGRESS: u32 = 824u32;
pub const DISPID_WMPNETWORK_ENCODEDFRAMERATE: u32 = 825u32;
pub const DISPID_WMPNETWORK_FRAMERATE: u32 = 810u32;
pub const DISPID_WMPNETWORK_FRAMESSKIPPED: u32 = 826u32;
pub const DISPID_WMPNETWORK_GETPROXYBYPASSFORLOCAL: u32 = 821u32;
pub const DISPID_WMPNETWORK_GETPROXYEXCEPTIONLIST: u32 = 819u32;
pub const DISPID_WMPNETWORK_GETPROXYNAME: u32 = 815u32;
pub const DISPID_WMPNETWORK_GETPROXYPORT: u32 = 817u32;
pub const DISPID_WMPNETWORK_GETPROXYSETTINGS: u32 = 813u32;
pub const DISPID_WMPNETWORK_LOSTPACKETS: u32 = 805u32;
pub const DISPID_WMPNETWORK_MAXBANDWIDTH: u32 = 823u32;
pub const DISPID_WMPNETWORK_MAXBITRATE: u32 = 811u32;
pub const DISPID_WMPNETWORK_RECEIVEDPACKETS: u32 = 804u32;
pub const DISPID_WMPNETWORK_RECEPTIONQUALITY: u32 = 806u32;
pub const DISPID_WMPNETWORK_RECOVEREDPACKETS: u32 = 802u32;
pub const DISPID_WMPNETWORK_SETPROXYBYPASSFORLOCAL: u32 = 822u32;
pub const DISPID_WMPNETWORK_SETPROXYEXCEPTIONLIST: u32 = 820u32;
pub const DISPID_WMPNETWORK_SETPROXYNAME: u32 = 816u32;
pub const DISPID_WMPNETWORK_SETPROXYPORT: u32 = 818u32;
pub const DISPID_WMPNETWORK_SETPROXYSETTINGS: u32 = 814u32;
pub const DISPID_WMPNETWORK_SOURCEPROTOCOL: u32 = 803u32;
pub const DISPID_WMPOCX2_BASE: u32 = 23u32;
pub const DISPID_WMPOCX2_STRETCHTOFIT: u32 = 24u32;
pub const DISPID_WMPOCX2_WINDOWLESSVIDEO: u32 = 25u32;
pub const DISPID_WMPOCX4_ISREMOTE: u32 = 26u32;
pub const DISPID_WMPOCX4_OPENPLAYER: u32 = 28u32;
pub const DISPID_WMPOCX4_PLAYERAPPLICATION: u32 = 27u32;
pub const DISPID_WMPOCXEVENT_CDROMBURNERROR: u32 = 6523u32;
pub const DISPID_WMPOCXEVENT_CDROMBURNMEDIAERROR: u32 = 6522u32;
pub const DISPID_WMPOCXEVENT_CDROMBURNSTATECHANGE: u32 = 6521u32;
pub const DISPID_WMPOCXEVENT_CDROMRIPMEDIAERROR: u32 = 6520u32;
pub const DISPID_WMPOCXEVENT_CDROMRIPSTATECHANGE: u32 = 6519u32;
pub const DISPID_WMPOCXEVENT_CLICK: u32 = 6505u32;
pub const DISPID_WMPOCXEVENT_CREATEPARTNERSHIPCOMPLETE: u32 = 6518u32;
pub const DISPID_WMPOCXEVENT_DEVICECONNECT: u32 = 6513u32;
pub const DISPID_WMPOCXEVENT_DEVICEDISCONNECT: u32 = 6514u32;
pub const DISPID_WMPOCXEVENT_DEVICEESTIMATION: u32 = 6527u32;
pub const DISPID_WMPOCXEVENT_DEVICESTATUSCHANGE: u32 = 6515u32;
pub const DISPID_WMPOCXEVENT_DEVICESYNCERROR: u32 = 6517u32;
pub const DISPID_WMPOCXEVENT_DEVICESYNCSTATECHANGE: u32 = 6516u32;
pub const DISPID_WMPOCXEVENT_DOUBLECLICK: u32 = 6506u32;
pub const DISPID_WMPOCXEVENT_FOLDERSCANSTATECHANGE: u32 = 6526u32;
pub const DISPID_WMPOCXEVENT_KEYDOWN: u32 = 6507u32;
pub const DISPID_WMPOCXEVENT_KEYPRESS: u32 = 6508u32;
pub const DISPID_WMPOCXEVENT_KEYUP: u32 = 6509u32;
pub const DISPID_WMPOCXEVENT_LIBRARYCONNECT: u32 = 6524u32;
pub const DISPID_WMPOCXEVENT_LIBRARYDISCONNECT: u32 = 6525u32;
pub const DISPID_WMPOCXEVENT_MOUSEDOWN: u32 = 6510u32;
pub const DISPID_WMPOCXEVENT_MOUSEMOVE: u32 = 6511u32;
pub const DISPID_WMPOCXEVENT_MOUSEUP: u32 = 6512u32;
pub const DISPID_WMPOCXEVENT_PLAYERDOCKEDSTATECHANGE: u32 = 6503u32;
pub const DISPID_WMPOCXEVENT_PLAYERRECONNECT: u32 = 6504u32;
pub const DISPID_WMPOCXEVENT_SWITCHEDTOCONTROL: u32 = 6502u32;
pub const DISPID_WMPOCXEVENT_SWITCHEDTOPLAYERAPPLICATION: u32 = 6501u32;
pub const DISPID_WMPOCX_BASE: u32 = 18u32;
pub const DISPID_WMPOCX_ENABLECONTEXTMENU: u32 = 22u32;
pub const DISPID_WMPOCX_ENABLED: u32 = 19u32;
pub const DISPID_WMPOCX_FULLSCREEN: u32 = 21u32;
pub const DISPID_WMPOCX_LAST: u32 = 23u32;
pub const DISPID_WMPOCX_TRANSPARENTATSTART: u32 = 20u32;
pub const DISPID_WMPOCX_UIMODE: u32 = 23u32;
pub const DISPID_WMPPLAYERAPP_BASE: u32 = 1100u32;
pub const DISPID_WMPPLAYERAPP_HASDISPLAY: u32 = 1104u32;
pub const DISPID_WMPPLAYERAPP_PLAYERDOCKED: u32 = 1103u32;
pub const DISPID_WMPPLAYERAPP_REMOTESTATUS: u32 = 1105u32;
pub const DISPID_WMPPLAYERAPP_SWITCHTOCONTROL: u32 = 1102u32;
pub const DISPID_WMPPLAYERAPP_SWITCHTOPLAYERAPPLICATION: u32 = 1101u32;
pub const DISPID_WMPPLAYLISTARRAY_BASE: u32 = 500u32;
pub const DISPID_WMPPLAYLISTARRAY_COUNT: u32 = 501u32;
pub const DISPID_WMPPLAYLISTARRAY_ITEM: u32 = 502u32;
pub const DISPID_WMPPLAYLISTCOLLECTION_BASE: u32 = 550u32;
pub const DISPID_WMPPLAYLISTCOLLECTION_GETALL: u32 = 553u32;
pub const DISPID_WMPPLAYLISTCOLLECTION_GETBYNAME: u32 = 554u32;
pub const DISPID_WMPPLAYLISTCOLLECTION_GETBYQUERYDESCRIPTION: u32 = 555u32;
pub const DISPID_WMPPLAYLISTCOLLECTION_IMPORTPLAYLIST: u32 = 562u32;
pub const DISPID_WMPPLAYLISTCOLLECTION_ISDELETED: u32 = 561u32;
pub const DISPID_WMPPLAYLISTCOLLECTION_NEWPLAYLIST: u32 = 552u32;
pub const DISPID_WMPPLAYLISTCOLLECTION_NEWQUERY: u32 = 557u32;
pub const DISPID_WMPPLAYLISTCOLLECTION_REMOVE: u32 = 556u32;
pub const DISPID_WMPPLAYLISTCOLLECTION_SETDELETED: u32 = 560u32;
pub const DISPID_WMPPLAYLISTCOLLECTION_STARTMONITORING: u32 = 558u32;
pub const DISPID_WMPPLAYLISTCOLLECTION_STOPMONITORING: u32 = 559u32;
pub const DISPID_WMPPLAYLIST_APPENDITEM: u32 = 207u32;
pub const DISPID_WMPPLAYLIST_ATTRIBUTECOUNT: u32 = 210u32;
pub const DISPID_WMPPLAYLIST_ATTRIBUTENAME: u32 = 211u32;
pub const DISPID_WMPPLAYLIST_BASE: u32 = 200u32;
pub const DISPID_WMPPLAYLIST_CLEAR: u32 = 205u32;
pub const DISPID_WMPPLAYLIST_COUNT: u32 = 201u32;
pub const DISPID_WMPPLAYLIST_GETITEMINFO: u32 = 203u32;
pub const DISPID_WMPPLAYLIST_INSERTITEM: u32 = 206u32;
pub const DISPID_WMPPLAYLIST_ISIDENTICAL: u32 = 213u32;
pub const DISPID_WMPPLAYLIST_ITEM: u32 = 212u32;
pub const DISPID_WMPPLAYLIST_MOVEITEM: u32 = 209u32;
pub const DISPID_WMPPLAYLIST_NAME: u32 = 202u32;
pub const DISPID_WMPPLAYLIST_REMOVEITEM: u32 = 208u32;
pub const DISPID_WMPPLAYLIST_SETITEMINFO: u32 = 204u32;
pub const DISPID_WMPQUERY_ADDCONDITION: u32 = 1351u32;
pub const DISPID_WMPQUERY_BASE: u32 = 1350u32;
pub const DISPID_WMPQUERY_BEGINNEXTGROUP: u32 = 1352u32;
pub const DISPID_WMPSETTINGS2_DEFAULTAUDIOLANGUAGE: u32 = 114u32;
pub const DISPID_WMPSETTINGS2_LIBRARYACCESSRIGHTS: u32 = 115u32;
pub const DISPID_WMPSETTINGS2_REQUESTLIBRARYACCESSRIGHTS: u32 = 116u32;
pub const DISPID_WMPSETTINGS_AUTOSTART: u32 = 101u32;
pub const DISPID_WMPSETTINGS_BALANCE: u32 = 102u32;
pub const DISPID_WMPSETTINGS_BASE: u32 = 100u32;
pub const DISPID_WMPSETTINGS_BASEURL: u32 = 108u32;
pub const DISPID_WMPSETTINGS_DEFAULTFRAME: u32 = 109u32;
pub const DISPID_WMPSETTINGS_ENABLEERRORDIALOGS: u32 = 112u32;
pub const DISPID_WMPSETTINGS_GETMODE: u32 = 110u32;
pub const DISPID_WMPSETTINGS_INVOKEURLS: u32 = 103u32;
pub const DISPID_WMPSETTINGS_ISAVAILABLE: u32 = 113u32;
pub const DISPID_WMPSETTINGS_MUTE: u32 = 104u32;
pub const DISPID_WMPSETTINGS_PLAYCOUNT: u32 = 105u32;
pub const DISPID_WMPSETTINGS_RATE: u32 = 106u32;
pub const DISPID_WMPSETTINGS_SETMODE: u32 = 111u32;
pub const DISPID_WMPSETTINGS_VOLUME: u32 = 107u32;
pub const DISPID_WMPSTRINGCOLLECTION2_BASE: u32 = 1450u32;
pub const DISPID_WMPSTRINGCOLLECTION2_GETATTRCOUNTBYTYPE: u32 = 1453u32;
pub const DISPID_WMPSTRINGCOLLECTION2_GETITEMINFO: u32 = 1452u32;
pub const DISPID_WMPSTRINGCOLLECTION2_GETITEMINFOBYTYPE: u32 = 1454u32;
pub const DISPID_WMPSTRINGCOLLECTION2_ISIDENTICAL: u32 = 1451u32;
pub const DISPID_WMPSTRINGCOLLECTION_BASE: u32 = 400u32;
pub const DISPID_WMPSTRINGCOLLECTION_COUNT: u32 = 401u32;
pub const DISPID_WMPSTRINGCOLLECTION_ITEM: u32 = 402u32;
pub const EFFECT2_FULLSCREENEXCLUSIVE: u32 = 16u32;
pub const EFFECT_CANGOFULLSCREEN: u32 = 1u32;
pub const EFFECT_HASPROPERTYPAGE: u32 = 2u32;
pub const EFFECT_VARIABLEFREQSTEP: u32 = 4u32;
pub const EFFECT_WINDOWEDONLY: u32 = 8u32;
#[repr(transparent)]
pub struct FEEDS_BACKGROUNDSYNC_ACTION(pub i32);
pub const FBSA_DISABLE: FEEDS_BACKGROUNDSYNC_ACTION = FEEDS_BACKGROUNDSYNC_ACTION(0i32);
pub const FBSA_ENABLE: FEEDS_BACKGROUNDSYNC_ACTION = FEEDS_BACKGROUNDSYNC_ACTION(1i32);
pub const FBSA_RUNNOW: FEEDS_BACKGROUNDSYNC_ACTION = FEEDS_BACKGROUNDSYNC_ACTION(2i32);
impl ::core::marker::Copy for FEEDS_BACKGROUNDSYNC_ACTION {}
impl ::core::clone::Clone for FEEDS_BACKGROUNDSYNC_ACTION {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct FEEDS_BACKGROUNDSYNC_STATUS(pub i32);
pub const FBSS_DISABLED: FEEDS_BACKGROUNDSYNC_STATUS = FEEDS_BACKGROUNDSYNC_STATUS(0i32);
pub const FBSS_ENABLED: FEEDS_BACKGROUNDSYNC_STATUS = FEEDS_BACKGROUNDSYNC_STATUS(1i32);
impl ::core::marker::Copy for FEEDS_BACKGROUNDSYNC_STATUS {}
impl ::core::clone::Clone for FEEDS_BACKGROUNDSYNC_STATUS {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct FEEDS_DOWNLOAD_ERROR(pub i32);
pub const FDE_NONE: FEEDS_DOWNLOAD_ERROR = FEEDS_DOWNLOAD_ERROR(0i32);
pub const FDE_DOWNLOAD_FAILED: FEEDS_DOWNLOAD_ERROR = FEEDS_DOWNLOAD_ERROR(1i32);
pub const FDE_INVALID_FEED_FORMAT: FEEDS_DOWNLOAD_ERROR = FEEDS_DOWNLOAD_ERROR(2i32);
pub const FDE_NORMALIZATION_FAILED: FEEDS_DOWNLOAD_ERROR = FEEDS_DOWNLOAD_ERROR(3i32);
pub const FDE_PERSISTENCE_FAILED: FEEDS_DOWNLOAD_ERROR = FEEDS_DOWNLOAD_ERROR(4i32);
pub const FDE_DOWNLOAD_BLOCKED: FEEDS_DOWNLOAD_ERROR = FEEDS_DOWNLOAD_ERROR(5i32);
pub const FDE_CANCELED: FEEDS_DOWNLOAD_ERROR = FEEDS_DOWNLOAD_ERROR(6i32);
pub const FDE_UNSUPPORTED_AUTH: FEEDS_DOWNLOAD_ERROR = FEEDS_DOWNLOAD_ERROR(7i32);
pub const FDE_BACKGROUND_DOWNLOAD_DISABLED: FEEDS_DOWNLOAD_ERROR = FEEDS_DOWNLOAD_ERROR(8i32);
pub const FDE_NOT_EXIST: FEEDS_DOWNLOAD_ERROR = FEEDS_DOWNLOAD_ERROR(9i32);
pub const FDE_UNSUPPORTED_MSXML: FEEDS_DOWNLOAD_ERROR = FEEDS_DOWNLOAD_ERROR(10i32);
pub const FDE_UNSUPPORTED_DTD: FEEDS_DOWNLOAD_ERROR = FEEDS_DOWNLOAD_ERROR(11i32);
pub const FDE_DOWNLOAD_SIZE_LIMIT_EXCEEDED: FEEDS_DOWNLOAD_ERROR = FEEDS_DOWNLOAD_ERROR(12i32);
pub const FDE_ACCESS_DENIED: FEEDS_DOWNLOAD_ERROR = FEEDS_DOWNLOAD_ERROR(13i32);
pub const FDE_AUTH_FAILED: FEEDS_DOWNLOAD_ERROR = FEEDS_DOWNLOAD_ERROR(14i32);
pub const FDE_INVALID_AUTH: FEEDS_DOWNLOAD_ERROR = FEEDS_DOWNLOAD_ERROR(15i32);
impl ::core::marker::Copy for FEEDS_DOWNLOAD_ERROR {}
impl ::core::clone::Clone for FEEDS_DOWNLOAD_ERROR {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct FEEDS_DOWNLOAD_STATUS(pub i32);
pub const FDS_NONE: FEEDS_DOWNLOAD_STATUS = FEEDS_DOWNLOAD_STATUS(0i32);
pub const FDS_PENDING: FEEDS_DOWNLOAD_STATUS = FEEDS_DOWNLOAD_STATUS(1i32);
pub const FDS_DOWNLOADING: FEEDS_DOWNLOAD_STATUS = FEEDS_DOWNLOAD_STATUS(2i32);
pub const FDS_DOWNLOADED: FEEDS_DOWNLOAD_STATUS = FEEDS_DOWNLOAD_STATUS(3i32);
pub const FDS_DOWNLOAD_FAILED: FEEDS_DOWNLOAD_STATUS = FEEDS_DOWNLOAD_STATUS(4i32);
impl ::core::marker::Copy for FEEDS_DOWNLOAD_STATUS {}
impl ::core::clone::Clone for FEEDS_DOWNLOAD_STATUS {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct FEEDS_ERROR_CODE(pub i32);
pub const FEC_E_ERRORBASE: FEEDS_ERROR_CODE = FEEDS_ERROR_CODE(-1073479168i32);
pub const FEC_E_INVALIDMSXMLPROPERTY: FEEDS_ERROR_CODE = FEEDS_ERROR_CODE(-1073479168i32);
pub const FEC_E_DOWNLOADSIZELIMITEXCEEDED: FEEDS_ERROR_CODE = FEEDS_ERROR_CODE(-1073479167i32);
impl ::core::marker::Copy for FEEDS_ERROR_CODE {}
impl ::core::clone::Clone for FEEDS_ERROR_CODE {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct FEEDS_EVENTS_ITEM_COUNT_FLAGS(pub i32);
pub const FEICF_READ_ITEM_COUNT_CHANGED: FEEDS_EVENTS_ITEM_COUNT_FLAGS = FEEDS_EVENTS_ITEM_COUNT_FLAGS(1i32);
pub const FEICF_UNREAD_ITEM_COUNT_CHANGED: FEEDS_EVENTS_ITEM_COUNT_FLAGS = FEEDS_EVENTS_ITEM_COUNT_FLAGS(2i32);
impl ::core::marker::Copy for FEEDS_EVENTS_ITEM_COUNT_FLAGS {}
impl ::core::clone::Clone for FEEDS_EVENTS_ITEM_COUNT_FLAGS {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct FEEDS_EVENTS_MASK(pub i32);
pub const FEM_FOLDEREVENTS: FEEDS_EVENTS_MASK = FEEDS_EVENTS_MASK(1i32);
pub const FEM_FEEDEVENTS: FEEDS_EVENTS_MASK = FEEDS_EVENTS_MASK(2i32);
impl ::core::marker::Copy for FEEDS_EVENTS_MASK {}
impl ::core::clone::Clone for FEEDS_EVENTS_MASK {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct FEEDS_EVENTS_SCOPE(pub i32);
pub const FES_ALL: FEEDS_EVENTS_SCOPE = FEEDS_EVENTS_SCOPE(0i32);
pub const FES_SELF_ONLY: FEEDS_EVENTS_SCOPE = FEEDS_EVENTS_SCOPE(1i32);
pub const FES_SELF_AND_CHILDREN_ONLY: FEEDS_EVENTS_SCOPE = FEEDS_EVENTS_SCOPE(2i32);
impl ::core::marker::Copy for FEEDS_EVENTS_SCOPE {}
impl ::core::clone::Clone for FEEDS_EVENTS_SCOPE {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct FEEDS_SYNC_SETTING(pub i32);
pub const FSS_DEFAULT: FEEDS_SYNC_SETTING = FEEDS_SYNC_SETTING(0i32);
pub const FSS_INTERVAL: FEEDS_SYNC_SETTING = FEEDS_SYNC_SETTING(1i32);
pub const FSS_MANUAL: FEEDS_SYNC_SETTING = FEEDS_SYNC_SETTING(2i32);
pub const FSS_SUGGESTED: FEEDS_SYNC_SETTING = FEEDS_SYNC_SETTING(3i32);
impl ::core::marker::Copy for FEEDS_SYNC_SETTING {}
impl ::core::clone::Clone for FEEDS_SYNC_SETTING {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct FEEDS_XML_FILTER_FLAGS(pub i32);
pub const FXFF_ALL: FEEDS_XML_FILTER_FLAGS = FEEDS_XML_FILTER_FLAGS(0i32);
pub const FXFF_UNREAD: FEEDS_XML_FILTER_FLAGS = FEEDS_XML_FILTER_FLAGS(1i32);
pub const FXFF_READ: FEEDS_XML_FILTER_FLAGS = FEEDS_XML_FILTER_FLAGS(2i32);
impl ::core::marker::Copy for FEEDS_XML_FILTER_FLAGS {}
impl ::core::clone::Clone for FEEDS_XML_FILTER_FLAGS {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct FEEDS_XML_INCLUDE_FLAGS(pub i32);
pub const FXIF_NONE: FEEDS_XML_INCLUDE_FLAGS = FEEDS_XML_INCLUDE_FLAGS(0i32);
pub const FXIF_CF_EXTENSIONS: FEEDS_XML_INCLUDE_FLAGS = FEEDS_XML_INCLUDE_FLAGS(1i32);
impl ::core::marker::Copy for FEEDS_XML_INCLUDE_FLAGS {}
impl ::core::clone::Clone for FEEDS_XML_INCLUDE_FLAGS {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct FEEDS_XML_SORT_ORDER(pub i32);
pub const FXSO_NONE: FEEDS_XML_SORT_ORDER = FEEDS_XML_SORT_ORDER(0i32);
pub const FXSO_ASCENDING: FEEDS_XML_SORT_ORDER = FEEDS_XML_SORT_ORDER(1i32);
pub const FXSO_DESCENDING: FEEDS_XML_SORT_ORDER = FEEDS_XML_SORT_ORDER(2i32);
impl ::core::marker::Copy for FEEDS_XML_SORT_ORDER {}
impl ::core::clone::Clone for FEEDS_XML_SORT_ORDER {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct FEEDS_XML_SORT_PROPERTY(pub i32);
pub const FXSP_NONE: FEEDS_XML_SORT_PROPERTY = FEEDS_XML_SORT_PROPERTY(0i32);
pub const FXSP_PUBDATE: FEEDS_XML_SORT_PROPERTY = FEEDS_XML_SORT_PROPERTY(1i32);
pub const FXSP_DOWNLOADTIME: FEEDS_XML_SORT_PROPERTY = FEEDS_XML_SORT_PROPERTY(2i32);
impl ::core::marker::Copy for FEEDS_XML_SORT_PROPERTY {}
impl ::core::clone::Clone for FEEDS_XML_SORT_PROPERTY {
    fn clone(&self) -> Self {
        *self
    }
}
pub const FeedFolderWatcher: ::windows_sys::core::GUID = ::windows_sys::core::GUID {
    data1: 672137709,
    data2: 30565,
    data3: 19632,
    data4: [132, 175, 233, 179, 135, 175, 1, 255],
};
pub const FeedWatcher: ::windows_sys::core::GUID = ::windows_sys::core::GUID {
    data1: 413561723,
    data2: 62515,
    data3: 18055,
    data4: [137, 188, 161, 180, 223, 185, 241, 35],
};
pub const FeedsManager: ::windows_sys::core::GUID = ::windows_sys::core::GUID {
    data1: 4209726660,
    data2: 63087,
    data3: 18438,
    data4: [131, 160, 128, 82, 153, 245, 227, 173],
};
#[repr(transparent)]
pub struct IFeed(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IFeed {}
impl ::core::clone::Clone for IFeed {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IFeed2(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IFeed2 {}
impl ::core::clone::Clone for IFeed2 {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IFeedEnclosure(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IFeedEnclosure {}
impl ::core::clone::Clone for IFeedEnclosure {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IFeedEvents(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IFeedEvents {}
impl ::core::clone::Clone for IFeedEvents {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IFeedFolder(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IFeedFolder {}
impl ::core::clone::Clone for IFeedFolder {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IFeedFolderEvents(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IFeedFolderEvents {}
impl ::core::clone::Clone for IFeedFolderEvents {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IFeedItem(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IFeedItem {}
impl ::core::clone::Clone for IFeedItem {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IFeedItem2(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IFeedItem2 {}
impl ::core::clone::Clone for IFeedItem2 {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IFeedsEnum(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IFeedsEnum {}
impl ::core::clone::Clone for IFeedsEnum {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IFeedsManager(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IFeedsManager {}
impl ::core::clone::Clone for IFeedsManager {
    fn clone(&self) -> Self {
        *self
    }
}
pub const IOCTL_WMP_DEVICE_CAN_SYNC: u32 = 844123479u32;
pub const IOCTL_WMP_METADATA_ROUND_TRIP: u32 = 827346263u32;
#[repr(transparent)]
pub struct IWMPAudioRenderConfig(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPAudioRenderConfig {}
impl ::core::clone::Clone for IWMPAudioRenderConfig {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPCdrom(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPCdrom {}
impl ::core::clone::Clone for IWMPCdrom {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPCdromBurn(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPCdromBurn {}
impl ::core::clone::Clone for IWMPCdromBurn {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPCdromCollection(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPCdromCollection {}
impl ::core::clone::Clone for IWMPCdromCollection {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPCdromRip(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPCdromRip {}
impl ::core::clone::Clone for IWMPCdromRip {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPClosedCaption(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPClosedCaption {}
impl ::core::clone::Clone for IWMPClosedCaption {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPClosedCaption2(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPClosedCaption2 {}
impl ::core::clone::Clone for IWMPClosedCaption2 {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPContentContainer(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPContentContainer {}
impl ::core::clone::Clone for IWMPContentContainer {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPContentContainerList(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPContentContainerList {}
impl ::core::clone::Clone for IWMPContentContainerList {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPContentPartner(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPContentPartner {}
impl ::core::clone::Clone for IWMPContentPartner {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPContentPartnerCallback(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPContentPartnerCallback {}
impl ::core::clone::Clone for IWMPContentPartnerCallback {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPControls(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPControls {}
impl ::core::clone::Clone for IWMPControls {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPControls2(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPControls2 {}
impl ::core::clone::Clone for IWMPControls2 {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPControls3(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPControls3 {}
impl ::core::clone::Clone for IWMPControls3 {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPConvert(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPConvert {}
impl ::core::clone::Clone for IWMPConvert {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPCore(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPCore {}
impl ::core::clone::Clone for IWMPCore {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPCore2(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPCore2 {}
impl ::core::clone::Clone for IWMPCore2 {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPCore3(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPCore3 {}
impl ::core::clone::Clone for IWMPCore3 {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPDVD(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPDVD {}
impl ::core::clone::Clone for IWMPDVD {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPDownloadCollection(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPDownloadCollection {}
impl ::core::clone::Clone for IWMPDownloadCollection {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPDownloadItem(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPDownloadItem {}
impl ::core::clone::Clone for IWMPDownloadItem {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPDownloadItem2(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPDownloadItem2 {}
impl ::core::clone::Clone for IWMPDownloadItem2 {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPDownloadManager(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPDownloadManager {}
impl ::core::clone::Clone for IWMPDownloadManager {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPEffects(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPEffects {}
impl ::core::clone::Clone for IWMPEffects {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPEffects2(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPEffects2 {}
impl ::core::clone::Clone for IWMPEffects2 {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPError(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPError {}
impl ::core::clone::Clone for IWMPError {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPErrorItem(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPErrorItem {}
impl ::core::clone::Clone for IWMPErrorItem {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPErrorItem2(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPErrorItem2 {}
impl ::core::clone::Clone for IWMPErrorItem2 {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPEvents(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPEvents {}
impl ::core::clone::Clone for IWMPEvents {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPEvents2(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPEvents2 {}
impl ::core::clone::Clone for IWMPEvents2 {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPEvents3(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPEvents3 {}
impl ::core::clone::Clone for IWMPEvents3 {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPEvents4(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPEvents4 {}
impl ::core::clone::Clone for IWMPEvents4 {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPFolderMonitorServices(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPFolderMonitorServices {}
impl ::core::clone::Clone for IWMPFolderMonitorServices {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPGraphCreation(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPGraphCreation {}
impl ::core::clone::Clone for IWMPGraphCreation {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPLibrary(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPLibrary {}
impl ::core::clone::Clone for IWMPLibrary {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPLibrary2(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPLibrary2 {}
impl ::core::clone::Clone for IWMPLibrary2 {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPLibraryServices(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPLibraryServices {}
impl ::core::clone::Clone for IWMPLibraryServices {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPLibrarySharingServices(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPLibrarySharingServices {}
impl ::core::clone::Clone for IWMPLibrarySharingServices {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPMedia(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPMedia {}
impl ::core::clone::Clone for IWMPMedia {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPMedia2(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPMedia2 {}
impl ::core::clone::Clone for IWMPMedia2 {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPMedia3(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPMedia3 {}
impl ::core::clone::Clone for IWMPMedia3 {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPMediaCollection(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPMediaCollection {}
impl ::core::clone::Clone for IWMPMediaCollection {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPMediaCollection2(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPMediaCollection2 {}
impl ::core::clone::Clone for IWMPMediaCollection2 {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPMediaPluginRegistrar(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPMediaPluginRegistrar {}
impl ::core::clone::Clone for IWMPMediaPluginRegistrar {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPMetadataPicture(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPMetadataPicture {}
impl ::core::clone::Clone for IWMPMetadataPicture {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPMetadataText(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPMetadataText {}
impl ::core::clone::Clone for IWMPMetadataText {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPNetwork(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPNetwork {}
impl ::core::clone::Clone for IWMPNetwork {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPNodeRealEstate(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPNodeRealEstate {}
impl ::core::clone::Clone for IWMPNodeRealEstate {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPNodeRealEstateHost(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPNodeRealEstateHost {}
impl ::core::clone::Clone for IWMPNodeRealEstateHost {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPNodeWindowed(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPNodeWindowed {}
impl ::core::clone::Clone for IWMPNodeWindowed {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPNodeWindowedHost(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPNodeWindowedHost {}
impl ::core::clone::Clone for IWMPNodeWindowedHost {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPNodeWindowless(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPNodeWindowless {}
impl ::core::clone::Clone for IWMPNodeWindowless {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPNodeWindowlessHost(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPNodeWindowlessHost {}
impl ::core::clone::Clone for IWMPNodeWindowlessHost {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPPlayer(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPPlayer {}
impl ::core::clone::Clone for IWMPPlayer {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPPlayer2(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPPlayer2 {}
impl ::core::clone::Clone for IWMPPlayer2 {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPPlayer3(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPPlayer3 {}
impl ::core::clone::Clone for IWMPPlayer3 {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPPlayer4(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPPlayer4 {}
impl ::core::clone::Clone for IWMPPlayer4 {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPPlayerApplication(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPPlayerApplication {}
impl ::core::clone::Clone for IWMPPlayerApplication {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPPlayerServices(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPPlayerServices {}
impl ::core::clone::Clone for IWMPPlayerServices {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPPlayerServices2(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPPlayerServices2 {}
impl ::core::clone::Clone for IWMPPlayerServices2 {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPPlaylist(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPPlaylist {}
impl ::core::clone::Clone for IWMPPlaylist {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPPlaylistArray(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPPlaylistArray {}
impl ::core::clone::Clone for IWMPPlaylistArray {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPPlaylistCollection(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPPlaylistCollection {}
impl ::core::clone::Clone for IWMPPlaylistCollection {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPPlugin(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPPlugin {}
impl ::core::clone::Clone for IWMPPlugin {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPPluginEnable(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPPluginEnable {}
impl ::core::clone::Clone for IWMPPluginEnable {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPPluginUI(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPPluginUI {}
impl ::core::clone::Clone for IWMPPluginUI {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPQuery(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPQuery {}
impl ::core::clone::Clone for IWMPQuery {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPRemoteMediaServices(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPRemoteMediaServices {}
impl ::core::clone::Clone for IWMPRemoteMediaServices {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPRenderConfig(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPRenderConfig {}
impl ::core::clone::Clone for IWMPRenderConfig {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPServices(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPServices {}
impl ::core::clone::Clone for IWMPServices {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPSettings(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPSettings {}
impl ::core::clone::Clone for IWMPSettings {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPSettings2(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPSettings2 {}
impl ::core::clone::Clone for IWMPSettings2 {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPSkinManager(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPSkinManager {}
impl ::core::clone::Clone for IWMPSkinManager {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPStringCollection(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPStringCollection {}
impl ::core::clone::Clone for IWMPStringCollection {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPStringCollection2(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPStringCollection2 {}
impl ::core::clone::Clone for IWMPStringCollection2 {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPSubscriptionService(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPSubscriptionService {}
impl ::core::clone::Clone for IWMPSubscriptionService {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPSubscriptionService2(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPSubscriptionService2 {}
impl ::core::clone::Clone for IWMPSubscriptionService2 {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPSubscriptionServiceCallback(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPSubscriptionServiceCallback {}
impl ::core::clone::Clone for IWMPSubscriptionServiceCallback {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPSyncDevice(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPSyncDevice {}
impl ::core::clone::Clone for IWMPSyncDevice {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPSyncDevice2(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPSyncDevice2 {}
impl ::core::clone::Clone for IWMPSyncDevice2 {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPSyncDevice3(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPSyncDevice3 {}
impl ::core::clone::Clone for IWMPSyncDevice3 {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPSyncServices(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPSyncServices {}
impl ::core::clone::Clone for IWMPSyncServices {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPTranscodePolicy(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPTranscodePolicy {}
impl ::core::clone::Clone for IWMPTranscodePolicy {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPUserEventSink(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPUserEventSink {}
impl ::core::clone::Clone for IWMPUserEventSink {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPVideoRenderConfig(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPVideoRenderConfig {}
impl ::core::clone::Clone for IWMPVideoRenderConfig {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IWMPWindowMessageSink(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IWMPWindowMessageSink {}
impl ::core::clone::Clone for IWMPWindowMessageSink {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IXFeed(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IXFeed {}
impl ::core::clone::Clone for IXFeed {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IXFeed2(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IXFeed2 {}
impl ::core::clone::Clone for IXFeed2 {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IXFeedEnclosure(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IXFeedEnclosure {}
impl ::core::clone::Clone for IXFeedEnclosure {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IXFeedEvents(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IXFeedEvents {}
impl ::core::clone::Clone for IXFeedEvents {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IXFeedFolder(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IXFeedFolder {}
impl ::core::clone::Clone for IXFeedFolder {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IXFeedFolderEvents(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IXFeedFolderEvents {}
impl ::core::clone::Clone for IXFeedFolderEvents {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IXFeedItem(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IXFeedItem {}
impl ::core::clone::Clone for IXFeedItem {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IXFeedItem2(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IXFeedItem2 {}
impl ::core::clone::Clone for IXFeedItem2 {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IXFeedsEnum(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IXFeedsEnum {}
impl ::core::clone::Clone for IXFeedsEnum {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct IXFeedsManager(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for IXFeedsManager {}
impl ::core::clone::Clone for IXFeedsManager {
    fn clone(&self) -> Self {
        *self
    }
}
pub const PLUGIN_FLAGS_ACCEPTSMEDIA: u32 = 268435456u32;
pub const PLUGIN_FLAGS_ACCEPTSPLAYLISTS: u32 = 134217728u32;
pub const PLUGIN_FLAGS_HASPRESETS: u32 = 67108864u32;
pub const PLUGIN_FLAGS_HASPROPERTYPAGE: u32 = 2147483648u32;
pub const PLUGIN_FLAGS_HIDDEN: u32 = 33554432u32;
pub const PLUGIN_FLAGS_INSTALLAUTORUN: u32 = 1073741824u32;
pub const PLUGIN_FLAGS_LAUNCHPROPERTYPAGE: u32 = 536870912u32;
pub const PLUGIN_TYPE_BACKGROUND: u32 = 1u32;
pub const PLUGIN_TYPE_DISPLAYAREA: u32 = 3u32;
pub const PLUGIN_TYPE_METADATAAREA: u32 = 5u32;
pub const PLUGIN_TYPE_SEPARATEWINDOW: u32 = 2u32;
pub const PLUGIN_TYPE_SETTINGSAREA: u32 = 4u32;
#[repr(transparent)]
pub struct PlayerState(pub i32);
pub const stop_state: PlayerState = PlayerState(0i32);
pub const pause_state: PlayerState = PlayerState(1i32);
pub const play_state: PlayerState = PlayerState(2i32);
impl ::core::marker::Copy for PlayerState {}
impl ::core::clone::Clone for PlayerState {
    fn clone(&self) -> Self {
        *self
    }
}
pub const SA_BUFFER_SIZE: u32 = 1024u32;
pub const SUBSCRIPTION_CAP_ALLOWCDBURN: u32 = 2u32;
pub const SUBSCRIPTION_CAP_ALLOWPDATRANSFER: u32 = 4u32;
pub const SUBSCRIPTION_CAP_ALLOWPLAY: u32 = 1u32;
pub const SUBSCRIPTION_CAP_ALTLOGIN: u32 = 128u32;
pub const SUBSCRIPTION_CAP_BACKGROUNDPROCESSING: u32 = 8u32;
pub const SUBSCRIPTION_CAP_DEVICEAVAILABLE: u32 = 16u32;
pub const SUBSCRIPTION_CAP_IS_CONTENTPARTNER: u32 = 64u32;
pub const SUBSCRIPTION_CAP_PREPAREFORSYNC: u32 = 32u32;
pub const SUBSCRIPTION_CAP_UILESSMODE_ALLOWPLAY: u32 = 256u32;
pub const SUBSCRIPTION_V1_CAPS: u32 = 15u32;
#[repr(C)]
pub struct TimedLevel {
    pub frequency: [u8; 2048],
    pub waveform: [u8; 2048],
    pub state: i32,
    pub timeStamp: i64,
}
impl ::core::marker::Copy for TimedLevel {}
impl ::core::clone::Clone for TimedLevel {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct WMPAccountType(pub i32);
pub const wmpatBuyOnly: WMPAccountType = WMPAccountType(1i32);
pub const wmpatSubscription: WMPAccountType = WMPAccountType(2i32);
pub const wmpatJanus: WMPAccountType = WMPAccountType(3i32);
impl ::core::marker::Copy for WMPAccountType {}
impl ::core::clone::Clone for WMPAccountType {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct WMPBurnFormat(pub i32);
pub const wmpbfAudioCD: WMPBurnFormat = WMPBurnFormat(0i32);
pub const wmpbfDataCD: WMPBurnFormat = WMPBurnFormat(1i32);
impl ::core::marker::Copy for WMPBurnFormat {}
impl ::core::clone::Clone for WMPBurnFormat {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct WMPBurnState(pub i32);
pub const wmpbsUnknown: WMPBurnState = WMPBurnState(0i32);
pub const wmpbsBusy: WMPBurnState = WMPBurnState(1i32);
pub const wmpbsReady: WMPBurnState = WMPBurnState(2i32);
pub const wmpbsWaitingForDisc: WMPBurnState = WMPBurnState(3i32);
pub const wmpbsRefreshStatusPending: WMPBurnState = WMPBurnState(4i32);
pub const wmpbsPreparingToBurn: WMPBurnState = WMPBurnState(5i32);
pub const wmpbsBurning: WMPBurnState = WMPBurnState(6i32);
pub const wmpbsStopped: WMPBurnState = WMPBurnState(7i32);
pub const wmpbsErasing: WMPBurnState = WMPBurnState(8i32);
pub const wmpbsDownloading: WMPBurnState = WMPBurnState(9i32);
impl ::core::marker::Copy for WMPBurnState {}
impl ::core::clone::Clone for WMPBurnState {
    fn clone(&self) -> Self {
        *self
    }
}
pub const WMPCOREEVENT_BASE: u32 = 5000u32;
pub const WMPCOREEVENT_CDROM_BASE: u32 = 5700u32;
pub const WMPCOREEVENT_CONTENT_BASE: u32 = 5300u32;
pub const WMPCOREEVENT_CONTROL_BASE: u32 = 5100u32;
pub const WMPCOREEVENT_ERROR_BASE: u32 = 5500u32;
pub const WMPCOREEVENT_NETWORK_BASE: u32 = 5400u32;
pub const WMPCOREEVENT_PLAYLIST_BASE: u32 = 5800u32;
pub const WMPCOREEVENT_SEEK_BASE: u32 = 5200u32;
pub const WMPCOREEVENT_WARNING_BASE: u32 = 5600u32;
#[repr(transparent)]
pub struct WMPCallbackNotification(pub i32);
pub const wmpcnLoginStateChange: WMPCallbackNotification = WMPCallbackNotification(1i32);
pub const wmpcnAuthResult: WMPCallbackNotification = WMPCallbackNotification(2i32);
pub const wmpcnLicenseUpdated: WMPCallbackNotification = WMPCallbackNotification(3i32);
pub const wmpcnNewCatalogAvailable: WMPCallbackNotification = WMPCallbackNotification(4i32);
pub const wmpcnNewPluginAvailable: WMPCallbackNotification = WMPCallbackNotification(5i32);
pub const wmpcnDisableRadioSkipping: WMPCallbackNotification = WMPCallbackNotification(6i32);
impl ::core::marker::Copy for WMPCallbackNotification {}
impl ::core::clone::Clone for WMPCallbackNotification {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct WMPContextMenuInfo {
    pub dwID: u32,
    pub bstrMenuText: super::super::Foundation::BSTR,
    pub bstrHelpText: super::super::Foundation::BSTR,
}
#[cfg(feature = "Win32_Foundation")]
impl ::core::marker::Copy for WMPContextMenuInfo {}
#[cfg(feature = "Win32_Foundation")]
impl ::core::clone::Clone for WMPContextMenuInfo {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct WMPDeviceStatus(pub i32);
pub const wmpdsUnknown: WMPDeviceStatus = WMPDeviceStatus(0i32);
pub const wmpdsPartnershipExists: WMPDeviceStatus = WMPDeviceStatus(1i32);
pub const wmpdsPartnershipDeclined: WMPDeviceStatus = WMPDeviceStatus(2i32);
pub const wmpdsPartnershipAnother: WMPDeviceStatus = WMPDeviceStatus(3i32);
pub const wmpdsManualDevice: WMPDeviceStatus = WMPDeviceStatus(4i32);
pub const wmpdsNewDevice: WMPDeviceStatus = WMPDeviceStatus(5i32);
pub const wmpdsLast: WMPDeviceStatus = WMPDeviceStatus(6i32);
impl ::core::marker::Copy for WMPDeviceStatus {}
impl ::core::clone::Clone for WMPDeviceStatus {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct WMPFolderScanState(pub i32);
pub const wmpfssUnknown: WMPFolderScanState = WMPFolderScanState(0i32);
pub const wmpfssScanning: WMPFolderScanState = WMPFolderScanState(1i32);
pub const wmpfssUpdating: WMPFolderScanState = WMPFolderScanState(2i32);
pub const wmpfssStopped: WMPFolderScanState = WMPFolderScanState(3i32);
impl ::core::marker::Copy for WMPFolderScanState {}
impl ::core::clone::Clone for WMPFolderScanState {
    fn clone(&self) -> Self {
        *self
    }
}
pub const WMPGC_FLAGS_ALLOW_PREROLL: u32 = 1u32;
pub const WMPGC_FLAGS_DISABLE_PLUGINS: u32 = 8u32;
pub const WMPGC_FLAGS_IGNORE_AV_SYNC: u32 = 4u32;
pub const WMPGC_FLAGS_SUPPRESS_DIALOGS: u32 = 2u32;
pub const WMPGC_FLAGS_USE_CUSTOM_GRAPH: u32 = 16u32;
pub const WMPLib: ::windows_sys::core::GUID = ::windows_sys::core::GUID { data1: 1811229264, data2: 14666, data3: 4563, data4: [177, 83, 0, 192, 79, 121, 250, 166] };
#[repr(transparent)]
pub struct WMPLibraryType(pub i32);
pub const wmpltUnknown: WMPLibraryType = WMPLibraryType(0i32);
pub const wmpltAll: WMPLibraryType = WMPLibraryType(1i32);
pub const wmpltLocal: WMPLibraryType = WMPLibraryType(2i32);
pub const wmpltRemote: WMPLibraryType = WMPLibraryType(3i32);
pub const wmpltDisc: WMPLibraryType = WMPLibraryType(4i32);
pub const wmpltPortableDevice: WMPLibraryType = WMPLibraryType(5i32);
impl ::core::marker::Copy for WMPLibraryType {}
impl ::core::clone::Clone for WMPLibraryType {
    fn clone(&self) -> Self {
        *self
    }
}
pub const WMPOCXEVENT_BASE: u32 = 6500u32;
#[repr(transparent)]
pub struct WMPOpenState(pub i32);
pub const wmposUndefined: WMPOpenState = WMPOpenState(0i32);
pub const wmposPlaylistChanging: WMPOpenState = WMPOpenState(1i32);
pub const wmposPlaylistLocating: WMPOpenState = WMPOpenState(2i32);
pub const wmposPlaylistConnecting: WMPOpenState = WMPOpenState(3i32);
pub const wmposPlaylistLoading: WMPOpenState = WMPOpenState(4i32);
pub const wmposPlaylistOpening: WMPOpenState = WMPOpenState(5i32);
pub const wmposPlaylistOpenNoMedia: WMPOpenState = WMPOpenState(6i32);
pub const wmposPlaylistChanged: WMPOpenState = WMPOpenState(7i32);
pub const wmposMediaChanging: WMPOpenState = WMPOpenState(8i32);
pub const wmposMediaLocating: WMPOpenState = WMPOpenState(9i32);
pub const wmposMediaConnecting: WMPOpenState = WMPOpenState(10i32);
pub const wmposMediaLoading: WMPOpenState = WMPOpenState(11i32);
pub const wmposMediaOpening: WMPOpenState = WMPOpenState(12i32);
pub const wmposMediaOpen: WMPOpenState = WMPOpenState(13i32);
pub const wmposBeginCodecAcquisition: WMPOpenState = WMPOpenState(14i32);
pub const wmposEndCodecAcquisition: WMPOpenState = WMPOpenState(15i32);
pub const wmposBeginLicenseAcquisition: WMPOpenState = WMPOpenState(16i32);
pub const wmposEndLicenseAcquisition: WMPOpenState = WMPOpenState(17i32);
pub const wmposBeginIndividualization: WMPOpenState = WMPOpenState(18i32);
pub const wmposEndIndividualization: WMPOpenState = WMPOpenState(19i32);
pub const wmposMediaWaiting: WMPOpenState = WMPOpenState(20i32);
pub const wmposOpeningUnknownURL: WMPOpenState = WMPOpenState(21i32);
impl ::core::marker::Copy for WMPOpenState {}
impl ::core::clone::Clone for WMPOpenState {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct WMPPartnerNotification(pub i32);
pub const wmpsnBackgroundProcessingBegin: WMPPartnerNotification = WMPPartnerNotification(1i32);
pub const wmpsnBackgroundProcessingEnd: WMPPartnerNotification = WMPPartnerNotification(2i32);
pub const wmpsnCatalogDownloadFailure: WMPPartnerNotification = WMPPartnerNotification(3i32);
pub const wmpsnCatalogDownloadComplete: WMPPartnerNotification = WMPPartnerNotification(4i32);
impl ::core::marker::Copy for WMPPartnerNotification {}
impl ::core::clone::Clone for WMPPartnerNotification {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct WMPPlayState(pub i32);
pub const wmppsUndefined: WMPPlayState = WMPPlayState(0i32);
pub const wmppsStopped: WMPPlayState = WMPPlayState(1i32);
pub const wmppsPaused: WMPPlayState = WMPPlayState(2i32);
pub const wmppsPlaying: WMPPlayState = WMPPlayState(3i32);
pub const wmppsScanForward: WMPPlayState = WMPPlayState(4i32);
pub const wmppsScanReverse: WMPPlayState = WMPPlayState(5i32);
pub const wmppsBuffering: WMPPlayState = WMPPlayState(6i32);
pub const wmppsWaiting: WMPPlayState = WMPPlayState(7i32);
pub const wmppsMediaEnded: WMPPlayState = WMPPlayState(8i32);
pub const wmppsTransitioning: WMPPlayState = WMPPlayState(9i32);
pub const wmppsReady: WMPPlayState = WMPPlayState(10i32);
pub const wmppsReconnecting: WMPPlayState = WMPPlayState(11i32);
pub const wmppsLast: WMPPlayState = WMPPlayState(12i32);
impl ::core::marker::Copy for WMPPlayState {}
impl ::core::clone::Clone for WMPPlayState {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct WMPPlaylistChangeEventType(pub i32);
pub const wmplcUnknown: WMPPlaylistChangeEventType = WMPPlaylistChangeEventType(0i32);
pub const wmplcClear: WMPPlaylistChangeEventType = WMPPlaylistChangeEventType(1i32);
pub const wmplcInfoChange: WMPPlaylistChangeEventType = WMPPlaylistChangeEventType(2i32);
pub const wmplcMove: WMPPlaylistChangeEventType = WMPPlaylistChangeEventType(3i32);
pub const wmplcDelete: WMPPlaylistChangeEventType = WMPPlaylistChangeEventType(4i32);
pub const wmplcInsert: WMPPlaylistChangeEventType = WMPPlaylistChangeEventType(5i32);
pub const wmplcAppend: WMPPlaylistChangeEventType = WMPPlaylistChangeEventType(6i32);
pub const wmplcPrivate: WMPPlaylistChangeEventType = WMPPlaylistChangeEventType(7i32);
pub const wmplcNameChange: WMPPlaylistChangeEventType = WMPPlaylistChangeEventType(8i32);
pub const wmplcMorph: WMPPlaylistChangeEventType = WMPPlaylistChangeEventType(9i32);
pub const wmplcSort: WMPPlaylistChangeEventType = WMPPlaylistChangeEventType(10i32);
pub const wmplcLast: WMPPlaylistChangeEventType = WMPPlaylistChangeEventType(11i32);
impl ::core::marker::Copy for WMPPlaylistChangeEventType {}
impl ::core::clone::Clone for WMPPlaylistChangeEventType {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct WMPPlugin_Caps(pub i32);
pub const WMPPlugin_Caps_CannotConvertFormats: WMPPlugin_Caps = WMPPlugin_Caps(1i32);
impl ::core::marker::Copy for WMPPlugin_Caps {}
impl ::core::clone::Clone for WMPPlugin_Caps {
    fn clone(&self) -> Self {
        *self
    }
}
pub const WMPRemoteMediaServices: ::windows_sys::core::GUID = ::windows_sys::core::GUID { data1: 3744674931, data2: 11511, data3: 19426, data4: [144, 127, 154, 173, 86, 97, 54, 79] };
#[repr(transparent)]
pub struct WMPRipState(pub i32);
pub const wmprsUnknown: WMPRipState = WMPRipState(0i32);
pub const wmprsRipping: WMPRipState = WMPRipState(1i32);
pub const wmprsStopped: WMPRipState = WMPRipState(2i32);
impl ::core::marker::Copy for WMPRipState {}
impl ::core::clone::Clone for WMPRipState {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct WMPServices_StreamState(pub i32);
pub const WMPServices_StreamState_Stop: WMPServices_StreamState = WMPServices_StreamState(0i32);
pub const WMPServices_StreamState_Pause: WMPServices_StreamState = WMPServices_StreamState(1i32);
pub const WMPServices_StreamState_Play: WMPServices_StreamState = WMPServices_StreamState(2i32);
impl ::core::marker::Copy for WMPServices_StreamState {}
impl ::core::clone::Clone for WMPServices_StreamState {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct WMPStreamingType(pub i32);
pub const wmpstUnknown: WMPStreamingType = WMPStreamingType(0i32);
pub const wmpstMusic: WMPStreamingType = WMPStreamingType(1i32);
pub const wmpstVideo: WMPStreamingType = WMPStreamingType(2i32);
pub const wmpstRadio: WMPStreamingType = WMPStreamingType(3i32);
impl ::core::marker::Copy for WMPStreamingType {}
impl ::core::clone::Clone for WMPStreamingType {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct WMPStringCollectionChangeEventType(pub i32);
pub const wmpsccetUnknown: WMPStringCollectionChangeEventType = WMPStringCollectionChangeEventType(0i32);
pub const wmpsccetInsert: WMPStringCollectionChangeEventType = WMPStringCollectionChangeEventType(1i32);
pub const wmpsccetChange: WMPStringCollectionChangeEventType = WMPStringCollectionChangeEventType(2i32);
pub const wmpsccetDelete: WMPStringCollectionChangeEventType = WMPStringCollectionChangeEventType(3i32);
pub const wmpsccetClear: WMPStringCollectionChangeEventType = WMPStringCollectionChangeEventType(4i32);
pub const wmpsccetBeginUpdates: WMPStringCollectionChangeEventType = WMPStringCollectionChangeEventType(5i32);
pub const wmpsccetEndUpdates: WMPStringCollectionChangeEventType = WMPStringCollectionChangeEventType(6i32);
impl ::core::marker::Copy for WMPStringCollectionChangeEventType {}
impl ::core::clone::Clone for WMPStringCollectionChangeEventType {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct WMPSubscriptionDownloadState(pub i32);
pub const wmpsdlsDownloading: WMPSubscriptionDownloadState = WMPSubscriptionDownloadState(0i32);
pub const wmpsdlsPaused: WMPSubscriptionDownloadState = WMPSubscriptionDownloadState(1i32);
pub const wmpsdlsProcessing: WMPSubscriptionDownloadState = WMPSubscriptionDownloadState(2i32);
pub const wmpsdlsCompleted: WMPSubscriptionDownloadState = WMPSubscriptionDownloadState(3i32);
pub const wmpsdlsCancelled: WMPSubscriptionDownloadState = WMPSubscriptionDownloadState(4i32);
impl ::core::marker::Copy for WMPSubscriptionDownloadState {}
impl ::core::clone::Clone for WMPSubscriptionDownloadState {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct WMPSubscriptionServiceEvent(pub i32);
pub const wmpsseCurrentBegin: WMPSubscriptionServiceEvent = WMPSubscriptionServiceEvent(1i32);
pub const wmpsseCurrentEnd: WMPSubscriptionServiceEvent = WMPSubscriptionServiceEvent(2i32);
pub const wmpsseFullBegin: WMPSubscriptionServiceEvent = WMPSubscriptionServiceEvent(3i32);
pub const wmpsseFullEnd: WMPSubscriptionServiceEvent = WMPSubscriptionServiceEvent(4i32);
impl ::core::marker::Copy for WMPSubscriptionServiceEvent {}
impl ::core::clone::Clone for WMPSubscriptionServiceEvent {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct WMPSyncState(pub i32);
pub const wmpssUnknown: WMPSyncState = WMPSyncState(0i32);
pub const wmpssSynchronizing: WMPSyncState = WMPSyncState(1i32);
pub const wmpssStopped: WMPSyncState = WMPSyncState(2i32);
pub const wmpssEstimating: WMPSyncState = WMPSyncState(3i32);
pub const wmpssLast: WMPSyncState = WMPSyncState(4i32);
impl ::core::marker::Copy for WMPSyncState {}
impl ::core::clone::Clone for WMPSyncState {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct WMPTaskType(pub i32);
pub const wmpttBrowse: WMPTaskType = WMPTaskType(1i32);
pub const wmpttSync: WMPTaskType = WMPTaskType(2i32);
pub const wmpttBurn: WMPTaskType = WMPTaskType(3i32);
pub const wmpttCurrent: WMPTaskType = WMPTaskType(4i32);
impl ::core::marker::Copy for WMPTaskType {}
impl ::core::clone::Clone for WMPTaskType {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct WMPTemplateSize(pub i32);
pub const wmptsSmall: WMPTemplateSize = WMPTemplateSize(0i32);
pub const wmptsMedium: WMPTemplateSize = WMPTemplateSize(1i32);
pub const wmptsLarge: WMPTemplateSize = WMPTemplateSize(2i32);
impl ::core::marker::Copy for WMPTemplateSize {}
impl ::core::clone::Clone for WMPTemplateSize {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct WMPTransactionType(pub i32);
pub const wmpttNoTransaction: WMPTransactionType = WMPTransactionType(0i32);
pub const wmpttDownload: WMPTransactionType = WMPTransactionType(1i32);
pub const wmpttBuy: WMPTransactionType = WMPTransactionType(2i32);
impl ::core::marker::Copy for WMPTransactionType {}
impl ::core::clone::Clone for WMPTransactionType {
    fn clone(&self) -> Self {
        *self
    }
}
pub const WMPUE_EC_USER: u32 = 33024u32;
pub const WMP_MDRT_FLAGS_UNREPORTED_ADDED_ITEMS: u32 = 2u32;
pub const WMP_MDRT_FLAGS_UNREPORTED_DELETED_ITEMS: u32 = 1u32;
pub const WMP_PLUGINTYPE_DSP: ::windows_sys::core::GUID = ::windows_sys::core::GUID { data1: 1681177322, data2: 18772, data3: 18829, data4: [171, 213, 43, 7, 18, 62, 31, 4] };
pub const WMP_PLUGINTYPE_DSP_OUTOFPROC: ::windows_sys::core::GUID = ::windows_sys::core::GUID {
    data1: 4012487028,
    data2: 49991,
    data3: 17612,
    data4: [154, 79, 35, 153, 17, 143, 243, 140],
};
pub const WMP_PLUGINTYPE_RENDERING: ::windows_sys::core::GUID = ::windows_sys::core::GUID { data1: 2824160577, data2: 4445, data3: 16490, data4: [164, 199, 81, 17, 28, 51, 1, 131] };
#[repr(C, packed(1))]
pub struct WMP_WMDM_METADATA_ROUND_TRIP_DEVICE2PC {
    pub dwCurrentTransactionID: u32,
    pub dwReturnedObjectCount: u32,
    pub dwUnretrievedObjectCount: u32,
    pub dwDeletedObjectStartingOffset: u32,
    pub dwFlags: u32,
    pub wsObjectPathnameList: [u16; 1],
}
impl ::core::marker::Copy for WMP_WMDM_METADATA_ROUND_TRIP_DEVICE2PC {}
impl ::core::clone::Clone for WMP_WMDM_METADATA_ROUND_TRIP_DEVICE2PC {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C, packed(1))]
pub struct WMP_WMDM_METADATA_ROUND_TRIP_PC2DEVICE {
    pub dwChangesSinceTransactionID: u32,
    pub dwResultSetStartingIndex: u32,
}
impl ::core::marker::Copy for WMP_WMDM_METADATA_ROUND_TRIP_PC2DEVICE {}
impl ::core::clone::Clone for WMP_WMDM_METADATA_ROUND_TRIP_PC2DEVICE {
    fn clone(&self) -> Self {
        *self
    }
}
pub const WMProfile_V40_100Video: ::windows_sys::core::GUID = ::windows_sys::core::GUID {
    data1: 2409225688,
    data2: 26244,
    data3: 17771,
    data4: [160, 163, 51, 225, 49, 104, 149, 240],
};
pub const WMProfile_V40_128Audio: ::windows_sys::core::GUID = ::windows_sys::core::GUID { data1: 2480782866, data2: 5084, data3: 20018, data4: [163, 94, 64, 55, 142, 52, 39, 154] };
pub const WMProfile_V40_16AMRadio: ::windows_sys::core::GUID = ::windows_sys::core::GUID {
    data1: 256632863,
    data2: 54653,
    data3: 16865,
    data4: [178, 227, 47, 173, 152, 107, 254, 194],
};
pub const WMProfile_V40_1MBVideo: ::windows_sys::core::GUID = ::windows_sys::core::GUID {
    data1: 3024628300,
    data2: 52247,
    data3: 19207,
    data4: [169, 78, 152, 24, 213, 224, 241, 63],
};
pub const WMProfile_V40_250Video: ::windows_sys::core::GUID = ::windows_sys::core::GUID { data1: 1410875843, data2: 37689, data3: 20347, data4: [154, 34, 177, 21, 64, 137, 78, 66] };
pub const WMProfile_V40_2856100MBR: ::windows_sys::core::GUID = ::windows_sys::core::GUID { data1: 1511793158, data2: 56414, data3: 16774, data4: [190, 178, 76, 90, 153, 75, 19, 46] };
pub const WMProfile_V40_288FMRadioMono: ::windows_sys::core::GUID = ::windows_sys::core::GUID {
    data1: 2141552584,
    data2: 28324,
    data3: 17989,
    data4: [138, 191, 182, 229, 168, 248, 20, 161],
};
pub const WMProfile_V40_288FMRadioStereo: ::windows_sys::core::GUID = ::windows_sys::core::GUID { data1: 587002982, data2: 43584, data3: 17183, data4: [162, 137, 6, 208, 234, 26, 30, 64] };
pub const WMProfile_V40_288VideoAudio: ::windows_sys::core::GUID = ::windows_sys::core::GUID { data1: 2892070701, data2: 27838, data3: 20100, data4: [142, 154, 206, 21, 26, 18, 163, 84] };
pub const WMProfile_V40_288VideoVoice: ::windows_sys::core::GUID = ::windows_sys::core::GUID {
    data1: 3140207220,
    data2: 3766,
    data3: 19881,
    data4: [181, 80, 236, 247, 242, 185, 148, 143],
};
pub const WMProfile_V40_288VideoWebServer: ::windows_sys::core::GUID = ::windows_sys::core::GUID {
    data1: 2884825101,
    data2: 54613,
    data3: 18453,
    data4: [148, 206, 130, 117, 243, 167, 11, 254],
};
pub const WMProfile_V40_3MBVideo: ::windows_sys::core::GUID = ::windows_sys::core::GUID {
    data1: 1429686976,
    data2: 12443,
    data3: 17302,
    data4: [184, 143, 230, 226, 146, 17, 63, 40],
};
pub const WMProfile_V40_512Video: ::windows_sys::core::GUID = ::windows_sys::core::GUID {
    data1: 1883508333,
    data2: 50415,
    data3: 20356,
    data4: [140, 208, 213, 194, 134, 134, 231, 132],
};
pub const WMProfile_V40_56DialUpStereo: ::windows_sys::core::GUID = ::windows_sys::core::GUID { data1: 3892473735, data2: 59653, data3: 17812, data4: [163, 199, 0, 208, 0, 65, 209, 217] };
pub const WMProfile_V40_56DialUpVideo: ::windows_sys::core::GUID = ::windows_sys::core::GUID { data1: 3793163195, data2: 25903, data3: 19883, data4: [153, 222, 113, 224, 68, 0, 39, 15] };
pub const WMProfile_V40_56DialUpVideoWebServer: ::windows_sys::core::GUID = ::windows_sys::core::GUID {
    data1: 3075931920,
    data2: 21007,
    data3: 18249,
    data4: [163, 153, 183, 128, 226, 252, 146, 80],
};
pub const WMProfile_V40_64Audio: ::windows_sys::core::GUID = ::windows_sys::core::GUID {
    data1: 1210102775,
    data2: 52204,
    data3: 16860,
    data4: [147, 145, 120, 89, 135, 20, 200, 229],
};
pub const WMProfile_V40_6VoiceAudio: ::windows_sys::core::GUID = ::windows_sys::core::GUID {
    data1: 3574110090,
    data2: 4512,
    data3: 19733,
    data4: [176, 218, 172, 220, 153, 212, 248, 144],
};
pub const WMProfile_V40_96Audio: ::windows_sys::core::GUID = ::windows_sys::core::GUID { data1: 251268835, data2: 40548, data3: 16866, data4: [131, 127, 60, 0, 56, 243, 39, 186] };
pub const WMProfile_V40_DialUpMBR: ::windows_sys::core::GUID = ::windows_sys::core::GUID { data1: 4252977137, data2: 29350, data3: 17828, data4: [128, 240, 58, 236, 239, 195, 44, 7] };
pub const WMProfile_V40_IntranetMBR: ::windows_sys::core::GUID = ::windows_sys::core::GUID { data1: 2194486049, data2: 43338, data3: 20476, data4: [156, 43, 9, 44, 16, 202, 22, 231] };
pub const WMProfile_V70_100Video: ::windows_sys::core::GUID = ::windows_sys::core::GUID {
    data1: 3656632626,
    data2: 24233,
    data3: 19565,
    data4: [137, 180, 38, 134, 229, 21, 66, 110],
};
pub const WMProfile_V70_128Audio: ::windows_sys::core::GUID = ::windows_sys::core::GUID {
    data1: 3326932442,
    data2: 57157,
    data3: 16595,
    data4: [128, 39, 222, 105, 141, 104, 220, 102],
};
pub const WMProfile_V70_1500FilmContentVideo: ::windows_sys::core::GUID = ::windows_sys::core::GUID { data1: 4138071775, data2: 60991, data3: 17228, data4: [164, 51, 82, 60, 229, 95, 81, 107] };
pub const WMProfile_V70_1500Video: ::windows_sys::core::GUID = ::windows_sys::core::GUID { data1: 193533514, data2: 21648, data3: 18054, data4: [158, 55, 90, 128, 136, 78, 81, 70] };
pub const WMProfile_V70_150VideoPDA: ::windows_sys::core::GUID = ::windows_sys::core::GUID { data1: 256321895, data2: 58310, data3: 18327, data4: [150, 148, 240, 48, 76, 94, 47, 23] };
pub const WMProfile_V70_2000Video: ::windows_sys::core::GUID = ::windows_sys::core::GUID { data1: 2862088484, data2: 48912, data3: 20047, data4: [154, 253, 67, 41, 167, 57, 92, 255] };
pub const WMProfile_V70_225VideoPDA: ::windows_sys::core::GUID = ::windows_sys::core::GUID { data1: 4116620659, data2: 19458, data3: 17077, data4: [144, 38, 168, 38, 12, 67, 138, 159] };
pub const WMProfile_V70_256Video: ::windows_sys::core::GUID = ::windows_sys::core::GUID { data1: 2951125818, data2: 16447, data3: 18971, data4: [128, 7, 14, 33, 207, 179, 223, 132] };
pub const WMProfile_V70_2856100MBR: ::windows_sys::core::GUID = ::windows_sys::core::GUID { data1: 132086309, data2: 16354, data3: 19035, data4: [139, 30, 52, 139, 7, 33, 202, 112] };
pub const WMProfile_V70_288FMRadioMono: ::windows_sys::core::GUID = ::windows_sys::core::GUID {
    data1: 3222448179,
    data2: 41019,
    data3: 17573,
    data4: [150, 220, 237, 149, 204, 101, 88, 45],
};
pub const WMProfile_V70_288FMRadioStereo: ::windows_sys::core::GUID = ::windows_sys::core::GUID { data1: 3916261321, data2: 6713, data3: 19908, data4: [185, 0, 177, 24, 77, 200, 54, 32] };
pub const WMProfile_V70_288VideoAudio: ::windows_sys::core::GUID = ::windows_sys::core::GUID { data1: 1488691438, data2: 35178, data3: 18760, data4: [153, 83, 133, 183, 54, 248, 57, 71] };
pub const WMProfile_V70_288VideoVoice: ::windows_sys::core::GUID = ::windows_sys::core::GUID { data1: 3109221262, data2: 32188, data3: 17715, data4: [169, 202, 176, 11, 28, 110, 152, 0] };
pub const WMProfile_V70_288VideoWebServer: ::windows_sys::core::GUID = ::windows_sys::core::GUID { data1: 1889742379, data2: 58079, data3: 20157, data4: [145, 5, 217, 202, 25, 74, 45, 80] };
pub const WMProfile_V70_384Video: ::windows_sys::core::GUID = ::windows_sys::core::GUID {
    data1: 4090781627,
    data2: 34690,
    data3: 17631,
    data4: [151, 198, 134, 120, 226, 249, 177, 61],
};
pub const WMProfile_V70_56DialUpStereo: ::windows_sys::core::GUID = ::windows_sys::core::GUID { data1: 1733224295, data2: 2377, data3: 20396, data4: [135, 94, 244, 201, 194, 146, 1, 59] };
pub const WMProfile_V70_56VideoWebServer: ::windows_sys::core::GUID = ::windows_sys::core::GUID {
    data1: 3740900928,
    data2: 22460,
    data3: 19123,
    data4: [178, 209, 182, 227, 202, 246, 66, 87],
};
pub const WMProfile_V70_64Audio: ::windows_sys::core::GUID = ::windows_sys::core::GUID {
    data1: 2996633542,
    data2: 61745,
    data3: 16859,
    data4: [181, 232, 153, 216, 176, 185, 69, 244],
};
pub const WMProfile_V70_64AudioISDN: ::windows_sys::core::GUID = ::windows_sys::core::GUID { data1: 2447287384, data2: 40288, data3: 16914, data4: [156, 89, 212, 9, 25, 201, 57, 228] };
pub const WMProfile_V70_64VideoISDN: ::windows_sys::core::GUID = ::windows_sys::core::GUID { data1: 3266815977, data2: 31630, data3: 18834, data4: [161, 161, 6, 130, 23, 163, 179, 17] };
pub const WMProfile_V70_6VoiceAudio: ::windows_sys::core::GUID = ::windows_sys::core::GUID {
    data1: 3938099135,
    data2: 46671,
    data3: 18867,
    data4: [170, 12, 115, 251, 221, 21, 10, 208],
};
pub const WMProfile_V70_700FilmContentVideo: ::windows_sys::core::GUID = ::windows_sys::core::GUID {
    data1: 2054453536,
    data2: 9289,
    data3: 19830,
    data4: [153, 203, 253, 176, 201, 4, 132, 212],
};
pub const WMProfile_V70_768Video: ::windows_sys::core::GUID = ::windows_sys::core::GUID { data1: 52882358, data2: 63342, data3: 18788, data4: [176, 219, 231, 41, 151, 141, 53, 238] };
pub const WMProfile_V70_96Audio: ::windows_sys::core::GUID = ::windows_sys::core::GUID { data1: 2849290265, data2: 5836, data3: 19033, data4: [159, 55, 105, 61, 187, 3, 2, 214] };
pub const WMProfile_V70_DialUpMBR: ::windows_sys::core::GUID = ::windows_sys::core::GUID { data1: 1528227659, data2: 16488, data3: 17845, data4: [184, 14, 123, 248, 200, 13, 44, 47] };
pub const WMProfile_V70_IntranetMBR: ::windows_sys::core::GUID = ::windows_sys::core::GUID { data1: 72909020, data2: 13494, data3: 19625, data4: [163, 38, 115, 85, 126, 209, 67, 243] };
pub const WMProfile_V80_100768VideoMBR: ::windows_sys::core::GUID = ::windows_sys::core::GUID {
    data1: 1541102094,
    data2: 38814,
    data3: 18387,
    data4: [149, 150, 115, 179, 134, 57, 42, 85],
};
pub const WMProfile_V80_100Video: ::windows_sys::core::GUID = ::windows_sys::core::GUID {
    data1: 2732785844,
    data2: 49876,
    data3: 20416,
    data4: [181, 221, 236, 189, 148, 141, 192, 223],
};
pub const WMProfile_V80_128StereoAudio: ::windows_sys::core::GUID = ::windows_sys::core::GUID {
    data1: 1081840720,
    data2: 35804,
    data3: 20197,
    data4: [136, 184, 111, 82, 123, 217, 65, 242],
};
pub const WMProfile_V80_1400NTSCVideo: ::windows_sys::core::GUID = ::windows_sys::core::GUID {
    data1: 2468158446,
    data2: 24954,
    data3: 19405,
    data4: [153, 5, 204, 208, 120, 102, 131, 238],
};
pub const WMProfile_V80_150VideoPDA: ::windows_sys::core::GUID = ::windows_sys::core::GUID { data1: 2934009338, data2: 11284, data3: 18991, data4: [173, 63, 163, 3, 64, 49, 120, 79] };
pub const WMProfile_V80_255VideoPDA: ::windows_sys::core::GUID = ::windows_sys::core::GUID { data1: 4276993247, data2: 16300, data3: 19603, data4: [172, 13, 71, 148, 30, 199, 44, 11] };
pub const WMProfile_V80_256Video: ::windows_sys::core::GUID = ::windows_sys::core::GUID { data1: 3150402816, data2: 13266, data3: 17510, data4: [184, 107, 18, 43, 32, 28, 201, 174] };
pub const WMProfile_V80_288100VideoMBR: ::windows_sys::core::GUID = ::windows_sys::core::GUID { data1: 3631361129, data2: 9241, data3: 19254, data4: [180, 224, 110, 23, 182, 5, 100, 229] };
pub const WMProfile_V80_28856VideoMBR: ::windows_sys::core::GUID = ::windows_sys::core::GUID {
    data1: 3597213892,
    data2: 49695,
    data3: 20168,
    data4: [160, 180, 149, 207, 43, 213, 127, 196],
};
pub const WMProfile_V80_288MonoAudio: ::windows_sys::core::GUID = ::windows_sys::core::GUID {
    data1: 2124616301,
    data2: 57786,
    data3: 18198,
    data4: [137, 175, 246, 92, 238, 12, 12, 103],
};
pub const WMProfile_V80_288StereoAudio: ::windows_sys::core::GUID = ::windows_sys::core::GUID {
    data1: 2118953820,
    data2: 13788,
    data3: 17851,
    data4: [167, 192, 25, 178, 128, 112, 208, 204],
};
pub const WMProfile_V80_288Video: ::windows_sys::core::GUID = ::windows_sys::core::GUID {
    data1: 1039562969,
    data2: 4946,
    data3: 16774,
    data4: [187, 248, 116, 240, 193, 155, 106, 226],
};
pub const WMProfile_V80_288VideoOnly: ::windows_sys::core::GUID = ::windows_sys::core::GUID {
    data1: 2353378503,
    data2: 19179,
    data3: 20344,
    data4: [165, 236, 136, 66, 11, 157, 173, 239],
};
pub const WMProfile_V80_32StereoAudio: ::windows_sys::core::GUID = ::windows_sys::core::GUID {
    data1: 1620082591,
    data2: 45906,
    data3: 18405,
    data4: [178, 16, 14, 241, 244, 126, 159, 157],
};
pub const WMProfile_V80_384PALVideo: ::windows_sys::core::GUID = ::windows_sys::core::GUID {
    data1: 2452080274,
    data2: 44642,
    data3: 20338,
    data4: [167, 234, 115, 96, 98, 208, 226, 30],
};
pub const WMProfile_V80_384Video: ::windows_sys::core::GUID = ::windows_sys::core::GUID { data1: 699403307, data2: 2473, data3: 18621, data4: [173, 9, 205, 174, 17, 125, 29, 167] };
pub const WMProfile_V80_48StereoAudio: ::windows_sys::core::GUID = ::windows_sys::core::GUID {
    data1: 1591765989,
    data2: 18731,
    data3: 18442,
    data4: [138, 143, 18, 243, 115, 236, 249, 212],
};
pub const WMProfile_V80_56Video: ::windows_sys::core::GUID = ::windows_sys::core::GUID { data1: 625904278, data2: 9746, data3: 16476, data4: [128, 57, 240, 191, 114, 92, 237, 125] };
pub const WMProfile_V80_56VideoOnly: ::windows_sys::core::GUID = ::windows_sys::core::GUID {
    data1: 1848273237,
    data2: 33247,
    data3: 18755,
    data4: [186, 80, 104, 169, 134, 167, 8, 246],
};
pub const WMProfile_V80_64StereoAudio: ::windows_sys::core::GUID = ::windows_sys::core::GUID { data1: 163273668, data2: 12662, data3: 17791, data4: [141, 214, 60, 217, 25, 18, 62, 45] };
pub const WMProfile_V80_700NTSCVideo: ::windows_sys::core::GUID = ::windows_sys::core::GUID {
    data1: 3368196191,
    data2: 58841,
    data3: 17720,
    data4: [158, 35, 155, 33, 191, 120, 247, 69],
};
pub const WMProfile_V80_700PALVideo: ::windows_sys::core::GUID = ::windows_sys::core::GUID { data1: 3962145097, data2: 25499, data3: 17890, data4: [150, 253, 74, 179, 45, 89, 25, 194] };
pub const WMProfile_V80_768Video: ::windows_sys::core::GUID = ::windows_sys::core::GUID { data1: 1959792898, data2: 59162, data3: 18464, data4: [143, 13, 19, 210, 236, 30, 72, 114] };
pub const WMProfile_V80_96StereoAudio: ::windows_sys::core::GUID = ::windows_sys::core::GUID { data1: 533207344, data2: 25074, data3: 17263, data4: [157, 51, 52, 159, 42, 28, 15, 16] };
pub const WMProfile_V80_BESTVBRVideo: ::windows_sys::core::GUID = ::windows_sys::core::GUID { data1: 75774394, data2: 12444, data3: 17422, data4: [156, 180, 61, 204, 163, 117, 100, 35] };
pub const WMProfile_V80_FAIRVBRVideo: ::windows_sys::core::GUID = ::windows_sys::core::GUID { data1: 890284130, data2: 22608, data3: 18566, data4: [131, 95, 215, 142, 198, 166, 64, 66] };
pub const WMProfile_V80_HIGHVBRVideo: ::windows_sys::core::GUID = ::windows_sys::core::GUID {
    data1: 252762579,
    data2: 15108,
    data3: 20400,
    data4: [163, 211, 136, 212, 172, 133, 74, 204],
};
pub const WindowsMediaPlayer: ::windows_sys::core::GUID = ::windows_sys::core::GUID { data1: 1811229266, data2: 14666, data3: 4563, data4: [177, 83, 0, 192, 79, 121, 250, 166] };
#[repr(transparent)]
pub struct _WMPOCXEvents(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for _WMPOCXEvents {}
impl ::core::clone::Clone for _WMPOCXEvents {
    fn clone(&self) -> Self {
        *self
    }
}
pub const g_szAllAuthors: &'static str = "AllAuthors";
pub const g_szAllCPAlbumIDs: &'static str = "AllCPAlbumIDs";
pub const g_szAllCPAlbumSubGenreIDs: &'static str = "AllCPAlbumSubGenreIDs";
pub const g_szAllCPArtistIDs: &'static str = "AllCPArtistIDs";
pub const g_szAllCPGenreIDs: &'static str = "AllCPGenreIDs";
pub const g_szAllCPListIDs: &'static str = "AllCPListIDs";
pub const g_szAllCPRadioIDs: &'static str = "AllCPRadioIDs";
pub const g_szAllCPTrackIDs: &'static str = "AllCPTrackIDs";
pub const g_szAllReleaseDateYears: &'static str = "AllReleaseDateYears";
pub const g_szAllUserEffectiveRatingStarss: &'static str = "AllUserEffectiveRatingStarss";
pub const g_szAllWMParentalRatings: &'static str = "AllWMParentalRatings";
pub const g_szAuthor: &'static str = "Author";
pub const g_szCPAlbumID: &'static str = "CPAlbumID";
pub const g_szCPAlbumSubGenreID: &'static str = "CPAlbumSubGenreID";
pub const g_szCPArtistID: &'static str = "CPArtistID";
pub const g_szCPGenreID: &'static str = "CPGenreID";
pub const g_szCPListID: &'static str = "CPListID";
pub const g_szCPRadioID: &'static str = "CPRadioID";
pub const g_szCPTrackID: &'static str = "CPTrackID";
pub const g_szContentPartnerInfo_AccountBalance: &'static str = "AccountBalance";
pub const g_szContentPartnerInfo_AccountType: &'static str = "AccountType";
pub const g_szContentPartnerInfo_HasCachedCredentials: &'static str = "HasCachedCredentials";
pub const g_szContentPartnerInfo_LicenseRefreshAdvanceWarning: &'static str = "LicenseRefreshAdvanceWarning";
pub const g_szContentPartnerInfo_LoginState: &'static str = "LoginState";
pub const g_szContentPartnerInfo_MaximumTrackPurchasePerPurchase: &'static str = "MaximumNumberOfTracksPerPurchase";
pub const g_szContentPartnerInfo_MediaPlayerAccountType: &'static str = "MediaPlayerAccountType";
pub const g_szContentPartnerInfo_PurchasedTrackRequiresReDownload: &'static str = "PurchasedTrackRequiresReDownload";
pub const g_szContentPartnerInfo_UserName: &'static str = "UserName";
pub const g_szContentPrice_CannotBuy: &'static str = "PriceCannotBuy";
pub const g_szContentPrice_Free: &'static str = "PriceFree";
pub const g_szContentPrice_Unknown: &'static str = "PriceUnknown";
pub const g_szFlyoutMenu: &'static str = "FlyoutMenu";
pub const g_szItemInfo_ALTLoginCaption: &'static str = "ALTLoginCaption";
pub const g_szItemInfo_ALTLoginURL: &'static str = "ALTLoginURL";
pub const g_szItemInfo_AlbumArtURL: &'static str = "AlbumArt";
pub const g_szItemInfo_ArtistArtURL: &'static str = "ArtistArt";
pub const g_szItemInfo_AuthenticationSuccessURL: &'static str = "AuthenticationSuccessURL";
pub const g_szItemInfo_CreateAccountURL: &'static str = "CreateAccount";
pub const g_szItemInfo_ErrorDescription: &'static str = "CPErrorDescription";
pub const g_szItemInfo_ErrorURL: &'static str = "CPErrorURL";
pub const g_szItemInfo_ErrorURLLinkText: &'static str = "CPErrorURLLinkText";
pub const g_szItemInfo_ForgetPasswordURL: &'static str = "ForgotPassword";
pub const g_szItemInfo_GenreArtURL: &'static str = "GenreArt";
pub const g_szItemInfo_HTMLViewURL: &'static str = "HTMLViewURL";
pub const g_szItemInfo_ListArtURL: &'static str = "ListArt";
pub const g_szItemInfo_LoginFailureURL: &'static str = "LoginFailureURL";
pub const g_szItemInfo_PopupCaption: &'static str = "PopupCaption";
pub const g_szItemInfo_PopupURL: &'static str = "Popup";
pub const g_szItemInfo_RadioArtURL: &'static str = "RadioArt";
pub const g_szItemInfo_SubGenreArtURL: &'static str = "SubGenreArt";
pub const g_szItemInfo_TreeListIconURL: &'static str = "CPListIDIcon";
pub const g_szMediaPlayerTask_Browse: &'static str = "Browse";
pub const g_szMediaPlayerTask_Burn: &'static str = "Burn";
pub const g_szMediaPlayerTask_Sync: &'static str = "Sync";
pub const g_szOnlineStore: &'static str = "OnlineStore";
pub const g_szRefreshLicenseBurn: &'static str = "RefreshForBurn";
pub const g_szRefreshLicensePlay: &'static str = "RefreshForPlay";
pub const g_szRefreshLicenseSync: &'static str = "RefreshForSync";
pub const g_szReleaseDateYear: &'static str = "ReleaseDateYear";
pub const g_szRootLocation: &'static str = "RootLocation";
pub const g_szStationEvent_Complete: &'static str = "TrackComplete";
pub const g_szStationEvent_Skipped: &'static str = "TrackSkipped";
pub const g_szStationEvent_Started: &'static str = "TrackStarted";
pub const g_szUnknownLocation: &'static str = "UnknownLocation";
pub const g_szUserEffectiveRatingStars: &'static str = "UserEffectiveRatingStars";
pub const g_szUserPlaylist: &'static str = "UserPlaylist";
pub const g_szVerifyPermissionSync: &'static str = "VerifyPermissionSync";
pub const g_szVideoRecent: &'static str = "VideoRecent";
pub const g_szVideoRoot: &'static str = "VideoRoot";
pub const g_szViewMode_Details: &'static str = "ViewModeDetails";
pub const g_szViewMode_Icon: &'static str = "ViewModeIcon";
pub const g_szViewMode_OrderedList: &'static str = "ViewModeOrderedList";
pub const g_szViewMode_Report: &'static str = "ViewModeReport";
pub const g_szViewMode_Tile: &'static str = "ViewModeTile";
pub const g_szWMParentalRating: &'static str = "WMParentalRating";
pub const kfltTimedLevelMaximumFrequency: f32 = 22050f32;
pub const kfltTimedLevelMinimumFrequency: f32 = 20f32;
