#![allow(non_snake_case, non_camel_case_types)]
#[link(name = "windows")]
extern "system" {
    fn BuildCommDCBA();
    fn BuildCommDCBAndTimeoutsA();
    fn BuildCommDCBAndTimeoutsW();
    fn BuildCommDCBW();
    fn CLEAR_COMM_ERROR_FLAGS();
    fn COMMCONFIG();
    fn COMMPROP();
    fn COMMPROP_STOP_PARITY();
    fn COMMTIMEOUTS();
    fn COMM_EVENT_MASK();
    fn COMSTAT();
    fn ClearCommBreak();
    fn ClearCommError();
    fn CommConfigDialogA();
    fn CommConfigDialogW();
    fn DCB();
    fn ESCAPE_COMM_FUNCTION();
    fn EscapeCommFunction();
    fn GetCommConfig();
    fn GetCommMask();
    fn GetCommModemStatus();
    fn GetCommPorts();
    fn GetCommProperties();
    fn GetCommState();
    fn GetCommTimeouts();
    fn GetDefaultCommConfigA();
    fn GetDefaultCommConfigW();
    fn MAXLENGTH_NAI();
    fn MAXLENGTH_UICCDATASTORE();
    fn MDM_ANALOG_RLP_OFF();
    fn MDM_ANALOG_RLP_ON();
    fn MDM_ANALOG_V34();
    fn MDM_AUTO_ML_2();
    fn MDM_AUTO_ML_DEFAULT();
    fn MDM_AUTO_ML_NONE();
    fn MDM_AUTO_SPEED_DEFAULT();
    fn MDM_BEARERMODE_ANALOG();
    fn MDM_BEARERMODE_GSM();
    fn MDM_BEARERMODE_ISDN();
    fn MDM_BLIND_DIAL();
    fn MDM_CCITT_OVERRIDE();
    fn MDM_CELLULAR();
    fn MDM_COMPRESSION();
    fn MDM_DIAGNOSTICS();
    fn MDM_ERROR_CONTROL();
    fn MDM_FLOWCONTROL_HARD();
    fn MDM_FLOWCONTROL_SOFT();
    fn MDM_FORCED_EC();
    fn MDM_HDLCPPP_AUTH_CHAP();
    fn MDM_HDLCPPP_AUTH_DEFAULT();
    fn MDM_HDLCPPP_AUTH_MSCHAP();
    fn MDM_HDLCPPP_AUTH_NONE();
    fn MDM_HDLCPPP_AUTH_PAP();
    fn MDM_HDLCPPP_ML_2();
    fn MDM_HDLCPPP_ML_DEFAULT();
    fn MDM_HDLCPPP_ML_NONE();
    fn MDM_HDLCPPP_SPEED_56K();
    fn MDM_HDLCPPP_SPEED_64K();
    fn MDM_HDLCPPP_SPEED_DEFAULT();
    fn MDM_MASK_AUTO_SPEED();
    fn MDM_MASK_BEARERMODE();
    fn MDM_MASK_HDLCPPP_SPEED();
    fn MDM_MASK_PROTOCOLDATA();
    fn MDM_MASK_PROTOCOLID();
    fn MDM_MASK_V110_SPEED();
    fn MDM_MASK_V120_SPEED();
    fn MDM_MASK_X75_DATA();
    fn MDM_PIAFS_INCOMING();
    fn MDM_PIAFS_OUTGOING();
    fn MDM_PROTOCOLID_ANALOG();
    fn MDM_PROTOCOLID_AUTO();
    fn MDM_PROTOCOLID_DEFAULT();
    fn MDM_PROTOCOLID_GPRS();
    fn MDM_PROTOCOLID_HDLCPPP();
    fn MDM_PROTOCOLID_PIAFS();
    fn MDM_PROTOCOLID_V110();
    fn MDM_PROTOCOLID_V120();
    fn MDM_PROTOCOLID_V128();
    fn MDM_PROTOCOLID_X75();
    fn MDM_SHIFT_AUTO_ML();
    fn MDM_SHIFT_AUTO_SPEED();
    fn MDM_SHIFT_BEARERMODE();
    fn MDM_SHIFT_EXTENDEDINFO();
    fn MDM_SHIFT_HDLCPPP_AUTH();
    fn MDM_SHIFT_HDLCPPP_ML();
    fn MDM_SHIFT_HDLCPPP_SPEED();
    fn MDM_SHIFT_PROTOCOLDATA();
    fn MDM_SHIFT_PROTOCOLID();
    fn MDM_SHIFT_PROTOCOLINFO();
    fn MDM_SHIFT_V110_SPEED();
    fn MDM_SHIFT_V120_ML();
    fn MDM_SHIFT_V120_SPEED();
    fn MDM_SHIFT_X75_DATA();
    fn MDM_SPEED_ADJUST();
    fn MDM_TONE_DIAL();
    fn MDM_V110_SPEED_12DOT0K();
    fn MDM_V110_SPEED_14DOT4K();
    fn MDM_V110_SPEED_19DOT2K();
    fn MDM_V110_SPEED_1DOT2K();
    fn MDM_V110_SPEED_28DOT8K();
    fn MDM_V110_SPEED_2DOT4K();
    fn MDM_V110_SPEED_38DOT4K();
    fn MDM_V110_SPEED_4DOT8K();
    fn MDM_V110_SPEED_57DOT6K();
    fn MDM_V110_SPEED_9DOT6K();
    fn MDM_V110_SPEED_DEFAULT();
    fn MDM_V120_ML_2();
    fn MDM_V120_ML_DEFAULT();
    fn MDM_V120_ML_NONE();
    fn MDM_V120_SPEED_56K();
    fn MDM_V120_SPEED_64K();
    fn MDM_V120_SPEED_DEFAULT();
    fn MDM_V23_OVERRIDE();
    fn MDM_X75_DATA_128K();
    fn MDM_X75_DATA_64K();
    fn MDM_X75_DATA_BTX();
    fn MDM_X75_DATA_DEFAULT();
    fn MDM_X75_DATA_T_70();
    fn MODEMDEVCAPS();
    fn MODEMDEVCAPS_DIAL_OPTIONS();
    fn MODEMDEVCAPS_SPEAKER_MODE();
    fn MODEMDEVCAPS_SPEAKER_VOLUME();
    fn MODEMSETTINGS();
    fn MODEMSETTINGS_SPEAKER_MODE();
    fn MODEM_SPEAKER_VOLUME();
    fn MODEM_STATUS_FLAGS();
    fn OpenCommPort();
    fn PURGE_COMM_FLAGS();
    fn PurgeComm();
    fn SID_3GPP_SUPSVCMODEL();
    fn SetCommBreak();
    fn SetCommConfig();
    fn SetCommMask();
    fn SetCommState();
    fn SetCommTimeouts();
    fn SetDefaultCommConfigA();
    fn SetDefaultCommConfigW();
    fn SetupComm();
    fn TransmitCommChar();
    fn WaitCommEvent();
}
