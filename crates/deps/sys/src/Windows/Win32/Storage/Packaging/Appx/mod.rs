#![allow(non_snake_case, non_camel_case_types)]
#[link(name = "windows")]
extern "system" {
    fn ActivatePackageVirtualizationContext();
    fn AddPackageDependency();
    fn AppPolicyGetClrCompat();
    fn AppPolicyGetCreateFileAccess();
    fn AppPolicyGetLifecycleManagement();
    fn AppPolicyGetMediaFoundationCodecLoading();
    fn AppPolicyGetProcessTerminationMethod();
    fn AppPolicyGetShowDeveloperDiagnostic();
    fn AppPolicyGetThreadInitializationType();
    fn AppPolicyGetWindowingModel();
    fn CheckIsMSIXPackage();
    fn ClosePackageInfo();
    fn CreatePackageVirtualizationContext();
    fn DeactivatePackageVirtualizationContext();
    fn DeletePackageDependency();
    fn DuplicatePackageVirtualizationContext();
    fn FindPackagesByPackageFamily();
    fn FormatApplicationUserModelId();
    fn GetApplicationUserModelId();
    fn GetApplicationUserModelIdFromToken();
    fn GetCurrentApplicationUserModelId();
    fn GetCurrentPackageFamilyName();
    fn GetCurrentPackageFullName();
    fn GetCurrentPackageId();
    fn GetCurrentPackageInfo();
    fn GetCurrentPackageInfo2();
    fn GetCurrentPackagePath();
    fn GetCurrentPackagePath2();
    fn GetCurrentPackageVirtualizationContext();
    fn GetIdForPackageDependencyContext();
    fn GetPackageApplicationIds();
    fn GetPackageFamilyName();
    fn GetPackageFamilyNameFromToken();
    fn GetPackageFullName();
    fn GetPackageFullNameFromToken();
    fn GetPackageId();
    fn GetPackageInfo();
    fn GetPackageInfo2();
    fn GetPackagePath();
    fn GetPackagePathByFullName();
    fn GetPackagePathByFullName2();
    fn GetPackagesByPackageFamily();
    fn GetProcessesInVirtualizationContext();
    fn GetResolvedPackageFullNameForPackageDependency();
    fn GetStagedPackageOrigin();
    fn GetStagedPackagePathByFullName();
    fn GetStagedPackagePathByFullName2();
    fn OpenPackageInfoByFullName();
    fn OpenPackageInfoByFullNameForUser();
    fn PackageFamilyNameFromFullName();
    fn PackageFamilyNameFromId();
    fn PackageFullNameFromId();
    fn PackageIdFromFullName();
    fn PackageNameAndPublisherIdFromFamilyName();
    fn ParseApplicationUserModelId();
    fn ReleasePackageVirtualizationContext();
    fn RemovePackageDependency();
    fn TryCreatePackageDependency();
    fn VerifyApplicationUserModelId();
    fn VerifyPackageFamilyName();
    fn VerifyPackageFullName();
    fn VerifyPackageId();
    fn VerifyPackageRelativeApplicationId();
}
