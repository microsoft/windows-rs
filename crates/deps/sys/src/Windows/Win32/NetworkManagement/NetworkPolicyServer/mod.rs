#![allow(non_snake_case, non_camel_case_types, non_upper_case_globals, clashing_extern_declarations, clippy::all)]
#[link(name = "windows")]
extern "system" {}
pub const PROPERTY_ACCOUNTING_LOG_ACCOUNTING: i32 = 1026i32;
pub const PROPERTY_ACCOUNTING_LOG_ACCOUNTING_INTERIM: i32 = 1027i32;
pub const PROPERTY_ACCOUNTING_LOG_AUTHENTICATION: i32 = 1028i32;
pub const PROPERTY_ACCOUNTING_LOG_OPEN_NEW_FREQUENCY: i32 = 1029i32;
pub const PROPERTY_ACCOUNTING_LOG_OPEN_NEW_SIZE: i32 = 1030i32;
pub const PROPERTY_ACCOUNTING_LOG_FILE_DIRECTORY: i32 = 1031i32;
pub const PROPERTY_ACCOUNTING_LOG_IAS1_FORMAT: i32 = 1032i32;
pub const PROPERTY_ACCOUNTING_LOG_ENABLE_LOGGING: i32 = 1033i32;
pub const PROPERTY_ACCOUNTING_LOG_DELETE_IF_FULL: i32 = 1034i32;
pub const PROPERTY_ACCOUNTING_SQL_MAX_SESSIONS: i32 = 1035i32;
pub const PROPERTY_ACCOUNTING_LOG_AUTHENTICATION_INTERIM: i32 = 1036i32;
pub const PROPERTY_ACCOUNTING_LOG_FILE_IS_BACKUP: i32 = 1037i32;
pub const PROPERTY_ACCOUNTING_DISCARD_REQUEST_ON_FAILURE: i32 = 1038i32;
pub const ATTRIBUTE_FILTER_NONE: i32 = 0i32;
pub const ATTRIBUTE_FILTER_VPN_DIALUP: i32 = 1i32;
pub const ATTRIBUTE_FILTER_IEEE_802_1x: i32 = 2i32;
pub const ATTRIBUTE_UNDEFINED: u32 = 0u32;
pub const ATTRIBUTE_MIN_VALUE: u32 = 1u32;
pub const RADIUS_ATTRIBUTE_USER_NAME: u32 = 1u32;
pub const RADIUS_ATTRIBUTE_USER_PASSWORD: u32 = 2u32;
pub const RADIUS_ATTRIBUTE_CHAP_PASSWORD: u32 = 3u32;
pub const RADIUS_ATTRIBUTE_NAS_IP_ADDRESS: u32 = 4u32;
pub const RADIUS_ATTRIBUTE_NAS_PORT: u32 = 5u32;
pub const RADIUS_ATTRIBUTE_SERVICE_TYPE: u32 = 6u32;
pub const RADIUS_ATTRIBUTE_FRAMED_PROTOCOL: u32 = 7u32;
pub const RADIUS_ATTRIBUTE_FRAMED_IP_ADDRESS: u32 = 8u32;
pub const RADIUS_ATTRIBUTE_FRAMED_IP_NETMASK: u32 = 9u32;
pub const RADIUS_ATTRIBUTE_FRAMED_ROUTING: u32 = 10u32;
pub const RADIUS_ATTRIBUTE_FILTER_ID: u32 = 11u32;
pub const RADIUS_ATTRIBUTE_FRAMED_MTU: u32 = 12u32;
pub const RADIUS_ATTRIBUTE_FRAMED_COMPRESSION: u32 = 13u32;
pub const RADIUS_ATTRIBUTE_LOGIN_IP_HOST: u32 = 14u32;
pub const RADIUS_ATTRIBUTE_LOGIN_SERVICE: u32 = 15u32;
pub const RADIUS_ATTRIBUTE_LOGIN_TCP_PORT: u32 = 16u32;
pub const RADIUS_ATTRIBUTE_UNASSIGNED1: u32 = 17u32;
pub const RADIUS_ATTRIBUTE_REPLY_MESSAGE: u32 = 18u32;
pub const RADIUS_ATTRIBUTE_CALLBACK_NUMBER: u32 = 19u32;
pub const RADIUS_ATTRIBUTE_CALLBACK_ID: u32 = 20u32;
pub const RADIUS_ATTRIBUTE_UNASSIGNED2: u32 = 21u32;
pub const RADIUS_ATTRIBUTE_FRAMED_ROUTE: u32 = 22u32;
pub const RADIUS_ATTRIBUTE_FRAMED_IPX_NETWORK: u32 = 23u32;
pub const RADIUS_ATTRIBUTE_STATE: u32 = 24u32;
pub const RADIUS_ATTRIBUTE_CLASS: u32 = 25u32;
pub const RADIUS_ATTRIBUTE_VENDOR_SPECIFIC: u32 = 26u32;
pub const RADIUS_ATTRIBUTE_SESSION_TIMEOUT: u32 = 27u32;
pub const RADIUS_ATTRIBUTE_IDLE_TIMEOUT: u32 = 28u32;
pub const RADIUS_ATTRIBUTE_TERMINATION_ACTION: u32 = 29u32;
pub const RADIUS_ATTRIBUTE_CALLED_STATION_ID: u32 = 30u32;
pub const RADIUS_ATTRIBUTE_CALLING_STATION_ID: u32 = 31u32;
pub const RADIUS_ATTRIBUTE_NAS_IDENTIFIER: u32 = 32u32;
pub const RADIUS_ATTRIBUTE_PROXY_STATE: u32 = 33u32;
pub const RADIUS_ATTRIBUTE_LOGIN_LAT_SERVICE: u32 = 34u32;
pub const RADIUS_ATTRIBUTE_LOGIN_LAT_NODE: u32 = 35u32;
pub const RADIUS_ATTRIBUTE_LOGIN_LAT_GROUP: u32 = 36u32;
pub const RADIUS_ATTRIBUTE_FRAMED_APPLETALK_LINK: u32 = 37u32;
pub const RADIUS_ATTRIBUTE_FRAMED_APPLETALK_NET: u32 = 38u32;
pub const RADIUS_ATTRIBUTE_FRAMED_APPLETALK_ZONE: u32 = 39u32;
pub const RADIUS_ATTRIBUTE_ACCT_STATUS_TYPE: u32 = 40u32;
pub const RADIUS_ATTRIBUTE_ACCT_DELAY_TIME: u32 = 41u32;
pub const RADIUS_ATTRIBUTE_ACCT_INPUT_OCTETS: u32 = 42u32;
pub const RADIUS_ATTRIBUTE_ACCT_OUTPUT_OCTETS: u32 = 43u32;
pub const RADIUS_ATTRIBUTE_ACCT_SESSION_ID: u32 = 44u32;
pub const RADIUS_ATTRIBUTE_ACCT_AUTHENTIC: u32 = 45u32;
pub const RADIUS_ATTRIBUTE_ACCT_SESSION_TIME: u32 = 46u32;
pub const RADIUS_ATTRIBUTE_ACCT_INPUT_PACKETS: u32 = 47u32;
pub const RADIUS_ATTRIBUTE_ACCT_OUTPUT_PACKETS: u32 = 48u32;
pub const RADIUS_ATTRIBUTE_ACCT_TERMINATE_CAUSE: u32 = 49u32;
pub const RADIUS_ATTRIBUTE_ACCT_MULTI_SSN_ID: u32 = 50u32;
pub const RADIUS_ATTRIBUTE_ACCT_LINK_COUNT: u32 = 51u32;
pub const RADIUS_ATTRIBUTE_CHAP_CHALLENGE: u32 = 60u32;
pub const RADIUS_ATTRIBUTE_NAS_PORT_TYPE: u32 = 61u32;
pub const RADIUS_ATTRIBUTE_PORT_LIMIT: u32 = 62u32;
pub const RADIUS_ATTRIBUTE_LOGIN_LAT_PORT: u32 = 63u32;
pub const RADIUS_ATTRIBUTE_TUNNEL_TYPE: u32 = 64u32;
pub const RADIUS_ATTRIBUTE_TUNNEL_MEDIUM_TYPE: u32 = 65u32;
pub const RADIUS_ATTRIBUTE_TUNNEL_CLIENT_ENDPT: u32 = 66u32;
pub const RADIUS_ATTRIBUTE_TUNNEL_SERVER_ENDPT: u32 = 67u32;
pub const RADIUS_ATTRIBUTE_ACCT_TUNNEL_CONN: u32 = 68u32;
pub const RADIUS_ATTRIBUTE_TUNNEL_PASSWORD: u32 = 69u32;
pub const RADIUS_ATTRIBUTE_ARAP_PASSWORD: u32 = 70u32;
pub const RADIUS_ATTRIBUTE_ARAP_FEATURES: u32 = 71u32;
pub const RADIUS_ATTRIBUTE_ARAP_ZONE_ACCESS: u32 = 72u32;
pub const RADIUS_ATTRIBUTE_ARAP_SECURITY: u32 = 73u32;
pub const RADIUS_ATTRIBUTE_ARAP_SECURITY_DATA: u32 = 74u32;
pub const RADIUS_ATTRIBUTE_PASSWORD_RETRY: u32 = 75u32;
pub const RADIUS_ATTRIBUTE_PROMPT: u32 = 76u32;
pub const RADIUS_ATTRIBUTE_CONNECT_INFO: u32 = 77u32;
pub const RADIUS_ATTRIBUTE_CONFIGURATION_TOKEN: u32 = 78u32;
pub const RADIUS_ATTRIBUTE_EAP_MESSAGE: u32 = 79u32;
pub const RADIUS_ATTRIBUTE_SIGNATURE: u32 = 80u32;
pub const RADIUS_ATTRIBUTE_TUNNEL_PVT_GROUP_ID: u32 = 81u32;
pub const RADIUS_ATTRIBUTE_TUNNEL_ASSIGNMENT_ID: u32 = 82u32;
pub const RADIUS_ATTRIBUTE_TUNNEL_PREFERENCE: u32 = 83u32;
pub const RADIUS_ATTRIBUTE_ARAP_CHALLENGE_RESPONSE: u32 = 84u32;
pub const RADIUS_ATTRIBUTE_ACCT_INTERIM_INTERVAL: u32 = 85u32;
pub const RADIUS_ATTRIBUTE_NAS_IPv6_ADDRESS: u32 = 95u32;
pub const RADIUS_ATTRIBUTE_FRAMED_INTERFACE_ID: u32 = 96u32;
pub const RADIUS_ATTRIBUTE_FRAMED_IPv6_PREFIX: u32 = 97u32;
pub const RADIUS_ATTRIBUTE_LOGIN_IPv6_HOST: u32 = 98u32;
pub const RADIUS_ATTRIBUTE_FRAMED_IPv6_ROUTE: u32 = 99u32;
pub const RADIUS_ATTRIBUTE_FRAMED_IPv6_POOL: u32 = 100u32;
pub const IAS_ATTRIBUTE_SAVED_RADIUS_FRAMED_IP_ADDRESS: u32 = 4096u32;
pub const IAS_ATTRIBUTE_SAVED_RADIUS_CALLBACK_NUMBER: u32 = 4097u32;
pub const IAS_ATTRIBUTE_NP_CALLING_STATION_ID: u32 = 4098u32;
pub const IAS_ATTRIBUTE_SAVED_NP_CALLING_STATION_ID: u32 = 4099u32;
pub const IAS_ATTRIBUTE_SAVED_RADIUS_FRAMED_ROUTE: u32 = 4100u32;
pub const IAS_ATTRIBUTE_IGNORE_USER_DIALIN_PROPERTIES: u32 = 4101u32;
pub const IAS_ATTRIBUTE_NP_TIME_OF_DAY: u32 = 4102u32;
pub const IAS_ATTRIBUTE_NP_CALLED_STATION_ID: u32 = 4103u32;
pub const IAS_ATTRIBUTE_NP_ALLOWED_PORT_TYPES: u32 = 4104u32;
pub const IAS_ATTRIBUTE_NP_AUTHENTICATION_TYPE: u32 = 4105u32;
pub const IAS_ATTRIBUTE_NP_ALLOWED_EAP_TYPE: u32 = 4106u32;
pub const IAS_ATTRIBUTE_SHARED_SECRET: u32 = 4107u32;
pub const IAS_ATTRIBUTE_CLIENT_IP_ADDRESS: u32 = 4108u32;
pub const IAS_ATTRIBUTE_CLIENT_PACKET_HEADER: u32 = 4109u32;
pub const IAS_ATTRIBUTE_TOKEN_GROUPS: u32 = 4110u32;
pub const IAS_ATTRIBUTE_ALLOW_DIALIN: u32 = 4111u32;
pub const IAS_ATTRIBUTE_REQUEST_ID: u32 = 4112u32;
pub const IAS_ATTRIBUTE_MANIPULATION_TARGET: u32 = 4113u32;
pub const IAS_ATTRIBUTE_MANIPULATION_RULE: u32 = 4114u32;
pub const IAS_ATTRIBUTE_ORIGINAL_USER_NAME: u32 = 4115u32;
pub const IAS_ATTRIBUTE_CLIENT_VENDOR_TYPE: u32 = 4116u32;
pub const IAS_ATTRIBUTE_CLIENT_UDP_PORT: u32 = 4117u32;
pub const MS_ATTRIBUTE_CHAP_CHALLENGE: u32 = 4118u32;
pub const MS_ATTRIBUTE_CHAP_RESPONSE: u32 = 4119u32;
pub const MS_ATTRIBUTE_CHAP_DOMAIN: u32 = 4120u32;
pub const MS_ATTRIBUTE_CHAP_ERROR: u32 = 4121u32;
pub const MS_ATTRIBUTE_CHAP_CPW1: u32 = 4122u32;
pub const MS_ATTRIBUTE_CHAP_CPW2: u32 = 4123u32;
pub const MS_ATTRIBUTE_CHAP_LM_ENC_PW: u32 = 4124u32;
pub const MS_ATTRIBUTE_CHAP_NT_ENC_PW: u32 = 4125u32;
pub const MS_ATTRIBUTE_CHAP_MPPE_KEYS: u32 = 4126u32;
pub const IAS_ATTRIBUTE_AUTHENTICATION_TYPE: u32 = 4127u32;
pub const IAS_ATTRIBUTE_CLIENT_NAME: u32 = 4128u32;
pub const IAS_ATTRIBUTE_NT4_ACCOUNT_NAME: u32 = 4129u32;
pub const IAS_ATTRIBUTE_FULLY_QUALIFIED_USER_NAME: u32 = 4130u32;
pub const IAS_ATTRIBUTE_NTGROUPS: u32 = 4131u32;
pub const IAS_ATTRIBUTE_EAP_FRIENDLY_NAME: u32 = 4132u32;
pub const IAS_ATTRIBUTE_AUTH_PROVIDER_TYPE: u32 = 4133u32;
pub const MS_ATTRIBUTE_ACCT_AUTH_TYPE: u32 = 4134u32;
pub const MS_ATTRIBUTE_ACCT_EAP_TYPE: u32 = 4135u32;
pub const IAS_ATTRIBUTE_PACKET_TYPE: u32 = 4136u32;
pub const IAS_ATTRIBUTE_AUTH_PROVIDER_NAME: u32 = 4137u32;
pub const IAS_ATTRIBUTE_ACCT_PROVIDER_TYPE: u32 = 4138u32;
pub const IAS_ATTRIBUTE_ACCT_PROVIDER_NAME: u32 = 4139u32;
pub const MS_ATTRIBUTE_MPPE_SEND_KEY: u32 = 4140u32;
pub const MS_ATTRIBUTE_MPPE_RECV_KEY: u32 = 4141u32;
pub const IAS_ATTRIBUTE_REASON_CODE: u32 = 4142u32;
pub const MS_ATTRIBUTE_FILTER: u32 = 4143u32;
pub const MS_ATTRIBUTE_CHAP2_RESPONSE: u32 = 4144u32;
pub const MS_ATTRIBUTE_CHAP2_SUCCESS: u32 = 4145u32;
pub const MS_ATTRIBUTE_CHAP2_CPW: u32 = 4146u32;
pub const MS_ATTRIBUTE_RAS_VENDOR: u32 = 4147u32;
pub const MS_ATTRIBUTE_RAS_VERSION: u32 = 4148u32;
pub const IAS_ATTRIBUTE_NP_NAME: u32 = 4149u32;
pub const MS_ATTRIBUTE_PRIMARY_DNS_SERVER: u32 = 4150u32;
pub const MS_ATTRIBUTE_SECONDARY_DNS_SERVER: u32 = 4151u32;
pub const MS_ATTRIBUTE_PRIMARY_NBNS_SERVER: u32 = 4152u32;
pub const MS_ATTRIBUTE_SECONDARY_NBNS_SERVER: u32 = 4153u32;
pub const IAS_ATTRIBUTE_PROXY_POLICY_NAME: u32 = 4154u32;
pub const IAS_ATTRIBUTE_PROVIDER_TYPE: u32 = 4155u32;
pub const IAS_ATTRIBUTE_PROVIDER_NAME: u32 = 4156u32;
pub const IAS_ATTRIBUTE_REMOTE_SERVER_ADDRESS: u32 = 4157u32;
pub const IAS_ATTRIBUTE_GENERATE_CLASS_ATTRIBUTE: u32 = 4158u32;
pub const MS_ATTRIBUTE_RAS_CLIENT_NAME: u32 = 4159u32;
pub const MS_ATTRIBUTE_RAS_CLIENT_VERSION: u32 = 4160u32;
pub const IAS_ATTRIBUTE_ALLOWED_CERTIFICATE_EKU: u32 = 4161u32;
pub const IAS_ATTRIBUTE_EXTENSION_STATE: u32 = 4162u32;
pub const IAS_ATTRIBUTE_GENERATE_SESSION_TIMEOUT: u32 = 4163u32;
pub const IAS_ATTRIBUTE_SESSION_TIMEOUT: u32 = 4164u32;
pub const MS_ATTRIBUTE_QUARANTINE_IPFILTER: u32 = 4165u32;
pub const MS_ATTRIBUTE_QUARANTINE_SESSION_TIMEOUT: u32 = 4166u32;
pub const MS_ATTRIBUTE_USER_SECURITY_IDENTITY: u32 = 4167u32;
pub const IAS_ATTRIBUTE_REMOTE_RADIUS_TO_WINDOWS_USER_MAPPING: u32 = 4168u32;
pub const IAS_ATTRIBUTE_PASSPORT_USER_MAPPING_UPN_SUFFIX: u32 = 4169u32;
pub const IAS_ATTRIBUTE_TUNNEL_TAG: u32 = 4170u32;
pub const IAS_ATTRIBUTE_NP_PEAPUPFRONT_ENABLED: u32 = 4171u32;
pub const IAS_ATTRIBUTE_CERTIFICATE_EKU: u32 = 8097u32;
pub const IAS_ATTRIBUTE_EAP_CONFIG: u32 = 8098u32;
pub const IAS_ATTRIBUTE_PEAP_EMBEDDED_EAP_TYPEID: u32 = 8099u32;
pub const IAS_ATTRIBUTE_PEAP_FAST_ROAMED_SESSION: u32 = 8100u32;
pub const IAS_ATTRIBUTE_EAP_TYPEID: u32 = 8101u32;
pub const MS_ATTRIBUTE_EAP_TLV: u32 = 8102u32;
pub const IAS_ATTRIBUTE_REJECT_REASON_CODE: u32 = 8103u32;
pub const IAS_ATTRIBUTE_PROXY_EAP_CONFIG: u32 = 8104u32;
pub const IAS_ATTRIBUTE_EAP_SESSION: u32 = 8105u32;
pub const IAS_ATTRIBUTE_IS_REPLAY: u32 = 8106u32;
pub const IAS_ATTRIBUTE_CLEAR_TEXT_PASSWORD: u32 = 8107u32;
pub const MS_ATTRIBUTE_IDENTITY_TYPE: u32 = 8108u32;
pub const MS_ATTRIBUTE_SERVICE_CLASS: u32 = 8109u32;
pub const MS_ATTRIBUTE_QUARANTINE_USER_CLASS: u32 = 8110u32;
pub const MS_ATTRIBUTE_QUARANTINE_STATE: u32 = 8111u32;
pub const IAS_ATTRIBUTE_OVERRIDE_RAP_AUTH: u32 = 8112u32;
pub const IAS_ATTRIBUTE_PEAP_CHANNEL_UP: u32 = 8113u32;
pub const IAS_ATTRIBUTE_NAME_MAPPED: u32 = 8114u32;
pub const IAS_ATTRIBUTE_POLICY_ENFORCED: u32 = 8115u32;
pub const IAS_ATTRIBUTE_MACHINE_NTGROUPS: u32 = 8116u32;
pub const IAS_ATTRIBUTE_USER_NTGROUPS: u32 = 8117u32;
pub const IAS_ATTRIBUTE_MACHINE_TOKEN_GROUPS: u32 = 8118u32;
pub const IAS_ATTRIBUTE_USER_TOKEN_GROUPS: u32 = 8119u32;
pub const MS_ATTRIBUTE_QUARANTINE_GRACE_TIME: u32 = 8120u32;
pub const IAS_ATTRIBUTE_QUARANTINE_URL: u32 = 8121u32;
pub const IAS_ATTRIBUTE_QUARANTINE_FIXUP_SERVERS: u32 = 8122u32;
pub const MS_ATTRIBUTE_NOT_QUARANTINE_CAPABLE: u32 = 8123u32;
pub const IAS_ATTRIBUTE_QUARANTINE_SYSTEM_HEALTH_RESULT: u32 = 8124u32;
pub const IAS_ATTRIBUTE_QUARANTINE_SYSTEM_HEALTH_VALIDATORS: u32 = 8125u32;
pub const IAS_ATTRIBUTE_MACHINE_NAME: u32 = 8126u32;
pub const IAS_ATTRIBUTE_NT4_MACHINE_NAME: u32 = 8127u32;
pub const IAS_ATTRIBUTE_QUARANTINE_SESSION_HANDLE: u32 = 8128u32;
pub const IAS_ATTRIBUTE_FULLY_QUALIFIED_MACHINE_NAME: u32 = 8129u32;
pub const IAS_ATTRIBUTE_QUARANTINE_FIXUP_SERVERS_CONFIGURATION: u32 = 8130u32;
pub const IAS_ATTRIBUTE_CLIENT_QUARANTINE_COMPATIBLE: u32 = 8131u32;
pub const MS_ATTRIBUTE_NETWORK_ACCESS_SERVER_TYPE: u32 = 8132u32;
pub const IAS_ATTRIBUTE_QUARANTINE_SESSION_ID: u32 = 8133u32;
pub const MS_ATTRIBUTE_AFW_QUARANTINE_ZONE: u32 = 8134u32;
pub const MS_ATTRIBUTE_AFW_PROTECTION_LEVEL: u32 = 8135u32;
pub const IAS_ATTRIBUTE_QUARANTINE_UPDATE_NON_COMPLIANT: u32 = 8136u32;
pub const IAS_ATTRIBUTE_REQUEST_START_TIME: u32 = 8137u32;
pub const MS_ATTRIBUTE_MACHINE_NAME: u32 = 8138u32;
pub const IAS_ATTRIBUTE_CLIENT_IPv6_ADDRESS: u32 = 8139u32;
pub const IAS_ATTRIBUTE_SAVED_RADIUS_FRAMED_INTERFACE_ID: u32 = 8140u32;
pub const IAS_ATTRIBUTE_SAVED_RADIUS_FRAMED_IPv6_PREFIX: u32 = 8141u32;
pub const IAS_ATTRIBUTE_SAVED_RADIUS_FRAMED_IPv6_ROUTE: u32 = 8142u32;
pub const MS_ATTRIBUTE_QUARANTINE_GRACE_TIME_CONFIGURATION: u32 = 8143u32;
pub const MS_ATTRIBUTE_IPv6_FILTER: u32 = 8144u32;
pub const MS_ATTRIBUTE_IPV4_REMEDIATION_SERVERS: u32 = 8145u32;
pub const MS_ATTRIBUTE_IPV6_REMEDIATION_SERVERS: u32 = 8146u32;
pub const IAS_ATTRIBUTE_PROXY_RETRY_COUNT: u32 = 8147u32;
pub const IAS_ATTRIBUTE_MACHINE_INVENTORY: u32 = 8148u32;
pub const IAS_ATTRIBUTE_ABSOLUTE_TIME: u32 = 8149u32;
pub const MS_ATTRIBUTE_QUARANTINE_SOH: u32 = 8150u32;
pub const IAS_ATTRIBUTE_EAP_TYPES_CONFIGURED_IN_PROXYPOLICY: u32 = 8151u32;
pub const MS_ATTRIBUTE_HCAP_LOCATION_GROUP_NAME: u32 = 8152u32;
pub const MS_ATTRIBUTE_EXTENDED_QUARANTINE_STATE: u32 = 8153u32;
pub const IAS_ATTRIBUTE_SOH_CARRIER_EAPTLV: u32 = 8154u32;
pub const MS_ATTRIBUTE_HCAP_USER_GROUPS: u32 = 8155u32;
pub const IAS_ATTRIBUTE_SAVED_MACHINE_HEALTHCHECK_ONLY: u32 = 8156u32;
pub const IAS_ATTRIBUTE_POLICY_EVALUATED_SHV: u32 = 8157u32;
pub const MS_ATTRIBUTE_RAS_CORRELATION_ID: u32 = 8158u32;
pub const MS_ATTRIBUTE_HCAP_USER_NAME: u32 = 8159u32;
pub const IAS_ATTRIBUTE_NT4_HCAP_ACCOUNT_NAME: u32 = 8160u32;
pub const IAS_ATTRIBUTE_USER_TOKEN_SID: u32 = 8161u32;
pub const IAS_ATTRIBUTE_MACHINE_TOKEN_SID: u32 = 8162u32;
pub const IAS_ATTRIBUTE_MACHINE_VALIDATED: u32 = 8163u32;
pub const MS_ATTRIBUTE_USER_IPv4_ADDRESS: u32 = 8164u32;
pub const MS_ATTRIBUTE_USER_IPv6_ADDRESS: u32 = 8165u32;
pub const MS_ATTRIBUTE_TSG_DEVICE_REDIRECTION: u32 = 8166u32;
pub const IAS_ATTRIBUTE_ACCEPT_REASON_CODE: u32 = 8167u32;
pub const IAS_ATTRIBUTE_LOGGING_RESULT: u32 = 8168u32;
pub const IAS_ATTRIBUTE_SERVER_IP_ADDRESS: u32 = 8169u32;
pub const IAS_ATTRIBUTE_SERVER_IPv6_ADDRESS: u32 = 8170u32;
pub const IAS_ATTRIBUTE_RADIUS_USERNAME_ENCODING_ASCII: u32 = 8171u32;
pub const MS_ATTRIBUTE_RAS_ROUTING_DOMAIN_ID: u32 = 8172u32;
pub const IAS_ATTRIBUTE_CERTIFICATE_THUMBPRINT: u32 = 8250u32;
pub const RAS_ATTRIBUTE_ENCRYPTION_TYPE: u32 = 4294967206u32;
pub const RAS_ATTRIBUTE_ENCRYPTION_POLICY: u32 = 4294967207u32;
pub const RAS_ATTRIBUTE_BAP_REQUIRED: u32 = 4294967208u32;
pub const RAS_ATTRIBUTE_BAP_LINE_DOWN_TIME: u32 = 4294967209u32;
pub const RAS_ATTRIBUTE_BAP_LINE_DOWN_LIMIT: u32 = 4294967210u32;
pub const NAME: i32 = 1i32;
pub const SYNTAX: i32 = 2i32;
pub const RESTRICTIONS: i32 = 3i32;
pub const DESCRIPTION: i32 = 4i32;
pub const VENDORID: i32 = 5i32;
pub const LDAPNAME: i32 = 6i32;
pub const VENDORTYPE: i32 = 7i32;
pub const PROPERTY_ATTRIBUTE_ID: i32 = 1024i32;
pub const PROPERTY_ATTRIBUTE_VENDOR_ID: i32 = 1025i32;
pub const PROPERTY_ATTRIBUTE_VENDOR_TYPE_ID: i32 = 1026i32;
pub const PROPERTY_ATTRIBUTE_IS_ENUMERABLE: i32 = 1027i32;
pub const PROPERTY_ATTRIBUTE_ENUM_NAMES: i32 = 1028i32;
pub const PROPERTY_ATTRIBUTE_ENUM_VALUES: i32 = 1029i32;
pub const PROPERTY_ATTRIBUTE_SYNTAX: i32 = 1030i32;
pub const PROPERTY_ATTRIBUTE_ALLOW_MULTIPLE: i32 = 1031i32;
pub const PROPERTY_ATTRIBUTE_ALLOW_LOG_ORDINAL: i32 = 1032i32;
pub const PROPERTY_ATTRIBUTE_ALLOW_IN_PROFILE: i32 = 1033i32;
pub const PROPERTY_ATTRIBUTE_ALLOW_IN_CONDITION: i32 = 1034i32;
pub const PROPERTY_ATTRIBUTE_DISPLAY_NAME: i32 = 1035i32;
pub const PROPERTY_ATTRIBUTE_VALUE: i32 = 1036i32;
pub const PROPERTY_ATTRIBUTE_ALLOW_IN_PROXY_PROFILE: i32 = 1037i32;
pub const PROPERTY_ATTRIBUTE_ALLOW_IN_PROXY_CONDITION: i32 = 1038i32;
pub const PROPERTY_ATTRIBUTE_ALLOW_IN_VPNDIALUP: i32 = 1039i32;
pub const PROPERTY_ATTRIBUTE_ALLOW_IN_8021X: i32 = 1040i32;
pub const PROPERTY_ATTRIBUTE_ENUM_FILTERS: i32 = 1041i32;
pub const MULTIVALUED: i32 = 1i32;
pub const ALLOWEDINPROFILE: i32 = 2i32;
pub const ALLOWEDINCONDITION: i32 = 4i32;
pub const ALLOWEDINPROXYPROFILE: i32 = 8i32;
pub const ALLOWEDINPROXYCONDITION: i32 = 16i32;
pub const ALLOWEDINVPNDIALUP: i32 = 32i32;
pub const ALLOWEDIN8021X: i32 = 64i32;
pub const IAS_SYNTAX_BOOLEAN: i32 = 1i32;
pub const IAS_SYNTAX_INTEGER: i32 = 2i32;
pub const IAS_SYNTAX_ENUMERATOR: i32 = 3i32;
pub const IAS_SYNTAX_INETADDR: i32 = 4i32;
pub const IAS_SYNTAX_STRING: i32 = 5i32;
pub const IAS_SYNTAX_OCTETSTRING: i32 = 6i32;
pub const IAS_SYNTAX_UTCTIME: i32 = 7i32;
pub const IAS_SYNTAX_PROVIDERSPECIFIC: i32 = 8i32;
pub const IAS_SYNTAX_UNSIGNEDINTEGER: i32 = 9i32;
pub const IAS_SYNTAX_INETADDR6: i32 = 10i32;
pub const IAS_AUTH_INVALID: i32 = 0i32;
pub const IAS_AUTH_PAP: i32 = 1i32;
pub const IAS_AUTH_MD5CHAP: i32 = 2i32;
pub const IAS_AUTH_MSCHAP: i32 = 3i32;
pub const IAS_AUTH_MSCHAP2: i32 = 4i32;
pub const IAS_AUTH_EAP: i32 = 5i32;
pub const IAS_AUTH_ARAP: i32 = 6i32;
pub const IAS_AUTH_NONE: i32 = 7i32;
pub const IAS_AUTH_CUSTOM: i32 = 8i32;
pub const IAS_AUTH_MSCHAP_CPW: i32 = 9i32;
pub const IAS_AUTH_MSCHAP2_CPW: i32 = 10i32;
pub const IAS_AUTH_PEAP: i32 = 11i32;
pub const PROPERTY_CLIENT_REQUIRE_SIGNATURE: i32 = 1024i32;
pub const PROPERTY_CLIENT_UNUSED: i32 = 1025i32;
pub const PROPERTY_CLIENT_SHARED_SECRET: i32 = 1026i32;
pub const PROPERTY_CLIENT_NAS_MANUFACTURER: i32 = 1027i32;
pub const PROPERTY_CLIENT_ADDRESS: i32 = 1028i32;
pub const PROPERTY_CLIENT_QUARANTINE_COMPATIBLE: i32 = 1029i32;
pub const PROPERTY_CLIENT_ENABLED: i32 = 1030i32;
pub const PROPERTY_CLIENT_SECRET_TEMPLATE_GUID: i32 = 1031i32;
pub const PROPERTY_CONDITION_TEXT: i32 = 1024i32;
pub const PROPERTY_DICTIONARY_ATTRIBUTES_COLLECTION: i32 = 1024i32;
pub const PROPERTY_DICTIONARY_LOCATION: i32 = 1025i32;
pub const PROPERTY_SDO_RESERVED: i32 = 0i32;
pub const PROPERTY_SDO_CLASS: i32 = 1i32;
pub const PROPERTY_SDO_NAME: i32 = 2i32;
pub const PROPERTY_SDO_DESCRIPTION: i32 = 3i32;
pub const PROPERTY_SDO_ID: i32 = 4i32;
pub const PROPERTY_SDO_DATASTORE_NAME: i32 = 5i32;
pub const PROPERTY_SDO_TEMPLATE_GUID: i32 = 6i32;
pub const PROPERTY_SDO_OPAQUE: i32 = 7i32;
pub const PROPERTY_SDO_START: i32 = 1024i32;
pub const PROPERTY_COMPONENT_ID: i32 = 1024i32;
pub const PROPERTY_COMPONENT_PROG_ID: i32 = 1025i32;
pub const PROPERTY_COMPONENT_START: i32 = 1026i32;
pub const DATA_STORE_LOCAL: i32 = 0i32;
pub const DATA_STORE_DIRECTORY: i32 = 1i32;
pub const DOMAIN_TYPE_NONE: i32 = 0i32;
pub const DOMAIN_TYPE_NT4: i32 = 1i32;
pub const DOMAIN_TYPE_NT5: i32 = 2i32;
pub const DOMAIN_TYPE_MIXED: i32 = 3i32;
pub const SYSTEM_TYPE_NT4_WORKSTATION: i32 = 0i32;
pub const SYSTEM_TYPE_NT5_WORKSTATION: i32 = 1i32;
pub const SYSTEM_TYPE_NT6_WORKSTATION: i32 = 2i32;
pub const SYSTEM_TYPE_NT6_1_WORKSTATION: i32 = 3i32;
pub const SYSTEM_TYPE_NT6_2_WORKSTATION: i32 = 4i32;
pub const SYSTEM_TYPE_NT6_3_WORKSTATION: i32 = 5i32;
pub const SYSTEM_TYPE_NT10_0_WORKSTATION: i32 = 6i32;
pub const SYSTEM_TYPE_NT4_SERVER: i32 = 7i32;
pub const SYSTEM_TYPE_NT5_SERVER: i32 = 8i32;
pub const SYSTEM_TYPE_NT6_SERVER: i32 = 9i32;
pub const SYSTEM_TYPE_NT6_1_SERVER: i32 = 10i32;
pub const SYSTEM_TYPE_NT6_2_SERVER: i32 = 11i32;
pub const SYSTEM_TYPE_NT6_3_SERVER: i32 = 12i32;
pub const SYSTEM_TYPE_NT10_0_SERVER: i32 = 13i32;
pub const PROPERTY_IAS_RADIUSSERVERGROUPS_COLLECTION: i32 = 1024i32;
pub const PROPERTY_IAS_POLICIES_COLLECTION: i32 = 1025i32;
pub const PROPERTY_IAS_PROFILES_COLLECTION: i32 = 1026i32;
pub const PROPERTY_IAS_PROTOCOLS_COLLECTION: i32 = 1027i32;
pub const PROPERTY_IAS_AUDITORS_COLLECTION: i32 = 1028i32;
pub const PROPERTY_IAS_REQUESTHANDLERS_COLLECTION: i32 = 1029i32;
pub const PROPERTY_IAS_PROXYPOLICIES_COLLECTION: i32 = 1030i32;
pub const PROPERTY_IAS_PROXYPROFILES_COLLECTION: i32 = 1031i32;
pub const PROPERTY_IAS_REMEDIATIONSERVERGROUPS_COLLECTION: i32 = 1032i32;
pub const PROPERTY_IAS_SHVTEMPLATES_COLLECTION: i32 = 1033i32;
pub const IAS_IDENTITY_NO_DEFAULT: i32 = 1i32;
pub const PROPERTY_IPFILTER_ATTRIBUTES_COLLECTION: i32 = 1024i32;
#[repr(transparent)]
pub struct ISdo(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for ISdo {}
impl ::core::clone::Clone for ISdo {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct ISdoCollection(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for ISdoCollection {}
impl ::core::clone::Clone for ISdoCollection {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct ISdoDictionaryOld(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for ISdoDictionaryOld {}
impl ::core::clone::Clone for ISdoDictionaryOld {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct ISdoMachine(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for ISdoMachine {}
impl ::core::clone::Clone for ISdoMachine {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct ISdoMachine2(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for ISdoMachine2 {}
impl ::core::clone::Clone for ISdoMachine2 {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct ISdoServiceControl(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for ISdoServiceControl {}
impl ::core::clone::Clone for ISdoServiceControl {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(transparent)]
pub struct ITemplateSdo(pub *mut ::core::ffi::c_void);
impl ::core::marker::Copy for ITemplateSdo {}
impl ::core::clone::Clone for ITemplateSdo {
    fn clone(&self) -> Self {
        *self
    }
}
pub const PROPERTY_NAMES_REALMS: i32 = 1026i32;
pub const PROPERTY_NAP_POLICIES_COLLECTION: i32 = 1026i32;
pub const PROPERTY_SHV_TEMPLATES_COLLECTION: i32 = 1027i32;
pub const IAS_LOGGING_UNLIMITED_SIZE: i32 = 0i32;
pub const IAS_LOGGING_DAILY: i32 = 1i32;
pub const IAS_LOGGING_WEEKLY: i32 = 2i32;
pub const IAS_LOGGING_MONTHLY: i32 = 3i32;
pub const IAS_LOGGING_WHEN_FILE_SIZE_REACHES: i32 = 4i32;
pub const PROPERTY_EVENTLOG_LOG_APPLICATION_EVENTS: i32 = 1026i32;
pub const PROPERTY_EVENTLOG_LOG_MALFORMED: i32 = 1027i32;
pub const PROPERTY_EVENTLOG_LOG_DEBUG: i32 = 1028i32;
pub const PROPERTY_NTSAM_ALLOW_LM_AUTHENTICATION: i32 = 1026i32;
pub const PROPERTY_POLICY_CONSTRAINT: i32 = 1024i32;
pub const PROPERTY_POLICY_MERIT: i32 = 1025i32;
pub const PROPERTY_POLICY_UNUSED0: i32 = 1026i32;
pub const PROPERTY_POLICY_UNUSED1: i32 = 1027i32;
pub const PROPERTY_POLICY_PROFILE_NAME: i32 = 1028i32;
pub const PROPERTY_POLICY_ACTION: i32 = 1029i32;
pub const PROPERTY_POLICY_CONDITIONS_COLLECTION: i32 = 1030i32;
pub const PROPERTY_POLICY_ENABLED: i32 = 1031i32;
pub const PROPERTY_POLICY_SOURCETAG: i32 = 1032i32;
pub type PRADIUS_EXTENSION_FREE_ATTRIBUTES = unsafe extern "system" fn(pattrs: *mut RADIUS_ATTRIBUTE);
pub type PRADIUS_EXTENSION_INIT = unsafe extern "system" fn() -> u32;
pub type PRADIUS_EXTENSION_PROCESS = unsafe extern "system" fn(pattrs: *const RADIUS_ATTRIBUTE, pfaction: *mut RADIUS_ACTION) -> u32;
pub type PRADIUS_EXTENSION_PROCESS_2 = unsafe extern "system" fn(pecb: *mut RADIUS_EXTENSION_CONTROL_BLOCK) -> u32;
pub type PRADIUS_EXTENSION_PROCESS_EX = unsafe extern "system" fn(pinattrs: *const RADIUS_ATTRIBUTE, poutattrs: *mut *mut RADIUS_ATTRIBUTE, pfaction: *mut RADIUS_ACTION) -> u32;
pub type PRADIUS_EXTENSION_TERM = unsafe extern "system" fn();
pub const PROPERTY_PROFILE_ATTRIBUTES_COLLECTION: i32 = 1024i32;
pub const PROPERTY_PROFILE_IPFILTER_TEMPLATE_GUID: i32 = 1025i32;
pub const PROPERTY_PROTOCOL_REQUEST_HANDLER: i32 = 1026i32;
pub const PROPERTY_PROTOCOL_START: i32 = 1027i32;
pub const PROPERTY_RADIUS_ACCOUNTING_PORT: i32 = 1027i32;
pub const PROPERTY_RADIUS_AUTHENTICATION_PORT: i32 = 1028i32;
pub const PROPERTY_RADIUS_CLIENTS_COLLECTION: i32 = 1029i32;
pub const PROPERTY_RADIUS_VENDORS_COLLECTION: i32 = 1030i32;
pub const PROPERTY_RADIUSPROXY_SERVERGROUPS: i32 = 1026i32;
pub const PROPERTY_RADIUSSERVERGROUP_SERVERS_COLLECTION: i32 = 1024i32;
pub const PROPERTY_RADIUSSERVER_AUTH_PORT: i32 = 1024i32;
pub const PROPERTY_RADIUSSERVER_AUTH_SECRET: i32 = 1025i32;
pub const PROPERTY_RADIUSSERVER_ACCT_PORT: i32 = 1026i32;
pub const PROPERTY_RADIUSSERVER_ACCT_SECRET: i32 = 1027i32;
pub const PROPERTY_RADIUSSERVER_ADDRESS: i32 = 1028i32;
pub const PROPERTY_RADIUSSERVER_FORWARD_ACCT_ONOFF: i32 = 1029i32;
pub const PROPERTY_RADIUSSERVER_PRIORITY: i32 = 1030i32;
pub const PROPERTY_RADIUSSERVER_WEIGHT: i32 = 1031i32;
pub const PROPERTY_RADIUSSERVER_TIMEOUT: i32 = 1032i32;
pub const PROPERTY_RADIUSSERVER_MAX_LOST: i32 = 1033i32;
pub const PROPERTY_RADIUSSERVER_BLACKOUT: i32 = 1034i32;
pub const PROPERTY_RADIUSSERVER_SEND_SIGNATURE: i32 = 1035i32;
pub const PROPERTY_RADIUSSERVER_AUTH_SECRET_TEMPLATE_GUID: i32 = 1036i32;
pub const PROPERTY_RADIUSSERVER_ACCT_SECRET_TEMPLATE_GUID: i32 = 1037i32;
pub const raContinue: i32 = 0i32;
pub const raReject: i32 = 1i32;
pub const raAccept: i32 = 2i32;
#[repr(C)]
pub struct RADIUS_ATTRIBUTE {
    pub dwAttrType: u32,
    pub fDataType: RADIUS_DATA_TYPE,
    pub cbDataLength: u32,
    pub Anonymous: RADIUS_ATTRIBUTE_0,
}
impl ::core::marker::Copy for RADIUS_ATTRIBUTE {}
impl ::core::clone::Clone for RADIUS_ATTRIBUTE {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
pub union RADIUS_ATTRIBUTE_0 {
    pub dwValue: u32,
    pub lpValue: *mut u8,
}
impl ::core::marker::Copy for RADIUS_ATTRIBUTE_0 {}
impl ::core::clone::Clone for RADIUS_ATTRIBUTE_0 {
    fn clone(&self) -> Self {
        *self
    }
}
#[repr(C)]
pub struct RADIUS_ATTRIBUTE_ARRAY {
    pub cbSize: u32,
    pub Add: isize,
    pub AttributeAt: *mut *mut *mut *mut *mut *mut *mut *mut *mut *mut RADIUS_ATTRIBUTE,
    pub GetSize: isize,
    pub InsertAt: isize,
    pub RemoveAt: isize,
    pub SetAt: isize,
}
impl ::core::marker::Copy for RADIUS_ATTRIBUTE_ARRAY {}
impl ::core::clone::Clone for RADIUS_ATTRIBUTE_ARRAY {
    fn clone(&self) -> Self {
        *self
    }
}
pub const ratMinimum: i32 = 0i32;
pub const ratUserName: i32 = 1i32;
pub const ratUserPassword: i32 = 2i32;
pub const ratCHAPPassword: i32 = 3i32;
pub const ratNASIPAddress: i32 = 4i32;
pub const ratNASPort: i32 = 5i32;
pub const ratServiceType: i32 = 6i32;
pub const ratFramedProtocol: i32 = 7i32;
pub const ratFramedIPAddress: i32 = 8i32;
pub const ratFramedIPNetmask: i32 = 9i32;
pub const ratFramedRouting: i32 = 10i32;
pub const ratFilterId: i32 = 11i32;
pub const ratFramedMTU: i32 = 12i32;
pub const ratFramedCompression: i32 = 13i32;
pub const ratLoginIPHost: i32 = 14i32;
pub const ratLoginService: i32 = 15i32;
pub const ratLoginPort: i32 = 16i32;
pub const ratReplyMessage: i32 = 18i32;
pub const ratCallbackNumber: i32 = 19i32;
pub const ratCallbackId: i32 = 20i32;
pub const ratFramedRoute: i32 = 22i32;
pub const ratFramedIPXNetwork: i32 = 23i32;
pub const ratState: i32 = 24i32;
pub const ratClass: i32 = 25i32;
pub const ratVendorSpecific: i32 = 26i32;
pub const ratSessionTimeout: i32 = 27i32;
pub const ratIdleTimeout: i32 = 28i32;
pub const ratTerminationAction: i32 = 29i32;
pub const ratCalledStationId: i32 = 30i32;
pub const ratCallingStationId: i32 = 31i32;
pub const ratNASIdentifier: i32 = 32i32;
pub const ratProxyState: i32 = 33i32;
pub const ratLoginLATService: i32 = 34i32;
pub const ratLoginLATNode: i32 = 35i32;
pub const ratLoginLATGroup: i32 = 36i32;
pub const ratFramedAppleTalkLink: i32 = 37i32;
pub const ratFramedAppleTalkNetwork: i32 = 38i32;
pub const ratFramedAppleTalkZone: i32 = 39i32;
pub const ratAcctStatusType: i32 = 40i32;
pub const ratAcctDelayTime: i32 = 41i32;
pub const ratAcctInputOctets: i32 = 42i32;
pub const ratAcctOutputOctets: i32 = 43i32;
pub const ratAcctSessionId: i32 = 44i32;
pub const ratAcctAuthentic: i32 = 45i32;
pub const ratAcctSessionTime: i32 = 46i32;
pub const ratAcctInputPackets: i32 = 47i32;
pub const ratAcctOutputPackets: i32 = 48i32;
pub const ratAcctTerminationCause: i32 = 49i32;
pub const ratCHAPChallenge: i32 = 60i32;
pub const ratNASPortType: i32 = 61i32;
pub const ratPortLimit: i32 = 62i32;
pub const ratTunnelType: i32 = 64i32;
pub const ratMediumType: i32 = 65i32;
pub const ratTunnelPassword: i32 = 69i32;
pub const ratTunnelPrivateGroupID: i32 = 81i32;
pub const ratNASIPv6Address: i32 = 95i32;
pub const ratFramedInterfaceId: i32 = 96i32;
pub const ratFramedIPv6Prefix: i32 = 97i32;
pub const ratLoginIPv6Host: i32 = 98i32;
pub const ratFramedIPv6Route: i32 = 99i32;
pub const ratFramedIPv6Pool: i32 = 100i32;
pub const ratCode: i32 = 262i32;
pub const ratIdentifier: i32 = 263i32;
pub const ratAuthenticator: i32 = 264i32;
pub const ratSrcIPAddress: i32 = 265i32;
pub const ratSrcPort: i32 = 266i32;
pub const ratProvider: i32 = 267i32;
pub const ratStrippedUserName: i32 = 268i32;
pub const ratFQUserName: i32 = 269i32;
pub const ratPolicyName: i32 = 270i32;
pub const ratUniqueId: i32 = 271i32;
pub const ratExtensionState: i32 = 272i32;
pub const ratEAPTLV: i32 = 273i32;
pub const ratRejectReasonCode: i32 = 274i32;
pub const ratCRPPolicyName: i32 = 275i32;
pub const ratProviderName: i32 = 276i32;
pub const ratClearTextPassword: i32 = 277i32;
pub const ratSrcIPv6Address: i32 = 278i32;
pub const ratCertificateThumbprint: i32 = 279i32;
pub const rapUnknown: i32 = 0i32;
pub const rapUsersFile: i32 = 1i32;
pub const rapProxy: i32 = 2i32;
pub const rapWindowsNT: i32 = 3i32;
pub const rapMCIS: i32 = 4i32;
pub const rapODBC: i32 = 5i32;
pub const rapNone: i32 = 6i32;
pub const rcUnknown: i32 = 0i32;
pub const rcAccessRequest: i32 = 1i32;
pub const rcAccessAccept: i32 = 2i32;
pub const rcAccessReject: i32 = 3i32;
pub const rcAccountingRequest: i32 = 4i32;
pub const rcAccountingResponse: i32 = 5i32;
pub const rcAccessChallenge: i32 = 11i32;
pub const rcDiscard: i32 = 256i32;
pub const rdtUnknown: i32 = 0i32;
pub const rdtString: i32 = 1i32;
pub const rdtAddress: i32 = 2i32;
pub const rdtInteger: i32 = 3i32;
pub const rdtTime: i32 = 4i32;
pub const rdtIpv6Address: i32 = 5i32;
#[repr(C)]
pub struct RADIUS_EXTENSION_CONTROL_BLOCK {
    pub cbSize: u32,
    pub dwVersion: u32,
    pub repPoint: RADIUS_EXTENSION_POINT,
    pub rcRequestType: RADIUS_CODE,
    pub rcResponseType: RADIUS_CODE,
    pub GetRequest: isize,
    pub GetResponse: isize,
    pub SetResponseType: isize,
}
impl ::core::marker::Copy for RADIUS_EXTENSION_CONTROL_BLOCK {}
impl ::core::clone::Clone for RADIUS_EXTENSION_CONTROL_BLOCK {
    fn clone(&self) -> Self {
        *self
    }
}
pub const repAuthentication: i32 = 0i32;
pub const repAuthorization: i32 = 1i32;
pub const RADIUS_EXTENSION_VERSION: u32 = 1u32;
pub const rrrcUndefined: i32 = 0i32;
pub const rrrcAccountUnknown: i32 = 1i32;
pub const rrrcAccountDisabled: i32 = 2i32;
pub const rrrcAccountExpired: i32 = 3i32;
pub const rrrcAuthenticationFailure: i32 = 4i32;
#[repr(C)]
pub struct RADIUS_VSA_FORMAT {
    pub VendorId: [u8; 4],
    pub VendorType: u8,
    pub VendorLength: u8,
    pub AttributeSpecific: [u8; 1],
}
impl ::core::marker::Copy for RADIUS_VSA_FORMAT {}
impl ::core::clone::Clone for RADIUS_VSA_FORMAT {
    fn clone(&self) -> Self {
        *self
    }
}
pub const PROPERTY_REMEDIATIONSERVERGROUP_SERVERS_COLLECTION: i32 = 1024i32;
pub const PROPERTY_REMEDIATIONSERVER_ADDRESS: i32 = 1024i32;
pub const PROPERTY_REMEDIATIONSERVER_FRIENDLY_NAME: i32 = 1025i32;
pub const PROPERTY_REMEDIATIONSERVERS_SERVERGROUPS: i32 = 1026i32;
pub const SERVICE_TYPE_IAS: i32 = 0i32;
pub const SERVICE_TYPE_RAS: i32 = 1i32;
pub const SERVICE_TYPE_RAMGMTSVC: i32 = 2i32;
pub const SERVICE_TYPE_MAX: i32 = 3i32;
pub const PROPERTY_SHAREDSECRET_STRING: i32 = 1024i32;
pub const PROPERTY_SHV_COMBINATION_TYPE: i32 = 1024i32;
pub const PROPERTY_SHV_LIST: i32 = 1025i32;
pub const PROPERTY_SHVCONFIG_LIST: i32 = 1026i32;
pub const SHV_COMBINATION_TYPE_ALL_PASS: i32 = 0i32;
pub const SHV_COMBINATION_TYPE_ALL_FAIL: i32 = 1i32;
pub const SHV_COMBINATION_TYPE_ONE_OR_MORE_PASS: i32 = 2i32;
pub const SHV_COMBINATION_TYPE_ONE_OR_MORE_FAIL: i32 = 3i32;
pub const SHV_COMBINATION_TYPE_ONE_OR_MORE_INFECTED: i32 = 4i32;
pub const SHV_COMBINATION_TYPE_ONE_OR_MORE_TRANSITIONAL: i32 = 5i32;
pub const SHV_COMBINATION_TYPE_ONE_OR_MORE_UNKNOWN: i32 = 6i32;
pub const SHV_COMBINATION_TYPE_MAX: i32 = 7i32;
pub const SdoMachine: ::windows_sys::core::GUID = ::windows_sys::core::GUID { data1: 3911289575, data2: 40593, data3: 4561, data4: [191, 96, 0, 128, 199, 132, 107, 192] };
pub const PROPERTY_TEMPLATES_POLICIES_TEMPLATES: i32 = 1024i32;
pub const PROPERTY_TEMPLATES_PROFILES_TEMPLATES: i32 = 1025i32;
pub const PROPERTY_TEMPLATES_PROFILES_COLLECTION: i32 = 1026i32;
pub const PROPERTY_TEMPLATES_PROXYPOLICIES_TEMPLATES: i32 = 1027i32;
pub const PROPERTY_TEMPLATES_PROXYPROFILES_TEMPLATES: i32 = 1028i32;
pub const PROPERTY_TEMPLATES_PROXYPROFILES_COLLECTION: i32 = 1029i32;
pub const PROPERTY_TEMPLATES_REMEDIATIONSERVERGROUPS_TEMPLATES: i32 = 1030i32;
pub const PROPERTY_TEMPLATES_SHVTEMPLATES_TEMPLATES: i32 = 1031i32;
pub const PROPERTY_TEMPLATES_CLIENTS_TEMPLATES: i32 = 1032i32;
pub const PROPERTY_TEMPLATES_RADIUSSERVERS_TEMPLATES: i32 = 1033i32;
pub const PROPERTY_TEMPLATES_SHAREDSECRETS_TEMPLATES: i32 = 1034i32;
pub const PROPERTY_TEMPLATES_IPFILTERS_TEMPLATES: i32 = 1035i32;
pub const PROPERTY_USER_CALLING_STATION_ID: i32 = 1024i32;
pub const PROPERTY_USER_SAVED_CALLING_STATION_ID: i32 = 1025i32;
pub const PROPERTY_USER_RADIUS_CALLBACK_NUMBER: i32 = 1026i32;
pub const PROPERTY_USER_RADIUS_FRAMED_ROUTE: i32 = 1027i32;
pub const PROPERTY_USER_RADIUS_FRAMED_IP_ADDRESS: i32 = 1028i32;
pub const PROPERTY_USER_SAVED_RADIUS_CALLBACK_NUMBER: i32 = 1029i32;
pub const PROPERTY_USER_SAVED_RADIUS_FRAMED_ROUTE: i32 = 1030i32;
pub const PROPERTY_USER_SAVED_RADIUS_FRAMED_IP_ADDRESS: i32 = 1031i32;
pub const PROPERTY_USER_ALLOW_DIALIN: i32 = 1032i32;
pub const PROPERTY_USER_SERVICE_TYPE: i32 = 1033i32;
pub const PROPERTY_USER_RADIUS_FRAMED_IPV6_ROUTE: i32 = 1034i32;
pub const PROPERTY_USER_SAVED_RADIUS_FRAMED_IPV6_ROUTE: i32 = 1035i32;
pub const PROPERTY_USER_RADIUS_FRAMED_INTERFACE_ID: i32 = 1036i32;
pub const PROPERTY_USER_SAVED_RADIUS_FRAMED_INTERFACE_ID: i32 = 1037i32;
pub const PROPERTY_USER_RADIUS_FRAMED_IPV6_PREFIX: i32 = 1038i32;
pub const PROPERTY_USER_SAVED_RADIUS_FRAMED_IPV6_PREFIX: i32 = 1039i32;
pub const PROPERTY_NAS_VENDOR_ID: i32 = 1024i32;
