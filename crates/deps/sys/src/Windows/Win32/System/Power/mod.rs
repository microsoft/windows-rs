#![allow(non_snake_case, non_camel_case_types)]
#[link(name = "windows")]
extern "system" {
    fn ACPI_REAL_TIME();
    fn ACPI_TIME_ADJUST_DAYLIGHT();
    fn ACPI_TIME_IN_DAYLIGHT();
    fn ACPI_TIME_ZONE_UNKNOWN();
    fn ACTIVE_COOLING();
    fn ADMINISTRATOR_POWER_POLICY();
    fn BATTERY_CAPACITY_RELATIVE();
    fn BATTERY_CHARGER_STATUS();
    fn BATTERY_CHARGING();
    fn BATTERY_CHARGING_SOURCE();
    fn BATTERY_CHARGING_SOURCE_INFORMATION();
    fn BATTERY_CHARGING_SOURCE_TYPE();
    fn BATTERY_CLASS_MAJOR_VERSION();
    fn BATTERY_CLASS_MINOR_VERSION();
    fn BATTERY_CLASS_MINOR_VERSION_1();
    fn BATTERY_CRITICAL();
    fn BATTERY_CYCLE_COUNT_WMI_GUID();
    fn BATTERY_DISCHARGING();
    fn BATTERY_FULL_CHARGED_CAPACITY_WMI_GUID();
    fn BATTERY_INFORMATION();
    fn BATTERY_IS_SHORT_TERM();
    fn BATTERY_MANUFACTURE_DATE();
    fn BATTERY_MINIPORT_UPDATE_DATA_VER_1();
    fn BATTERY_MINIPORT_UPDATE_DATA_VER_2();
    fn BATTERY_POWER_ON_LINE();
    fn BATTERY_QUERY_INFORMATION();
    fn BATTERY_QUERY_INFORMATION_LEVEL();
    fn BATTERY_REPORTING_SCALE();
    fn BATTERY_RUNTIME_WMI_GUID();
    fn BATTERY_SEALED();
    fn BATTERY_SET_CHARGER_ID_SUPPORTED();
    fn BATTERY_SET_CHARGE_SUPPORTED();
    fn BATTERY_SET_CHARGINGSOURCE_SUPPORTED();
    fn BATTERY_SET_DISCHARGE_SUPPORTED();
    fn BATTERY_SET_INFORMATION();
    fn BATTERY_SET_INFORMATION_LEVEL();
    fn BATTERY_STATIC_DATA_WMI_GUID();
    fn BATTERY_STATUS();
    fn BATTERY_STATUS_CHANGE_WMI_GUID();
    fn BATTERY_STATUS_WMI_GUID();
    fn BATTERY_SYSTEM_BATTERY();
    fn BATTERY_TAG_CHANGE_WMI_GUID();
    fn BATTERY_TAG_INVALID();
    fn BATTERY_TEMPERATURE_WMI_GUID();
    fn BATTERY_UNKNOWN_CAPACITY();
    fn BATTERY_UNKNOWN_CURRENT();
    fn BATTERY_UNKNOWN_RATE();
    fn BATTERY_UNKNOWN_TIME();
    fn BATTERY_UNKNOWN_VOLTAGE();
    fn BATTERY_USB_CHARGER_STATUS();
    fn BATTERY_USB_CHARGER_STATUS_FN_DEFAULT_USB();
    fn BATTERY_USB_CHARGER_STATUS_UCM_PD();
    fn BATTERY_WAIT_STATUS();
    fn CM_POWER_DATA();
    fn CallNtPowerInformation();
    fn CanUserWritePwrScheme();
    fn DEVICEPOWER_AND_OPERATION();
    fn DEVICEPOWER_CLEAR_WAKEENABLED();
    fn DEVICEPOWER_FILTER_DEVICES_PRESENT();
    fn DEVICEPOWER_FILTER_HARDWARE();
    fn DEVICEPOWER_FILTER_ON_NAME();
    fn DEVICEPOWER_FILTER_WAKEENABLED();
    fn DEVICEPOWER_FILTER_WAKEPROGRAMMABLE();
    fn DEVICEPOWER_HARDWAREID();
    fn DEVICEPOWER_SET_WAKEENABLED();
    fn DEVICE_NOTIFY_SUBSCRIBE_PARAMETERS();
    fn DEVICE_POWER_STATE();
    fn DeletePwrScheme();
    fn DevicePowerClose();
    fn DevicePowerEnumDevices();
    fn DevicePowerOpen();
    fn DevicePowerSetDeviceState();
    fn EFFECTIVE_POWER_MODE();
    fn EFFECTIVE_POWER_MODE_CALLBACK();
    fn EFFECTIVE_POWER_MODE_V1();
    fn EFFECTIVE_POWER_MODE_V2();
    fn EMI_CHANNEL_MEASUREMENT_DATA();
    fn EMI_CHANNEL_V2();
    fn EMI_MEASUREMENT_DATA_V2();
    fn EMI_MEASUREMENT_UNIT();
    fn EMI_METADATA_SIZE();
    fn EMI_METADATA_V1();
    fn EMI_METADATA_V2();
    fn EMI_NAME_MAX();
    fn EMI_VERSION();
    fn EMI_VERSION_V1();
    fn EMI_VERSION_V2();
    fn EXECUTION_STATE();
    fn EnableMultiBatteryDisplay();
    fn EnablePasswordLogon();
    fn EnableSysTrayBatteryMeter();
    fn EnableVideoDimDisplay();
    fn EnableWakeOnRing();
    fn EnumPwrSchemes();
    fn GLOBAL_MACHINE_POWER_POLICY();
    fn GLOBAL_POWER_POLICY();
    fn GLOBAL_USER_POWER_POLICY();
    fn GUID_CLASS_INPUT();
    fn GUID_DEVICE_ACPI_TIME();
    fn GUID_DEVICE_APPLICATIONLAUNCH_BUTTON();
    fn GUID_DEVICE_BATTERY();
    fn GUID_DEVICE_ENERGY_METER();
    fn GUID_DEVICE_FAN();
    fn GUID_DEVICE_LID();
    fn GUID_DEVICE_MEMORY();
    fn GUID_DEVICE_MESSAGE_INDICATOR();
    fn GUID_DEVICE_PROCESSOR();
    fn GUID_DEVICE_SYS_BUTTON();
    fn GUID_DEVICE_THERMAL_ZONE();
    fn GUID_DEVINTERFACE_THERMAL_COOLING();
    fn GUID_DEVINTERFACE_THERMAL_MANAGER();
    fn GetActivePwrScheme();
    fn GetCurrentPowerPolicies();
    fn GetDevicePowerState();
    fn GetPwrCapabilities();
    fn GetPwrDiskSpindownRange();
    fn GetSystemPowerStatus();
    fn HPOWERNOTIFY();
    fn IOCTL_ACPI_GET_REAL_TIME();
    fn IOCTL_ACPI_SET_REAL_TIME();
    fn IOCTL_BATTERY_CHARGING_SOURCE_CHANGE();
    fn IOCTL_BATTERY_QUERY_INFORMATION();
    fn IOCTL_BATTERY_QUERY_STATUS();
    fn IOCTL_BATTERY_QUERY_TAG();
    fn IOCTL_BATTERY_SET_INFORMATION();
    fn IOCTL_EMI_GET_MEASUREMENT();
    fn IOCTL_EMI_GET_METADATA();
    fn IOCTL_EMI_GET_METADATA_SIZE();
    fn IOCTL_EMI_GET_VERSION();
    fn IOCTL_GET_PROCESSOR_OBJ_INFO();
    fn IOCTL_GET_SYS_BUTTON_CAPS();
    fn IOCTL_GET_SYS_BUTTON_EVENT();
    fn IOCTL_GET_WAKE_ALARM_POLICY();
    fn IOCTL_GET_WAKE_ALARM_SYSTEM_POWERSTATE();
    fn IOCTL_GET_WAKE_ALARM_VALUE();
    fn IOCTL_NOTIFY_SWITCH_EVENT();
    fn IOCTL_QUERY_LID();
    fn IOCTL_RUN_ACTIVE_COOLING_METHOD();
    fn IOCTL_SET_SYS_MESSAGE_INDICATOR();
    fn IOCTL_SET_WAKE_ALARM_POLICY();
    fn IOCTL_SET_WAKE_ALARM_VALUE();
    fn IOCTL_THERMAL_QUERY_INFORMATION();
    fn IOCTL_THERMAL_READ_POLICY();
    fn IOCTL_THERMAL_READ_TEMPERATURE();
    fn IOCTL_THERMAL_SET_COOLING_POLICY();
    fn IOCTL_THERMAL_SET_PASSIVE_LIMIT();
    fn IsAdminOverrideActive();
    fn IsPwrHibernateAllowed();
    fn IsPwrShutdownAllowed();
    fn IsPwrSuspendAllowed();
    fn IsSystemResumeAutomatic();
    fn LATENCY_TIME();
    fn MACHINE_POWER_POLICY();
    fn MACHINE_PROCESSOR_POWER_POLICY();
    fn MAX_ACTIVE_COOLING_LEVELS();
    fn MAX_BATTERY_STRING_SIZE();
    fn PASSIVE_COOLING();
    fn PDCAP_S0_SUPPORTED();
    fn PDCAP_S1_SUPPORTED();
    fn PDCAP_S2_SUPPORTED();
    fn PDCAP_S3_SUPPORTED();
    fn PDCAP_S4_SUPPORTED();
    fn PDCAP_S5_SUPPORTED();
    fn PDCAP_WAKE_FROM_S0_SUPPORTED();
    fn PDCAP_WAKE_FROM_S1_SUPPORTED();
    fn PDCAP_WAKE_FROM_S2_SUPPORTED();
    fn PDCAP_WAKE_FROM_S3_SUPPORTED();
    fn PDEVICE_NOTIFY_CALLBACK_ROUTINE();
    fn POWERBROADCAST_SETTING();
    fn POWER_ACTION();
    fn POWER_ACTION_POLICY();
    fn POWER_ACTION_POLICY_EVENT_CODE();
    fn POWER_ATTRIBUTE_HIDE();
    fn POWER_ATTRIBUTE_SHOW_AOAC();
    fn POWER_DATA_ACCESSOR();
    fn POWER_INFORMATION_LEVEL();
    fn POWER_PLATFORM_ROLE();
    fn POWER_PLATFORM_ROLE_VERSION();
    fn POWER_POLICY();
    fn POWER_REQUEST_TYPE();
    fn POWER_SETTING_REGISTER_NOTIFICATION_FLAGS();
    fn PROCESSOR_NUMBER_PKEY();
    fn PROCESSOR_OBJECT_INFO();
    fn PROCESSOR_OBJECT_INFO_EX();
    fn PROCESSOR_POWER_POLICY();
    fn PROCESSOR_POWER_POLICY_INFO();
    fn PWRSCHEMESENUMPROC();
    fn PWRSCHEMESENUMPROC_V1();
    fn PowerCanRestoreIndividualDefaultPowerScheme();
    fn PowerClearRequest();
    fn PowerCreatePossibleSetting();
    fn PowerCreateRequest();
    fn PowerCreateSetting();
    fn PowerDeleteScheme();
    fn PowerDeterminePlatformRole();
    fn PowerDeterminePlatformRoleEx();
    fn PowerDuplicateScheme();
    fn PowerEnumerate();
    fn PowerGetActiveScheme();
    fn PowerImportPowerScheme();
    fn PowerIsSettingRangeDefined();
    fn PowerOpenSystemPowerKey();
    fn PowerOpenUserPowerKey();
    fn PowerReadACDefaultIndex();
    fn PowerReadACValue();
    fn PowerReadACValueIndex();
    fn PowerReadDCDefaultIndex();
    fn PowerReadDCValue();
    fn PowerReadDCValueIndex();
    fn PowerReadDescription();
    fn PowerReadFriendlyName();
    fn PowerReadIconResourceSpecifier();
    fn PowerReadPossibleDescription();
    fn PowerReadPossibleFriendlyName();
    fn PowerReadPossibleValue();
    fn PowerReadSettingAttributes();
    fn PowerReadValueIncrement();
    fn PowerReadValueMax();
    fn PowerReadValueMin();
    fn PowerReadValueUnitsSpecifier();
    fn PowerRegisterForEffectivePowerModeNotifications();
    fn PowerRegisterSuspendResumeNotification();
    fn PowerRemovePowerSetting();
    fn PowerReplaceDefaultPowerSchemes();
    fn PowerReportThermalEvent();
    fn PowerRestoreDefaultPowerSchemes();
    fn PowerRestoreIndividualDefaultPowerScheme();
    fn PowerSetActiveScheme();
    fn PowerSetRequest();
    fn PowerSettingAccessCheck();
    fn PowerSettingAccessCheckEx();
    fn PowerSettingRegisterNotification();
    fn PowerSettingUnregisterNotification();
    fn PowerUnregisterFromEffectivePowerModeNotifications();
    fn PowerUnregisterSuspendResumeNotification();
    fn PowerWriteACDefaultIndex();
    fn PowerWriteACValueIndex();
    fn PowerWriteDCDefaultIndex();
    fn PowerWriteDCValueIndex();
    fn PowerWriteDescription();
    fn PowerWriteFriendlyName();
    fn PowerWriteIconResourceSpecifier();
    fn PowerWritePossibleDescription();
    fn PowerWritePossibleFriendlyName();
    fn PowerWritePossibleValue();
    fn PowerWriteSettingAttributes();
    fn PowerWriteValueIncrement();
    fn PowerWriteValueMax();
    fn PowerWriteValueMin();
    fn PowerWriteValueUnitsSpecifier();
    fn ReadGlobalPwrPolicy();
    fn ReadProcessorPwrScheme();
    fn ReadPwrScheme();
    fn RegisterPowerSettingNotification();
    fn RegisterSuspendResumeNotification();
    fn RequestWakeupLatency();
    fn SET_POWER_SETTING_VALUE();
    fn SYSTEM_BATTERY_STATE();
    fn SYSTEM_POWER_CAPABILITIES();
    fn SYSTEM_POWER_CONDITION();
    fn SYSTEM_POWER_LEVEL();
    fn SYSTEM_POWER_POLICY();
    fn SYSTEM_POWER_STATE();
    fn SYSTEM_POWER_STATUS();
    fn SYS_BUTTON_LID();
    fn SYS_BUTTON_LID_CHANGED();
    fn SYS_BUTTON_LID_CLOSED();
    fn SYS_BUTTON_LID_INITIAL();
    fn SYS_BUTTON_LID_OPEN();
    fn SYS_BUTTON_LID_STATE_MASK();
    fn SYS_BUTTON_POWER();
    fn SYS_BUTTON_SLEEP();
    fn SYS_BUTTON_WAKE();
    fn SetActivePwrScheme();
    fn SetSuspendState();
    fn SetSystemPowerState();
    fn SetThreadExecutionState();
    fn THERMAL_COOLING_INTERFACE_VERSION();
    fn THERMAL_DEVICE_INTERFACE_VERSION();
    fn THERMAL_EVENT();
    fn THERMAL_EVENT_VERSION();
    fn THERMAL_INFORMATION();
    fn THERMAL_POLICY();
    fn THERMAL_POLICY_VERSION_1();
    fn THERMAL_POLICY_VERSION_2();
    fn THERMAL_WAIT_READ();
    fn TZ_ACTIVATION_REASON_CURRENT();
    fn TZ_ACTIVATION_REASON_THERMAL();
    fn UNKNOWN_CAPACITY();
    fn UNKNOWN_CURRENT();
    fn UNKNOWN_RATE();
    fn UNKNOWN_VOLTAGE();
    fn USB_CHARGER_PORT();
    fn USER_POWER_POLICY();
    fn UnregisterPowerSettingNotification();
    fn UnregisterSuspendResumeNotification();
    fn ValidatePowerPolicies();
    fn WAKE_ALARM_INFORMATION();
    fn WriteGlobalPwrPolicy();
    fn WriteProcessorPwrScheme();
    fn WritePwrScheme();
}
