#![allow(non_snake_case, non_camel_case_types)]
#[link(name = "windows")]
extern "system" {
    fn CallEnclave();
    fn CreateEnclave();
    fn CreateEnvironmentBlock();
    fn DeleteEnclave();
    fn DestroyEnvironmentBlock();
    fn ENCLAVE_FLAG_DYNAMIC_DEBUG_ACTIVE();
    fn ENCLAVE_FLAG_DYNAMIC_DEBUG_ENABLED();
    fn ENCLAVE_FLAG_FULL_DEBUG_ENABLED();
    fn ENCLAVE_IDENTITY();
    fn ENCLAVE_INFORMATION();
    fn ENCLAVE_REPORT_DATA_LENGTH();
    fn ENCLAVE_RUNTIME_POLICY_ALLOW_DYNAMIC_DEBUG();
    fn ENCLAVE_RUNTIME_POLICY_ALLOW_FULL_DEBUG();
    fn ENCLAVE_SEALING_IDENTITY_POLICY();
    fn ENCLAVE_UNSEAL_FLAG_STALE_KEY();
    fn ENCLAVE_VBS_BASIC_KEY_FLAG_DEBUG_KEY();
    fn ENCLAVE_VBS_BASIC_KEY_FLAG_FAMILY_ID();
    fn ENCLAVE_VBS_BASIC_KEY_FLAG_IMAGE_ID();
    fn ENCLAVE_VBS_BASIC_KEY_FLAG_MEASUREMENT();
    fn ENCLAVE_VBS_BASIC_KEY_REQUEST();
    fn EnclaveGetAttestationReport();
    fn EnclaveGetEnclaveInformation();
    fn EnclaveSealData();
    fn EnclaveUnsealData();
    fn EnclaveVerifyAttestationReport();
    fn ExpandEnvironmentStringsA();
    fn ExpandEnvironmentStringsForUserA();
    fn ExpandEnvironmentStringsForUserW();
    fn ExpandEnvironmentStringsW();
    fn FreeEnvironmentStringsA();
    fn FreeEnvironmentStringsW();
    fn GetCommandLineA();
    fn GetCommandLineW();
    fn GetCurrentDirectoryA();
    fn GetCurrentDirectoryW();
    fn GetEnvironmentStrings();
    fn GetEnvironmentStringsW();
    fn GetEnvironmentVariableA();
    fn GetEnvironmentVariableW();
    fn InitializeEnclave();
    fn IsEnclaveTypeSupported();
    fn LoadEnclaveData();
    fn LoadEnclaveImageA();
    fn LoadEnclaveImageW();
    fn NeedCurrentDirectoryForExePathA();
    fn NeedCurrentDirectoryForExePathW();
    fn SetCurrentDirectoryA();
    fn SetCurrentDirectoryW();
    fn SetEnvironmentStringsW();
    fn SetEnvironmentVariableA();
    fn SetEnvironmentVariableW();
    fn TerminateEnclave();
    fn VBS_BASIC_ENCLAVE_BASIC_CALL_COMMIT_PAGES();
    fn VBS_BASIC_ENCLAVE_BASIC_CALL_CREATE_THREAD();
    fn VBS_BASIC_ENCLAVE_BASIC_CALL_DECOMMIT_PAGES();
    fn VBS_BASIC_ENCLAVE_BASIC_CALL_GENERATE_KEY();
    fn VBS_BASIC_ENCLAVE_BASIC_CALL_GENERATE_RANDOM_DATA();
    fn VBS_BASIC_ENCLAVE_BASIC_CALL_GENERATE_REPORT();
    fn VBS_BASIC_ENCLAVE_BASIC_CALL_GET_ENCLAVE_INFORMATION();
    fn VBS_BASIC_ENCLAVE_BASIC_CALL_INTERRUPT_THREAD();
    fn VBS_BASIC_ENCLAVE_BASIC_CALL_PROTECT_PAGES();
    fn VBS_BASIC_ENCLAVE_BASIC_CALL_RETURN_FROM_ENCLAVE();
    fn VBS_BASIC_ENCLAVE_BASIC_CALL_RETURN_FROM_EXCEPTION();
    fn VBS_BASIC_ENCLAVE_BASIC_CALL_TERMINATE_THREAD();
    fn VBS_BASIC_ENCLAVE_BASIC_CALL_VERIFY_REPORT();
    fn VBS_BASIC_ENCLAVE_EXCEPTION_AMD64();
    fn VBS_BASIC_ENCLAVE_SYSCALL_PAGE();
    fn VBS_BASIC_ENCLAVE_THREAD_DESCRIPTOR32();
    fn VBS_BASIC_ENCLAVE_THREAD_DESCRIPTOR64();
    fn VBS_ENCLAVE_REPORT();
    fn VBS_ENCLAVE_REPORT_MODULE();
    fn VBS_ENCLAVE_REPORT_PKG_HEADER();
    fn VBS_ENCLAVE_REPORT_PKG_HEADER_VERSION_CURRENT();
    fn VBS_ENCLAVE_REPORT_SIGNATURE_SCHEME_SHA256_RSA_PSS_SHA256();
    fn VBS_ENCLAVE_REPORT_VARDATA_HEADER();
    fn VBS_ENCLAVE_REPORT_VERSION_CURRENT();
    fn VBS_ENCLAVE_VARDATA_INVALID();
    fn VBS_ENCLAVE_VARDATA_MODULE();
}
