#![allow(non_snake_case, non_camel_case_types)]
#[cfg(feature = "Win32_System_Memory_NonVolatile")]
pub mod NonVolatile;
#[link(name = "windows")]
extern "system" {
    fn AddSecureMemoryCacheCallback();
    fn AllocateUserPhysicalPages();
    fn AllocateUserPhysicalPages2();
    fn AllocateUserPhysicalPagesNuma();
    fn CFG_CALL_TARGET_INFO();
    fn CreateFileMapping2();
    fn CreateFileMappingA();
    fn CreateFileMappingFromApp();
    fn CreateFileMappingNumaA();
    fn CreateFileMappingNumaW();
    fn CreateFileMappingW();
    fn CreateMemoryResourceNotification();
    fn DiscardVirtualMemory();
    fn FILE_CACHE_MAX_HARD_DISABLE();
    fn FILE_CACHE_MAX_HARD_ENABLE();
    fn FILE_CACHE_MIN_HARD_DISABLE();
    fn FILE_CACHE_MIN_HARD_ENABLE();
    fn FILE_MAP();
    fn FlushViewOfFile();
    fn FreeUserPhysicalPages();
    fn GLOBAL_ALLOC_FLAGS();
    fn GetLargePageMinimum();
    fn GetMemoryErrorHandlingCapabilities();
    fn GetProcessHeap();
    fn GetProcessHeaps();
    fn GetProcessWorkingSetSizeEx();
    fn GetSystemFileCacheSize();
    fn GetWriteWatch();
    fn GlobalAlloc();
    fn GlobalFlags();
    fn GlobalFree();
    fn GlobalHandle();
    fn GlobalLock();
    fn GlobalReAlloc();
    fn GlobalSize();
    fn GlobalUnlock();
    fn HEAP_FLAGS();
    fn HEAP_INFORMATION_CLASS();
    fn HEAP_SUMMARY();
    fn HeapAlloc();
    fn HeapCompact();
    fn HeapCreate();
    fn HeapDestroy();
    fn HeapFree();
    fn HeapHandle();
    fn HeapLock();
    fn HeapQueryInformation();
    fn HeapReAlloc();
    fn HeapSetInformation();
    fn HeapSize();
    fn HeapSummary();
    fn HeapUnlock();
    fn HeapValidate();
    fn HeapWalk();
    fn IsBadCodePtr();
    fn IsBadReadPtr();
    fn IsBadStringPtrA();
    fn IsBadStringPtrW();
    fn IsBadWritePtr();
    fn LOCAL_ALLOC_FLAGS();
    fn LocalAlloc();
    fn LocalFlags();
    fn LocalFree();
    fn LocalHandle();
    fn LocalLock();
    fn LocalReAlloc();
    fn LocalSize();
    fn LocalUnlock();
    fn MEHC_PATROL_SCRUBBER_PRESENT();
    fn MEMORY_BASIC_INFORMATION();
    fn MEMORY_BASIC_INFORMATION32();
    fn MEMORY_BASIC_INFORMATION64();
    fn MEMORY_RESOURCE_NOTIFICATION_TYPE();
    fn MEM_EXTENDED_PARAMETER();
    fn MEM_EXTENDED_PARAMETER_TYPE();
    fn MapUserPhysicalPages();
    fn MapUserPhysicalPagesScatter();
    fn MapViewOfFile();
    fn MapViewOfFile3();
    fn MapViewOfFile3FromApp();
    fn MapViewOfFileEx();
    fn MapViewOfFileExNuma();
    fn MapViewOfFileFromApp();
    fn MapViewOfFileNuma2();
    fn OFFER_PRIORITY();
    fn OfferVirtualMemory();
    fn OpenDedicatedMemoryPartition();
    fn OpenFileMappingA();
    fn OpenFileMappingFromApp();
    fn OpenFileMappingW();
    fn PAGE_PROTECTION_FLAGS();
    fn PAGE_TYPE();
    fn PBAD_MEMORY_CALLBACK_ROUTINE();
    fn PROCESS_HEAP_ENTRY();
    fn PSECURE_MEMORY_CACHE_CALLBACK();
    fn PrefetchVirtualMemory();
    fn QueryMemoryResourceNotification();
    fn QueryPartitionInformation();
    fn QueryVirtualMemoryInformation();
    fn ReclaimVirtualMemory();
    fn RegisterBadMemoryNotification();
    fn RemoveSecureMemoryCacheCallback();
    fn ResetWriteWatch();
    fn RtlCompareMemory();
    fn RtlCrc32();
    fn RtlCrc64();
    fn RtlIsZeroMemory();
    fn SetProcessValidCallTargets();
    fn SetProcessValidCallTargetsForMappedView();
    fn SetProcessWorkingSetSizeEx();
    fn SetSystemFileCacheSize();
    fn UNMAP_VIEW_OF_FILE_FLAGS();
    fn UnmapViewOfFile();
    fn UnmapViewOfFile2();
    fn UnmapViewOfFileEx();
    fn UnregisterBadMemoryNotification();
    fn VIRTUAL_ALLOCATION_TYPE();
    fn VIRTUAL_FREE_TYPE();
    fn VirtualAlloc();
    fn VirtualAlloc2();
    fn VirtualAlloc2FromApp();
    fn VirtualAllocEx();
    fn VirtualAllocExNuma();
    fn VirtualAllocFromApp();
    fn VirtualFree();
    fn VirtualFreeEx();
    fn VirtualLock();
    fn VirtualProtect();
    fn VirtualProtectEx();
    fn VirtualProtectFromApp();
    fn VirtualQuery();
    fn VirtualQueryEx();
    fn VirtualUnlock();
    fn VirtualUnlockEx();
    fn WIN32_MEMORY_INFORMATION_CLASS();
    fn WIN32_MEMORY_PARTITION_INFORMATION();
    fn WIN32_MEMORY_PARTITION_INFORMATION_CLASS();
    fn WIN32_MEMORY_RANGE_ENTRY();
    fn WIN32_MEMORY_REGION_INFORMATION();
}
