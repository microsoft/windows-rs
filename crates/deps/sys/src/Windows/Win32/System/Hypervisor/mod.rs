#![allow(non_snake_case, non_camel_case_types)]
#[link(name = "windows")]
extern "system" {
    fn ApplyGuestMemoryFix();
    fn ApplyPendingSavedStateFileReplayLog();
    fn CallStackUnwind();
    fn DOS_IMAGE_INFO();
    fn FOUND_IMAGE_CALLBACK();
    fn FindSavedStateSymbolFieldInType();
    fn ForceActiveVirtualTrustLevel();
    fn ForceArchitecture();
    fn ForceNestedHostMode();
    fn ForcePagingMode();
    fn GPA_MEMORY_CHUNK();
    fn GUEST_OS_INFO();
    fn GUEST_OS_MICROSOFT_IDS();
    fn GUEST_OS_OPENSOURCE_IDS();
    fn GUEST_OS_VENDOR();
    fn GUEST_SYMBOLS_PROVIDER_DEBUG_INFO_CALLBACK();
    fn GUID_DEVINTERFACE_VM_GENCOUNTER();
    fn GetActiveVirtualTrustLevel();
    fn GetArchitecture();
    fn GetEnabledVirtualTrustLevels();
    fn GetGuestEnabledVirtualTrustLevels();
    fn GetGuestOsInfo();
    fn GetGuestPhysicalMemoryChunks();
    fn GetGuestRawSavedMemorySize();
    fn GetMemoryBlockCacheLimit();
    fn GetNestedVirtualizationMode();
    fn GetPagingMode();
    fn GetRegisterValue();
    fn GetSavedStateSymbolFieldInfo();
    fn GetSavedStateSymbolProviderHandle();
    fn GetSavedStateSymbolTypeSize();
    fn GetVpCount();
    fn GuestPhysicalAddressToRawSavedMemoryOffset();
    fn GuestVirtualAddressToPhysicalAddress();
    fn HDV_DEVICE_TYPE();
    fn HDV_DOORBELL_FLAGS();
    fn HDV_MMIO_MAPPING_FLAGS();
    fn HDV_PCI_BAR_COUNT();
    fn HDV_PCI_BAR_SELECTOR();
    fn HDV_PCI_DEVICE_GET_DETAILS();
    fn HDV_PCI_DEVICE_INITIALIZE();
    fn HDV_PCI_DEVICE_INTERFACE();
    fn HDV_PCI_DEVICE_SET_CONFIGURATION();
    fn HDV_PCI_DEVICE_START();
    fn HDV_PCI_DEVICE_STOP();
    fn HDV_PCI_DEVICE_TEARDOWN();
    fn HDV_PCI_INTERFACE_VERSION();
    fn HDV_PCI_PNP_ID();
    fn HDV_PCI_READ_CONFIG_SPACE();
    fn HDV_PCI_READ_INTERCEPTED_MEMORY();
    fn HDV_PCI_WRITE_CONFIG_SPACE();
    fn HDV_PCI_WRITE_INTERCEPTED_MEMORY();
    fn HVSOCKET_ADDRESS_FLAG_PASSTHRU();
    fn HVSOCKET_ADDRESS_INFO();
    fn HVSOCKET_CONNECTED_SUSPEND();
    fn HVSOCKET_CONNECT_TIMEOUT();
    fn HVSOCKET_CONNECT_TIMEOUT_MAX();
    fn HVSOCKET_CONTAINER_PASSTHRU();
    fn HV_GUID_BROADCAST();
    fn HV_GUID_CHILDREN();
    fn HV_GUID_LOOPBACK();
    fn HV_GUID_PARENT();
    fn HV_GUID_SILOHOST();
    fn HV_GUID_VSOCK_TEMPLATE();
    fn HV_GUID_ZERO();
    fn HV_PROTOCOL_RAW();
    fn HdvCreateDeviceInstance();
    fn HdvCreateGuestMemoryAperture();
    fn HdvCreateSectionBackedMmioRange();
    fn HdvDeliverGuestInterrupt();
    fn HdvDestroyGuestMemoryAperture();
    fn HdvDestroySectionBackedMmioRange();
    fn HdvInitializeDeviceHost();
    fn HdvReadGuestMemory();
    fn HdvRegisterDoorbell();
    fn HdvTeardownDeviceHost();
    fn HdvUnregisterDoorbell();
    fn HdvWriteGuestMemory();
    fn IOCTL_VMGENCOUNTER_READ();
    fn InKernelSpace();
    fn IsActiveVirtualTrustLevelEnabled();
    fn IsNestedVirtualizationEnabled();
    fn LoadSavedStateFile();
    fn LoadSavedStateFiles();
    fn LoadSavedStateModuleSymbols();
    fn LoadSavedStateModuleSymbolsEx();
    fn LoadSavedStateSymbolProvider();
    fn LocateSavedStateFiles();
    fn MODULE_INFO();
    fn PAGING_MODE();
    fn REGISTER_ID();
    fn ReadGuestPhysicalAddress();
    fn ReadGuestRawSavedMemory();
    fn ReadSavedStateGlobalVariable();
    fn ReleaseSavedStateFiles();
    fn ReleaseSavedStateSymbolProvider();
    fn ResolveSavedStateGlobalVariableAddress();
    fn SOCKADDR_HV();
    fn ScanMemoryForDosImages();
    fn SetMemoryBlockCacheLimit();
    fn SetSavedStateSymbolProviderDebugInfoCallback();
    fn VIRTUAL_PROCESSOR_ARCH();
    fn VIRTUAL_PROCESSOR_REGISTER();
    fn VIRTUAL_PROCESSOR_VENDOR();
    fn VM_GENCOUNTER();
    fn WHV_ACCESS_GPA_CONTROLS();
    fn WHV_ADVISE_GPA_RANGE();
    fn WHV_ADVISE_GPA_RANGE_CODE();
    fn WHV_ADVISE_GPA_RANGE_POPULATE();
    fn WHV_ADVISE_GPA_RANGE_POPULATE_FLAGS();
    fn WHV_ALLOCATE_VPCI_RESOURCE_FLAGS();
    fn WHV_ANY_VP();
    fn WHV_CACHE_TYPE();
    fn WHV_CAPABILITY();
    fn WHV_CAPABILITY_CODE();
    fn WHV_CAPABILITY_FEATURES();
    fn WHV_CAPABILITY_PROCESSOR_FREQUENCY_CAP();
    fn WHV_CPUID_OUTPUT();
    fn WHV_CREATE_VPCI_DEVICE_FLAGS();
    fn WHV_DOORBELL_MATCH_DATA();
    fn WHV_EMULATOR_CALLBACKS();
    fn WHV_EMULATOR_GET_VIRTUAL_PROCESSOR_REGISTERS_CALLBACK();
    fn WHV_EMULATOR_IO_ACCESS_INFO();
    fn WHV_EMULATOR_IO_PORT_CALLBACK();
    fn WHV_EMULATOR_MEMORY_ACCESS_INFO();
    fn WHV_EMULATOR_MEMORY_CALLBACK();
    fn WHV_EMULATOR_SET_VIRTUAL_PROCESSOR_REGISTERS_CALLBACK();
    fn WHV_EMULATOR_STATUS();
    fn WHV_EMULATOR_TRANSLATE_GVA_PAGE_CALLBACK();
    fn WHV_EXCEPTION_TYPE();
    fn WHV_EXTENDED_VM_EXITS();
    fn WHV_HYPERCALL_CONTEXT();
    fn WHV_HYPERCALL_CONTEXT_MAX_XMM_REGISTERS();
    fn WHV_INTERNAL_ACTIVITY_REGISTER();
    fn WHV_INTERRUPT_CONTROL();
    fn WHV_INTERRUPT_DESTINATION_MODE();
    fn WHV_INTERRUPT_TRIGGER_MODE();
    fn WHV_INTERRUPT_TYPE();
    fn WHV_MAP_GPA_RANGE_FLAGS();
    fn WHV_MAX_DEVICE_ID_SIZE_IN_CHARS();
    fn WHV_MEMORY_ACCESS_CONTEXT();
    fn WHV_MEMORY_ACCESS_INFO();
    fn WHV_MEMORY_ACCESS_TYPE();
    fn WHV_MEMORY_RANGE_ENTRY();
    fn WHV_MSR_ACTION();
    fn WHV_MSR_ACTION_ENTRY();
    fn WHV_NOTIFICATION_PORT_PARAMETERS();
    fn WHV_NOTIFICATION_PORT_PROPERTY_CODE();
    fn WHV_NOTIFICATION_PORT_TYPE();
    fn WHV_PARTITION_COUNTER_SET();
    fn WHV_PARTITION_HANDLE();
    fn WHV_PARTITION_MEMORY_COUNTERS();
    fn WHV_PARTITION_PROPERTY();
    fn WHV_PARTITION_PROPERTY_CODE();
    fn WHV_PROCESSOR_APIC_COUNTERS();
    fn WHV_PROCESSOR_COUNTER_SET();
    fn WHV_PROCESSOR_EVENT_COUNTERS();
    fn WHV_PROCESSOR_FEATURES();
    fn WHV_PROCESSOR_FEATURES1();
    fn WHV_PROCESSOR_FEATURES_BANKS();
    fn WHV_PROCESSOR_FEATURES_BANKS_COUNT();
    fn WHV_PROCESSOR_INTERCEPT_COUNTER();
    fn WHV_PROCESSOR_INTERCEPT_COUNTERS();
    fn WHV_PROCESSOR_PERFMON_FEATURES();
    fn WHV_PROCESSOR_RUNTIME_COUNTERS();
    fn WHV_PROCESSOR_SYNTHETIC_FEATURES_COUNTERS();
    fn WHV_PROCESSOR_VENDOR();
    fn WHV_PROCESSOR_XSAVE_FEATURES();
    fn WHV_READ_WRITE_GPA_RANGE_MAX_SIZE();
    fn WHV_REGISTER_NAME();
    fn WHV_REGISTER_VALUE();
    fn WHV_RUN_VP_CANCELED_CONTEXT();
    fn WHV_RUN_VP_CANCEL_REASON();
    fn WHV_RUN_VP_EXIT_CONTEXT();
    fn WHV_RUN_VP_EXIT_REASON();
    fn WHV_SCHEDULER_FEATURES();
    fn WHV_SRIOV_RESOURCE_DESCRIPTOR();
    fn WHV_SYNIC_EVENT_PARAMETERS();
    fn WHV_SYNIC_MESSAGE_SIZE();
    fn WHV_SYNIC_SINT_DELIVERABLE_CONTEXT();
    fn WHV_SYNTHETIC_PROCESSOR_FEATURES();
    fn WHV_SYNTHETIC_PROCESSOR_FEATURES_BANKS();
    fn WHV_SYNTHETIC_PROCESSOR_FEATURES_BANKS_COUNT();
    fn WHV_TRANSLATE_GVA_FLAGS();
    fn WHV_TRANSLATE_GVA_RESULT();
    fn WHV_TRANSLATE_GVA_RESULT_CODE();
    fn WHV_TRIGGER_PARAMETERS();
    fn WHV_TRIGGER_TYPE();
    fn WHV_UINT128();
    fn WHV_VIRTUAL_PROCESSOR_PROPERTY();
    fn WHV_VIRTUAL_PROCESSOR_PROPERTY_CODE();
    fn WHV_VIRTUAL_PROCESSOR_STATE_TYPE();
    fn WHV_VPCI_DEVICE_NOTIFICATION();
    fn WHV_VPCI_DEVICE_NOTIFICATION_TYPE();
    fn WHV_VPCI_DEVICE_PROPERTY_CODE();
    fn WHV_VPCI_DEVICE_REGISTER();
    fn WHV_VPCI_DEVICE_REGISTER_SPACE();
    fn WHV_VPCI_HARDWARE_IDS();
    fn WHV_VPCI_INTERRUPT_TARGET();
    fn WHV_VPCI_INTERRUPT_TARGET_FLAGS();
    fn WHV_VPCI_MMIO_MAPPING();
    fn WHV_VPCI_MMIO_RANGE_FLAGS();
    fn WHV_VPCI_PROBED_BARS();
    fn WHV_VPCI_TYPE0_BAR_COUNT();
    fn WHV_VP_EXCEPTION_CONTEXT();
    fn WHV_VP_EXCEPTION_INFO();
    fn WHV_VP_EXIT_CONTEXT();
    fn WHV_X64_APIC_EOI_CONTEXT();
    fn WHV_X64_APIC_INIT_SIPI_CONTEXT();
    fn WHV_X64_APIC_SMI_CONTEXT();
    fn WHV_X64_APIC_WRITE_CONTEXT();
    fn WHV_X64_APIC_WRITE_TYPE();
    fn WHV_X64_CPUID_ACCESS_CONTEXT();
    fn WHV_X64_CPUID_RESULT();
    fn WHV_X64_CPUID_RESULT2();
    fn WHV_X64_CPUID_RESULT2_FLAGS();
    fn WHV_X64_DELIVERABILITY_NOTIFICATIONS_REGISTER();
    fn WHV_X64_FP_CONTROL_STATUS_REGISTER();
    fn WHV_X64_FP_REGISTER();
    fn WHV_X64_INTERRUPTION_DELIVERABLE_CONTEXT();
    fn WHV_X64_INTERRUPT_STATE_REGISTER();
    fn WHV_X64_IO_PORT_ACCESS_CONTEXT();
    fn WHV_X64_IO_PORT_ACCESS_INFO();
    fn WHV_X64_LOCAL_APIC_EMULATION_MODE();
    fn WHV_X64_MSR_ACCESS_CONTEXT();
    fn WHV_X64_MSR_ACCESS_INFO();
    fn WHV_X64_MSR_EXIT_BITMAP();
    fn WHV_X64_PENDING_DEBUG_EXCEPTION();
    fn WHV_X64_PENDING_EVENT_TYPE();
    fn WHV_X64_PENDING_EXCEPTION_EVENT();
    fn WHV_X64_PENDING_EXT_INT_EVENT();
    fn WHV_X64_PENDING_INTERRUPTION_REGISTER();
    fn WHV_X64_PENDING_INTERRUPTION_TYPE();
    fn WHV_X64_RDTSC_CONTEXT();
    fn WHV_X64_RDTSC_INFO();
    fn WHV_X64_SEGMENT_REGISTER();
    fn WHV_X64_TABLE_REGISTER();
    fn WHV_X64_UNSUPPORTED_FEATURE_CODE();
    fn WHV_X64_UNSUPPORTED_FEATURE_CONTEXT();
    fn WHV_X64_VP_EXECUTION_STATE();
    fn WHV_X64_XMM_CONTROL_STATUS_REGISTER();
    fn WHvAcceptPartitionMigration();
    fn WHvAdviseGpaRange();
    fn WHvAllocateVpciResource();
    fn WHvCancelPartitionMigration();
    fn WHvCancelRunVirtualProcessor();
    fn WHvCompletePartitionMigration();
    fn WHvCreateNotificationPort();
    fn WHvCreatePartition();
    fn WHvCreateTrigger();
    fn WHvCreateVirtualProcessor();
    fn WHvCreateVirtualProcessor2();
    fn WHvCreateVpciDevice();
    fn WHvDeleteNotificationPort();
    fn WHvDeletePartition();
    fn WHvDeleteTrigger();
    fn WHvDeleteVirtualProcessor();
    fn WHvDeleteVpciDevice();
    fn WHvEmulatorCreateEmulator();
    fn WHvEmulatorDestroyEmulator();
    fn WHvEmulatorTryIoEmulation();
    fn WHvEmulatorTryMmioEmulation();
    fn WHvGetCapability();
    fn WHvGetInterruptTargetVpSet();
    fn WHvGetPartitionCounters();
    fn WHvGetPartitionProperty();
    fn WHvGetVirtualProcessorCounters();
    fn WHvGetVirtualProcessorCpuidOutput();
    fn WHvGetVirtualProcessorInterruptControllerState();
    fn WHvGetVirtualProcessorInterruptControllerState2();
    fn WHvGetVirtualProcessorRegisters();
    fn WHvGetVirtualProcessorState();
    fn WHvGetVirtualProcessorXsaveState();
    fn WHvGetVpciDeviceInterruptTarget();
    fn WHvGetVpciDeviceNotification();
    fn WHvGetVpciDeviceProperty();
    fn WHvMapGpaRange();
    fn WHvMapGpaRange2();
    fn WHvMapVpciDeviceInterrupt();
    fn WHvMapVpciDeviceMmioRanges();
    fn WHvPostVirtualProcessorSynicMessage();
    fn WHvQueryGpaRangeDirtyBitmap();
    fn WHvReadGpaRange();
    fn WHvReadVpciDeviceRegister();
    fn WHvRegisterPartitionDoorbellEvent();
    fn WHvRequestInterrupt();
    fn WHvRequestVpciDeviceInterrupt();
    fn WHvResetPartition();
    fn WHvResumePartitionTime();
    fn WHvRetargetVpciDeviceInterrupt();
    fn WHvRunVirtualProcessor();
    fn WHvSetNotificationPortProperty();
    fn WHvSetPartitionProperty();
    fn WHvSetVirtualProcessorInterruptControllerState();
    fn WHvSetVirtualProcessorInterruptControllerState2();
    fn WHvSetVirtualProcessorRegisters();
    fn WHvSetVirtualProcessorState();
    fn WHvSetVirtualProcessorXsaveState();
    fn WHvSetVpciDevicePowerState();
    fn WHvSetupPartition();
    fn WHvSignalVirtualProcessorSynicEvent();
    fn WHvStartPartitionMigration();
    fn WHvSuspendPartitionTime();
    fn WHvTranslateGva();
    fn WHvUnmapGpaRange();
    fn WHvUnmapVpciDeviceInterrupt();
    fn WHvUnmapVpciDeviceMmioRanges();
    fn WHvUnregisterPartitionDoorbellEvent();
    fn WHvUpdateTriggerParameters();
    fn WHvWriteGpaRange();
    fn WHvWriteVpciDeviceRegister();
}
