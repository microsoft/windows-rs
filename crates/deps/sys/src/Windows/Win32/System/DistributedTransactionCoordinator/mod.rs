#![allow(non_snake_case, non_camel_case_types)]
#[link(name = "windows")]
extern "system" {
    fn APPLICATIONTYPE();
    fn AUTHENTICATION_LEVEL();
    fn BOID();
    fn CLSID_MSDtcTransaction();
    fn CLSID_MSDtcTransactionManager();
    fn DTCINSTALL_E_CLIENT_ALREADY_INSTALLED();
    fn DTCINSTALL_E_SERVER_ALREADY_INSTALLED();
    fn DTC_GET_TRANSACTION_MANAGER();
    fn DTC_GET_TRANSACTION_MANAGER_EX_A();
    fn DTC_GET_TRANSACTION_MANAGER_EX_W();
    fn DTC_INSTALL_CLIENT();
    fn DTC_INSTALL_OVERWRITE_CLIENT();
    fn DTC_INSTALL_OVERWRITE_SERVER();
    fn DTC_STATUS_();
    fn DtcGetTransactionManager();
    fn DtcGetTransactionManagerC();
    fn DtcGetTransactionManagerExA();
    fn DtcGetTransactionManagerExW();
    fn IDtcLuConfigure();
    fn IDtcLuRecovery();
    fn IDtcLuRecoveryFactory();
    fn IDtcLuRecoveryInitiatedByDtc();
    fn IDtcLuRecoveryInitiatedByDtcStatusWork();
    fn IDtcLuRecoveryInitiatedByDtcTransWork();
    fn IDtcLuRecoveryInitiatedByLu();
    fn IDtcLuRecoveryInitiatedByLuWork();
    fn IDtcLuRmEnlistment();
    fn IDtcLuRmEnlistmentFactory();
    fn IDtcLuRmEnlistmentSink();
    fn IDtcLuSubordinateDtc();
    fn IDtcLuSubordinateDtcFactory();
    fn IDtcLuSubordinateDtcSink();
    fn IDtcNetworkAccessConfig();
    fn IDtcNetworkAccessConfig2();
    fn IDtcNetworkAccessConfig3();
    fn IDtcToXaHelper();
    fn IDtcToXaHelperFactory();
    fn IDtcToXaHelperSinglePipe();
    fn IDtcToXaMapper();
    fn IGetDispenser();
    fn IKernelTransaction();
    fn ILastResourceManager();
    fn IPrepareInfo();
    fn IPrepareInfo2();
    fn IRMHelper();
    fn IResourceManager();
    fn IResourceManager2();
    fn IResourceManagerFactory();
    fn IResourceManagerFactory2();
    fn IResourceManagerRejoinable();
    fn IResourceManagerSink();
    fn ISOFLAG();
    fn ISOLATIONLEVEL();
    fn ITipHelper();
    fn ITipPullSink();
    fn ITipTransaction();
    fn ITmNodeName();
    fn ITransaction();
    fn ITransaction2();
    fn ITransactionCloner();
    fn ITransactionDispenser();
    fn ITransactionEnlistmentAsync();
    fn ITransactionExport();
    fn ITransactionExportFactory();
    fn ITransactionImport();
    fn ITransactionImportWhereabouts();
    fn ITransactionLastEnlistmentAsync();
    fn ITransactionLastResourceAsync();
    fn ITransactionOptions();
    fn ITransactionOutcomeEvents();
    fn ITransactionPhase0EnlistmentAsync();
    fn ITransactionPhase0Factory();
    fn ITransactionPhase0NotifyAsync();
    fn ITransactionReceiver();
    fn ITransactionReceiverFactory();
    fn ITransactionResource();
    fn ITransactionResourceAsync();
    fn ITransactionTransmitter();
    fn ITransactionTransmitterFactory();
    fn ITransactionVoterBallotAsync2();
    fn ITransactionVoterFactory2();
    fn ITransactionVoterNotifyAsync2();
    fn IXAConfig();
    fn IXAObtainRMInfo();
    fn IXATransLookup();
    fn IXATransLookup2();
    fn MAXBQUALSIZE();
    fn MAXGTRIDSIZE();
    fn MAXINFOSIZE();
    fn OLE_TM_CONFIG_PARAMS_V1();
    fn OLE_TM_CONFIG_PARAMS_V2();
    fn OLE_TM_CONFIG_VERSION_1();
    fn OLE_TM_CONFIG_VERSION_2();
    fn OLE_TM_FLAG_INTERNAL_TO_TM();
    fn OLE_TM_FLAG_NOAGILERECOVERY();
    fn OLE_TM_FLAG_NODEMANDSTART();
    fn OLE_TM_FLAG_NONE();
    fn OLE_TM_FLAG_QUERY_SERVICE_LOCKSTATUS();
    fn RMNAMESZ();
    fn TMASYNC();
    fn TMENDRSCAN();
    fn TMER_INVAL();
    fn TMER_PROTO();
    fn TMER_TMERR();
    fn TMFAIL();
    fn TMJOIN();
    fn TMMIGRATE();
    fn TMMULTIPLE();
    fn TMNOFLAGS();
    fn TMNOMIGRATE();
    fn TMNOWAIT();
    fn TMONEPHASE();
    fn TMREGISTER();
    fn TMRESUME();
    fn TMSTARTRSCAN();
    fn TMSUCCESS();
    fn TMSUSPEND();
    fn TMUSEASYNC();
    fn TM_JOIN();
    fn TM_OK();
    fn TM_RESUME();
    fn TX_MISC_CONSTANTS();
    fn XACTCONST();
    fn XACTHEURISTIC();
    fn XACTOPT();
    fn XACTRM();
    fn XACTSTAT();
    fn XACTSTATS();
    fn XACTTC();
    fn XACTTRANSINFO();
    fn XACT_DTC_CONSTANTS();
    fn XAER_ASYNC();
    fn XAER_DUPID();
    fn XAER_INVAL();
    fn XAER_NOTA();
    fn XAER_OUTSIDE();
    fn XAER_PROTO();
    fn XAER_RMERR();
    fn XAER_RMFAIL();
    fn XA_CLOSE_EPT();
    fn XA_COMMIT_EPT();
    fn XA_COMPLETE_EPT();
    fn XA_END_EPT();
    fn XA_FMTID_DTC();
    fn XA_FMTID_DTC_VER1();
    fn XA_FORGET_EPT();
    fn XA_HEURCOM();
    fn XA_HEURHAZ();
    fn XA_HEURMIX();
    fn XA_HEURRB();
    fn XA_NOMIGRATE();
    fn XA_OK();
    fn XA_OPEN_EPT();
    fn XA_PREPARE_EPT();
    fn XA_RBBASE();
    fn XA_RBCOMMFAIL();
    fn XA_RBDEADLOCK();
    fn XA_RBEND();
    fn XA_RBINTEGRITY();
    fn XA_RBOTHER();
    fn XA_RBPROTO();
    fn XA_RBROLLBACK();
    fn XA_RBTIMEOUT();
    fn XA_RBTRANSIENT();
    fn XA_RDONLY();
    fn XA_RECOVER_EPT();
    fn XA_RETRY();
    fn XA_ROLLBACK_EPT();
    fn XA_START_EPT();
    fn XA_SWITCH_F_DTC();
    fn XIDDATASIZE();
    fn _DtcLu_CompareState();
    fn _DtcLu_CompareStates_Confirmation();
    fn _DtcLu_CompareStates_Error();
    fn _DtcLu_CompareStates_Response();
    fn _DtcLu_LocalRecovery_Work();
    fn _DtcLu_Xln();
    fn _DtcLu_Xln_Confirmation();
    fn _DtcLu_Xln_Error();
    fn _DtcLu_Xln_Response();
    fn _ProxyConfigParams();
    fn xa_switch_t();
    fn xid_t();
}
