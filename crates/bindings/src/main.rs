use std::io::prelude::*;

fn main() -> std::io::Result<()> {
    let tokens = windows_macros::generate! {
        Windows::Foundation::{IReference, IStringable, PropertyValue},
        Windows::Win32::System::Com::{
            CLSIDFromProgID, CoCreateGuid, CoCreateInstance, CoInitializeEx, CoTaskMemAlloc,
            CoTaskMemFree, IAgileObject, CLSCTX_ALL, COINIT_APARTMENTTHREADED,
            COINIT_MULTITHREADED,
        },
        Windows::Win32::System::Diagnostics::Debug::{
            FormatMessageW, GetLastError, FORMAT_MESSAGE_ALLOCATE_BUFFER,
            FORMAT_MESSAGE_FROM_SYSTEM, FORMAT_MESSAGE_IGNORE_INSERTS,
        },
        Windows::Win32::System::Memory::{GetProcessHeap, HeapAlloc, HeapFree, HEAP_NONE},
        Windows::Win32::System::OleAutomation::{GetErrorInfo, IErrorInfo, SetErrorInfo, BSTR},
        Windows::Win32::System::SystemServices::{
            FreeLibrary, GetProcAddress, LoadLibraryA, CO_E_NOTINITIALIZED, E_POINTER,
        },
        Windows::Win32::System::Threading::{CreateEventA, SetEvent, WaitForSingleObject},
        Windows::Win32::System::WinRT::{
            ILanguageExceptionErrorInfo2, IRestrictedErrorInfo, IWeakReference,
            IWeakReferenceSource,
        },
        Windows::Win32::System::WindowsProgramming::CloseHandle,
    };

    let mut path = windows_gen::workspace_dir();
    path.push("src");
    path.push("bindings.rs");

    let mut file = std::fs::File::create(&path)?;
    file.write_all(
        "// This file was generated by the `windows` crate - do not edit by hand!\n\n".as_bytes(),
    )?;

    file.write_all(tokens.as_bytes())?;
    drop(file);

    let mut cmd = ::std::process::Command::new("rustfmt");
    cmd.arg(&path);
    cmd.output()?;

    Ok(())
}
