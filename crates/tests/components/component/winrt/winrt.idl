namespace Component
{
    namespace Simple
    {
        runtimeclass Class
        {
            Class();
            void Method();
        }

        interface IInterface
        {
            void Method();
        };

        delegate void Delegate();

        struct Struct
        {
            Int32 First;
            Int32 Second;
        };

        enum Enum
        {
            First,
            Second,
        };
    }

    namespace Classes
    {
        runtimeclass Static
        {
            static Int32 Method();
            static Int32 Property;
            static Int32 ReadOnly{ get; };
        }

        runtimeclass Activatable
        {
            Activatable();
            Activatable(Int32 v);
            Int32 Property{ get; };
        }

        runtimeclass Creator
        {
            static Creator Create(Int32 value);
            Int32 Property{ get; };
        }

        runtimeclass Required : [default] Component.Interfaces.IProperty
        {
            Required();
        }

        runtimeclass NoWeakRef
        {
            NoWeakRef();
            void Method();
        }
    }

    namespace Composable
    {
        unsealed runtimeclass Base : IBaseRequired
        {
            Base();

            [method_name("CreateWithValue")]
            Base(Int32 v);

            Int32 Value{ get; set; };
        }

        unsealed runtimeclass Derived : Base, IDerivedRequired
        {
            Derived();

            [method_name("CreateWithValue")]
            Derived(Int32 v);
        }

        interface IBaseRequired
        {
            String BaseRequired();
        };

        interface IDerivedRequired
        {
            String DerivedRequired();
        };
    }

    namespace Interfaces
    {
        interface IProperty
        {
            Int32 Property;
        };

        interface IRequired
        {
            void Required();
        };

        interface IRequires requires IRequired
        {
            void Requires();
        };

        runtimeclass Test
        {
            static IRequires GoodRequires();
            static IRequires BadRequires();
        }
    }

    namespace Dependencies
    {
        interface ISimple
        {
            void Method();
        };

        interface IRequiredDependencies
            requires ISimple, Windows.Foundation.IStringable, Windows.Foundation.Collections.IIterable<Int32>
        {
            void Method();
        }

        interface IMethodDependencies
        {
            ISimple Simple();
            Windows.Foundation.IStringable Stringable();
            Windows.Foundation.Collections.IIterable<Int32> Iterable();
        }
    }

    namespace Structs
    {
        enum Enum
        {
            First,
            Second,
        };

        struct Blittable
        {
            Boolean Bool;
            Char Char;
            UInt8 UInt8;
            UInt16 UInt16;
            UInt32 UInt32;
            UInt64 UInt64;
            Int16 Int16;
            Int32 Int32;
            Int64 Int64;
            Single Single;
            Double Double;
            Guid Guid;
            HRESULT HResult;
            Enum Enum;
        };

        struct NonBlittable
        {
            String String;
            Windows.Foundation.IReference<Int64> RefInt64;
        };

        struct Nested
        {
            Blittable Blittable;
            NonBlittable NonBlittable;
        };

        runtimeclass Test
        {
            static UInt32 SizeOfBlittable{ get; };
            static UInt32 SizeOfNonBlittable{ get; };
            static UInt32 SizeOfNested{ get; };
            static Guid GuidOfRefNested{ get; };
        }
    }

    namespace Enums
    {
        enum Signed
        {
            Three = 3,
            Two = 2,
            One = 1,
        };

        [flags]
        enum Unsigned
        {
            Three = 0x100,
            Two   = 0x010,
            One   = 0x001
        };
    }

    namespace Collections
    {
        runtimeclass Test
        {
            static Windows.Foundation.Collections.IVector<Int32> CreateInt32Vector();
            static Windows.Foundation.Collections.IVector<String> CreateStringVector();
            static Windows.Foundation.Collections.IVector<Windows.Foundation.IStringable> CreateStringableVector();
        }
    }

    namespace Async
    {
        runtimeclass Test
        {
            static Windows.Foundation.IAsyncAction CreateAsyncAction(Windows.Foundation.TimeSpan delay, Boolean fail);
            static Windows.Foundation.IAsyncActionWithProgress<Int32> CreateAsyncActionWithProgress(Windows.Foundation.TimeSpan delay, Boolean fail);
            static Windows.Foundation.IAsyncOperation<Int32> CreateAsyncOperation(Windows.Foundation.TimeSpan delay, Boolean fail, Int32 result);
            static Windows.Foundation.IAsyncOperationWithProgress<Int32, Int32> CreateAsyncOperationWithProgress(Windows.Foundation.TimeSpan delay, Boolean fail, Int32 result);
        }
    }

    namespace Conversion
    {
        runtimeclass Test
        {
            static UInt32 ExpectTimeSpan(Windows.Foundation.TimeSpan value);
            static String ExpectObject(Object value);
        }
    }

    namespace Attributes
    {
        [attributeusage(target_runtimeclass)]
        attribute CustomTestAttribute
        {
            String SomeString;
            Int32 SomeInt;
            Boolean SomeBool;
        }

        [CustomTest("Hello, World!", 1975, TRUE)]
        runtimeclass Test
        {
            Test();
            void Method();
        }
    }

    namespace MethodNames
    {
        interface IMethodNames
        {
            void Method();
            Int64 Property;
            event Windows.Foundation.EventHandler<Int64> Event;
        };
    }

    namespace Signatures
    {
        delegate Boolean SignatureBoolean(Boolean a, out Boolean b);
        delegate Boolean[] ArraySignatureBoolean(Boolean[] a, ref Boolean[] b, out Boolean[] c);
    
        delegate UInt8 SignatureUInt8(UInt8 a, out UInt8 b);
        delegate UInt8[] ArraySignatureUInt8(UInt8[] a, ref UInt8[] b, out UInt8[] c);

        delegate UInt16 SignatureUInt16(UInt16 a, out UInt16 b);
        delegate UInt16[] ArraySignatureUInt16(UInt16[] a, ref UInt16[] b, out UInt16[] c);

        delegate UInt32 SignatureUInt32(UInt32 a, out UInt32 b);
        delegate UInt32[] ArraySignatureUInt32(UInt32[] a, ref UInt32[] b, out UInt32[] c);

        delegate UInt64 SignatureUInt64(UInt64 a, out UInt64 b);
        delegate UInt64[] ArraySignatureUInt64(UInt64[] a, ref UInt64[] b, out UInt64[] c);

        delegate Int16 SignatureInt16(Int16 a, out Int16 b);
        delegate Int16[] ArraySignatureInt16(Int16[] a, ref Int16[] b, out Int16[] c);

        delegate Int32 SignatureInt32(Int32 a, out Int32 b);
        delegate Int32[] ArraySignatureInt32(Int32[] a, ref Int32[] b, out Int32[] c);

        delegate Int64 SignatureInt64(Int64 a, out Int64 b);
        delegate Int64[] ArraySignatureInt64(Int64[] a, ref Int64[] b, out Int64[] c);

        delegate Single SignatureSingle(Single a, out Single b);
        delegate Single[] ArraySignatureSingle(Single[] a, ref Single[] b, out Single[] c);

        delegate Double SignatureDouble(Double a, out Double b);
        delegate Double[] ArraySignatureDouble(Double[] a, ref Double[] b, out Double[] c);

        delegate Char SignatureChar(Char a, out Char b);
        delegate Char[] ArraySignatureChar(Char[] a, ref Char[] b, out Char[] c);

        delegate String SignatureString(String a, out String b);
        delegate String[] ArraySignatureString(String[] a, ref String[] b, out String[] c);

        delegate Guid SignatureGuid(Guid a, out Guid b);
        delegate Guid[] ArraySignatureGuid(Guid[] a, ref Guid[] b, out Guid[] c);

        delegate HRESULT SignatureHResult(HRESULT a, out HRESULT b);
        delegate HRESULT[] ArraySignatureHResult(HRESULT[] a, ref HRESULT[] b, out HRESULT[] c);

        delegate Object SignatureObject(Object a, out Object b);
        delegate Object[] ArraySignatureObject(Object[] a, ref Object[] b, out Object[] c);

        delegate Component.Simple.Class SignatureClass(Component.Simple.Class a, out Component.Simple.Class b);
        delegate Component.Simple.Class[] ArraySignatureClass(Component.Simple.Class[] a, ref Component.Simple.Class[] b, out Component.Simple.Class[] c);

        delegate Component.Structs.Blittable SignatureBlittable(Component.Structs.Blittable a, ref const Component.Structs.Blittable b, out Component.Structs.Blittable c);
        delegate Component.Structs.Blittable[] ArraySignatureBlittable(Component.Structs.Blittable[] a, ref Component.Structs.Blittable[] b, out Component.Structs.Blittable[] c);

        delegate Component.Structs.NonBlittable SignatureNonBlittable(Component.Structs.NonBlittable a, ref const Component.Structs.NonBlittable b, out Component.Structs.NonBlittable c);
        delegate Component.Structs.NonBlittable[] ArraySignatureNonBlittable(Component.Structs.NonBlittable[] a, ref Component.Structs.NonBlittable[] b, out Component.Structs.NonBlittable[] c);

        delegate Component.Structs.Nested SignatureNested(Component.Structs.Nested a, ref const Component.Structs.Nested b, out Component.Structs.Nested c);
        delegate Component.Structs.Nested[] ArraySignatureNested(Component.Structs.Nested[] a, ref Component.Structs.Nested[] b, out Component.Structs.Nested[] c);

        interface ITestBoolean
        {
            Boolean SignatureBoolean(Boolean a, out Boolean b);
            Boolean[] ArraySignatureBoolean(Boolean[] a, ref Boolean[] b, out Boolean[] c);
            void CallSignatureBoolean(SignatureBoolean handler);
            void CallArraySignatureBoolean(ArraySignatureBoolean handler);
        }

        interface ITestUInt8
        {
            UInt8 SignatureUInt8(UInt8 a, out UInt8 b);
            UInt8[] ArraySignatureUInt8(UInt8[] a, ref UInt8[] b, out UInt8[] c);
            void CallSignatureUInt8(SignatureUInt8 handler);
            void CallArraySignatureUInt8(ArraySignatureUInt8 handler);
        }

        interface ITestUInt16
        {
            UInt16 SignatureUInt16(UInt16 a, out UInt16 b);
            UInt16[] ArraySignatureUInt16(UInt16[] a, ref UInt16[] b, out UInt16[] c);
            void CallSignatureUInt16(SignatureUInt16 handler);
            void CallArraySignatureUInt16(ArraySignatureUInt16 handler);
        }

        interface ITestUInt32
        {
            UInt32 SignatureUInt32(UInt32 a, out UInt32 b);
            UInt32[] ArraySignatureUInt32(UInt32[] a, ref UInt32[] b, out UInt32[] c);
            void CallSignatureUInt32(SignatureUInt32 handler);
            void CallArraySignatureUInt32(ArraySignatureUInt32 handler);
        }

        interface ITestUInt64
        {
            UInt64 SignatureUInt64(UInt64 a, out UInt64 b);
            UInt64[] ArraySignatureUInt64(UInt64[] a, ref UInt64[] b, out UInt64[] c);
            void CallSignatureUInt64(SignatureUInt64 handler);
            void CallArraySignatureUInt64(ArraySignatureUInt64 handler);
        }

        interface ITestInt16
        {
            Int16 SignatureInt16(Int16 a, out Int16 b);
            Int16[] ArraySignatureInt16(Int16[] a, ref Int16[] b, out Int16[] c);
            void CallSignatureInt16(SignatureInt16 handler);
            void CallArraySignatureInt16(ArraySignatureInt16 handler);
        }

        interface ITestInt32
        {
            Int32 SignatureInt32(Int32 a, out Int32 b);
            Int32[] ArraySignatureInt32(Int32[] a, ref Int32[] b, out Int32[] c);
            void CallSignatureInt32(SignatureInt32 handler);
            void CallArraySignatureInt32(ArraySignatureInt32 handler);
        }

        interface ITestInt64
        {
            Int64 SignatureInt64(Int64 a, out Int64 b);
            Int64[] ArraySignatureInt64(Int64[] a, ref Int64[] b, out Int64[] c);
            void CallSignatureInt64(SignatureInt64 handler);
            void CallArraySignatureInt64(ArraySignatureInt64 handler);
        }

        interface ITestSingle
        {
            Single SignatureSingle(Single a, out Single b);
            Single[] ArraySignatureSingle(Single[] a, ref Single[] b, out Single[] c);
            void CallSignatureSingle(SignatureSingle handler);
            void CallArraySignatureSingle(ArraySignatureSingle handler);
        }

        interface ITestDouble
        {
            Double SignatureDouble(Double a, out Double b);
            Double[] ArraySignatureDouble(Double[] a, ref Double[] b, out Double[] c);
            void CallSignatureDouble(SignatureDouble handler);
            void CallArraySignatureDouble(ArraySignatureDouble handler);
        }

        interface ITestChar
        {
            Char SignatureChar(Char a, out Char b);
            Char[] ArraySignatureChar(Char[] a, ref Char[] b, out Char[] c);
            void CallSignatureChar(SignatureChar handler);
            void CallArraySignatureChar(ArraySignatureChar handler);
        }

        interface ITestString
        {
            String SignatureString(String a, out String b);
            String[] ArraySignatureString(String[] a, ref String[] b, out String[] c);
            void CallSignatureString(SignatureString handler);
            void CallArraySignatureString(ArraySignatureString handler);
        }

        interface ITestGuid
        {
            Guid SignatureGuid(Guid a, out Guid b);
            Guid[] ArraySignatureGuid(Guid[] a, ref Guid[] b, out Guid[] c);
            void CallSignatureGuid(SignatureGuid handler);
            void CallArraySignatureGuid(ArraySignatureGuid handler);
        }

        interface ITestHResult
        {
            HRESULT SignatureHResult(HRESULT a, out HRESULT b);
            HRESULT[] ArraySignatureHResult(HRESULT[] a, ref HRESULT[] b, out HRESULT[] c);
            void CallSignatureHResult(SignatureHResult handler);
            void CallArraySignatureHResult(ArraySignatureHResult handler);
        }

        interface ITestObject
        {
            Object SignatureObject(Object a, out Object b);
            Object[] ArraySignatureObject(Object[] a, ref Object[] b, out Object[] c);
            void CallSignatureObject(SignatureObject handler);
            void CallArraySignatureObject(ArraySignatureObject handler);
        }

        interface ITestClass
        {
            Component.Simple.Class SignatureClass(Component.Simple.Class a, out Component.Simple.Class b);
            Component.Simple.Class[] ArraySignatureClass(Component.Simple.Class[] a, ref Component.Simple.Class[] b, out Component.Simple.Class[] c);
            void CallSignatureClass(SignatureClass handler);
            void CallArraySignatureClass(ArraySignatureClass handler);
        }

        interface ITestBlittable
        {
            Component.Structs.Blittable SignatureBlittable(Component.Structs.Blittable a, ref const Component.Structs.Blittable b, out Component.Structs.Blittable c);
            Component.Structs.Blittable[] ArraySignatureBlittable(Component.Structs.Blittable[] a, ref Component.Structs.Blittable[] b, out Component.Structs.Blittable[] c);
            void CallSignatureBlittable(SignatureBlittable handler);
            void CallArraySignatureBlittable(ArraySignatureBlittable handler);
        }

        interface ITestNonBlittable
        {
            Component.Structs.NonBlittable SignatureNonBlittable(Component.Structs.NonBlittable a, ref const Component.Structs.NonBlittable b, out Component.Structs.NonBlittable c);
            Component.Structs.NonBlittable[] ArraySignatureNonBlittable(Component.Structs.NonBlittable[] a, ref Component.Structs.NonBlittable[] b, out Component.Structs.NonBlittable[] c);
            void CallSignatureNonBlittable(SignatureNonBlittable handler);
            void CallArraySignatureNonBlittable(ArraySignatureNonBlittable handler);
        }

        interface ITestNested
        {
            Component.Structs.Nested SignatureNested(Component.Structs.Nested a, ref const Component.Structs.Nested b, out Component.Structs.Nested c);
            Component.Structs.Nested[] ArraySignatureNested(Component.Structs.Nested[] a, ref Component.Structs.Nested[] b, out Component.Structs.Nested[] c);
            void CallSignatureNested(SignatureNested handler);
            void CallArraySignatureNested(ArraySignatureNested handler);
        };

        runtimeclass Test : [default] ITestBoolean,
            ITestUInt8, ITestUInt16, ITestUInt32, ITestUInt64,
            ITestInt16, ITestInt32, ITestInt64,
            ITestSingle, ITestDouble,
            ITestChar, ITestString,
            ITestGuid, ITestHResult,
            ITestObject, ITestClass,
            ITestBlittable, ITestNonBlittable, ITestNested
        {
            Test();
        }
    }
}
