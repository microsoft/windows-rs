// Bindings generated by `windows-bindgen` 0.58.0

#![allow(
    non_snake_case,
    non_upper_case_globals,
    non_camel_case_types,
    dead_code,
    clippy::all
)]
windows_core::imp::define_interface!(
    IActivatable,
    IActivatable_Vtbl,
    0x609580bb_73b4_51ea_be51_d50365b2affb
);
impl windows_core::RuntimeType for IActivatable {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[repr(C)]
pub struct IActivatable_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Property:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IActivatableFactory,
    IActivatableFactory_Vtbl,
    0x99e4a7eb_b3d2_56f9_a880_b21f08954ed4
);
impl windows_core::RuntimeType for IActivatableFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[repr(C)]
pub struct IActivatableFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        i32,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IComposable,
    IComposable_Vtbl,
    0x479238ca_9359_5b30_8539_eb8918873f8b
);
impl windows_core::RuntimeType for IComposable {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[repr(C)]
pub struct IComposable_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Property:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IComposableFactory,
    IComposableFactory_Vtbl,
    0x535b0872_cbb6_5b3b_b516_0d4f9785f5f3
);
impl windows_core::RuntimeType for IComposableFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[repr(C)]
pub struct IComposableFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        i32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Debug, Clone)]
pub struct Activatable(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    Activatable,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl Activatable {
    pub fn Property(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Property)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn CreateInstance(arg: i32) -> windows_core::Result<Activatable> {
        Self::IActivatableFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                arg,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    #[doc(hidden)]
    pub fn IActivatableFactory<R, F: FnOnce(&IActivatableFactory) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<Activatable, IActivatableFactory> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for Activatable {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IActivatable>();
}
unsafe impl windows_core::Interface for Activatable {
    type Vtable = IActivatable_Vtbl;
    const IID: windows_core::GUID = <IActivatable as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for Activatable {
    const NAME: &'static str = "Namespace.Activatable";
}
unsafe impl Send for Activatable {}
unsafe impl Sync for Activatable {}
#[repr(transparent)]
#[derive(PartialEq, Eq, Debug, Clone)]
pub struct Composable(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    Composable,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl Composable {
    pub fn Property(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Property)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
}
impl windows_core::RuntimeType for Composable {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IComposable>();
}
unsafe impl windows_core::Interface for Composable {
    type Vtable = IComposable_Vtbl;
    const IID: windows_core::GUID = <IComposable as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for Composable {
    const NAME: &'static str = "Namespace.Composable";
}
unsafe impl Send for Composable {}
unsafe impl Sync for Composable {}
pub trait IActivatable_Impl: Sized + windows_core::IUnknownImpl {
    fn Property(&self) -> windows_core::Result<i32>;
}
impl windows_core::RuntimeName for IActivatable {
    const NAME: &'static str = "Namespace.IActivatable";
}
impl IActivatable_Vtbl {
    pub const fn new<Identity: IActivatable_Impl, const OFFSET: isize>() -> IActivatable_Vtbl {
        unsafe extern "system" fn Property<Identity: IActivatable_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IActivatable_Impl::Property(this) {
                Ok(ok__) => {
                    result__.write(core::mem::transmute_copy(&ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IActivatable, OFFSET>(),
            Property: Property::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IActivatable as windows_core::Interface>::IID
    }
}
pub trait IActivatableFactory_Impl: Sized + windows_core::IUnknownImpl {
    fn CreateInstance(&self, arg: i32) -> windows_core::Result<Activatable>;
}
impl windows_core::RuntimeName for IActivatableFactory {
    const NAME: &'static str = "Namespace.IActivatableFactory";
}
impl IActivatableFactory_Vtbl {
    pub const fn new<Identity: IActivatableFactory_Impl, const OFFSET: isize>(
    ) -> IActivatableFactory_Vtbl {
        unsafe extern "system" fn CreateInstance<
            Identity: IActivatableFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            arg: i32,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IActivatableFactory_Impl::CreateInstance(this, arg) {
                Ok(ok__) => {
                    result__.write(core::mem::transmute_copy(&ok__));
                    core::mem::forget(ok__);
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IActivatableFactory, OFFSET>(),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IActivatableFactory as windows_core::Interface>::IID
    }
}
pub trait IComposable_Impl: Sized + windows_core::IUnknownImpl {
    fn Property(&self) -> windows_core::Result<i32>;
}
impl windows_core::RuntimeName for IComposable {
    const NAME: &'static str = "Namespace.IComposable";
}
impl IComposable_Vtbl {
    pub const fn new<Identity: IComposable_Impl, const OFFSET: isize>() -> IComposable_Vtbl {
        unsafe extern "system" fn Property<Identity: IComposable_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut i32,
        ) -> windows_core::HRESULT {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IComposable_Impl::Property(this) {
                Ok(ok__) => {
                    result__.write(core::mem::transmute_copy(&ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IComposable, OFFSET>(),
            Property: Property::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IComposable as windows_core::Interface>::IID
    }
}
pub trait IComposableFactory_Impl: Sized + windows_core::IUnknownImpl {
    fn CreateInstance(
        &self,
        arg: i32,
        baseinterface: Option<&windows_core::IInspectable>,
        innerinterface: &mut Option<windows_core::IInspectable>,
    ) -> windows_core::Result<Composable>;
}
impl windows_core::RuntimeName for IComposableFactory {
    const NAME: &'static str = "Namespace.IComposableFactory";
}
impl IComposableFactory_Vtbl {
    pub const fn new<Identity: IComposableFactory_Impl, const OFFSET: isize>(
    ) -> IComposableFactory_Vtbl {
        unsafe extern "system" fn CreateInstance<
            Identity: IComposableFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            arg: i32,
            baseinterface: *mut core::ffi::c_void,
            innerinterface: *mut *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IComposableFactory_Impl::CreateInstance(
                this,
                arg,
                windows_core::from_raw_borrowed(&baseinterface),
                core::mem::transmute_copy(&innerinterface),
            ) {
                Ok(ok__) => {
                    result__.write(core::mem::transmute_copy(&ok__));
                    core::mem::forget(ok__);
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IComposableFactory, OFFSET>(),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IComposableFactory as windows_core::Interface>::IID
    }
}
