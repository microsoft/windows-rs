// Bindings generated by `windows-bindgen` 0.58.0

#![allow(
    non_snake_case,
    non_upper_case_globals,
    non_camel_case_types,
    dead_code,
    clippy::all
)]
#[repr(transparent)]
#[derive(PartialEq, Eq, Debug, Clone)]
pub struct ComposableType(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    ComposableType,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl ComposableType {
    pub fn Value(&self) -> windows_core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Value)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
}
impl windows_core::RuntimeType for ComposableType {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IComposableType>();
}
unsafe impl windows_core::Interface for ComposableType {
    type Vtable = IComposableType_Vtbl;
    const IID: windows_core::GUID = <IComposableType as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for ComposableType {
    const NAME: &'static str = "Namespace.ComposableType";
}
unsafe impl Send for ComposableType {}
unsafe impl Sync for ComposableType {}
windows_core::imp::define_interface!(
    IComposableType,
    IComposableType_Vtbl,
    0x8583465c_7282_5258_8e5d_636440021879
);
impl windows_core::RuntimeType for IComposableType {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
#[repr(C)]
pub struct IComposableType_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Value: unsafe extern "system" fn(*mut core::ffi::c_void, *mut i32) -> windows_core::HRESULT,
}
