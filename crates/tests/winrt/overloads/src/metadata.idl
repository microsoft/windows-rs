namespace test_overloads {
    // `A` will have overloads generated by MIDLRT.

    runtimeclass A {
        A();
        Int32 Method();
        Int32 Method(Int32 a);
    }

    // `B` defines overloads explicitly.

    runtimeclass B {
        B();
        [method_name("MethodOne")] Int32 Method();
        [method_name("MethodTwo")] Int32 Method(Int32 a);
    }

    // `C` defines overloads explicitly but since they're just numeric suffixes they will be ignored
    // and windows-bindgen will generate contextually sensitive overloads.

    runtimeclass C {
        C();
        [method_name("Method123")] Int32 Method();
        [method_name("Method456")] Int32 Method(Int32 a);
    }

    // `D` implements two exclusive interfaces that have their overloads generated by MIDLRT but it doesn't
    // correctly deal with overloads in the context of the class so windows-bindgen will again generate
    // contextually sensitive overloads as with `C`.

    [exclusiveto(D)]
    interface ID {
        Int32 Method();
        Int32 Method(Int32 a);
    }
    [exclusiveto(D)]
    interface ID2 {
        Int32 Method(Int32 a, Int32 b);
        Int32 Method(Int32 a, Int32 b, Int32 c);
    }
    runtimeclass D: [default] ID, ID2 {
        D();
    }

    // `E` defines overloads explicitly and all is well.

    [exclusiveto(E)]
    interface IE {
        [method_name("MethodOne")] Int32 Method();
        [method_name("MethodTwo")] Int32 Method(Int32 a);
    }
    [exclusiveto(E)]
    interface IE2 {
        [method_name("MethodThree")] Int32 Method(Int32 a, Int32 b);
        [method_name("MethodFour")] Int32 Method(Int32 a, Int32 b, Int32 c);
    }
    runtimeclass E: [default] IE, IE2 {
        E();
    }
 }
