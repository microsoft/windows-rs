# [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DWebBridgeEventsImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DWebBridgeEventsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DWebBridgeEventsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DWebBridgeEventsVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DWebBridgeEvents < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispApplicationCacheImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispApplicationCacheVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispApplicationCacheImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispApplicationCacheVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispApplicationCache < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispCEventObjImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispCEventObjVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispCEventObjImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispCEventObjVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispCEventObj < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispCPluginsImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispCPluginsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispCPluginsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispCPluginsVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispCPlugins < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispCPrintManagerTemplatePrinterImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispCPrintManagerTemplatePrinterVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispCPrintManagerTemplatePrinterImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispCPrintManagerTemplatePrinterVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispCPrintManagerTemplatePrinter < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispCanvasGradientImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispCanvasGradientVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispCanvasGradientImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispCanvasGradientVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispCanvasGradient < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispCanvasImageDataImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispCanvasImageDataVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispCanvasImageDataImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispCanvasImageDataVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispCanvasImageData < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispCanvasPatternImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispCanvasPatternVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispCanvasPatternImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispCanvasPatternVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispCanvasPattern < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispCanvasRenderingContext2DImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispCanvasRenderingContext2DVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispCanvasRenderingContext2DImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispCanvasRenderingContext2DVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispCanvasRenderingContext2D < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispCanvasTextMetricsImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispCanvasTextMetricsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispCanvasTextMetricsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispCanvasTextMetricsVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispCanvasTextMetrics < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispDOMBeforeUnloadEventImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispDOMBeforeUnloadEventVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispDOMBeforeUnloadEventImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispDOMBeforeUnloadEventVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispDOMBeforeUnloadEvent < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispDOMChildrenCollectionImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispDOMChildrenCollectionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispDOMChildrenCollectionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispDOMChildrenCollectionVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispDOMChildrenCollection < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispDOMCloseEventImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispDOMCloseEventVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispDOMCloseEventImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispDOMCloseEventVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispDOMCloseEvent < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispDOMCompositionEventImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispDOMCompositionEventVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispDOMCompositionEventImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispDOMCompositionEventVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispDOMCompositionEvent < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispDOMCustomEventImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispDOMCustomEventVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispDOMCustomEventImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispDOMCustomEventVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispDOMCustomEvent < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispDOMDocumentTypeImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispDOMDocumentTypeVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispDOMDocumentTypeImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispDOMDocumentTypeVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispDOMDocumentType < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispDOMDragEventImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispDOMDragEventVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispDOMDragEventImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispDOMDragEventVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispDOMDragEvent < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispDOMEventImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispDOMEventVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispDOMEventImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispDOMEventVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispDOMEvent < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispDOMExceptionImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispDOMExceptionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispDOMExceptionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispDOMExceptionVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispDOMException < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispDOMFocusEventImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispDOMFocusEventVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispDOMFocusEventImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispDOMFocusEventVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispDOMFocusEvent < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispDOMKeyboardEventImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispDOMKeyboardEventVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispDOMKeyboardEventImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispDOMKeyboardEventVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispDOMKeyboardEvent < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispDOMMSAnimationEventImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispDOMMSAnimationEventVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispDOMMSAnimationEventImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispDOMMSAnimationEventVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispDOMMSAnimationEvent < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispDOMMSManipulationEventImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispDOMMSManipulationEventVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispDOMMSManipulationEventImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispDOMMSManipulationEventVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispDOMMSManipulationEvent < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispDOMMSTransitionEventImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispDOMMSTransitionEventVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispDOMMSTransitionEventImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispDOMMSTransitionEventVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispDOMMSTransitionEvent < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispDOMMessageEventImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispDOMMessageEventVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispDOMMessageEventImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispDOMMessageEventVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispDOMMessageEvent < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispDOMMouseEventImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispDOMMouseEventVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispDOMMouseEventImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispDOMMouseEventVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispDOMMouseEvent < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispDOMMouseWheelEventImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispDOMMouseWheelEventVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispDOMMouseWheelEventImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispDOMMouseWheelEventVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispDOMMouseWheelEvent < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispDOMMutationEventImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispDOMMutationEventVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispDOMMutationEventImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispDOMMutationEventVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispDOMMutationEvent < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispDOMParserImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispDOMParserVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispDOMParserImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispDOMParserVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispDOMParser < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispDOMProcessingInstructionImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispDOMProcessingInstructionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispDOMProcessingInstructionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispDOMProcessingInstructionVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispDOMProcessingInstruction < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispDOMProgressEventImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispDOMProgressEventVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispDOMProgressEventImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispDOMProgressEventVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispDOMProgressEvent < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispDOMSiteModeEventImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispDOMSiteModeEventVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispDOMSiteModeEventImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispDOMSiteModeEventVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispDOMSiteModeEvent < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispDOMStorageEventImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispDOMStorageEventVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispDOMStorageEventImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispDOMStorageEventVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispDOMStorageEvent < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispDOMTextEventImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispDOMTextEventVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispDOMTextEventImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispDOMTextEventVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispDOMTextEvent < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispDOMUIEventImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispDOMUIEventVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispDOMUIEventImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispDOMUIEventVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispDOMUIEvent < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispDOMWheelEventImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispDOMWheelEventVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispDOMWheelEventImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispDOMWheelEventVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispDOMWheelEvent < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispEventExceptionImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispEventExceptionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispEventExceptionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispEventExceptionVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispEventException < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTCAttachBehaviorImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTCAttachBehaviorVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTCAttachBehaviorImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTCAttachBehaviorVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTCAttachBehavior < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTCDefaultDispatchImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTCDefaultDispatchVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTCDefaultDispatchImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTCDefaultDispatchVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTCDefaultDispatch < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTCDescBehaviorImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTCDescBehaviorVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTCDescBehaviorImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTCDescBehaviorVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTCDescBehavior < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTCEventBehaviorImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTCEventBehaviorVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTCEventBehaviorImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTCEventBehaviorVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTCEventBehavior < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTCMethodBehaviorImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTCMethodBehaviorVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTCMethodBehaviorImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTCMethodBehaviorVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTCMethodBehavior < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTCPropertyBehaviorImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTCPropertyBehaviorVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTCPropertyBehaviorImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTCPropertyBehaviorVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTCPropertyBehavior < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLAnchorElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLAnchorElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLAnchorElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLAnchorElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLAnchorElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLAppBehaviorImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLAppBehaviorVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLAppBehaviorImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLAppBehaviorVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLAppBehavior < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLAreaElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLAreaElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLAreaElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLAreaElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLAreaElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLAreasCollectionImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLAreasCollectionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLAreasCollectionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLAreasCollectionVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLAreasCollection < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLAttributeCollectionImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLAttributeCollectionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLAttributeCollectionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLAttributeCollectionVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLAttributeCollection < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLAudioElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLAudioElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLAudioElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLAudioElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLAudioElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLBGsoundImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLBGsoundVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLBGsoundImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLBGsoundVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLBGsound < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLBRElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLBRElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLBRElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLBRElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLBRElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLBaseElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLBaseElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLBaseElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLBaseElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLBaseElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLBaseFontElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLBaseFontElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLBaseFontElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLBaseFontElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLBaseFontElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLBlockElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLBlockElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLBlockElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLBlockElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLBlockElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLBodyImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLBodyVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLBodyImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLBodyVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLBody < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLButtonElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLButtonElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLButtonElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLButtonElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLButtonElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLCSSImportRuleImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLCSSImportRuleVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLCSSImportRuleImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLCSSImportRuleVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLCSSImportRule < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLCSSMediaListImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLCSSMediaListVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLCSSMediaListImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLCSSMediaListVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLCSSMediaList < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLCSSMediaRuleImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLCSSMediaRuleVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLCSSMediaRuleImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLCSSMediaRuleVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLCSSMediaRule < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLCSSNamespaceRuleImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLCSSNamespaceRuleVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLCSSNamespaceRuleImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLCSSNamespaceRuleVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLCSSNamespaceRule < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLCSSRuleImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLCSSRuleVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLCSSRuleImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLCSSRuleVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLCSSRule < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLCSSStyleDeclarationImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLCSSStyleDeclarationVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLCSSStyleDeclarationImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLCSSStyleDeclarationVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLCSSStyleDeclaration < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLCanvasElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLCanvasElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLCanvasElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLCanvasElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLCanvasElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLCommentElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLCommentElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLCommentElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLCommentElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLCommentElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLCurrentStyleImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLCurrentStyleVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLCurrentStyleImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLCurrentStyleVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLCurrentStyle < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLDDElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLDDElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLDDElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLDDElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLDDElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLDListElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLDListElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLDListElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLDListElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLDListElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLDOMAttributeImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLDOMAttributeVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLDOMAttributeImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLDOMAttributeVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLDOMAttribute < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLDOMImplementationImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLDOMImplementationVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLDOMImplementationImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLDOMImplementationVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLDOMImplementation < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLDOMRangeImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLDOMRangeVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLDOMRangeImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLDOMRangeVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLDOMRange < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLDOMTextNodeImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLDOMTextNodeVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLDOMTextNodeImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLDOMTextNodeVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLDOMTextNode < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLDTElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLDTElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLDTElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLDTElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLDTElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLDefaultsImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLDefaultsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLDefaultsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLDefaultsVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLDefaults < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLDivElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLDivElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLDivElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLDivElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLDivElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLDivPositionImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLDivPositionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLDivPositionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLDivPositionVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLDivPosition < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLDocumentImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLDocumentVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLDocumentImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLDocumentVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLDocument < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLDocumentCompatibleInfoImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLDocumentCompatibleInfoVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLDocumentCompatibleInfoImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLDocumentCompatibleInfoVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLDocumentCompatibleInfo < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLDocumentCompatibleInfoCollectionImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLDocumentCompatibleInfoCollectionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLDocumentCompatibleInfoCollectionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLDocumentCompatibleInfoCollectionVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLDocumentCompatibleInfoCollection < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLElementCollectionImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLElementCollectionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLElementCollectionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLElementCollectionVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLElementCollection < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLEmbedImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLEmbedVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLEmbedImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLEmbedVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLEmbed < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLFieldSetElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLFieldSetElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLFieldSetElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLFieldSetElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLFieldSetElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLFontElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLFontElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLFontElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLFontElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLFontElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLFormElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLFormElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLFormElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLFormElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLFormElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLFrameBaseImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLFrameBaseVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLFrameBaseImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLFrameBaseVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLFrameBase < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLFrameElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLFrameElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLFrameElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLFrameElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLFrameElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLFrameSetSiteImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLFrameSetSiteVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLFrameSetSiteImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLFrameSetSiteVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLFrameSetSite < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLGenericElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLGenericElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLGenericElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLGenericElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLGenericElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLHRElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLHRElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLHRElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLHRElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLHRElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLHeadElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLHeadElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLHeadElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLHeadElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLHeadElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLHeaderElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLHeaderElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLHeaderElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLHeaderElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLHeaderElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLHistoryImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLHistoryVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLHistoryImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLHistoryVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLHistory < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLHtmlElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLHtmlElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLHtmlElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLHtmlElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLHtmlElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLIFrameImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLIFrameVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLIFrameImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLIFrameVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLIFrame < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLImgImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLImgVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLImgImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLImgVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLImg < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLInputElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLInputElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLInputElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLInputElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLInputElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLIsIndexElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLIsIndexElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLIsIndexElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLIsIndexElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLIsIndexElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLLIElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLLIElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLLIElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLLIElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLLIElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLLabelElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLLabelElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLLabelElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLLabelElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLLabelElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLLegendElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLLegendElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLLegendElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLLegendElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLLegendElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLLinkElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLLinkElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLLinkElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLLinkElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLLinkElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLListElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLListElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLListElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLListElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLListElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLLocationImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLLocationVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLLocationImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLLocationVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLLocation < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLMSCSSKeyframeRuleImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLMSCSSKeyframeRuleVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLMSCSSKeyframeRuleImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLMSCSSKeyframeRuleVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLMSCSSKeyframeRule < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLMSCSSKeyframesRuleImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLMSCSSKeyframesRuleVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLMSCSSKeyframesRuleImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLMSCSSKeyframesRuleVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLMSCSSKeyframesRule < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLMapElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLMapElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLMapElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLMapElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLMapElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLMarqueeElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLMarqueeElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLMarqueeElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLMarqueeElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLMarqueeElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLMediaElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLMediaElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLMediaElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLMediaElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLMediaElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLMediaErrorImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLMediaErrorVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLMediaErrorImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLMediaErrorVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLMediaError < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLMetaElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLMetaElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLMetaElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLMetaElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLMetaElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLNamespaceImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLNamespaceVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLNamespaceImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLNamespaceVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLNamespace < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLNamespaceCollectionImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLNamespaceCollectionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLNamespaceCollectionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLNamespaceCollectionVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLNamespaceCollection < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLNavigatorImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLNavigatorVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLNavigatorImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLNavigatorVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLNavigator < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLNextIdElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLNextIdElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLNextIdElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLNextIdElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLNextIdElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLNoShowElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLNoShowElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLNoShowElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLNoShowElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLNoShowElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLOListElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLOListElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLOListElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLOListElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLOListElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLObjectElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLObjectElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLObjectElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLObjectElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLObjectElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLOptionElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLOptionElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLOptionElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLOptionElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLOptionElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLParaElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLParaElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLParaElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLParaElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLParaElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLParamElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLParamElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLParamElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLParamElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLParamElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLPerformanceImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLPerformanceVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLPerformanceImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLPerformanceVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLPerformance < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLPerformanceNavigationImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLPerformanceNavigationVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLPerformanceNavigationImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLPerformanceNavigationVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLPerformanceNavigation < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLPerformanceTimingImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLPerformanceTimingVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLPerformanceTimingImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLPerformanceTimingVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLPerformanceTiming < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLPhraseElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLPhraseElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLPhraseElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLPhraseElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLPhraseElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLPopupImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLPopupVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLPopupImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLPopupVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLPopup < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLProgressElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLProgressElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLProgressElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLProgressElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLProgressElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLRenderStyleImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLRenderStyleVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLRenderStyleImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLRenderStyleVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLRenderStyle < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLRichtextElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLRichtextElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLRichtextElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLRichtextElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLRichtextElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLRuleStyleImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLRuleStyleVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLRuleStyleImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLRuleStyleVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLRuleStyle < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLScreenImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLScreenVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLScreenImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLScreenVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLScreen < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLScriptElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLScriptElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLScriptElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLScriptElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLScriptElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLSelectElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLSelectElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLSelectElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLSelectElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLSelectElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLSemanticElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLSemanticElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLSemanticElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLSemanticElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLSemanticElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLSourceElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLSourceElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLSourceElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLSourceElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLSourceElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLSpanElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLSpanElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLSpanElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLSpanElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLSpanElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLSpanFlowImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLSpanFlowVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLSpanFlowImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLSpanFlowVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLSpanFlow < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLStorageImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLStorageVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLStorageImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLStorageVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLStorage < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLStyleImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLStyleVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLStyleImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLStyleVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLStyle < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLStyleElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLStyleElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLStyleElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLStyleElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLStyleElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLStyleFontFaceImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLStyleFontFaceVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLStyleFontFaceImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLStyleFontFaceVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLStyleFontFace < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLStyleMediaImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLStyleMediaVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLStyleMediaImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLStyleMediaVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLStyleMedia < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLStyleSheetImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLStyleSheetVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLStyleSheetImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLStyleSheetVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLStyleSheet < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLStyleSheetPageImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLStyleSheetPageVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLStyleSheetPageImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLStyleSheetPageVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLStyleSheetPage < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLStyleSheetPagesCollectionImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLStyleSheetPagesCollectionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLStyleSheetPagesCollectionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLStyleSheetPagesCollectionVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLStyleSheetPagesCollection < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLStyleSheetRuleImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLStyleSheetRuleVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLStyleSheetRuleImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLStyleSheetRuleVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLStyleSheetRule < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLStyleSheetRulesAppliedCollectionImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLStyleSheetRulesAppliedCollectionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLStyleSheetRulesAppliedCollectionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLStyleSheetRulesAppliedCollectionVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLStyleSheetRulesAppliedCollection < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLStyleSheetRulesCollectionImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLStyleSheetRulesCollectionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLStyleSheetRulesCollectionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLStyleSheetRulesCollectionVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLStyleSheetRulesCollection < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLStyleSheetsCollectionImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLStyleSheetsCollectionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLStyleSheetsCollectionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLStyleSheetsCollectionVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLStyleSheetsCollection < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLTableImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLTableVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLTableImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLTableVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLTable < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLTableCaptionImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLTableCaptionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLTableCaptionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLTableCaptionVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLTableCaption < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLTableCellImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLTableCellVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLTableCellImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLTableCellVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLTableCell < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLTableColImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLTableColVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLTableColImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLTableColVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLTableCol < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLTableRowImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLTableRowVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLTableRowImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLTableRowVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLTableRow < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLTableSectionImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLTableSectionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLTableSectionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLTableSectionVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLTableSection < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLTextAreaElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLTextAreaElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLTextAreaElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLTextAreaElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLTextAreaElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLTextElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLTextElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLTextElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLTextElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLTextElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLTimeRangesImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLTimeRangesVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLTimeRangesImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLTimeRangesVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLTimeRanges < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLTitleElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLTitleElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLTitleElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLTitleElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLTitleElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLUListElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLUListElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLUListElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLUListElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLUListElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLUnknownElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLUnknownElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLUnknownElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLUnknownElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLUnknownElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLUrnCollectionImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLUrnCollectionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLUrnCollectionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLUrnCollectionVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLUrnCollection < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLVideoElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLVideoElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLVideoElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLVideoElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLVideoElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLW3CComputedStyleImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLW3CComputedStyleVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLW3CComputedStyleImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLW3CComputedStyleVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLW3CComputedStyle < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLWindow2Impl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLWindow2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLWindow2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLWindow2Vtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLWindow2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLWindowProxyImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLWindowProxyVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLWindowProxyImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLWindowProxyVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLWindowProxy < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLWndOptionElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLWndOptionElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLWndOptionElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLWndOptionElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLWndOptionElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLWndSelectElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLWndSelectElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLWndSelectElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLWndSelectElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLWndSelectElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispHTMLXMLHttpRequestImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispHTMLXMLHttpRequestVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispHTMLXMLHttpRequestImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispHTMLXMLHttpRequestVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispHTMLXMLHttpRequest < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispIHTMLInputButtonElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispIHTMLInputButtonElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispIHTMLInputButtonElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispIHTMLInputButtonElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispIHTMLInputButtonElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispIHTMLInputFileElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispIHTMLInputFileElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispIHTMLInputFileElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispIHTMLInputFileElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispIHTMLInputFileElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispIHTMLInputImageImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispIHTMLInputImageVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispIHTMLInputImageImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispIHTMLInputImageVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispIHTMLInputImage < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispIHTMLInputTextElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispIHTMLInputTextElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispIHTMLInputTextElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispIHTMLInputTextElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispIHTMLInputTextElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispIHTMLOptionButtonElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispIHTMLOptionButtonElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispIHTMLOptionButtonElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispIHTMLOptionButtonElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispIHTMLOptionButtonElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispNodeIteratorImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispNodeIteratorVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispNodeIteratorImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispNodeIteratorVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispNodeIterator < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispRangeExceptionImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispRangeExceptionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispRangeExceptionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispRangeExceptionVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispRangeException < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispRulesAppliedImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispRulesAppliedVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispRulesAppliedImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispRulesAppliedVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispRulesApplied < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispRulesAppliedCollectionImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispRulesAppliedCollectionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispRulesAppliedCollectionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispRulesAppliedCollectionVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispRulesAppliedCollection < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGAElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGAElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGAElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGAElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGAElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGCircleElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGCircleElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGCircleElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGCircleElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGCircleElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGClipPathElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGClipPathElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGClipPathElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGClipPathElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGClipPathElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGDefsElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGDefsElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGDefsElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGDefsElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGDefsElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGDescElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGDescElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGDescElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGDescElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGDescElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGElementInstanceImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGElementInstanceVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGElementInstanceImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGElementInstanceVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGElementInstance < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGElementInstanceListImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGElementInstanceListVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGElementInstanceListImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGElementInstanceListVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGElementInstanceList < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGEllipseElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGEllipseElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGEllipseElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGEllipseElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGEllipseElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGExceptionImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGExceptionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGExceptionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGExceptionVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGException < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGGElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGGElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGGElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGGElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGGElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGGradientElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGGradientElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGGradientElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGGradientElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGGradientElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGImageElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGImageElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGImageElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGImageElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGImageElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGLineElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGLineElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGLineElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGLineElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGLineElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGLinearGradientElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGLinearGradientElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGLinearGradientElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGLinearGradientElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGLinearGradientElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGMarkerElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGMarkerElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGMarkerElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGMarkerElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGMarkerElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGMaskElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGMaskElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGMaskElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGMaskElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGMaskElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGMetadataElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGMetadataElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGMetadataElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGMetadataElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGMetadataElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGPathElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGPathElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGPathElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGPathElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGPathElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGPathSegArcAbsImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGPathSegArcAbsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGPathSegArcAbsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGPathSegArcAbsVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGPathSegArcAbs < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGPathSegArcRelImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGPathSegArcRelVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGPathSegArcRelImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGPathSegArcRelVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGPathSegArcRel < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGPathSegClosePathImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGPathSegClosePathVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGPathSegClosePathImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGPathSegClosePathVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGPathSegClosePath < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGPathSegCurvetoCubicAbsImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGPathSegCurvetoCubicAbsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGPathSegCurvetoCubicAbsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGPathSegCurvetoCubicAbsVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGPathSegCurvetoCubicAbs < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGPathSegCurvetoCubicRelImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGPathSegCurvetoCubicRelVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGPathSegCurvetoCubicRelImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGPathSegCurvetoCubicRelVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGPathSegCurvetoCubicRel < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGPathSegCurvetoCubicSmoothAbsImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGPathSegCurvetoCubicSmoothAbsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGPathSegCurvetoCubicSmoothAbsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGPathSegCurvetoCubicSmoothAbsVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGPathSegCurvetoCubicSmoothAbs < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGPathSegCurvetoCubicSmoothRelImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGPathSegCurvetoCubicSmoothRelVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGPathSegCurvetoCubicSmoothRelImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGPathSegCurvetoCubicSmoothRelVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGPathSegCurvetoCubicSmoothRel < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGPathSegCurvetoQuadraticAbsImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGPathSegCurvetoQuadraticAbsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGPathSegCurvetoQuadraticAbsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGPathSegCurvetoQuadraticAbsVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGPathSegCurvetoQuadraticAbs < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGPathSegCurvetoQuadraticRelImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGPathSegCurvetoQuadraticRelVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGPathSegCurvetoQuadraticRelImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGPathSegCurvetoQuadraticRelVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGPathSegCurvetoQuadraticRel < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGPathSegCurvetoQuadraticSmoothAbsImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGPathSegCurvetoQuadraticSmoothAbsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGPathSegCurvetoQuadraticSmoothAbsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGPathSegCurvetoQuadraticSmoothAbsVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGPathSegCurvetoQuadraticSmoothAbs < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGPathSegCurvetoQuadraticSmoothRelImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGPathSegCurvetoQuadraticSmoothRelVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGPathSegCurvetoQuadraticSmoothRelImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGPathSegCurvetoQuadraticSmoothRelVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGPathSegCurvetoQuadraticSmoothRel < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGPathSegLinetoAbsImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGPathSegLinetoAbsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGPathSegLinetoAbsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGPathSegLinetoAbsVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGPathSegLinetoAbs < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGPathSegLinetoHorizontalAbsImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGPathSegLinetoHorizontalAbsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGPathSegLinetoHorizontalAbsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGPathSegLinetoHorizontalAbsVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGPathSegLinetoHorizontalAbs < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGPathSegLinetoHorizontalRelImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGPathSegLinetoHorizontalRelVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGPathSegLinetoHorizontalRelImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGPathSegLinetoHorizontalRelVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGPathSegLinetoHorizontalRel < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGPathSegLinetoRelImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGPathSegLinetoRelVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGPathSegLinetoRelImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGPathSegLinetoRelVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGPathSegLinetoRel < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGPathSegLinetoVerticalAbsImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGPathSegLinetoVerticalAbsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGPathSegLinetoVerticalAbsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGPathSegLinetoVerticalAbsVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGPathSegLinetoVerticalAbs < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGPathSegLinetoVerticalRelImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGPathSegLinetoVerticalRelVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGPathSegLinetoVerticalRelImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGPathSegLinetoVerticalRelVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGPathSegLinetoVerticalRel < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGPathSegMovetoAbsImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGPathSegMovetoAbsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGPathSegMovetoAbsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGPathSegMovetoAbsVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGPathSegMovetoAbs < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGPathSegMovetoRelImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGPathSegMovetoRelVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGPathSegMovetoRelImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGPathSegMovetoRelVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGPathSegMovetoRel < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGPatternElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGPatternElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGPatternElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGPatternElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGPatternElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGPolygonElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGPolygonElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGPolygonElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGPolygonElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGPolygonElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGPolylineElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGPolylineElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGPolylineElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGPolylineElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGPolylineElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGRadialGradientElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGRadialGradientElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGRadialGradientElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGRadialGradientElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGRadialGradientElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGRectElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGRectElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGRectElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGRectElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGRectElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGSVGElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGSVGElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGSVGElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGSVGElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGSVGElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGScriptElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGScriptElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGScriptElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGScriptElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGScriptElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGStopElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGStopElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGStopElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGStopElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGStopElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGStyleElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGStyleElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGStyleElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGStyleElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGStyleElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGSwitchElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGSwitchElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGSwitchElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGSwitchElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGSwitchElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGSymbolElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGSymbolElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGSymbolElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGSymbolElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGSymbolElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGTSpanElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGTSpanElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGTSpanElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGTSpanElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGTSpanElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGTextContentElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGTextContentElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGTextContentElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGTextContentElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGTextContentElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGTextElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGTextElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGTextElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGTextElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGTextElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGTextPathElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGTextPathElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGTextPathElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGTextPathElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGTextPathElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGTextPositioningElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGTextPositioningElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGTextPositioningElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGTextPositioningElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGTextPositioningElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGTitleElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGTitleElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGTitleElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGTitleElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGTitleElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGUseElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGUseElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGUseElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGUseElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGUseElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGViewElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGViewElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGViewElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGViewElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGViewElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispSVGZoomEventImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispSVGZoomEventVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispSVGZoomEventImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispSVGZoomEventVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispSVGZoomEvent < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispStaticNodeListImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispStaticNodeListVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispStaticNodeListImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispStaticNodeListVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispStaticNodeList < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispTreeWalkerImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispTreeWalkerVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispTreeWalkerImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispTreeWalkerVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispTreeWalker < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispWebGeocoordinatesImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispWebGeocoordinatesVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispWebGeocoordinatesImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispWebGeocoordinatesVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispWebGeocoordinates < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispWebGeolocationImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispWebGeolocationVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispWebGeolocationImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispWebGeolocationVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispWebGeolocation < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispWebGeopositionImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispWebGeopositionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispWebGeopositionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispWebGeopositionVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispWebGeoposition < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispWebGeopositionErrorImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispWebGeopositionErrorVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispWebGeopositionErrorImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispWebGeopositionErrorVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispWebGeopositionError < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispXDomainRequestImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispXDomainRequestVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispXDomainRequestImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispXDomainRequestVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispXDomainRequest < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispXMLHttpRequestEventTargetImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispXMLHttpRequestEventTargetVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispXMLHttpRequestEventTargetImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispXMLHttpRequestEventTargetVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispXMLHttpRequestEventTarget < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DispXMLSerializerImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DispXMLSerializerVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DispXMLSerializerImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DispXMLSerializerVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DispXMLSerializer < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLAnchorEventsImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLAnchorEventsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLAnchorEventsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLAnchorEventsVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLAnchorEvents < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLAnchorEvents2Impl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLAnchorEvents2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLAnchorEvents2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLAnchorEvents2Vtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLAnchorEvents2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLAreaEventsImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLAreaEventsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLAreaEventsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLAreaEventsVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLAreaEvents < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLAreaEvents2Impl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLAreaEvents2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLAreaEvents2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLAreaEvents2Vtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLAreaEvents2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLButtonElementEventsImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLButtonElementEventsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLButtonElementEventsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLButtonElementEventsVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLButtonElementEvents < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLButtonElementEvents2Impl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLButtonElementEvents2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLButtonElementEvents2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLButtonElementEvents2Vtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLButtonElementEvents2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLControlElementEventsImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLControlElementEventsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLControlElementEventsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLControlElementEventsVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLControlElementEvents < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLControlElementEvents2Impl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLControlElementEvents2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLControlElementEvents2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLControlElementEvents2Vtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLControlElementEvents2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLDocumentEventsImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLDocumentEventsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLDocumentEventsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLDocumentEventsVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLDocumentEvents < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLDocumentEvents2Impl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLDocumentEvents2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLDocumentEvents2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLDocumentEvents2Vtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLDocumentEvents2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLDocumentEvents3Impl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLDocumentEvents3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLDocumentEvents3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLDocumentEvents3Vtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLDocumentEvents3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLDocumentEvents4Impl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLDocumentEvents4Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLDocumentEvents4Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLDocumentEvents4Vtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLDocumentEvents4 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLElementEventsImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLElementEventsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLElementEventsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLElementEventsVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLElementEvents < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLElementEvents2Impl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLElementEvents2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLElementEvents2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLElementEvents2Vtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLElementEvents2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLElementEvents3Impl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLElementEvents3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLElementEvents3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLElementEvents3Vtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLElementEvents3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLElementEvents4Impl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLElementEvents4Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLElementEvents4Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLElementEvents4Vtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLElementEvents4 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLFormElementEventsImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLFormElementEventsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLFormElementEventsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLFormElementEventsVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLFormElementEvents < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLFormElementEvents2Impl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLFormElementEvents2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLFormElementEvents2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLFormElementEvents2Vtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLFormElementEvents2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLFrameSiteEventsImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLFrameSiteEventsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLFrameSiteEventsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLFrameSiteEventsVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLFrameSiteEvents < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLFrameSiteEvents2Impl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLFrameSiteEvents2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLFrameSiteEvents2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLFrameSiteEvents2Vtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLFrameSiteEvents2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLImgEventsImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLImgEventsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLImgEventsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLImgEventsVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLImgEvents < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLImgEvents2Impl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLImgEvents2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLImgEvents2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLImgEvents2Vtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLImgEvents2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLInputFileElementEventsImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLInputFileElementEventsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLInputFileElementEventsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLInputFileElementEventsVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLInputFileElementEvents < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLInputFileElementEvents2Impl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLInputFileElementEvents2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLInputFileElementEvents2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLInputFileElementEvents2Vtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLInputFileElementEvents2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLInputImageEventsImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLInputImageEventsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLInputImageEventsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLInputImageEventsVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLInputImageEvents < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLInputImageEvents2Impl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLInputImageEvents2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLInputImageEvents2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLInputImageEvents2Vtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLInputImageEvents2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLInputTextElementEventsImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLInputTextElementEventsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLInputTextElementEventsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLInputTextElementEventsVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLInputTextElementEvents < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLInputTextElementEvents2Impl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLInputTextElementEvents2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLInputTextElementEvents2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLInputTextElementEvents2Vtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLInputTextElementEvents2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLLabelEventsImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLLabelEventsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLLabelEventsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLLabelEventsVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLLabelEvents < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLLabelEvents2Impl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLLabelEvents2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLLabelEvents2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLLabelEvents2Vtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLLabelEvents2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLLinkElementEventsImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLLinkElementEventsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLLinkElementEventsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLLinkElementEventsVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLLinkElementEvents < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLLinkElementEvents2Impl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLLinkElementEvents2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLLinkElementEvents2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLLinkElementEvents2Vtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLLinkElementEvents2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLMapEventsImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLMapEventsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLMapEventsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLMapEventsVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLMapEvents < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLMapEvents2Impl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLMapEvents2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLMapEvents2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLMapEvents2Vtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLMapEvents2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLMarqueeElementEventsImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLMarqueeElementEventsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLMarqueeElementEventsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLMarqueeElementEventsVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLMarqueeElementEvents < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLMarqueeElementEvents2Impl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLMarqueeElementEvents2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLMarqueeElementEvents2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLMarqueeElementEvents2Vtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLMarqueeElementEvents2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLNamespaceEventsImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLNamespaceEventsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLNamespaceEventsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLNamespaceEventsVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLNamespaceEvents < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLObjectElementEventsImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLObjectElementEventsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLObjectElementEventsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLObjectElementEventsVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLObjectElementEvents < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLObjectElementEvents2Impl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLObjectElementEvents2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLObjectElementEvents2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLObjectElementEvents2Vtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLObjectElementEvents2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLOptionButtonElementEventsImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLOptionButtonElementEventsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLOptionButtonElementEventsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLOptionButtonElementEventsVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLOptionButtonElementEvents < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLOptionButtonElementEvents2Impl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLOptionButtonElementEvents2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLOptionButtonElementEvents2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLOptionButtonElementEvents2Vtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLOptionButtonElementEvents2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLScriptEventsImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLScriptEventsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLScriptEventsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLScriptEventsVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLScriptEvents < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLScriptEvents2Impl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLScriptEvents2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLScriptEvents2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLScriptEvents2Vtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLScriptEvents2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLSelectElementEventsImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLSelectElementEventsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLSelectElementEventsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLSelectElementEventsVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLSelectElementEvents < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLSelectElementEvents2Impl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLSelectElementEvents2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLSelectElementEvents2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLSelectElementEvents2Vtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLSelectElementEvents2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLStyleElementEventsImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLStyleElementEventsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLStyleElementEventsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLStyleElementEventsVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLStyleElementEvents < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLStyleElementEvents2Impl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLStyleElementEvents2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLStyleElementEvents2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLStyleElementEvents2Vtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLStyleElementEvents2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLTableEventsImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLTableEventsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLTableEventsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLTableEventsVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLTableEvents < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLTableEvents2Impl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLTableEvents2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLTableEvents2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLTableEvents2Vtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLTableEvents2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLTextContainerEventsImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLTextContainerEventsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLTextContainerEventsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLTextContainerEventsVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLTextContainerEvents < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLTextContainerEvents2Impl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLTextContainerEvents2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLTextContainerEvents2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLTextContainerEvents2Vtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLTextContainerEvents2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLWindowEventsImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLWindowEventsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLWindowEventsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLWindowEventsVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLWindowEvents < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLWindowEvents2Impl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLWindowEvents2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLWindowEvents2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLWindowEvents2Vtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLWindowEvents2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLWindowEvents3Impl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLWindowEvents3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLWindowEvents3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLWindowEvents3Vtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLWindowEvents3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait HTMLXMLHttpRequestEventsImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > HTMLXMLHttpRequestEventsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : HTMLXMLHttpRequestEventsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> HTMLXMLHttpRequestEventsVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < HTMLXMLHttpRequestEvents < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IActiveXUIHandlerSiteImpl < > : Sized where { fn CreateScrollableContextMenu ( ) ; fn PickFileAndGetResult ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IActiveXUIHandlerSiteVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IActiveXUIHandlerSiteImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IActiveXUIHandlerSiteVtbl < > { unsafe extern "system" fn CreateScrollableContextMenu < Impl : IActiveXUIHandlerSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , scrollablecontextmenu : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PickFileAndGetResult < Impl : IActiveXUIHandlerSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , filepicker : * mut :: core :: ffi :: c_void , allowmultipleselections : super::super::Foundation:: BOOL , result : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , CreateScrollableContextMenu : CreateScrollableContextMenu :: < Impl , IMPL_OFFSET > , PickFileAndGetResult : PickFileAndGetResult :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IActiveXUIHandlerSite < > as :: windows :: core :: Interface > :: IID } } pub trait IActiveXUIHandlerSite2Impl < > : Sized where { fn AddSuspensionExemption ( ) ; fn RemoveSuspensionExemption ( ) ; } impl < > IActiveXUIHandlerSite2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IActiveXUIHandlerSite2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IActiveXUIHandlerSite2Vtbl < > { unsafe extern "system" fn AddSuspensionExemption < Impl : IActiveXUIHandlerSite2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pullcookie : * mut u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RemoveSuspensionExemption < Impl : IActiveXUIHandlerSite2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ullcookie : u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , AddSuspensionExemption : AddSuspensionExemption :: < Impl , IMPL_OFFSET > , RemoveSuspensionExemption : RemoveSuspensionExemption :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IActiveXUIHandlerSite2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IActiveXUIHandlerSite3Impl < > : Sized where { fn MessageBoxW ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IActiveXUIHandlerSite3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IActiveXUIHandlerSite3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IActiveXUIHandlerSite3Vtbl < > { unsafe extern "system" fn MessageBoxW < Impl : IActiveXUIHandlerSite3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwnd : super::super::Foundation:: HWND , text : super::super::Foundation:: PWSTR , caption : super::super::Foundation:: PWSTR , r#type : u32 , result : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , MessageBoxW : MessageBoxW :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IActiveXUIHandlerSite3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IAnchorClickImpl < > : Sized + IDispatchImpl where { fn ProcOnClick ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IAnchorClickVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAnchorClickImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAnchorClickVtbl < > { unsafe extern "system" fn ProcOnClick < Impl : IAnchorClickImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , ProcOnClick : ProcOnClick :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAnchorClick < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IAudioSessionSiteImpl < > : Sized where { fn GetAudioSessionGuid ( ) ; fn OnAudioStreamCreated ( ) ; fn OnAudioStreamDestroyed ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IAudioSessionSiteVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAudioSessionSiteImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAudioSessionSiteVtbl < > { unsafe extern "system" fn GetAudioSessionGuid < Impl : IAudioSessionSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , audiosessionguid : * mut :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnAudioStreamCreated < Impl : IAudioSessionSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , endpointid : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnAudioStreamDestroyed < Impl : IAudioSessionSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , endpointid : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetAudioSessionGuid : GetAudioSessionGuid :: < Impl , IMPL_OFFSET > , OnAudioStreamCreated : OnAudioStreamCreated :: < Impl , IMPL_OFFSET > , OnAudioStreamDestroyed : OnAudioStreamDestroyed :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAudioSessionSite < > as :: windows :: core :: Interface > :: IID } } pub trait IBFCacheableImpl < > : Sized where { fn EnterBFCache ( ) ; fn ExitBFCache ( ) ; } impl < > IBFCacheableVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IBFCacheableImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IBFCacheableVtbl < > { unsafe extern "system" fn EnterBFCache < Impl : IBFCacheableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ExitBFCache < Impl : IBFCacheableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , EnterBFCache : EnterBFCache :: < Impl , IMPL_OFFSET > , ExitBFCache : ExitBFCache :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IBFCacheable < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IBlockFormatsImpl < > : Sized + IDispatchImpl where { fn _NewEnum ( ) ; fn Count ( ) ; fn Item ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IBlockFormatsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IBlockFormatsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IBlockFormatsVtbl < > { unsafe extern "system" fn _NewEnum < Impl : IBlockFormatsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Count < Impl : IBlockFormatsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Item < Impl : IBlockFormatsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarindex : * const super::super::System::Com:: VARIANT , pbstrblockformat : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , _NewEnum : _NewEnum :: < Impl , IMPL_OFFSET > , Count : Count :: < Impl , IMPL_OFFSET > , Item : Item :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IBlockFormats < > as :: windows :: core :: Interface > :: IID } } pub trait ICSSFilterImpl < > : Sized where { fn SetSite ( ) ; fn OnAmbientPropertyChange ( ) ; } impl < > ICSSFilterVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ICSSFilterImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ICSSFilterVtbl < > { unsafe extern "system" fn SetSite < Impl : ICSSFilterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psink : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnAmbientPropertyChange < Impl : ICSSFilterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dispid : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetSite : SetSite :: < Impl , IMPL_OFFSET > , OnAmbientPropertyChange : OnAmbientPropertyChange :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ICSSFilter < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_System_Com" ) ] pub trait ICSSFilterSiteImpl < > : Sized where { fn GetElement ( ) ; fn FireOnFilterChangeEvent ( ) ; } # [ cfg ( feature ="Win32_System_Com" ) ] impl < > ICSSFilterSiteVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ICSSFilterSiteImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ICSSFilterSiteVtbl < > { unsafe extern "system" fn GetElement < Impl : ICSSFilterSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , element : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn FireOnFilterChangeEvent < Impl : ICSSFilterSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetElement : GetElement :: < Impl , IMPL_OFFSET > , FireOnFilterChangeEvent : FireOnFilterChangeEvent :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ICSSFilterSite < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ICanvasGradientImpl < > : Sized + IDispatchImpl where { fn addColorStop ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ICanvasGradientVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ICanvasGradientImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ICanvasGradientVtbl < > { unsafe extern "system" fn addColorStop < Impl : ICanvasGradientImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , offset : f32 , color : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , addColorStop : addColorStop :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ICanvasGradient < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ICanvasImageDataImpl < > : Sized + IDispatchImpl where { fn width ( ) ; fn height ( ) ; fn data ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ICanvasImageDataVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ICanvasImageDataImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ICanvasImageDataVtbl < > { unsafe extern "system" fn width < Impl : ICanvasImageDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn height < Impl : ICanvasImageDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn data < Impl : ICanvasImageDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , width : width :: < Impl , IMPL_OFFSET > , height : height :: < Impl , IMPL_OFFSET > , data : data :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ICanvasImageData < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ICanvasPatternImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ICanvasPatternVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ICanvasPatternImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ICanvasPatternVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ICanvasPattern < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ICanvasPixelArrayImpl < > : Sized + IDispatchImpl where { fn length ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ICanvasPixelArrayVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ICanvasPixelArrayImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ICanvasPixelArrayVtbl < > { unsafe extern "system" fn length < Impl : ICanvasPixelArrayImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , length : length :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ICanvasPixelArray < > as :: windows :: core :: Interface > :: IID } } pub trait ICanvasPixelArrayDataImpl < > : Sized where { fn GetBufferPointer ( ) ; } impl < > ICanvasPixelArrayDataVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ICanvasPixelArrayDataImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ICanvasPixelArrayDataVtbl < > { unsafe extern "system" fn GetBufferPointer < Impl : ICanvasPixelArrayDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppbuffer : * mut * mut u8 , pbufferlength : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetBufferPointer : GetBufferPointer :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ICanvasPixelArrayData < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ICanvasRenderingContext2DImpl < > : Sized + IDispatchImpl where { fn canvas ( ) ; fn restore ( ) ; fn save ( ) ; fn rotate ( ) ; fn scale ( ) ; fn setTransform ( ) ; fn transform ( ) ; fn translate ( ) ; fn SetglobalAlpha ( ) ; fn globalAlpha ( ) ; fn SetglobalCompositeOperation ( ) ; fn globalCompositeOperation ( ) ; fn SetfillStyle ( ) ; fn fillStyle ( ) ; fn SetstrokeStyle ( ) ; fn strokeStyle ( ) ; fn createLinearGradient ( ) ; fn createRadialGradient ( ) ; fn createPattern ( ) ; fn SetlineCap ( ) ; fn lineCap ( ) ; fn SetlineJoin ( ) ; fn lineJoin ( ) ; fn SetlineWidth ( ) ; fn lineWidth ( ) ; fn SetmiterLimit ( ) ; fn miterLimit ( ) ; fn SetshadowBlur ( ) ; fn shadowBlur ( ) ; fn SetshadowColor ( ) ; fn shadowColor ( ) ; fn SetshadowOffsetX ( ) ; fn shadowOffsetX ( ) ; fn SetshadowOffsetY ( ) ; fn shadowOffsetY ( ) ; fn clearRect ( ) ; fn fillRect ( ) ; fn strokeRect ( ) ; fn arc ( ) ; fn arcTo ( ) ; fn beginPath ( ) ; fn bezierCurveTo ( ) ; fn clip ( ) ; fn closePath ( ) ; fn fill ( ) ; fn lineTo ( ) ; fn moveTo ( ) ; fn quadraticCurveTo ( ) ; fn rect ( ) ; fn stroke ( ) ; fn isPointInPath ( ) ; fn Setfont ( ) ; fn font ( ) ; fn SettextAlign ( ) ; fn textAlign ( ) ; fn SettextBaseline ( ) ; fn textBaseline ( ) ; fn fillText ( ) ; fn measureText ( ) ; fn strokeText ( ) ; fn drawImage ( ) ; fn createImageData ( ) ; fn getImageData ( ) ; fn putImageData ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ICanvasRenderingContext2DVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ICanvasRenderingContext2DImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ICanvasRenderingContext2DVtbl < > { unsafe extern "system" fn canvas < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn restore < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn save < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn rotate < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , angle : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scale < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , x : f32 , y : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn setTransform < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , m11 : f32 , m12 : f32 , m21 : f32 , m22 : f32 , dx : f32 , dy : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn transform < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , m11 : f32 , m12 : f32 , m21 : f32 , m22 : f32 , dx : f32 , dy : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn translate < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , x : f32 , y : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetglobalAlpha < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn globalAlpha < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetglobalCompositeOperation < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn globalCompositeOperation < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetfillStyle < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn fillStyle < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetstrokeStyle < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn strokeStyle < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createLinearGradient < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , x0 : f32 , y0 : f32 , x1 : f32 , y1 : f32 , ppcanvasgradient : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createRadialGradient < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , x0 : f32 , y0 : f32 , r0 : f32 , x1 : f32 , y1 : f32 , r1 : f32 , ppcanvasgradient : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createPattern < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , image : :: windows :: core :: RawPtr , repetition : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ppcanvaspattern : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetlineCap < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn lineCap < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetlineJoin < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn lineJoin < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetlineWidth < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn lineWidth < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmiterLimit < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn miterLimit < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetshadowBlur < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn shadowBlur < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetshadowColor < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn shadowColor < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetshadowOffsetX < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn shadowOffsetX < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetshadowOffsetY < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn shadowOffsetY < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clearRect < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , x : f32 , y : f32 , w : f32 , h : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn fillRect < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , x : f32 , y : f32 , w : f32 , h : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn strokeRect < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , x : f32 , y : f32 , w : f32 , h : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn arc < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , x : f32 , y : f32 , radius : f32 , startangle : f32 , endangle : f32 , anticlockwise : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn arcTo < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , x1 : f32 , y1 : f32 , x2 : f32 , y2 : f32 , radius : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn beginPath < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn bezierCurveTo < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cp1x : f32 , cp1y : f32 , cp2x : f32 , cp2y : f32 , x : f32 , y : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clip < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn closePath < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn fill < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn lineTo < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , x : f32 , y : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn moveTo < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , x : f32 , y : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn quadraticCurveTo < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cpx : f32 , cpy : f32 , x : f32 , y : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn rect < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , x : f32 , y : f32 , w : f32 , h : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn stroke < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn isPointInPath < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , x : f32 , y : f32 , presult : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setfont < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn font < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextAlign < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textAlign < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextBaseline < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textBaseline < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn fillText < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , text : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , x : f32 , y : f32 , maxwidth : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn measureText < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , text : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ppcanvastextmetrics : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn strokeText < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , text : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , x : f32 , y : f32 , maxwidth : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn drawImage < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psrc : :: windows :: core :: RawPtr , a1 : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , a2 : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , a3 : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , a4 : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , a5 : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , a6 : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , a7 : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , a8 : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createImageData < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , a1 : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , a2 : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ppcanvasimagedata : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getImageData < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , sx : f32 , sy : f32 , sw : f32 , sh : f32 , ppcanvasimagedata : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putImageData < Impl : ICanvasRenderingContext2DImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , imagedata : :: windows :: core :: RawPtr , dx : f32 , dy : f32 , dirtyx : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , dirtyy : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , dirtywidth : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , dirtyheight : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , canvas : canvas :: < Impl , IMPL_OFFSET > , restore : restore :: < Impl , IMPL_OFFSET > , save : save :: < Impl , IMPL_OFFSET > , rotate : rotate :: < Impl , IMPL_OFFSET > , scale : scale :: < Impl , IMPL_OFFSET > , setTransform : setTransform :: < Impl , IMPL_OFFSET > , transform : transform :: < Impl , IMPL_OFFSET > , translate : translate :: < Impl , IMPL_OFFSET > , SetglobalAlpha : SetglobalAlpha :: < Impl , IMPL_OFFSET > , globalAlpha : globalAlpha :: < Impl , IMPL_OFFSET > , SetglobalCompositeOperation : SetglobalCompositeOperation :: < Impl , IMPL_OFFSET > , globalCompositeOperation : globalCompositeOperation :: < Impl , IMPL_OFFSET > , SetfillStyle : SetfillStyle :: < Impl , IMPL_OFFSET > , fillStyle : fillStyle :: < Impl , IMPL_OFFSET > , SetstrokeStyle : SetstrokeStyle :: < Impl , IMPL_OFFSET > , strokeStyle : strokeStyle :: < Impl , IMPL_OFFSET > , createLinearGradient : createLinearGradient :: < Impl , IMPL_OFFSET > , createRadialGradient : createRadialGradient :: < Impl , IMPL_OFFSET > , createPattern : createPattern :: < Impl , IMPL_OFFSET > , SetlineCap : SetlineCap :: < Impl , IMPL_OFFSET > , lineCap : lineCap :: < Impl , IMPL_OFFSET > , SetlineJoin : SetlineJoin :: < Impl , IMPL_OFFSET > , lineJoin : lineJoin :: < Impl , IMPL_OFFSET > , SetlineWidth : SetlineWidth :: < Impl , IMPL_OFFSET > , lineWidth : lineWidth :: < Impl , IMPL_OFFSET > , SetmiterLimit : SetmiterLimit :: < Impl , IMPL_OFFSET > , miterLimit : miterLimit :: < Impl , IMPL_OFFSET > , SetshadowBlur : SetshadowBlur :: < Impl , IMPL_OFFSET > , shadowBlur : shadowBlur :: < Impl , IMPL_OFFSET > , SetshadowColor : SetshadowColor :: < Impl , IMPL_OFFSET > , shadowColor : shadowColor :: < Impl , IMPL_OFFSET > , SetshadowOffsetX : SetshadowOffsetX :: < Impl , IMPL_OFFSET > , shadowOffsetX : shadowOffsetX :: < Impl , IMPL_OFFSET > , SetshadowOffsetY : SetshadowOffsetY :: < Impl , IMPL_OFFSET > , shadowOffsetY : shadowOffsetY :: < Impl , IMPL_OFFSET > , clearRect : clearRect :: < Impl , IMPL_OFFSET > , fillRect : fillRect :: < Impl , IMPL_OFFSET > , strokeRect : strokeRect :: < Impl , IMPL_OFFSET > , arc : arc :: < Impl , IMPL_OFFSET > , arcTo : arcTo :: < Impl , IMPL_OFFSET > , beginPath : beginPath :: < Impl , IMPL_OFFSET > , bezierCurveTo : bezierCurveTo :: < Impl , IMPL_OFFSET > , clip : clip :: < Impl , IMPL_OFFSET > , closePath : closePath :: < Impl , IMPL_OFFSET > , fill : fill :: < Impl , IMPL_OFFSET > , lineTo : lineTo :: < Impl , IMPL_OFFSET > , moveTo : moveTo :: < Impl , IMPL_OFFSET > , quadraticCurveTo : quadraticCurveTo :: < Impl , IMPL_OFFSET > , rect : rect :: < Impl , IMPL_OFFSET > , stroke : stroke :: < Impl , IMPL_OFFSET > , isPointInPath : isPointInPath :: < Impl , IMPL_OFFSET > , Setfont : Setfont :: < Impl , IMPL_OFFSET > , font : font :: < Impl , IMPL_OFFSET > , SettextAlign : SettextAlign :: < Impl , IMPL_OFFSET > , textAlign : textAlign :: < Impl , IMPL_OFFSET > , SettextBaseline : SettextBaseline :: < Impl , IMPL_OFFSET > , textBaseline : textBaseline :: < Impl , IMPL_OFFSET > , fillText : fillText :: < Impl , IMPL_OFFSET > , measureText : measureText :: < Impl , IMPL_OFFSET > , strokeText : strokeText :: < Impl , IMPL_OFFSET > , drawImage : drawImage :: < Impl , IMPL_OFFSET > , createImageData : createImageData :: < Impl , IMPL_OFFSET > , getImageData : getImageData :: < Impl , IMPL_OFFSET > , putImageData : putImageData :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ICanvasRenderingContext2D < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ICanvasTextMetricsImpl < > : Sized + IDispatchImpl where { fn width ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ICanvasTextMetricsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ICanvasTextMetricsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ICanvasTextMetricsVtbl < > { unsafe extern "system" fn width < Impl : ICanvasTextMetricsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , width : width :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ICanvasTextMetrics < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait ICaretPositionProviderImpl < > : Sized where { fn GetCaretPosition ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > ICaretPositionProviderVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ICaretPositionProviderImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ICaretPositionProviderVtbl < > { unsafe extern "system" fn GetCaretPosition < Impl : ICaretPositionProviderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pptcaret : * mut super::super::Foundation:: POINT , pflheight : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetCaretPosition : GetCaretPosition :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ICaretPositionProvider < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IClassFactoryExImpl < > : Sized + IClassFactoryImpl where { fn CreateInstanceWithContext ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IClassFactoryExVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IClassFactoryExImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IClassFactoryExVtbl < > { unsafe extern "system" fn CreateInstanceWithContext < Impl : IClassFactoryExImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punkcontext : * mut :: core :: ffi :: c_void , punkouter : * mut :: core :: ffi :: c_void , riid : * const :: windows :: core :: GUID , ppv : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , CreateInstanceWithContext : CreateInstanceWithContext :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IClassFactoryEx < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IClientCapsImpl < > : Sized + IDispatchImpl where { fn javaEnabled ( ) ; fn cookieEnabled ( ) ; fn cpuClass ( ) ; fn systemLanguage ( ) ; fn userLanguage ( ) ; fn platform ( ) ; fn connectionSpeed ( ) ; fn onLine ( ) ; fn colorDepth ( ) ; fn bufferDepth ( ) ; fn width ( ) ; fn height ( ) ; fn availHeight ( ) ; fn availWidth ( ) ; fn connectionType ( ) ; fn isComponentInstalled ( ) ; fn getComponentVersion ( ) ; fn compareVersions ( ) ; fn addComponentRequest ( ) ; fn doComponentRequest ( ) ; fn clearComponentRequest ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IClientCapsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IClientCapsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IClientCapsVtbl < > { unsafe extern "system" fn javaEnabled < Impl : IClientCapsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn cookieEnabled < Impl : IClientCapsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn cpuClass < Impl : IClientCapsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn systemLanguage < Impl : IClientCapsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn userLanguage < Impl : IClientCapsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn platform < Impl : IClientCapsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn connectionSpeed < Impl : IClientCapsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onLine < Impl : IClientCapsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn colorDepth < Impl : IClientCapsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn bufferDepth < Impl : IClientCapsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn width < Impl : IClientCapsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn height < Impl : IClientCapsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn availHeight < Impl : IClientCapsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn availWidth < Impl : IClientCapsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn connectionType < Impl : IClientCapsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn isComponentInstalled < Impl : IClientCapsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , bstrurl : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , bstrver : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getComponentVersion < Impl : IClientCapsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , bstrurl : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pbstrver : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn compareVersions < Impl : IClientCapsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrver1 : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , bstrver2 : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn addComponentRequest < Impl : IClientCapsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , bstrurl : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , bstrver : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn doComponentRequest < Impl : IClientCapsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clearComponentRequest < Impl : IClientCapsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , javaEnabled : javaEnabled :: < Impl , IMPL_OFFSET > , cookieEnabled : cookieEnabled :: < Impl , IMPL_OFFSET > , cpuClass : cpuClass :: < Impl , IMPL_OFFSET > , systemLanguage : systemLanguage :: < Impl , IMPL_OFFSET > , userLanguage : userLanguage :: < Impl , IMPL_OFFSET > , platform : platform :: < Impl , IMPL_OFFSET > , connectionSpeed : connectionSpeed :: < Impl , IMPL_OFFSET > , onLine : onLine :: < Impl , IMPL_OFFSET > , colorDepth : colorDepth :: < Impl , IMPL_OFFSET > , bufferDepth : bufferDepth :: < Impl , IMPL_OFFSET > , width : width :: < Impl , IMPL_OFFSET > , height : height :: < Impl , IMPL_OFFSET > , availHeight : availHeight :: < Impl , IMPL_OFFSET > , availWidth : availWidth :: < Impl , IMPL_OFFSET > , connectionType : connectionType :: < Impl , IMPL_OFFSET > , isComponentInstalled : isComponentInstalled :: < Impl , IMPL_OFFSET > , getComponentVersion : getComponentVersion :: < Impl , IMPL_OFFSET > , compareVersions : compareVersions :: < Impl , IMPL_OFFSET > , addComponentRequest : addComponentRequest :: < Impl , IMPL_OFFSET > , doComponentRequest : doComponentRequest :: < Impl , IMPL_OFFSET > , clearComponentRequest : clearComponentRequest :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IClientCaps < > as :: windows :: core :: Interface > :: IID } } pub trait ICustomDocImpl < > : Sized where { fn SetUIHandler ( ) ; } impl < > ICustomDocVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ICustomDocImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ICustomDocVtbl < > { unsafe extern "system" fn SetUIHandler < Impl : ICustomDocImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , puihandler : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetUIHandler : SetUIHandler :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ICustomDoc < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IDOMBeforeUnloadEventImpl < > : Sized + IDispatchImpl where { fn SetreturnValue ( ) ; fn returnValue ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IDOMBeforeUnloadEventVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDOMBeforeUnloadEventImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDOMBeforeUnloadEventVtbl < > { unsafe extern "system" fn SetreturnValue < Impl : IDOMBeforeUnloadEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn returnValue < Impl : IDOMBeforeUnloadEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetreturnValue : SetreturnValue :: < Impl , IMPL_OFFSET > , returnValue : returnValue :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDOMBeforeUnloadEvent < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IDOMCloseEventImpl < > : Sized + IDispatchImpl where { fn wasClean ( ) ; fn initCloseEvent ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IDOMCloseEventVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDOMCloseEventImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDOMCloseEventVtbl < > { unsafe extern "system" fn wasClean < Impl : IDOMCloseEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn initCloseEvent < Impl : IDOMCloseEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , eventtype : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , canbubble : i16 , cancelable : i16 , wasclean : i16 , code : i32 , reason : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , wasClean : wasClean :: < Impl , IMPL_OFFSET > , initCloseEvent : initCloseEvent :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDOMCloseEvent < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IDOMCompositionEventImpl < > : Sized + IDispatchImpl where { fn data ( ) ; fn initCompositionEvent ( ) ; fn locale ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IDOMCompositionEventVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDOMCompositionEventImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDOMCompositionEventVtbl < > { unsafe extern "system" fn data < Impl : IDOMCompositionEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn initCompositionEvent < Impl : IDOMCompositionEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , eventtype : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , canbubble : i16 , cancelable : i16 , viewarg : :: windows :: core :: RawPtr , data : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , locale : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn locale < Impl : IDOMCompositionEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , data : data :: < Impl , IMPL_OFFSET > , initCompositionEvent : initCompositionEvent :: < Impl , IMPL_OFFSET > , locale : locale :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDOMCompositionEvent < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IDOMCustomEventImpl < > : Sized + IDispatchImpl where { fn detail ( ) ; fn initCustomEvent ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IDOMCustomEventVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDOMCustomEventImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDOMCustomEventVtbl < > { unsafe extern "system" fn detail < Impl : IDOMCustomEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn initCustomEvent < Impl : IDOMCustomEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , eventtype : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , canbubble : i16 , cancelable : i16 , detail : * const super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , detail : detail :: < Impl , IMPL_OFFSET > , initCustomEvent : initCustomEvent :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDOMCustomEvent < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IDOMDocumentTypeImpl < > : Sized + IDispatchImpl where { fn name ( ) ; fn entities ( ) ; fn notations ( ) ; fn publicId ( ) ; fn systemId ( ) ; fn internalSubset ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IDOMDocumentTypeVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDOMDocumentTypeImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDOMDocumentTypeVtbl < > { unsafe extern "system" fn name < Impl : IDOMDocumentTypeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn entities < Impl : IDOMDocumentTypeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn notations < Impl : IDOMDocumentTypeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn publicId < Impl : IDOMDocumentTypeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn systemId < Impl : IDOMDocumentTypeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn internalSubset < Impl : IDOMDocumentTypeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , name : name :: < Impl , IMPL_OFFSET > , entities : entities :: < Impl , IMPL_OFFSET > , notations : notations :: < Impl , IMPL_OFFSET > , publicId : publicId :: < Impl , IMPL_OFFSET > , systemId : systemId :: < Impl , IMPL_OFFSET > , internalSubset : internalSubset :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDOMDocumentType < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IDOMDragEventImpl < > : Sized + IDispatchImpl where { fn dataTransfer ( ) ; fn initDragEvent ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IDOMDragEventVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDOMDragEventImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDOMDragEventVtbl < > { unsafe extern "system" fn dataTransfer < Impl : IDOMDragEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn initDragEvent < Impl : IDOMDragEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , eventtype : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , canbubble : i16 , cancelable : i16 , viewarg : :: windows :: core :: RawPtr , detailarg : i32 , screenxarg : i32 , screenyarg : i32 , clientxarg : i32 , clientyarg : i32 , ctrlkeyarg : i16 , altkeyarg : i16 , shiftkeyarg : i16 , metakeyarg : i16 , buttonarg : u16 , relatedtargetarg : :: windows :: core :: RawPtr , datatransferarg : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , dataTransfer : dataTransfer :: < Impl , IMPL_OFFSET > , initDragEvent : initDragEvent :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDOMDragEvent < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IDOMEventImpl < > : Sized + IDispatchImpl where { fn bubbles ( ) ; fn cancelable ( ) ; fn currentTarget ( ) ; fn defaultPrevented ( ) ; fn eventPhase ( ) ; fn target ( ) ; fn timeStamp ( ) ; fn r#type ( ) ; fn initEvent ( ) ; fn preventDefault ( ) ; fn stopPropagation ( ) ; fn stopImmediatePropagation ( ) ; fn isTrusted ( ) ; fn SetcancelBubble ( ) ; fn cancelBubble ( ) ; fn srcElement ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IDOMEventVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDOMEventImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDOMEventVtbl < > { unsafe extern "system" fn bubbles < Impl : IDOMEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn cancelable < Impl : IDOMEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn currentTarget < Impl : IDOMEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn defaultPrevented < Impl : IDOMEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn eventPhase < Impl : IDOMEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut u16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn target < Impl : IDOMEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn timeStamp < Impl : IDOMEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn r#type < Impl : IDOMEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn initEvent < Impl : IDOMEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , eventtype : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , canbubble : i16 , cancelable : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn preventDefault < Impl : IDOMEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn stopPropagation < Impl : IDOMEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn stopImmediatePropagation < Impl : IDOMEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn isTrusted < Impl : IDOMEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetcancelBubble < Impl : IDOMEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn cancelBubble < Impl : IDOMEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn srcElement < Impl : IDOMEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , bubbles : bubbles :: < Impl , IMPL_OFFSET > , cancelable : cancelable :: < Impl , IMPL_OFFSET > , currentTarget : currentTarget :: < Impl , IMPL_OFFSET > , defaultPrevented : defaultPrevented :: < Impl , IMPL_OFFSET > , eventPhase : eventPhase :: < Impl , IMPL_OFFSET > , target : target :: < Impl , IMPL_OFFSET > , timeStamp : timeStamp :: < Impl , IMPL_OFFSET > , r#type : r#type :: < Impl , IMPL_OFFSET > , initEvent : initEvent :: < Impl , IMPL_OFFSET > , preventDefault : preventDefault :: < Impl , IMPL_OFFSET > , stopPropagation : stopPropagation :: < Impl , IMPL_OFFSET > , stopImmediatePropagation : stopImmediatePropagation :: < Impl , IMPL_OFFSET > , isTrusted : isTrusted :: < Impl , IMPL_OFFSET > , SetcancelBubble : SetcancelBubble :: < Impl , IMPL_OFFSET > , cancelBubble : cancelBubble :: < Impl , IMPL_OFFSET > , srcElement : srcElement :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDOMEvent < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IDOMEventRegistrationCallbackImpl < > : Sized where { fn OnDOMEventListenerAdded ( ) ; fn OnDOMEventListenerRemoved ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IDOMEventRegistrationCallbackVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDOMEventRegistrationCallbackImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDOMEventRegistrationCallbackVtbl < > { unsafe extern "system" fn OnDOMEventListenerAdded < Impl : IDOMEventRegistrationCallbackImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszeventtype : super::super::Foundation:: PWSTR , phandler : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnDOMEventListenerRemoved < Impl : IDOMEventRegistrationCallbackImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ullcookie : u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , OnDOMEventListenerAdded : OnDOMEventListenerAdded :: < Impl , IMPL_OFFSET > , OnDOMEventListenerRemoved : OnDOMEventListenerRemoved :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDOMEventRegistrationCallback < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IDOMExceptionImpl < > : Sized + IDispatchImpl where { fn Setcode ( ) ; fn code ( ) ; fn message ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IDOMExceptionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDOMExceptionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDOMExceptionVtbl < > { unsafe extern "system" fn Setcode < Impl : IDOMExceptionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn code < Impl : IDOMExceptionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn message < Impl : IDOMExceptionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setcode : Setcode :: < Impl , IMPL_OFFSET > , code : code :: < Impl , IMPL_OFFSET > , message : message :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDOMException < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IDOMFocusEventImpl < > : Sized + IDispatchImpl where { fn relatedTarget ( ) ; fn initFocusEvent ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IDOMFocusEventVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDOMFocusEventImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDOMFocusEventVtbl < > { unsafe extern "system" fn relatedTarget < Impl : IDOMFocusEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn initFocusEvent < Impl : IDOMFocusEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , eventtype : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , canbubble : i16 , cancelable : i16 , view : :: windows :: core :: RawPtr , detail : i32 , relatedtargetarg : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , relatedTarget : relatedTarget :: < Impl , IMPL_OFFSET > , initFocusEvent : initFocusEvent :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDOMFocusEvent < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IDOMKeyboardEventImpl < > : Sized + IDispatchImpl where { fn key ( ) ; fn location ( ) ; fn ctrlKey ( ) ; fn shiftKey ( ) ; fn altKey ( ) ; fn metaKey ( ) ; fn repeat ( ) ; fn getModifierState ( ) ; fn initKeyboardEvent ( ) ; fn keyCode ( ) ; fn charCode ( ) ; fn which ( ) ; fn ie9_char ( ) ; fn locale ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IDOMKeyboardEventVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDOMKeyboardEventImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDOMKeyboardEventVtbl < > { unsafe extern "system" fn key < Impl : IDOMKeyboardEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn location < Impl : IDOMKeyboardEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ctrlKey < Impl : IDOMKeyboardEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn shiftKey < Impl : IDOMKeyboardEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn altKey < Impl : IDOMKeyboardEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn metaKey < Impl : IDOMKeyboardEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn repeat < Impl : IDOMKeyboardEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getModifierState < Impl : IDOMKeyboardEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , keyarg : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , state : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn initKeyboardEvent < Impl : IDOMKeyboardEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , eventtype : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , canbubble : i16 , cancelable : i16 , viewarg : :: windows :: core :: RawPtr , keyarg : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , locationarg : u32 , modifierslistarg : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , repeat : i16 , locale : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn keyCode < Impl : IDOMKeyboardEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn charCode < Impl : IDOMKeyboardEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn which < Impl : IDOMKeyboardEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ie9_char < Impl : IDOMKeyboardEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn locale < Impl : IDOMKeyboardEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , key : key :: < Impl , IMPL_OFFSET > , location : location :: < Impl , IMPL_OFFSET > , ctrlKey : ctrlKey :: < Impl , IMPL_OFFSET > , shiftKey : shiftKey :: < Impl , IMPL_OFFSET > , altKey : altKey :: < Impl , IMPL_OFFSET > , metaKey : metaKey :: < Impl , IMPL_OFFSET > , repeat : repeat :: < Impl , IMPL_OFFSET > , getModifierState : getModifierState :: < Impl , IMPL_OFFSET > , initKeyboardEvent : initKeyboardEvent :: < Impl , IMPL_OFFSET > , keyCode : keyCode :: < Impl , IMPL_OFFSET > , charCode : charCode :: < Impl , IMPL_OFFSET > , which : which :: < Impl , IMPL_OFFSET > , ie9_char : ie9_char :: < Impl , IMPL_OFFSET > , locale : locale :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDOMKeyboardEvent < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IDOMMSAnimationEventImpl < > : Sized + IDispatchImpl where { fn animationName ( ) ; fn elapsedTime ( ) ; fn initMSAnimationEvent ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IDOMMSAnimationEventVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDOMMSAnimationEventImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDOMMSAnimationEventVtbl < > { unsafe extern "system" fn animationName < Impl : IDOMMSAnimationEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn elapsedTime < Impl : IDOMMSAnimationEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn initMSAnimationEvent < Impl : IDOMMSAnimationEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , eventtype : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , canbubble : i16 , cancelable : i16 , animationname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , elapsedtime : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , animationName : animationName :: < Impl , IMPL_OFFSET > , elapsedTime : elapsedTime :: < Impl , IMPL_OFFSET > , initMSAnimationEvent : initMSAnimationEvent :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDOMMSAnimationEvent < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IDOMMSManipulationEventImpl < > : Sized + IDispatchImpl where { fn lastState ( ) ; fn currentState ( ) ; fn initMSManipulationEvent ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IDOMMSManipulationEventVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDOMMSManipulationEventImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDOMMSManipulationEventVtbl < > { unsafe extern "system" fn lastState < Impl : IDOMMSManipulationEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn currentState < Impl : IDOMMSManipulationEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn initMSManipulationEvent < Impl : IDOMMSManipulationEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , eventtype : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , canbubble : i16 , cancelable : i16 , viewarg : :: windows :: core :: RawPtr , detailarg : i32 , laststate : i32 , currentstate : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , lastState : lastState :: < Impl , IMPL_OFFSET > , currentState : currentState :: < Impl , IMPL_OFFSET > , initMSManipulationEvent : initMSManipulationEvent :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDOMMSManipulationEvent < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IDOMMSTransitionEventImpl < > : Sized + IDispatchImpl where { fn propertyName ( ) ; fn elapsedTime ( ) ; fn initMSTransitionEvent ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IDOMMSTransitionEventVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDOMMSTransitionEventImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDOMMSTransitionEventVtbl < > { unsafe extern "system" fn propertyName < Impl : IDOMMSTransitionEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn elapsedTime < Impl : IDOMMSTransitionEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn initMSTransitionEvent < Impl : IDOMMSTransitionEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , eventtype : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , canbubble : i16 , cancelable : i16 , propertyname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , elapsedtime : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , propertyName : propertyName :: < Impl , IMPL_OFFSET > , elapsedTime : elapsedTime :: < Impl , IMPL_OFFSET > , initMSTransitionEvent : initMSTransitionEvent :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDOMMSTransitionEvent < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IDOMMessageEventImpl < > : Sized + IDispatchImpl where { fn data ( ) ; fn origin ( ) ; fn source ( ) ; fn initMessageEvent ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IDOMMessageEventVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDOMMessageEventImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDOMMessageEventVtbl < > { unsafe extern "system" fn data < Impl : IDOMMessageEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn origin < Impl : IDOMMessageEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn source < Impl : IDOMMessageEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn initMessageEvent < Impl : IDOMMessageEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , eventtype : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , canbubble : i16 , cancelable : i16 , data : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , origin : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , lasteventid : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , source : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , data : data :: < Impl , IMPL_OFFSET > , origin : origin :: < Impl , IMPL_OFFSET > , source : source :: < Impl , IMPL_OFFSET > , initMessageEvent : initMessageEvent :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDOMMessageEvent < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IDOMMouseEventImpl < > : Sized + IDispatchImpl where { fn screenX ( ) ; fn screenY ( ) ; fn clientX ( ) ; fn clientY ( ) ; fn ctrlKey ( ) ; fn shiftKey ( ) ; fn altKey ( ) ; fn metaKey ( ) ; fn button ( ) ; fn relatedTarget ( ) ; fn initMouseEvent ( ) ; fn getModifierState ( ) ; fn buttons ( ) ; fn fromElement ( ) ; fn toElement ( ) ; fn x ( ) ; fn y ( ) ; fn offsetX ( ) ; fn offsetY ( ) ; fn pageX ( ) ; fn pageY ( ) ; fn layerX ( ) ; fn layerY ( ) ; fn which ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IDOMMouseEventVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDOMMouseEventImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDOMMouseEventVtbl < > { unsafe extern "system" fn screenX < Impl : IDOMMouseEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn screenY < Impl : IDOMMouseEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clientX < Impl : IDOMMouseEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clientY < Impl : IDOMMouseEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ctrlKey < Impl : IDOMMouseEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn shiftKey < Impl : IDOMMouseEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn altKey < Impl : IDOMMouseEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn metaKey < Impl : IDOMMouseEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn button < Impl : IDOMMouseEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut u16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn relatedTarget < Impl : IDOMMouseEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn initMouseEvent < Impl : IDOMMouseEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , eventtype : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , canbubble : i16 , cancelable : i16 , viewarg : :: windows :: core :: RawPtr , detailarg : i32 , screenxarg : i32 , screenyarg : i32 , clientxarg : i32 , clientyarg : i32 , ctrlkeyarg : i16 , altkeyarg : i16 , shiftkeyarg : i16 , metakeyarg : i16 , buttonarg : u16 , relatedtargetarg : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getModifierState < Impl : IDOMMouseEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , keyarg : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , activated : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn buttons < Impl : IDOMMouseEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut u16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn fromElement < Impl : IDOMMouseEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn toElement < Impl : IDOMMouseEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn x < Impl : IDOMMouseEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn y < Impl : IDOMMouseEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn offsetX < Impl : IDOMMouseEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn offsetY < Impl : IDOMMouseEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn pageX < Impl : IDOMMouseEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn pageY < Impl : IDOMMouseEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn layerX < Impl : IDOMMouseEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn layerY < Impl : IDOMMouseEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn which < Impl : IDOMMouseEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut u16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , screenX : screenX :: < Impl , IMPL_OFFSET > , screenY : screenY :: < Impl , IMPL_OFFSET > , clientX : clientX :: < Impl , IMPL_OFFSET > , clientY : clientY :: < Impl , IMPL_OFFSET > , ctrlKey : ctrlKey :: < Impl , IMPL_OFFSET > , shiftKey : shiftKey :: < Impl , IMPL_OFFSET > , altKey : altKey :: < Impl , IMPL_OFFSET > , metaKey : metaKey :: < Impl , IMPL_OFFSET > , button : button :: < Impl , IMPL_OFFSET > , relatedTarget : relatedTarget :: < Impl , IMPL_OFFSET > , initMouseEvent : initMouseEvent :: < Impl , IMPL_OFFSET > , getModifierState : getModifierState :: < Impl , IMPL_OFFSET > , buttons : buttons :: < Impl , IMPL_OFFSET > , fromElement : fromElement :: < Impl , IMPL_OFFSET > , toElement : toElement :: < Impl , IMPL_OFFSET > , x : x :: < Impl , IMPL_OFFSET > , y : y :: < Impl , IMPL_OFFSET > , offsetX : offsetX :: < Impl , IMPL_OFFSET > , offsetY : offsetY :: < Impl , IMPL_OFFSET > , pageX : pageX :: < Impl , IMPL_OFFSET > , pageY : pageY :: < Impl , IMPL_OFFSET > , layerX : layerX :: < Impl , IMPL_OFFSET > , layerY : layerY :: < Impl , IMPL_OFFSET > , which : which :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDOMMouseEvent < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IDOMMouseWheelEventImpl < > : Sized + IDispatchImpl where { fn wheelDelta ( ) ; fn initMouseWheelEvent ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IDOMMouseWheelEventVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDOMMouseWheelEventImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDOMMouseWheelEventVtbl < > { unsafe extern "system" fn wheelDelta < Impl : IDOMMouseWheelEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn initMouseWheelEvent < Impl : IDOMMouseWheelEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , eventtype : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , canbubble : i16 , cancelable : i16 , viewarg : :: windows :: core :: RawPtr , detailarg : i32 , screenxarg : i32 , screenyarg : i32 , clientxarg : i32 , clientyarg : i32 , buttonarg : u16 , relatedtargetarg : :: windows :: core :: RawPtr , modifierslistarg : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , wheeldeltaarg : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , wheelDelta : wheelDelta :: < Impl , IMPL_OFFSET > , initMouseWheelEvent : initMouseWheelEvent :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDOMMouseWheelEvent < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IDOMMutationEventImpl < > : Sized + IDispatchImpl where { fn relatedNode ( ) ; fn prevValue ( ) ; fn newValue ( ) ; fn attrName ( ) ; fn attrChange ( ) ; fn initMutationEvent ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IDOMMutationEventVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDOMMutationEventImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDOMMutationEventVtbl < > { unsafe extern "system" fn relatedNode < Impl : IDOMMutationEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn prevValue < Impl : IDOMMutationEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn newValue < Impl : IDOMMutationEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn attrName < Impl : IDOMMutationEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn attrChange < Impl : IDOMMutationEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut u16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn initMutationEvent < Impl : IDOMMutationEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , eventtype : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , canbubble : i16 , cancelable : i16 , relatednodearg : :: windows :: core :: RawPtr , prevvaluearg : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , newvaluearg : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , attrnamearg : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , attrchangearg : u16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , relatedNode : relatedNode :: < Impl , IMPL_OFFSET > , prevValue : prevValue :: < Impl , IMPL_OFFSET > , newValue : newValue :: < Impl , IMPL_OFFSET > , attrName : attrName :: < Impl , IMPL_OFFSET > , attrChange : attrChange :: < Impl , IMPL_OFFSET > , initMutationEvent : initMutationEvent :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDOMMutationEvent < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IDOMNodeIteratorImpl < > : Sized + IDispatchImpl where { fn root ( ) ; fn whatToShow ( ) ; fn filter ( ) ; fn expandEntityReferences ( ) ; fn nextNode ( ) ; fn previousNode ( ) ; fn detach ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IDOMNodeIteratorVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDOMNodeIteratorImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDOMNodeIteratorVtbl < > { unsafe extern "system" fn root < Impl : IDOMNodeIteratorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn whatToShow < Impl : IDOMNodeIteratorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn filter < Impl : IDOMNodeIteratorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn expandEntityReferences < Impl : IDOMNodeIteratorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn nextNode < Impl : IDOMNodeIteratorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppretnode : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn previousNode < Impl : IDOMNodeIteratorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppretnode : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn detach < Impl : IDOMNodeIteratorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , root : root :: < Impl , IMPL_OFFSET > , whatToShow : whatToShow :: < Impl , IMPL_OFFSET > , filter : filter :: < Impl , IMPL_OFFSET > , expandEntityReferences : expandEntityReferences :: < Impl , IMPL_OFFSET > , nextNode : nextNode :: < Impl , IMPL_OFFSET > , previousNode : previousNode :: < Impl , IMPL_OFFSET > , detach : detach :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDOMNodeIterator < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IDOMParserImpl < > : Sized + IDispatchImpl where { fn parseFromString ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IDOMParserVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDOMParserImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDOMParserVtbl < > { unsafe extern "system" fn parseFromString < Impl : IDOMParserImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , xmlsource : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , mimetype : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ppnode : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , parseFromString : parseFromString :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDOMParser < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IDOMParserFactoryImpl < > : Sized + IDispatchImpl where { fn create ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IDOMParserFactoryVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDOMParserFactoryImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDOMParserFactoryVtbl < > { unsafe extern "system" fn create < Impl : IDOMParserFactoryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , __midl__idomparserfactory0000 : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , create : create :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDOMParserFactory < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IDOMProcessingInstructionImpl < > : Sized + IDispatchImpl where { fn target ( ) ; fn Setdata ( ) ; fn data ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IDOMProcessingInstructionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDOMProcessingInstructionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDOMProcessingInstructionVtbl < > { unsafe extern "system" fn target < Impl : IDOMProcessingInstructionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setdata < Impl : IDOMProcessingInstructionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn data < Impl : IDOMProcessingInstructionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , target : target :: < Impl , IMPL_OFFSET > , Setdata : Setdata :: < Impl , IMPL_OFFSET > , data : data :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDOMProcessingInstruction < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IDOMProgressEventImpl < > : Sized + IDispatchImpl where { fn lengthComputable ( ) ; fn loaded ( ) ; fn total ( ) ; fn initProgressEvent ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IDOMProgressEventVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDOMProgressEventImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDOMProgressEventVtbl < > { unsafe extern "system" fn lengthComputable < Impl : IDOMProgressEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn loaded < Impl : IDOMProgressEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn total < Impl : IDOMProgressEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn initProgressEvent < Impl : IDOMProgressEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , eventtype : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , canbubble : i16 , cancelable : i16 , lengthcomputablearg : i16 , loadedarg : u64 , totalarg : u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , lengthComputable : lengthComputable :: < Impl , IMPL_OFFSET > , loaded : loaded :: < Impl , IMPL_OFFSET > , total : total :: < Impl , IMPL_OFFSET > , initProgressEvent : initProgressEvent :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDOMProgressEvent < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IDOMSiteModeEventImpl < > : Sized + IDispatchImpl where { fn buttonID ( ) ; fn actionURL ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IDOMSiteModeEventVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDOMSiteModeEventImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDOMSiteModeEventVtbl < > { unsafe extern "system" fn buttonID < Impl : IDOMSiteModeEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn actionURL < Impl : IDOMSiteModeEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , buttonID : buttonID :: < Impl , IMPL_OFFSET > , actionURL : actionURL :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDOMSiteModeEvent < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IDOMStorageEventImpl < > : Sized + IDispatchImpl where { fn key ( ) ; fn oldValue ( ) ; fn newValue ( ) ; fn url ( ) ; fn storageArea ( ) ; fn initStorageEvent ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IDOMStorageEventVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDOMStorageEventImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDOMStorageEventVtbl < > { unsafe extern "system" fn key < Impl : IDOMStorageEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn oldValue < Impl : IDOMStorageEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn newValue < Impl : IDOMStorageEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn url < Impl : IDOMStorageEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn storageArea < Impl : IDOMStorageEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn initStorageEvent < Impl : IDOMStorageEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , eventtype : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , canbubble : i16 , cancelable : i16 , keyarg : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , oldvaluearg : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , newvaluearg : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , urlarg : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , storageareaarg : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , key : key :: < Impl , IMPL_OFFSET > , oldValue : oldValue :: < Impl , IMPL_OFFSET > , newValue : newValue :: < Impl , IMPL_OFFSET > , url : url :: < Impl , IMPL_OFFSET > , storageArea : storageArea :: < Impl , IMPL_OFFSET > , initStorageEvent : initStorageEvent :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDOMStorageEvent < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IDOMTextEventImpl < > : Sized + IDispatchImpl where { fn data ( ) ; fn inputMethod ( ) ; fn initTextEvent ( ) ; fn locale ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IDOMTextEventVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDOMTextEventImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDOMTextEventVtbl < > { unsafe extern "system" fn data < Impl : IDOMTextEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn inputMethod < Impl : IDOMTextEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn initTextEvent < Impl : IDOMTextEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , eventtype : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , canbubble : i16 , cancelable : i16 , viewarg : :: windows :: core :: RawPtr , dataarg : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , inputmethod : u32 , locale : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn locale < Impl : IDOMTextEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , data : data :: < Impl , IMPL_OFFSET > , inputMethod : inputMethod :: < Impl , IMPL_OFFSET > , initTextEvent : initTextEvent :: < Impl , IMPL_OFFSET > , locale : locale :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDOMTextEvent < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IDOMTreeWalkerImpl < > : Sized + IDispatchImpl where { fn root ( ) ; fn whatToShow ( ) ; fn filter ( ) ; fn expandEntityReferences ( ) ; fn putref_currentNode ( ) ; fn currentNode ( ) ; fn parentNode ( ) ; fn firstChild ( ) ; fn lastChild ( ) ; fn previousSibling ( ) ; fn nextSibling ( ) ; fn previousNode ( ) ; fn nextNode ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IDOMTreeWalkerVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDOMTreeWalkerImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDOMTreeWalkerVtbl < > { unsafe extern "system" fn root < Impl : IDOMTreeWalkerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn whatToShow < Impl : IDOMTreeWalkerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn filter < Impl : IDOMTreeWalkerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn expandEntityReferences < Impl : IDOMTreeWalkerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_currentNode < Impl : IDOMTreeWalkerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn currentNode < Impl : IDOMTreeWalkerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn parentNode < Impl : IDOMTreeWalkerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppretnode : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn firstChild < Impl : IDOMTreeWalkerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppretnode : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn lastChild < Impl : IDOMTreeWalkerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppretnode : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn previousSibling < Impl : IDOMTreeWalkerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppretnode : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn nextSibling < Impl : IDOMTreeWalkerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppretnode : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn previousNode < Impl : IDOMTreeWalkerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppretnode : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn nextNode < Impl : IDOMTreeWalkerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppretnode : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , root : root :: < Impl , IMPL_OFFSET > , whatToShow : whatToShow :: < Impl , IMPL_OFFSET > , filter : filter :: < Impl , IMPL_OFFSET > , expandEntityReferences : expandEntityReferences :: < Impl , IMPL_OFFSET > , putref_currentNode : putref_currentNode :: < Impl , IMPL_OFFSET > , currentNode : currentNode :: < Impl , IMPL_OFFSET > , parentNode : parentNode :: < Impl , IMPL_OFFSET > , firstChild : firstChild :: < Impl , IMPL_OFFSET > , lastChild : lastChild :: < Impl , IMPL_OFFSET > , previousSibling : previousSibling :: < Impl , IMPL_OFFSET > , nextSibling : nextSibling :: < Impl , IMPL_OFFSET > , previousNode : previousNode :: < Impl , IMPL_OFFSET > , nextNode : nextNode :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDOMTreeWalker < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IDOMUIEventImpl < > : Sized + IDispatchImpl where { fn view ( ) ; fn detail ( ) ; fn initUIEvent ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IDOMUIEventVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDOMUIEventImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDOMUIEventVtbl < > { unsafe extern "system" fn view < Impl : IDOMUIEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn detail < Impl : IDOMUIEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn initUIEvent < Impl : IDOMUIEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , eventtype : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , canbubble : i16 , cancelable : i16 , view : :: windows :: core :: RawPtr , detail : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , view : view :: < Impl , IMPL_OFFSET > , detail : detail :: < Impl , IMPL_OFFSET > , initUIEvent : initUIEvent :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDOMUIEvent < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IDOMWheelEventImpl < > : Sized + IDispatchImpl where { fn deltaX ( ) ; fn deltaY ( ) ; fn deltaZ ( ) ; fn deltaMode ( ) ; fn initWheelEvent ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IDOMWheelEventVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDOMWheelEventImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDOMWheelEventVtbl < > { unsafe extern "system" fn deltaX < Impl : IDOMWheelEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn deltaY < Impl : IDOMWheelEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn deltaZ < Impl : IDOMWheelEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn deltaMode < Impl : IDOMWheelEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn initWheelEvent < Impl : IDOMWheelEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , eventtype : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , canbubble : i16 , cancelable : i16 , viewarg : :: windows :: core :: RawPtr , detailarg : i32 , screenxarg : i32 , screenyarg : i32 , clientxarg : i32 , clientyarg : i32 , buttonarg : u16 , relatedtargetarg : :: windows :: core :: RawPtr , modifierslistarg : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , deltax : i32 , deltay : i32 , deltaz : i32 , deltamode : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , deltaX : deltaX :: < Impl , IMPL_OFFSET > , deltaY : deltaY :: < Impl , IMPL_OFFSET > , deltaZ : deltaZ :: < Impl , IMPL_OFFSET > , deltaMode : deltaMode :: < Impl , IMPL_OFFSET > , initWheelEvent : initWheelEvent :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDOMWheelEvent < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IDOMXmlSerializerImpl < > : Sized + IDispatchImpl where { fn serializeToString ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IDOMXmlSerializerVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDOMXmlSerializerImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDOMXmlSerializerVtbl < > { unsafe extern "system" fn serializeToString < Impl : IDOMXmlSerializerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pnode : :: windows :: core :: RawPtr , pstring : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , serializeToString : serializeToString :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDOMXmlSerializer < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IDOMXmlSerializerFactoryImpl < > : Sized + IDispatchImpl where { fn create ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IDOMXmlSerializerFactoryVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDOMXmlSerializerFactoryImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDOMXmlSerializerFactoryVtbl < > { unsafe extern "system" fn create < Impl : IDOMXmlSerializerFactoryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , __midl__idomxmlserializerfactory0000 : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , create : create :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDOMXmlSerializerFactory < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IDebugCallbackNotificationHandlerImpl < > : Sized where { fn RequestedCallbackTypes ( ) ; fn BeforeDispatchEvent ( ) ; fn DispatchEventComplete ( ) ; fn BeforeInvokeDomCallback ( ) ; fn InvokeDomCallbackComplete ( ) ; fn BeforeInvokeCallback ( ) ; fn InvokeCallbackComplete ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IDebugCallbackNotificationHandlerVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDebugCallbackNotificationHandlerImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDebugCallbackNotificationHandlerVtbl < > { unsafe extern "system" fn RequestedCallbackTypes < Impl : IDebugCallbackNotificationHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcallbackmask : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BeforeDispatchEvent < Impl : IDebugCallbackNotificationHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pevent : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DispatchEventComplete < Impl : IDebugCallbackNotificationHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pevent : * mut :: core :: ffi :: c_void , propagationstatus : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BeforeInvokeDomCallback < Impl : IDebugCallbackNotificationHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pevent : * mut :: core :: ffi :: c_void , pcallback : :: windows :: core :: RawPtr , estage : DOM_EVENT_PHASE , propagationstatus : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn InvokeDomCallbackComplete < Impl : IDebugCallbackNotificationHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pevent : * mut :: core :: ffi :: c_void , pcallback : :: windows :: core :: RawPtr , estage : DOM_EVENT_PHASE , propagationstatus : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BeforeInvokeCallback < Impl : IDebugCallbackNotificationHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ecallbacktype : SCRIPT_TIMER_TYPE , callbackcookie : u32 , pdisphandler : :: windows :: core :: RawPtr , ullhandlercookie : u64 , functionname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , line : u32 , column : u32 , cchlength : u32 , pdebugdocumentcontext : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn InvokeCallbackComplete < Impl : IDebugCallbackNotificationHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ecallbacktype : SCRIPT_TIMER_TYPE , callbackcookie : u32 , pdisphandler : :: windows :: core :: RawPtr , ullhandlercookie : u64 , functionname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , line : u32 , column : u32 , cchlength : u32 , pdebugdocumentcontext : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , RequestedCallbackTypes : RequestedCallbackTypes :: < Impl , IMPL_OFFSET > , BeforeDispatchEvent : BeforeDispatchEvent :: < Impl , IMPL_OFFSET > , DispatchEventComplete : DispatchEventComplete :: < Impl , IMPL_OFFSET > , BeforeInvokeDomCallback : BeforeInvokeDomCallback :: < Impl , IMPL_OFFSET > , InvokeDomCallbackComplete : InvokeDomCallbackComplete :: < Impl , IMPL_OFFSET > , BeforeInvokeCallback : BeforeInvokeCallback :: < Impl , IMPL_OFFSET > , InvokeCallbackComplete : InvokeCallbackComplete :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDebugCallbackNotificationHandler < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IDeveloperConsoleMessageReceiverImpl < > : Sized where { fn Write ( ) ; fn WriteWithUrl ( ) ; fn WriteWithUrlAndLine ( ) ; fn WriteWithUrlLineAndColumn ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IDeveloperConsoleMessageReceiverVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDeveloperConsoleMessageReceiverImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDeveloperConsoleMessageReceiverVtbl < > { unsafe extern "system" fn Write < Impl : IDeveloperConsoleMessageReceiverImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , source : super::super::Foundation:: PWSTR , level : DEV_CONSOLE_MESSAGE_LEVEL , messageid : i32 , messagetext : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn WriteWithUrl < Impl : IDeveloperConsoleMessageReceiverImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , source : super::super::Foundation:: PWSTR , level : DEV_CONSOLE_MESSAGE_LEVEL , messageid : i32 , messagetext : super::super::Foundation:: PWSTR , fileurl : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn WriteWithUrlAndLine < Impl : IDeveloperConsoleMessageReceiverImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , source : super::super::Foundation:: PWSTR , level : DEV_CONSOLE_MESSAGE_LEVEL , messageid : i32 , messagetext : super::super::Foundation:: PWSTR , fileurl : super::super::Foundation:: PWSTR , line : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn WriteWithUrlLineAndColumn < Impl : IDeveloperConsoleMessageReceiverImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , source : super::super::Foundation:: PWSTR , level : DEV_CONSOLE_MESSAGE_LEVEL , messageid : i32 , messagetext : super::super::Foundation:: PWSTR , fileurl : super::super::Foundation:: PWSTR , line : u32 , column : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Write : Write :: < Impl , IMPL_OFFSET > , WriteWithUrl : WriteWithUrl :: < Impl , IMPL_OFFSET > , WriteWithUrlAndLine : WriteWithUrlAndLine :: < Impl , IMPL_OFFSET > , WriteWithUrlLineAndColumn : WriteWithUrlLineAndColumn :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDeveloperConsoleMessageReceiver < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IDeviceRectImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IDeviceRectVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDeviceRectImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDeviceRectVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDeviceRect < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IDiagnosticsScriptEngineImpl < > : Sized where { fn EvaluateScript ( ) ; fn FireScriptMessageEvent ( ) ; fn Detach ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IDiagnosticsScriptEngineVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDiagnosticsScriptEngineImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDiagnosticsScriptEngineVtbl < > { unsafe extern "system" fn EvaluateScript < Impl : IDiagnosticsScriptEngineImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszscript : super::super::Foundation:: PWSTR , pszscriptname : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn FireScriptMessageEvent < Impl : IDiagnosticsScriptEngineImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psznames : * const super::super::Foundation:: PWSTR , pszvalues : * const super::super::Foundation:: PWSTR , ulpropertycount : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Detach < Impl : IDiagnosticsScriptEngineImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , EvaluateScript : EvaluateScript :: < Impl , IMPL_OFFSET > , FireScriptMessageEvent : FireScriptMessageEvent :: < Impl , IMPL_OFFSET > , Detach : Detach :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDiagnosticsScriptEngine < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IDiagnosticsScriptEngineProviderImpl < > : Sized where { fn CreateDiagnosticsScriptEngine ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IDiagnosticsScriptEngineProviderVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDiagnosticsScriptEngineProviderImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDiagnosticsScriptEngineProviderVtbl < > { unsafe extern "system" fn CreateDiagnosticsScriptEngine < Impl : IDiagnosticsScriptEngineProviderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pscriptsite : :: windows :: core :: RawPtr , fdebuggingenabled : super::super::Foundation:: BOOL , ulprocessid : u32 , ppengine : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , CreateDiagnosticsScriptEngine : CreateDiagnosticsScriptEngine :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDiagnosticsScriptEngineProvider < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Diagnostics_Debug" ) ) ] pub trait IDiagnosticsScriptEngineSiteImpl < > : Sized where { fn OnMessage ( ) ; fn OnScriptError ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Diagnostics_Debug" ) ) ] impl < > IDiagnosticsScriptEngineSiteVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDiagnosticsScriptEngineSiteImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDiagnosticsScriptEngineSiteVtbl < > { unsafe extern "system" fn OnMessage < Impl : IDiagnosticsScriptEngineSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszdata : * const super::super::Foundation:: PWSTR , uldatacount : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnScriptError < Impl : IDiagnosticsScriptEngineSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pscripterror : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , OnMessage : OnMessage :: < Impl , IMPL_OFFSET > , OnScriptError : OnScriptError :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDiagnosticsScriptEngineSite < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IDisplayPointerImpl < > : Sized where { fn MoveToPoint ( ) ; fn MoveUnit ( ) ; fn PositionMarkupPointer ( ) ; fn MoveToPointer ( ) ; fn SetPointerGravity ( ) ; fn GetPointerGravity ( ) ; fn SetDisplayGravity ( ) ; fn GetDisplayGravity ( ) ; fn IsPositioned ( ) ; fn Unposition ( ) ; fn IsEqualTo ( ) ; fn IsLeftOf ( ) ; fn IsRightOf ( ) ; fn IsAtBOL ( ) ; fn MoveToMarkupPointer ( ) ; fn ScrollIntoView ( ) ; fn GetLineInfo ( ) ; fn GetFlowElement ( ) ; fn QueryBreaks ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IDisplayPointerVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDisplayPointerImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDisplayPointerVtbl < > { unsafe extern "system" fn MoveToPoint < Impl : IDisplayPointerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ptpoint : super::super::Foundation:: POINT , ecoordsystem : COORD_SYSTEM , pelementcontext : :: windows :: core :: RawPtr , dwhittestoptions : u32 , pdwhittestresults : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn MoveUnit < Impl : IDisplayPointerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , emoveunit : DISPLAY_MOVEUNIT , lxpos : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PositionMarkupPointer < Impl : IDisplayPointerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pmarkuppointer : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn MoveToPointer < Impl : IDisplayPointerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdisppointer : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetPointerGravity < Impl : IDisplayPointerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , egravity : POINTER_GRAVITY , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetPointerGravity < Impl : IDisplayPointerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pegravity : * mut POINTER_GRAVITY , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetDisplayGravity < Impl : IDisplayPointerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , egravity : DISPLAY_GRAVITY , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetDisplayGravity < Impl : IDisplayPointerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pegravity : * mut DISPLAY_GRAVITY , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsPositioned < Impl : IDisplayPointerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfpositioned : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Unposition < Impl : IDisplayPointerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsEqualTo < Impl : IDisplayPointerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdisppointer : :: windows :: core :: RawPtr , pfisequal : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsLeftOf < Impl : IDisplayPointerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdisppointer : :: windows :: core :: RawPtr , pfisleftof : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsRightOf < Impl : IDisplayPointerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdisppointer : :: windows :: core :: RawPtr , pfisrightof : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsAtBOL < Impl : IDisplayPointerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfbol : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn MoveToMarkupPointer < Impl : IDisplayPointerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppointer : :: windows :: core :: RawPtr , pdisplinecontext : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ScrollIntoView < Impl : IDisplayPointerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetLineInfo < Impl : IDisplayPointerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pplineinfo : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetFlowElement < Impl : IDisplayPointerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pplayoutelement : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn QueryBreaks < Impl : IDisplayPointerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdwbreaks : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , MoveToPoint : MoveToPoint :: < Impl , IMPL_OFFSET > , MoveUnit : MoveUnit :: < Impl , IMPL_OFFSET > , PositionMarkupPointer : PositionMarkupPointer :: < Impl , IMPL_OFFSET > , MoveToPointer : MoveToPointer :: < Impl , IMPL_OFFSET > , SetPointerGravity : SetPointerGravity :: < Impl , IMPL_OFFSET > , GetPointerGravity : GetPointerGravity :: < Impl , IMPL_OFFSET > , SetDisplayGravity : SetDisplayGravity :: < Impl , IMPL_OFFSET > , GetDisplayGravity : GetDisplayGravity :: < Impl , IMPL_OFFSET > , IsPositioned : IsPositioned :: < Impl , IMPL_OFFSET > , Unposition : Unposition :: < Impl , IMPL_OFFSET > , IsEqualTo : IsEqualTo :: < Impl , IMPL_OFFSET > , IsLeftOf : IsLeftOf :: < Impl , IMPL_OFFSET > , IsRightOf : IsRightOf :: < Impl , IMPL_OFFSET > , IsAtBOL : IsAtBOL :: < Impl , IMPL_OFFSET > , MoveToMarkupPointer : MoveToMarkupPointer :: < Impl , IMPL_OFFSET > , ScrollIntoView : ScrollIntoView :: < Impl , IMPL_OFFSET > , GetLineInfo : GetLineInfo :: < Impl , IMPL_OFFSET > , GetFlowElement : GetFlowElement :: < Impl , IMPL_OFFSET > , QueryBreaks : QueryBreaks :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDisplayPointer < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IDisplayServicesImpl < > : Sized where { fn CreateDisplayPointer ( ) ; fn TransformRect ( ) ; fn TransformPoint ( ) ; fn GetCaret ( ) ; fn GetComputedStyle ( ) ; fn ScrollRectIntoView ( ) ; fn HasFlowLayout ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IDisplayServicesVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDisplayServicesImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDisplayServicesVtbl < > { unsafe extern "system" fn CreateDisplayPointer < Impl : IDisplayServicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppdisppointer : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn TransformRect < Impl : IDisplayServicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , prect : * mut super::super::Foundation:: RECT , esource : COORD_SYSTEM , edestination : COORD_SYSTEM , pielement : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn TransformPoint < Impl : IDisplayServicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppoint : * mut super::super::Foundation:: POINT , esource : COORD_SYSTEM , edestination : COORD_SYSTEM , pielement : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetCaret < Impl : IDisplayServicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppcaret : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetComputedStyle < Impl : IDisplayServicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppointer : :: windows :: core :: RawPtr , ppcomputedstyle : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ScrollRectIntoView < Impl : IDisplayServicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pielement : :: windows :: core :: RawPtr , rect : super::super::Foundation:: RECT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HasFlowLayout < Impl : IDisplayServicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pielement : :: windows :: core :: RawPtr , pfhasflowlayout : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , CreateDisplayPointer : CreateDisplayPointer :: < Impl , IMPL_OFFSET > , TransformRect : TransformRect :: < Impl , IMPL_OFFSET > , TransformPoint : TransformPoint :: < Impl , IMPL_OFFSET > , GetCaret : GetCaret :: < Impl , IMPL_OFFSET > , GetComputedStyle : GetComputedStyle :: < Impl , IMPL_OFFSET > , ScrollRectIntoView : ScrollRectIntoView :: < Impl , IMPL_OFFSET > , HasFlowLayout : HasFlowLayout :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDisplayServices < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Graphics_Gdi" ) ] pub trait IDithererImplImpl < > : Sized where { fn SetDestColorTable ( ) ; fn SetEventSink ( ) ; } # [ cfg ( feature ="Win32_Graphics_Gdi" ) ] impl < > IDithererImplVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDithererImplImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDithererImplVtbl < > { unsafe extern "system" fn SetDestColorTable < Impl : IDithererImplImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ncolors : u32 , prgbcolors : * const super::super::Graphics::Gdi:: RGBQUAD , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetEventSink < Impl : IDithererImplImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , peventsink : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetDestColorTable : SetDestColorTable :: < Impl , IMPL_OFFSET > , SetEventSink : SetEventSink :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDithererImpl < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IDocHostShowUIImpl < > : Sized where { fn ShowMessage ( ) ; fn ShowHelp ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IDocHostShowUIVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDocHostShowUIImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDocHostShowUIVtbl < > { unsafe extern "system" fn ShowMessage < Impl : IDocHostShowUIImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwnd : super::super::Foundation:: HWND , lpstrtext : super::super::Foundation:: PWSTR , lpstrcaption : super::super::Foundation:: PWSTR , dwtype : u32 , lpstrhelpfile : super::super::Foundation:: PWSTR , dwhelpcontext : u32 , plresult : * mut super::super::Foundation:: LRESULT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ShowHelp < Impl : IDocHostShowUIImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwnd : super::super::Foundation:: HWND , pszhelpfile : super::super::Foundation:: PWSTR , ucommand : u32 , dwdata : u32 , ptmouse : super::super::Foundation:: POINT , pdispatchobjecthit : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , ShowMessage : ShowMessage :: < Impl , IMPL_OFFSET > , ShowHelp : ShowHelp :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDocHostShowUI < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] pub trait IDocHostUIHandlerImpl < > : Sized where { fn ShowContextMenu ( ) ; fn GetHostInfo ( ) ; fn ShowUI ( ) ; fn HideUI ( ) ; fn UpdateUI ( ) ; fn EnableModeless ( ) ; fn OnDocWindowActivate ( ) ; fn OnFrameWindowActivate ( ) ; fn ResizeBorder ( ) ; fn TranslateAccelerator ( ) ; fn GetOptionKeyPath ( ) ; fn GetDropTarget ( ) ; fn GetExternal ( ) ; fn TranslateUrl ( ) ; fn FilterDataObject ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] impl < > IDocHostUIHandlerVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDocHostUIHandlerImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDocHostUIHandlerVtbl < > { unsafe extern "system" fn ShowContextMenu < Impl : IDocHostUIHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwid : u32 , ppt : * const super::super::Foundation:: POINT , pcmdtreserved : * mut :: core :: ffi :: c_void , pdispreserved : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetHostInfo < Impl : IDocHostUIHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pinfo : * mut DOCHOSTUIINFO , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ShowUI < Impl : IDocHostUIHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwid : u32 , pactiveobject : :: windows :: core :: RawPtr , pcommandtarget : :: windows :: core :: RawPtr , pframe : :: windows :: core :: RawPtr , pdoc : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HideUI < Impl : IDocHostUIHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UpdateUI < Impl : IDocHostUIHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn EnableModeless < Impl : IDocHostUIHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fenable : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnDocWindowActivate < Impl : IDocHostUIHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , factivate : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnFrameWindowActivate < Impl : IDocHostUIHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , factivate : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ResizeBorder < Impl : IDocHostUIHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , prcborder : * const super::super::Foundation:: RECT , puiwindow : :: windows :: core :: RawPtr , framewindow : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn TranslateAccelerator < Impl : IDocHostUIHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpmsg : * const super::super::UI::WindowsAndMessaging:: MSG , pguidcmdgroup : * const :: windows :: core :: GUID , ncmdid : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetOptionKeyPath < Impl : IDocHostUIHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pchkey : * mut super::super::Foundation:: PWSTR , dw : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetDropTarget < Impl : IDocHostUIHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdroptarget : :: windows :: core :: RawPtr , ppdroptarget : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetExternal < Impl : IDocHostUIHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppdispatch : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn TranslateUrl < Impl : IDocHostUIHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwtranslate : u32 , pchurlin : super::super::Foundation:: PWSTR , ppchurlout : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn FilterDataObject < Impl : IDocHostUIHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdo : :: windows :: core :: RawPtr , ppdoret : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , ShowContextMenu : ShowContextMenu :: < Impl , IMPL_OFFSET > , GetHostInfo : GetHostInfo :: < Impl , IMPL_OFFSET > , ShowUI : ShowUI :: < Impl , IMPL_OFFSET > , HideUI : HideUI :: < Impl , IMPL_OFFSET > , UpdateUI : UpdateUI :: < Impl , IMPL_OFFSET > , EnableModeless : EnableModeless :: < Impl , IMPL_OFFSET > , OnDocWindowActivate : OnDocWindowActivate :: < Impl , IMPL_OFFSET > , OnFrameWindowActivate : OnFrameWindowActivate :: < Impl , IMPL_OFFSET > , ResizeBorder : ResizeBorder :: < Impl , IMPL_OFFSET > , TranslateAccelerator : TranslateAccelerator :: < Impl , IMPL_OFFSET > , GetOptionKeyPath : GetOptionKeyPath :: < Impl , IMPL_OFFSET > , GetDropTarget : GetDropTarget :: < Impl , IMPL_OFFSET > , GetExternal : GetExternal :: < Impl , IMPL_OFFSET > , TranslateUrl : TranslateUrl :: < Impl , IMPL_OFFSET > , FilterDataObject : FilterDataObject :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDocHostUIHandler < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] pub trait IDocHostUIHandler2Impl < > : Sized + IDocHostUIHandlerImpl where { fn GetOverrideKeyPath ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] impl < > IDocHostUIHandler2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDocHostUIHandler2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDocHostUIHandler2Vtbl < > { unsafe extern "system" fn GetOverrideKeyPath < Impl : IDocHostUIHandler2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pchkey : * mut super::super::Foundation:: PWSTR , dw : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , GetOverrideKeyPath : GetOverrideKeyPath :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDocHostUIHandler2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IDocObjectServiceImpl < > : Sized where { fn FireBeforeNavigate2 ( ) ; fn FireNavigateComplete2 ( ) ; fn FireDownloadBegin ( ) ; fn FireDownloadComplete ( ) ; fn FireDocumentComplete ( ) ; fn UpdateDesktopComponent ( ) ; fn GetPendingUrl ( ) ; fn ActiveElementChanged ( ) ; fn GetUrlSearchComponent ( ) ; fn IsErrorUrl ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IDocObjectServiceVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDocObjectServiceImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDocObjectServiceVtbl < > { unsafe extern "system" fn FireBeforeNavigate2 < Impl : IDocObjectServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdispatch : :: windows :: core :: RawPtr , lpszurl : super::super::Foundation:: PWSTR , dwflags : u32 , lpszframename : super::super::Foundation:: PWSTR , ppostdata : * const u8 , cbpostdata : u32 , lpszheaders : super::super::Foundation:: PWSTR , fplaynavsound : super::super::Foundation:: BOOL , pfcancel : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn FireNavigateComplete2 < Impl : IDocObjectServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , phtmlwindow2 : :: windows :: core :: RawPtr , dwflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn FireDownloadBegin < Impl : IDocObjectServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn FireDownloadComplete < Impl : IDocObjectServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn FireDocumentComplete < Impl : IDocObjectServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , phtmlwindow : :: windows :: core :: RawPtr , dwflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UpdateDesktopComponent < Impl : IDocObjectServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , phtmlwindow : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetPendingUrl < Impl : IDocObjectServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrpendingurl : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ActiveElementChanged < Impl : IDocObjectServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , phtmlelement : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetUrlSearchComponent < Impl : IDocObjectServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrsearch : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsErrorUrl < Impl : IDocObjectServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpszurl : super::super::Foundation:: PWSTR , pfiserror : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , FireBeforeNavigate2 : FireBeforeNavigate2 :: < Impl , IMPL_OFFSET > , FireNavigateComplete2 : FireNavigateComplete2 :: < Impl , IMPL_OFFSET > , FireDownloadBegin : FireDownloadBegin :: < Impl , IMPL_OFFSET > , FireDownloadComplete : FireDownloadComplete :: < Impl , IMPL_OFFSET > , FireDocumentComplete : FireDocumentComplete :: < Impl , IMPL_OFFSET > , UpdateDesktopComponent : UpdateDesktopComponent :: < Impl , IMPL_OFFSET > , GetPendingUrl : GetPendingUrl :: < Impl , IMPL_OFFSET > , ActiveElementChanged : ActiveElementChanged :: < Impl , IMPL_OFFSET > , GetUrlSearchComponent : GetUrlSearchComponent :: < Impl , IMPL_OFFSET > , IsErrorUrl : IsErrorUrl :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDocObjectService < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IDocumentEventImpl < > : Sized + IDispatchImpl where { fn createEvent ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IDocumentEventVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDocumentEventImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDocumentEventVtbl < > { unsafe extern "system" fn createEvent < Impl : IDocumentEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , eventtype : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ppevent : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , createEvent : createEvent :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDocumentEvent < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IDocumentRangeImpl < > : Sized + IDispatchImpl where { fn createRange ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IDocumentRangeVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDocumentRangeImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDocumentRangeVtbl < > { unsafe extern "system" fn createRange < Impl : IDocumentRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppihtmldomrange : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , createRange : createRange :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDocumentRange < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IDocumentSelectorImpl < > : Sized + IDispatchImpl where { fn querySelector ( ) ; fn querySelectorAll ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IDocumentSelectorVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDocumentSelectorImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDocumentSelectorVtbl < > { unsafe extern "system" fn querySelector < Impl : IDocumentSelectorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pel : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn querySelectorAll < Impl : IDocumentSelectorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pel : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , querySelector : querySelector :: < Impl , IMPL_OFFSET > , querySelectorAll : querySelectorAll :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDocumentSelector < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IDocumentTraversalImpl < > : Sized + IDispatchImpl where { fn createNodeIterator ( ) ; fn createTreeWalker ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IDocumentTraversalVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDocumentTraversalImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDocumentTraversalVtbl < > { unsafe extern "system" fn createNodeIterator < Impl : IDocumentTraversalImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , prootnode : :: windows :: core :: RawPtr , ulwhattoshow : i32 , pfilter : * const super::super::System::Com:: VARIANT , fentityreferenceexpansion : i16 , ppnodeiterator : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createTreeWalker < Impl : IDocumentTraversalImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , prootnode : :: windows :: core :: RawPtr , ulwhattoshow : i32 , pfilter : * const super::super::System::Com:: VARIANT , fentityreferenceexpansion : i16 , pptreewalker : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , createNodeIterator : createNodeIterator :: < Impl , IMPL_OFFSET > , createTreeWalker : createTreeWalker :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDocumentTraversal < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IDownloadBehaviorImpl < > : Sized + IDispatchImpl where { fn startDownload ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IDownloadBehaviorVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDownloadBehaviorImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDownloadBehaviorVtbl < > { unsafe extern "system" fn startDownload < Impl : IDownloadBehaviorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrurl : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pdispcallback : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , startDownload : startDownload :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDownloadBehavior < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" , feature ="Win32_Security" , feature ="Win32_System_Com" , feature ="Win32_System_Com_StructuredStorage" ) ) ] pub trait IDownloadManagerImpl < > : Sized where { fn Download ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" , feature ="Win32_Security" , feature ="Win32_System_Com" , feature ="Win32_System_Com_StructuredStorage" ) ) ] impl < > IDownloadManagerVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDownloadManagerImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDownloadManagerVtbl < > { unsafe extern "system" fn Download < Impl : IDownloadManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pmk : :: windows :: core :: RawPtr , pbc : :: windows :: core :: RawPtr , dwbindverb : u32 , grfbindf : i32 , pbindinfo : * const super::super::System::Com:: BINDINFO , pszheaders : super::super::Foundation:: PWSTR , pszredir : super::super::Foundation:: PWSTR , uicp : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Download : Download :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDownloadManager < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IElementBehaviorImpl < > : Sized where { fn Init ( ) ; fn Notify ( ) ; fn Detach ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IElementBehaviorVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IElementBehaviorImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IElementBehaviorVtbl < > { unsafe extern "system" fn Init < Impl : IElementBehaviorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbehaviorsite : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Notify < Impl : IElementBehaviorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , levent : i32 , pvar : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Detach < Impl : IElementBehaviorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Init : Init :: < Impl , IMPL_OFFSET > , Notify : Notify :: < Impl , IMPL_OFFSET > , Detach : Detach :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IElementBehavior < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IElementBehaviorCategoryImpl < > : Sized where { fn GetCategory ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IElementBehaviorCategoryVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IElementBehaviorCategoryImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IElementBehaviorCategoryVtbl < > { unsafe extern "system" fn GetCategory < Impl : IElementBehaviorCategoryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppchcategory : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetCategory : GetCategory :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IElementBehaviorCategory < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IElementBehaviorFactoryImpl < > : Sized where { fn FindBehavior ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IElementBehaviorFactoryVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IElementBehaviorFactoryImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IElementBehaviorFactoryVtbl < > { unsafe extern "system" fn FindBehavior < Impl : IElementBehaviorFactoryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrbehavior : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , bstrbehaviorurl : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , psite : :: windows :: core :: RawPtr , ppbehavior : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , FindBehavior : FindBehavior :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IElementBehaviorFactory < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IElementBehaviorFocusImpl < > : Sized where { fn GetFocusRect ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IElementBehaviorFocusVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IElementBehaviorFocusImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IElementBehaviorFocusVtbl < > { unsafe extern "system" fn GetFocusRect < Impl : IElementBehaviorFocusImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , prect : * const super::super::Foundation:: RECT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetFocusRect : GetFocusRect :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IElementBehaviorFocus < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IElementBehaviorLayoutImpl < > : Sized where { fn GetSize ( ) ; fn GetLayoutInfo ( ) ; fn GetPosition ( ) ; fn MapSize ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IElementBehaviorLayoutVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IElementBehaviorLayoutImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IElementBehaviorLayoutVtbl < > { unsafe extern "system" fn GetSize < Impl : IElementBehaviorLayoutImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwflags : i32 , sizecontent : super::super::Foundation:: SIZE , ppttranslateby : * mut super::super::Foundation:: POINT , ppttopleft : * mut super::super::Foundation:: POINT , psizeproposed : * mut super::super::Foundation:: SIZE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetLayoutInfo < Impl : IElementBehaviorLayoutImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pllayoutinfo : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetPosition < Impl : IElementBehaviorLayoutImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lflags : i32 , ppttopleft : * mut super::super::Foundation:: POINT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn MapSize < Impl : IElementBehaviorLayoutImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psizein : * const super::super::Foundation:: SIZE , prcout : * mut super::super::Foundation:: RECT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetSize : GetSize :: < Impl , IMPL_OFFSET > , GetLayoutInfo : GetLayoutInfo :: < Impl , IMPL_OFFSET > , GetPosition : GetPosition :: < Impl , IMPL_OFFSET > , MapSize : MapSize :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IElementBehaviorLayout < > as :: windows :: core :: Interface > :: IID } } pub trait IElementBehaviorLayout2Impl < > : Sized where { fn GetTextDescent ( ) ; } impl < > IElementBehaviorLayout2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IElementBehaviorLayout2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IElementBehaviorLayout2Vtbl < > { unsafe extern "system" fn GetTextDescent < Impl : IElementBehaviorLayout2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pldescent : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetTextDescent : GetTextDescent :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IElementBehaviorLayout2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" ) ) ] pub trait IElementBehaviorRenderImpl < > : Sized where { fn Draw ( ) ; fn GetRenderInfo ( ) ; fn HitTestPoint ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" ) ) ] impl < > IElementBehaviorRenderVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IElementBehaviorRenderImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IElementBehaviorRenderVtbl < > { unsafe extern "system" fn Draw < Impl : IElementBehaviorRenderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hdc : super::super::Graphics::Gdi:: HDC , llayer : i32 , prect : * const super::super::Foundation:: RECT , preserved : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetRenderInfo < Impl : IElementBehaviorRenderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plrenderinfo : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HitTestPoint < Impl : IElementBehaviorRenderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppoint : * const super::super::Foundation:: POINT , preserved : * mut :: core :: ffi :: c_void , pbhit : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Draw : Draw :: < Impl , IMPL_OFFSET > , GetRenderInfo : GetRenderInfo :: < Impl , IMPL_OFFSET > , HitTestPoint : HitTestPoint :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IElementBehaviorRender < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_System_Com" ) ] pub trait IElementBehaviorSiteImpl < > : Sized where { fn GetElement ( ) ; fn RegisterNotification ( ) ; } # [ cfg ( feature ="Win32_System_Com" ) ] impl < > IElementBehaviorSiteVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IElementBehaviorSiteImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IElementBehaviorSiteVtbl < > { unsafe extern "system" fn GetElement < Impl : IElementBehaviorSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppelement : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RegisterNotification < Impl : IElementBehaviorSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , levent : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetElement : GetElement :: < Impl , IMPL_OFFSET > , RegisterNotification : RegisterNotification :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IElementBehaviorSite < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IElementBehaviorSiteCategoryImpl < > : Sized where { fn GetRelatedBehaviors ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IElementBehaviorSiteCategoryVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IElementBehaviorSiteCategoryImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IElementBehaviorSiteCategoryVtbl < > { unsafe extern "system" fn GetRelatedBehaviors < Impl : IElementBehaviorSiteCategoryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ldirection : i32 , pchcategory : super::super::Foundation:: PWSTR , ppenumerator : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetRelatedBehaviors : GetRelatedBehaviors :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IElementBehaviorSiteCategory < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IElementBehaviorSiteLayoutImpl < > : Sized where { fn InvalidateLayoutInfo ( ) ; fn InvalidateSize ( ) ; fn GetMediaResolution ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IElementBehaviorSiteLayoutVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IElementBehaviorSiteLayoutImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IElementBehaviorSiteLayoutVtbl < > { unsafe extern "system" fn InvalidateLayoutInfo < Impl : IElementBehaviorSiteLayoutImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn InvalidateSize < Impl : IElementBehaviorSiteLayoutImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetMediaResolution < Impl : IElementBehaviorSiteLayoutImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psizeresolution : * mut super::super::Foundation:: SIZE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , InvalidateLayoutInfo : InvalidateLayoutInfo :: < Impl , IMPL_OFFSET > , InvalidateSize : InvalidateSize :: < Impl , IMPL_OFFSET > , GetMediaResolution : GetMediaResolution :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IElementBehaviorSiteLayout < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Graphics_Gdi" ) ] pub trait IElementBehaviorSiteLayout2Impl < > : Sized where { fn GetFontInfo ( ) ; } # [ cfg ( feature ="Win32_Graphics_Gdi" ) ] impl < > IElementBehaviorSiteLayout2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IElementBehaviorSiteLayout2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IElementBehaviorSiteLayout2Vtbl < > { unsafe extern "system" fn GetFontInfo < Impl : IElementBehaviorSiteLayout2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plf : * mut super::super::Graphics::Gdi:: LOGFONTW , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetFontInfo : GetFontInfo :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IElementBehaviorSiteLayout2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IElementBehaviorSiteOMImpl < > : Sized where { fn RegisterEvent ( ) ; fn GetEventCookie ( ) ; fn FireEvent ( ) ; fn CreateEventObject ( ) ; fn RegisterName ( ) ; fn RegisterUrn ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IElementBehaviorSiteOMVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IElementBehaviorSiteOMImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IElementBehaviorSiteOMVtbl < > { unsafe extern "system" fn RegisterEvent < Impl : IElementBehaviorSiteOMImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pchevent : super::super::Foundation:: PWSTR , lflags : i32 , plcookie : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetEventCookie < Impl : IElementBehaviorSiteOMImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pchevent : super::super::Foundation:: PWSTR , plcookie : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn FireEvent < Impl : IElementBehaviorSiteOMImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lcookie : i32 , peventobject : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CreateEventObject < Impl : IElementBehaviorSiteOMImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppeventobject : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RegisterName < Impl : IElementBehaviorSiteOMImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pchname : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RegisterUrn < Impl : IElementBehaviorSiteOMImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pchurn : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , RegisterEvent : RegisterEvent :: < Impl , IMPL_OFFSET > , GetEventCookie : GetEventCookie :: < Impl , IMPL_OFFSET > , FireEvent : FireEvent :: < Impl , IMPL_OFFSET > , CreateEventObject : CreateEventObject :: < Impl , IMPL_OFFSET > , RegisterName : RegisterName :: < Impl , IMPL_OFFSET > , RegisterUrn : RegisterUrn :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IElementBehaviorSiteOM < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IElementBehaviorSiteOM2Impl < > : Sized + IElementBehaviorSiteOMImpl where { fn GetDefaults ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IElementBehaviorSiteOM2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IElementBehaviorSiteOM2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IElementBehaviorSiteOM2Vtbl < > { unsafe extern "system" fn GetDefaults < Impl : IElementBehaviorSiteOM2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppdefaults : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , GetDefaults : GetDefaults :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IElementBehaviorSiteOM2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IElementBehaviorSiteRenderImpl < > : Sized where { fn Invalidate ( ) ; fn InvalidateRenderInfo ( ) ; fn InvalidateStyle ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IElementBehaviorSiteRenderVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IElementBehaviorSiteRenderImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IElementBehaviorSiteRenderVtbl < > { unsafe extern "system" fn Invalidate < Impl : IElementBehaviorSiteRenderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , prect : * const super::super::Foundation:: RECT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn InvalidateRenderInfo < Impl : IElementBehaviorSiteRenderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn InvalidateStyle < Impl : IElementBehaviorSiteRenderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Invalidate : Invalidate :: < Impl , IMPL_OFFSET > , InvalidateRenderInfo : InvalidateRenderInfo :: < Impl , IMPL_OFFSET > , InvalidateStyle : InvalidateStyle :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IElementBehaviorSiteRender < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_System_Com" ) ] pub trait IElementBehaviorSubmitImpl < > : Sized where { fn GetSubmitInfo ( ) ; fn Reset ( ) ; } # [ cfg ( feature ="Win32_System_Com" ) ] impl < > IElementBehaviorSubmitVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IElementBehaviorSubmitImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IElementBehaviorSubmitVtbl < > { unsafe extern "system" fn GetSubmitInfo < Impl : IElementBehaviorSubmitImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psubmitdata : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Reset < Impl : IElementBehaviorSubmitImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetSubmitInfo : GetSubmitInfo :: < Impl , IMPL_OFFSET > , Reset : Reset :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IElementBehaviorSubmit < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IElementNamespaceImpl < > : Sized where { fn AddTag ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IElementNamespaceVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IElementNamespaceImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IElementNamespaceVtbl < > { unsafe extern "system" fn AddTag < Impl : IElementNamespaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrtagname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , lflags : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , AddTag : AddTag :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IElementNamespace < > as :: windows :: core :: Interface > :: IID } } pub trait IElementNamespaceFactoryImpl < > : Sized where { fn Create ( ) ; } impl < > IElementNamespaceFactoryVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IElementNamespaceFactoryImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IElementNamespaceFactoryVtbl < > { unsafe extern "system" fn Create < Impl : IElementNamespaceFactoryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pnamespace : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Create : Create :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IElementNamespaceFactory < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IElementNamespaceFactory2Impl < > : Sized + IElementNamespaceFactoryImpl where { fn CreateWithImplementation ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IElementNamespaceFactory2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IElementNamespaceFactory2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IElementNamespaceFactory2Vtbl < > { unsafe extern "system" fn CreateWithImplementation < Impl : IElementNamespaceFactory2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pnamespace : :: windows :: core :: RawPtr , bstrimplementation : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , CreateWithImplementation : CreateWithImplementation :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IElementNamespaceFactory2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IElementNamespaceFactoryCallbackImpl < > : Sized where { fn Resolve ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IElementNamespaceFactoryCallbackVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IElementNamespaceFactoryCallbackImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IElementNamespaceFactoryCallbackVtbl < > { unsafe extern "system" fn Resolve < Impl : IElementNamespaceFactoryCallbackImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrnamespace : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , bstrtagname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , bstrattrs : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pnamespace : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Resolve : Resolve :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IElementNamespaceFactoryCallback < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IElementNamespaceTableImpl < > : Sized where { fn AddNamespace ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IElementNamespaceTableVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IElementNamespaceTableImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IElementNamespaceTableVtbl < > { unsafe extern "system" fn AddNamespace < Impl : IElementNamespaceTableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrnamespace : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , bstrurn : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , lflags : i32 , pvarfactory : * const super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , AddNamespace : AddNamespace :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IElementNamespaceTable < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IElementSegmentImpl < > : Sized + ISegmentImpl where { fn GetElement ( ) ; fn SetPrimary ( ) ; fn IsPrimary ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IElementSegmentVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IElementSegmentImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IElementSegmentVtbl < > { unsafe extern "system" fn GetElement < Impl : IElementSegmentImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppielement : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetPrimary < Impl : IElementSegmentImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fprimary : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsPrimary < Impl : IElementSegmentImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfprimary : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , GetElement : GetElement :: < Impl , IMPL_OFFSET > , SetPrimary : SetPrimary :: < Impl , IMPL_OFFSET > , IsPrimary : IsPrimary :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IElementSegment < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IElementSelectorImpl < > : Sized + IDispatchImpl where { fn querySelector ( ) ; fn querySelectorAll ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IElementSelectorVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IElementSelectorImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IElementSelectorVtbl < > { unsafe extern "system" fn querySelector < Impl : IElementSelectorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pel : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn querySelectorAll < Impl : IElementSelectorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pel : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , querySelector : querySelector :: < Impl , IMPL_OFFSET > , querySelectorAll : querySelectorAll :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IElementSelector < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IElementTraversalImpl < > : Sized + IDispatchImpl where { fn firstElementChild ( ) ; fn lastElementChild ( ) ; fn previousElementSibling ( ) ; fn nextElementSibling ( ) ; fn childElementCount ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IElementTraversalVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IElementTraversalImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IElementTraversalVtbl < > { unsafe extern "system" fn firstElementChild < Impl : IElementTraversalImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn lastElementChild < Impl : IElementTraversalImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn previousElementSibling < Impl : IElementTraversalImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn nextElementSibling < Impl : IElementTraversalImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn childElementCount < Impl : IElementTraversalImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , firstElementChild : firstElementChild :: < Impl , IMPL_OFFSET > , lastElementChild : lastElementChild :: < Impl , IMPL_OFFSET > , previousElementSibling : previousElementSibling :: < Impl , IMPL_OFFSET > , nextElementSibling : nextElementSibling :: < Impl , IMPL_OFFSET > , childElementCount : childElementCount :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IElementTraversal < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IEnumManagerFramesImpl < > : Sized where { fn Next ( ) ; fn Count ( ) ; fn Skip ( ) ; fn Reset ( ) ; fn Clone ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IEnumManagerFramesVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IEnumManagerFramesImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IEnumManagerFramesVtbl < > { unsafe extern "system" fn Next < Impl : IEnumManagerFramesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , celt : u32 , ppwindows : * mut * mut super::super::Foundation:: HWND , pceltfetched : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Count < Impl : IEnumManagerFramesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcelt : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Skip < Impl : IEnumManagerFramesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , celt : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Reset < Impl : IEnumManagerFramesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Clone < Impl : IEnumManagerFramesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppenum : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Next : Next :: < Impl , IMPL_OFFSET > , Count : Count :: < Impl , IMPL_OFFSET > , Skip : Skip :: < Impl , IMPL_OFFSET > , Reset : Reset :: < Impl , IMPL_OFFSET > , Clone : Clone :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IEnumManagerFrames < > as :: windows :: core :: Interface > :: IID } } pub trait IEnumOpenServiceActivityImpl < > : Sized where { fn Next ( ) ; fn Skip ( ) ; fn Reset ( ) ; fn Clone ( ) ; } impl < > IEnumOpenServiceActivityVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IEnumOpenServiceActivityImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IEnumOpenServiceActivityVtbl < > { unsafe extern "system" fn Next < Impl : IEnumOpenServiceActivityImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , celt : u32 , rgelt : * mut :: windows :: core :: RawPtr , pceltfetched : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Skip < Impl : IEnumOpenServiceActivityImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , celt : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Reset < Impl : IEnumOpenServiceActivityImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Clone < Impl : IEnumOpenServiceActivityImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppenum : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Next : Next :: < Impl , IMPL_OFFSET > , Skip : Skip :: < Impl , IMPL_OFFSET > , Reset : Reset :: < Impl , IMPL_OFFSET > , Clone : Clone :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IEnumOpenServiceActivity < > as :: windows :: core :: Interface > :: IID } } pub trait IEnumOpenServiceActivityCategoryImpl < > : Sized where { fn Next ( ) ; fn Skip ( ) ; fn Reset ( ) ; fn Clone ( ) ; } impl < > IEnumOpenServiceActivityCategoryVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IEnumOpenServiceActivityCategoryImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IEnumOpenServiceActivityCategoryVtbl < > { unsafe extern "system" fn Next < Impl : IEnumOpenServiceActivityCategoryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , celt : u32 , rgelt : * mut :: windows :: core :: RawPtr , pceltfetched : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Skip < Impl : IEnumOpenServiceActivityCategoryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , celt : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Reset < Impl : IEnumOpenServiceActivityCategoryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Clone < Impl : IEnumOpenServiceActivityCategoryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppenum : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Next : Next :: < Impl , IMPL_OFFSET > , Skip : Skip :: < Impl , IMPL_OFFSET > , Reset : Reset :: < Impl , IMPL_OFFSET > , Clone : Clone :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IEnumOpenServiceActivityCategory < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IEnumPrivacyRecordsImpl < > : Sized where { fn Reset ( ) ; fn GetSize ( ) ; fn GetPrivacyImpacted ( ) ; fn Next ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IEnumPrivacyRecordsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IEnumPrivacyRecordsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IEnumPrivacyRecordsVtbl < > { unsafe extern "system" fn Reset < Impl : IEnumPrivacyRecordsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetSize < Impl : IEnumPrivacyRecordsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psize : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetPrivacyImpacted < Impl : IEnumPrivacyRecordsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pstate : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Next < Impl : IEnumPrivacyRecordsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrurl : * mut super::super::Foundation:: BSTR , pbstrpolicyref : * mut super::super::Foundation:: BSTR , pdwreserved : * mut i32 , pdwprivacyflags : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Reset : Reset :: < Impl , IMPL_OFFSET > , GetSize : GetSize :: < Impl , IMPL_OFFSET > , GetPrivacyImpacted : GetPrivacyImpacted :: < Impl , IMPL_OFFSET > , Next : Next :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IEnumPrivacyRecords < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IEnumSTATURLImpl < > : Sized where { fn Next ( ) ; fn Skip ( ) ; fn Reset ( ) ; fn Clone ( ) ; fn SetFilter ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IEnumSTATURLVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IEnumSTATURLImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IEnumSTATURLVtbl < > { unsafe extern "system" fn Next < Impl : IEnumSTATURLImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , celt : u32 , rgelt : * mut STATURL , pceltfetched : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Skip < Impl : IEnumSTATURLImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , celt : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Reset < Impl : IEnumSTATURLImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Clone < Impl : IEnumSTATURLImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppenum : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetFilter < Impl : IEnumSTATURLImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , poszfilter : super::super::Foundation:: PWSTR , dwflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Next : Next :: < Impl , IMPL_OFFSET > , Skip : Skip :: < Impl , IMPL_OFFSET > , Reset : Reset :: < Impl , IMPL_OFFSET > , Clone : Clone :: < Impl , IMPL_OFFSET > , SetFilter : SetFilter :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IEnumSTATURL < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IEventExceptionImpl < > : Sized + IDispatchImpl where { fn Setcode ( ) ; fn code ( ) ; fn message ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IEventExceptionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IEventExceptionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IEventExceptionVtbl < > { unsafe extern "system" fn Setcode < Impl : IEventExceptionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn code < Impl : IEventExceptionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn message < Impl : IEventExceptionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setcode : Setcode :: < Impl , IMPL_OFFSET > , code : code :: < Impl , IMPL_OFFSET > , message : message :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IEventException < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IEventTargetImpl < > : Sized + IDispatchImpl where { fn addEventListener ( ) ; fn removeEventListener ( ) ; fn dispatchEvent ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IEventTargetVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IEventTargetImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IEventTargetVtbl < > { unsafe extern "system" fn addEventListener < Impl : IEventTargetImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , r#type : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , listener : :: windows :: core :: RawPtr , usecapture : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn removeEventListener < Impl : IEventTargetImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , r#type : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , listener : :: windows :: core :: RawPtr , usecapture : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn dispatchEvent < Impl : IEventTargetImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , evt : :: windows :: core :: RawPtr , pfresult : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , addEventListener : addEventListener :: < Impl , IMPL_OFFSET > , removeEventListener : removeEventListener :: < Impl , IMPL_OFFSET > , dispatchEvent : dispatchEvent :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IEventTarget < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IEventTarget2Impl < > : Sized where { fn GetRegisteredEventTypes ( ) ; fn GetListenersForType ( ) ; fn RegisterForDOMEventListeners ( ) ; fn UnregisterForDOMEventListeners ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IEventTarget2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IEventTarget2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IEventTarget2Vtbl < > { unsafe extern "system" fn GetRegisteredEventTypes < Impl : IEventTarget2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppeventtypearray : * mut * mut super::super::System::Com:: SAFEARRAY , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetListenersForType < Impl : IEventTarget2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszeventtype : super::super::Foundation:: PWSTR , ppeventhandlerarray : * mut * mut super::super::System::Com:: SAFEARRAY , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RegisterForDOMEventListeners < Impl : IEventTarget2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcallback : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UnregisterForDOMEventListeners < Impl : IEventTarget2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcallback : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetRegisteredEventTypes : GetRegisteredEventTypes :: < Impl , IMPL_OFFSET > , GetListenersForType : GetListenersForType :: < Impl , IMPL_OFFSET > , RegisterForDOMEventListeners : RegisterForDOMEventListeners :: < Impl , IMPL_OFFSET > , UnregisterForDOMEventListeners : UnregisterForDOMEventListeners :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IEventTarget2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IExtensionValidationImpl < > : Sized where { fn Validate ( ) ; fn DisplayName ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IExtensionValidationVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IExtensionValidationImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IExtensionValidationVtbl < > { unsafe extern "system" fn Validate < Impl : IExtensionValidationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , extensionguid : * const :: windows :: core :: GUID , extensionmodulepath : super::super::Foundation:: PWSTR , extensionfileversionms : u32 , extensionfileversionls : u32 , htmldocumenttop : :: windows :: core :: RawPtr , htmldocumentsubframe : :: windows :: core :: RawPtr , htmlelement : :: windows :: core :: RawPtr , contexts : ExtensionValidationContexts , results : * mut ExtensionValidationResults , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DisplayName < Impl : IExtensionValidationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , displayname : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Validate : Validate :: < Impl , IMPL_OFFSET > , DisplayName : DisplayName :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IExtensionValidation < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IFontNamesImpl < > : Sized + IDispatchImpl where { fn _NewEnum ( ) ; fn Count ( ) ; fn Item ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IFontNamesVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IFontNamesImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IFontNamesVtbl < > { unsafe extern "system" fn _NewEnum < Impl : IFontNamesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Count < Impl : IFontNamesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Item < Impl : IFontNamesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarindex : * const super::super::System::Com:: VARIANT , pbstrfontname : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , _NewEnum : _NewEnum :: < Impl , IMPL_OFFSET > , Count : Count :: < Impl , IMPL_OFFSET > , Item : Item :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IFontNames < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IGetSVGDocumentImpl < > : Sized + IDispatchImpl where { fn getSVGDocument ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IGetSVGDocumentVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IGetSVGDocumentImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IGetSVGDocumentVtbl < > { unsafe extern "system" fn getSVGDocument < Impl : IGetSVGDocumentImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppsvgdocument : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , getSVGDocument : getSVGDocument :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IGetSVGDocument < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTCAttachBehaviorImpl < > : Sized + IDispatchImpl where { fn fireEvent ( ) ; fn detachEvent ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTCAttachBehaviorVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTCAttachBehaviorImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTCAttachBehaviorVtbl < > { unsafe extern "system" fn fireEvent < Impl : IHTCAttachBehaviorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , evt : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn detachEvent < Impl : IHTCAttachBehaviorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , fireEvent : fireEvent :: < Impl , IMPL_OFFSET > , detachEvent : detachEvent :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTCAttachBehavior < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTCAttachBehavior2Impl < > : Sized + IDispatchImpl where { fn fireEvent ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTCAttachBehavior2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTCAttachBehavior2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTCAttachBehavior2Vtbl < > { unsafe extern "system" fn fireEvent < Impl : IHTCAttachBehavior2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , evt : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , fireEvent : fireEvent :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTCAttachBehavior2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTCDefaultDispatchImpl < > : Sized + IDispatchImpl where { fn element ( ) ; fn createEventObject ( ) ; fn defaults ( ) ; fn document ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTCDefaultDispatchVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTCDefaultDispatchImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTCDefaultDispatchVtbl < > { unsafe extern "system" fn element < Impl : IHTCDefaultDispatchImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createEventObject < Impl : IHTCDefaultDispatchImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , eventobj : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn defaults < Impl : IHTCDefaultDispatchImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn document < Impl : IHTCDefaultDispatchImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , element : element :: < Impl , IMPL_OFFSET > , createEventObject : createEventObject :: < Impl , IMPL_OFFSET > , defaults : defaults :: < Impl , IMPL_OFFSET > , document : document :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTCDefaultDispatch < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTCDescBehaviorImpl < > : Sized + IDispatchImpl where { fn urn ( ) ; fn name ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTCDescBehaviorVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTCDescBehaviorImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTCDescBehaviorVtbl < > { unsafe extern "system" fn urn < Impl : IHTCDescBehaviorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn name < Impl : IHTCDescBehaviorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , urn : urn :: < Impl , IMPL_OFFSET > , name : name :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTCDescBehavior < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTCEventBehaviorImpl < > : Sized + IDispatchImpl where { fn fire ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTCEventBehaviorVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTCEventBehaviorImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTCEventBehaviorVtbl < > { unsafe extern "system" fn fire < Impl : IHTCEventBehaviorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvar : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , fire : fire :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTCEventBehavior < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTCMethodBehaviorImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTCMethodBehaviorVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTCMethodBehaviorImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTCMethodBehaviorVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTCMethodBehavior < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTCPropertyBehaviorImpl < > : Sized + IDispatchImpl where { fn fireChange ( ) ; fn Setvalue ( ) ; fn value ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTCPropertyBehaviorVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTCPropertyBehaviorImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTCPropertyBehaviorVtbl < > { unsafe extern "system" fn fireChange < Impl : IHTCPropertyBehaviorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setvalue < Impl : IHTCPropertyBehaviorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn value < Impl : IHTCPropertyBehaviorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , fireChange : fireChange :: < Impl , IMPL_OFFSET > , Setvalue : Setvalue :: < Impl , IMPL_OFFSET > , value : value :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTCPropertyBehavior < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLAnchorElementImpl < > : Sized + IDispatchImpl where { fn Sethref ( ) ; fn href ( ) ; fn Settarget ( ) ; fn target ( ) ; fn Setrel ( ) ; fn rel ( ) ; fn Setrev ( ) ; fn rev ( ) ; fn Seturn ( ) ; fn urn ( ) ; fn SetMethods ( ) ; fn Methods ( ) ; fn Setname ( ) ; fn name ( ) ; fn Sethost ( ) ; fn host ( ) ; fn Sethostname ( ) ; fn hostname ( ) ; fn Setpathname ( ) ; fn pathname ( ) ; fn Setport ( ) ; fn port ( ) ; fn Setprotocol ( ) ; fn protocol ( ) ; fn Setsearch ( ) ; fn search ( ) ; fn Sethash ( ) ; fn hash ( ) ; fn Setonblur ( ) ; fn onblur ( ) ; fn Setonfocus ( ) ; fn onfocus ( ) ; fn SetaccessKey ( ) ; fn accessKey ( ) ; fn protocolLong ( ) ; fn mimeType ( ) ; fn nameProp ( ) ; fn SettabIndex ( ) ; fn tabIndex ( ) ; fn focus ( ) ; fn blur ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLAnchorElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLAnchorElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLAnchorElementVtbl < > { unsafe extern "system" fn Sethref < Impl : IHTMLAnchorElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn href < Impl : IHTMLAnchorElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Settarget < Impl : IHTMLAnchorElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn target < Impl : IHTMLAnchorElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setrel < Impl : IHTMLAnchorElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn rel < Impl : IHTMLAnchorElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setrev < Impl : IHTMLAnchorElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn rev < Impl : IHTMLAnchorElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Seturn < Impl : IHTMLAnchorElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn urn < Impl : IHTMLAnchorElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetMethods < Impl : IHTMLAnchorElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Methods < Impl : IHTMLAnchorElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setname < Impl : IHTMLAnchorElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn name < Impl : IHTMLAnchorElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Sethost < Impl : IHTMLAnchorElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn host < Impl : IHTMLAnchorElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Sethostname < Impl : IHTMLAnchorElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn hostname < Impl : IHTMLAnchorElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setpathname < Impl : IHTMLAnchorElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn pathname < Impl : IHTMLAnchorElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setport < Impl : IHTMLAnchorElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn port < Impl : IHTMLAnchorElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setprotocol < Impl : IHTMLAnchorElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn protocol < Impl : IHTMLAnchorElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setsearch < Impl : IHTMLAnchorElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn search < Impl : IHTMLAnchorElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Sethash < Impl : IHTMLAnchorElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn hash < Impl : IHTMLAnchorElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonblur < Impl : IHTMLAnchorElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onblur < Impl : IHTMLAnchorElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonfocus < Impl : IHTMLAnchorElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onfocus < Impl : IHTMLAnchorElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetaccessKey < Impl : IHTMLAnchorElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn accessKey < Impl : IHTMLAnchorElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn protocolLong < Impl : IHTMLAnchorElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn mimeType < Impl : IHTMLAnchorElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn nameProp < Impl : IHTMLAnchorElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettabIndex < Impl : IHTMLAnchorElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn tabIndex < Impl : IHTMLAnchorElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn focus < Impl : IHTMLAnchorElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn blur < Impl : IHTMLAnchorElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Sethref : Sethref :: < Impl , IMPL_OFFSET > , href : href :: < Impl , IMPL_OFFSET > , Settarget : Settarget :: < Impl , IMPL_OFFSET > , target : target :: < Impl , IMPL_OFFSET > , Setrel : Setrel :: < Impl , IMPL_OFFSET > , rel : rel :: < Impl , IMPL_OFFSET > , Setrev : Setrev :: < Impl , IMPL_OFFSET > , rev : rev :: < Impl , IMPL_OFFSET > , Seturn : Seturn :: < Impl , IMPL_OFFSET > , urn : urn :: < Impl , IMPL_OFFSET > , SetMethods : SetMethods :: < Impl , IMPL_OFFSET > , Methods : Methods :: < Impl , IMPL_OFFSET > , Setname : Setname :: < Impl , IMPL_OFFSET > , name : name :: < Impl , IMPL_OFFSET > , Sethost : Sethost :: < Impl , IMPL_OFFSET > , host : host :: < Impl , IMPL_OFFSET > , Sethostname : Sethostname :: < Impl , IMPL_OFFSET > , hostname : hostname :: < Impl , IMPL_OFFSET > , Setpathname : Setpathname :: < Impl , IMPL_OFFSET > , pathname : pathname :: < Impl , IMPL_OFFSET > , Setport : Setport :: < Impl , IMPL_OFFSET > , port : port :: < Impl , IMPL_OFFSET > , Setprotocol : Setprotocol :: < Impl , IMPL_OFFSET > , protocol : protocol :: < Impl , IMPL_OFFSET > , Setsearch : Setsearch :: < Impl , IMPL_OFFSET > , search : search :: < Impl , IMPL_OFFSET > , Sethash : Sethash :: < Impl , IMPL_OFFSET > , hash : hash :: < Impl , IMPL_OFFSET > , Setonblur : Setonblur :: < Impl , IMPL_OFFSET > , onblur : onblur :: < Impl , IMPL_OFFSET > , Setonfocus : Setonfocus :: < Impl , IMPL_OFFSET > , onfocus : onfocus :: < Impl , IMPL_OFFSET > , SetaccessKey : SetaccessKey :: < Impl , IMPL_OFFSET > , accessKey : accessKey :: < Impl , IMPL_OFFSET > , protocolLong : protocolLong :: < Impl , IMPL_OFFSET > , mimeType : mimeType :: < Impl , IMPL_OFFSET > , nameProp : nameProp :: < Impl , IMPL_OFFSET > , SettabIndex : SettabIndex :: < Impl , IMPL_OFFSET > , tabIndex : tabIndex :: < Impl , IMPL_OFFSET > , focus : focus :: < Impl , IMPL_OFFSET > , blur : blur :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLAnchorElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLAnchorElement2Impl < > : Sized + IDispatchImpl where { fn Setcharset ( ) ; fn charset ( ) ; fn Setcoords ( ) ; fn coords ( ) ; fn Sethreflang ( ) ; fn hreflang ( ) ; fn Setshape ( ) ; fn shape ( ) ; fn Settype ( ) ; fn r#type ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLAnchorElement2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLAnchorElement2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLAnchorElement2Vtbl < > { unsafe extern "system" fn Setcharset < Impl : IHTMLAnchorElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn charset < Impl : IHTMLAnchorElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setcoords < Impl : IHTMLAnchorElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn coords < Impl : IHTMLAnchorElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Sethreflang < Impl : IHTMLAnchorElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn hreflang < Impl : IHTMLAnchorElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setshape < Impl : IHTMLAnchorElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn shape < Impl : IHTMLAnchorElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Settype < Impl : IHTMLAnchorElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn r#type < Impl : IHTMLAnchorElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setcharset : Setcharset :: < Impl , IMPL_OFFSET > , charset : charset :: < Impl , IMPL_OFFSET > , Setcoords : Setcoords :: < Impl , IMPL_OFFSET > , coords : coords :: < Impl , IMPL_OFFSET > , Sethreflang : Sethreflang :: < Impl , IMPL_OFFSET > , hreflang : hreflang :: < Impl , IMPL_OFFSET > , Setshape : Setshape :: < Impl , IMPL_OFFSET > , shape : shape :: < Impl , IMPL_OFFSET > , Settype : Settype :: < Impl , IMPL_OFFSET > , r#type : r#type :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLAnchorElement2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLAnchorElement3Impl < > : Sized + IDispatchImpl where { fn Setshape ( ) ; fn shape ( ) ; fn Setcoords ( ) ; fn coords ( ) ; fn Sethref ( ) ; fn href ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLAnchorElement3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLAnchorElement3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLAnchorElement3Vtbl < > { unsafe extern "system" fn Setshape < Impl : IHTMLAnchorElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn shape < Impl : IHTMLAnchorElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setcoords < Impl : IHTMLAnchorElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn coords < Impl : IHTMLAnchorElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Sethref < Impl : IHTMLAnchorElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn href < Impl : IHTMLAnchorElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setshape : Setshape :: < Impl , IMPL_OFFSET > , shape : shape :: < Impl , IMPL_OFFSET > , Setcoords : Setcoords :: < Impl , IMPL_OFFSET > , coords : coords :: < Impl , IMPL_OFFSET > , Sethref : Sethref :: < Impl , IMPL_OFFSET > , href : href :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLAnchorElement3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLAppBehaviorImpl < > : Sized + IDispatchImpl where { fn SetapplicationName ( ) ; fn applicationName ( ) ; fn Setversion ( ) ; fn version ( ) ; fn Seticon ( ) ; fn icon ( ) ; fn SetsingleInstance ( ) ; fn singleInstance ( ) ; fn SetminimizeButton ( ) ; fn minimizeButton ( ) ; fn SetmaximizeButton ( ) ; fn maximizeButton ( ) ; fn Setborder ( ) ; fn border ( ) ; fn SetborderStyle ( ) ; fn borderStyle ( ) ; fn SetsysMenu ( ) ; fn sysMenu ( ) ; fn Setcaption ( ) ; fn caption ( ) ; fn SetwindowState ( ) ; fn windowState ( ) ; fn SetshowInTaskBar ( ) ; fn showInTaskBar ( ) ; fn commandLine ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLAppBehaviorVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLAppBehaviorImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLAppBehaviorVtbl < > { unsafe extern "system" fn SetapplicationName < Impl : IHTMLAppBehaviorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn applicationName < Impl : IHTMLAppBehaviorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setversion < Impl : IHTMLAppBehaviorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn version < Impl : IHTMLAppBehaviorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Seticon < Impl : IHTMLAppBehaviorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn icon < Impl : IHTMLAppBehaviorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetsingleInstance < Impl : IHTMLAppBehaviorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn singleInstance < Impl : IHTMLAppBehaviorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetminimizeButton < Impl : IHTMLAppBehaviorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn minimizeButton < Impl : IHTMLAppBehaviorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmaximizeButton < Impl : IHTMLAppBehaviorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn maximizeButton < Impl : IHTMLAppBehaviorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setborder < Impl : IHTMLAppBehaviorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn border < Impl : IHTMLAppBehaviorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderStyle < Impl : IHTMLAppBehaviorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderStyle < Impl : IHTMLAppBehaviorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetsysMenu < Impl : IHTMLAppBehaviorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn sysMenu < Impl : IHTMLAppBehaviorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setcaption < Impl : IHTMLAppBehaviorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn caption < Impl : IHTMLAppBehaviorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwindowState < Impl : IHTMLAppBehaviorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn windowState < Impl : IHTMLAppBehaviorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetshowInTaskBar < Impl : IHTMLAppBehaviorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn showInTaskBar < Impl : IHTMLAppBehaviorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn commandLine < Impl : IHTMLAppBehaviorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetapplicationName : SetapplicationName :: < Impl , IMPL_OFFSET > , applicationName : applicationName :: < Impl , IMPL_OFFSET > , Setversion : Setversion :: < Impl , IMPL_OFFSET > , version : version :: < Impl , IMPL_OFFSET > , Seticon : Seticon :: < Impl , IMPL_OFFSET > , icon : icon :: < Impl , IMPL_OFFSET > , SetsingleInstance : SetsingleInstance :: < Impl , IMPL_OFFSET > , singleInstance : singleInstance :: < Impl , IMPL_OFFSET > , SetminimizeButton : SetminimizeButton :: < Impl , IMPL_OFFSET > , minimizeButton : minimizeButton :: < Impl , IMPL_OFFSET > , SetmaximizeButton : SetmaximizeButton :: < Impl , IMPL_OFFSET > , maximizeButton : maximizeButton :: < Impl , IMPL_OFFSET > , Setborder : Setborder :: < Impl , IMPL_OFFSET > , border : border :: < Impl , IMPL_OFFSET > , SetborderStyle : SetborderStyle :: < Impl , IMPL_OFFSET > , borderStyle : borderStyle :: < Impl , IMPL_OFFSET > , SetsysMenu : SetsysMenu :: < Impl , IMPL_OFFSET > , sysMenu : sysMenu :: < Impl , IMPL_OFFSET > , Setcaption : Setcaption :: < Impl , IMPL_OFFSET > , caption : caption :: < Impl , IMPL_OFFSET > , SetwindowState : SetwindowState :: < Impl , IMPL_OFFSET > , windowState : windowState :: < Impl , IMPL_OFFSET > , SetshowInTaskBar : SetshowInTaskBar :: < Impl , IMPL_OFFSET > , showInTaskBar : showInTaskBar :: < Impl , IMPL_OFFSET > , commandLine : commandLine :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLAppBehavior < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLAppBehavior2Impl < > : Sized + IDispatchImpl where { fn SetcontextMenu ( ) ; fn contextMenu ( ) ; fn SetinnerBorder ( ) ; fn innerBorder ( ) ; fn Setscroll ( ) ; fn scroll ( ) ; fn SetscrollFlat ( ) ; fn scrollFlat ( ) ; fn Setselection ( ) ; fn selection ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLAppBehavior2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLAppBehavior2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLAppBehavior2Vtbl < > { unsafe extern "system" fn SetcontextMenu < Impl : IHTMLAppBehavior2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn contextMenu < Impl : IHTMLAppBehavior2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetinnerBorder < Impl : IHTMLAppBehavior2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn innerBorder < Impl : IHTMLAppBehavior2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setscroll < Impl : IHTMLAppBehavior2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scroll < Impl : IHTMLAppBehavior2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetscrollFlat < Impl : IHTMLAppBehavior2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scrollFlat < Impl : IHTMLAppBehavior2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setselection < Impl : IHTMLAppBehavior2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn selection < Impl : IHTMLAppBehavior2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetcontextMenu : SetcontextMenu :: < Impl , IMPL_OFFSET > , contextMenu : contextMenu :: < Impl , IMPL_OFFSET > , SetinnerBorder : SetinnerBorder :: < Impl , IMPL_OFFSET > , innerBorder : innerBorder :: < Impl , IMPL_OFFSET > , Setscroll : Setscroll :: < Impl , IMPL_OFFSET > , scroll : scroll :: < Impl , IMPL_OFFSET > , SetscrollFlat : SetscrollFlat :: < Impl , IMPL_OFFSET > , scrollFlat : scrollFlat :: < Impl , IMPL_OFFSET > , Setselection : Setselection :: < Impl , IMPL_OFFSET > , selection : selection :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLAppBehavior2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLAppBehavior3Impl < > : Sized + IDispatchImpl where { fn Setnavigable ( ) ; fn navigable ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLAppBehavior3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLAppBehavior3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLAppBehavior3Vtbl < > { unsafe extern "system" fn Setnavigable < Impl : IHTMLAppBehavior3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn navigable < Impl : IHTMLAppBehavior3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setnavigable : Setnavigable :: < Impl , IMPL_OFFSET > , navigable : navigable :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLAppBehavior3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLApplicationCacheImpl < > : Sized + IDispatchImpl where { fn status ( ) ; fn Setonchecking ( ) ; fn onchecking ( ) ; fn Setonerror ( ) ; fn onerror ( ) ; fn Setonnoupdate ( ) ; fn onnoupdate ( ) ; fn Setondownloading ( ) ; fn ondownloading ( ) ; fn Setonprogress ( ) ; fn onprogress ( ) ; fn Setonupdateready ( ) ; fn onupdateready ( ) ; fn Setoncached ( ) ; fn oncached ( ) ; fn Setonobsolete ( ) ; fn onobsolete ( ) ; fn update ( ) ; fn swapCache ( ) ; fn abort ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLApplicationCacheVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLApplicationCacheImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLApplicationCacheVtbl < > { unsafe extern "system" fn status < Impl : IHTMLApplicationCacheImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonchecking < Impl : IHTMLApplicationCacheImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onchecking < Impl : IHTMLApplicationCacheImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonerror < Impl : IHTMLApplicationCacheImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onerror < Impl : IHTMLApplicationCacheImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonnoupdate < Impl : IHTMLApplicationCacheImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onnoupdate < Impl : IHTMLApplicationCacheImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setondownloading < Impl : IHTMLApplicationCacheImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ondownloading < Impl : IHTMLApplicationCacheImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonprogress < Impl : IHTMLApplicationCacheImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onprogress < Impl : IHTMLApplicationCacheImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonupdateready < Impl : IHTMLApplicationCacheImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onupdateready < Impl : IHTMLApplicationCacheImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setoncached < Impl : IHTMLApplicationCacheImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn oncached < Impl : IHTMLApplicationCacheImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonobsolete < Impl : IHTMLApplicationCacheImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onobsolete < Impl : IHTMLApplicationCacheImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn update < Impl : IHTMLApplicationCacheImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn swapCache < Impl : IHTMLApplicationCacheImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn abort < Impl : IHTMLApplicationCacheImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , status : status :: < Impl , IMPL_OFFSET > , Setonchecking : Setonchecking :: < Impl , IMPL_OFFSET > , onchecking : onchecking :: < Impl , IMPL_OFFSET > , Setonerror : Setonerror :: < Impl , IMPL_OFFSET > , onerror : onerror :: < Impl , IMPL_OFFSET > , Setonnoupdate : Setonnoupdate :: < Impl , IMPL_OFFSET > , onnoupdate : onnoupdate :: < Impl , IMPL_OFFSET > , Setondownloading : Setondownloading :: < Impl , IMPL_OFFSET > , ondownloading : ondownloading :: < Impl , IMPL_OFFSET > , Setonprogress : Setonprogress :: < Impl , IMPL_OFFSET > , onprogress : onprogress :: < Impl , IMPL_OFFSET > , Setonupdateready : Setonupdateready :: < Impl , IMPL_OFFSET > , onupdateready : onupdateready :: < Impl , IMPL_OFFSET > , Setoncached : Setoncached :: < Impl , IMPL_OFFSET > , oncached : oncached :: < Impl , IMPL_OFFSET > , Setonobsolete : Setonobsolete :: < Impl , IMPL_OFFSET > , onobsolete : onobsolete :: < Impl , IMPL_OFFSET > , update : update :: < Impl , IMPL_OFFSET > , swapCache : swapCache :: < Impl , IMPL_OFFSET > , abort : abort :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLApplicationCache < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLAreaElementImpl < > : Sized + IDispatchImpl where { fn Setshape ( ) ; fn shape ( ) ; fn Setcoords ( ) ; fn coords ( ) ; fn Sethref ( ) ; fn href ( ) ; fn Settarget ( ) ; fn target ( ) ; fn Setalt ( ) ; fn alt ( ) ; fn SetnoHref ( ) ; fn noHref ( ) ; fn Sethost ( ) ; fn host ( ) ; fn Sethostname ( ) ; fn hostname ( ) ; fn Setpathname ( ) ; fn pathname ( ) ; fn Setport ( ) ; fn port ( ) ; fn Setprotocol ( ) ; fn protocol ( ) ; fn Setsearch ( ) ; fn search ( ) ; fn Sethash ( ) ; fn hash ( ) ; fn Setonblur ( ) ; fn onblur ( ) ; fn Setonfocus ( ) ; fn onfocus ( ) ; fn SettabIndex ( ) ; fn tabIndex ( ) ; fn focus ( ) ; fn blur ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLAreaElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLAreaElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLAreaElementVtbl < > { unsafe extern "system" fn Setshape < Impl : IHTMLAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn shape < Impl : IHTMLAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setcoords < Impl : IHTMLAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn coords < Impl : IHTMLAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Sethref < Impl : IHTMLAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn href < Impl : IHTMLAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Settarget < Impl : IHTMLAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn target < Impl : IHTMLAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setalt < Impl : IHTMLAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn alt < Impl : IHTMLAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetnoHref < Impl : IHTMLAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn noHref < Impl : IHTMLAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Sethost < Impl : IHTMLAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn host < Impl : IHTMLAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Sethostname < Impl : IHTMLAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn hostname < Impl : IHTMLAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setpathname < Impl : IHTMLAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn pathname < Impl : IHTMLAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setport < Impl : IHTMLAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn port < Impl : IHTMLAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setprotocol < Impl : IHTMLAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn protocol < Impl : IHTMLAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setsearch < Impl : IHTMLAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn search < Impl : IHTMLAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Sethash < Impl : IHTMLAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn hash < Impl : IHTMLAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonblur < Impl : IHTMLAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onblur < Impl : IHTMLAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonfocus < Impl : IHTMLAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onfocus < Impl : IHTMLAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettabIndex < Impl : IHTMLAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn tabIndex < Impl : IHTMLAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn focus < Impl : IHTMLAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn blur < Impl : IHTMLAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setshape : Setshape :: < Impl , IMPL_OFFSET > , shape : shape :: < Impl , IMPL_OFFSET > , Setcoords : Setcoords :: < Impl , IMPL_OFFSET > , coords : coords :: < Impl , IMPL_OFFSET > , Sethref : Sethref :: < Impl , IMPL_OFFSET > , href : href :: < Impl , IMPL_OFFSET > , Settarget : Settarget :: < Impl , IMPL_OFFSET > , target : target :: < Impl , IMPL_OFFSET > , Setalt : Setalt :: < Impl , IMPL_OFFSET > , alt : alt :: < Impl , IMPL_OFFSET > , SetnoHref : SetnoHref :: < Impl , IMPL_OFFSET > , noHref : noHref :: < Impl , IMPL_OFFSET > , Sethost : Sethost :: < Impl , IMPL_OFFSET > , host : host :: < Impl , IMPL_OFFSET > , Sethostname : Sethostname :: < Impl , IMPL_OFFSET > , hostname : hostname :: < Impl , IMPL_OFFSET > , Setpathname : Setpathname :: < Impl , IMPL_OFFSET > , pathname : pathname :: < Impl , IMPL_OFFSET > , Setport : Setport :: < Impl , IMPL_OFFSET > , port : port :: < Impl , IMPL_OFFSET > , Setprotocol : Setprotocol :: < Impl , IMPL_OFFSET > , protocol : protocol :: < Impl , IMPL_OFFSET > , Setsearch : Setsearch :: < Impl , IMPL_OFFSET > , search : search :: < Impl , IMPL_OFFSET > , Sethash : Sethash :: < Impl , IMPL_OFFSET > , hash : hash :: < Impl , IMPL_OFFSET > , Setonblur : Setonblur :: < Impl , IMPL_OFFSET > , onblur : onblur :: < Impl , IMPL_OFFSET > , Setonfocus : Setonfocus :: < Impl , IMPL_OFFSET > , onfocus : onfocus :: < Impl , IMPL_OFFSET > , SettabIndex : SettabIndex :: < Impl , IMPL_OFFSET > , tabIndex : tabIndex :: < Impl , IMPL_OFFSET > , focus : focus :: < Impl , IMPL_OFFSET > , blur : blur :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLAreaElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLAreaElement2Impl < > : Sized + IDispatchImpl where { fn Setshape ( ) ; fn shape ( ) ; fn Setcoords ( ) ; fn coords ( ) ; fn Sethref ( ) ; fn href ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLAreaElement2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLAreaElement2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLAreaElement2Vtbl < > { unsafe extern "system" fn Setshape < Impl : IHTMLAreaElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn shape < Impl : IHTMLAreaElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setcoords < Impl : IHTMLAreaElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn coords < Impl : IHTMLAreaElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Sethref < Impl : IHTMLAreaElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn href < Impl : IHTMLAreaElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setshape : Setshape :: < Impl , IMPL_OFFSET > , shape : shape :: < Impl , IMPL_OFFSET > , Setcoords : Setcoords :: < Impl , IMPL_OFFSET > , coords : coords :: < Impl , IMPL_OFFSET > , Sethref : Sethref :: < Impl , IMPL_OFFSET > , href : href :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLAreaElement2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLAreasCollectionImpl < > : Sized + IDispatchImpl where { fn Setlength ( ) ; fn length ( ) ; fn _newEnum ( ) ; fn item ( ) ; fn tags ( ) ; fn add ( ) ; fn remove ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLAreasCollectionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLAreasCollectionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLAreasCollectionVtbl < > { unsafe extern "system" fn Setlength < Impl : IHTMLAreasCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn length < Impl : IHTMLAreasCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _newEnum < Impl : IHTMLAreasCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn item < Impl : IHTMLAreasCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , name : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , index : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , pdisp : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn tags < Impl : IHTMLAreasCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , tagname : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , pdisp : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn add < Impl : IHTMLAreasCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , element : :: windows :: core :: RawPtr , before : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn remove < Impl : IHTMLAreasCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setlength : Setlength :: < Impl , IMPL_OFFSET > , length : length :: < Impl , IMPL_OFFSET > , _newEnum : _newEnum :: < Impl , IMPL_OFFSET > , item : item :: < Impl , IMPL_OFFSET > , tags : tags :: < Impl , IMPL_OFFSET > , add : add :: < Impl , IMPL_OFFSET > , remove : remove :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLAreasCollection < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLAreasCollection2Impl < > : Sized + IDispatchImpl where { fn urns ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLAreasCollection2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLAreasCollection2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLAreasCollection2Vtbl < > { unsafe extern "system" fn urns < Impl : IHTMLAreasCollection2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , urn : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , pdisp : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , urns : urns :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLAreasCollection2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLAreasCollection3Impl < > : Sized + IDispatchImpl where { fn namedItem ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLAreasCollection3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLAreasCollection3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLAreasCollection3Vtbl < > { unsafe extern "system" fn namedItem < Impl : IHTMLAreasCollection3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , name : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pdisp : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , namedItem : namedItem :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLAreasCollection3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLAreasCollection4Impl < > : Sized + IDispatchImpl where { fn length ( ) ; fn item ( ) ; fn namedItem ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLAreasCollection4Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLAreasCollection4Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLAreasCollection4Vtbl < > { unsafe extern "system" fn length < Impl : IHTMLAreasCollection4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn item < Impl : IHTMLAreasCollection4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , pnode : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn namedItem < Impl : IHTMLAreasCollection4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , name : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pnode : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , length : length :: < Impl , IMPL_OFFSET > , item : item :: < Impl , IMPL_OFFSET > , namedItem : namedItem :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLAreasCollection4 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLAttributeCollectionImpl < > : Sized + IDispatchImpl where { fn length ( ) ; fn _newEnum ( ) ; fn item ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLAttributeCollectionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLAttributeCollectionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLAttributeCollectionVtbl < > { unsafe extern "system" fn length < Impl : IHTMLAttributeCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _newEnum < Impl : IHTMLAttributeCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn item < Impl : IHTMLAttributeCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , name : * const super::super::System::Com:: VARIANT , pdisp : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , length : length :: < Impl , IMPL_OFFSET > , _newEnum : _newEnum :: < Impl , IMPL_OFFSET > , item : item :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLAttributeCollection < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLAttributeCollection2Impl < > : Sized + IDispatchImpl where { fn getNamedItem ( ) ; fn setNamedItem ( ) ; fn removeNamedItem ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLAttributeCollection2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLAttributeCollection2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLAttributeCollection2Vtbl < > { unsafe extern "system" fn getNamedItem < Impl : IHTMLAttributeCollection2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , newretnode : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn setNamedItem < Impl : IHTMLAttributeCollection2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppnode : :: windows :: core :: RawPtr , newretnode : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn removeNamedItem < Impl : IHTMLAttributeCollection2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , newretnode : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , getNamedItem : getNamedItem :: < Impl , IMPL_OFFSET > , setNamedItem : setNamedItem :: < Impl , IMPL_OFFSET > , removeNamedItem : removeNamedItem :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLAttributeCollection2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLAttributeCollection3Impl < > : Sized + IDispatchImpl where { fn getNamedItem ( ) ; fn setNamedItem ( ) ; fn removeNamedItem ( ) ; fn item ( ) ; fn length ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLAttributeCollection3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLAttributeCollection3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLAttributeCollection3Vtbl < > { unsafe extern "system" fn getNamedItem < Impl : IHTMLAttributeCollection3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ppnodeout : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn setNamedItem < Impl : IHTMLAttributeCollection3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pnodein : :: windows :: core :: RawPtr , ppnodeout : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn removeNamedItem < Impl : IHTMLAttributeCollection3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ppnodeout : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn item < Impl : IHTMLAttributeCollection3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , ppnodeout : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn length < Impl : IHTMLAttributeCollection3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , getNamedItem : getNamedItem :: < Impl , IMPL_OFFSET > , setNamedItem : setNamedItem :: < Impl , IMPL_OFFSET > , removeNamedItem : removeNamedItem :: < Impl , IMPL_OFFSET > , item : item :: < Impl , IMPL_OFFSET > , length : length :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLAttributeCollection3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLAttributeCollection4Impl < > : Sized + IDispatchImpl where { fn getNamedItemNS ( ) ; fn setNamedItemNS ( ) ; fn removeNamedItemNS ( ) ; fn getNamedItem ( ) ; fn setNamedItem ( ) ; fn removeNamedItem ( ) ; fn item ( ) ; fn length ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLAttributeCollection4Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLAttributeCollection4Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLAttributeCollection4Vtbl < > { unsafe extern "system" fn getNamedItemNS < Impl : IHTMLAttributeCollection4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarns : * const super::super::System::Com:: VARIANT , bstrname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ppnodeout : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn setNamedItemNS < Impl : IHTMLAttributeCollection4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pnodein : :: windows :: core :: RawPtr , ppnodeout : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn removeNamedItemNS < Impl : IHTMLAttributeCollection4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarns : * const super::super::System::Com:: VARIANT , bstrname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ppnodeout : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getNamedItem < Impl : IHTMLAttributeCollection4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ppnodeout : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn setNamedItem < Impl : IHTMLAttributeCollection4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pnodein : :: windows :: core :: RawPtr , ppnodeout : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn removeNamedItem < Impl : IHTMLAttributeCollection4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ppnodeout : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn item < Impl : IHTMLAttributeCollection4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , ppnodeout : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn length < Impl : IHTMLAttributeCollection4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , getNamedItemNS : getNamedItemNS :: < Impl , IMPL_OFFSET > , setNamedItemNS : setNamedItemNS :: < Impl , IMPL_OFFSET > , removeNamedItemNS : removeNamedItemNS :: < Impl , IMPL_OFFSET > , getNamedItem : getNamedItem :: < Impl , IMPL_OFFSET > , setNamedItem : setNamedItem :: < Impl , IMPL_OFFSET > , removeNamedItem : removeNamedItem :: < Impl , IMPL_OFFSET > , item : item :: < Impl , IMPL_OFFSET > , length : length :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLAttributeCollection4 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLAudioElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLAudioElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLAudioElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLAudioElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLAudioElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLAudioElementFactoryImpl < > : Sized + IDispatchImpl where { fn create ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLAudioElementFactoryVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLAudioElementFactoryImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLAudioElementFactoryVtbl < > { unsafe extern "system" fn create < Impl : IHTMLAudioElementFactoryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , src : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , __midl__ihtmlaudioelementfactory0000 : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , create : create :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLAudioElementFactory < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLBGsoundImpl < > : Sized + IDispatchImpl where { fn Setsrc ( ) ; fn src ( ) ; fn Setloop ( ) ; fn r#loop ( ) ; fn Setvolume ( ) ; fn volume ( ) ; fn Setbalance ( ) ; fn balance ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLBGsoundVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLBGsoundImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLBGsoundVtbl < > { unsafe extern "system" fn Setsrc < Impl : IHTMLBGsoundImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn src < Impl : IHTMLBGsoundImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setloop < Impl : IHTMLBGsoundImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn r#loop < Impl : IHTMLBGsoundImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setvolume < Impl : IHTMLBGsoundImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn volume < Impl : IHTMLBGsoundImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setbalance < Impl : IHTMLBGsoundImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn balance < Impl : IHTMLBGsoundImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setsrc : Setsrc :: < Impl , IMPL_OFFSET > , src : src :: < Impl , IMPL_OFFSET > , Setloop : Setloop :: < Impl , IMPL_OFFSET > , r#loop : r#loop :: < Impl , IMPL_OFFSET > , Setvolume : Setvolume :: < Impl , IMPL_OFFSET > , volume : volume :: < Impl , IMPL_OFFSET > , Setbalance : Setbalance :: < Impl , IMPL_OFFSET > , balance : balance :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLBGsound < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLBRElementImpl < > : Sized + IDispatchImpl where { fn Setclear ( ) ; fn clear ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLBRElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLBRElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLBRElementVtbl < > { unsafe extern "system" fn Setclear < Impl : IHTMLBRElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clear < Impl : IHTMLBRElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setclear : Setclear :: < Impl , IMPL_OFFSET > , clear : clear :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLBRElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLBaseElementImpl < > : Sized + IDispatchImpl where { fn Sethref ( ) ; fn href ( ) ; fn Settarget ( ) ; fn target ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLBaseElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLBaseElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLBaseElementVtbl < > { unsafe extern "system" fn Sethref < Impl : IHTMLBaseElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn href < Impl : IHTMLBaseElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Settarget < Impl : IHTMLBaseElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn target < Impl : IHTMLBaseElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Sethref : Sethref :: < Impl , IMPL_OFFSET > , href : href :: < Impl , IMPL_OFFSET > , Settarget : Settarget :: < Impl , IMPL_OFFSET > , target : target :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLBaseElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLBaseElement2Impl < > : Sized + IDispatchImpl where { fn Sethref ( ) ; fn href ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLBaseElement2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLBaseElement2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLBaseElement2Vtbl < > { unsafe extern "system" fn Sethref < Impl : IHTMLBaseElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn href < Impl : IHTMLBaseElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Sethref : Sethref :: < Impl , IMPL_OFFSET > , href : href :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLBaseElement2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLBaseFontElementImpl < > : Sized + IDispatchImpl where { fn Setcolor ( ) ; fn color ( ) ; fn Setface ( ) ; fn face ( ) ; fn Setsize ( ) ; fn size ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLBaseFontElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLBaseFontElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLBaseFontElementVtbl < > { unsafe extern "system" fn Setcolor < Impl : IHTMLBaseFontElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn color < Impl : IHTMLBaseFontElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setface < Impl : IHTMLBaseFontElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn face < Impl : IHTMLBaseFontElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setsize < Impl : IHTMLBaseFontElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn size < Impl : IHTMLBaseFontElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setcolor : Setcolor :: < Impl , IMPL_OFFSET > , color : color :: < Impl , IMPL_OFFSET > , Setface : Setface :: < Impl , IMPL_OFFSET > , face : face :: < Impl , IMPL_OFFSET > , Setsize : Setsize :: < Impl , IMPL_OFFSET > , size : size :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLBaseFontElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLBlockElementImpl < > : Sized + IDispatchImpl where { fn Setclear ( ) ; fn clear ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLBlockElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLBlockElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLBlockElementVtbl < > { unsafe extern "system" fn Setclear < Impl : IHTMLBlockElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clear < Impl : IHTMLBlockElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setclear : Setclear :: < Impl , IMPL_OFFSET > , clear : clear :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLBlockElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLBlockElement2Impl < > : Sized + IDispatchImpl where { fn Setcite ( ) ; fn cite ( ) ; fn Setwidth ( ) ; fn width ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLBlockElement2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLBlockElement2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLBlockElement2Vtbl < > { unsafe extern "system" fn Setcite < Impl : IHTMLBlockElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn cite < Impl : IHTMLBlockElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setwidth < Impl : IHTMLBlockElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn width < Impl : IHTMLBlockElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setcite : Setcite :: < Impl , IMPL_OFFSET > , cite : cite :: < Impl , IMPL_OFFSET > , Setwidth : Setwidth :: < Impl , IMPL_OFFSET > , width : width :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLBlockElement2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLBlockElement3Impl < > : Sized + IDispatchImpl where { fn Setcite ( ) ; fn cite ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLBlockElement3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLBlockElement3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLBlockElement3Vtbl < > { unsafe extern "system" fn Setcite < Impl : IHTMLBlockElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn cite < Impl : IHTMLBlockElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setcite : Setcite :: < Impl , IMPL_OFFSET > , cite : cite :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLBlockElement3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLBodyElementImpl < > : Sized + IDispatchImpl where { fn Setbackground ( ) ; fn background ( ) ; fn SetbgProperties ( ) ; fn bgProperties ( ) ; fn SetleftMargin ( ) ; fn leftMargin ( ) ; fn SettopMargin ( ) ; fn topMargin ( ) ; fn SetrightMargin ( ) ; fn rightMargin ( ) ; fn SetbottomMargin ( ) ; fn bottomMargin ( ) ; fn SetnoWrap ( ) ; fn noWrap ( ) ; fn SetbgColor ( ) ; fn bgColor ( ) ; fn Settext ( ) ; fn text ( ) ; fn Setlink ( ) ; fn link ( ) ; fn SetvLink ( ) ; fn vLink ( ) ; fn SetaLink ( ) ; fn aLink ( ) ; fn Setonload ( ) ; fn onload ( ) ; fn Setonunload ( ) ; fn onunload ( ) ; fn Setscroll ( ) ; fn scroll ( ) ; fn Setonselect ( ) ; fn onselect ( ) ; fn Setonbeforeunload ( ) ; fn onbeforeunload ( ) ; fn createTextRange ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLBodyElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLBodyElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLBodyElementVtbl < > { unsafe extern "system" fn Setbackground < Impl : IHTMLBodyElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn background < Impl : IHTMLBodyElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetbgProperties < Impl : IHTMLBodyElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn bgProperties < Impl : IHTMLBodyElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetleftMargin < Impl : IHTMLBodyElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn leftMargin < Impl : IHTMLBodyElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettopMargin < Impl : IHTMLBodyElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn topMargin < Impl : IHTMLBodyElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetrightMargin < Impl : IHTMLBodyElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn rightMargin < Impl : IHTMLBodyElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetbottomMargin < Impl : IHTMLBodyElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn bottomMargin < Impl : IHTMLBodyElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetnoWrap < Impl : IHTMLBodyElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn noWrap < Impl : IHTMLBodyElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetbgColor < Impl : IHTMLBodyElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn bgColor < Impl : IHTMLBodyElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Settext < Impl : IHTMLBodyElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn text < Impl : IHTMLBodyElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setlink < Impl : IHTMLBodyElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn link < Impl : IHTMLBodyElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetvLink < Impl : IHTMLBodyElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn vLink < Impl : IHTMLBodyElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetaLink < Impl : IHTMLBodyElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn aLink < Impl : IHTMLBodyElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonload < Impl : IHTMLBodyElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onload < Impl : IHTMLBodyElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonunload < Impl : IHTMLBodyElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onunload < Impl : IHTMLBodyElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setscroll < Impl : IHTMLBodyElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scroll < Impl : IHTMLBodyElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonselect < Impl : IHTMLBodyElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onselect < Impl : IHTMLBodyElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonbeforeunload < Impl : IHTMLBodyElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onbeforeunload < Impl : IHTMLBodyElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createTextRange < Impl : IHTMLBodyElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , range : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setbackground : Setbackground :: < Impl , IMPL_OFFSET > , background : background :: < Impl , IMPL_OFFSET > , SetbgProperties : SetbgProperties :: < Impl , IMPL_OFFSET > , bgProperties : bgProperties :: < Impl , IMPL_OFFSET > , SetleftMargin : SetleftMargin :: < Impl , IMPL_OFFSET > , leftMargin : leftMargin :: < Impl , IMPL_OFFSET > , SettopMargin : SettopMargin :: < Impl , IMPL_OFFSET > , topMargin : topMargin :: < Impl , IMPL_OFFSET > , SetrightMargin : SetrightMargin :: < Impl , IMPL_OFFSET > , rightMargin : rightMargin :: < Impl , IMPL_OFFSET > , SetbottomMargin : SetbottomMargin :: < Impl , IMPL_OFFSET > , bottomMargin : bottomMargin :: < Impl , IMPL_OFFSET > , SetnoWrap : SetnoWrap :: < Impl , IMPL_OFFSET > , noWrap : noWrap :: < Impl , IMPL_OFFSET > , SetbgColor : SetbgColor :: < Impl , IMPL_OFFSET > , bgColor : bgColor :: < Impl , IMPL_OFFSET > , Settext : Settext :: < Impl , IMPL_OFFSET > , text : text :: < Impl , IMPL_OFFSET > , Setlink : Setlink :: < Impl , IMPL_OFFSET > , link : link :: < Impl , IMPL_OFFSET > , SetvLink : SetvLink :: < Impl , IMPL_OFFSET > , vLink : vLink :: < Impl , IMPL_OFFSET > , SetaLink : SetaLink :: < Impl , IMPL_OFFSET > , aLink : aLink :: < Impl , IMPL_OFFSET > , Setonload : Setonload :: < Impl , IMPL_OFFSET > , onload : onload :: < Impl , IMPL_OFFSET > , Setonunload : Setonunload :: < Impl , IMPL_OFFSET > , onunload : onunload :: < Impl , IMPL_OFFSET > , Setscroll : Setscroll :: < Impl , IMPL_OFFSET > , scroll : scroll :: < Impl , IMPL_OFFSET > , Setonselect : Setonselect :: < Impl , IMPL_OFFSET > , onselect : onselect :: < Impl , IMPL_OFFSET > , Setonbeforeunload : Setonbeforeunload :: < Impl , IMPL_OFFSET > , onbeforeunload : onbeforeunload :: < Impl , IMPL_OFFSET > , createTextRange : createTextRange :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLBodyElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLBodyElement2Impl < > : Sized + IDispatchImpl where { fn Setonbeforeprint ( ) ; fn onbeforeprint ( ) ; fn Setonafterprint ( ) ; fn onafterprint ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLBodyElement2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLBodyElement2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLBodyElement2Vtbl < > { unsafe extern "system" fn Setonbeforeprint < Impl : IHTMLBodyElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onbeforeprint < Impl : IHTMLBodyElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonafterprint < Impl : IHTMLBodyElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onafterprint < Impl : IHTMLBodyElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setonbeforeprint : Setonbeforeprint :: < Impl , IMPL_OFFSET > , onbeforeprint : onbeforeprint :: < Impl , IMPL_OFFSET > , Setonafterprint : Setonafterprint :: < Impl , IMPL_OFFSET > , onafterprint : onafterprint :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLBodyElement2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLBodyElement3Impl < > : Sized + IDispatchImpl where { fn Setbackground ( ) ; fn background ( ) ; fn Setononline ( ) ; fn ononline ( ) ; fn Setonoffline ( ) ; fn onoffline ( ) ; fn Setonhashchange ( ) ; fn onhashchange ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLBodyElement3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLBodyElement3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLBodyElement3Vtbl < > { unsafe extern "system" fn Setbackground < Impl : IHTMLBodyElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn background < Impl : IHTMLBodyElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setononline < Impl : IHTMLBodyElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ononline < Impl : IHTMLBodyElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonoffline < Impl : IHTMLBodyElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onoffline < Impl : IHTMLBodyElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonhashchange < Impl : IHTMLBodyElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onhashchange < Impl : IHTMLBodyElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setbackground : Setbackground :: < Impl , IMPL_OFFSET > , background : background :: < Impl , IMPL_OFFSET > , Setononline : Setononline :: < Impl , IMPL_OFFSET > , ononline : ononline :: < Impl , IMPL_OFFSET > , Setonoffline : Setonoffline :: < Impl , IMPL_OFFSET > , onoffline : onoffline :: < Impl , IMPL_OFFSET > , Setonhashchange : Setonhashchange :: < Impl , IMPL_OFFSET > , onhashchange : onhashchange :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLBodyElement3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLBodyElement4Impl < > : Sized + IDispatchImpl where { fn Setonmessage ( ) ; fn onmessage ( ) ; fn Setonstorage ( ) ; fn onstorage ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLBodyElement4Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLBodyElement4Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLBodyElement4Vtbl < > { unsafe extern "system" fn Setonmessage < Impl : IHTMLBodyElement4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmessage < Impl : IHTMLBodyElement4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonstorage < Impl : IHTMLBodyElement4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onstorage < Impl : IHTMLBodyElement4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setonmessage : Setonmessage :: < Impl , IMPL_OFFSET > , onmessage : onmessage :: < Impl , IMPL_OFFSET > , Setonstorage : Setonstorage :: < Impl , IMPL_OFFSET > , onstorage : onstorage :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLBodyElement4 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLBodyElement5Impl < > : Sized + IDispatchImpl where { fn Setonpopstate ( ) ; fn onpopstate ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLBodyElement5Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLBodyElement5Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLBodyElement5Vtbl < > { unsafe extern "system" fn Setonpopstate < Impl : IHTMLBodyElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onpopstate < Impl : IHTMLBodyElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setonpopstate : Setonpopstate :: < Impl , IMPL_OFFSET > , onpopstate : onpopstate :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLBodyElement5 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLBookmarkCollectionImpl < > : Sized + IDispatchImpl where { fn length ( ) ; fn _newEnum ( ) ; fn item ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLBookmarkCollectionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLBookmarkCollectionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLBookmarkCollectionVtbl < > { unsafe extern "system" fn length < Impl : IHTMLBookmarkCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _newEnum < Impl : IHTMLBookmarkCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn item < Impl : IHTMLBookmarkCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , pvarbookmark : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , length : length :: < Impl , IMPL_OFFSET > , _newEnum : _newEnum :: < Impl , IMPL_OFFSET > , item : item :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLBookmarkCollection < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLButtonElementImpl < > : Sized + IDispatchImpl where { fn r#type ( ) ; fn Setvalue ( ) ; fn value ( ) ; fn Setname ( ) ; fn name ( ) ; fn Setstatus ( ) ; fn status ( ) ; fn Setdisabled ( ) ; fn disabled ( ) ; fn form ( ) ; fn createTextRange ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLButtonElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLButtonElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLButtonElementVtbl < > { unsafe extern "system" fn r#type < Impl : IHTMLButtonElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setvalue < Impl : IHTMLButtonElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn value < Impl : IHTMLButtonElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setname < Impl : IHTMLButtonElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn name < Impl : IHTMLButtonElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setstatus < Impl : IHTMLButtonElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn status < Impl : IHTMLButtonElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setdisabled < Impl : IHTMLButtonElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn disabled < Impl : IHTMLButtonElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn form < Impl : IHTMLButtonElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createTextRange < Impl : IHTMLButtonElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , range : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , r#type : r#type :: < Impl , IMPL_OFFSET > , Setvalue : Setvalue :: < Impl , IMPL_OFFSET > , value : value :: < Impl , IMPL_OFFSET > , Setname : Setname :: < Impl , IMPL_OFFSET > , name : name :: < Impl , IMPL_OFFSET > , Setstatus : Setstatus :: < Impl , IMPL_OFFSET > , status : status :: < Impl , IMPL_OFFSET > , Setdisabled : Setdisabled :: < Impl , IMPL_OFFSET > , disabled : disabled :: < Impl , IMPL_OFFSET > , form : form :: < Impl , IMPL_OFFSET > , createTextRange : createTextRange :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLButtonElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLButtonElement2Impl < > : Sized + IDispatchImpl where { fn Settype ( ) ; fn r#type ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLButtonElement2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLButtonElement2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLButtonElement2Vtbl < > { unsafe extern "system" fn Settype < Impl : IHTMLButtonElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn r#type < Impl : IHTMLButtonElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Settype : Settype :: < Impl , IMPL_OFFSET > , r#type : r#type :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLButtonElement2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLCSSImportRuleImpl < > : Sized + IDispatchImpl where { fn href ( ) ; fn Setmedia ( ) ; fn media ( ) ; fn styleSheet ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLCSSImportRuleVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLCSSImportRuleImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLCSSImportRuleVtbl < > { unsafe extern "system" fn href < Impl : IHTMLCSSImportRuleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setmedia < Impl : IHTMLCSSImportRuleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn media < Impl : IHTMLCSSImportRuleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn styleSheet < Impl : IHTMLCSSImportRuleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , href : href :: < Impl , IMPL_OFFSET > , Setmedia : Setmedia :: < Impl , IMPL_OFFSET > , media : media :: < Impl , IMPL_OFFSET > , styleSheet : styleSheet :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLCSSImportRule < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLCSSMediaListImpl < > : Sized + IDispatchImpl where { fn SetmediaText ( ) ; fn mediaText ( ) ; fn length ( ) ; fn item ( ) ; fn appendMedium ( ) ; fn deleteMedium ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLCSSMediaListVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLCSSMediaListImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLCSSMediaListVtbl < > { unsafe extern "system" fn SetmediaText < Impl : IHTMLCSSMediaListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn mediaText < Impl : IHTMLCSSMediaListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn length < Impl : IHTMLCSSMediaListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn item < Impl : IHTMLCSSMediaListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , pbstrmedium : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn appendMedium < Impl : IHTMLCSSMediaListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrmedium : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn deleteMedium < Impl : IHTMLCSSMediaListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrmedium : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetmediaText : SetmediaText :: < Impl , IMPL_OFFSET > , mediaText : mediaText :: < Impl , IMPL_OFFSET > , length : length :: < Impl , IMPL_OFFSET > , item : item :: < Impl , IMPL_OFFSET > , appendMedium : appendMedium :: < Impl , IMPL_OFFSET > , deleteMedium : deleteMedium :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLCSSMediaList < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLCSSMediaRuleImpl < > : Sized + IDispatchImpl where { fn Setmedia ( ) ; fn media ( ) ; fn cssRules ( ) ; fn insertRule ( ) ; fn deleteRule ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLCSSMediaRuleVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLCSSMediaRuleImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLCSSMediaRuleVtbl < > { unsafe extern "system" fn Setmedia < Impl : IHTMLCSSMediaRuleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn media < Impl : IHTMLCSSMediaRuleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn cssRules < Impl : IHTMLCSSMediaRuleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn insertRule < Impl : IHTMLCSSMediaRuleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrrule : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , lindex : i32 , plnewindex : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn deleteRule < Impl : IHTMLCSSMediaRuleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lindex : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setmedia : Setmedia :: < Impl , IMPL_OFFSET > , media : media :: < Impl , IMPL_OFFSET > , cssRules : cssRules :: < Impl , IMPL_OFFSET > , insertRule : insertRule :: < Impl , IMPL_OFFSET > , deleteRule : deleteRule :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLCSSMediaRule < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLCSSNamespaceRuleImpl < > : Sized + IDispatchImpl where { fn namespaceURI ( ) ; fn prefix ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLCSSNamespaceRuleVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLCSSNamespaceRuleImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLCSSNamespaceRuleVtbl < > { unsafe extern "system" fn namespaceURI < Impl : IHTMLCSSNamespaceRuleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn prefix < Impl : IHTMLCSSNamespaceRuleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , namespaceURI : namespaceURI :: < Impl , IMPL_OFFSET > , prefix : prefix :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLCSSNamespaceRule < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLCSSRuleImpl < > : Sized + IDispatchImpl where { fn r#type ( ) ; fn SetcssText ( ) ; fn cssText ( ) ; fn parentRule ( ) ; fn parentStyleSheet ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLCSSRuleVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLCSSRuleImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLCSSRuleVtbl < > { unsafe extern "system" fn r#type < Impl : IHTMLCSSRuleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut u16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetcssText < Impl : IHTMLCSSRuleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn cssText < Impl : IHTMLCSSRuleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn parentRule < Impl : IHTMLCSSRuleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn parentStyleSheet < Impl : IHTMLCSSRuleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , r#type : r#type :: < Impl , IMPL_OFFSET > , SetcssText : SetcssText :: < Impl , IMPL_OFFSET > , cssText : cssText :: < Impl , IMPL_OFFSET > , parentRule : parentRule :: < Impl , IMPL_OFFSET > , parentStyleSheet : parentStyleSheet :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLCSSRule < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLCSSStyleDeclarationImpl < > : Sized + IDispatchImpl where { fn length ( ) ; fn parentRule ( ) ; fn getPropertyValue ( ) ; fn getPropertyPriority ( ) ; fn removeProperty ( ) ; fn setProperty ( ) ; fn item ( ) ; fn SetfontFamily ( ) ; fn fontFamily ( ) ; fn SetfontStyle ( ) ; fn fontStyle ( ) ; fn SetfontVariant ( ) ; fn fontVariant ( ) ; fn SetfontWeight ( ) ; fn fontWeight ( ) ; fn SetfontSize ( ) ; fn fontSize ( ) ; fn Setfont ( ) ; fn font ( ) ; fn Setcolor ( ) ; fn color ( ) ; fn Setbackground ( ) ; fn background ( ) ; fn SetbackgroundColor ( ) ; fn backgroundColor ( ) ; fn SetbackgroundImage ( ) ; fn backgroundImage ( ) ; fn SetbackgroundRepeat ( ) ; fn backgroundRepeat ( ) ; fn SetbackgroundAttachment ( ) ; fn backgroundAttachment ( ) ; fn SetbackgroundPosition ( ) ; fn backgroundPosition ( ) ; fn SetbackgroundPositionX ( ) ; fn backgroundPositionX ( ) ; fn SetbackgroundPositionY ( ) ; fn backgroundPositionY ( ) ; fn SetwordSpacing ( ) ; fn wordSpacing ( ) ; fn SetletterSpacing ( ) ; fn letterSpacing ( ) ; fn SettextDecoration ( ) ; fn textDecoration ( ) ; fn SetverticalAlign ( ) ; fn verticalAlign ( ) ; fn SettextTransform ( ) ; fn textTransform ( ) ; fn SettextAlign ( ) ; fn textAlign ( ) ; fn SettextIndent ( ) ; fn textIndent ( ) ; fn SetlineHeight ( ) ; fn lineHeight ( ) ; fn SetmarginTop ( ) ; fn marginTop ( ) ; fn SetmarginRight ( ) ; fn marginRight ( ) ; fn SetmarginBottom ( ) ; fn marginBottom ( ) ; fn SetmarginLeft ( ) ; fn marginLeft ( ) ; fn Setmargin ( ) ; fn margin ( ) ; fn SetpaddingTop ( ) ; fn paddingTop ( ) ; fn SetpaddingRight ( ) ; fn paddingRight ( ) ; fn SetpaddingBottom ( ) ; fn paddingBottom ( ) ; fn SetpaddingLeft ( ) ; fn paddingLeft ( ) ; fn Setpadding ( ) ; fn padding ( ) ; fn Setborder ( ) ; fn border ( ) ; fn SetborderTop ( ) ; fn borderTop ( ) ; fn SetborderRight ( ) ; fn borderRight ( ) ; fn SetborderBottom ( ) ; fn borderBottom ( ) ; fn SetborderLeft ( ) ; fn borderLeft ( ) ; fn SetborderColor ( ) ; fn borderColor ( ) ; fn SetborderTopColor ( ) ; fn borderTopColor ( ) ; fn SetborderRightColor ( ) ; fn borderRightColor ( ) ; fn SetborderBottomColor ( ) ; fn borderBottomColor ( ) ; fn SetborderLeftColor ( ) ; fn borderLeftColor ( ) ; fn SetborderWidth ( ) ; fn borderWidth ( ) ; fn SetborderTopWidth ( ) ; fn borderTopWidth ( ) ; fn SetborderRightWidth ( ) ; fn borderRightWidth ( ) ; fn SetborderBottomWidth ( ) ; fn borderBottomWidth ( ) ; fn SetborderLeftWidth ( ) ; fn borderLeftWidth ( ) ; fn SetborderStyle ( ) ; fn borderStyle ( ) ; fn SetborderTopStyle ( ) ; fn borderTopStyle ( ) ; fn SetborderRightStyle ( ) ; fn borderRightStyle ( ) ; fn SetborderBottomStyle ( ) ; fn borderBottomStyle ( ) ; fn SetborderLeftStyle ( ) ; fn borderLeftStyle ( ) ; fn Setwidth ( ) ; fn width ( ) ; fn Setheight ( ) ; fn height ( ) ; fn SetstyleFloat ( ) ; fn styleFloat ( ) ; fn Setclear ( ) ; fn clear ( ) ; fn Setdisplay ( ) ; fn display ( ) ; fn Setvisibility ( ) ; fn visibility ( ) ; fn SetlistStyleType ( ) ; fn listStyleType ( ) ; fn SetlistStylePosition ( ) ; fn listStylePosition ( ) ; fn SetlistStyleImage ( ) ; fn listStyleImage ( ) ; fn SetlistStyle ( ) ; fn listStyle ( ) ; fn SetwhiteSpace ( ) ; fn whiteSpace ( ) ; fn Settop ( ) ; fn top ( ) ; fn Setleft ( ) ; fn left ( ) ; fn SetzIndex ( ) ; fn zIndex ( ) ; fn Setoverflow ( ) ; fn overflow ( ) ; fn SetpageBreakBefore ( ) ; fn pageBreakBefore ( ) ; fn SetpageBreakAfter ( ) ; fn pageBreakAfter ( ) ; fn SetcssText ( ) ; fn cssText ( ) ; fn Setcursor ( ) ; fn cursor ( ) ; fn Setclip ( ) ; fn clip ( ) ; fn Setfilter ( ) ; fn filter ( ) ; fn SettableLayout ( ) ; fn tableLayout ( ) ; fn SetborderCollapse ( ) ; fn borderCollapse ( ) ; fn Setdirection ( ) ; fn direction ( ) ; fn Setbehavior ( ) ; fn behavior ( ) ; fn Setposition ( ) ; fn position ( ) ; fn SetunicodeBidi ( ) ; fn unicodeBidi ( ) ; fn Setbottom ( ) ; fn bottom ( ) ; fn Setright ( ) ; fn right ( ) ; fn SetimeMode ( ) ; fn imeMode ( ) ; fn SetrubyAlign ( ) ; fn rubyAlign ( ) ; fn SetrubyPosition ( ) ; fn rubyPosition ( ) ; fn SetrubyOverhang ( ) ; fn rubyOverhang ( ) ; fn SetlayoutGridChar ( ) ; fn layoutGridChar ( ) ; fn SetlayoutGridLine ( ) ; fn layoutGridLine ( ) ; fn SetlayoutGridMode ( ) ; fn layoutGridMode ( ) ; fn SetlayoutGridType ( ) ; fn layoutGridType ( ) ; fn SetlayoutGrid ( ) ; fn layoutGrid ( ) ; fn SettextAutospace ( ) ; fn textAutospace ( ) ; fn SetwordBreak ( ) ; fn wordBreak ( ) ; fn SetlineBreak ( ) ; fn lineBreak ( ) ; fn SettextJustify ( ) ; fn textJustify ( ) ; fn SettextJustifyTrim ( ) ; fn textJustifyTrim ( ) ; fn SettextKashida ( ) ; fn textKashida ( ) ; fn SetoverflowX ( ) ; fn overflowX ( ) ; fn SetoverflowY ( ) ; fn overflowY ( ) ; fn Setaccelerator ( ) ; fn accelerator ( ) ; fn SetlayoutFlow ( ) ; fn layoutFlow ( ) ; fn Setzoom ( ) ; fn zoom ( ) ; fn SetwordWrap ( ) ; fn wordWrap ( ) ; fn SettextUnderlinePosition ( ) ; fn textUnderlinePosition ( ) ; fn SetscrollbarBaseColor ( ) ; fn scrollbarBaseColor ( ) ; fn SetscrollbarFaceColor ( ) ; fn scrollbarFaceColor ( ) ; fn Setscrollbar3dLightColor ( ) ; fn scrollbar3dLightColor ( ) ; fn SetscrollbarShadowColor ( ) ; fn scrollbarShadowColor ( ) ; fn SetscrollbarHighlightColor ( ) ; fn scrollbarHighlightColor ( ) ; fn SetscrollbarDarkShadowColor ( ) ; fn scrollbarDarkShadowColor ( ) ; fn SetscrollbarArrowColor ( ) ; fn scrollbarArrowColor ( ) ; fn SetscrollbarTrackColor ( ) ; fn scrollbarTrackColor ( ) ; fn SetwritingMode ( ) ; fn writingMode ( ) ; fn SettextAlignLast ( ) ; fn textAlignLast ( ) ; fn SettextKashidaSpace ( ) ; fn textKashidaSpace ( ) ; fn SettextOverflow ( ) ; fn textOverflow ( ) ; fn SetminHeight ( ) ; fn minHeight ( ) ; fn SetmsInterpolationMode ( ) ; fn msInterpolationMode ( ) ; fn SetmaxHeight ( ) ; fn maxHeight ( ) ; fn SetminWidth ( ) ; fn minWidth ( ) ; fn SetmaxWidth ( ) ; fn maxWidth ( ) ; fn Setcontent ( ) ; fn content ( ) ; fn SetcaptionSide ( ) ; fn captionSide ( ) ; fn SetcounterIncrement ( ) ; fn counterIncrement ( ) ; fn SetcounterReset ( ) ; fn counterReset ( ) ; fn Setoutline ( ) ; fn outline ( ) ; fn SetoutlineWidth ( ) ; fn outlineWidth ( ) ; fn SetoutlineStyle ( ) ; fn outlineStyle ( ) ; fn SetoutlineColor ( ) ; fn outlineColor ( ) ; fn SetboxSizing ( ) ; fn boxSizing ( ) ; fn SetborderSpacing ( ) ; fn borderSpacing ( ) ; fn Setorphans ( ) ; fn orphans ( ) ; fn Setwidows ( ) ; fn widows ( ) ; fn SetpageBreakInside ( ) ; fn pageBreakInside ( ) ; fn SetemptyCells ( ) ; fn emptyCells ( ) ; fn SetmsBlockProgression ( ) ; fn msBlockProgression ( ) ; fn Setquotes ( ) ; fn quotes ( ) ; fn SetalignmentBaseline ( ) ; fn alignmentBaseline ( ) ; fn SetbaselineShift ( ) ; fn baselineShift ( ) ; fn SetdominantBaseline ( ) ; fn dominantBaseline ( ) ; fn SetfontSizeAdjust ( ) ; fn fontSizeAdjust ( ) ; fn SetfontStretch ( ) ; fn fontStretch ( ) ; fn Setopacity ( ) ; fn opacity ( ) ; fn SetclipPath ( ) ; fn clipPath ( ) ; fn SetclipRule ( ) ; fn clipRule ( ) ; fn Setfill ( ) ; fn fill ( ) ; fn SetfillOpacity ( ) ; fn fillOpacity ( ) ; fn SetfillRule ( ) ; fn fillRule ( ) ; fn Setkerning ( ) ; fn kerning ( ) ; fn Setmarker ( ) ; fn marker ( ) ; fn SetmarkerEnd ( ) ; fn markerEnd ( ) ; fn SetmarkerMid ( ) ; fn markerMid ( ) ; fn SetmarkerStart ( ) ; fn markerStart ( ) ; fn Setmask ( ) ; fn mask ( ) ; fn SetpointerEvents ( ) ; fn pointerEvents ( ) ; fn SetstopColor ( ) ; fn stopColor ( ) ; fn SetstopOpacity ( ) ; fn stopOpacity ( ) ; fn Setstroke ( ) ; fn stroke ( ) ; fn SetstrokeDasharray ( ) ; fn strokeDasharray ( ) ; fn SetstrokeDashoffset ( ) ; fn strokeDashoffset ( ) ; fn SetstrokeLinecap ( ) ; fn strokeLinecap ( ) ; fn SetstrokeLinejoin ( ) ; fn strokeLinejoin ( ) ; fn SetstrokeMiterlimit ( ) ; fn strokeMiterlimit ( ) ; fn SetstrokeOpacity ( ) ; fn strokeOpacity ( ) ; fn SetstrokeWidth ( ) ; fn strokeWidth ( ) ; fn SettextAnchor ( ) ; fn textAnchor ( ) ; fn SetglyphOrientationHorizontal ( ) ; fn glyphOrientationHorizontal ( ) ; fn SetglyphOrientationVertical ( ) ; fn glyphOrientationVertical ( ) ; fn SetborderRadius ( ) ; fn borderRadius ( ) ; fn SetborderTopLeftRadius ( ) ; fn borderTopLeftRadius ( ) ; fn SetborderTopRightRadius ( ) ; fn borderTopRightRadius ( ) ; fn SetborderBottomRightRadius ( ) ; fn borderBottomRightRadius ( ) ; fn SetborderBottomLeftRadius ( ) ; fn borderBottomLeftRadius ( ) ; fn SetclipTop ( ) ; fn clipTop ( ) ; fn SetclipRight ( ) ; fn clipRight ( ) ; fn clipBottom ( ) ; fn SetclipLeft ( ) ; fn clipLeft ( ) ; fn SetcssFloat ( ) ; fn cssFloat ( ) ; fn SetbackgroundClip ( ) ; fn backgroundClip ( ) ; fn SetbackgroundOrigin ( ) ; fn backgroundOrigin ( ) ; fn SetbackgroundSize ( ) ; fn backgroundSize ( ) ; fn SetboxShadow ( ) ; fn boxShadow ( ) ; fn SetmsTransform ( ) ; fn msTransform ( ) ; fn SetmsTransformOrigin ( ) ; fn msTransformOrigin ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLCSSStyleDeclarationVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLCSSStyleDeclarationImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLCSSStyleDeclarationVtbl < > { unsafe extern "system" fn length < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn parentRule < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getPropertyValue < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrpropertyname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pbstrpropertyvalue : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getPropertyPriority < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrpropertyname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pbstrpropertypriority : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn removeProperty < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrpropertyname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pbstrpropertyvalue : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn setProperty < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrpropertyname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pvarpropertyvalue : * const super::super::System::Com:: VARIANT , pvarpropertypriority : * const super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn item < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , pbstrpropertyname : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetfontFamily < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn fontFamily < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetfontStyle < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn fontStyle < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetfontVariant < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn fontVariant < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetfontWeight < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn fontWeight < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetfontSize < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn fontSize < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setfont < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn font < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setcolor < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn color < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setbackground < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn background < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetbackgroundColor < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn backgroundColor < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetbackgroundImage < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn backgroundImage < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetbackgroundRepeat < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn backgroundRepeat < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetbackgroundAttachment < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn backgroundAttachment < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetbackgroundPosition < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn backgroundPosition < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetbackgroundPositionX < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn backgroundPositionX < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetbackgroundPositionY < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn backgroundPositionY < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwordSpacing < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn wordSpacing < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetletterSpacing < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn letterSpacing < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextDecoration < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textDecoration < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetverticalAlign < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn verticalAlign < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextTransform < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textTransform < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextAlign < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textAlign < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextIndent < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textIndent < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetlineHeight < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn lineHeight < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmarginTop < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn marginTop < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmarginRight < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn marginRight < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmarginBottom < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn marginBottom < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmarginLeft < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn marginLeft < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setmargin < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn margin < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetpaddingTop < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn paddingTop < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetpaddingRight < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn paddingRight < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetpaddingBottom < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn paddingBottom < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetpaddingLeft < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn paddingLeft < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setpadding < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn padding < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setborder < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn border < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderTop < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderTop < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderRight < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderRight < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderBottom < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderBottom < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderLeft < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderLeft < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderColor < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderColor < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderTopColor < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderTopColor < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderRightColor < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderRightColor < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderBottomColor < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderBottomColor < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderLeftColor < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderLeftColor < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderWidth < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderWidth < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderTopWidth < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderTopWidth < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderRightWidth < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderRightWidth < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderBottomWidth < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderBottomWidth < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderLeftWidth < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderLeftWidth < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderStyle < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderStyle < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderTopStyle < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderTopStyle < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderRightStyle < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderRightStyle < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderBottomStyle < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderBottomStyle < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderLeftStyle < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderLeftStyle < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setwidth < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn width < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setheight < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn height < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetstyleFloat < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn styleFloat < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setclear < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clear < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setdisplay < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn display < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setvisibility < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn visibility < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetlistStyleType < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn listStyleType < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetlistStylePosition < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn listStylePosition < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetlistStyleImage < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn listStyleImage < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetlistStyle < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn listStyle < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwhiteSpace < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn whiteSpace < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Settop < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn top < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setleft < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn left < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetzIndex < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn zIndex < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setoverflow < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn overflow < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetpageBreakBefore < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn pageBreakBefore < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetpageBreakAfter < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn pageBreakAfter < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetcssText < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn cssText < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setcursor < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn cursor < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setclip < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clip < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setfilter < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn filter < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettableLayout < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn tableLayout < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderCollapse < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderCollapse < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setdirection < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn direction < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setbehavior < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn behavior < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setposition < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn position < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetunicodeBidi < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn unicodeBidi < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setbottom < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn bottom < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setright < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn right < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetimeMode < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn imeMode < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetrubyAlign < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn rubyAlign < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetrubyPosition < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn rubyPosition < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetrubyOverhang < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn rubyOverhang < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetlayoutGridChar < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn layoutGridChar < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetlayoutGridLine < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn layoutGridLine < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetlayoutGridMode < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn layoutGridMode < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetlayoutGridType < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn layoutGridType < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetlayoutGrid < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn layoutGrid < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextAutospace < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textAutospace < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwordBreak < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn wordBreak < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetlineBreak < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn lineBreak < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextJustify < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textJustify < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextJustifyTrim < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textJustifyTrim < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextKashida < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textKashida < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetoverflowX < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn overflowX < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetoverflowY < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn overflowY < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setaccelerator < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn accelerator < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetlayoutFlow < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn layoutFlow < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setzoom < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn zoom < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwordWrap < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn wordWrap < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextUnderlinePosition < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textUnderlinePosition < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetscrollbarBaseColor < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scrollbarBaseColor < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetscrollbarFaceColor < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scrollbarFaceColor < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setscrollbar3dLightColor < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scrollbar3dLightColor < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetscrollbarShadowColor < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scrollbarShadowColor < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetscrollbarHighlightColor < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scrollbarHighlightColor < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetscrollbarDarkShadowColor < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scrollbarDarkShadowColor < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetscrollbarArrowColor < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scrollbarArrowColor < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetscrollbarTrackColor < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scrollbarTrackColor < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwritingMode < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn writingMode < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextAlignLast < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textAlignLast < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextKashidaSpace < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textKashidaSpace < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextOverflow < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textOverflow < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetminHeight < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn minHeight < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsInterpolationMode < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msInterpolationMode < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmaxHeight < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn maxHeight < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetminWidth < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn minWidth < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmaxWidth < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn maxWidth < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setcontent < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn content < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetcaptionSide < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn captionSide < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetcounterIncrement < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn counterIncrement < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetcounterReset < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn counterReset < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setoutline < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn outline < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetoutlineWidth < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn outlineWidth < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetoutlineStyle < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn outlineStyle < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetoutlineColor < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn outlineColor < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetboxSizing < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn boxSizing < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderSpacing < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderSpacing < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setorphans < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn orphans < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setwidows < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn widows < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetpageBreakInside < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn pageBreakInside < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetemptyCells < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn emptyCells < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsBlockProgression < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msBlockProgression < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setquotes < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn quotes < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetalignmentBaseline < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn alignmentBaseline < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetbaselineShift < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn baselineShift < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetdominantBaseline < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn dominantBaseline < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetfontSizeAdjust < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn fontSizeAdjust < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetfontStretch < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn fontStretch < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setopacity < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn opacity < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetclipPath < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clipPath < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetclipRule < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clipRule < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setfill < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn fill < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetfillOpacity < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn fillOpacity < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetfillRule < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn fillRule < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setkerning < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn kerning < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setmarker < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn marker < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmarkerEnd < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn markerEnd < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmarkerMid < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn markerMid < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmarkerStart < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn markerStart < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setmask < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn mask < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetpointerEvents < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn pointerEvents < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetstopColor < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn stopColor < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetstopOpacity < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn stopOpacity < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setstroke < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn stroke < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetstrokeDasharray < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn strokeDasharray < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetstrokeDashoffset < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn strokeDashoffset < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetstrokeLinecap < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn strokeLinecap < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetstrokeLinejoin < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn strokeLinejoin < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetstrokeMiterlimit < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn strokeMiterlimit < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetstrokeOpacity < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn strokeOpacity < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetstrokeWidth < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn strokeWidth < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextAnchor < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textAnchor < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetglyphOrientationHorizontal < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn glyphOrientationHorizontal < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetglyphOrientationVertical < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn glyphOrientationVertical < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderRadius < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderRadius < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderTopLeftRadius < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderTopLeftRadius < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderTopRightRadius < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderTopRightRadius < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderBottomRightRadius < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderBottomRightRadius < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderBottomLeftRadius < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderBottomLeftRadius < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetclipTop < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clipTop < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetclipRight < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clipRight < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clipBottom < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetclipLeft < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clipLeft < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetcssFloat < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn cssFloat < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetbackgroundClip < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn backgroundClip < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetbackgroundOrigin < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn backgroundOrigin < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetbackgroundSize < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn backgroundSize < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetboxShadow < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn boxShadow < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsTransform < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msTransform < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsTransformOrigin < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msTransformOrigin < Impl : IHTMLCSSStyleDeclarationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , length : length :: < Impl , IMPL_OFFSET > , parentRule : parentRule :: < Impl , IMPL_OFFSET > , getPropertyValue : getPropertyValue :: < Impl , IMPL_OFFSET > , getPropertyPriority : getPropertyPriority :: < Impl , IMPL_OFFSET > , removeProperty : removeProperty :: < Impl , IMPL_OFFSET > , setProperty : setProperty :: < Impl , IMPL_OFFSET > , item : item :: < Impl , IMPL_OFFSET > , SetfontFamily : SetfontFamily :: < Impl , IMPL_OFFSET > , fontFamily : fontFamily :: < Impl , IMPL_OFFSET > , SetfontStyle : SetfontStyle :: < Impl , IMPL_OFFSET > , fontStyle : fontStyle :: < Impl , IMPL_OFFSET > , SetfontVariant : SetfontVariant :: < Impl , IMPL_OFFSET > , fontVariant : fontVariant :: < Impl , IMPL_OFFSET > , SetfontWeight : SetfontWeight :: < Impl , IMPL_OFFSET > , fontWeight : fontWeight :: < Impl , IMPL_OFFSET > , SetfontSize : SetfontSize :: < Impl , IMPL_OFFSET > , fontSize : fontSize :: < Impl , IMPL_OFFSET > , Setfont : Setfont :: < Impl , IMPL_OFFSET > , font : font :: < Impl , IMPL_OFFSET > , Setcolor : Setcolor :: < Impl , IMPL_OFFSET > , color : color :: < Impl , IMPL_OFFSET > , Setbackground : Setbackground :: < Impl , IMPL_OFFSET > , background : background :: < Impl , IMPL_OFFSET > , SetbackgroundColor : SetbackgroundColor :: < Impl , IMPL_OFFSET > , backgroundColor : backgroundColor :: < Impl , IMPL_OFFSET > , SetbackgroundImage : SetbackgroundImage :: < Impl , IMPL_OFFSET > , backgroundImage : backgroundImage :: < Impl , IMPL_OFFSET > , SetbackgroundRepeat : SetbackgroundRepeat :: < Impl , IMPL_OFFSET > , backgroundRepeat : backgroundRepeat :: < Impl , IMPL_OFFSET > , SetbackgroundAttachment : SetbackgroundAttachment :: < Impl , IMPL_OFFSET > , backgroundAttachment : backgroundAttachment :: < Impl , IMPL_OFFSET > , SetbackgroundPosition : SetbackgroundPosition :: < Impl , IMPL_OFFSET > , backgroundPosition : backgroundPosition :: < Impl , IMPL_OFFSET > , SetbackgroundPositionX : SetbackgroundPositionX :: < Impl , IMPL_OFFSET > , backgroundPositionX : backgroundPositionX :: < Impl , IMPL_OFFSET > , SetbackgroundPositionY : SetbackgroundPositionY :: < Impl , IMPL_OFFSET > , backgroundPositionY : backgroundPositionY :: < Impl , IMPL_OFFSET > , SetwordSpacing : SetwordSpacing :: < Impl , IMPL_OFFSET > , wordSpacing : wordSpacing :: < Impl , IMPL_OFFSET > , SetletterSpacing : SetletterSpacing :: < Impl , IMPL_OFFSET > , letterSpacing : letterSpacing :: < Impl , IMPL_OFFSET > , SettextDecoration : SettextDecoration :: < Impl , IMPL_OFFSET > , textDecoration : textDecoration :: < Impl , IMPL_OFFSET > , SetverticalAlign : SetverticalAlign :: < Impl , IMPL_OFFSET > , verticalAlign : verticalAlign :: < Impl , IMPL_OFFSET > , SettextTransform : SettextTransform :: < Impl , IMPL_OFFSET > , textTransform : textTransform :: < Impl , IMPL_OFFSET > , SettextAlign : SettextAlign :: < Impl , IMPL_OFFSET > , textAlign : textAlign :: < Impl , IMPL_OFFSET > , SettextIndent : SettextIndent :: < Impl , IMPL_OFFSET > , textIndent : textIndent :: < Impl , IMPL_OFFSET > , SetlineHeight : SetlineHeight :: < Impl , IMPL_OFFSET > , lineHeight : lineHeight :: < Impl , IMPL_OFFSET > , SetmarginTop : SetmarginTop :: < Impl , IMPL_OFFSET > , marginTop : marginTop :: < Impl , IMPL_OFFSET > , SetmarginRight : SetmarginRight :: < Impl , IMPL_OFFSET > , marginRight : marginRight :: < Impl , IMPL_OFFSET > , SetmarginBottom : SetmarginBottom :: < Impl , IMPL_OFFSET > , marginBottom : marginBottom :: < Impl , IMPL_OFFSET > , SetmarginLeft : SetmarginLeft :: < Impl , IMPL_OFFSET > , marginLeft : marginLeft :: < Impl , IMPL_OFFSET > , Setmargin : Setmargin :: < Impl , IMPL_OFFSET > , margin : margin :: < Impl , IMPL_OFFSET > , SetpaddingTop : SetpaddingTop :: < Impl , IMPL_OFFSET > , paddingTop : paddingTop :: < Impl , IMPL_OFFSET > , SetpaddingRight : SetpaddingRight :: < Impl , IMPL_OFFSET > , paddingRight : paddingRight :: < Impl , IMPL_OFFSET > , SetpaddingBottom : SetpaddingBottom :: < Impl , IMPL_OFFSET > , paddingBottom : paddingBottom :: < Impl , IMPL_OFFSET > , SetpaddingLeft : SetpaddingLeft :: < Impl , IMPL_OFFSET > , paddingLeft : paddingLeft :: < Impl , IMPL_OFFSET > , Setpadding : Setpadding :: < Impl , IMPL_OFFSET > , padding : padding :: < Impl , IMPL_OFFSET > , Setborder : Setborder :: < Impl , IMPL_OFFSET > , border : border :: < Impl , IMPL_OFFSET > , SetborderTop : SetborderTop :: < Impl , IMPL_OFFSET > , borderTop : borderTop :: < Impl , IMPL_OFFSET > , SetborderRight : SetborderRight :: < Impl , IMPL_OFFSET > , borderRight : borderRight :: < Impl , IMPL_OFFSET > , SetborderBottom : SetborderBottom :: < Impl , IMPL_OFFSET > , borderBottom : borderBottom :: < Impl , IMPL_OFFSET > , SetborderLeft : SetborderLeft :: < Impl , IMPL_OFFSET > , borderLeft : borderLeft :: < Impl , IMPL_OFFSET > , SetborderColor : SetborderColor :: < Impl , IMPL_OFFSET > , borderColor : borderColor :: < Impl , IMPL_OFFSET > , SetborderTopColor : SetborderTopColor :: < Impl , IMPL_OFFSET > , borderTopColor : borderTopColor :: < Impl , IMPL_OFFSET > , SetborderRightColor : SetborderRightColor :: < Impl , IMPL_OFFSET > , borderRightColor : borderRightColor :: < Impl , IMPL_OFFSET > , SetborderBottomColor : SetborderBottomColor :: < Impl , IMPL_OFFSET > , borderBottomColor : borderBottomColor :: < Impl , IMPL_OFFSET > , SetborderLeftColor : SetborderLeftColor :: < Impl , IMPL_OFFSET > , borderLeftColor : borderLeftColor :: < Impl , IMPL_OFFSET > , SetborderWidth : SetborderWidth :: < Impl , IMPL_OFFSET > , borderWidth : borderWidth :: < Impl , IMPL_OFFSET > , SetborderTopWidth : SetborderTopWidth :: < Impl , IMPL_OFFSET > , borderTopWidth : borderTopWidth :: < Impl , IMPL_OFFSET > , SetborderRightWidth : SetborderRightWidth :: < Impl , IMPL_OFFSET > , borderRightWidth : borderRightWidth :: < Impl , IMPL_OFFSET > , SetborderBottomWidth : SetborderBottomWidth :: < Impl , IMPL_OFFSET > , borderBottomWidth : borderBottomWidth :: < Impl , IMPL_OFFSET > , SetborderLeftWidth : SetborderLeftWidth :: < Impl , IMPL_OFFSET > , borderLeftWidth : borderLeftWidth :: < Impl , IMPL_OFFSET > , SetborderStyle : SetborderStyle :: < Impl , IMPL_OFFSET > , borderStyle : borderStyle :: < Impl , IMPL_OFFSET > , SetborderTopStyle : SetborderTopStyle :: < Impl , IMPL_OFFSET > , borderTopStyle : borderTopStyle :: < Impl , IMPL_OFFSET > , SetborderRightStyle : SetborderRightStyle :: < Impl , IMPL_OFFSET > , borderRightStyle : borderRightStyle :: < Impl , IMPL_OFFSET > , SetborderBottomStyle : SetborderBottomStyle :: < Impl , IMPL_OFFSET > , borderBottomStyle : borderBottomStyle :: < Impl , IMPL_OFFSET > , SetborderLeftStyle : SetborderLeftStyle :: < Impl , IMPL_OFFSET > , borderLeftStyle : borderLeftStyle :: < Impl , IMPL_OFFSET > , Setwidth : Setwidth :: < Impl , IMPL_OFFSET > , width : width :: < Impl , IMPL_OFFSET > , Setheight : Setheight :: < Impl , IMPL_OFFSET > , height : height :: < Impl , IMPL_OFFSET > , SetstyleFloat : SetstyleFloat :: < Impl , IMPL_OFFSET > , styleFloat : styleFloat :: < Impl , IMPL_OFFSET > , Setclear : Setclear :: < Impl , IMPL_OFFSET > , clear : clear :: < Impl , IMPL_OFFSET > , Setdisplay : Setdisplay :: < Impl , IMPL_OFFSET > , display : display :: < Impl , IMPL_OFFSET > , Setvisibility : Setvisibility :: < Impl , IMPL_OFFSET > , visibility : visibility :: < Impl , IMPL_OFFSET > , SetlistStyleType : SetlistStyleType :: < Impl , IMPL_OFFSET > , listStyleType : listStyleType :: < Impl , IMPL_OFFSET > , SetlistStylePosition : SetlistStylePosition :: < Impl , IMPL_OFFSET > , listStylePosition : listStylePosition :: < Impl , IMPL_OFFSET > , SetlistStyleImage : SetlistStyleImage :: < Impl , IMPL_OFFSET > , listStyleImage : listStyleImage :: < Impl , IMPL_OFFSET > , SetlistStyle : SetlistStyle :: < Impl , IMPL_OFFSET > , listStyle : listStyle :: < Impl , IMPL_OFFSET > , SetwhiteSpace : SetwhiteSpace :: < Impl , IMPL_OFFSET > , whiteSpace : whiteSpace :: < Impl , IMPL_OFFSET > , Settop : Settop :: < Impl , IMPL_OFFSET > , top : top :: < Impl , IMPL_OFFSET > , Setleft : Setleft :: < Impl , IMPL_OFFSET > , left : left :: < Impl , IMPL_OFFSET > , SetzIndex : SetzIndex :: < Impl , IMPL_OFFSET > , zIndex : zIndex :: < Impl , IMPL_OFFSET > , Setoverflow : Setoverflow :: < Impl , IMPL_OFFSET > , overflow : overflow :: < Impl , IMPL_OFFSET > , SetpageBreakBefore : SetpageBreakBefore :: < Impl , IMPL_OFFSET > , pageBreakBefore : pageBreakBefore :: < Impl , IMPL_OFFSET > , SetpageBreakAfter : SetpageBreakAfter :: < Impl , IMPL_OFFSET > , pageBreakAfter : pageBreakAfter :: < Impl , IMPL_OFFSET > , SetcssText : SetcssText :: < Impl , IMPL_OFFSET > , cssText : cssText :: < Impl , IMPL_OFFSET > , Setcursor : Setcursor :: < Impl , IMPL_OFFSET > , cursor : cursor :: < Impl , IMPL_OFFSET > , Setclip : Setclip :: < Impl , IMPL_OFFSET > , clip : clip :: < Impl , IMPL_OFFSET > , Setfilter : Setfilter :: < Impl , IMPL_OFFSET > , filter : filter :: < Impl , IMPL_OFFSET > , SettableLayout : SettableLayout :: < Impl , IMPL_OFFSET > , tableLayout : tableLayout :: < Impl , IMPL_OFFSET > , SetborderCollapse : SetborderCollapse :: < Impl , IMPL_OFFSET > , borderCollapse : borderCollapse :: < Impl , IMPL_OFFSET > , Setdirection : Setdirection :: < Impl , IMPL_OFFSET > , direction : direction :: < Impl , IMPL_OFFSET > , Setbehavior : Setbehavior :: < Impl , IMPL_OFFSET > , behavior : behavior :: < Impl , IMPL_OFFSET > , Setposition : Setposition :: < Impl , IMPL_OFFSET > , position : position :: < Impl , IMPL_OFFSET > , SetunicodeBidi : SetunicodeBidi :: < Impl , IMPL_OFFSET > , unicodeBidi : unicodeBidi :: < Impl , IMPL_OFFSET > , Setbottom : Setbottom :: < Impl , IMPL_OFFSET > , bottom : bottom :: < Impl , IMPL_OFFSET > , Setright : Setright :: < Impl , IMPL_OFFSET > , right : right :: < Impl , IMPL_OFFSET > , SetimeMode : SetimeMode :: < Impl , IMPL_OFFSET > , imeMode : imeMode :: < Impl , IMPL_OFFSET > , SetrubyAlign : SetrubyAlign :: < Impl , IMPL_OFFSET > , rubyAlign : rubyAlign :: < Impl , IMPL_OFFSET > , SetrubyPosition : SetrubyPosition :: < Impl , IMPL_OFFSET > , rubyPosition : rubyPosition :: < Impl , IMPL_OFFSET > , SetrubyOverhang : SetrubyOverhang :: < Impl , IMPL_OFFSET > , rubyOverhang : rubyOverhang :: < Impl , IMPL_OFFSET > , SetlayoutGridChar : SetlayoutGridChar :: < Impl , IMPL_OFFSET > , layoutGridChar : layoutGridChar :: < Impl , IMPL_OFFSET > , SetlayoutGridLine : SetlayoutGridLine :: < Impl , IMPL_OFFSET > , layoutGridLine : layoutGridLine :: < Impl , IMPL_OFFSET > , SetlayoutGridMode : SetlayoutGridMode :: < Impl , IMPL_OFFSET > , layoutGridMode : layoutGridMode :: < Impl , IMPL_OFFSET > , SetlayoutGridType : SetlayoutGridType :: < Impl , IMPL_OFFSET > , layoutGridType : layoutGridType :: < Impl , IMPL_OFFSET > , SetlayoutGrid : SetlayoutGrid :: < Impl , IMPL_OFFSET > , layoutGrid : layoutGrid :: < Impl , IMPL_OFFSET > , SettextAutospace : SettextAutospace :: < Impl , IMPL_OFFSET > , textAutospace : textAutospace :: < Impl , IMPL_OFFSET > , SetwordBreak : SetwordBreak :: < Impl , IMPL_OFFSET > , wordBreak : wordBreak :: < Impl , IMPL_OFFSET > , SetlineBreak : SetlineBreak :: < Impl , IMPL_OFFSET > , lineBreak : lineBreak :: < Impl , IMPL_OFFSET > , SettextJustify : SettextJustify :: < Impl , IMPL_OFFSET > , textJustify : textJustify :: < Impl , IMPL_OFFSET > , SettextJustifyTrim : SettextJustifyTrim :: < Impl , IMPL_OFFSET > , textJustifyTrim : textJustifyTrim :: < Impl , IMPL_OFFSET > , SettextKashida : SettextKashida :: < Impl , IMPL_OFFSET > , textKashida : textKashida :: < Impl , IMPL_OFFSET > , SetoverflowX : SetoverflowX :: < Impl , IMPL_OFFSET > , overflowX : overflowX :: < Impl , IMPL_OFFSET > , SetoverflowY : SetoverflowY :: < Impl , IMPL_OFFSET > , overflowY : overflowY :: < Impl , IMPL_OFFSET > , Setaccelerator : Setaccelerator :: < Impl , IMPL_OFFSET > , accelerator : accelerator :: < Impl , IMPL_OFFSET > , SetlayoutFlow : SetlayoutFlow :: < Impl , IMPL_OFFSET > , layoutFlow : layoutFlow :: < Impl , IMPL_OFFSET > , Setzoom : Setzoom :: < Impl , IMPL_OFFSET > , zoom : zoom :: < Impl , IMPL_OFFSET > , SetwordWrap : SetwordWrap :: < Impl , IMPL_OFFSET > , wordWrap : wordWrap :: < Impl , IMPL_OFFSET > , SettextUnderlinePosition : SettextUnderlinePosition :: < Impl , IMPL_OFFSET > , textUnderlinePosition : textUnderlinePosition :: < Impl , IMPL_OFFSET > , SetscrollbarBaseColor : SetscrollbarBaseColor :: < Impl , IMPL_OFFSET > , scrollbarBaseColor : scrollbarBaseColor :: < Impl , IMPL_OFFSET > , SetscrollbarFaceColor : SetscrollbarFaceColor :: < Impl , IMPL_OFFSET > , scrollbarFaceColor : scrollbarFaceColor :: < Impl , IMPL_OFFSET > , Setscrollbar3dLightColor : Setscrollbar3dLightColor :: < Impl , IMPL_OFFSET > , scrollbar3dLightColor : scrollbar3dLightColor :: < Impl , IMPL_OFFSET > , SetscrollbarShadowColor : SetscrollbarShadowColor :: < Impl , IMPL_OFFSET > , scrollbarShadowColor : scrollbarShadowColor :: < Impl , IMPL_OFFSET > , SetscrollbarHighlightColor : SetscrollbarHighlightColor :: < Impl , IMPL_OFFSET > , scrollbarHighlightColor : scrollbarHighlightColor :: < Impl , IMPL_OFFSET > , SetscrollbarDarkShadowColor : SetscrollbarDarkShadowColor :: < Impl , IMPL_OFFSET > , scrollbarDarkShadowColor : scrollbarDarkShadowColor :: < Impl , IMPL_OFFSET > , SetscrollbarArrowColor : SetscrollbarArrowColor :: < Impl , IMPL_OFFSET > , scrollbarArrowColor : scrollbarArrowColor :: < Impl , IMPL_OFFSET > , SetscrollbarTrackColor : SetscrollbarTrackColor :: < Impl , IMPL_OFFSET > , scrollbarTrackColor : scrollbarTrackColor :: < Impl , IMPL_OFFSET > , SetwritingMode : SetwritingMode :: < Impl , IMPL_OFFSET > , writingMode : writingMode :: < Impl , IMPL_OFFSET > , SettextAlignLast : SettextAlignLast :: < Impl , IMPL_OFFSET > , textAlignLast : textAlignLast :: < Impl , IMPL_OFFSET > , SettextKashidaSpace : SettextKashidaSpace :: < Impl , IMPL_OFFSET > , textKashidaSpace : textKashidaSpace :: < Impl , IMPL_OFFSET > , SettextOverflow : SettextOverflow :: < Impl , IMPL_OFFSET > , textOverflow : textOverflow :: < Impl , IMPL_OFFSET > , SetminHeight : SetminHeight :: < Impl , IMPL_OFFSET > , minHeight : minHeight :: < Impl , IMPL_OFFSET > , SetmsInterpolationMode : SetmsInterpolationMode :: < Impl , IMPL_OFFSET > , msInterpolationMode : msInterpolationMode :: < Impl , IMPL_OFFSET > , SetmaxHeight : SetmaxHeight :: < Impl , IMPL_OFFSET > , maxHeight : maxHeight :: < Impl , IMPL_OFFSET > , SetminWidth : SetminWidth :: < Impl , IMPL_OFFSET > , minWidth : minWidth :: < Impl , IMPL_OFFSET > , SetmaxWidth : SetmaxWidth :: < Impl , IMPL_OFFSET > , maxWidth : maxWidth :: < Impl , IMPL_OFFSET > , Setcontent : Setcontent :: < Impl , IMPL_OFFSET > , content : content :: < Impl , IMPL_OFFSET > , SetcaptionSide : SetcaptionSide :: < Impl , IMPL_OFFSET > , captionSide : captionSide :: < Impl , IMPL_OFFSET > , SetcounterIncrement : SetcounterIncrement :: < Impl , IMPL_OFFSET > , counterIncrement : counterIncrement :: < Impl , IMPL_OFFSET > , SetcounterReset : SetcounterReset :: < Impl , IMPL_OFFSET > , counterReset : counterReset :: < Impl , IMPL_OFFSET > , Setoutline : Setoutline :: < Impl , IMPL_OFFSET > , outline : outline :: < Impl , IMPL_OFFSET > , SetoutlineWidth : SetoutlineWidth :: < Impl , IMPL_OFFSET > , outlineWidth : outlineWidth :: < Impl , IMPL_OFFSET > , SetoutlineStyle : SetoutlineStyle :: < Impl , IMPL_OFFSET > , outlineStyle : outlineStyle :: < Impl , IMPL_OFFSET > , SetoutlineColor : SetoutlineColor :: < Impl , IMPL_OFFSET > , outlineColor : outlineColor :: < Impl , IMPL_OFFSET > , SetboxSizing : SetboxSizing :: < Impl , IMPL_OFFSET > , boxSizing : boxSizing :: < Impl , IMPL_OFFSET > , SetborderSpacing : SetborderSpacing :: < Impl , IMPL_OFFSET > , borderSpacing : borderSpacing :: < Impl , IMPL_OFFSET > , Setorphans : Setorphans :: < Impl , IMPL_OFFSET > , orphans : orphans :: < Impl , IMPL_OFFSET > , Setwidows : Setwidows :: < Impl , IMPL_OFFSET > , widows : widows :: < Impl , IMPL_OFFSET > , SetpageBreakInside : SetpageBreakInside :: < Impl , IMPL_OFFSET > , pageBreakInside : pageBreakInside :: < Impl , IMPL_OFFSET > , SetemptyCells : SetemptyCells :: < Impl , IMPL_OFFSET > , emptyCells : emptyCells :: < Impl , IMPL_OFFSET > , SetmsBlockProgression : SetmsBlockProgression :: < Impl , IMPL_OFFSET > , msBlockProgression : msBlockProgression :: < Impl , IMPL_OFFSET > , Setquotes : Setquotes :: < Impl , IMPL_OFFSET > , quotes : quotes :: < Impl , IMPL_OFFSET > , SetalignmentBaseline : SetalignmentBaseline :: < Impl , IMPL_OFFSET > , alignmentBaseline : alignmentBaseline :: < Impl , IMPL_OFFSET > , SetbaselineShift : SetbaselineShift :: < Impl , IMPL_OFFSET > , baselineShift : baselineShift :: < Impl , IMPL_OFFSET > , SetdominantBaseline : SetdominantBaseline :: < Impl , IMPL_OFFSET > , dominantBaseline : dominantBaseline :: < Impl , IMPL_OFFSET > , SetfontSizeAdjust : SetfontSizeAdjust :: < Impl , IMPL_OFFSET > , fontSizeAdjust : fontSizeAdjust :: < Impl , IMPL_OFFSET > , SetfontStretch : SetfontStretch :: < Impl , IMPL_OFFSET > , fontStretch : fontStretch :: < Impl , IMPL_OFFSET > , Setopacity : Setopacity :: < Impl , IMPL_OFFSET > , opacity : opacity :: < Impl , IMPL_OFFSET > , SetclipPath : SetclipPath :: < Impl , IMPL_OFFSET > , clipPath : clipPath :: < Impl , IMPL_OFFSET > , SetclipRule : SetclipRule :: < Impl , IMPL_OFFSET > , clipRule : clipRule :: < Impl , IMPL_OFFSET > , Setfill : Setfill :: < Impl , IMPL_OFFSET > , fill : fill :: < Impl , IMPL_OFFSET > , SetfillOpacity : SetfillOpacity :: < Impl , IMPL_OFFSET > , fillOpacity : fillOpacity :: < Impl , IMPL_OFFSET > , SetfillRule : SetfillRule :: < Impl , IMPL_OFFSET > , fillRule : fillRule :: < Impl , IMPL_OFFSET > , Setkerning : Setkerning :: < Impl , IMPL_OFFSET > , kerning : kerning :: < Impl , IMPL_OFFSET > , Setmarker : Setmarker :: < Impl , IMPL_OFFSET > , marker : marker :: < Impl , IMPL_OFFSET > , SetmarkerEnd : SetmarkerEnd :: < Impl , IMPL_OFFSET > , markerEnd : markerEnd :: < Impl , IMPL_OFFSET > , SetmarkerMid : SetmarkerMid :: < Impl , IMPL_OFFSET > , markerMid : markerMid :: < Impl , IMPL_OFFSET > , SetmarkerStart : SetmarkerStart :: < Impl , IMPL_OFFSET > , markerStart : markerStart :: < Impl , IMPL_OFFSET > , Setmask : Setmask :: < Impl , IMPL_OFFSET > , mask : mask :: < Impl , IMPL_OFFSET > , SetpointerEvents : SetpointerEvents :: < Impl , IMPL_OFFSET > , pointerEvents : pointerEvents :: < Impl , IMPL_OFFSET > , SetstopColor : SetstopColor :: < Impl , IMPL_OFFSET > , stopColor : stopColor :: < Impl , IMPL_OFFSET > , SetstopOpacity : SetstopOpacity :: < Impl , IMPL_OFFSET > , stopOpacity : stopOpacity :: < Impl , IMPL_OFFSET > , Setstroke : Setstroke :: < Impl , IMPL_OFFSET > , stroke : stroke :: < Impl , IMPL_OFFSET > , SetstrokeDasharray : SetstrokeDasharray :: < Impl , IMPL_OFFSET > , strokeDasharray : strokeDasharray :: < Impl , IMPL_OFFSET > , SetstrokeDashoffset : SetstrokeDashoffset :: < Impl , IMPL_OFFSET > , strokeDashoffset : strokeDashoffset :: < Impl , IMPL_OFFSET > , SetstrokeLinecap : SetstrokeLinecap :: < Impl , IMPL_OFFSET > , strokeLinecap : strokeLinecap :: < Impl , IMPL_OFFSET > , SetstrokeLinejoin : SetstrokeLinejoin :: < Impl , IMPL_OFFSET > , strokeLinejoin : strokeLinejoin :: < Impl , IMPL_OFFSET > , SetstrokeMiterlimit : SetstrokeMiterlimit :: < Impl , IMPL_OFFSET > , strokeMiterlimit : strokeMiterlimit :: < Impl , IMPL_OFFSET > , SetstrokeOpacity : SetstrokeOpacity :: < Impl , IMPL_OFFSET > , strokeOpacity : strokeOpacity :: < Impl , IMPL_OFFSET > , SetstrokeWidth : SetstrokeWidth :: < Impl , IMPL_OFFSET > , strokeWidth : strokeWidth :: < Impl , IMPL_OFFSET > , SettextAnchor : SettextAnchor :: < Impl , IMPL_OFFSET > , textAnchor : textAnchor :: < Impl , IMPL_OFFSET > , SetglyphOrientationHorizontal : SetglyphOrientationHorizontal :: < Impl , IMPL_OFFSET > , glyphOrientationHorizontal : glyphOrientationHorizontal :: < Impl , IMPL_OFFSET > , SetglyphOrientationVertical : SetglyphOrientationVertical :: < Impl , IMPL_OFFSET > , glyphOrientationVertical : glyphOrientationVertical :: < Impl , IMPL_OFFSET > , SetborderRadius : SetborderRadius :: < Impl , IMPL_OFFSET > , borderRadius : borderRadius :: < Impl , IMPL_OFFSET > , SetborderTopLeftRadius : SetborderTopLeftRadius :: < Impl , IMPL_OFFSET > , borderTopLeftRadius : borderTopLeftRadius :: < Impl , IMPL_OFFSET > , SetborderTopRightRadius : SetborderTopRightRadius :: < Impl , IMPL_OFFSET > , borderTopRightRadius : borderTopRightRadius :: < Impl , IMPL_OFFSET > , SetborderBottomRightRadius : SetborderBottomRightRadius :: < Impl , IMPL_OFFSET > , borderBottomRightRadius : borderBottomRightRadius :: < Impl , IMPL_OFFSET > , SetborderBottomLeftRadius : SetborderBottomLeftRadius :: < Impl , IMPL_OFFSET > , borderBottomLeftRadius : borderBottomLeftRadius :: < Impl , IMPL_OFFSET > , SetclipTop : SetclipTop :: < Impl , IMPL_OFFSET > , clipTop : clipTop :: < Impl , IMPL_OFFSET > , SetclipRight : SetclipRight :: < Impl , IMPL_OFFSET > , clipRight : clipRight :: < Impl , IMPL_OFFSET > , clipBottom : clipBottom :: < Impl , IMPL_OFFSET > , SetclipLeft : SetclipLeft :: < Impl , IMPL_OFFSET > , clipLeft : clipLeft :: < Impl , IMPL_OFFSET > , SetcssFloat : SetcssFloat :: < Impl , IMPL_OFFSET > , cssFloat : cssFloat :: < Impl , IMPL_OFFSET > , SetbackgroundClip : SetbackgroundClip :: < Impl , IMPL_OFFSET > , backgroundClip : backgroundClip :: < Impl , IMPL_OFFSET > , SetbackgroundOrigin : SetbackgroundOrigin :: < Impl , IMPL_OFFSET > , backgroundOrigin : backgroundOrigin :: < Impl , IMPL_OFFSET > , SetbackgroundSize : SetbackgroundSize :: < Impl , IMPL_OFFSET > , backgroundSize : backgroundSize :: < Impl , IMPL_OFFSET > , SetboxShadow : SetboxShadow :: < Impl , IMPL_OFFSET > , boxShadow : boxShadow :: < Impl , IMPL_OFFSET > , SetmsTransform : SetmsTransform :: < Impl , IMPL_OFFSET > , msTransform : msTransform :: < Impl , IMPL_OFFSET > , SetmsTransformOrigin : SetmsTransformOrigin :: < Impl , IMPL_OFFSET > , msTransformOrigin : msTransformOrigin :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLCSSStyleDeclaration < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLCSSStyleDeclaration2Impl < > : Sized + IDispatchImpl where { fn SetmsScrollChaining ( ) ; fn msScrollChaining ( ) ; fn SetmsContentZooming ( ) ; fn msContentZooming ( ) ; fn SetmsContentZoomSnapType ( ) ; fn msContentZoomSnapType ( ) ; fn SetmsScrollRails ( ) ; fn msScrollRails ( ) ; fn SetmsContentZoomChaining ( ) ; fn msContentZoomChaining ( ) ; fn SetmsScrollSnapType ( ) ; fn msScrollSnapType ( ) ; fn SetmsContentZoomLimit ( ) ; fn msContentZoomLimit ( ) ; fn SetmsContentZoomSnap ( ) ; fn msContentZoomSnap ( ) ; fn SetmsContentZoomSnapPoints ( ) ; fn msContentZoomSnapPoints ( ) ; fn SetmsContentZoomLimitMin ( ) ; fn msContentZoomLimitMin ( ) ; fn SetmsContentZoomLimitMax ( ) ; fn msContentZoomLimitMax ( ) ; fn SetmsScrollSnapX ( ) ; fn msScrollSnapX ( ) ; fn SetmsScrollSnapY ( ) ; fn msScrollSnapY ( ) ; fn SetmsScrollSnapPointsX ( ) ; fn msScrollSnapPointsX ( ) ; fn SetmsScrollSnapPointsY ( ) ; fn msScrollSnapPointsY ( ) ; fn SetmsGridColumn ( ) ; fn msGridColumn ( ) ; fn SetmsGridColumnAlign ( ) ; fn msGridColumnAlign ( ) ; fn SetmsGridColumns ( ) ; fn msGridColumns ( ) ; fn SetmsGridColumnSpan ( ) ; fn msGridColumnSpan ( ) ; fn SetmsGridRow ( ) ; fn msGridRow ( ) ; fn SetmsGridRowAlign ( ) ; fn msGridRowAlign ( ) ; fn SetmsGridRows ( ) ; fn msGridRows ( ) ; fn SetmsGridRowSpan ( ) ; fn msGridRowSpan ( ) ; fn SetmsWrapThrough ( ) ; fn msWrapThrough ( ) ; fn SetmsWrapMargin ( ) ; fn msWrapMargin ( ) ; fn SetmsWrapFlow ( ) ; fn msWrapFlow ( ) ; fn SetmsAnimationName ( ) ; fn msAnimationName ( ) ; fn SetmsAnimationDuration ( ) ; fn msAnimationDuration ( ) ; fn SetmsAnimationTimingFunction ( ) ; fn msAnimationTimingFunction ( ) ; fn SetmsAnimationDelay ( ) ; fn msAnimationDelay ( ) ; fn SetmsAnimationDirection ( ) ; fn msAnimationDirection ( ) ; fn SetmsAnimationPlayState ( ) ; fn msAnimationPlayState ( ) ; fn SetmsAnimationIterationCount ( ) ; fn msAnimationIterationCount ( ) ; fn SetmsAnimation ( ) ; fn msAnimation ( ) ; fn SetmsAnimationFillMode ( ) ; fn msAnimationFillMode ( ) ; fn SetcolorInterpolationFilters ( ) ; fn colorInterpolationFilters ( ) ; fn SetcolumnCount ( ) ; fn columnCount ( ) ; fn SetcolumnWidth ( ) ; fn columnWidth ( ) ; fn SetcolumnGap ( ) ; fn columnGap ( ) ; fn SetcolumnFill ( ) ; fn columnFill ( ) ; fn SetcolumnSpan ( ) ; fn columnSpan ( ) ; fn Setcolumns ( ) ; fn columns ( ) ; fn SetcolumnRule ( ) ; fn columnRule ( ) ; fn SetcolumnRuleColor ( ) ; fn columnRuleColor ( ) ; fn SetcolumnRuleStyle ( ) ; fn columnRuleStyle ( ) ; fn SetcolumnRuleWidth ( ) ; fn columnRuleWidth ( ) ; fn SetbreakBefore ( ) ; fn breakBefore ( ) ; fn SetbreakAfter ( ) ; fn breakAfter ( ) ; fn SetbreakInside ( ) ; fn breakInside ( ) ; fn SetfloodColor ( ) ; fn floodColor ( ) ; fn SetfloodOpacity ( ) ; fn floodOpacity ( ) ; fn SetlightingColor ( ) ; fn lightingColor ( ) ; fn SetmsScrollLimitXMin ( ) ; fn msScrollLimitXMin ( ) ; fn SetmsScrollLimitYMin ( ) ; fn msScrollLimitYMin ( ) ; fn SetmsScrollLimitXMax ( ) ; fn msScrollLimitXMax ( ) ; fn SetmsScrollLimitYMax ( ) ; fn msScrollLimitYMax ( ) ; fn SetmsScrollLimit ( ) ; fn msScrollLimit ( ) ; fn SettextShadow ( ) ; fn textShadow ( ) ; fn SetmsFlowFrom ( ) ; fn msFlowFrom ( ) ; fn SetmsFlowInto ( ) ; fn msFlowInto ( ) ; fn SetmsHyphens ( ) ; fn msHyphens ( ) ; fn SetmsHyphenateLimitZone ( ) ; fn msHyphenateLimitZone ( ) ; fn SetmsHyphenateLimitChars ( ) ; fn msHyphenateLimitChars ( ) ; fn SetmsHyphenateLimitLines ( ) ; fn msHyphenateLimitLines ( ) ; fn SetmsHighContrastAdjust ( ) ; fn msHighContrastAdjust ( ) ; fn SetenableBackground ( ) ; fn enableBackground ( ) ; fn SetmsFontFeatureSettings ( ) ; fn msFontFeatureSettings ( ) ; fn SetmsUserSelect ( ) ; fn msUserSelect ( ) ; fn SetmsOverflowStyle ( ) ; fn msOverflowStyle ( ) ; fn SetmsTransformStyle ( ) ; fn msTransformStyle ( ) ; fn SetmsBackfaceVisibility ( ) ; fn msBackfaceVisibility ( ) ; fn SetmsPerspective ( ) ; fn msPerspective ( ) ; fn SetmsPerspectiveOrigin ( ) ; fn msPerspectiveOrigin ( ) ; fn SetmsTransitionProperty ( ) ; fn msTransitionProperty ( ) ; fn SetmsTransitionDuration ( ) ; fn msTransitionDuration ( ) ; fn SetmsTransitionTimingFunction ( ) ; fn msTransitionTimingFunction ( ) ; fn SetmsTransitionDelay ( ) ; fn msTransitionDelay ( ) ; fn SetmsTransition ( ) ; fn msTransition ( ) ; fn SetmsTouchAction ( ) ; fn msTouchAction ( ) ; fn SetmsScrollTranslation ( ) ; fn msScrollTranslation ( ) ; fn SetmsFlex ( ) ; fn msFlex ( ) ; fn SetmsFlexPositive ( ) ; fn msFlexPositive ( ) ; fn SetmsFlexNegative ( ) ; fn msFlexNegative ( ) ; fn SetmsFlexPreferredSize ( ) ; fn msFlexPreferredSize ( ) ; fn SetmsFlexFlow ( ) ; fn msFlexFlow ( ) ; fn SetmsFlexDirection ( ) ; fn msFlexDirection ( ) ; fn SetmsFlexWrap ( ) ; fn msFlexWrap ( ) ; fn SetmsFlexAlign ( ) ; fn msFlexAlign ( ) ; fn SetmsFlexItemAlign ( ) ; fn msFlexItemAlign ( ) ; fn SetmsFlexPack ( ) ; fn msFlexPack ( ) ; fn SetmsFlexLinePack ( ) ; fn msFlexLinePack ( ) ; fn SetmsFlexOrder ( ) ; fn msFlexOrder ( ) ; fn SetmsTouchSelect ( ) ; fn msTouchSelect ( ) ; fn Settransform ( ) ; fn transform ( ) ; fn SettransformOrigin ( ) ; fn transformOrigin ( ) ; fn SettransformStyle ( ) ; fn transformStyle ( ) ; fn SetbackfaceVisibility ( ) ; fn backfaceVisibility ( ) ; fn Setperspective ( ) ; fn perspective ( ) ; fn SetperspectiveOrigin ( ) ; fn perspectiveOrigin ( ) ; fn SettransitionProperty ( ) ; fn transitionProperty ( ) ; fn SettransitionDuration ( ) ; fn transitionDuration ( ) ; fn SettransitionTimingFunction ( ) ; fn transitionTimingFunction ( ) ; fn SettransitionDelay ( ) ; fn transitionDelay ( ) ; fn Settransition ( ) ; fn transition ( ) ; fn SetfontFeatureSettings ( ) ; fn fontFeatureSettings ( ) ; fn SetanimationName ( ) ; fn animationName ( ) ; fn SetanimationDuration ( ) ; fn animationDuration ( ) ; fn SetanimationTimingFunction ( ) ; fn animationTimingFunction ( ) ; fn SetanimationDelay ( ) ; fn animationDelay ( ) ; fn SetanimationDirection ( ) ; fn animationDirection ( ) ; fn SetanimationPlayState ( ) ; fn animationPlayState ( ) ; fn SetanimationIterationCount ( ) ; fn animationIterationCount ( ) ; fn Setanimation ( ) ; fn animation ( ) ; fn SetanimationFillMode ( ) ; fn animationFillMode ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLCSSStyleDeclaration2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLCSSStyleDeclaration2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLCSSStyleDeclaration2Vtbl < > { unsafe extern "system" fn SetmsScrollChaining < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msScrollChaining < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsContentZooming < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msContentZooming < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsContentZoomSnapType < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msContentZoomSnapType < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsScrollRails < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msScrollRails < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsContentZoomChaining < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msContentZoomChaining < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsScrollSnapType < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msScrollSnapType < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsContentZoomLimit < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msContentZoomLimit < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsContentZoomSnap < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msContentZoomSnap < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsContentZoomSnapPoints < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msContentZoomSnapPoints < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsContentZoomLimitMin < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msContentZoomLimitMin < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsContentZoomLimitMax < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msContentZoomLimitMax < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsScrollSnapX < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msScrollSnapX < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsScrollSnapY < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msScrollSnapY < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsScrollSnapPointsX < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msScrollSnapPointsX < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsScrollSnapPointsY < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msScrollSnapPointsY < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsGridColumn < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msGridColumn < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsGridColumnAlign < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msGridColumnAlign < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsGridColumns < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msGridColumns < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsGridColumnSpan < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msGridColumnSpan < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsGridRow < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msGridRow < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsGridRowAlign < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msGridRowAlign < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsGridRows < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msGridRows < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsGridRowSpan < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msGridRowSpan < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsWrapThrough < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msWrapThrough < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsWrapMargin < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msWrapMargin < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsWrapFlow < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msWrapFlow < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsAnimationName < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msAnimationName < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsAnimationDuration < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msAnimationDuration < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsAnimationTimingFunction < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msAnimationTimingFunction < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsAnimationDelay < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msAnimationDelay < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsAnimationDirection < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msAnimationDirection < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsAnimationPlayState < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msAnimationPlayState < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsAnimationIterationCount < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msAnimationIterationCount < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsAnimation < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msAnimation < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsAnimationFillMode < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msAnimationFillMode < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetcolorInterpolationFilters < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn colorInterpolationFilters < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetcolumnCount < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn columnCount < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetcolumnWidth < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn columnWidth < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetcolumnGap < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn columnGap < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetcolumnFill < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn columnFill < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetcolumnSpan < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn columnSpan < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setcolumns < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn columns < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetcolumnRule < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn columnRule < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetcolumnRuleColor < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn columnRuleColor < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetcolumnRuleStyle < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn columnRuleStyle < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetcolumnRuleWidth < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn columnRuleWidth < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetbreakBefore < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn breakBefore < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetbreakAfter < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn breakAfter < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetbreakInside < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn breakInside < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetfloodColor < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn floodColor < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetfloodOpacity < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn floodOpacity < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetlightingColor < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn lightingColor < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsScrollLimitXMin < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msScrollLimitXMin < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsScrollLimitYMin < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msScrollLimitYMin < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsScrollLimitXMax < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msScrollLimitXMax < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsScrollLimitYMax < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msScrollLimitYMax < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsScrollLimit < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msScrollLimit < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextShadow < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textShadow < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsFlowFrom < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msFlowFrom < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsFlowInto < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msFlowInto < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsHyphens < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msHyphens < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsHyphenateLimitZone < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msHyphenateLimitZone < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsHyphenateLimitChars < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msHyphenateLimitChars < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsHyphenateLimitLines < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msHyphenateLimitLines < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsHighContrastAdjust < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msHighContrastAdjust < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetenableBackground < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn enableBackground < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsFontFeatureSettings < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msFontFeatureSettings < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsUserSelect < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msUserSelect < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsOverflowStyle < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msOverflowStyle < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsTransformStyle < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msTransformStyle < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsBackfaceVisibility < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msBackfaceVisibility < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsPerspective < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msPerspective < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsPerspectiveOrigin < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msPerspectiveOrigin < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsTransitionProperty < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msTransitionProperty < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsTransitionDuration < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msTransitionDuration < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsTransitionTimingFunction < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msTransitionTimingFunction < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsTransitionDelay < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msTransitionDelay < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsTransition < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msTransition < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsTouchAction < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msTouchAction < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsScrollTranslation < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msScrollTranslation < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsFlex < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msFlex < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsFlexPositive < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msFlexPositive < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsFlexNegative < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msFlexNegative < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsFlexPreferredSize < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msFlexPreferredSize < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsFlexFlow < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msFlexFlow < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsFlexDirection < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msFlexDirection < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsFlexWrap < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msFlexWrap < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsFlexAlign < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msFlexAlign < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsFlexItemAlign < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msFlexItemAlign < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsFlexPack < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msFlexPack < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsFlexLinePack < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msFlexLinePack < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsFlexOrder < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msFlexOrder < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsTouchSelect < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msTouchSelect < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Settransform < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn transform < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettransformOrigin < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn transformOrigin < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettransformStyle < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn transformStyle < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetbackfaceVisibility < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn backfaceVisibility < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setperspective < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn perspective < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetperspectiveOrigin < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn perspectiveOrigin < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettransitionProperty < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn transitionProperty < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettransitionDuration < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn transitionDuration < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettransitionTimingFunction < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn transitionTimingFunction < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettransitionDelay < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn transitionDelay < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Settransition < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn transition < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetfontFeatureSettings < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn fontFeatureSettings < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetanimationName < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn animationName < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetanimationDuration < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn animationDuration < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetanimationTimingFunction < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn animationTimingFunction < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetanimationDelay < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn animationDelay < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetanimationDirection < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn animationDirection < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetanimationPlayState < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn animationPlayState < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetanimationIterationCount < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn animationIterationCount < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setanimation < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn animation < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetanimationFillMode < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn animationFillMode < Impl : IHTMLCSSStyleDeclaration2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetmsScrollChaining : SetmsScrollChaining :: < Impl , IMPL_OFFSET > , msScrollChaining : msScrollChaining :: < Impl , IMPL_OFFSET > , SetmsContentZooming : SetmsContentZooming :: < Impl , IMPL_OFFSET > , msContentZooming : msContentZooming :: < Impl , IMPL_OFFSET > , SetmsContentZoomSnapType : SetmsContentZoomSnapType :: < Impl , IMPL_OFFSET > , msContentZoomSnapType : msContentZoomSnapType :: < Impl , IMPL_OFFSET > , SetmsScrollRails : SetmsScrollRails :: < Impl , IMPL_OFFSET > , msScrollRails : msScrollRails :: < Impl , IMPL_OFFSET > , SetmsContentZoomChaining : SetmsContentZoomChaining :: < Impl , IMPL_OFFSET > , msContentZoomChaining : msContentZoomChaining :: < Impl , IMPL_OFFSET > , SetmsScrollSnapType : SetmsScrollSnapType :: < Impl , IMPL_OFFSET > , msScrollSnapType : msScrollSnapType :: < Impl , IMPL_OFFSET > , SetmsContentZoomLimit : SetmsContentZoomLimit :: < Impl , IMPL_OFFSET > , msContentZoomLimit : msContentZoomLimit :: < Impl , IMPL_OFFSET > , SetmsContentZoomSnap : SetmsContentZoomSnap :: < Impl , IMPL_OFFSET > , msContentZoomSnap : msContentZoomSnap :: < Impl , IMPL_OFFSET > , SetmsContentZoomSnapPoints : SetmsContentZoomSnapPoints :: < Impl , IMPL_OFFSET > , msContentZoomSnapPoints : msContentZoomSnapPoints :: < Impl , IMPL_OFFSET > , SetmsContentZoomLimitMin : SetmsContentZoomLimitMin :: < Impl , IMPL_OFFSET > , msContentZoomLimitMin : msContentZoomLimitMin :: < Impl , IMPL_OFFSET > , SetmsContentZoomLimitMax : SetmsContentZoomLimitMax :: < Impl , IMPL_OFFSET > , msContentZoomLimitMax : msContentZoomLimitMax :: < Impl , IMPL_OFFSET > , SetmsScrollSnapX : SetmsScrollSnapX :: < Impl , IMPL_OFFSET > , msScrollSnapX : msScrollSnapX :: < Impl , IMPL_OFFSET > , SetmsScrollSnapY : SetmsScrollSnapY :: < Impl , IMPL_OFFSET > , msScrollSnapY : msScrollSnapY :: < Impl , IMPL_OFFSET > , SetmsScrollSnapPointsX : SetmsScrollSnapPointsX :: < Impl , IMPL_OFFSET > , msScrollSnapPointsX : msScrollSnapPointsX :: < Impl , IMPL_OFFSET > , SetmsScrollSnapPointsY : SetmsScrollSnapPointsY :: < Impl , IMPL_OFFSET > , msScrollSnapPointsY : msScrollSnapPointsY :: < Impl , IMPL_OFFSET > , SetmsGridColumn : SetmsGridColumn :: < Impl , IMPL_OFFSET > , msGridColumn : msGridColumn :: < Impl , IMPL_OFFSET > , SetmsGridColumnAlign : SetmsGridColumnAlign :: < Impl , IMPL_OFFSET > , msGridColumnAlign : msGridColumnAlign :: < Impl , IMPL_OFFSET > , SetmsGridColumns : SetmsGridColumns :: < Impl , IMPL_OFFSET > , msGridColumns : msGridColumns :: < Impl , IMPL_OFFSET > , SetmsGridColumnSpan : SetmsGridColumnSpan :: < Impl , IMPL_OFFSET > , msGridColumnSpan : msGridColumnSpan :: < Impl , IMPL_OFFSET > , SetmsGridRow : SetmsGridRow :: < Impl , IMPL_OFFSET > , msGridRow : msGridRow :: < Impl , IMPL_OFFSET > , SetmsGridRowAlign : SetmsGridRowAlign :: < Impl , IMPL_OFFSET > , msGridRowAlign : msGridRowAlign :: < Impl , IMPL_OFFSET > , SetmsGridRows : SetmsGridRows :: < Impl , IMPL_OFFSET > , msGridRows : msGridRows :: < Impl , IMPL_OFFSET > , SetmsGridRowSpan : SetmsGridRowSpan :: < Impl , IMPL_OFFSET > , msGridRowSpan : msGridRowSpan :: < Impl , IMPL_OFFSET > , SetmsWrapThrough : SetmsWrapThrough :: < Impl , IMPL_OFFSET > , msWrapThrough : msWrapThrough :: < Impl , IMPL_OFFSET > , SetmsWrapMargin : SetmsWrapMargin :: < Impl , IMPL_OFFSET > , msWrapMargin : msWrapMargin :: < Impl , IMPL_OFFSET > , SetmsWrapFlow : SetmsWrapFlow :: < Impl , IMPL_OFFSET > , msWrapFlow : msWrapFlow :: < Impl , IMPL_OFFSET > , SetmsAnimationName : SetmsAnimationName :: < Impl , IMPL_OFFSET > , msAnimationName : msAnimationName :: < Impl , IMPL_OFFSET > , SetmsAnimationDuration : SetmsAnimationDuration :: < Impl , IMPL_OFFSET > , msAnimationDuration : msAnimationDuration :: < Impl , IMPL_OFFSET > , SetmsAnimationTimingFunction : SetmsAnimationTimingFunction :: < Impl , IMPL_OFFSET > , msAnimationTimingFunction : msAnimationTimingFunction :: < Impl , IMPL_OFFSET > , SetmsAnimationDelay : SetmsAnimationDelay :: < Impl , IMPL_OFFSET > , msAnimationDelay : msAnimationDelay :: < Impl , IMPL_OFFSET > , SetmsAnimationDirection : SetmsAnimationDirection :: < Impl , IMPL_OFFSET > , msAnimationDirection : msAnimationDirection :: < Impl , IMPL_OFFSET > , SetmsAnimationPlayState : SetmsAnimationPlayState :: < Impl , IMPL_OFFSET > , msAnimationPlayState : msAnimationPlayState :: < Impl , IMPL_OFFSET > , SetmsAnimationIterationCount : SetmsAnimationIterationCount :: < Impl , IMPL_OFFSET > , msAnimationIterationCount : msAnimationIterationCount :: < Impl , IMPL_OFFSET > , SetmsAnimation : SetmsAnimation :: < Impl , IMPL_OFFSET > , msAnimation : msAnimation :: < Impl , IMPL_OFFSET > , SetmsAnimationFillMode : SetmsAnimationFillMode :: < Impl , IMPL_OFFSET > , msAnimationFillMode : msAnimationFillMode :: < Impl , IMPL_OFFSET > , SetcolorInterpolationFilters : SetcolorInterpolationFilters :: < Impl , IMPL_OFFSET > , colorInterpolationFilters : colorInterpolationFilters :: < Impl , IMPL_OFFSET > , SetcolumnCount : SetcolumnCount :: < Impl , IMPL_OFFSET > , columnCount : columnCount :: < Impl , IMPL_OFFSET > , SetcolumnWidth : SetcolumnWidth :: < Impl , IMPL_OFFSET > , columnWidth : columnWidth :: < Impl , IMPL_OFFSET > , SetcolumnGap : SetcolumnGap :: < Impl , IMPL_OFFSET > , columnGap : columnGap :: < Impl , IMPL_OFFSET > , SetcolumnFill : SetcolumnFill :: < Impl , IMPL_OFFSET > , columnFill : columnFill :: < Impl , IMPL_OFFSET > , SetcolumnSpan : SetcolumnSpan :: < Impl , IMPL_OFFSET > , columnSpan : columnSpan :: < Impl , IMPL_OFFSET > , Setcolumns : Setcolumns :: < Impl , IMPL_OFFSET > , columns : columns :: < Impl , IMPL_OFFSET > , SetcolumnRule : SetcolumnRule :: < Impl , IMPL_OFFSET > , columnRule : columnRule :: < Impl , IMPL_OFFSET > , SetcolumnRuleColor : SetcolumnRuleColor :: < Impl , IMPL_OFFSET > , columnRuleColor : columnRuleColor :: < Impl , IMPL_OFFSET > , SetcolumnRuleStyle : SetcolumnRuleStyle :: < Impl , IMPL_OFFSET > , columnRuleStyle : columnRuleStyle :: < Impl , IMPL_OFFSET > , SetcolumnRuleWidth : SetcolumnRuleWidth :: < Impl , IMPL_OFFSET > , columnRuleWidth : columnRuleWidth :: < Impl , IMPL_OFFSET > , SetbreakBefore : SetbreakBefore :: < Impl , IMPL_OFFSET > , breakBefore : breakBefore :: < Impl , IMPL_OFFSET > , SetbreakAfter : SetbreakAfter :: < Impl , IMPL_OFFSET > , breakAfter : breakAfter :: < Impl , IMPL_OFFSET > , SetbreakInside : SetbreakInside :: < Impl , IMPL_OFFSET > , breakInside : breakInside :: < Impl , IMPL_OFFSET > , SetfloodColor : SetfloodColor :: < Impl , IMPL_OFFSET > , floodColor : floodColor :: < Impl , IMPL_OFFSET > , SetfloodOpacity : SetfloodOpacity :: < Impl , IMPL_OFFSET > , floodOpacity : floodOpacity :: < Impl , IMPL_OFFSET > , SetlightingColor : SetlightingColor :: < Impl , IMPL_OFFSET > , lightingColor : lightingColor :: < Impl , IMPL_OFFSET > , SetmsScrollLimitXMin : SetmsScrollLimitXMin :: < Impl , IMPL_OFFSET > , msScrollLimitXMin : msScrollLimitXMin :: < Impl , IMPL_OFFSET > , SetmsScrollLimitYMin : SetmsScrollLimitYMin :: < Impl , IMPL_OFFSET > , msScrollLimitYMin : msScrollLimitYMin :: < Impl , IMPL_OFFSET > , SetmsScrollLimitXMax : SetmsScrollLimitXMax :: < Impl , IMPL_OFFSET > , msScrollLimitXMax : msScrollLimitXMax :: < Impl , IMPL_OFFSET > , SetmsScrollLimitYMax : SetmsScrollLimitYMax :: < Impl , IMPL_OFFSET > , msScrollLimitYMax : msScrollLimitYMax :: < Impl , IMPL_OFFSET > , SetmsScrollLimit : SetmsScrollLimit :: < Impl , IMPL_OFFSET > , msScrollLimit : msScrollLimit :: < Impl , IMPL_OFFSET > , SettextShadow : SettextShadow :: < Impl , IMPL_OFFSET > , textShadow : textShadow :: < Impl , IMPL_OFFSET > , SetmsFlowFrom : SetmsFlowFrom :: < Impl , IMPL_OFFSET > , msFlowFrom : msFlowFrom :: < Impl , IMPL_OFFSET > , SetmsFlowInto : SetmsFlowInto :: < Impl , IMPL_OFFSET > , msFlowInto : msFlowInto :: < Impl , IMPL_OFFSET > , SetmsHyphens : SetmsHyphens :: < Impl , IMPL_OFFSET > , msHyphens : msHyphens :: < Impl , IMPL_OFFSET > , SetmsHyphenateLimitZone : SetmsHyphenateLimitZone :: < Impl , IMPL_OFFSET > , msHyphenateLimitZone : msHyphenateLimitZone :: < Impl , IMPL_OFFSET > , SetmsHyphenateLimitChars : SetmsHyphenateLimitChars :: < Impl , IMPL_OFFSET > , msHyphenateLimitChars : msHyphenateLimitChars :: < Impl , IMPL_OFFSET > , SetmsHyphenateLimitLines : SetmsHyphenateLimitLines :: < Impl , IMPL_OFFSET > , msHyphenateLimitLines : msHyphenateLimitLines :: < Impl , IMPL_OFFSET > , SetmsHighContrastAdjust : SetmsHighContrastAdjust :: < Impl , IMPL_OFFSET > , msHighContrastAdjust : msHighContrastAdjust :: < Impl , IMPL_OFFSET > , SetenableBackground : SetenableBackground :: < Impl , IMPL_OFFSET > , enableBackground : enableBackground :: < Impl , IMPL_OFFSET > , SetmsFontFeatureSettings : SetmsFontFeatureSettings :: < Impl , IMPL_OFFSET > , msFontFeatureSettings : msFontFeatureSettings :: < Impl , IMPL_OFFSET > , SetmsUserSelect : SetmsUserSelect :: < Impl , IMPL_OFFSET > , msUserSelect : msUserSelect :: < Impl , IMPL_OFFSET > , SetmsOverflowStyle : SetmsOverflowStyle :: < Impl , IMPL_OFFSET > , msOverflowStyle : msOverflowStyle :: < Impl , IMPL_OFFSET > , SetmsTransformStyle : SetmsTransformStyle :: < Impl , IMPL_OFFSET > , msTransformStyle : msTransformStyle :: < Impl , IMPL_OFFSET > , SetmsBackfaceVisibility : SetmsBackfaceVisibility :: < Impl , IMPL_OFFSET > , msBackfaceVisibility : msBackfaceVisibility :: < Impl , IMPL_OFFSET > , SetmsPerspective : SetmsPerspective :: < Impl , IMPL_OFFSET > , msPerspective : msPerspective :: < Impl , IMPL_OFFSET > , SetmsPerspectiveOrigin : SetmsPerspectiveOrigin :: < Impl , IMPL_OFFSET > , msPerspectiveOrigin : msPerspectiveOrigin :: < Impl , IMPL_OFFSET > , SetmsTransitionProperty : SetmsTransitionProperty :: < Impl , IMPL_OFFSET > , msTransitionProperty : msTransitionProperty :: < Impl , IMPL_OFFSET > , SetmsTransitionDuration : SetmsTransitionDuration :: < Impl , IMPL_OFFSET > , msTransitionDuration : msTransitionDuration :: < Impl , IMPL_OFFSET > , SetmsTransitionTimingFunction : SetmsTransitionTimingFunction :: < Impl , IMPL_OFFSET > , msTransitionTimingFunction : msTransitionTimingFunction :: < Impl , IMPL_OFFSET > , SetmsTransitionDelay : SetmsTransitionDelay :: < Impl , IMPL_OFFSET > , msTransitionDelay : msTransitionDelay :: < Impl , IMPL_OFFSET > , SetmsTransition : SetmsTransition :: < Impl , IMPL_OFFSET > , msTransition : msTransition :: < Impl , IMPL_OFFSET > , SetmsTouchAction : SetmsTouchAction :: < Impl , IMPL_OFFSET > , msTouchAction : msTouchAction :: < Impl , IMPL_OFFSET > , SetmsScrollTranslation : SetmsScrollTranslation :: < Impl , IMPL_OFFSET > , msScrollTranslation : msScrollTranslation :: < Impl , IMPL_OFFSET > , SetmsFlex : SetmsFlex :: < Impl , IMPL_OFFSET > , msFlex : msFlex :: < Impl , IMPL_OFFSET > , SetmsFlexPositive : SetmsFlexPositive :: < Impl , IMPL_OFFSET > , msFlexPositive : msFlexPositive :: < Impl , IMPL_OFFSET > , SetmsFlexNegative : SetmsFlexNegative :: < Impl , IMPL_OFFSET > , msFlexNegative : msFlexNegative :: < Impl , IMPL_OFFSET > , SetmsFlexPreferredSize : SetmsFlexPreferredSize :: < Impl , IMPL_OFFSET > , msFlexPreferredSize : msFlexPreferredSize :: < Impl , IMPL_OFFSET > , SetmsFlexFlow : SetmsFlexFlow :: < Impl , IMPL_OFFSET > , msFlexFlow : msFlexFlow :: < Impl , IMPL_OFFSET > , SetmsFlexDirection : SetmsFlexDirection :: < Impl , IMPL_OFFSET > , msFlexDirection : msFlexDirection :: < Impl , IMPL_OFFSET > , SetmsFlexWrap : SetmsFlexWrap :: < Impl , IMPL_OFFSET > , msFlexWrap : msFlexWrap :: < Impl , IMPL_OFFSET > , SetmsFlexAlign : SetmsFlexAlign :: < Impl , IMPL_OFFSET > , msFlexAlign : msFlexAlign :: < Impl , IMPL_OFFSET > , SetmsFlexItemAlign : SetmsFlexItemAlign :: < Impl , IMPL_OFFSET > , msFlexItemAlign : msFlexItemAlign :: < Impl , IMPL_OFFSET > , SetmsFlexPack : SetmsFlexPack :: < Impl , IMPL_OFFSET > , msFlexPack : msFlexPack :: < Impl , IMPL_OFFSET > , SetmsFlexLinePack : SetmsFlexLinePack :: < Impl , IMPL_OFFSET > , msFlexLinePack : msFlexLinePack :: < Impl , IMPL_OFFSET > , SetmsFlexOrder : SetmsFlexOrder :: < Impl , IMPL_OFFSET > , msFlexOrder : msFlexOrder :: < Impl , IMPL_OFFSET > , SetmsTouchSelect : SetmsTouchSelect :: < Impl , IMPL_OFFSET > , msTouchSelect : msTouchSelect :: < Impl , IMPL_OFFSET > , Settransform : Settransform :: < Impl , IMPL_OFFSET > , transform : transform :: < Impl , IMPL_OFFSET > , SettransformOrigin : SettransformOrigin :: < Impl , IMPL_OFFSET > , transformOrigin : transformOrigin :: < Impl , IMPL_OFFSET > , SettransformStyle : SettransformStyle :: < Impl , IMPL_OFFSET > , transformStyle : transformStyle :: < Impl , IMPL_OFFSET > , SetbackfaceVisibility : SetbackfaceVisibility :: < Impl , IMPL_OFFSET > , backfaceVisibility : backfaceVisibility :: < Impl , IMPL_OFFSET > , Setperspective : Setperspective :: < Impl , IMPL_OFFSET > , perspective : perspective :: < Impl , IMPL_OFFSET > , SetperspectiveOrigin : SetperspectiveOrigin :: < Impl , IMPL_OFFSET > , perspectiveOrigin : perspectiveOrigin :: < Impl , IMPL_OFFSET > , SettransitionProperty : SettransitionProperty :: < Impl , IMPL_OFFSET > , transitionProperty : transitionProperty :: < Impl , IMPL_OFFSET > , SettransitionDuration : SettransitionDuration :: < Impl , IMPL_OFFSET > , transitionDuration : transitionDuration :: < Impl , IMPL_OFFSET > , SettransitionTimingFunction : SettransitionTimingFunction :: < Impl , IMPL_OFFSET > , transitionTimingFunction : transitionTimingFunction :: < Impl , IMPL_OFFSET > , SettransitionDelay : SettransitionDelay :: < Impl , IMPL_OFFSET > , transitionDelay : transitionDelay :: < Impl , IMPL_OFFSET > , Settransition : Settransition :: < Impl , IMPL_OFFSET > , transition : transition :: < Impl , IMPL_OFFSET > , SetfontFeatureSettings : SetfontFeatureSettings :: < Impl , IMPL_OFFSET > , fontFeatureSettings : fontFeatureSettings :: < Impl , IMPL_OFFSET > , SetanimationName : SetanimationName :: < Impl , IMPL_OFFSET > , animationName : animationName :: < Impl , IMPL_OFFSET > , SetanimationDuration : SetanimationDuration :: < Impl , IMPL_OFFSET > , animationDuration : animationDuration :: < Impl , IMPL_OFFSET > , SetanimationTimingFunction : SetanimationTimingFunction :: < Impl , IMPL_OFFSET > , animationTimingFunction : animationTimingFunction :: < Impl , IMPL_OFFSET > , SetanimationDelay : SetanimationDelay :: < Impl , IMPL_OFFSET > , animationDelay : animationDelay :: < Impl , IMPL_OFFSET > , SetanimationDirection : SetanimationDirection :: < Impl , IMPL_OFFSET > , animationDirection : animationDirection :: < Impl , IMPL_OFFSET > , SetanimationPlayState : SetanimationPlayState :: < Impl , IMPL_OFFSET > , animationPlayState : animationPlayState :: < Impl , IMPL_OFFSET > , SetanimationIterationCount : SetanimationIterationCount :: < Impl , IMPL_OFFSET > , animationIterationCount : animationIterationCount :: < Impl , IMPL_OFFSET > , Setanimation : Setanimation :: < Impl , IMPL_OFFSET > , animation : animation :: < Impl , IMPL_OFFSET > , SetanimationFillMode : SetanimationFillMode :: < Impl , IMPL_OFFSET > , animationFillMode : animationFillMode :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLCSSStyleDeclaration2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLCSSStyleDeclaration3Impl < > : Sized + IDispatchImpl where { fn Setflex ( ) ; fn flex ( ) ; fn SetflexDirection ( ) ; fn flexDirection ( ) ; fn SetflexWrap ( ) ; fn flexWrap ( ) ; fn SetflexFlow ( ) ; fn flexFlow ( ) ; fn SetflexGrow ( ) ; fn flexGrow ( ) ; fn SetflexShrink ( ) ; fn flexShrink ( ) ; fn SetflexBasis ( ) ; fn flexBasis ( ) ; fn SetjustifyContent ( ) ; fn justifyContent ( ) ; fn SetalignItems ( ) ; fn alignItems ( ) ; fn SetalignSelf ( ) ; fn alignSelf ( ) ; fn SetalignContent ( ) ; fn alignContent ( ) ; fn SetborderImage ( ) ; fn borderImage ( ) ; fn SetborderImageSource ( ) ; fn borderImageSource ( ) ; fn SetborderImageSlice ( ) ; fn borderImageSlice ( ) ; fn SetborderImageWidth ( ) ; fn borderImageWidth ( ) ; fn SetborderImageOutset ( ) ; fn borderImageOutset ( ) ; fn SetborderImageRepeat ( ) ; fn borderImageRepeat ( ) ; fn SetmsImeAlign ( ) ; fn msImeAlign ( ) ; fn SetmsTextCombineHorizontal ( ) ; fn msTextCombineHorizontal ( ) ; fn SettouchAction ( ) ; fn touchAction ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLCSSStyleDeclaration3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLCSSStyleDeclaration3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLCSSStyleDeclaration3Vtbl < > { unsafe extern "system" fn Setflex < Impl : IHTMLCSSStyleDeclaration3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn flex < Impl : IHTMLCSSStyleDeclaration3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetflexDirection < Impl : IHTMLCSSStyleDeclaration3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn flexDirection < Impl : IHTMLCSSStyleDeclaration3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetflexWrap < Impl : IHTMLCSSStyleDeclaration3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn flexWrap < Impl : IHTMLCSSStyleDeclaration3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetflexFlow < Impl : IHTMLCSSStyleDeclaration3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn flexFlow < Impl : IHTMLCSSStyleDeclaration3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetflexGrow < Impl : IHTMLCSSStyleDeclaration3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn flexGrow < Impl : IHTMLCSSStyleDeclaration3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetflexShrink < Impl : IHTMLCSSStyleDeclaration3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn flexShrink < Impl : IHTMLCSSStyleDeclaration3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetflexBasis < Impl : IHTMLCSSStyleDeclaration3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn flexBasis < Impl : IHTMLCSSStyleDeclaration3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetjustifyContent < Impl : IHTMLCSSStyleDeclaration3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn justifyContent < Impl : IHTMLCSSStyleDeclaration3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetalignItems < Impl : IHTMLCSSStyleDeclaration3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn alignItems < Impl : IHTMLCSSStyleDeclaration3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetalignSelf < Impl : IHTMLCSSStyleDeclaration3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn alignSelf < Impl : IHTMLCSSStyleDeclaration3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetalignContent < Impl : IHTMLCSSStyleDeclaration3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn alignContent < Impl : IHTMLCSSStyleDeclaration3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderImage < Impl : IHTMLCSSStyleDeclaration3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderImage < Impl : IHTMLCSSStyleDeclaration3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderImageSource < Impl : IHTMLCSSStyleDeclaration3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderImageSource < Impl : IHTMLCSSStyleDeclaration3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderImageSlice < Impl : IHTMLCSSStyleDeclaration3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderImageSlice < Impl : IHTMLCSSStyleDeclaration3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderImageWidth < Impl : IHTMLCSSStyleDeclaration3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderImageWidth < Impl : IHTMLCSSStyleDeclaration3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderImageOutset < Impl : IHTMLCSSStyleDeclaration3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderImageOutset < Impl : IHTMLCSSStyleDeclaration3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderImageRepeat < Impl : IHTMLCSSStyleDeclaration3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderImageRepeat < Impl : IHTMLCSSStyleDeclaration3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsImeAlign < Impl : IHTMLCSSStyleDeclaration3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msImeAlign < Impl : IHTMLCSSStyleDeclaration3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsTextCombineHorizontal < Impl : IHTMLCSSStyleDeclaration3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msTextCombineHorizontal < Impl : IHTMLCSSStyleDeclaration3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettouchAction < Impl : IHTMLCSSStyleDeclaration3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn touchAction < Impl : IHTMLCSSStyleDeclaration3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setflex : Setflex :: < Impl , IMPL_OFFSET > , flex : flex :: < Impl , IMPL_OFFSET > , SetflexDirection : SetflexDirection :: < Impl , IMPL_OFFSET > , flexDirection : flexDirection :: < Impl , IMPL_OFFSET > , SetflexWrap : SetflexWrap :: < Impl , IMPL_OFFSET > , flexWrap : flexWrap :: < Impl , IMPL_OFFSET > , SetflexFlow : SetflexFlow :: < Impl , IMPL_OFFSET > , flexFlow : flexFlow :: < Impl , IMPL_OFFSET > , SetflexGrow : SetflexGrow :: < Impl , IMPL_OFFSET > , flexGrow : flexGrow :: < Impl , IMPL_OFFSET > , SetflexShrink : SetflexShrink :: < Impl , IMPL_OFFSET > , flexShrink : flexShrink :: < Impl , IMPL_OFFSET > , SetflexBasis : SetflexBasis :: < Impl , IMPL_OFFSET > , flexBasis : flexBasis :: < Impl , IMPL_OFFSET > , SetjustifyContent : SetjustifyContent :: < Impl , IMPL_OFFSET > , justifyContent : justifyContent :: < Impl , IMPL_OFFSET > , SetalignItems : SetalignItems :: < Impl , IMPL_OFFSET > , alignItems : alignItems :: < Impl , IMPL_OFFSET > , SetalignSelf : SetalignSelf :: < Impl , IMPL_OFFSET > , alignSelf : alignSelf :: < Impl , IMPL_OFFSET > , SetalignContent : SetalignContent :: < Impl , IMPL_OFFSET > , alignContent : alignContent :: < Impl , IMPL_OFFSET > , SetborderImage : SetborderImage :: < Impl , IMPL_OFFSET > , borderImage : borderImage :: < Impl , IMPL_OFFSET > , SetborderImageSource : SetborderImageSource :: < Impl , IMPL_OFFSET > , borderImageSource : borderImageSource :: < Impl , IMPL_OFFSET > , SetborderImageSlice : SetborderImageSlice :: < Impl , IMPL_OFFSET > , borderImageSlice : borderImageSlice :: < Impl , IMPL_OFFSET > , SetborderImageWidth : SetborderImageWidth :: < Impl , IMPL_OFFSET > , borderImageWidth : borderImageWidth :: < Impl , IMPL_OFFSET > , SetborderImageOutset : SetborderImageOutset :: < Impl , IMPL_OFFSET > , borderImageOutset : borderImageOutset :: < Impl , IMPL_OFFSET > , SetborderImageRepeat : SetborderImageRepeat :: < Impl , IMPL_OFFSET > , borderImageRepeat : borderImageRepeat :: < Impl , IMPL_OFFSET > , SetmsImeAlign : SetmsImeAlign :: < Impl , IMPL_OFFSET > , msImeAlign : msImeAlign :: < Impl , IMPL_OFFSET > , SetmsTextCombineHorizontal : SetmsTextCombineHorizontal :: < Impl , IMPL_OFFSET > , msTextCombineHorizontal : msTextCombineHorizontal :: < Impl , IMPL_OFFSET > , SettouchAction : SettouchAction :: < Impl , IMPL_OFFSET > , touchAction : touchAction :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLCSSStyleDeclaration3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLCSSStyleDeclaration4Impl < > : Sized + IDispatchImpl where { fn SetwebkitAppearance ( ) ; fn webkitAppearance ( ) ; fn SetwebkitUserSelect ( ) ; fn webkitUserSelect ( ) ; fn SetwebkitBoxAlign ( ) ; fn webkitBoxAlign ( ) ; fn SetwebkitBoxOrdinalGroup ( ) ; fn webkitBoxOrdinalGroup ( ) ; fn SetwebkitBoxPack ( ) ; fn webkitBoxPack ( ) ; fn SetwebkitBoxFlex ( ) ; fn webkitBoxFlex ( ) ; fn SetwebkitBoxOrient ( ) ; fn webkitBoxOrient ( ) ; fn SetwebkitBoxDirection ( ) ; fn webkitBoxDirection ( ) ; fn SetwebkitTransform ( ) ; fn webkitTransform ( ) ; fn SetwebkitBackgroundSize ( ) ; fn webkitBackgroundSize ( ) ; fn SetwebkitBackfaceVisibility ( ) ; fn webkitBackfaceVisibility ( ) ; fn SetwebkitAnimation ( ) ; fn webkitAnimation ( ) ; fn SetwebkitTransition ( ) ; fn webkitTransition ( ) ; fn SetwebkitAnimationName ( ) ; fn webkitAnimationName ( ) ; fn SetwebkitAnimationDuration ( ) ; fn webkitAnimationDuration ( ) ; fn SetwebkitAnimationTimingFunction ( ) ; fn webkitAnimationTimingFunction ( ) ; fn SetwebkitAnimationDelay ( ) ; fn webkitAnimationDelay ( ) ; fn SetwebkitAnimationIterationCount ( ) ; fn webkitAnimationIterationCount ( ) ; fn SetwebkitAnimationDirection ( ) ; fn webkitAnimationDirection ( ) ; fn SetwebkitAnimationPlayState ( ) ; fn webkitAnimationPlayState ( ) ; fn SetwebkitTransitionProperty ( ) ; fn webkitTransitionProperty ( ) ; fn SetwebkitTransitionDuration ( ) ; fn webkitTransitionDuration ( ) ; fn SetwebkitTransitionTimingFunction ( ) ; fn webkitTransitionTimingFunction ( ) ; fn SetwebkitTransitionDelay ( ) ; fn webkitTransitionDelay ( ) ; fn SetwebkitBackgroundAttachment ( ) ; fn webkitBackgroundAttachment ( ) ; fn SetwebkitBackgroundColor ( ) ; fn webkitBackgroundColor ( ) ; fn SetwebkitBackgroundClip ( ) ; fn webkitBackgroundClip ( ) ; fn SetwebkitBackgroundImage ( ) ; fn webkitBackgroundImage ( ) ; fn SetwebkitBackgroundRepeat ( ) ; fn webkitBackgroundRepeat ( ) ; fn SetwebkitBackgroundOrigin ( ) ; fn webkitBackgroundOrigin ( ) ; fn SetwebkitBackgroundPosition ( ) ; fn webkitBackgroundPosition ( ) ; fn SetwebkitBackgroundPositionX ( ) ; fn webkitBackgroundPositionX ( ) ; fn SetwebkitBackgroundPositionY ( ) ; fn webkitBackgroundPositionY ( ) ; fn SetwebkitBackground ( ) ; fn webkitBackground ( ) ; fn SetwebkitTransformOrigin ( ) ; fn webkitTransformOrigin ( ) ; fn SetmsTextSizeAdjust ( ) ; fn msTextSizeAdjust ( ) ; fn SetwebkitTextSizeAdjust ( ) ; fn webkitTextSizeAdjust ( ) ; fn SetwebkitBorderImage ( ) ; fn webkitBorderImage ( ) ; fn SetwebkitBorderImageSource ( ) ; fn webkitBorderImageSource ( ) ; fn SetwebkitBorderImageSlice ( ) ; fn webkitBorderImageSlice ( ) ; fn SetwebkitBorderImageWidth ( ) ; fn webkitBorderImageWidth ( ) ; fn SetwebkitBorderImageOutset ( ) ; fn webkitBorderImageOutset ( ) ; fn SetwebkitBorderImageRepeat ( ) ; fn webkitBorderImageRepeat ( ) ; fn SetwebkitBoxSizing ( ) ; fn webkitBoxSizing ( ) ; fn SetwebkitAnimationFillMode ( ) ; fn webkitAnimationFillMode ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLCSSStyleDeclaration4Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLCSSStyleDeclaration4Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLCSSStyleDeclaration4Vtbl < > { unsafe extern "system" fn SetwebkitAppearance < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn webkitAppearance < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwebkitUserSelect < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn webkitUserSelect < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwebkitBoxAlign < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn webkitBoxAlign < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwebkitBoxOrdinalGroup < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn webkitBoxOrdinalGroup < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwebkitBoxPack < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn webkitBoxPack < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwebkitBoxFlex < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn webkitBoxFlex < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwebkitBoxOrient < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn webkitBoxOrient < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwebkitBoxDirection < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn webkitBoxDirection < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwebkitTransform < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn webkitTransform < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwebkitBackgroundSize < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn webkitBackgroundSize < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwebkitBackfaceVisibility < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn webkitBackfaceVisibility < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwebkitAnimation < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn webkitAnimation < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwebkitTransition < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn webkitTransition < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwebkitAnimationName < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn webkitAnimationName < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwebkitAnimationDuration < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn webkitAnimationDuration < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwebkitAnimationTimingFunction < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn webkitAnimationTimingFunction < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwebkitAnimationDelay < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn webkitAnimationDelay < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwebkitAnimationIterationCount < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn webkitAnimationIterationCount < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwebkitAnimationDirection < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn webkitAnimationDirection < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwebkitAnimationPlayState < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn webkitAnimationPlayState < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwebkitTransitionProperty < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn webkitTransitionProperty < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwebkitTransitionDuration < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn webkitTransitionDuration < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwebkitTransitionTimingFunction < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn webkitTransitionTimingFunction < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwebkitTransitionDelay < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn webkitTransitionDelay < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwebkitBackgroundAttachment < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn webkitBackgroundAttachment < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwebkitBackgroundColor < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn webkitBackgroundColor < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwebkitBackgroundClip < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn webkitBackgroundClip < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwebkitBackgroundImage < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn webkitBackgroundImage < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwebkitBackgroundRepeat < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn webkitBackgroundRepeat < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwebkitBackgroundOrigin < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn webkitBackgroundOrigin < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwebkitBackgroundPosition < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn webkitBackgroundPosition < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwebkitBackgroundPositionX < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn webkitBackgroundPositionX < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwebkitBackgroundPositionY < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn webkitBackgroundPositionY < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwebkitBackground < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn webkitBackground < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwebkitTransformOrigin < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn webkitTransformOrigin < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsTextSizeAdjust < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msTextSizeAdjust < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwebkitTextSizeAdjust < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn webkitTextSizeAdjust < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwebkitBorderImage < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn webkitBorderImage < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwebkitBorderImageSource < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn webkitBorderImageSource < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwebkitBorderImageSlice < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn webkitBorderImageSlice < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwebkitBorderImageWidth < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn webkitBorderImageWidth < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwebkitBorderImageOutset < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn webkitBorderImageOutset < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwebkitBorderImageRepeat < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn webkitBorderImageRepeat < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwebkitBoxSizing < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn webkitBoxSizing < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwebkitAnimationFillMode < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn webkitAnimationFillMode < Impl : IHTMLCSSStyleDeclaration4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetwebkitAppearance : SetwebkitAppearance :: < Impl , IMPL_OFFSET > , webkitAppearance : webkitAppearance :: < Impl , IMPL_OFFSET > , SetwebkitUserSelect : SetwebkitUserSelect :: < Impl , IMPL_OFFSET > , webkitUserSelect : webkitUserSelect :: < Impl , IMPL_OFFSET > , SetwebkitBoxAlign : SetwebkitBoxAlign :: < Impl , IMPL_OFFSET > , webkitBoxAlign : webkitBoxAlign :: < Impl , IMPL_OFFSET > , SetwebkitBoxOrdinalGroup : SetwebkitBoxOrdinalGroup :: < Impl , IMPL_OFFSET > , webkitBoxOrdinalGroup : webkitBoxOrdinalGroup :: < Impl , IMPL_OFFSET > , SetwebkitBoxPack : SetwebkitBoxPack :: < Impl , IMPL_OFFSET > , webkitBoxPack : webkitBoxPack :: < Impl , IMPL_OFFSET > , SetwebkitBoxFlex : SetwebkitBoxFlex :: < Impl , IMPL_OFFSET > , webkitBoxFlex : webkitBoxFlex :: < Impl , IMPL_OFFSET > , SetwebkitBoxOrient : SetwebkitBoxOrient :: < Impl , IMPL_OFFSET > , webkitBoxOrient : webkitBoxOrient :: < Impl , IMPL_OFFSET > , SetwebkitBoxDirection : SetwebkitBoxDirection :: < Impl , IMPL_OFFSET > , webkitBoxDirection : webkitBoxDirection :: < Impl , IMPL_OFFSET > , SetwebkitTransform : SetwebkitTransform :: < Impl , IMPL_OFFSET > , webkitTransform : webkitTransform :: < Impl , IMPL_OFFSET > , SetwebkitBackgroundSize : SetwebkitBackgroundSize :: < Impl , IMPL_OFFSET > , webkitBackgroundSize : webkitBackgroundSize :: < Impl , IMPL_OFFSET > , SetwebkitBackfaceVisibility : SetwebkitBackfaceVisibility :: < Impl , IMPL_OFFSET > , webkitBackfaceVisibility : webkitBackfaceVisibility :: < Impl , IMPL_OFFSET > , SetwebkitAnimation : SetwebkitAnimation :: < Impl , IMPL_OFFSET > , webkitAnimation : webkitAnimation :: < Impl , IMPL_OFFSET > , SetwebkitTransition : SetwebkitTransition :: < Impl , IMPL_OFFSET > , webkitTransition : webkitTransition :: < Impl , IMPL_OFFSET > , SetwebkitAnimationName : SetwebkitAnimationName :: < Impl , IMPL_OFFSET > , webkitAnimationName : webkitAnimationName :: < Impl , IMPL_OFFSET > , SetwebkitAnimationDuration : SetwebkitAnimationDuration :: < Impl , IMPL_OFFSET > , webkitAnimationDuration : webkitAnimationDuration :: < Impl , IMPL_OFFSET > , SetwebkitAnimationTimingFunction : SetwebkitAnimationTimingFunction :: < Impl , IMPL_OFFSET > , webkitAnimationTimingFunction : webkitAnimationTimingFunction :: < Impl , IMPL_OFFSET > , SetwebkitAnimationDelay : SetwebkitAnimationDelay :: < Impl , IMPL_OFFSET > , webkitAnimationDelay : webkitAnimationDelay :: < Impl , IMPL_OFFSET > , SetwebkitAnimationIterationCount : SetwebkitAnimationIterationCount :: < Impl , IMPL_OFFSET > , webkitAnimationIterationCount : webkitAnimationIterationCount :: < Impl , IMPL_OFFSET > , SetwebkitAnimationDirection : SetwebkitAnimationDirection :: < Impl , IMPL_OFFSET > , webkitAnimationDirection : webkitAnimationDirection :: < Impl , IMPL_OFFSET > , SetwebkitAnimationPlayState : SetwebkitAnimationPlayState :: < Impl , IMPL_OFFSET > , webkitAnimationPlayState : webkitAnimationPlayState :: < Impl , IMPL_OFFSET > , SetwebkitTransitionProperty : SetwebkitTransitionProperty :: < Impl , IMPL_OFFSET > , webkitTransitionProperty : webkitTransitionProperty :: < Impl , IMPL_OFFSET > , SetwebkitTransitionDuration : SetwebkitTransitionDuration :: < Impl , IMPL_OFFSET > , webkitTransitionDuration : webkitTransitionDuration :: < Impl , IMPL_OFFSET > , SetwebkitTransitionTimingFunction : SetwebkitTransitionTimingFunction :: < Impl , IMPL_OFFSET > , webkitTransitionTimingFunction : webkitTransitionTimingFunction :: < Impl , IMPL_OFFSET > , SetwebkitTransitionDelay : SetwebkitTransitionDelay :: < Impl , IMPL_OFFSET > , webkitTransitionDelay : webkitTransitionDelay :: < Impl , IMPL_OFFSET > , SetwebkitBackgroundAttachment : SetwebkitBackgroundAttachment :: < Impl , IMPL_OFFSET > , webkitBackgroundAttachment : webkitBackgroundAttachment :: < Impl , IMPL_OFFSET > , SetwebkitBackgroundColor : SetwebkitBackgroundColor :: < Impl , IMPL_OFFSET > , webkitBackgroundColor : webkitBackgroundColor :: < Impl , IMPL_OFFSET > , SetwebkitBackgroundClip : SetwebkitBackgroundClip :: < Impl , IMPL_OFFSET > , webkitBackgroundClip : webkitBackgroundClip :: < Impl , IMPL_OFFSET > , SetwebkitBackgroundImage : SetwebkitBackgroundImage :: < Impl , IMPL_OFFSET > , webkitBackgroundImage : webkitBackgroundImage :: < Impl , IMPL_OFFSET > , SetwebkitBackgroundRepeat : SetwebkitBackgroundRepeat :: < Impl , IMPL_OFFSET > , webkitBackgroundRepeat : webkitBackgroundRepeat :: < Impl , IMPL_OFFSET > , SetwebkitBackgroundOrigin : SetwebkitBackgroundOrigin :: < Impl , IMPL_OFFSET > , webkitBackgroundOrigin : webkitBackgroundOrigin :: < Impl , IMPL_OFFSET > , SetwebkitBackgroundPosition : SetwebkitBackgroundPosition :: < Impl , IMPL_OFFSET > , webkitBackgroundPosition : webkitBackgroundPosition :: < Impl , IMPL_OFFSET > , SetwebkitBackgroundPositionX : SetwebkitBackgroundPositionX :: < Impl , IMPL_OFFSET > , webkitBackgroundPositionX : webkitBackgroundPositionX :: < Impl , IMPL_OFFSET > , SetwebkitBackgroundPositionY : SetwebkitBackgroundPositionY :: < Impl , IMPL_OFFSET > , webkitBackgroundPositionY : webkitBackgroundPositionY :: < Impl , IMPL_OFFSET > , SetwebkitBackground : SetwebkitBackground :: < Impl , IMPL_OFFSET > , webkitBackground : webkitBackground :: < Impl , IMPL_OFFSET > , SetwebkitTransformOrigin : SetwebkitTransformOrigin :: < Impl , IMPL_OFFSET > , webkitTransformOrigin : webkitTransformOrigin :: < Impl , IMPL_OFFSET > , SetmsTextSizeAdjust : SetmsTextSizeAdjust :: < Impl , IMPL_OFFSET > , msTextSizeAdjust : msTextSizeAdjust :: < Impl , IMPL_OFFSET > , SetwebkitTextSizeAdjust : SetwebkitTextSizeAdjust :: < Impl , IMPL_OFFSET > , webkitTextSizeAdjust : webkitTextSizeAdjust :: < Impl , IMPL_OFFSET > , SetwebkitBorderImage : SetwebkitBorderImage :: < Impl , IMPL_OFFSET > , webkitBorderImage : webkitBorderImage :: < Impl , IMPL_OFFSET > , SetwebkitBorderImageSource : SetwebkitBorderImageSource :: < Impl , IMPL_OFFSET > , webkitBorderImageSource : webkitBorderImageSource :: < Impl , IMPL_OFFSET > , SetwebkitBorderImageSlice : SetwebkitBorderImageSlice :: < Impl , IMPL_OFFSET > , webkitBorderImageSlice : webkitBorderImageSlice :: < Impl , IMPL_OFFSET > , SetwebkitBorderImageWidth : SetwebkitBorderImageWidth :: < Impl , IMPL_OFFSET > , webkitBorderImageWidth : webkitBorderImageWidth :: < Impl , IMPL_OFFSET > , SetwebkitBorderImageOutset : SetwebkitBorderImageOutset :: < Impl , IMPL_OFFSET > , webkitBorderImageOutset : webkitBorderImageOutset :: < Impl , IMPL_OFFSET > , SetwebkitBorderImageRepeat : SetwebkitBorderImageRepeat :: < Impl , IMPL_OFFSET > , webkitBorderImageRepeat : webkitBorderImageRepeat :: < Impl , IMPL_OFFSET > , SetwebkitBoxSizing : SetwebkitBoxSizing :: < Impl , IMPL_OFFSET > , webkitBoxSizing : webkitBoxSizing :: < Impl , IMPL_OFFSET > , SetwebkitAnimationFillMode : SetwebkitAnimationFillMode :: < Impl , IMPL_OFFSET > , webkitAnimationFillMode : webkitAnimationFillMode :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLCSSStyleDeclaration4 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLCanvasElementImpl < > : Sized + IDispatchImpl where { fn Setwidth ( ) ; fn width ( ) ; fn Setheight ( ) ; fn height ( ) ; fn getContext ( ) ; fn toDataURL ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLCanvasElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLCanvasElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLCanvasElementVtbl < > { unsafe extern "system" fn Setwidth < Impl : IHTMLCanvasElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn width < Impl : IHTMLCanvasElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setheight < Impl : IHTMLCanvasElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn height < Impl : IHTMLCanvasElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getContext < Impl : IHTMLCanvasElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , contextid : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ppcontext : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn toDataURL < Impl : IHTMLCanvasElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , r#type : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , jpegquality : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , purl : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setwidth : Setwidth :: < Impl , IMPL_OFFSET > , width : width :: < Impl , IMPL_OFFSET > , Setheight : Setheight :: < Impl , IMPL_OFFSET > , height : height :: < Impl , IMPL_OFFSET > , getContext : getContext :: < Impl , IMPL_OFFSET > , toDataURL : toDataURL :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLCanvasElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IHTMLCaretImpl < > : Sized where { fn MoveCaretToPointer ( ) ; fn MoveCaretToPointerEx ( ) ; fn MoveMarkupPointerToCaret ( ) ; fn MoveDisplayPointerToCaret ( ) ; fn IsVisible ( ) ; fn Show ( ) ; fn Hide ( ) ; fn InsertText ( ) ; fn ScrollIntoView ( ) ; fn GetLocation ( ) ; fn GetCaretDirection ( ) ; fn SetCaretDirection ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IHTMLCaretVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLCaretImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLCaretVtbl < > { unsafe extern "system" fn MoveCaretToPointer < Impl : IHTMLCaretImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdisppointer : :: windows :: core :: RawPtr , fscrollintoview : super::super::Foundation:: BOOL , edir : CARET_DIRECTION , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn MoveCaretToPointerEx < Impl : IHTMLCaretImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdisppointer : :: windows :: core :: RawPtr , fvisible : super::super::Foundation:: BOOL , fscrollintoview : super::super::Foundation:: BOOL , edir : CARET_DIRECTION , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn MoveMarkupPointerToCaret < Impl : IHTMLCaretImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pimarkuppointer : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn MoveDisplayPointerToCaret < Impl : IHTMLCaretImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdisppointer : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsVisible < Impl : IHTMLCaretImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pisvisible : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Show < Impl : IHTMLCaretImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fscrollintoview : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Hide < Impl : IHTMLCaretImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn InsertText < Impl : IHTMLCaretImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ptext : super::super::Foundation:: PWSTR , llen : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ScrollIntoView < Impl : IHTMLCaretImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetLocation < Impl : IHTMLCaretImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppoint : * mut super::super::Foundation:: POINT , ftranslate : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetCaretDirection < Impl : IHTMLCaretImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pedir : * mut CARET_DIRECTION , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetCaretDirection < Impl : IHTMLCaretImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , edir : CARET_DIRECTION , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , MoveCaretToPointer : MoveCaretToPointer :: < Impl , IMPL_OFFSET > , MoveCaretToPointerEx : MoveCaretToPointerEx :: < Impl , IMPL_OFFSET > , MoveMarkupPointerToCaret : MoveMarkupPointerToCaret :: < Impl , IMPL_OFFSET > , MoveDisplayPointerToCaret : MoveDisplayPointerToCaret :: < Impl , IMPL_OFFSET > , IsVisible : IsVisible :: < Impl , IMPL_OFFSET > , Show : Show :: < Impl , IMPL_OFFSET > , Hide : Hide :: < Impl , IMPL_OFFSET > , InsertText : InsertText :: < Impl , IMPL_OFFSET > , ScrollIntoView : ScrollIntoView :: < Impl , IMPL_OFFSET > , GetLocation : GetLocation :: < Impl , IMPL_OFFSET > , GetCaretDirection : GetCaretDirection :: < Impl , IMPL_OFFSET > , SetCaretDirection : SetCaretDirection :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLCaret < > as :: windows :: core :: Interface > :: IID } } pub trait IHTMLChangeLogImpl < > : Sized where { fn GetNextChange ( ) ; } impl < > IHTMLChangeLogVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLChangeLogImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLChangeLogVtbl < > { unsafe extern "system" fn GetNextChange < Impl : IHTMLChangeLogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbbuffer : * const u8 , nbuffersize : i32 , pnrecordlength : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetNextChange : GetNextChange :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLChangeLog < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IHTMLChangePlaybackImpl < > : Sized where { fn ExecChange ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IHTMLChangePlaybackVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLChangePlaybackImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLChangePlaybackVtbl < > { unsafe extern "system" fn ExecChange < Impl : IHTMLChangePlaybackImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbrecord : * const u8 , fforward : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , ExecChange : ExecChange :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLChangePlayback < > as :: windows :: core :: Interface > :: IID } } pub trait IHTMLChangeSinkImpl < > : Sized where { fn Notify ( ) ; } impl < > IHTMLChangeSinkVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLChangeSinkImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLChangeSinkVtbl < > { unsafe extern "system" fn Notify < Impl : IHTMLChangeSinkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Notify : Notify :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLChangeSink < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLCommentElementImpl < > : Sized + IDispatchImpl where { fn Settext ( ) ; fn text ( ) ; fn Setatomic ( ) ; fn atomic ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLCommentElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLCommentElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLCommentElementVtbl < > { unsafe extern "system" fn Settext < Impl : IHTMLCommentElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn text < Impl : IHTMLCommentElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setatomic < Impl : IHTMLCommentElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn atomic < Impl : IHTMLCommentElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Settext : Settext :: < Impl , IMPL_OFFSET > , text : text :: < Impl , IMPL_OFFSET > , Setatomic : Setatomic :: < Impl , IMPL_OFFSET > , atomic : atomic :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLCommentElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLCommentElement2Impl < > : Sized + IDispatchImpl where { fn Setdata ( ) ; fn data ( ) ; fn length ( ) ; fn substringData ( ) ; fn appendData ( ) ; fn insertData ( ) ; fn deleteData ( ) ; fn replaceData ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLCommentElement2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLCommentElement2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLCommentElement2Vtbl < > { unsafe extern "system" fn Setdata < Impl : IHTMLCommentElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn data < Impl : IHTMLCommentElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn length < Impl : IHTMLCommentElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn substringData < Impl : IHTMLCommentElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , offset : i32 , count : i32 , pbstrsubstring : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn appendData < Impl : IHTMLCommentElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrstring : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn insertData < Impl : IHTMLCommentElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , offset : i32 , bstrstring : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn deleteData < Impl : IHTMLCommentElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , offset : i32 , count : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn replaceData < Impl : IHTMLCommentElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , offset : i32 , count : i32 , bstrstring : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setdata : Setdata :: < Impl , IMPL_OFFSET > , data : data :: < Impl , IMPL_OFFSET > , length : length :: < Impl , IMPL_OFFSET > , substringData : substringData :: < Impl , IMPL_OFFSET > , appendData : appendData :: < Impl , IMPL_OFFSET > , insertData : insertData :: < Impl , IMPL_OFFSET > , deleteData : deleteData :: < Impl , IMPL_OFFSET > , replaceData : replaceData :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLCommentElement2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLCommentElement3Impl < > : Sized + IDispatchImpl where { fn substringData ( ) ; fn insertData ( ) ; fn deleteData ( ) ; fn replaceData ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLCommentElement3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLCommentElement3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLCommentElement3Vtbl < > { unsafe extern "system" fn substringData < Impl : IHTMLCommentElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , offset : i32 , count : i32 , pbstrsubstring : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn insertData < Impl : IHTMLCommentElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , offset : i32 , bstrstring : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn deleteData < Impl : IHTMLCommentElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , offset : i32 , count : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn replaceData < Impl : IHTMLCommentElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , offset : i32 , count : i32 , bstrstring : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , substringData : substringData :: < Impl , IMPL_OFFSET > , insertData : insertData :: < Impl , IMPL_OFFSET > , deleteData : deleteData :: < Impl , IMPL_OFFSET > , replaceData : replaceData :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLCommentElement3 < > as :: windows :: core :: Interface > :: IID } } pub trait IHTMLComputedStyleImpl < > : Sized where { fn bold ( ) ; fn italic ( ) ; fn underline ( ) ; fn overline ( ) ; fn strikeOut ( ) ; fn subScript ( ) ; fn superScript ( ) ; fn explicitFace ( ) ; fn fontWeight ( ) ; fn fontSize ( ) ; fn fontName ( ) ; fn hasBgColor ( ) ; fn textColor ( ) ; fn backgroundColor ( ) ; fn preFormatted ( ) ; fn direction ( ) ; fn blockDirection ( ) ; fn OL ( ) ; fn IsEqual ( ) ; } impl < > IHTMLComputedStyleVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLComputedStyleImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLComputedStyleVtbl < > { unsafe extern "system" fn bold < Impl : IHTMLComputedStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn italic < Impl : IHTMLComputedStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn underline < Impl : IHTMLComputedStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn overline < Impl : IHTMLComputedStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn strikeOut < Impl : IHTMLComputedStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn subScript < Impl : IHTMLComputedStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn superScript < Impl : IHTMLComputedStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn explicitFace < Impl : IHTMLComputedStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn fontWeight < Impl : IHTMLComputedStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn fontSize < Impl : IHTMLComputedStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn fontName < Impl : IHTMLComputedStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i8 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn hasBgColor < Impl : IHTMLComputedStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textColor < Impl : IHTMLComputedStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn backgroundColor < Impl : IHTMLComputedStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn preFormatted < Impl : IHTMLComputedStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn direction < Impl : IHTMLComputedStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn blockDirection < Impl : IHTMLComputedStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OL < Impl : IHTMLComputedStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsEqual < Impl : IHTMLComputedStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcomputedstyle : :: windows :: core :: RawPtr , pfequal : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , bold : bold :: < Impl , IMPL_OFFSET > , italic : italic :: < Impl , IMPL_OFFSET > , underline : underline :: < Impl , IMPL_OFFSET > , overline : overline :: < Impl , IMPL_OFFSET > , strikeOut : strikeOut :: < Impl , IMPL_OFFSET > , subScript : subScript :: < Impl , IMPL_OFFSET > , superScript : superScript :: < Impl , IMPL_OFFSET > , explicitFace : explicitFace :: < Impl , IMPL_OFFSET > , fontWeight : fontWeight :: < Impl , IMPL_OFFSET > , fontSize : fontSize :: < Impl , IMPL_OFFSET > , fontName : fontName :: < Impl , IMPL_OFFSET > , hasBgColor : hasBgColor :: < Impl , IMPL_OFFSET > , textColor : textColor :: < Impl , IMPL_OFFSET > , backgroundColor : backgroundColor :: < Impl , IMPL_OFFSET > , preFormatted : preFormatted :: < Impl , IMPL_OFFSET > , direction : direction :: < Impl , IMPL_OFFSET > , blockDirection : blockDirection :: < Impl , IMPL_OFFSET > , OL : OL :: < Impl , IMPL_OFFSET > , IsEqual : IsEqual :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLComputedStyle < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLControlElementImpl < > : Sized + IDispatchImpl where { fn SettabIndex ( ) ; fn tabIndex ( ) ; fn focus ( ) ; fn SetaccessKey ( ) ; fn accessKey ( ) ; fn Setonblur ( ) ; fn onblur ( ) ; fn Setonfocus ( ) ; fn onfocus ( ) ; fn Setonresize ( ) ; fn onresize ( ) ; fn blur ( ) ; fn addFilter ( ) ; fn removeFilter ( ) ; fn clientHeight ( ) ; fn clientWidth ( ) ; fn clientTop ( ) ; fn clientLeft ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLControlElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLControlElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLControlElementVtbl < > { unsafe extern "system" fn SettabIndex < Impl : IHTMLControlElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn tabIndex < Impl : IHTMLControlElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn focus < Impl : IHTMLControlElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetaccessKey < Impl : IHTMLControlElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn accessKey < Impl : IHTMLControlElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonblur < Impl : IHTMLControlElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onblur < Impl : IHTMLControlElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonfocus < Impl : IHTMLControlElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onfocus < Impl : IHTMLControlElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonresize < Impl : IHTMLControlElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onresize < Impl : IHTMLControlElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn blur < Impl : IHTMLControlElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn addFilter < Impl : IHTMLControlElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punk : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn removeFilter < Impl : IHTMLControlElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punk : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clientHeight < Impl : IHTMLControlElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clientWidth < Impl : IHTMLControlElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clientTop < Impl : IHTMLControlElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clientLeft < Impl : IHTMLControlElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SettabIndex : SettabIndex :: < Impl , IMPL_OFFSET > , tabIndex : tabIndex :: < Impl , IMPL_OFFSET > , focus : focus :: < Impl , IMPL_OFFSET > , SetaccessKey : SetaccessKey :: < Impl , IMPL_OFFSET > , accessKey : accessKey :: < Impl , IMPL_OFFSET > , Setonblur : Setonblur :: < Impl , IMPL_OFFSET > , onblur : onblur :: < Impl , IMPL_OFFSET > , Setonfocus : Setonfocus :: < Impl , IMPL_OFFSET > , onfocus : onfocus :: < Impl , IMPL_OFFSET > , Setonresize : Setonresize :: < Impl , IMPL_OFFSET > , onresize : onresize :: < Impl , IMPL_OFFSET > , blur : blur :: < Impl , IMPL_OFFSET > , addFilter : addFilter :: < Impl , IMPL_OFFSET > , removeFilter : removeFilter :: < Impl , IMPL_OFFSET > , clientHeight : clientHeight :: < Impl , IMPL_OFFSET > , clientWidth : clientWidth :: < Impl , IMPL_OFFSET > , clientTop : clientTop :: < Impl , IMPL_OFFSET > , clientLeft : clientLeft :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLControlElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLControlRangeImpl < > : Sized + IDispatchImpl where { fn select ( ) ; fn add ( ) ; fn remove ( ) ; fn item ( ) ; fn scrollIntoView ( ) ; fn queryCommandSupported ( ) ; fn queryCommandEnabled ( ) ; fn queryCommandState ( ) ; fn queryCommandIndeterm ( ) ; fn queryCommandText ( ) ; fn queryCommandValue ( ) ; fn execCommand ( ) ; fn execCommandShowHelp ( ) ; fn commonParentElement ( ) ; fn length ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLControlRangeVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLControlRangeImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLControlRangeVtbl < > { unsafe extern "system" fn select < Impl : IHTMLControlRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn add < Impl : IHTMLControlRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , item : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn remove < Impl : IHTMLControlRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn item < Impl : IHTMLControlRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , pdisp : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scrollIntoView < Impl : IHTMLControlRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varargstart : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn queryCommandSupported < Impl : IHTMLControlRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cmdid : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pfret : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn queryCommandEnabled < Impl : IHTMLControlRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cmdid : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pfret : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn queryCommandState < Impl : IHTMLControlRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cmdid : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pfret : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn queryCommandIndeterm < Impl : IHTMLControlRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cmdid : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pfret : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn queryCommandText < Impl : IHTMLControlRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cmdid : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pcmdtext : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn queryCommandValue < Impl : IHTMLControlRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cmdid : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pcmdvalue : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn execCommand < Impl : IHTMLControlRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cmdid : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , showui : i16 , value : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , pfret : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn execCommandShowHelp < Impl : IHTMLControlRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cmdid : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pfret : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn commonParentElement < Impl : IHTMLControlRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , parent : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn length < Impl : IHTMLControlRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , select : select :: < Impl , IMPL_OFFSET > , add : add :: < Impl , IMPL_OFFSET > , remove : remove :: < Impl , IMPL_OFFSET > , item : item :: < Impl , IMPL_OFFSET > , scrollIntoView : scrollIntoView :: < Impl , IMPL_OFFSET > , queryCommandSupported : queryCommandSupported :: < Impl , IMPL_OFFSET > , queryCommandEnabled : queryCommandEnabled :: < Impl , IMPL_OFFSET > , queryCommandState : queryCommandState :: < Impl , IMPL_OFFSET > , queryCommandIndeterm : queryCommandIndeterm :: < Impl , IMPL_OFFSET > , queryCommandText : queryCommandText :: < Impl , IMPL_OFFSET > , queryCommandValue : queryCommandValue :: < Impl , IMPL_OFFSET > , execCommand : execCommand :: < Impl , IMPL_OFFSET > , execCommandShowHelp : execCommandShowHelp :: < Impl , IMPL_OFFSET > , commonParentElement : commonParentElement :: < Impl , IMPL_OFFSET > , length : length :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLControlRange < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLControlRange2Impl < > : Sized + IDispatchImpl where { fn addElement ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLControlRange2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLControlRange2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLControlRange2Vtbl < > { unsafe extern "system" fn addElement < Impl : IHTMLControlRange2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , item : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , addElement : addElement :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLControlRange2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLCurrentStyleImpl < > : Sized + IDispatchImpl where { fn position ( ) ; fn styleFloat ( ) ; fn color ( ) ; fn backgroundColor ( ) ; fn fontFamily ( ) ; fn fontStyle ( ) ; fn fontVariant ( ) ; fn fontWeight ( ) ; fn fontSize ( ) ; fn backgroundImage ( ) ; fn backgroundPositionX ( ) ; fn backgroundPositionY ( ) ; fn backgroundRepeat ( ) ; fn borderLeftColor ( ) ; fn borderTopColor ( ) ; fn borderRightColor ( ) ; fn borderBottomColor ( ) ; fn borderTopStyle ( ) ; fn borderRightStyle ( ) ; fn borderBottomStyle ( ) ; fn borderLeftStyle ( ) ; fn borderTopWidth ( ) ; fn borderRightWidth ( ) ; fn borderBottomWidth ( ) ; fn borderLeftWidth ( ) ; fn left ( ) ; fn top ( ) ; fn width ( ) ; fn height ( ) ; fn paddingLeft ( ) ; fn paddingTop ( ) ; fn paddingRight ( ) ; fn paddingBottom ( ) ; fn textAlign ( ) ; fn textDecoration ( ) ; fn display ( ) ; fn visibility ( ) ; fn zIndex ( ) ; fn letterSpacing ( ) ; fn lineHeight ( ) ; fn textIndent ( ) ; fn verticalAlign ( ) ; fn backgroundAttachment ( ) ; fn marginTop ( ) ; fn marginRight ( ) ; fn marginBottom ( ) ; fn marginLeft ( ) ; fn clear ( ) ; fn listStyleType ( ) ; fn listStylePosition ( ) ; fn listStyleImage ( ) ; fn clipTop ( ) ; fn clipRight ( ) ; fn clipBottom ( ) ; fn clipLeft ( ) ; fn overflow ( ) ; fn pageBreakBefore ( ) ; fn pageBreakAfter ( ) ; fn cursor ( ) ; fn tableLayout ( ) ; fn borderCollapse ( ) ; fn direction ( ) ; fn behavior ( ) ; fn getAttribute ( ) ; fn unicodeBidi ( ) ; fn right ( ) ; fn bottom ( ) ; fn imeMode ( ) ; fn rubyAlign ( ) ; fn rubyPosition ( ) ; fn rubyOverhang ( ) ; fn textAutospace ( ) ; fn lineBreak ( ) ; fn wordBreak ( ) ; fn textJustify ( ) ; fn textJustifyTrim ( ) ; fn textKashida ( ) ; fn blockDirection ( ) ; fn layoutGridChar ( ) ; fn layoutGridLine ( ) ; fn layoutGridMode ( ) ; fn layoutGridType ( ) ; fn borderStyle ( ) ; fn borderColor ( ) ; fn borderWidth ( ) ; fn padding ( ) ; fn margin ( ) ; fn accelerator ( ) ; fn overflowX ( ) ; fn overflowY ( ) ; fn textTransform ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLCurrentStyleVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLCurrentStyleImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLCurrentStyleVtbl < > { unsafe extern "system" fn position < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn styleFloat < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn color < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn backgroundColor < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn fontFamily < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn fontStyle < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn fontVariant < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn fontWeight < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn fontSize < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn backgroundImage < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn backgroundPositionX < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn backgroundPositionY < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn backgroundRepeat < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderLeftColor < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderTopColor < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderRightColor < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderBottomColor < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderTopStyle < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderRightStyle < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderBottomStyle < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderLeftStyle < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderTopWidth < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderRightWidth < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderBottomWidth < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderLeftWidth < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn left < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn top < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn width < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn height < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn paddingLeft < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn paddingTop < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn paddingRight < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn paddingBottom < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textAlign < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textDecoration < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn display < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn visibility < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn zIndex < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn letterSpacing < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn lineHeight < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textIndent < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn verticalAlign < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn backgroundAttachment < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn marginTop < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn marginRight < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn marginBottom < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn marginLeft < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clear < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn listStyleType < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn listStylePosition < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn listStyleImage < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clipTop < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clipRight < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clipBottom < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clipLeft < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn overflow < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn pageBreakBefore < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn pageBreakAfter < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn cursor < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn tableLayout < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderCollapse < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn direction < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn behavior < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getAttribute < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , strattributename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , lflags : i32 , attributevalue : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn unicodeBidi < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn right < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn bottom < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn imeMode < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn rubyAlign < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn rubyPosition < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn rubyOverhang < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textAutospace < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn lineBreak < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn wordBreak < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textJustify < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textJustifyTrim < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textKashida < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn blockDirection < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn layoutGridChar < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn layoutGridLine < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn layoutGridMode < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn layoutGridType < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderStyle < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderColor < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderWidth < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn padding < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn margin < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn accelerator < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn overflowX < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn overflowY < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textTransform < Impl : IHTMLCurrentStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , position : position :: < Impl , IMPL_OFFSET > , styleFloat : styleFloat :: < Impl , IMPL_OFFSET > , color : color :: < Impl , IMPL_OFFSET > , backgroundColor : backgroundColor :: < Impl , IMPL_OFFSET > , fontFamily : fontFamily :: < Impl , IMPL_OFFSET > , fontStyle : fontStyle :: < Impl , IMPL_OFFSET > , fontVariant : fontVariant :: < Impl , IMPL_OFFSET > , fontWeight : fontWeight :: < Impl , IMPL_OFFSET > , fontSize : fontSize :: < Impl , IMPL_OFFSET > , backgroundImage : backgroundImage :: < Impl , IMPL_OFFSET > , backgroundPositionX : backgroundPositionX :: < Impl , IMPL_OFFSET > , backgroundPositionY : backgroundPositionY :: < Impl , IMPL_OFFSET > , backgroundRepeat : backgroundRepeat :: < Impl , IMPL_OFFSET > , borderLeftColor : borderLeftColor :: < Impl , IMPL_OFFSET > , borderTopColor : borderTopColor :: < Impl , IMPL_OFFSET > , borderRightColor : borderRightColor :: < Impl , IMPL_OFFSET > , borderBottomColor : borderBottomColor :: < Impl , IMPL_OFFSET > , borderTopStyle : borderTopStyle :: < Impl , IMPL_OFFSET > , borderRightStyle : borderRightStyle :: < Impl , IMPL_OFFSET > , borderBottomStyle : borderBottomStyle :: < Impl , IMPL_OFFSET > , borderLeftStyle : borderLeftStyle :: < Impl , IMPL_OFFSET > , borderTopWidth : borderTopWidth :: < Impl , IMPL_OFFSET > , borderRightWidth : borderRightWidth :: < Impl , IMPL_OFFSET > , borderBottomWidth : borderBottomWidth :: < Impl , IMPL_OFFSET > , borderLeftWidth : borderLeftWidth :: < Impl , IMPL_OFFSET > , left : left :: < Impl , IMPL_OFFSET > , top : top :: < Impl , IMPL_OFFSET > , width : width :: < Impl , IMPL_OFFSET > , height : height :: < Impl , IMPL_OFFSET > , paddingLeft : paddingLeft :: < Impl , IMPL_OFFSET > , paddingTop : paddingTop :: < Impl , IMPL_OFFSET > , paddingRight : paddingRight :: < Impl , IMPL_OFFSET > , paddingBottom : paddingBottom :: < Impl , IMPL_OFFSET > , textAlign : textAlign :: < Impl , IMPL_OFFSET > , textDecoration : textDecoration :: < Impl , IMPL_OFFSET > , display : display :: < Impl , IMPL_OFFSET > , visibility : visibility :: < Impl , IMPL_OFFSET > , zIndex : zIndex :: < Impl , IMPL_OFFSET > , letterSpacing : letterSpacing :: < Impl , IMPL_OFFSET > , lineHeight : lineHeight :: < Impl , IMPL_OFFSET > , textIndent : textIndent :: < Impl , IMPL_OFFSET > , verticalAlign : verticalAlign :: < Impl , IMPL_OFFSET > , backgroundAttachment : backgroundAttachment :: < Impl , IMPL_OFFSET > , marginTop : marginTop :: < Impl , IMPL_OFFSET > , marginRight : marginRight :: < Impl , IMPL_OFFSET > , marginBottom : marginBottom :: < Impl , IMPL_OFFSET > , marginLeft : marginLeft :: < Impl , IMPL_OFFSET > , clear : clear :: < Impl , IMPL_OFFSET > , listStyleType : listStyleType :: < Impl , IMPL_OFFSET > , listStylePosition : listStylePosition :: < Impl , IMPL_OFFSET > , listStyleImage : listStyleImage :: < Impl , IMPL_OFFSET > , clipTop : clipTop :: < Impl , IMPL_OFFSET > , clipRight : clipRight :: < Impl , IMPL_OFFSET > , clipBottom : clipBottom :: < Impl , IMPL_OFFSET > , clipLeft : clipLeft :: < Impl , IMPL_OFFSET > , overflow : overflow :: < Impl , IMPL_OFFSET > , pageBreakBefore : pageBreakBefore :: < Impl , IMPL_OFFSET > , pageBreakAfter : pageBreakAfter :: < Impl , IMPL_OFFSET > , cursor : cursor :: < Impl , IMPL_OFFSET > , tableLayout : tableLayout :: < Impl , IMPL_OFFSET > , borderCollapse : borderCollapse :: < Impl , IMPL_OFFSET > , direction : direction :: < Impl , IMPL_OFFSET > , behavior : behavior :: < Impl , IMPL_OFFSET > , getAttribute : getAttribute :: < Impl , IMPL_OFFSET > , unicodeBidi : unicodeBidi :: < Impl , IMPL_OFFSET > , right : right :: < Impl , IMPL_OFFSET > , bottom : bottom :: < Impl , IMPL_OFFSET > , imeMode : imeMode :: < Impl , IMPL_OFFSET > , rubyAlign : rubyAlign :: < Impl , IMPL_OFFSET > , rubyPosition : rubyPosition :: < Impl , IMPL_OFFSET > , rubyOverhang : rubyOverhang :: < Impl , IMPL_OFFSET > , textAutospace : textAutospace :: < Impl , IMPL_OFFSET > , lineBreak : lineBreak :: < Impl , IMPL_OFFSET > , wordBreak : wordBreak :: < Impl , IMPL_OFFSET > , textJustify : textJustify :: < Impl , IMPL_OFFSET > , textJustifyTrim : textJustifyTrim :: < Impl , IMPL_OFFSET > , textKashida : textKashida :: < Impl , IMPL_OFFSET > , blockDirection : blockDirection :: < Impl , IMPL_OFFSET > , layoutGridChar : layoutGridChar :: < Impl , IMPL_OFFSET > , layoutGridLine : layoutGridLine :: < Impl , IMPL_OFFSET > , layoutGridMode : layoutGridMode :: < Impl , IMPL_OFFSET > , layoutGridType : layoutGridType :: < Impl , IMPL_OFFSET > , borderStyle : borderStyle :: < Impl , IMPL_OFFSET > , borderColor : borderColor :: < Impl , IMPL_OFFSET > , borderWidth : borderWidth :: < Impl , IMPL_OFFSET > , padding : padding :: < Impl , IMPL_OFFSET > , margin : margin :: < Impl , IMPL_OFFSET > , accelerator : accelerator :: < Impl , IMPL_OFFSET > , overflowX : overflowX :: < Impl , IMPL_OFFSET > , overflowY : overflowY :: < Impl , IMPL_OFFSET > , textTransform : textTransform :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLCurrentStyle < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLCurrentStyle2Impl < > : Sized + IDispatchImpl where { fn layoutFlow ( ) ; fn wordWrap ( ) ; fn textUnderlinePosition ( ) ; fn hasLayout ( ) ; fn scrollbarBaseColor ( ) ; fn scrollbarFaceColor ( ) ; fn scrollbar3dLightColor ( ) ; fn scrollbarShadowColor ( ) ; fn scrollbarHighlightColor ( ) ; fn scrollbarDarkShadowColor ( ) ; fn scrollbarArrowColor ( ) ; fn scrollbarTrackColor ( ) ; fn writingMode ( ) ; fn zoom ( ) ; fn filter ( ) ; fn textAlignLast ( ) ; fn textKashidaSpace ( ) ; fn isBlock ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLCurrentStyle2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLCurrentStyle2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLCurrentStyle2Vtbl < > { unsafe extern "system" fn layoutFlow < Impl : IHTMLCurrentStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn wordWrap < Impl : IHTMLCurrentStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textUnderlinePosition < Impl : IHTMLCurrentStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn hasLayout < Impl : IHTMLCurrentStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scrollbarBaseColor < Impl : IHTMLCurrentStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scrollbarFaceColor < Impl : IHTMLCurrentStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scrollbar3dLightColor < Impl : IHTMLCurrentStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scrollbarShadowColor < Impl : IHTMLCurrentStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scrollbarHighlightColor < Impl : IHTMLCurrentStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scrollbarDarkShadowColor < Impl : IHTMLCurrentStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scrollbarArrowColor < Impl : IHTMLCurrentStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scrollbarTrackColor < Impl : IHTMLCurrentStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn writingMode < Impl : IHTMLCurrentStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn zoom < Impl : IHTMLCurrentStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn filter < Impl : IHTMLCurrentStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textAlignLast < Impl : IHTMLCurrentStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textKashidaSpace < Impl : IHTMLCurrentStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn isBlock < Impl : IHTMLCurrentStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , layoutFlow : layoutFlow :: < Impl , IMPL_OFFSET > , wordWrap : wordWrap :: < Impl , IMPL_OFFSET > , textUnderlinePosition : textUnderlinePosition :: < Impl , IMPL_OFFSET > , hasLayout : hasLayout :: < Impl , IMPL_OFFSET > , scrollbarBaseColor : scrollbarBaseColor :: < Impl , IMPL_OFFSET > , scrollbarFaceColor : scrollbarFaceColor :: < Impl , IMPL_OFFSET > , scrollbar3dLightColor : scrollbar3dLightColor :: < Impl , IMPL_OFFSET > , scrollbarShadowColor : scrollbarShadowColor :: < Impl , IMPL_OFFSET > , scrollbarHighlightColor : scrollbarHighlightColor :: < Impl , IMPL_OFFSET > , scrollbarDarkShadowColor : scrollbarDarkShadowColor :: < Impl , IMPL_OFFSET > , scrollbarArrowColor : scrollbarArrowColor :: < Impl , IMPL_OFFSET > , scrollbarTrackColor : scrollbarTrackColor :: < Impl , IMPL_OFFSET > , writingMode : writingMode :: < Impl , IMPL_OFFSET > , zoom : zoom :: < Impl , IMPL_OFFSET > , filter : filter :: < Impl , IMPL_OFFSET > , textAlignLast : textAlignLast :: < Impl , IMPL_OFFSET > , textKashidaSpace : textKashidaSpace :: < Impl , IMPL_OFFSET > , isBlock : isBlock :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLCurrentStyle2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLCurrentStyle3Impl < > : Sized + IDispatchImpl where { fn textOverflow ( ) ; fn minHeight ( ) ; fn wordSpacing ( ) ; fn whiteSpace ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLCurrentStyle3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLCurrentStyle3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLCurrentStyle3Vtbl < > { unsafe extern "system" fn textOverflow < Impl : IHTMLCurrentStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn minHeight < Impl : IHTMLCurrentStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn wordSpacing < Impl : IHTMLCurrentStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn whiteSpace < Impl : IHTMLCurrentStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , textOverflow : textOverflow :: < Impl , IMPL_OFFSET > , minHeight : minHeight :: < Impl , IMPL_OFFSET > , wordSpacing : wordSpacing :: < Impl , IMPL_OFFSET > , whiteSpace : whiteSpace :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLCurrentStyle3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLCurrentStyle4Impl < > : Sized + IDispatchImpl where { fn msInterpolationMode ( ) ; fn maxHeight ( ) ; fn minWidth ( ) ; fn maxWidth ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLCurrentStyle4Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLCurrentStyle4Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLCurrentStyle4Vtbl < > { unsafe extern "system" fn msInterpolationMode < Impl : IHTMLCurrentStyle4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn maxHeight < Impl : IHTMLCurrentStyle4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn minWidth < Impl : IHTMLCurrentStyle4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn maxWidth < Impl : IHTMLCurrentStyle4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , msInterpolationMode : msInterpolationMode :: < Impl , IMPL_OFFSET > , maxHeight : maxHeight :: < Impl , IMPL_OFFSET > , minWidth : minWidth :: < Impl , IMPL_OFFSET > , maxWidth : maxWidth :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLCurrentStyle4 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLCurrentStyle5Impl < > : Sized + IDispatchImpl where { fn captionSide ( ) ; fn outline ( ) ; fn outlineWidth ( ) ; fn outlineStyle ( ) ; fn outlineColor ( ) ; fn boxSizing ( ) ; fn borderSpacing ( ) ; fn orphans ( ) ; fn widows ( ) ; fn pageBreakInside ( ) ; fn emptyCells ( ) ; fn msBlockProgression ( ) ; fn quotes ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLCurrentStyle5Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLCurrentStyle5Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLCurrentStyle5Vtbl < > { unsafe extern "system" fn captionSide < Impl : IHTMLCurrentStyle5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn outline < Impl : IHTMLCurrentStyle5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn outlineWidth < Impl : IHTMLCurrentStyle5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn outlineStyle < Impl : IHTMLCurrentStyle5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn outlineColor < Impl : IHTMLCurrentStyle5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn boxSizing < Impl : IHTMLCurrentStyle5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderSpacing < Impl : IHTMLCurrentStyle5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn orphans < Impl : IHTMLCurrentStyle5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn widows < Impl : IHTMLCurrentStyle5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn pageBreakInside < Impl : IHTMLCurrentStyle5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn emptyCells < Impl : IHTMLCurrentStyle5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msBlockProgression < Impl : IHTMLCurrentStyle5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn quotes < Impl : IHTMLCurrentStyle5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , captionSide : captionSide :: < Impl , IMPL_OFFSET > , outline : outline :: < Impl , IMPL_OFFSET > , outlineWidth : outlineWidth :: < Impl , IMPL_OFFSET > , outlineStyle : outlineStyle :: < Impl , IMPL_OFFSET > , outlineColor : outlineColor :: < Impl , IMPL_OFFSET > , boxSizing : boxSizing :: < Impl , IMPL_OFFSET > , borderSpacing : borderSpacing :: < Impl , IMPL_OFFSET > , orphans : orphans :: < Impl , IMPL_OFFSET > , widows : widows :: < Impl , IMPL_OFFSET > , pageBreakInside : pageBreakInside :: < Impl , IMPL_OFFSET > , emptyCells : emptyCells :: < Impl , IMPL_OFFSET > , msBlockProgression : msBlockProgression :: < Impl , IMPL_OFFSET > , quotes : quotes :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLCurrentStyle5 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLDDElementImpl < > : Sized + IDispatchImpl where { fn SetnoWrap ( ) ; fn noWrap ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLDDElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLDDElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLDDElementVtbl < > { unsafe extern "system" fn SetnoWrap < Impl : IHTMLDDElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn noWrap < Impl : IHTMLDDElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetnoWrap : SetnoWrap :: < Impl , IMPL_OFFSET > , noWrap : noWrap :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLDDElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLDListElementImpl < > : Sized + IDispatchImpl where { fn Setcompact ( ) ; fn compact ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLDListElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLDListElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLDListElementVtbl < > { unsafe extern "system" fn Setcompact < Impl : IHTMLDListElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn compact < Impl : IHTMLDListElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setcompact : Setcompact :: < Impl , IMPL_OFFSET > , compact : compact :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLDListElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLDOMAttributeImpl < > : Sized + IDispatchImpl where { fn nodeName ( ) ; fn SetnodeValue ( ) ; fn nodeValue ( ) ; fn specified ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLDOMAttributeVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLDOMAttributeImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLDOMAttributeVtbl < > { unsafe extern "system" fn nodeName < Impl : IHTMLDOMAttributeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetnodeValue < Impl : IHTMLDOMAttributeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn nodeValue < Impl : IHTMLDOMAttributeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn specified < Impl : IHTMLDOMAttributeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , nodeName : nodeName :: < Impl , IMPL_OFFSET > , SetnodeValue : SetnodeValue :: < Impl , IMPL_OFFSET > , nodeValue : nodeValue :: < Impl , IMPL_OFFSET > , specified : specified :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLDOMAttribute < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLDOMAttribute2Impl < > : Sized + IDispatchImpl where { fn name ( ) ; fn Setvalue ( ) ; fn value ( ) ; fn expando ( ) ; fn nodeType ( ) ; fn parentNode ( ) ; fn childNodes ( ) ; fn firstChild ( ) ; fn lastChild ( ) ; fn previousSibling ( ) ; fn nextSibling ( ) ; fn attributes ( ) ; fn ownerDocument ( ) ; fn insertBefore ( ) ; fn replaceChild ( ) ; fn removeChild ( ) ; fn appendChild ( ) ; fn hasChildNodes ( ) ; fn cloneNode ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLDOMAttribute2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLDOMAttribute2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLDOMAttribute2Vtbl < > { unsafe extern "system" fn name < Impl : IHTMLDOMAttribute2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setvalue < Impl : IHTMLDOMAttribute2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn value < Impl : IHTMLDOMAttribute2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn expando < Impl : IHTMLDOMAttribute2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn nodeType < Impl : IHTMLDOMAttribute2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn parentNode < Impl : IHTMLDOMAttribute2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn childNodes < Impl : IHTMLDOMAttribute2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn firstChild < Impl : IHTMLDOMAttribute2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn lastChild < Impl : IHTMLDOMAttribute2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn previousSibling < Impl : IHTMLDOMAttribute2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn nextSibling < Impl : IHTMLDOMAttribute2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn attributes < Impl : IHTMLDOMAttribute2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ownerDocument < Impl : IHTMLDOMAttribute2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn insertBefore < Impl : IHTMLDOMAttribute2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , newchild : :: windows :: core :: RawPtr , refchild : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , node : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn replaceChild < Impl : IHTMLDOMAttribute2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , newchild : :: windows :: core :: RawPtr , oldchild : :: windows :: core :: RawPtr , node : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn removeChild < Impl : IHTMLDOMAttribute2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , oldchild : :: windows :: core :: RawPtr , node : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn appendChild < Impl : IHTMLDOMAttribute2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , newchild : :: windows :: core :: RawPtr , node : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn hasChildNodes < Impl : IHTMLDOMAttribute2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fchildren : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn cloneNode < Impl : IHTMLDOMAttribute2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fdeep : i16 , clonednode : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , name : name :: < Impl , IMPL_OFFSET > , Setvalue : Setvalue :: < Impl , IMPL_OFFSET > , value : value :: < Impl , IMPL_OFFSET > , expando : expando :: < Impl , IMPL_OFFSET > , nodeType : nodeType :: < Impl , IMPL_OFFSET > , parentNode : parentNode :: < Impl , IMPL_OFFSET > , childNodes : childNodes :: < Impl , IMPL_OFFSET > , firstChild : firstChild :: < Impl , IMPL_OFFSET > , lastChild : lastChild :: < Impl , IMPL_OFFSET > , previousSibling : previousSibling :: < Impl , IMPL_OFFSET > , nextSibling : nextSibling :: < Impl , IMPL_OFFSET > , attributes : attributes :: < Impl , IMPL_OFFSET > , ownerDocument : ownerDocument :: < Impl , IMPL_OFFSET > , insertBefore : insertBefore :: < Impl , IMPL_OFFSET > , replaceChild : replaceChild :: < Impl , IMPL_OFFSET > , removeChild : removeChild :: < Impl , IMPL_OFFSET > , appendChild : appendChild :: < Impl , IMPL_OFFSET > , hasChildNodes : hasChildNodes :: < Impl , IMPL_OFFSET > , cloneNode : cloneNode :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLDOMAttribute2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLDOMAttribute3Impl < > : Sized + IDispatchImpl where { fn SetnodeValue ( ) ; fn nodeValue ( ) ; fn Setvalue ( ) ; fn value ( ) ; fn specified ( ) ; fn ownerElement ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLDOMAttribute3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLDOMAttribute3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLDOMAttribute3Vtbl < > { unsafe extern "system" fn SetnodeValue < Impl : IHTMLDOMAttribute3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn nodeValue < Impl : IHTMLDOMAttribute3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setvalue < Impl : IHTMLDOMAttribute3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn value < Impl : IHTMLDOMAttribute3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn specified < Impl : IHTMLDOMAttribute3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ownerElement < Impl : IHTMLDOMAttribute3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetnodeValue : SetnodeValue :: < Impl , IMPL_OFFSET > , nodeValue : nodeValue :: < Impl , IMPL_OFFSET > , Setvalue : Setvalue :: < Impl , IMPL_OFFSET > , value : value :: < Impl , IMPL_OFFSET > , specified : specified :: < Impl , IMPL_OFFSET > , ownerElement : ownerElement :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLDOMAttribute3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLDOMAttribute4Impl < > : Sized + IDispatchImpl where { fn SetnodeValue ( ) ; fn nodeValue ( ) ; fn nodeName ( ) ; fn name ( ) ; fn Setvalue ( ) ; fn value ( ) ; fn firstChild ( ) ; fn lastChild ( ) ; fn childNodes ( ) ; fn hasAttributes ( ) ; fn hasChildNodes ( ) ; fn normalize ( ) ; fn specified ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLDOMAttribute4Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLDOMAttribute4Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLDOMAttribute4Vtbl < > { unsafe extern "system" fn SetnodeValue < Impl : IHTMLDOMAttribute4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn nodeValue < Impl : IHTMLDOMAttribute4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn nodeName < Impl : IHTMLDOMAttribute4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn name < Impl : IHTMLDOMAttribute4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setvalue < Impl : IHTMLDOMAttribute4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn value < Impl : IHTMLDOMAttribute4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn firstChild < Impl : IHTMLDOMAttribute4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn lastChild < Impl : IHTMLDOMAttribute4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn childNodes < Impl : IHTMLDOMAttribute4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn hasAttributes < Impl : IHTMLDOMAttribute4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfhasattributes : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn hasChildNodes < Impl : IHTMLDOMAttribute4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fchildren : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn normalize < Impl : IHTMLDOMAttribute4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn specified < Impl : IHTMLDOMAttribute4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetnodeValue : SetnodeValue :: < Impl , IMPL_OFFSET > , nodeValue : nodeValue :: < Impl , IMPL_OFFSET > , nodeName : nodeName :: < Impl , IMPL_OFFSET > , name : name :: < Impl , IMPL_OFFSET > , Setvalue : Setvalue :: < Impl , IMPL_OFFSET > , value : value :: < Impl , IMPL_OFFSET > , firstChild : firstChild :: < Impl , IMPL_OFFSET > , lastChild : lastChild :: < Impl , IMPL_OFFSET > , childNodes : childNodes :: < Impl , IMPL_OFFSET > , hasAttributes : hasAttributes :: < Impl , IMPL_OFFSET > , hasChildNodes : hasChildNodes :: < Impl , IMPL_OFFSET > , normalize : normalize :: < Impl , IMPL_OFFSET > , specified : specified :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLDOMAttribute4 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLDOMChildrenCollectionImpl < > : Sized + IDispatchImpl where { fn length ( ) ; fn _newEnum ( ) ; fn item ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLDOMChildrenCollectionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLDOMChildrenCollectionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLDOMChildrenCollectionVtbl < > { unsafe extern "system" fn length < Impl : IHTMLDOMChildrenCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _newEnum < Impl : IHTMLDOMChildrenCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn item < Impl : IHTMLDOMChildrenCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , ppitem : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , length : length :: < Impl , IMPL_OFFSET > , _newEnum : _newEnum :: < Impl , IMPL_OFFSET > , item : item :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLDOMChildrenCollection < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLDOMChildrenCollection2Impl < > : Sized + IDispatchImpl where { fn item ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLDOMChildrenCollection2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLDOMChildrenCollection2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLDOMChildrenCollection2Vtbl < > { unsafe extern "system" fn item < Impl : IHTMLDOMChildrenCollection2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , ppitem : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , item : item :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLDOMChildrenCollection2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLDOMConstructorImpl < > : Sized + IDispatchImpl where { fn constructor ( ) ; fn LookupGetter ( ) ; fn LookupSetter ( ) ; fn DefineGetter ( ) ; fn DefineSetter ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLDOMConstructorVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLDOMConstructorImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLDOMConstructorVtbl < > { unsafe extern "system" fn constructor < Impl : IHTMLDOMConstructorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn LookupGetter < Impl : IHTMLDOMConstructorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , propname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ppdisphandler : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn LookupSetter < Impl : IHTMLDOMConstructorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , propname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ppdisphandler : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DefineGetter < Impl : IHTMLDOMConstructorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , propname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pdisphandler : * const super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DefineSetter < Impl : IHTMLDOMConstructorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , propname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pdisphandler : * const super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , constructor : constructor :: < Impl , IMPL_OFFSET > , LookupGetter : LookupGetter :: < Impl , IMPL_OFFSET > , LookupSetter : LookupSetter :: < Impl , IMPL_OFFSET > , DefineGetter : DefineGetter :: < Impl , IMPL_OFFSET > , DefineSetter : DefineSetter :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLDOMConstructor < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLDOMConstructorCollectionImpl < > : Sized + IDispatchImpl where { fn Attr ( ) ; fn BehaviorUrnsCollection ( ) ; fn BookmarkCollection ( ) ; fn CompatibleInfo ( ) ; fn CompatibleInfoCollection ( ) ; fn ControlRangeCollection ( ) ; fn CSSCurrentStyleDeclaration ( ) ; fn CSSRuleList ( ) ; fn CSSRuleStyleDeclaration ( ) ; fn CSSStyleDeclaration ( ) ; fn CSSStyleRule ( ) ; fn CSSStyleSheet ( ) ; fn DataTransfer ( ) ; fn DOMImplementation ( ) ; fn Element ( ) ; fn Event ( ) ; fn History ( ) ; fn HTCElementBehaviorDefaults ( ) ; fn HTMLAnchorElement ( ) ; fn HTMLAreaElement ( ) ; fn HTMLAreasCollection ( ) ; fn HTMLBaseElement ( ) ; fn HTMLBaseFontElement ( ) ; fn HTMLBGSoundElement ( ) ; fn HTMLBlockElement ( ) ; fn HTMLBodyElement ( ) ; fn HTMLBRElement ( ) ; fn HTMLButtonElement ( ) ; fn HTMLCollection ( ) ; fn HTMLCommentElement ( ) ; fn HTMLDDElement ( ) ; fn HTMLDivElement ( ) ; fn HTMLDocument ( ) ; fn HTMLDListElement ( ) ; fn HTMLDTElement ( ) ; fn HTMLEmbedElement ( ) ; fn HTMLFieldSetElement ( ) ; fn HTMLFontElement ( ) ; fn HTMLFormElement ( ) ; fn HTMLFrameElement ( ) ; fn HTMLFrameSetElement ( ) ; fn HTMLGenericElement ( ) ; fn HTMLHeadElement ( ) ; fn HTMLHeadingElement ( ) ; fn HTMLHRElement ( ) ; fn HTMLHtmlElement ( ) ; fn HTMLIFrameElement ( ) ; fn HTMLImageElement ( ) ; fn HTMLInputElement ( ) ; fn HTMLIsIndexElement ( ) ; fn HTMLLabelElement ( ) ; fn HTMLLegendElement ( ) ; fn HTMLLIElement ( ) ; fn HTMLLinkElement ( ) ; fn HTMLMapElement ( ) ; fn HTMLMarqueeElement ( ) ; fn HTMLMetaElement ( ) ; fn HTMLModelessDialog ( ) ; fn HTMLNamespaceInfo ( ) ; fn HTMLNamespaceInfoCollection ( ) ; fn HTMLNextIdElement ( ) ; fn HTMLNoShowElement ( ) ; fn HTMLObjectElement ( ) ; fn HTMLOListElement ( ) ; fn HTMLOptionElement ( ) ; fn HTMLParagraphElement ( ) ; fn HTMLParamElement ( ) ; fn HTMLPhraseElement ( ) ; fn HTMLPluginsCollection ( ) ; fn HTMLPopup ( ) ; fn HTMLScriptElement ( ) ; fn HTMLSelectElement ( ) ; fn HTMLSpanElement ( ) ; fn HTMLStyleElement ( ) ; fn HTMLTableCaptionElement ( ) ; fn HTMLTableCellElement ( ) ; fn HTMLTableColElement ( ) ; fn HTMLTableElement ( ) ; fn HTMLTableRowElement ( ) ; fn HTMLTableSectionElement ( ) ; fn HTMLTextAreaElement ( ) ; fn HTMLTextElement ( ) ; fn HTMLTitleElement ( ) ; fn HTMLUListElement ( ) ; fn HTMLUnknownElement ( ) ; fn Image ( ) ; fn Location ( ) ; fn NamedNodeMap ( ) ; fn Navigator ( ) ; fn NodeList ( ) ; fn Option ( ) ; fn Screen ( ) ; fn Selection ( ) ; fn StaticNodeList ( ) ; fn Storage ( ) ; fn StyleSheetList ( ) ; fn StyleSheetPage ( ) ; fn StyleSheetPageList ( ) ; fn Text ( ) ; fn TextRange ( ) ; fn TextRangeCollection ( ) ; fn TextRectangle ( ) ; fn TextRectangleList ( ) ; fn Window ( ) ; fn XDomainRequest ( ) ; fn XMLHttpRequest ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLDOMConstructorCollectionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLDOMConstructorCollectionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLDOMConstructorCollectionVtbl < > { unsafe extern "system" fn Attr < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BehaviorUrnsCollection < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BookmarkCollection < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CompatibleInfo < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CompatibleInfoCollection < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ControlRangeCollection < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CSSCurrentStyleDeclaration < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CSSRuleList < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CSSRuleStyleDeclaration < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CSSStyleDeclaration < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CSSStyleRule < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CSSStyleSheet < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DataTransfer < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DOMImplementation < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Element < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Event < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn History < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTCElementBehaviorDefaults < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLAnchorElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLAreaElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLAreasCollection < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLBaseElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLBaseFontElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLBGSoundElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLBlockElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLBodyElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLBRElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLButtonElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLCollection < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLCommentElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLDDElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLDivElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLDocument < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLDListElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLDTElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLEmbedElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLFieldSetElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLFontElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLFormElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLFrameElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLFrameSetElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLGenericElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLHeadElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLHeadingElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLHRElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLHtmlElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLIFrameElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLImageElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLInputElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLIsIndexElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLLabelElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLLegendElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLLIElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLLinkElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLMapElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLMarqueeElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLMetaElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLModelessDialog < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLNamespaceInfo < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLNamespaceInfoCollection < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLNextIdElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLNoShowElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLObjectElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLOListElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLOptionElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLParagraphElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLParamElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLPhraseElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLPluginsCollection < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLPopup < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLScriptElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLSelectElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLSpanElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLStyleElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLTableCaptionElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLTableCellElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLTableColElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLTableElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLTableRowElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLTableSectionElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLTextAreaElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLTextElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLTitleElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLUListElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HTMLUnknownElement < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Image < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Location < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn NamedNodeMap < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Navigator < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn NodeList < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Option < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Screen < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Selection < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn StaticNodeList < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Storage < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn StyleSheetList < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn StyleSheetPage < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn StyleSheetPageList < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Text < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn TextRange < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn TextRangeCollection < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn TextRectangle < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn TextRectangleList < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Window < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn XDomainRequest < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn XMLHttpRequest < Impl : IHTMLDOMConstructorCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Attr : Attr :: < Impl , IMPL_OFFSET > , BehaviorUrnsCollection : BehaviorUrnsCollection :: < Impl , IMPL_OFFSET > , BookmarkCollection : BookmarkCollection :: < Impl , IMPL_OFFSET > , CompatibleInfo : CompatibleInfo :: < Impl , IMPL_OFFSET > , CompatibleInfoCollection : CompatibleInfoCollection :: < Impl , IMPL_OFFSET > , ControlRangeCollection : ControlRangeCollection :: < Impl , IMPL_OFFSET > , CSSCurrentStyleDeclaration : CSSCurrentStyleDeclaration :: < Impl , IMPL_OFFSET > , CSSRuleList : CSSRuleList :: < Impl , IMPL_OFFSET > , CSSRuleStyleDeclaration : CSSRuleStyleDeclaration :: < Impl , IMPL_OFFSET > , CSSStyleDeclaration : CSSStyleDeclaration :: < Impl , IMPL_OFFSET > , CSSStyleRule : CSSStyleRule :: < Impl , IMPL_OFFSET > , CSSStyleSheet : CSSStyleSheet :: < Impl , IMPL_OFFSET > , DataTransfer : DataTransfer :: < Impl , IMPL_OFFSET > , DOMImplementation : DOMImplementation :: < Impl , IMPL_OFFSET > , Element : Element :: < Impl , IMPL_OFFSET > , Event : Event :: < Impl , IMPL_OFFSET > , History : History :: < Impl , IMPL_OFFSET > , HTCElementBehaviorDefaults : HTCElementBehaviorDefaults :: < Impl , IMPL_OFFSET > , HTMLAnchorElement : HTMLAnchorElement :: < Impl , IMPL_OFFSET > , HTMLAreaElement : HTMLAreaElement :: < Impl , IMPL_OFFSET > , HTMLAreasCollection : HTMLAreasCollection :: < Impl , IMPL_OFFSET > , HTMLBaseElement : HTMLBaseElement :: < Impl , IMPL_OFFSET > , HTMLBaseFontElement : HTMLBaseFontElement :: < Impl , IMPL_OFFSET > , HTMLBGSoundElement : HTMLBGSoundElement :: < Impl , IMPL_OFFSET > , HTMLBlockElement : HTMLBlockElement :: < Impl , IMPL_OFFSET > , HTMLBodyElement : HTMLBodyElement :: < Impl , IMPL_OFFSET > , HTMLBRElement : HTMLBRElement :: < Impl , IMPL_OFFSET > , HTMLButtonElement : HTMLButtonElement :: < Impl , IMPL_OFFSET > , HTMLCollection : HTMLCollection :: < Impl , IMPL_OFFSET > , HTMLCommentElement : HTMLCommentElement :: < Impl , IMPL_OFFSET > , HTMLDDElement : HTMLDDElement :: < Impl , IMPL_OFFSET > , HTMLDivElement : HTMLDivElement :: < Impl , IMPL_OFFSET > , HTMLDocument : HTMLDocument :: < Impl , IMPL_OFFSET > , HTMLDListElement : HTMLDListElement :: < Impl , IMPL_OFFSET > , HTMLDTElement : HTMLDTElement :: < Impl , IMPL_OFFSET > , HTMLEmbedElement : HTMLEmbedElement :: < Impl , IMPL_OFFSET > , HTMLFieldSetElement : HTMLFieldSetElement :: < Impl , IMPL_OFFSET > , HTMLFontElement : HTMLFontElement :: < Impl , IMPL_OFFSET > , HTMLFormElement : HTMLFormElement :: < Impl , IMPL_OFFSET > , HTMLFrameElement : HTMLFrameElement :: < Impl , IMPL_OFFSET > , HTMLFrameSetElement : HTMLFrameSetElement :: < Impl , IMPL_OFFSET > , HTMLGenericElement : HTMLGenericElement :: < Impl , IMPL_OFFSET > , HTMLHeadElement : HTMLHeadElement :: < Impl , IMPL_OFFSET > , HTMLHeadingElement : HTMLHeadingElement :: < Impl , IMPL_OFFSET > , HTMLHRElement : HTMLHRElement :: < Impl , IMPL_OFFSET > , HTMLHtmlElement : HTMLHtmlElement :: < Impl , IMPL_OFFSET > , HTMLIFrameElement : HTMLIFrameElement :: < Impl , IMPL_OFFSET > , HTMLImageElement : HTMLImageElement :: < Impl , IMPL_OFFSET > , HTMLInputElement : HTMLInputElement :: < Impl , IMPL_OFFSET > , HTMLIsIndexElement : HTMLIsIndexElement :: < Impl , IMPL_OFFSET > , HTMLLabelElement : HTMLLabelElement :: < Impl , IMPL_OFFSET > , HTMLLegendElement : HTMLLegendElement :: < Impl , IMPL_OFFSET > , HTMLLIElement : HTMLLIElement :: < Impl , IMPL_OFFSET > , HTMLLinkElement : HTMLLinkElement :: < Impl , IMPL_OFFSET > , HTMLMapElement : HTMLMapElement :: < Impl , IMPL_OFFSET > , HTMLMarqueeElement : HTMLMarqueeElement :: < Impl , IMPL_OFFSET > , HTMLMetaElement : HTMLMetaElement :: < Impl , IMPL_OFFSET > , HTMLModelessDialog : HTMLModelessDialog :: < Impl , IMPL_OFFSET > , HTMLNamespaceInfo : HTMLNamespaceInfo :: < Impl , IMPL_OFFSET > , HTMLNamespaceInfoCollection : HTMLNamespaceInfoCollection :: < Impl , IMPL_OFFSET > , HTMLNextIdElement : HTMLNextIdElement :: < Impl , IMPL_OFFSET > , HTMLNoShowElement : HTMLNoShowElement :: < Impl , IMPL_OFFSET > , HTMLObjectElement : HTMLObjectElement :: < Impl , IMPL_OFFSET > , HTMLOListElement : HTMLOListElement :: < Impl , IMPL_OFFSET > , HTMLOptionElement : HTMLOptionElement :: < Impl , IMPL_OFFSET > , HTMLParagraphElement : HTMLParagraphElement :: < Impl , IMPL_OFFSET > , HTMLParamElement : HTMLParamElement :: < Impl , IMPL_OFFSET > , HTMLPhraseElement : HTMLPhraseElement :: < Impl , IMPL_OFFSET > , HTMLPluginsCollection : HTMLPluginsCollection :: < Impl , IMPL_OFFSET > , HTMLPopup : HTMLPopup :: < Impl , IMPL_OFFSET > , HTMLScriptElement : HTMLScriptElement :: < Impl , IMPL_OFFSET > , HTMLSelectElement : HTMLSelectElement :: < Impl , IMPL_OFFSET > , HTMLSpanElement : HTMLSpanElement :: < Impl , IMPL_OFFSET > , HTMLStyleElement : HTMLStyleElement :: < Impl , IMPL_OFFSET > , HTMLTableCaptionElement : HTMLTableCaptionElement :: < Impl , IMPL_OFFSET > , HTMLTableCellElement : HTMLTableCellElement :: < Impl , IMPL_OFFSET > , HTMLTableColElement : HTMLTableColElement :: < Impl , IMPL_OFFSET > , HTMLTableElement : HTMLTableElement :: < Impl , IMPL_OFFSET > , HTMLTableRowElement : HTMLTableRowElement :: < Impl , IMPL_OFFSET > , HTMLTableSectionElement : HTMLTableSectionElement :: < Impl , IMPL_OFFSET > , HTMLTextAreaElement : HTMLTextAreaElement :: < Impl , IMPL_OFFSET > , HTMLTextElement : HTMLTextElement :: < Impl , IMPL_OFFSET > , HTMLTitleElement : HTMLTitleElement :: < Impl , IMPL_OFFSET > , HTMLUListElement : HTMLUListElement :: < Impl , IMPL_OFFSET > , HTMLUnknownElement : HTMLUnknownElement :: < Impl , IMPL_OFFSET > , Image : Image :: < Impl , IMPL_OFFSET > , Location : Location :: < Impl , IMPL_OFFSET > , NamedNodeMap : NamedNodeMap :: < Impl , IMPL_OFFSET > , Navigator : Navigator :: < Impl , IMPL_OFFSET > , NodeList : NodeList :: < Impl , IMPL_OFFSET > , Option : Option :: < Impl , IMPL_OFFSET > , Screen : Screen :: < Impl , IMPL_OFFSET > , Selection : Selection :: < Impl , IMPL_OFFSET > , StaticNodeList : StaticNodeList :: < Impl , IMPL_OFFSET > , Storage : Storage :: < Impl , IMPL_OFFSET > , StyleSheetList : StyleSheetList :: < Impl , IMPL_OFFSET > , StyleSheetPage : StyleSheetPage :: < Impl , IMPL_OFFSET > , StyleSheetPageList : StyleSheetPageList :: < Impl , IMPL_OFFSET > , Text : Text :: < Impl , IMPL_OFFSET > , TextRange : TextRange :: < Impl , IMPL_OFFSET > , TextRangeCollection : TextRangeCollection :: < Impl , IMPL_OFFSET > , TextRectangle : TextRectangle :: < Impl , IMPL_OFFSET > , TextRectangleList : TextRectangleList :: < Impl , IMPL_OFFSET > , Window : Window :: < Impl , IMPL_OFFSET > , XDomainRequest : XDomainRequest :: < Impl , IMPL_OFFSET > , XMLHttpRequest : XMLHttpRequest :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLDOMConstructorCollection < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLDOMImplementationImpl < > : Sized + IDispatchImpl where { fn hasFeature ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLDOMImplementationVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLDOMImplementationImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLDOMImplementationVtbl < > { unsafe extern "system" fn hasFeature < Impl : IHTMLDOMImplementationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrfeature : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , version : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , pfhasfeature : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , hasFeature : hasFeature :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLDOMImplementation < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLDOMImplementation2Impl < > : Sized + IDispatchImpl where { fn createDocumentType ( ) ; fn createDocument ( ) ; fn createHTMLDocument ( ) ; fn hasFeature ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLDOMImplementation2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLDOMImplementation2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLDOMImplementation2Vtbl < > { unsafe extern "system" fn createDocumentType < Impl : IHTMLDOMImplementation2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrqualifiedname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pvarpublicid : * const super::super::System::Com:: VARIANT , pvarsystemid : * const super::super::System::Com:: VARIANT , newdocumenttype : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createDocument < Impl : IHTMLDOMImplementation2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarns : * const super::super::System::Com:: VARIANT , pvartagname : * const super::super::System::Com:: VARIANT , pdocumenttype : :: windows :: core :: RawPtr , ppnewdocument : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createHTMLDocument < Impl : IHTMLDOMImplementation2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrtitle : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ppnewdocument : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn hasFeature < Impl : IHTMLDOMImplementation2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrfeature : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , version : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , pfhasfeature : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , createDocumentType : createDocumentType :: < Impl , IMPL_OFFSET > , createDocument : createDocument :: < Impl , IMPL_OFFSET > , createHTMLDocument : createHTMLDocument :: < Impl , IMPL_OFFSET > , hasFeature : hasFeature :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLDOMImplementation2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLDOMNodeImpl < > : Sized + IDispatchImpl where { fn nodeType ( ) ; fn parentNode ( ) ; fn hasChildNodes ( ) ; fn childNodes ( ) ; fn attributes ( ) ; fn insertBefore ( ) ; fn removeChild ( ) ; fn replaceChild ( ) ; fn cloneNode ( ) ; fn removeNode ( ) ; fn swapNode ( ) ; fn replaceNode ( ) ; fn appendChild ( ) ; fn nodeName ( ) ; fn SetnodeValue ( ) ; fn nodeValue ( ) ; fn firstChild ( ) ; fn lastChild ( ) ; fn previousSibling ( ) ; fn nextSibling ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLDOMNodeVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLDOMNodeImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLDOMNodeVtbl < > { unsafe extern "system" fn nodeType < Impl : IHTMLDOMNodeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn parentNode < Impl : IHTMLDOMNodeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn hasChildNodes < Impl : IHTMLDOMNodeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fchildren : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn childNodes < Impl : IHTMLDOMNodeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn attributes < Impl : IHTMLDOMNodeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn insertBefore < Impl : IHTMLDOMNodeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , newchild : :: windows :: core :: RawPtr , refchild : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , node : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn removeChild < Impl : IHTMLDOMNodeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , oldchild : :: windows :: core :: RawPtr , node : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn replaceChild < Impl : IHTMLDOMNodeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , newchild : :: windows :: core :: RawPtr , oldchild : :: windows :: core :: RawPtr , node : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn cloneNode < Impl : IHTMLDOMNodeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fdeep : i16 , clonednode : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn removeNode < Impl : IHTMLDOMNodeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fdeep : i16 , removed : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn swapNode < Impl : IHTMLDOMNodeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , othernode : :: windows :: core :: RawPtr , swappednode : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn replaceNode < Impl : IHTMLDOMNodeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , replacement : :: windows :: core :: RawPtr , replaced : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn appendChild < Impl : IHTMLDOMNodeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , newchild : :: windows :: core :: RawPtr , node : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn nodeName < Impl : IHTMLDOMNodeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetnodeValue < Impl : IHTMLDOMNodeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn nodeValue < Impl : IHTMLDOMNodeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn firstChild < Impl : IHTMLDOMNodeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn lastChild < Impl : IHTMLDOMNodeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn previousSibling < Impl : IHTMLDOMNodeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn nextSibling < Impl : IHTMLDOMNodeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , nodeType : nodeType :: < Impl , IMPL_OFFSET > , parentNode : parentNode :: < Impl , IMPL_OFFSET > , hasChildNodes : hasChildNodes :: < Impl , IMPL_OFFSET > , childNodes : childNodes :: < Impl , IMPL_OFFSET > , attributes : attributes :: < Impl , IMPL_OFFSET > , insertBefore : insertBefore :: < Impl , IMPL_OFFSET > , removeChild : removeChild :: < Impl , IMPL_OFFSET > , replaceChild : replaceChild :: < Impl , IMPL_OFFSET > , cloneNode : cloneNode :: < Impl , IMPL_OFFSET > , removeNode : removeNode :: < Impl , IMPL_OFFSET > , swapNode : swapNode :: < Impl , IMPL_OFFSET > , replaceNode : replaceNode :: < Impl , IMPL_OFFSET > , appendChild : appendChild :: < Impl , IMPL_OFFSET > , nodeName : nodeName :: < Impl , IMPL_OFFSET > , SetnodeValue : SetnodeValue :: < Impl , IMPL_OFFSET > , nodeValue : nodeValue :: < Impl , IMPL_OFFSET > , firstChild : firstChild :: < Impl , IMPL_OFFSET > , lastChild : lastChild :: < Impl , IMPL_OFFSET > , previousSibling : previousSibling :: < Impl , IMPL_OFFSET > , nextSibling : nextSibling :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLDOMNode < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLDOMNode2Impl < > : Sized + IDispatchImpl where { fn ownerDocument ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLDOMNode2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLDOMNode2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLDOMNode2Vtbl < > { unsafe extern "system" fn ownerDocument < Impl : IHTMLDOMNode2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , ownerDocument : ownerDocument :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLDOMNode2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLDOMNode3Impl < > : Sized + IDispatchImpl where { fn Setprefix ( ) ; fn prefix ( ) ; fn localName ( ) ; fn namespaceURI ( ) ; fn SettextContent ( ) ; fn textContent ( ) ; fn isEqualNode ( ) ; fn lookupNamespaceURI ( ) ; fn lookupPrefix ( ) ; fn isDefaultNamespace ( ) ; fn appendChild ( ) ; fn insertBefore ( ) ; fn removeChild ( ) ; fn replaceChild ( ) ; fn isSameNode ( ) ; fn compareDocumentPosition ( ) ; fn isSupported ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLDOMNode3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLDOMNode3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLDOMNode3Vtbl < > { unsafe extern "system" fn Setprefix < Impl : IHTMLDOMNode3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn prefix < Impl : IHTMLDOMNode3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn localName < Impl : IHTMLDOMNode3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn namespaceURI < Impl : IHTMLDOMNode3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextContent < Impl : IHTMLDOMNode3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textContent < Impl : IHTMLDOMNode3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn isEqualNode < Impl : IHTMLDOMNode3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , othernode : :: windows :: core :: RawPtr , isequal : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn lookupNamespaceURI < Impl : IHTMLDOMNode3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarprefix : * const super::super::System::Com:: VARIANT , pvarnamespaceuri : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn lookupPrefix < Impl : IHTMLDOMNode3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarnamespaceuri : * const super::super::System::Com:: VARIANT , pvarprefix : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn isDefaultNamespace < Impl : IHTMLDOMNode3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarnamespace : * const super::super::System::Com:: VARIANT , pfdefaultnamespace : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn appendChild < Impl : IHTMLDOMNode3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , newchild : :: windows :: core :: RawPtr , node : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn insertBefore < Impl : IHTMLDOMNode3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , newchild : :: windows :: core :: RawPtr , refchild : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , node : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn removeChild < Impl : IHTMLDOMNode3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , oldchild : :: windows :: core :: RawPtr , node : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn replaceChild < Impl : IHTMLDOMNode3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , newchild : :: windows :: core :: RawPtr , oldchild : :: windows :: core :: RawPtr , node : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn isSameNode < Impl : IHTMLDOMNode3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , othernode : :: windows :: core :: RawPtr , issame : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn compareDocumentPosition < Impl : IHTMLDOMNode3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , othernode : :: windows :: core :: RawPtr , flags : * mut u16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn isSupported < Impl : IHTMLDOMNode3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , feature : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , version : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , pfissupported : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setprefix : Setprefix :: < Impl , IMPL_OFFSET > , prefix : prefix :: < Impl , IMPL_OFFSET > , localName : localName :: < Impl , IMPL_OFFSET > , namespaceURI : namespaceURI :: < Impl , IMPL_OFFSET > , SettextContent : SettextContent :: < Impl , IMPL_OFFSET > , textContent : textContent :: < Impl , IMPL_OFFSET > , isEqualNode : isEqualNode :: < Impl , IMPL_OFFSET > , lookupNamespaceURI : lookupNamespaceURI :: < Impl , IMPL_OFFSET > , lookupPrefix : lookupPrefix :: < Impl , IMPL_OFFSET > , isDefaultNamespace : isDefaultNamespace :: < Impl , IMPL_OFFSET > , appendChild : appendChild :: < Impl , IMPL_OFFSET > , insertBefore : insertBefore :: < Impl , IMPL_OFFSET > , removeChild : removeChild :: < Impl , IMPL_OFFSET > , replaceChild : replaceChild :: < Impl , IMPL_OFFSET > , isSameNode : isSameNode :: < Impl , IMPL_OFFSET > , compareDocumentPosition : compareDocumentPosition :: < Impl , IMPL_OFFSET > , isSupported : isSupported :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLDOMNode3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLDOMRangeImpl < > : Sized + IDispatchImpl where { fn startContainer ( ) ; fn startOffset ( ) ; fn endContainer ( ) ; fn endOffset ( ) ; fn collapsed ( ) ; fn commonAncestorContainer ( ) ; fn setStart ( ) ; fn setEnd ( ) ; fn setStartBefore ( ) ; fn setStartAfter ( ) ; fn setEndBefore ( ) ; fn setEndAfter ( ) ; fn collapse ( ) ; fn selectNode ( ) ; fn selectNodeContents ( ) ; fn compareBoundaryPoints ( ) ; fn deleteContents ( ) ; fn extractContents ( ) ; fn cloneContents ( ) ; fn insertNode ( ) ; fn surroundContents ( ) ; fn cloneRange ( ) ; fn toString ( ) ; fn detach ( ) ; fn getClientRects ( ) ; fn getBoundingClientRect ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLDOMRangeVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLDOMRangeImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLDOMRangeVtbl < > { unsafe extern "system" fn startContainer < Impl : IHTMLDOMRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn startOffset < Impl : IHTMLDOMRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn endContainer < Impl : IHTMLDOMRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn endOffset < Impl : IHTMLDOMRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn collapsed < Impl : IHTMLDOMRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn commonAncestorContainer < Impl : IHTMLDOMRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn setStart < Impl : IHTMLDOMRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , refnode : :: windows :: core :: RawPtr , offset : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn setEnd < Impl : IHTMLDOMRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , refnode : :: windows :: core :: RawPtr , offset : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn setStartBefore < Impl : IHTMLDOMRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , refnode : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn setStartAfter < Impl : IHTMLDOMRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , refnode : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn setEndBefore < Impl : IHTMLDOMRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , refnode : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn setEndAfter < Impl : IHTMLDOMRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , refnode : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn collapse < Impl : IHTMLDOMRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , tostart : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn selectNode < Impl : IHTMLDOMRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , refnode : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn selectNodeContents < Impl : IHTMLDOMRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , refnode : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn compareBoundaryPoints < Impl : IHTMLDOMRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , how : i16 , sourcerange : :: windows :: core :: RawPtr , compareresult : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn deleteContents < Impl : IHTMLDOMRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn extractContents < Impl : IHTMLDOMRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppdocumentfragment : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn cloneContents < Impl : IHTMLDOMRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppdocumentfragment : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn insertNode < Impl : IHTMLDOMRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , newnode : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn surroundContents < Impl : IHTMLDOMRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , newparent : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn cloneRange < Impl : IHTMLDOMRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppclonedrange : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn toString < Impl : IHTMLDOMRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , prangestring : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn detach < Impl : IHTMLDOMRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getClientRects < Impl : IHTMLDOMRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pprectcol : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getBoundingClientRect < Impl : IHTMLDOMRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pprect : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , startContainer : startContainer :: < Impl , IMPL_OFFSET > , startOffset : startOffset :: < Impl , IMPL_OFFSET > , endContainer : endContainer :: < Impl , IMPL_OFFSET > , endOffset : endOffset :: < Impl , IMPL_OFFSET > , collapsed : collapsed :: < Impl , IMPL_OFFSET > , commonAncestorContainer : commonAncestorContainer :: < Impl , IMPL_OFFSET > , setStart : setStart :: < Impl , IMPL_OFFSET > , setEnd : setEnd :: < Impl , IMPL_OFFSET > , setStartBefore : setStartBefore :: < Impl , IMPL_OFFSET > , setStartAfter : setStartAfter :: < Impl , IMPL_OFFSET > , setEndBefore : setEndBefore :: < Impl , IMPL_OFFSET > , setEndAfter : setEndAfter :: < Impl , IMPL_OFFSET > , collapse : collapse :: < Impl , IMPL_OFFSET > , selectNode : selectNode :: < Impl , IMPL_OFFSET > , selectNodeContents : selectNodeContents :: < Impl , IMPL_OFFSET > , compareBoundaryPoints : compareBoundaryPoints :: < Impl , IMPL_OFFSET > , deleteContents : deleteContents :: < Impl , IMPL_OFFSET > , extractContents : extractContents :: < Impl , IMPL_OFFSET > , cloneContents : cloneContents :: < Impl , IMPL_OFFSET > , insertNode : insertNode :: < Impl , IMPL_OFFSET > , surroundContents : surroundContents :: < Impl , IMPL_OFFSET > , cloneRange : cloneRange :: < Impl , IMPL_OFFSET > , toString : toString :: < Impl , IMPL_OFFSET > , detach : detach :: < Impl , IMPL_OFFSET > , getClientRects : getClientRects :: < Impl , IMPL_OFFSET > , getBoundingClientRect : getBoundingClientRect :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLDOMRange < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLDOMTextNodeImpl < > : Sized + IDispatchImpl where { fn Setdata ( ) ; fn data ( ) ; fn toString ( ) ; fn length ( ) ; fn splitText ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLDOMTextNodeVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLDOMTextNodeImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLDOMTextNodeVtbl < > { unsafe extern "system" fn Setdata < Impl : IHTMLDOMTextNodeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn data < Impl : IHTMLDOMTextNodeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn toString < Impl : IHTMLDOMTextNodeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , string : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn length < Impl : IHTMLDOMTextNodeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn splitText < Impl : IHTMLDOMTextNodeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , offset : i32 , pretnode : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setdata : Setdata :: < Impl , IMPL_OFFSET > , data : data :: < Impl , IMPL_OFFSET > , toString : toString :: < Impl , IMPL_OFFSET > , length : length :: < Impl , IMPL_OFFSET > , splitText : splitText :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLDOMTextNode < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLDOMTextNode2Impl < > : Sized + IDispatchImpl where { fn substringData ( ) ; fn appendData ( ) ; fn insertData ( ) ; fn deleteData ( ) ; fn replaceData ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLDOMTextNode2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLDOMTextNode2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLDOMTextNode2Vtbl < > { unsafe extern "system" fn substringData < Impl : IHTMLDOMTextNode2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , offset : i32 , count : i32 , pbstrsubstring : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn appendData < Impl : IHTMLDOMTextNode2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrstring : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn insertData < Impl : IHTMLDOMTextNode2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , offset : i32 , bstrstring : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn deleteData < Impl : IHTMLDOMTextNode2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , offset : i32 , count : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn replaceData < Impl : IHTMLDOMTextNode2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , offset : i32 , count : i32 , bstrstring : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , substringData : substringData :: < Impl , IMPL_OFFSET > , appendData : appendData :: < Impl , IMPL_OFFSET > , insertData : insertData :: < Impl , IMPL_OFFSET > , deleteData : deleteData :: < Impl , IMPL_OFFSET > , replaceData : replaceData :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLDOMTextNode2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLDOMTextNode3Impl < > : Sized + IDispatchImpl where { fn substringData ( ) ; fn insertData ( ) ; fn deleteData ( ) ; fn replaceData ( ) ; fn splitText ( ) ; fn wholeText ( ) ; fn replaceWholeText ( ) ; fn hasAttributes ( ) ; fn normalize ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLDOMTextNode3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLDOMTextNode3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLDOMTextNode3Vtbl < > { unsafe extern "system" fn substringData < Impl : IHTMLDOMTextNode3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , offset : i32 , count : i32 , pbstrsubstring : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn insertData < Impl : IHTMLDOMTextNode3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , offset : i32 , bstrstring : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn deleteData < Impl : IHTMLDOMTextNode3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , offset : i32 , count : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn replaceData < Impl : IHTMLDOMTextNode3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , offset : i32 , count : i32 , bstrstring : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn splitText < Impl : IHTMLDOMTextNode3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , offset : i32 , pretnode : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn wholeText < Impl : IHTMLDOMTextNode3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn replaceWholeText < Impl : IHTMLDOMTextNode3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrtext : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ppretnode : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn hasAttributes < Impl : IHTMLDOMTextNode3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfhasattributes : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn normalize < Impl : IHTMLDOMTextNode3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , substringData : substringData :: < Impl , IMPL_OFFSET > , insertData : insertData :: < Impl , IMPL_OFFSET > , deleteData : deleteData :: < Impl , IMPL_OFFSET > , replaceData : replaceData :: < Impl , IMPL_OFFSET > , splitText : splitText :: < Impl , IMPL_OFFSET > , wholeText : wholeText :: < Impl , IMPL_OFFSET > , replaceWholeText : replaceWholeText :: < Impl , IMPL_OFFSET > , hasAttributes : hasAttributes :: < Impl , IMPL_OFFSET > , normalize : normalize :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLDOMTextNode3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLDTElementImpl < > : Sized + IDispatchImpl where { fn SetnoWrap ( ) ; fn noWrap ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLDTElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLDTElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLDTElementVtbl < > { unsafe extern "system" fn SetnoWrap < Impl : IHTMLDTElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn noWrap < Impl : IHTMLDTElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetnoWrap : SetnoWrap :: < Impl , IMPL_OFFSET > , noWrap : noWrap :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLDTElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLDataTransferImpl < > : Sized + IDispatchImpl where { fn setData ( ) ; fn getData ( ) ; fn clearData ( ) ; fn SetdropEffect ( ) ; fn dropEffect ( ) ; fn SeteffectAllowed ( ) ; fn effectAllowed ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLDataTransferVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLDataTransferImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLDataTransferVtbl < > { unsafe extern "system" fn setData < Impl : IHTMLDataTransferImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , format : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , data : * const super::super::System::Com:: VARIANT , pret : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getData < Impl : IHTMLDataTransferImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , format : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pvarret : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clearData < Impl : IHTMLDataTransferImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , format : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pret : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetdropEffect < Impl : IHTMLDataTransferImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn dropEffect < Impl : IHTMLDataTransferImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SeteffectAllowed < Impl : IHTMLDataTransferImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn effectAllowed < Impl : IHTMLDataTransferImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , setData : setData :: < Impl , IMPL_OFFSET > , getData : getData :: < Impl , IMPL_OFFSET > , clearData : clearData :: < Impl , IMPL_OFFSET > , SetdropEffect : SetdropEffect :: < Impl , IMPL_OFFSET > , dropEffect : dropEffect :: < Impl , IMPL_OFFSET > , SeteffectAllowed : SeteffectAllowed :: < Impl , IMPL_OFFSET > , effectAllowed : effectAllowed :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLDataTransfer < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLDatabindingImpl < > : Sized + IDispatchImpl where { fn SetdataFld ( ) ; fn dataFld ( ) ; fn SetdataSrc ( ) ; fn dataSrc ( ) ; fn SetdataFormatAs ( ) ; fn dataFormatAs ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLDatabindingVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLDatabindingImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLDatabindingVtbl < > { unsafe extern "system" fn SetdataFld < Impl : IHTMLDatabindingImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn dataFld < Impl : IHTMLDatabindingImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetdataSrc < Impl : IHTMLDatabindingImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn dataSrc < Impl : IHTMLDatabindingImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetdataFormatAs < Impl : IHTMLDatabindingImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn dataFormatAs < Impl : IHTMLDatabindingImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetdataFld : SetdataFld :: < Impl , IMPL_OFFSET > , dataFld : dataFld :: < Impl , IMPL_OFFSET > , SetdataSrc : SetdataSrc :: < Impl , IMPL_OFFSET > , dataSrc : dataSrc :: < Impl , IMPL_OFFSET > , SetdataFormatAs : SetdataFormatAs :: < Impl , IMPL_OFFSET > , dataFormatAs : dataFormatAs :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLDatabinding < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLDialogImpl < > : Sized + IDispatchImpl where { fn SetdialogTop ( ) ; fn dialogTop ( ) ; fn SetdialogLeft ( ) ; fn dialogLeft ( ) ; fn SetdialogWidth ( ) ; fn dialogWidth ( ) ; fn SetdialogHeight ( ) ; fn dialogHeight ( ) ; fn dialogArguments ( ) ; fn menuArguments ( ) ; fn SetreturnValue ( ) ; fn returnValue ( ) ; fn close ( ) ; fn toString ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLDialogVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLDialogImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLDialogVtbl < > { unsafe extern "system" fn SetdialogTop < Impl : IHTMLDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn dialogTop < Impl : IHTMLDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetdialogLeft < Impl : IHTMLDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn dialogLeft < Impl : IHTMLDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetdialogWidth < Impl : IHTMLDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn dialogWidth < Impl : IHTMLDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetdialogHeight < Impl : IHTMLDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn dialogHeight < Impl : IHTMLDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn dialogArguments < Impl : IHTMLDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn menuArguments < Impl : IHTMLDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetreturnValue < Impl : IHTMLDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn returnValue < Impl : IHTMLDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn close < Impl : IHTMLDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn toString < Impl : IHTMLDialogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , string : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetdialogTop : SetdialogTop :: < Impl , IMPL_OFFSET > , dialogTop : dialogTop :: < Impl , IMPL_OFFSET > , SetdialogLeft : SetdialogLeft :: < Impl , IMPL_OFFSET > , dialogLeft : dialogLeft :: < Impl , IMPL_OFFSET > , SetdialogWidth : SetdialogWidth :: < Impl , IMPL_OFFSET > , dialogWidth : dialogWidth :: < Impl , IMPL_OFFSET > , SetdialogHeight : SetdialogHeight :: < Impl , IMPL_OFFSET > , dialogHeight : dialogHeight :: < Impl , IMPL_OFFSET > , dialogArguments : dialogArguments :: < Impl , IMPL_OFFSET > , menuArguments : menuArguments :: < Impl , IMPL_OFFSET > , SetreturnValue : SetreturnValue :: < Impl , IMPL_OFFSET > , returnValue : returnValue :: < Impl , IMPL_OFFSET > , close : close :: < Impl , IMPL_OFFSET > , toString : toString :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLDialog < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLDialog2Impl < > : Sized + IDispatchImpl where { fn Setstatus ( ) ; fn status ( ) ; fn Setresizable ( ) ; fn resizable ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLDialog2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLDialog2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLDialog2Vtbl < > { unsafe extern "system" fn Setstatus < Impl : IHTMLDialog2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn status < Impl : IHTMLDialog2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setresizable < Impl : IHTMLDialog2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn resizable < Impl : IHTMLDialog2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setstatus : Setstatus :: < Impl , IMPL_OFFSET > , status : status :: < Impl , IMPL_OFFSET > , Setresizable : Setresizable :: < Impl , IMPL_OFFSET > , resizable : resizable :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLDialog2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLDialog3Impl < > : Sized + IDispatchImpl where { fn Setunadorned ( ) ; fn unadorned ( ) ; fn SetdialogHide ( ) ; fn dialogHide ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLDialog3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLDialog3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLDialog3Vtbl < > { unsafe extern "system" fn Setunadorned < Impl : IHTMLDialog3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn unadorned < Impl : IHTMLDialog3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetdialogHide < Impl : IHTMLDialog3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn dialogHide < Impl : IHTMLDialog3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setunadorned : Setunadorned :: < Impl , IMPL_OFFSET > , unadorned : unadorned :: < Impl , IMPL_OFFSET > , SetdialogHide : SetdialogHide :: < Impl , IMPL_OFFSET > , dialogHide : dialogHide :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLDialog3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLDivElementImpl < > : Sized + IDispatchImpl where { fn Setalign ( ) ; fn align ( ) ; fn SetnoWrap ( ) ; fn noWrap ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLDivElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLDivElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLDivElementVtbl < > { unsafe extern "system" fn Setalign < Impl : IHTMLDivElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn align < Impl : IHTMLDivElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetnoWrap < Impl : IHTMLDivElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn noWrap < Impl : IHTMLDivElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setalign : Setalign :: < Impl , IMPL_OFFSET > , align : align :: < Impl , IMPL_OFFSET > , SetnoWrap : SetnoWrap :: < Impl , IMPL_OFFSET > , noWrap : noWrap :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLDivElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLDivPositionImpl < > : Sized + IDispatchImpl where { fn Setalign ( ) ; fn align ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLDivPositionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLDivPositionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLDivPositionVtbl < > { unsafe extern "system" fn Setalign < Impl : IHTMLDivPositionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn align < Impl : IHTMLDivPositionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setalign : Setalign :: < Impl , IMPL_OFFSET > , align : align :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLDivPosition < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLDocumentImpl < > : Sized + IDispatchImpl where { fn Script ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLDocumentVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLDocumentImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLDocumentVtbl < > { unsafe extern "system" fn Script < Impl : IHTMLDocumentImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Script : Script :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLDocument < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLDocument2Impl < > : Sized + IHTMLDocumentImpl + IDispatchImpl where { fn all ( ) ; fn body ( ) ; fn activeElement ( ) ; fn images ( ) ; fn applets ( ) ; fn links ( ) ; fn forms ( ) ; fn anchors ( ) ; fn Settitle ( ) ; fn title ( ) ; fn scripts ( ) ; fn SetdesignMode ( ) ; fn designMode ( ) ; fn selection ( ) ; fn readyState ( ) ; fn frames ( ) ; fn embeds ( ) ; fn plugins ( ) ; fn SetalinkColor ( ) ; fn alinkColor ( ) ; fn SetbgColor ( ) ; fn bgColor ( ) ; fn SetfgColor ( ) ; fn fgColor ( ) ; fn SetlinkColor ( ) ; fn linkColor ( ) ; fn SetvlinkColor ( ) ; fn vlinkColor ( ) ; fn referrer ( ) ; fn location ( ) ; fn lastModified ( ) ; fn SetURL ( ) ; fn URL ( ) ; fn Setdomain ( ) ; fn domain ( ) ; fn Setcookie ( ) ; fn cookie ( ) ; fn Setexpando ( ) ; fn expando ( ) ; fn Setcharset ( ) ; fn charset ( ) ; fn SetdefaultCharset ( ) ; fn defaultCharset ( ) ; fn mimeType ( ) ; fn fileSize ( ) ; fn fileCreatedDate ( ) ; fn fileModifiedDate ( ) ; fn fileUpdatedDate ( ) ; fn security ( ) ; fn protocol ( ) ; fn nameProp ( ) ; fn write ( ) ; fn writeln ( ) ; fn open ( ) ; fn close ( ) ; fn clear ( ) ; fn queryCommandSupported ( ) ; fn queryCommandEnabled ( ) ; fn queryCommandState ( ) ; fn queryCommandIndeterm ( ) ; fn queryCommandText ( ) ; fn queryCommandValue ( ) ; fn execCommand ( ) ; fn execCommandShowHelp ( ) ; fn createElement ( ) ; fn Setonhelp ( ) ; fn onhelp ( ) ; fn Setonclick ( ) ; fn onclick ( ) ; fn Setondblclick ( ) ; fn ondblclick ( ) ; fn Setonkeyup ( ) ; fn onkeyup ( ) ; fn Setonkeydown ( ) ; fn onkeydown ( ) ; fn Setonkeypress ( ) ; fn onkeypress ( ) ; fn Setonmouseup ( ) ; fn onmouseup ( ) ; fn Setonmousedown ( ) ; fn onmousedown ( ) ; fn Setonmousemove ( ) ; fn onmousemove ( ) ; fn Setonmouseout ( ) ; fn onmouseout ( ) ; fn Setonmouseover ( ) ; fn onmouseover ( ) ; fn Setonreadystatechange ( ) ; fn onreadystatechange ( ) ; fn Setonafterupdate ( ) ; fn onafterupdate ( ) ; fn Setonrowexit ( ) ; fn onrowexit ( ) ; fn Setonrowenter ( ) ; fn onrowenter ( ) ; fn Setondragstart ( ) ; fn ondragstart ( ) ; fn Setonselectstart ( ) ; fn onselectstart ( ) ; fn elementFromPoint ( ) ; fn parentWindow ( ) ; fn styleSheets ( ) ; fn Setonbeforeupdate ( ) ; fn onbeforeupdate ( ) ; fn Setonerrorupdate ( ) ; fn onerrorupdate ( ) ; fn toString ( ) ; fn createStyleSheet ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLDocument2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLDocument2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLDocument2Vtbl < > { unsafe extern "system" fn all < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn body < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn activeElement < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn images < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn applets < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn links < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn forms < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn anchors < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Settitle < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn title < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scripts < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetdesignMode < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn designMode < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn selection < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn readyState < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn frames < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn embeds < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn plugins < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetalinkColor < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn alinkColor < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetbgColor < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn bgColor < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetfgColor < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn fgColor < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetlinkColor < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn linkColor < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetvlinkColor < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn vlinkColor < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn referrer < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn location < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn lastModified < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetURL < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn URL < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setdomain < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn domain < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setcookie < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn cookie < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setexpando < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn expando < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setcharset < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn charset < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetdefaultCharset < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn defaultCharset < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn mimeType < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn fileSize < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn fileCreatedDate < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn fileModifiedDate < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn fileUpdatedDate < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn security < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn protocol < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn nameProp < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn write < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psarray : * const super::super::System::Com:: SAFEARRAY , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn writeln < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psarray : * const super::super::System::Com:: SAFEARRAY , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn open < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , url : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , name : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , features : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , replace : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , pomwindowresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn close < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clear < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn queryCommandSupported < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cmdid : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pfret : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn queryCommandEnabled < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cmdid : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pfret : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn queryCommandState < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cmdid : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pfret : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn queryCommandIndeterm < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cmdid : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pfret : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn queryCommandText < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cmdid : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pcmdtext : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn queryCommandValue < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cmdid : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pcmdvalue : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn execCommand < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cmdid : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , showui : i16 , value : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , pfret : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn execCommandShowHelp < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cmdid : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pfret : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createElement < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , etag : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , newelem : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonhelp < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onhelp < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonclick < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onclick < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setondblclick < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ondblclick < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonkeyup < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onkeyup < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonkeydown < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onkeydown < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonkeypress < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onkeypress < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmouseup < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmouseup < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmousedown < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmousedown < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmousemove < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmousemove < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmouseout < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmouseout < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmouseover < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmouseover < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonreadystatechange < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onreadystatechange < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonafterupdate < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onafterupdate < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonrowexit < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onrowexit < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonrowenter < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onrowenter < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setondragstart < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ondragstart < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonselectstart < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onselectstart < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn elementFromPoint < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , x : i32 , y : i32 , elementhit : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn parentWindow < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn styleSheets < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonbeforeupdate < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onbeforeupdate < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonerrorupdate < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onerrorupdate < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn toString < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , string : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createStyleSheet < Impl : IHTMLDocument2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrhref : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , lindex : i32 , ppnewstylesheet : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , all : all :: < Impl , IMPL_OFFSET > , body : body :: < Impl , IMPL_OFFSET > , activeElement : activeElement :: < Impl , IMPL_OFFSET > , images : images :: < Impl , IMPL_OFFSET > , applets : applets :: < Impl , IMPL_OFFSET > , links : links :: < Impl , IMPL_OFFSET > , forms : forms :: < Impl , IMPL_OFFSET > , anchors : anchors :: < Impl , IMPL_OFFSET > , Settitle : Settitle :: < Impl , IMPL_OFFSET > , title : title :: < Impl , IMPL_OFFSET > , scripts : scripts :: < Impl , IMPL_OFFSET > , SetdesignMode : SetdesignMode :: < Impl , IMPL_OFFSET > , designMode : designMode :: < Impl , IMPL_OFFSET > , selection : selection :: < Impl , IMPL_OFFSET > , readyState : readyState :: < Impl , IMPL_OFFSET > , frames : frames :: < Impl , IMPL_OFFSET > , embeds : embeds :: < Impl , IMPL_OFFSET > , plugins : plugins :: < Impl , IMPL_OFFSET > , SetalinkColor : SetalinkColor :: < Impl , IMPL_OFFSET > , alinkColor : alinkColor :: < Impl , IMPL_OFFSET > , SetbgColor : SetbgColor :: < Impl , IMPL_OFFSET > , bgColor : bgColor :: < Impl , IMPL_OFFSET > , SetfgColor : SetfgColor :: < Impl , IMPL_OFFSET > , fgColor : fgColor :: < Impl , IMPL_OFFSET > , SetlinkColor : SetlinkColor :: < Impl , IMPL_OFFSET > , linkColor : linkColor :: < Impl , IMPL_OFFSET > , SetvlinkColor : SetvlinkColor :: < Impl , IMPL_OFFSET > , vlinkColor : vlinkColor :: < Impl , IMPL_OFFSET > , referrer : referrer :: < Impl , IMPL_OFFSET > , location : location :: < Impl , IMPL_OFFSET > , lastModified : lastModified :: < Impl , IMPL_OFFSET > , SetURL : SetURL :: < Impl , IMPL_OFFSET > , URL : URL :: < Impl , IMPL_OFFSET > , Setdomain : Setdomain :: < Impl , IMPL_OFFSET > , domain : domain :: < Impl , IMPL_OFFSET > , Setcookie : Setcookie :: < Impl , IMPL_OFFSET > , cookie : cookie :: < Impl , IMPL_OFFSET > , Setexpando : Setexpando :: < Impl , IMPL_OFFSET > , expando : expando :: < Impl , IMPL_OFFSET > , Setcharset : Setcharset :: < Impl , IMPL_OFFSET > , charset : charset :: < Impl , IMPL_OFFSET > , SetdefaultCharset : SetdefaultCharset :: < Impl , IMPL_OFFSET > , defaultCharset : defaultCharset :: < Impl , IMPL_OFFSET > , mimeType : mimeType :: < Impl , IMPL_OFFSET > , fileSize : fileSize :: < Impl , IMPL_OFFSET > , fileCreatedDate : fileCreatedDate :: < Impl , IMPL_OFFSET > , fileModifiedDate : fileModifiedDate :: < Impl , IMPL_OFFSET > , fileUpdatedDate : fileUpdatedDate :: < Impl , IMPL_OFFSET > , security : security :: < Impl , IMPL_OFFSET > , protocol : protocol :: < Impl , IMPL_OFFSET > , nameProp : nameProp :: < Impl , IMPL_OFFSET > , write : write :: < Impl , IMPL_OFFSET > , writeln : writeln :: < Impl , IMPL_OFFSET > , open : open :: < Impl , IMPL_OFFSET > , close : close :: < Impl , IMPL_OFFSET > , clear : clear :: < Impl , IMPL_OFFSET > , queryCommandSupported : queryCommandSupported :: < Impl , IMPL_OFFSET > , queryCommandEnabled : queryCommandEnabled :: < Impl , IMPL_OFFSET > , queryCommandState : queryCommandState :: < Impl , IMPL_OFFSET > , queryCommandIndeterm : queryCommandIndeterm :: < Impl , IMPL_OFFSET > , queryCommandText : queryCommandText :: < Impl , IMPL_OFFSET > , queryCommandValue : queryCommandValue :: < Impl , IMPL_OFFSET > , execCommand : execCommand :: < Impl , IMPL_OFFSET > , execCommandShowHelp : execCommandShowHelp :: < Impl , IMPL_OFFSET > , createElement : createElement :: < Impl , IMPL_OFFSET > , Setonhelp : Setonhelp :: < Impl , IMPL_OFFSET > , onhelp : onhelp :: < Impl , IMPL_OFFSET > , Setonclick : Setonclick :: < Impl , IMPL_OFFSET > , onclick : onclick :: < Impl , IMPL_OFFSET > , Setondblclick : Setondblclick :: < Impl , IMPL_OFFSET > , ondblclick : ondblclick :: < Impl , IMPL_OFFSET > , Setonkeyup : Setonkeyup :: < Impl , IMPL_OFFSET > , onkeyup : onkeyup :: < Impl , IMPL_OFFSET > , Setonkeydown : Setonkeydown :: < Impl , IMPL_OFFSET > , onkeydown : onkeydown :: < Impl , IMPL_OFFSET > , Setonkeypress : Setonkeypress :: < Impl , IMPL_OFFSET > , onkeypress : onkeypress :: < Impl , IMPL_OFFSET > , Setonmouseup : Setonmouseup :: < Impl , IMPL_OFFSET > , onmouseup : onmouseup :: < Impl , IMPL_OFFSET > , Setonmousedown : Setonmousedown :: < Impl , IMPL_OFFSET > , onmousedown : onmousedown :: < Impl , IMPL_OFFSET > , Setonmousemove : Setonmousemove :: < Impl , IMPL_OFFSET > , onmousemove : onmousemove :: < Impl , IMPL_OFFSET > , Setonmouseout : Setonmouseout :: < Impl , IMPL_OFFSET > , onmouseout : onmouseout :: < Impl , IMPL_OFFSET > , Setonmouseover : Setonmouseover :: < Impl , IMPL_OFFSET > , onmouseover : onmouseover :: < Impl , IMPL_OFFSET > , Setonreadystatechange : Setonreadystatechange :: < Impl , IMPL_OFFSET > , onreadystatechange : onreadystatechange :: < Impl , IMPL_OFFSET > , Setonafterupdate : Setonafterupdate :: < Impl , IMPL_OFFSET > , onafterupdate : onafterupdate :: < Impl , IMPL_OFFSET > , Setonrowexit : Setonrowexit :: < Impl , IMPL_OFFSET > , onrowexit : onrowexit :: < Impl , IMPL_OFFSET > , Setonrowenter : Setonrowenter :: < Impl , IMPL_OFFSET > , onrowenter : onrowenter :: < Impl , IMPL_OFFSET > , Setondragstart : Setondragstart :: < Impl , IMPL_OFFSET > , ondragstart : ondragstart :: < Impl , IMPL_OFFSET > , Setonselectstart : Setonselectstart :: < Impl , IMPL_OFFSET > , onselectstart : onselectstart :: < Impl , IMPL_OFFSET > , elementFromPoint : elementFromPoint :: < Impl , IMPL_OFFSET > , parentWindow : parentWindow :: < Impl , IMPL_OFFSET > , styleSheets : styleSheets :: < Impl , IMPL_OFFSET > , Setonbeforeupdate : Setonbeforeupdate :: < Impl , IMPL_OFFSET > , onbeforeupdate : onbeforeupdate :: < Impl , IMPL_OFFSET > , Setonerrorupdate : Setonerrorupdate :: < Impl , IMPL_OFFSET > , onerrorupdate : onerrorupdate :: < Impl , IMPL_OFFSET > , toString : toString :: < Impl , IMPL_OFFSET > , createStyleSheet : createStyleSheet :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLDocument2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLDocument3Impl < > : Sized + IDispatchImpl where { fn releaseCapture ( ) ; fn recalc ( ) ; fn createTextNode ( ) ; fn documentElement ( ) ; fn uniqueID ( ) ; fn attachEvent ( ) ; fn detachEvent ( ) ; fn Setonrowsdelete ( ) ; fn onrowsdelete ( ) ; fn Setonrowsinserted ( ) ; fn onrowsinserted ( ) ; fn Setoncellchange ( ) ; fn oncellchange ( ) ; fn Setondatasetchanged ( ) ; fn ondatasetchanged ( ) ; fn Setondataavailable ( ) ; fn ondataavailable ( ) ; fn Setondatasetcomplete ( ) ; fn ondatasetcomplete ( ) ; fn Setonpropertychange ( ) ; fn onpropertychange ( ) ; fn Setdir ( ) ; fn dir ( ) ; fn Setoncontextmenu ( ) ; fn oncontextmenu ( ) ; fn Setonstop ( ) ; fn onstop ( ) ; fn createDocumentFragment ( ) ; fn parentDocument ( ) ; fn SetenableDownload ( ) ; fn enableDownload ( ) ; fn SetbaseUrl ( ) ; fn baseUrl ( ) ; fn childNodes ( ) ; fn SetinheritStyleSheets ( ) ; fn inheritStyleSheets ( ) ; fn Setonbeforeeditfocus ( ) ; fn onbeforeeditfocus ( ) ; fn getElementsByName ( ) ; fn getElementById ( ) ; fn getElementsByTagName ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLDocument3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLDocument3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLDocument3Vtbl < > { unsafe extern "system" fn releaseCapture < Impl : IHTMLDocument3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn recalc < Impl : IHTMLDocument3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fforce : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createTextNode < Impl : IHTMLDocument3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , text : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , newtextnode : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn documentElement < Impl : IHTMLDocument3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn uniqueID < Impl : IHTMLDocument3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn attachEvent < Impl : IHTMLDocument3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , event : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pdisp : :: windows :: core :: RawPtr , pfresult : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn detachEvent < Impl : IHTMLDocument3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , event : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pdisp : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonrowsdelete < Impl : IHTMLDocument3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onrowsdelete < Impl : IHTMLDocument3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonrowsinserted < Impl : IHTMLDocument3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onrowsinserted < Impl : IHTMLDocument3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setoncellchange < Impl : IHTMLDocument3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn oncellchange < Impl : IHTMLDocument3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setondatasetchanged < Impl : IHTMLDocument3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ondatasetchanged < Impl : IHTMLDocument3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setondataavailable < Impl : IHTMLDocument3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ondataavailable < Impl : IHTMLDocument3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setondatasetcomplete < Impl : IHTMLDocument3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ondatasetcomplete < Impl : IHTMLDocument3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonpropertychange < Impl : IHTMLDocument3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onpropertychange < Impl : IHTMLDocument3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setdir < Impl : IHTMLDocument3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn dir < Impl : IHTMLDocument3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setoncontextmenu < Impl : IHTMLDocument3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn oncontextmenu < Impl : IHTMLDocument3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonstop < Impl : IHTMLDocument3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onstop < Impl : IHTMLDocument3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createDocumentFragment < Impl : IHTMLDocument3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pnewdoc : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn parentDocument < Impl : IHTMLDocument3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetenableDownload < Impl : IHTMLDocument3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn enableDownload < Impl : IHTMLDocument3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetbaseUrl < Impl : IHTMLDocument3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn baseUrl < Impl : IHTMLDocument3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn childNodes < Impl : IHTMLDocument3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetinheritStyleSheets < Impl : IHTMLDocument3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn inheritStyleSheets < Impl : IHTMLDocument3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonbeforeeditfocus < Impl : IHTMLDocument3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onbeforeeditfocus < Impl : IHTMLDocument3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getElementsByName < Impl : IHTMLDocument3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pelcoll : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getElementById < Impl : IHTMLDocument3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pel : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getElementsByTagName < Impl : IHTMLDocument3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pelcoll : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , releaseCapture : releaseCapture :: < Impl , IMPL_OFFSET > , recalc : recalc :: < Impl , IMPL_OFFSET > , createTextNode : createTextNode :: < Impl , IMPL_OFFSET > , documentElement : documentElement :: < Impl , IMPL_OFFSET > , uniqueID : uniqueID :: < Impl , IMPL_OFFSET > , attachEvent : attachEvent :: < Impl , IMPL_OFFSET > , detachEvent : detachEvent :: < Impl , IMPL_OFFSET > , Setonrowsdelete : Setonrowsdelete :: < Impl , IMPL_OFFSET > , onrowsdelete : onrowsdelete :: < Impl , IMPL_OFFSET > , Setonrowsinserted : Setonrowsinserted :: < Impl , IMPL_OFFSET > , onrowsinserted : onrowsinserted :: < Impl , IMPL_OFFSET > , Setoncellchange : Setoncellchange :: < Impl , IMPL_OFFSET > , oncellchange : oncellchange :: < Impl , IMPL_OFFSET > , Setondatasetchanged : Setondatasetchanged :: < Impl , IMPL_OFFSET > , ondatasetchanged : ondatasetchanged :: < Impl , IMPL_OFFSET > , Setondataavailable : Setondataavailable :: < Impl , IMPL_OFFSET > , ondataavailable : ondataavailable :: < Impl , IMPL_OFFSET > , Setondatasetcomplete : Setondatasetcomplete :: < Impl , IMPL_OFFSET > , ondatasetcomplete : ondatasetcomplete :: < Impl , IMPL_OFFSET > , Setonpropertychange : Setonpropertychange :: < Impl , IMPL_OFFSET > , onpropertychange : onpropertychange :: < Impl , IMPL_OFFSET > , Setdir : Setdir :: < Impl , IMPL_OFFSET > , dir : dir :: < Impl , IMPL_OFFSET > , Setoncontextmenu : Setoncontextmenu :: < Impl , IMPL_OFFSET > , oncontextmenu : oncontextmenu :: < Impl , IMPL_OFFSET > , Setonstop : Setonstop :: < Impl , IMPL_OFFSET > , onstop : onstop :: < Impl , IMPL_OFFSET > , createDocumentFragment : createDocumentFragment :: < Impl , IMPL_OFFSET > , parentDocument : parentDocument :: < Impl , IMPL_OFFSET > , SetenableDownload : SetenableDownload :: < Impl , IMPL_OFFSET > , enableDownload : enableDownload :: < Impl , IMPL_OFFSET > , SetbaseUrl : SetbaseUrl :: < Impl , IMPL_OFFSET > , baseUrl : baseUrl :: < Impl , IMPL_OFFSET > , childNodes : childNodes :: < Impl , IMPL_OFFSET > , SetinheritStyleSheets : SetinheritStyleSheets :: < Impl , IMPL_OFFSET > , inheritStyleSheets : inheritStyleSheets :: < Impl , IMPL_OFFSET > , Setonbeforeeditfocus : Setonbeforeeditfocus :: < Impl , IMPL_OFFSET > , onbeforeeditfocus : onbeforeeditfocus :: < Impl , IMPL_OFFSET > , getElementsByName : getElementsByName :: < Impl , IMPL_OFFSET > , getElementById : getElementById :: < Impl , IMPL_OFFSET > , getElementsByTagName : getElementsByTagName :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLDocument3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLDocument4Impl < > : Sized + IDispatchImpl where { fn focus ( ) ; fn hasFocus ( ) ; fn Setonselectionchange ( ) ; fn onselectionchange ( ) ; fn namespaces ( ) ; fn createDocumentFromUrl ( ) ; fn Setmedia ( ) ; fn media ( ) ; fn createEventObject ( ) ; fn fireEvent ( ) ; fn createRenderStyle ( ) ; fn Setoncontrolselect ( ) ; fn oncontrolselect ( ) ; fn URLUnencoded ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLDocument4Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLDocument4Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLDocument4Vtbl < > { unsafe extern "system" fn focus < Impl : IHTMLDocument4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn hasFocus < Impl : IHTMLDocument4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pffocus : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonselectionchange < Impl : IHTMLDocument4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onselectionchange < Impl : IHTMLDocument4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn namespaces < Impl : IHTMLDocument4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createDocumentFromUrl < Impl : IHTMLDocument4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrurl : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , bstroptions : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , newdoc : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setmedia < Impl : IHTMLDocument4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn media < Impl : IHTMLDocument4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createEventObject < Impl : IHTMLDocument4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvareventobject : * const super::super::System::Com:: VARIANT , ppeventobj : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn fireEvent < Impl : IHTMLDocument4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstreventname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pvareventobject : * const super::super::System::Com:: VARIANT , pfcancelled : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createRenderStyle < Impl : IHTMLDocument4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ppihtmlrenderstyle : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setoncontrolselect < Impl : IHTMLDocument4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn oncontrolselect < Impl : IHTMLDocument4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn URLUnencoded < Impl : IHTMLDocument4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , focus : focus :: < Impl , IMPL_OFFSET > , hasFocus : hasFocus :: < Impl , IMPL_OFFSET > , Setonselectionchange : Setonselectionchange :: < Impl , IMPL_OFFSET > , onselectionchange : onselectionchange :: < Impl , IMPL_OFFSET > , namespaces : namespaces :: < Impl , IMPL_OFFSET > , createDocumentFromUrl : createDocumentFromUrl :: < Impl , IMPL_OFFSET > , Setmedia : Setmedia :: < Impl , IMPL_OFFSET > , media : media :: < Impl , IMPL_OFFSET > , createEventObject : createEventObject :: < Impl , IMPL_OFFSET > , fireEvent : fireEvent :: < Impl , IMPL_OFFSET > , createRenderStyle : createRenderStyle :: < Impl , IMPL_OFFSET > , Setoncontrolselect : Setoncontrolselect :: < Impl , IMPL_OFFSET > , oncontrolselect : oncontrolselect :: < Impl , IMPL_OFFSET > , URLUnencoded : URLUnencoded :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLDocument4 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLDocument5Impl < > : Sized + IDispatchImpl where { fn Setonmousewheel ( ) ; fn onmousewheel ( ) ; fn doctype ( ) ; fn implementation ( ) ; fn createAttribute ( ) ; fn createComment ( ) ; fn Setonfocusin ( ) ; fn onfocusin ( ) ; fn Setonfocusout ( ) ; fn onfocusout ( ) ; fn Setonactivate ( ) ; fn onactivate ( ) ; fn Setondeactivate ( ) ; fn ondeactivate ( ) ; fn Setonbeforeactivate ( ) ; fn onbeforeactivate ( ) ; fn Setonbeforedeactivate ( ) ; fn onbeforedeactivate ( ) ; fn compatMode ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLDocument5Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLDocument5Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLDocument5Vtbl < > { unsafe extern "system" fn Setonmousewheel < Impl : IHTMLDocument5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmousewheel < Impl : IHTMLDocument5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn doctype < Impl : IHTMLDocument5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn implementation < Impl : IHTMLDocument5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createAttribute < Impl : IHTMLDocument5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrattrname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ppattribute : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createComment < Impl : IHTMLDocument5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrdata : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ppretnode : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonfocusin < Impl : IHTMLDocument5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onfocusin < Impl : IHTMLDocument5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonfocusout < Impl : IHTMLDocument5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onfocusout < Impl : IHTMLDocument5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonactivate < Impl : IHTMLDocument5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onactivate < Impl : IHTMLDocument5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setondeactivate < Impl : IHTMLDocument5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ondeactivate < Impl : IHTMLDocument5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonbeforeactivate < Impl : IHTMLDocument5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onbeforeactivate < Impl : IHTMLDocument5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonbeforedeactivate < Impl : IHTMLDocument5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onbeforedeactivate < Impl : IHTMLDocument5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn compatMode < Impl : IHTMLDocument5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setonmousewheel : Setonmousewheel :: < Impl , IMPL_OFFSET > , onmousewheel : onmousewheel :: < Impl , IMPL_OFFSET > , doctype : doctype :: < Impl , IMPL_OFFSET > , implementation : implementation :: < Impl , IMPL_OFFSET > , createAttribute : createAttribute :: < Impl , IMPL_OFFSET > , createComment : createComment :: < Impl , IMPL_OFFSET > , Setonfocusin : Setonfocusin :: < Impl , IMPL_OFFSET > , onfocusin : onfocusin :: < Impl , IMPL_OFFSET > , Setonfocusout : Setonfocusout :: < Impl , IMPL_OFFSET > , onfocusout : onfocusout :: < Impl , IMPL_OFFSET > , Setonactivate : Setonactivate :: < Impl , IMPL_OFFSET > , onactivate : onactivate :: < Impl , IMPL_OFFSET > , Setondeactivate : Setondeactivate :: < Impl , IMPL_OFFSET > , ondeactivate : ondeactivate :: < Impl , IMPL_OFFSET > , Setonbeforeactivate : Setonbeforeactivate :: < Impl , IMPL_OFFSET > , onbeforeactivate : onbeforeactivate :: < Impl , IMPL_OFFSET > , Setonbeforedeactivate : Setonbeforedeactivate :: < Impl , IMPL_OFFSET > , onbeforedeactivate : onbeforedeactivate :: < Impl , IMPL_OFFSET > , compatMode : compatMode :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLDocument5 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLDocument6Impl < > : Sized + IDispatchImpl where { fn compatible ( ) ; fn documentMode ( ) ; fn Setonstorage ( ) ; fn onstorage ( ) ; fn Setonstoragecommit ( ) ; fn onstoragecommit ( ) ; fn getElementById ( ) ; fn updateSettings ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLDocument6Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLDocument6Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLDocument6Vtbl < > { unsafe extern "system" fn compatible < Impl : IHTMLDocument6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn documentMode < Impl : IHTMLDocument6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonstorage < Impl : IHTMLDocument6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onstorage < Impl : IHTMLDocument6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonstoragecommit < Impl : IHTMLDocument6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onstoragecommit < Impl : IHTMLDocument6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getElementById < Impl : IHTMLDocument6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrid : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ppretelement : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn updateSettings < Impl : IHTMLDocument6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , compatible : compatible :: < Impl , IMPL_OFFSET > , documentMode : documentMode :: < Impl , IMPL_OFFSET > , Setonstorage : Setonstorage :: < Impl , IMPL_OFFSET > , onstorage : onstorage :: < Impl , IMPL_OFFSET > , Setonstoragecommit : Setonstoragecommit :: < Impl , IMPL_OFFSET > , onstoragecommit : onstoragecommit :: < Impl , IMPL_OFFSET > , getElementById : getElementById :: < Impl , IMPL_OFFSET > , updateSettings : updateSettings :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLDocument6 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLDocument7Impl < > : Sized + IDispatchImpl where { fn defaultView ( ) ; fn createCDATASection ( ) ; fn getSelection ( ) ; fn getElementsByTagNameNS ( ) ; fn createElementNS ( ) ; fn createAttributeNS ( ) ; fn Setonmsthumbnailclick ( ) ; fn onmsthumbnailclick ( ) ; fn characterSet ( ) ; fn createElement ( ) ; fn createAttribute ( ) ; fn getElementsByClassName ( ) ; fn createProcessingInstruction ( ) ; fn adoptNode ( ) ; fn Setonmssitemodejumplistitemremoved ( ) ; fn onmssitemodejumplistitemremoved ( ) ; fn all ( ) ; fn inputEncoding ( ) ; fn xmlEncoding ( ) ; fn SetxmlStandalone ( ) ; fn xmlStandalone ( ) ; fn SetxmlVersion ( ) ; fn xmlVersion ( ) ; fn hasAttributes ( ) ; fn Setonabort ( ) ; fn onabort ( ) ; fn Setonblur ( ) ; fn onblur ( ) ; fn Setoncanplay ( ) ; fn oncanplay ( ) ; fn Setoncanplaythrough ( ) ; fn oncanplaythrough ( ) ; fn Setonchange ( ) ; fn onchange ( ) ; fn Setondrag ( ) ; fn ondrag ( ) ; fn Setondragend ( ) ; fn ondragend ( ) ; fn Setondragenter ( ) ; fn ondragenter ( ) ; fn Setondragleave ( ) ; fn ondragleave ( ) ; fn Setondragover ( ) ; fn ondragover ( ) ; fn Setondrop ( ) ; fn ondrop ( ) ; fn Setondurationchange ( ) ; fn ondurationchange ( ) ; fn Setonemptied ( ) ; fn onemptied ( ) ; fn Setonended ( ) ; fn onended ( ) ; fn Setonerror ( ) ; fn onerror ( ) ; fn Setonfocus ( ) ; fn onfocus ( ) ; fn Setoninput ( ) ; fn oninput ( ) ; fn Setonload ( ) ; fn onload ( ) ; fn Setonloadeddata ( ) ; fn onloadeddata ( ) ; fn Setonloadedmetadata ( ) ; fn onloadedmetadata ( ) ; fn Setonloadstart ( ) ; fn onloadstart ( ) ; fn Setonpause ( ) ; fn onpause ( ) ; fn Setonplay ( ) ; fn onplay ( ) ; fn Setonplaying ( ) ; fn onplaying ( ) ; fn Setonprogress ( ) ; fn onprogress ( ) ; fn Setonratechange ( ) ; fn onratechange ( ) ; fn Setonreset ( ) ; fn onreset ( ) ; fn Setonscroll ( ) ; fn onscroll ( ) ; fn Setonseeked ( ) ; fn onseeked ( ) ; fn Setonseeking ( ) ; fn onseeking ( ) ; fn Setonselect ( ) ; fn onselect ( ) ; fn Setonstalled ( ) ; fn onstalled ( ) ; fn Setonsubmit ( ) ; fn onsubmit ( ) ; fn Setonsuspend ( ) ; fn onsuspend ( ) ; fn Setontimeupdate ( ) ; fn ontimeupdate ( ) ; fn Setonvolumechange ( ) ; fn onvolumechange ( ) ; fn Setonwaiting ( ) ; fn onwaiting ( ) ; fn normalize ( ) ; fn importNode ( ) ; fn parentWindow ( ) ; fn putref_body ( ) ; fn body ( ) ; fn head ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLDocument7Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLDocument7Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLDocument7Vtbl < > { unsafe extern "system" fn defaultView < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createCDATASection < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , text : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , newcdatasectionnode : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getSelection < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppihtmlselection : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getElementsByTagNameNS < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarns : * const super::super::System::Com:: VARIANT , bstrlocalname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pelcoll : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createElementNS < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarns : * const super::super::System::Com:: VARIANT , bstrtag : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , newelem : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createAttributeNS < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarns : * const super::super::System::Com:: VARIANT , bstrattrname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ppattribute : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmsthumbnailclick < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmsthumbnailclick < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn characterSet < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createElement < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrtag : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , newelem : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createAttribute < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrattrname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ppattribute : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getElementsByClassName < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pel : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createProcessingInstruction < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrtarget : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , bstrdata : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , newprocessinginstruction : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn adoptNode < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pnodesource : :: windows :: core :: RawPtr , ppnodedest : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmssitemodejumplistitemremoved < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmssitemodejumplistitemremoved < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn all < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn inputEncoding < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn xmlEncoding < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetxmlStandalone < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn xmlStandalone < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetxmlVersion < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn xmlVersion < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn hasAttributes < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfhasattributes : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonabort < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onabort < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonblur < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onblur < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setoncanplay < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn oncanplay < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setoncanplaythrough < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn oncanplaythrough < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonchange < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onchange < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setondrag < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ondrag < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setondragend < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ondragend < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setondragenter < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ondragenter < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setondragleave < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ondragleave < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setondragover < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ondragover < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setondrop < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ondrop < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setondurationchange < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ondurationchange < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonemptied < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onemptied < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonended < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onended < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonerror < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onerror < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonfocus < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onfocus < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setoninput < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn oninput < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonload < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onload < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonloadeddata < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onloadeddata < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonloadedmetadata < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onloadedmetadata < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonloadstart < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onloadstart < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonpause < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onpause < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonplay < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onplay < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonplaying < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onplaying < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonprogress < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onprogress < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonratechange < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onratechange < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonreset < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onreset < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonscroll < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onscroll < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonseeked < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onseeked < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonseeking < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onseeking < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonselect < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onselect < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonstalled < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onstalled < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonsubmit < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onsubmit < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonsuspend < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onsuspend < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setontimeupdate < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ontimeupdate < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonvolumechange < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onvolumechange < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonwaiting < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onwaiting < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn normalize < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn importNode < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pnodesource : :: windows :: core :: RawPtr , fdeep : i16 , ppnodedest : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn parentWindow < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_body < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn body < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn head < Impl : IHTMLDocument7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , defaultView : defaultView :: < Impl , IMPL_OFFSET > , createCDATASection : createCDATASection :: < Impl , IMPL_OFFSET > , getSelection : getSelection :: < Impl , IMPL_OFFSET > , getElementsByTagNameNS : getElementsByTagNameNS :: < Impl , IMPL_OFFSET > , createElementNS : createElementNS :: < Impl , IMPL_OFFSET > , createAttributeNS : createAttributeNS :: < Impl , IMPL_OFFSET > , Setonmsthumbnailclick : Setonmsthumbnailclick :: < Impl , IMPL_OFFSET > , onmsthumbnailclick : onmsthumbnailclick :: < Impl , IMPL_OFFSET > , characterSet : characterSet :: < Impl , IMPL_OFFSET > , createElement : createElement :: < Impl , IMPL_OFFSET > , createAttribute : createAttribute :: < Impl , IMPL_OFFSET > , getElementsByClassName : getElementsByClassName :: < Impl , IMPL_OFFSET > , createProcessingInstruction : createProcessingInstruction :: < Impl , IMPL_OFFSET > , adoptNode : adoptNode :: < Impl , IMPL_OFFSET > , Setonmssitemodejumplistitemremoved : Setonmssitemodejumplistitemremoved :: < Impl , IMPL_OFFSET > , onmssitemodejumplistitemremoved : onmssitemodejumplistitemremoved :: < Impl , IMPL_OFFSET > , all : all :: < Impl , IMPL_OFFSET > , inputEncoding : inputEncoding :: < Impl , IMPL_OFFSET > , xmlEncoding : xmlEncoding :: < Impl , IMPL_OFFSET > , SetxmlStandalone : SetxmlStandalone :: < Impl , IMPL_OFFSET > , xmlStandalone : xmlStandalone :: < Impl , IMPL_OFFSET > , SetxmlVersion : SetxmlVersion :: < Impl , IMPL_OFFSET > , xmlVersion : xmlVersion :: < Impl , IMPL_OFFSET > , hasAttributes : hasAttributes :: < Impl , IMPL_OFFSET > , Setonabort : Setonabort :: < Impl , IMPL_OFFSET > , onabort : onabort :: < Impl , IMPL_OFFSET > , Setonblur : Setonblur :: < Impl , IMPL_OFFSET > , onblur : onblur :: < Impl , IMPL_OFFSET > , Setoncanplay : Setoncanplay :: < Impl , IMPL_OFFSET > , oncanplay : oncanplay :: < Impl , IMPL_OFFSET > , Setoncanplaythrough : Setoncanplaythrough :: < Impl , IMPL_OFFSET > , oncanplaythrough : oncanplaythrough :: < Impl , IMPL_OFFSET > , Setonchange : Setonchange :: < Impl , IMPL_OFFSET > , onchange : onchange :: < Impl , IMPL_OFFSET > , Setondrag : Setondrag :: < Impl , IMPL_OFFSET > , ondrag : ondrag :: < Impl , IMPL_OFFSET > , Setondragend : Setondragend :: < Impl , IMPL_OFFSET > , ondragend : ondragend :: < Impl , IMPL_OFFSET > , Setondragenter : Setondragenter :: < Impl , IMPL_OFFSET > , ondragenter : ondragenter :: < Impl , IMPL_OFFSET > , Setondragleave : Setondragleave :: < Impl , IMPL_OFFSET > , ondragleave : ondragleave :: < Impl , IMPL_OFFSET > , Setondragover : Setondragover :: < Impl , IMPL_OFFSET > , ondragover : ondragover :: < Impl , IMPL_OFFSET > , Setondrop : Setondrop :: < Impl , IMPL_OFFSET > , ondrop : ondrop :: < Impl , IMPL_OFFSET > , Setondurationchange : Setondurationchange :: < Impl , IMPL_OFFSET > , ondurationchange : ondurationchange :: < Impl , IMPL_OFFSET > , Setonemptied : Setonemptied :: < Impl , IMPL_OFFSET > , onemptied : onemptied :: < Impl , IMPL_OFFSET > , Setonended : Setonended :: < Impl , IMPL_OFFSET > , onended : onended :: < Impl , IMPL_OFFSET > , Setonerror : Setonerror :: < Impl , IMPL_OFFSET > , onerror : onerror :: < Impl , IMPL_OFFSET > , Setonfocus : Setonfocus :: < Impl , IMPL_OFFSET > , onfocus : onfocus :: < Impl , IMPL_OFFSET > , Setoninput : Setoninput :: < Impl , IMPL_OFFSET > , oninput : oninput :: < Impl , IMPL_OFFSET > , Setonload : Setonload :: < Impl , IMPL_OFFSET > , onload : onload :: < Impl , IMPL_OFFSET > , Setonloadeddata : Setonloadeddata :: < Impl , IMPL_OFFSET > , onloadeddata : onloadeddata :: < Impl , IMPL_OFFSET > , Setonloadedmetadata : Setonloadedmetadata :: < Impl , IMPL_OFFSET > , onloadedmetadata : onloadedmetadata :: < Impl , IMPL_OFFSET > , Setonloadstart : Setonloadstart :: < Impl , IMPL_OFFSET > , onloadstart : onloadstart :: < Impl , IMPL_OFFSET > , Setonpause : Setonpause :: < Impl , IMPL_OFFSET > , onpause : onpause :: < Impl , IMPL_OFFSET > , Setonplay : Setonplay :: < Impl , IMPL_OFFSET > , onplay : onplay :: < Impl , IMPL_OFFSET > , Setonplaying : Setonplaying :: < Impl , IMPL_OFFSET > , onplaying : onplaying :: < Impl , IMPL_OFFSET > , Setonprogress : Setonprogress :: < Impl , IMPL_OFFSET > , onprogress : onprogress :: < Impl , IMPL_OFFSET > , Setonratechange : Setonratechange :: < Impl , IMPL_OFFSET > , onratechange : onratechange :: < Impl , IMPL_OFFSET > , Setonreset : Setonreset :: < Impl , IMPL_OFFSET > , onreset : onreset :: < Impl , IMPL_OFFSET > , Setonscroll : Setonscroll :: < Impl , IMPL_OFFSET > , onscroll : onscroll :: < Impl , IMPL_OFFSET > , Setonseeked : Setonseeked :: < Impl , IMPL_OFFSET > , onseeked : onseeked :: < Impl , IMPL_OFFSET > , Setonseeking : Setonseeking :: < Impl , IMPL_OFFSET > , onseeking : onseeking :: < Impl , IMPL_OFFSET > , Setonselect : Setonselect :: < Impl , IMPL_OFFSET > , onselect : onselect :: < Impl , IMPL_OFFSET > , Setonstalled : Setonstalled :: < Impl , IMPL_OFFSET > , onstalled : onstalled :: < Impl , IMPL_OFFSET > , Setonsubmit : Setonsubmit :: < Impl , IMPL_OFFSET > , onsubmit : onsubmit :: < Impl , IMPL_OFFSET > , Setonsuspend : Setonsuspend :: < Impl , IMPL_OFFSET > , onsuspend : onsuspend :: < Impl , IMPL_OFFSET > , Setontimeupdate : Setontimeupdate :: < Impl , IMPL_OFFSET > , ontimeupdate : ontimeupdate :: < Impl , IMPL_OFFSET > , Setonvolumechange : Setonvolumechange :: < Impl , IMPL_OFFSET > , onvolumechange : onvolumechange :: < Impl , IMPL_OFFSET > , Setonwaiting : Setonwaiting :: < Impl , IMPL_OFFSET > , onwaiting : onwaiting :: < Impl , IMPL_OFFSET > , normalize : normalize :: < Impl , IMPL_OFFSET > , importNode : importNode :: < Impl , IMPL_OFFSET > , parentWindow : parentWindow :: < Impl , IMPL_OFFSET > , putref_body : putref_body :: < Impl , IMPL_OFFSET > , body : body :: < Impl , IMPL_OFFSET > , head : head :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLDocument7 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLDocument8Impl < > : Sized + IDispatchImpl where { fn Setonmscontentzoom ( ) ; fn onmscontentzoom ( ) ; fn Setonmspointerdown ( ) ; fn onmspointerdown ( ) ; fn Setonmspointermove ( ) ; fn onmspointermove ( ) ; fn Setonmspointerup ( ) ; fn onmspointerup ( ) ; fn Setonmspointerover ( ) ; fn onmspointerover ( ) ; fn Setonmspointerout ( ) ; fn onmspointerout ( ) ; fn Setonmspointercancel ( ) ; fn onmspointercancel ( ) ; fn Setonmspointerhover ( ) ; fn onmspointerhover ( ) ; fn Setonmsgesturestart ( ) ; fn onmsgesturestart ( ) ; fn Setonmsgesturechange ( ) ; fn onmsgesturechange ( ) ; fn Setonmsgestureend ( ) ; fn onmsgestureend ( ) ; fn Setonmsgesturehold ( ) ; fn onmsgesturehold ( ) ; fn Setonmsgesturetap ( ) ; fn onmsgesturetap ( ) ; fn Setonmsgesturedoubletap ( ) ; fn onmsgesturedoubletap ( ) ; fn Setonmsinertiastart ( ) ; fn onmsinertiastart ( ) ; fn elementsFromPoint ( ) ; fn elementsFromRect ( ) ; fn Setonmsmanipulationstatechanged ( ) ; fn onmsmanipulationstatechanged ( ) ; fn SetmsCapsLockWarningOff ( ) ; fn msCapsLockWarningOff ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLDocument8Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLDocument8Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLDocument8Vtbl < > { unsafe extern "system" fn Setonmscontentzoom < Impl : IHTMLDocument8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmscontentzoom < Impl : IHTMLDocument8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmspointerdown < Impl : IHTMLDocument8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmspointerdown < Impl : IHTMLDocument8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmspointermove < Impl : IHTMLDocument8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmspointermove < Impl : IHTMLDocument8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmspointerup < Impl : IHTMLDocument8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmspointerup < Impl : IHTMLDocument8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmspointerover < Impl : IHTMLDocument8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmspointerover < Impl : IHTMLDocument8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmspointerout < Impl : IHTMLDocument8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmspointerout < Impl : IHTMLDocument8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmspointercancel < Impl : IHTMLDocument8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmspointercancel < Impl : IHTMLDocument8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmspointerhover < Impl : IHTMLDocument8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmspointerhover < Impl : IHTMLDocument8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmsgesturestart < Impl : IHTMLDocument8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmsgesturestart < Impl : IHTMLDocument8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmsgesturechange < Impl : IHTMLDocument8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmsgesturechange < Impl : IHTMLDocument8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmsgestureend < Impl : IHTMLDocument8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmsgestureend < Impl : IHTMLDocument8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmsgesturehold < Impl : IHTMLDocument8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmsgesturehold < Impl : IHTMLDocument8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmsgesturetap < Impl : IHTMLDocument8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmsgesturetap < Impl : IHTMLDocument8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmsgesturedoubletap < Impl : IHTMLDocument8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmsgesturedoubletap < Impl : IHTMLDocument8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmsinertiastart < Impl : IHTMLDocument8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmsinertiastart < Impl : IHTMLDocument8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn elementsFromPoint < Impl : IHTMLDocument8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , x : f32 , y : f32 , elementshit : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn elementsFromRect < Impl : IHTMLDocument8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , left : f32 , top : f32 , width : f32 , height : f32 , elementshit : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmsmanipulationstatechanged < Impl : IHTMLDocument8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmsmanipulationstatechanged < Impl : IHTMLDocument8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsCapsLockWarningOff < Impl : IHTMLDocument8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msCapsLockWarningOff < Impl : IHTMLDocument8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setonmscontentzoom : Setonmscontentzoom :: < Impl , IMPL_OFFSET > , onmscontentzoom : onmscontentzoom :: < Impl , IMPL_OFFSET > , Setonmspointerdown : Setonmspointerdown :: < Impl , IMPL_OFFSET > , onmspointerdown : onmspointerdown :: < Impl , IMPL_OFFSET > , Setonmspointermove : Setonmspointermove :: < Impl , IMPL_OFFSET > , onmspointermove : onmspointermove :: < Impl , IMPL_OFFSET > , Setonmspointerup : Setonmspointerup :: < Impl , IMPL_OFFSET > , onmspointerup : onmspointerup :: < Impl , IMPL_OFFSET > , Setonmspointerover : Setonmspointerover :: < Impl , IMPL_OFFSET > , onmspointerover : onmspointerover :: < Impl , IMPL_OFFSET > , Setonmspointerout : Setonmspointerout :: < Impl , IMPL_OFFSET > , onmspointerout : onmspointerout :: < Impl , IMPL_OFFSET > , Setonmspointercancel : Setonmspointercancel :: < Impl , IMPL_OFFSET > , onmspointercancel : onmspointercancel :: < Impl , IMPL_OFFSET > , Setonmspointerhover : Setonmspointerhover :: < Impl , IMPL_OFFSET > , onmspointerhover : onmspointerhover :: < Impl , IMPL_OFFSET > , Setonmsgesturestart : Setonmsgesturestart :: < Impl , IMPL_OFFSET > , onmsgesturestart : onmsgesturestart :: < Impl , IMPL_OFFSET > , Setonmsgesturechange : Setonmsgesturechange :: < Impl , IMPL_OFFSET > , onmsgesturechange : onmsgesturechange :: < Impl , IMPL_OFFSET > , Setonmsgestureend : Setonmsgestureend :: < Impl , IMPL_OFFSET > , onmsgestureend : onmsgestureend :: < Impl , IMPL_OFFSET > , Setonmsgesturehold : Setonmsgesturehold :: < Impl , IMPL_OFFSET > , onmsgesturehold : onmsgesturehold :: < Impl , IMPL_OFFSET > , Setonmsgesturetap : Setonmsgesturetap :: < Impl , IMPL_OFFSET > , onmsgesturetap : onmsgesturetap :: < Impl , IMPL_OFFSET > , Setonmsgesturedoubletap : Setonmsgesturedoubletap :: < Impl , IMPL_OFFSET > , onmsgesturedoubletap : onmsgesturedoubletap :: < Impl , IMPL_OFFSET > , Setonmsinertiastart : Setonmsinertiastart :: < Impl , IMPL_OFFSET > , onmsinertiastart : onmsinertiastart :: < Impl , IMPL_OFFSET > , elementsFromPoint : elementsFromPoint :: < Impl , IMPL_OFFSET > , elementsFromRect : elementsFromRect :: < Impl , IMPL_OFFSET > , Setonmsmanipulationstatechanged : Setonmsmanipulationstatechanged :: < Impl , IMPL_OFFSET > , onmsmanipulationstatechanged : onmsmanipulationstatechanged :: < Impl , IMPL_OFFSET > , SetmsCapsLockWarningOff : SetmsCapsLockWarningOff :: < Impl , IMPL_OFFSET > , msCapsLockWarningOff : msCapsLockWarningOff :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLDocument8 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLDocumentCompatibleInfoImpl < > : Sized + IDispatchImpl where { fn userAgent ( ) ; fn version ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLDocumentCompatibleInfoVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLDocumentCompatibleInfoImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLDocumentCompatibleInfoVtbl < > { unsafe extern "system" fn userAgent < Impl : IHTMLDocumentCompatibleInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn version < Impl : IHTMLDocumentCompatibleInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , userAgent : userAgent :: < Impl , IMPL_OFFSET > , version : version :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLDocumentCompatibleInfo < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLDocumentCompatibleInfoCollectionImpl < > : Sized + IDispatchImpl where { fn length ( ) ; fn item ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLDocumentCompatibleInfoCollectionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLDocumentCompatibleInfoCollectionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLDocumentCompatibleInfoCollectionVtbl < > { unsafe extern "system" fn length < Impl : IHTMLDocumentCompatibleInfoCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn item < Impl : IHTMLDocumentCompatibleInfoCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , compatibleinfo : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , length : length :: < Impl , IMPL_OFFSET > , item : item :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLDocumentCompatibleInfoCollection < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_System_Com" ) ] pub trait IHTMLEditDesignerImpl < > : Sized where { fn PreHandleEvent ( ) ; fn PostHandleEvent ( ) ; fn TranslateAccelerator ( ) ; fn PostEditorEventNotify ( ) ; } # [ cfg ( feature ="Win32_System_Com" ) ] impl < > IHTMLEditDesignerVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLEditDesignerImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLEditDesignerVtbl < > { unsafe extern "system" fn PreHandleEvent < Impl : IHTMLEditDesignerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , inevtdispid : i32 , pieventobj : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PostHandleEvent < Impl : IHTMLEditDesignerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , inevtdispid : i32 , pieventobj : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn TranslateAccelerator < Impl : IHTMLEditDesignerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , inevtdispid : i32 , pieventobj : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PostEditorEventNotify < Impl : IHTMLEditDesignerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , inevtdispid : i32 , pieventobj : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , PreHandleEvent : PreHandleEvent :: < Impl , IMPL_OFFSET > , PostHandleEvent : PostHandleEvent :: < Impl , IMPL_OFFSET > , TranslateAccelerator : TranslateAccelerator :: < Impl , IMPL_OFFSET > , PostEditorEventNotify : PostEditorEventNotify :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLEditDesigner < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IHTMLEditHostImpl < > : Sized where { fn SnapRect ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IHTMLEditHostVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLEditHostImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLEditHostVtbl < > { unsafe extern "system" fn SnapRect < Impl : IHTMLEditHostImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pielement : :: windows :: core :: RawPtr , prcnew : * mut super::super::Foundation:: RECT , ehandle : ELEMENT_CORNER , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SnapRect : SnapRect :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLEditHost < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IHTMLEditHost2Impl < > : Sized + IHTMLEditHostImpl where { fn PreDrag ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IHTMLEditHost2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLEditHost2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLEditHost2Vtbl < > { unsafe extern "system" fn PreDrag < Impl : IHTMLEditHost2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , PreDrag : PreDrag :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLEditHost2 < > as :: windows :: core :: Interface > :: IID } } pub trait IHTMLEditServicesImpl < > : Sized where { fn AddDesigner ( ) ; fn RemoveDesigner ( ) ; fn GetSelectionServices ( ) ; fn MoveToSelectionAnchor ( ) ; fn MoveToSelectionEnd ( ) ; fn SelectRange ( ) ; } impl < > IHTMLEditServicesVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLEditServicesImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLEditServicesVtbl < > { unsafe extern "system" fn AddDesigner < Impl : IHTMLEditServicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidesigner : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RemoveDesigner < Impl : IHTMLEditServicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pidesigner : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetSelectionServices < Impl : IHTMLEditServicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , picontainer : :: windows :: core :: RawPtr , ppselsvc : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn MoveToSelectionAnchor < Impl : IHTMLEditServicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pistartanchor : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn MoveToSelectionEnd < Impl : IHTMLEditServicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , piendanchor : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SelectRange < Impl : IHTMLEditServicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pstart : :: windows :: core :: RawPtr , pend : :: windows :: core :: RawPtr , etype : SELECTION_TYPE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , AddDesigner : AddDesigner :: < Impl , IMPL_OFFSET > , RemoveDesigner : RemoveDesigner :: < Impl , IMPL_OFFSET > , GetSelectionServices : GetSelectionServices :: < Impl , IMPL_OFFSET > , MoveToSelectionAnchor : MoveToSelectionAnchor :: < Impl , IMPL_OFFSET > , MoveToSelectionEnd : MoveToSelectionEnd :: < Impl , IMPL_OFFSET > , SelectRange : SelectRange :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLEditServices < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IHTMLEditServices2Impl < > : Sized + IHTMLEditServicesImpl where { fn MoveToSelectionAnchorEx ( ) ; fn MoveToSelectionEndEx ( ) ; fn FreezeVirtualCaretPos ( ) ; fn UnFreezeVirtualCaretPos ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IHTMLEditServices2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLEditServices2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLEditServices2Vtbl < > { unsafe extern "system" fn MoveToSelectionAnchorEx < Impl : IHTMLEditServices2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pistartanchor : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn MoveToSelectionEndEx < Impl : IHTMLEditServices2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , piendanchor : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn FreezeVirtualCaretPos < Impl : IHTMLEditServices2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , frecompute : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UnFreezeVirtualCaretPos < Impl : IHTMLEditServices2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , freset : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , MoveToSelectionAnchorEx : MoveToSelectionAnchorEx :: < Impl , IMPL_OFFSET > , MoveToSelectionEndEx : MoveToSelectionEndEx :: < Impl , IMPL_OFFSET > , FreezeVirtualCaretPos : FreezeVirtualCaretPos :: < Impl , IMPL_OFFSET > , UnFreezeVirtualCaretPos : UnFreezeVirtualCaretPos :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLEditServices2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLElementImpl < > : Sized + IDispatchImpl where { fn setAttribute ( ) ; fn getAttribute ( ) ; fn removeAttribute ( ) ; fn SetclassName ( ) ; fn className ( ) ; fn Setid ( ) ; fn id ( ) ; fn tagName ( ) ; fn parentElement ( ) ; fn style ( ) ; fn Setonhelp ( ) ; fn onhelp ( ) ; fn Setonclick ( ) ; fn onclick ( ) ; fn Setondblclick ( ) ; fn ondblclick ( ) ; fn Setonkeydown ( ) ; fn onkeydown ( ) ; fn Setonkeyup ( ) ; fn onkeyup ( ) ; fn Setonkeypress ( ) ; fn onkeypress ( ) ; fn Setonmouseout ( ) ; fn onmouseout ( ) ; fn Setonmouseover ( ) ; fn onmouseover ( ) ; fn Setonmousemove ( ) ; fn onmousemove ( ) ; fn Setonmousedown ( ) ; fn onmousedown ( ) ; fn Setonmouseup ( ) ; fn onmouseup ( ) ; fn document ( ) ; fn Settitle ( ) ; fn title ( ) ; fn Setlanguage ( ) ; fn language ( ) ; fn Setonselectstart ( ) ; fn onselectstart ( ) ; fn scrollIntoView ( ) ; fn contains ( ) ; fn sourceIndex ( ) ; fn recordNumber ( ) ; fn Setlang ( ) ; fn lang ( ) ; fn offsetLeft ( ) ; fn offsetTop ( ) ; fn offsetWidth ( ) ; fn offsetHeight ( ) ; fn offsetParent ( ) ; fn SetinnerHTML ( ) ; fn innerHTML ( ) ; fn SetinnerText ( ) ; fn innerText ( ) ; fn SetouterHTML ( ) ; fn outerHTML ( ) ; fn SetouterText ( ) ; fn outerText ( ) ; fn insertAdjacentHTML ( ) ; fn insertAdjacentText ( ) ; fn parentTextEdit ( ) ; fn isTextEdit ( ) ; fn click ( ) ; fn filters ( ) ; fn Setondragstart ( ) ; fn ondragstart ( ) ; fn toString ( ) ; fn Setonbeforeupdate ( ) ; fn onbeforeupdate ( ) ; fn Setonafterupdate ( ) ; fn onafterupdate ( ) ; fn Setonerrorupdate ( ) ; fn onerrorupdate ( ) ; fn Setonrowexit ( ) ; fn onrowexit ( ) ; fn Setonrowenter ( ) ; fn onrowenter ( ) ; fn Setondatasetchanged ( ) ; fn ondatasetchanged ( ) ; fn Setondataavailable ( ) ; fn ondataavailable ( ) ; fn Setondatasetcomplete ( ) ; fn ondatasetcomplete ( ) ; fn Setonfilterchange ( ) ; fn onfilterchange ( ) ; fn children ( ) ; fn all ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLElementVtbl < > { unsafe extern "system" fn setAttribute < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , strattributename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , attributevalue : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , lflags : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getAttribute < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , strattributename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , lflags : i32 , attributevalue : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn removeAttribute < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , strattributename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , lflags : i32 , pfsuccess : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetclassName < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn className < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setid < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn id < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn tagName < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn parentElement < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn style < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonhelp < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onhelp < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonclick < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onclick < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setondblclick < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ondblclick < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonkeydown < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onkeydown < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonkeyup < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onkeyup < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonkeypress < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onkeypress < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmouseout < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmouseout < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmouseover < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmouseover < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmousemove < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmousemove < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmousedown < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmousedown < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmouseup < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmouseup < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn document < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Settitle < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn title < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setlanguage < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn language < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonselectstart < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onselectstart < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scrollIntoView < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varargstart : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn contains < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pchild : :: windows :: core :: RawPtr , pfresult : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn sourceIndex < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn recordNumber < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setlang < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn lang < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn offsetLeft < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn offsetTop < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn offsetWidth < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn offsetHeight < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn offsetParent < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetinnerHTML < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn innerHTML < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetinnerText < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn innerText < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetouterHTML < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn outerHTML < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetouterText < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn outerText < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn insertAdjacentHTML < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , r#where : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , html : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn insertAdjacentText < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , r#where : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , text : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn parentTextEdit < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn isTextEdit < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn click < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn filters < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setondragstart < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ondragstart < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn toString < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , string : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonbeforeupdate < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onbeforeupdate < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonafterupdate < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onafterupdate < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonerrorupdate < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onerrorupdate < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonrowexit < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onrowexit < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonrowenter < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onrowenter < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setondatasetchanged < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ondatasetchanged < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setondataavailable < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ondataavailable < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setondatasetcomplete < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ondatasetcomplete < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonfilterchange < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onfilterchange < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn children < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn all < Impl : IHTMLElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , setAttribute : setAttribute :: < Impl , IMPL_OFFSET > , getAttribute : getAttribute :: < Impl , IMPL_OFFSET > , removeAttribute : removeAttribute :: < Impl , IMPL_OFFSET > , SetclassName : SetclassName :: < Impl , IMPL_OFFSET > , className : className :: < Impl , IMPL_OFFSET > , Setid : Setid :: < Impl , IMPL_OFFSET > , id : id :: < Impl , IMPL_OFFSET > , tagName : tagName :: < Impl , IMPL_OFFSET > , parentElement : parentElement :: < Impl , IMPL_OFFSET > , style : style :: < Impl , IMPL_OFFSET > , Setonhelp : Setonhelp :: < Impl , IMPL_OFFSET > , onhelp : onhelp :: < Impl , IMPL_OFFSET > , Setonclick : Setonclick :: < Impl , IMPL_OFFSET > , onclick : onclick :: < Impl , IMPL_OFFSET > , Setondblclick : Setondblclick :: < Impl , IMPL_OFFSET > , ondblclick : ondblclick :: < Impl , IMPL_OFFSET > , Setonkeydown : Setonkeydown :: < Impl , IMPL_OFFSET > , onkeydown : onkeydown :: < Impl , IMPL_OFFSET > , Setonkeyup : Setonkeyup :: < Impl , IMPL_OFFSET > , onkeyup : onkeyup :: < Impl , IMPL_OFFSET > , Setonkeypress : Setonkeypress :: < Impl , IMPL_OFFSET > , onkeypress : onkeypress :: < Impl , IMPL_OFFSET > , Setonmouseout : Setonmouseout :: < Impl , IMPL_OFFSET > , onmouseout : onmouseout :: < Impl , IMPL_OFFSET > , Setonmouseover : Setonmouseover :: < Impl , IMPL_OFFSET > , onmouseover : onmouseover :: < Impl , IMPL_OFFSET > , Setonmousemove : Setonmousemove :: < Impl , IMPL_OFFSET > , onmousemove : onmousemove :: < Impl , IMPL_OFFSET > , Setonmousedown : Setonmousedown :: < Impl , IMPL_OFFSET > , onmousedown : onmousedown :: < Impl , IMPL_OFFSET > , Setonmouseup : Setonmouseup :: < Impl , IMPL_OFFSET > , onmouseup : onmouseup :: < Impl , IMPL_OFFSET > , document : document :: < Impl , IMPL_OFFSET > , Settitle : Settitle :: < Impl , IMPL_OFFSET > , title : title :: < Impl , IMPL_OFFSET > , Setlanguage : Setlanguage :: < Impl , IMPL_OFFSET > , language : language :: < Impl , IMPL_OFFSET > , Setonselectstart : Setonselectstart :: < Impl , IMPL_OFFSET > , onselectstart : onselectstart :: < Impl , IMPL_OFFSET > , scrollIntoView : scrollIntoView :: < Impl , IMPL_OFFSET > , contains : contains :: < Impl , IMPL_OFFSET > , sourceIndex : sourceIndex :: < Impl , IMPL_OFFSET > , recordNumber : recordNumber :: < Impl , IMPL_OFFSET > , Setlang : Setlang :: < Impl , IMPL_OFFSET > , lang : lang :: < Impl , IMPL_OFFSET > , offsetLeft : offsetLeft :: < Impl , IMPL_OFFSET > , offsetTop : offsetTop :: < Impl , IMPL_OFFSET > , offsetWidth : offsetWidth :: < Impl , IMPL_OFFSET > , offsetHeight : offsetHeight :: < Impl , IMPL_OFFSET > , offsetParent : offsetParent :: < Impl , IMPL_OFFSET > , SetinnerHTML : SetinnerHTML :: < Impl , IMPL_OFFSET > , innerHTML : innerHTML :: < Impl , IMPL_OFFSET > , SetinnerText : SetinnerText :: < Impl , IMPL_OFFSET > , innerText : innerText :: < Impl , IMPL_OFFSET > , SetouterHTML : SetouterHTML :: < Impl , IMPL_OFFSET > , outerHTML : outerHTML :: < Impl , IMPL_OFFSET > , SetouterText : SetouterText :: < Impl , IMPL_OFFSET > , outerText : outerText :: < Impl , IMPL_OFFSET > , insertAdjacentHTML : insertAdjacentHTML :: < Impl , IMPL_OFFSET > , insertAdjacentText : insertAdjacentText :: < Impl , IMPL_OFFSET > , parentTextEdit : parentTextEdit :: < Impl , IMPL_OFFSET > , isTextEdit : isTextEdit :: < Impl , IMPL_OFFSET > , click : click :: < Impl , IMPL_OFFSET > , filters : filters :: < Impl , IMPL_OFFSET > , Setondragstart : Setondragstart :: < Impl , IMPL_OFFSET > , ondragstart : ondragstart :: < Impl , IMPL_OFFSET > , toString : toString :: < Impl , IMPL_OFFSET > , Setonbeforeupdate : Setonbeforeupdate :: < Impl , IMPL_OFFSET > , onbeforeupdate : onbeforeupdate :: < Impl , IMPL_OFFSET > , Setonafterupdate : Setonafterupdate :: < Impl , IMPL_OFFSET > , onafterupdate : onafterupdate :: < Impl , IMPL_OFFSET > , Setonerrorupdate : Setonerrorupdate :: < Impl , IMPL_OFFSET > , onerrorupdate : onerrorupdate :: < Impl , IMPL_OFFSET > , Setonrowexit : Setonrowexit :: < Impl , IMPL_OFFSET > , onrowexit : onrowexit :: < Impl , IMPL_OFFSET > , Setonrowenter : Setonrowenter :: < Impl , IMPL_OFFSET > , onrowenter : onrowenter :: < Impl , IMPL_OFFSET > , Setondatasetchanged : Setondatasetchanged :: < Impl , IMPL_OFFSET > , ondatasetchanged : ondatasetchanged :: < Impl , IMPL_OFFSET > , Setondataavailable : Setondataavailable :: < Impl , IMPL_OFFSET > , ondataavailable : ondataavailable :: < Impl , IMPL_OFFSET > , Setondatasetcomplete : Setondatasetcomplete :: < Impl , IMPL_OFFSET > , ondatasetcomplete : ondatasetcomplete :: < Impl , IMPL_OFFSET > , Setonfilterchange : Setonfilterchange :: < Impl , IMPL_OFFSET > , onfilterchange : onfilterchange :: < Impl , IMPL_OFFSET > , children : children :: < Impl , IMPL_OFFSET > , all : all :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLElement2Impl < > : Sized + IDispatchImpl where { fn scopeName ( ) ; fn setCapture ( ) ; fn releaseCapture ( ) ; fn Setonlosecapture ( ) ; fn onlosecapture ( ) ; fn componentFromPoint ( ) ; fn doScroll ( ) ; fn Setonscroll ( ) ; fn onscroll ( ) ; fn Setondrag ( ) ; fn ondrag ( ) ; fn Setondragend ( ) ; fn ondragend ( ) ; fn Setondragenter ( ) ; fn ondragenter ( ) ; fn Setondragover ( ) ; fn ondragover ( ) ; fn Setondragleave ( ) ; fn ondragleave ( ) ; fn Setondrop ( ) ; fn ondrop ( ) ; fn Setonbeforecut ( ) ; fn onbeforecut ( ) ; fn Setoncut ( ) ; fn oncut ( ) ; fn Setonbeforecopy ( ) ; fn onbeforecopy ( ) ; fn Setoncopy ( ) ; fn oncopy ( ) ; fn Setonbeforepaste ( ) ; fn onbeforepaste ( ) ; fn Setonpaste ( ) ; fn onpaste ( ) ; fn currentStyle ( ) ; fn Setonpropertychange ( ) ; fn onpropertychange ( ) ; fn getClientRects ( ) ; fn getBoundingClientRect ( ) ; fn setExpression ( ) ; fn getExpression ( ) ; fn removeExpression ( ) ; fn SettabIndex ( ) ; fn tabIndex ( ) ; fn focus ( ) ; fn SetaccessKey ( ) ; fn accessKey ( ) ; fn Setonblur ( ) ; fn onblur ( ) ; fn Setonfocus ( ) ; fn onfocus ( ) ; fn Setonresize ( ) ; fn onresize ( ) ; fn blur ( ) ; fn addFilter ( ) ; fn removeFilter ( ) ; fn clientHeight ( ) ; fn clientWidth ( ) ; fn clientTop ( ) ; fn clientLeft ( ) ; fn attachEvent ( ) ; fn detachEvent ( ) ; fn readyState ( ) ; fn Setonreadystatechange ( ) ; fn onreadystatechange ( ) ; fn Setonrowsdelete ( ) ; fn onrowsdelete ( ) ; fn Setonrowsinserted ( ) ; fn onrowsinserted ( ) ; fn Setoncellchange ( ) ; fn oncellchange ( ) ; fn Setdir ( ) ; fn dir ( ) ; fn createControlRange ( ) ; fn scrollHeight ( ) ; fn scrollWidth ( ) ; fn SetscrollTop ( ) ; fn scrollTop ( ) ; fn SetscrollLeft ( ) ; fn scrollLeft ( ) ; fn clearAttributes ( ) ; fn mergeAttributes ( ) ; fn Setoncontextmenu ( ) ; fn oncontextmenu ( ) ; fn insertAdjacentElement ( ) ; fn applyElement ( ) ; fn getAdjacentText ( ) ; fn replaceAdjacentText ( ) ; fn canHaveChildren ( ) ; fn addBehavior ( ) ; fn removeBehavior ( ) ; fn runtimeStyle ( ) ; fn behaviorUrns ( ) ; fn SettagUrn ( ) ; fn tagUrn ( ) ; fn Setonbeforeeditfocus ( ) ; fn onbeforeeditfocus ( ) ; fn readyStateValue ( ) ; fn getElementsByTagName ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLElement2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLElement2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLElement2Vtbl < > { unsafe extern "system" fn scopeName < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn setCapture < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , containercapture : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn releaseCapture < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonlosecapture < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onlosecapture < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn componentFromPoint < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , x : i32 , y : i32 , component : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn doScroll < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , component : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonscroll < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onscroll < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setondrag < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ondrag < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setondragend < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ondragend < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setondragenter < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ondragenter < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setondragover < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ondragover < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setondragleave < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ondragleave < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setondrop < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ondrop < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonbeforecut < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onbeforecut < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setoncut < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn oncut < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonbeforecopy < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onbeforecopy < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setoncopy < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn oncopy < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonbeforepaste < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onbeforepaste < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonpaste < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onpaste < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn currentStyle < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonpropertychange < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onpropertychange < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getClientRects < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , prectcol : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getBoundingClientRect < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , prect : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn setExpression < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , propname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , expression : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , language : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getExpression < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , propname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , expression : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn removeExpression < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , propname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pfsuccess : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettabIndex < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn tabIndex < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn focus < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetaccessKey < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn accessKey < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonblur < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onblur < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonfocus < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onfocus < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonresize < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onresize < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn blur < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn addFilter < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punk : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn removeFilter < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punk : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clientHeight < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clientWidth < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clientTop < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clientLeft < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn attachEvent < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , event : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pdisp : :: windows :: core :: RawPtr , pfresult : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn detachEvent < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , event : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pdisp : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn readyState < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonreadystatechange < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onreadystatechange < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonrowsdelete < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onrowsdelete < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonrowsinserted < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onrowsinserted < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setoncellchange < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn oncellchange < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setdir < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn dir < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createControlRange < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , range : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scrollHeight < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scrollWidth < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetscrollTop < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scrollTop < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetscrollLeft < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scrollLeft < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clearAttributes < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn mergeAttributes < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , mergethis : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setoncontextmenu < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn oncontextmenu < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn insertAdjacentElement < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , r#where : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , insertedelement : :: windows :: core :: RawPtr , inserted : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn applyElement < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , apply : :: windows :: core :: RawPtr , r#where : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , applied : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getAdjacentText < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , r#where : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , text : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn replaceAdjacentText < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , r#where : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , newtext : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , oldtext : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn canHaveChildren < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn addBehavior < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrurl : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pvarfactory : * const super::super::System::Com:: VARIANT , pcookie : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn removeBehavior < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cookie : i32 , pfresult : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn runtimeStyle < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn behaviorUrns < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettagUrn < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn tagUrn < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonbeforeeditfocus < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onbeforeeditfocus < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn readyStateValue < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getElementsByTagName < Impl : IHTMLElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pelcoll : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , scopeName : scopeName :: < Impl , IMPL_OFFSET > , setCapture : setCapture :: < Impl , IMPL_OFFSET > , releaseCapture : releaseCapture :: < Impl , IMPL_OFFSET > , Setonlosecapture : Setonlosecapture :: < Impl , IMPL_OFFSET > , onlosecapture : onlosecapture :: < Impl , IMPL_OFFSET > , componentFromPoint : componentFromPoint :: < Impl , IMPL_OFFSET > , doScroll : doScroll :: < Impl , IMPL_OFFSET > , Setonscroll : Setonscroll :: < Impl , IMPL_OFFSET > , onscroll : onscroll :: < Impl , IMPL_OFFSET > , Setondrag : Setondrag :: < Impl , IMPL_OFFSET > , ondrag : ondrag :: < Impl , IMPL_OFFSET > , Setondragend : Setondragend :: < Impl , IMPL_OFFSET > , ondragend : ondragend :: < Impl , IMPL_OFFSET > , Setondragenter : Setondragenter :: < Impl , IMPL_OFFSET > , ondragenter : ondragenter :: < Impl , IMPL_OFFSET > , Setondragover : Setondragover :: < Impl , IMPL_OFFSET > , ondragover : ondragover :: < Impl , IMPL_OFFSET > , Setondragleave : Setondragleave :: < Impl , IMPL_OFFSET > , ondragleave : ondragleave :: < Impl , IMPL_OFFSET > , Setondrop : Setondrop :: < Impl , IMPL_OFFSET > , ondrop : ondrop :: < Impl , IMPL_OFFSET > , Setonbeforecut : Setonbeforecut :: < Impl , IMPL_OFFSET > , onbeforecut : onbeforecut :: < Impl , IMPL_OFFSET > , Setoncut : Setoncut :: < Impl , IMPL_OFFSET > , oncut : oncut :: < Impl , IMPL_OFFSET > , Setonbeforecopy : Setonbeforecopy :: < Impl , IMPL_OFFSET > , onbeforecopy : onbeforecopy :: < Impl , IMPL_OFFSET > , Setoncopy : Setoncopy :: < Impl , IMPL_OFFSET > , oncopy : oncopy :: < Impl , IMPL_OFFSET > , Setonbeforepaste : Setonbeforepaste :: < Impl , IMPL_OFFSET > , onbeforepaste : onbeforepaste :: < Impl , IMPL_OFFSET > , Setonpaste : Setonpaste :: < Impl , IMPL_OFFSET > , onpaste : onpaste :: < Impl , IMPL_OFFSET > , currentStyle : currentStyle :: < Impl , IMPL_OFFSET > , Setonpropertychange : Setonpropertychange :: < Impl , IMPL_OFFSET > , onpropertychange : onpropertychange :: < Impl , IMPL_OFFSET > , getClientRects : getClientRects :: < Impl , IMPL_OFFSET > , getBoundingClientRect : getBoundingClientRect :: < Impl , IMPL_OFFSET > , setExpression : setExpression :: < Impl , IMPL_OFFSET > , getExpression : getExpression :: < Impl , IMPL_OFFSET > , removeExpression : removeExpression :: < Impl , IMPL_OFFSET > , SettabIndex : SettabIndex :: < Impl , IMPL_OFFSET > , tabIndex : tabIndex :: < Impl , IMPL_OFFSET > , focus : focus :: < Impl , IMPL_OFFSET > , SetaccessKey : SetaccessKey :: < Impl , IMPL_OFFSET > , accessKey : accessKey :: < Impl , IMPL_OFFSET > , Setonblur : Setonblur :: < Impl , IMPL_OFFSET > , onblur : onblur :: < Impl , IMPL_OFFSET > , Setonfocus : Setonfocus :: < Impl , IMPL_OFFSET > , onfocus : onfocus :: < Impl , IMPL_OFFSET > , Setonresize : Setonresize :: < Impl , IMPL_OFFSET > , onresize : onresize :: < Impl , IMPL_OFFSET > , blur : blur :: < Impl , IMPL_OFFSET > , addFilter : addFilter :: < Impl , IMPL_OFFSET > , removeFilter : removeFilter :: < Impl , IMPL_OFFSET > , clientHeight : clientHeight :: < Impl , IMPL_OFFSET > , clientWidth : clientWidth :: < Impl , IMPL_OFFSET > , clientTop : clientTop :: < Impl , IMPL_OFFSET > , clientLeft : clientLeft :: < Impl , IMPL_OFFSET > , attachEvent : attachEvent :: < Impl , IMPL_OFFSET > , detachEvent : detachEvent :: < Impl , IMPL_OFFSET > , readyState : readyState :: < Impl , IMPL_OFFSET > , Setonreadystatechange : Setonreadystatechange :: < Impl , IMPL_OFFSET > , onreadystatechange : onreadystatechange :: < Impl , IMPL_OFFSET > , Setonrowsdelete : Setonrowsdelete :: < Impl , IMPL_OFFSET > , onrowsdelete : onrowsdelete :: < Impl , IMPL_OFFSET > , Setonrowsinserted : Setonrowsinserted :: < Impl , IMPL_OFFSET > , onrowsinserted : onrowsinserted :: < Impl , IMPL_OFFSET > , Setoncellchange : Setoncellchange :: < Impl , IMPL_OFFSET > , oncellchange : oncellchange :: < Impl , IMPL_OFFSET > , Setdir : Setdir :: < Impl , IMPL_OFFSET > , dir : dir :: < Impl , IMPL_OFFSET > , createControlRange : createControlRange :: < Impl , IMPL_OFFSET > , scrollHeight : scrollHeight :: < Impl , IMPL_OFFSET > , scrollWidth : scrollWidth :: < Impl , IMPL_OFFSET > , SetscrollTop : SetscrollTop :: < Impl , IMPL_OFFSET > , scrollTop : scrollTop :: < Impl , IMPL_OFFSET > , SetscrollLeft : SetscrollLeft :: < Impl , IMPL_OFFSET > , scrollLeft : scrollLeft :: < Impl , IMPL_OFFSET > , clearAttributes : clearAttributes :: < Impl , IMPL_OFFSET > , mergeAttributes : mergeAttributes :: < Impl , IMPL_OFFSET > , Setoncontextmenu : Setoncontextmenu :: < Impl , IMPL_OFFSET > , oncontextmenu : oncontextmenu :: < Impl , IMPL_OFFSET > , insertAdjacentElement : insertAdjacentElement :: < Impl , IMPL_OFFSET > , applyElement : applyElement :: < Impl , IMPL_OFFSET > , getAdjacentText : getAdjacentText :: < Impl , IMPL_OFFSET > , replaceAdjacentText : replaceAdjacentText :: < Impl , IMPL_OFFSET > , canHaveChildren : canHaveChildren :: < Impl , IMPL_OFFSET > , addBehavior : addBehavior :: < Impl , IMPL_OFFSET > , removeBehavior : removeBehavior :: < Impl , IMPL_OFFSET > , runtimeStyle : runtimeStyle :: < Impl , IMPL_OFFSET > , behaviorUrns : behaviorUrns :: < Impl , IMPL_OFFSET > , SettagUrn : SettagUrn :: < Impl , IMPL_OFFSET > , tagUrn : tagUrn :: < Impl , IMPL_OFFSET > , Setonbeforeeditfocus : Setonbeforeeditfocus :: < Impl , IMPL_OFFSET > , onbeforeeditfocus : onbeforeeditfocus :: < Impl , IMPL_OFFSET > , readyStateValue : readyStateValue :: < Impl , IMPL_OFFSET > , getElementsByTagName : getElementsByTagName :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLElement2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLElement3Impl < > : Sized + IDispatchImpl where { fn mergeAttributes ( ) ; fn isMultiLine ( ) ; fn canHaveHTML ( ) ; fn Setonlayoutcomplete ( ) ; fn onlayoutcomplete ( ) ; fn Setonpage ( ) ; fn onpage ( ) ; fn SetinflateBlock ( ) ; fn inflateBlock ( ) ; fn Setonbeforedeactivate ( ) ; fn onbeforedeactivate ( ) ; fn setActive ( ) ; fn SetcontentEditable ( ) ; fn contentEditable ( ) ; fn isContentEditable ( ) ; fn SethideFocus ( ) ; fn hideFocus ( ) ; fn Setdisabled ( ) ; fn disabled ( ) ; fn isDisabled ( ) ; fn Setonmove ( ) ; fn onmove ( ) ; fn Setoncontrolselect ( ) ; fn oncontrolselect ( ) ; fn fireEvent ( ) ; fn Setonresizestart ( ) ; fn onresizestart ( ) ; fn Setonresizeend ( ) ; fn onresizeend ( ) ; fn Setonmovestart ( ) ; fn onmovestart ( ) ; fn Setonmoveend ( ) ; fn onmoveend ( ) ; fn Setonmouseenter ( ) ; fn onmouseenter ( ) ; fn Setonmouseleave ( ) ; fn onmouseleave ( ) ; fn Setonactivate ( ) ; fn onactivate ( ) ; fn Setondeactivate ( ) ; fn ondeactivate ( ) ; fn dragDrop ( ) ; fn glyphMode ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLElement3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLElement3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLElement3Vtbl < > { unsafe extern "system" fn mergeAttributes < Impl : IHTMLElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , mergethis : :: windows :: core :: RawPtr , pvarflags : * const super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn isMultiLine < Impl : IHTMLElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn canHaveHTML < Impl : IHTMLElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonlayoutcomplete < Impl : IHTMLElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onlayoutcomplete < Impl : IHTMLElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonpage < Impl : IHTMLElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onpage < Impl : IHTMLElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetinflateBlock < Impl : IHTMLElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn inflateBlock < Impl : IHTMLElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonbeforedeactivate < Impl : IHTMLElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onbeforedeactivate < Impl : IHTMLElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn setActive < Impl : IHTMLElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetcontentEditable < Impl : IHTMLElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn contentEditable < Impl : IHTMLElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn isContentEditable < Impl : IHTMLElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SethideFocus < Impl : IHTMLElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn hideFocus < Impl : IHTMLElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setdisabled < Impl : IHTMLElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn disabled < Impl : IHTMLElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn isDisabled < Impl : IHTMLElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmove < Impl : IHTMLElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmove < Impl : IHTMLElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setoncontrolselect < Impl : IHTMLElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn oncontrolselect < Impl : IHTMLElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn fireEvent < Impl : IHTMLElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstreventname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pvareventobject : * const super::super::System::Com:: VARIANT , pfcancelled : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonresizestart < Impl : IHTMLElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onresizestart < Impl : IHTMLElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonresizeend < Impl : IHTMLElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onresizeend < Impl : IHTMLElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmovestart < Impl : IHTMLElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmovestart < Impl : IHTMLElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmoveend < Impl : IHTMLElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmoveend < Impl : IHTMLElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmouseenter < Impl : IHTMLElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmouseenter < Impl : IHTMLElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmouseleave < Impl : IHTMLElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmouseleave < Impl : IHTMLElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonactivate < Impl : IHTMLElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onactivate < Impl : IHTMLElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setondeactivate < Impl : IHTMLElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ondeactivate < Impl : IHTMLElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn dragDrop < Impl : IHTMLElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfret : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn glyphMode < Impl : IHTMLElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , mergeAttributes : mergeAttributes :: < Impl , IMPL_OFFSET > , isMultiLine : isMultiLine :: < Impl , IMPL_OFFSET > , canHaveHTML : canHaveHTML :: < Impl , IMPL_OFFSET > , Setonlayoutcomplete : Setonlayoutcomplete :: < Impl , IMPL_OFFSET > , onlayoutcomplete : onlayoutcomplete :: < Impl , IMPL_OFFSET > , Setonpage : Setonpage :: < Impl , IMPL_OFFSET > , onpage : onpage :: < Impl , IMPL_OFFSET > , SetinflateBlock : SetinflateBlock :: < Impl , IMPL_OFFSET > , inflateBlock : inflateBlock :: < Impl , IMPL_OFFSET > , Setonbeforedeactivate : Setonbeforedeactivate :: < Impl , IMPL_OFFSET > , onbeforedeactivate : onbeforedeactivate :: < Impl , IMPL_OFFSET > , setActive : setActive :: < Impl , IMPL_OFFSET > , SetcontentEditable : SetcontentEditable :: < Impl , IMPL_OFFSET > , contentEditable : contentEditable :: < Impl , IMPL_OFFSET > , isContentEditable : isContentEditable :: < Impl , IMPL_OFFSET > , SethideFocus : SethideFocus :: < Impl , IMPL_OFFSET > , hideFocus : hideFocus :: < Impl , IMPL_OFFSET > , Setdisabled : Setdisabled :: < Impl , IMPL_OFFSET > , disabled : disabled :: < Impl , IMPL_OFFSET > , isDisabled : isDisabled :: < Impl , IMPL_OFFSET > , Setonmove : Setonmove :: < Impl , IMPL_OFFSET > , onmove : onmove :: < Impl , IMPL_OFFSET > , Setoncontrolselect : Setoncontrolselect :: < Impl , IMPL_OFFSET > , oncontrolselect : oncontrolselect :: < Impl , IMPL_OFFSET > , fireEvent : fireEvent :: < Impl , IMPL_OFFSET > , Setonresizestart : Setonresizestart :: < Impl , IMPL_OFFSET > , onresizestart : onresizestart :: < Impl , IMPL_OFFSET > , Setonresizeend : Setonresizeend :: < Impl , IMPL_OFFSET > , onresizeend : onresizeend :: < Impl , IMPL_OFFSET > , Setonmovestart : Setonmovestart :: < Impl , IMPL_OFFSET > , onmovestart : onmovestart :: < Impl , IMPL_OFFSET > , Setonmoveend : Setonmoveend :: < Impl , IMPL_OFFSET > , onmoveend : onmoveend :: < Impl , IMPL_OFFSET > , Setonmouseenter : Setonmouseenter :: < Impl , IMPL_OFFSET > , onmouseenter : onmouseenter :: < Impl , IMPL_OFFSET > , Setonmouseleave : Setonmouseleave :: < Impl , IMPL_OFFSET > , onmouseleave : onmouseleave :: < Impl , IMPL_OFFSET > , Setonactivate : Setonactivate :: < Impl , IMPL_OFFSET > , onactivate : onactivate :: < Impl , IMPL_OFFSET > , Setondeactivate : Setondeactivate :: < Impl , IMPL_OFFSET > , ondeactivate : ondeactivate :: < Impl , IMPL_OFFSET > , dragDrop : dragDrop :: < Impl , IMPL_OFFSET > , glyphMode : glyphMode :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLElement3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLElement4Impl < > : Sized + IDispatchImpl where { fn Setonmousewheel ( ) ; fn onmousewheel ( ) ; fn normalize ( ) ; fn getAttributeNode ( ) ; fn setAttributeNode ( ) ; fn removeAttributeNode ( ) ; fn Setonbeforeactivate ( ) ; fn onbeforeactivate ( ) ; fn Setonfocusin ( ) ; fn onfocusin ( ) ; fn Setonfocusout ( ) ; fn onfocusout ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLElement4Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLElement4Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLElement4Vtbl < > { unsafe extern "system" fn Setonmousewheel < Impl : IHTMLElement4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmousewheel < Impl : IHTMLElement4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn normalize < Impl : IHTMLElement4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getAttributeNode < Impl : IHTMLElement4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ppattribute : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn setAttributeNode < Impl : IHTMLElement4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pattr : :: windows :: core :: RawPtr , ppretattribute : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn removeAttributeNode < Impl : IHTMLElement4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pattr : :: windows :: core :: RawPtr , ppretattribute : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonbeforeactivate < Impl : IHTMLElement4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onbeforeactivate < Impl : IHTMLElement4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonfocusin < Impl : IHTMLElement4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onfocusin < Impl : IHTMLElement4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonfocusout < Impl : IHTMLElement4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onfocusout < Impl : IHTMLElement4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setonmousewheel : Setonmousewheel :: < Impl , IMPL_OFFSET > , onmousewheel : onmousewheel :: < Impl , IMPL_OFFSET > , normalize : normalize :: < Impl , IMPL_OFFSET > , getAttributeNode : getAttributeNode :: < Impl , IMPL_OFFSET > , setAttributeNode : setAttributeNode :: < Impl , IMPL_OFFSET > , removeAttributeNode : removeAttributeNode :: < Impl , IMPL_OFFSET > , Setonbeforeactivate : Setonbeforeactivate :: < Impl , IMPL_OFFSET > , onbeforeactivate : onbeforeactivate :: < Impl , IMPL_OFFSET > , Setonfocusin : Setonfocusin :: < Impl , IMPL_OFFSET > , onfocusin : onfocusin :: < Impl , IMPL_OFFSET > , Setonfocusout : Setonfocusout :: < Impl , IMPL_OFFSET > , onfocusout : onfocusout :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLElement4 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLElement5Impl < > : Sized + IDispatchImpl where { fn getAttributeNode ( ) ; fn setAttributeNode ( ) ; fn removeAttributeNode ( ) ; fn hasAttribute ( ) ; fn Setrole ( ) ; fn role ( ) ; fn SetariaBusy ( ) ; fn ariaBusy ( ) ; fn SetariaChecked ( ) ; fn ariaChecked ( ) ; fn SetariaDisabled ( ) ; fn ariaDisabled ( ) ; fn SetariaExpanded ( ) ; fn ariaExpanded ( ) ; fn SetariaHaspopup ( ) ; fn ariaHaspopup ( ) ; fn SetariaHidden ( ) ; fn ariaHidden ( ) ; fn SetariaInvalid ( ) ; fn ariaInvalid ( ) ; fn SetariaMultiselectable ( ) ; fn ariaMultiselectable ( ) ; fn SetariaPressed ( ) ; fn ariaPressed ( ) ; fn SetariaReadonly ( ) ; fn ariaReadonly ( ) ; fn SetariaRequired ( ) ; fn ariaRequired ( ) ; fn SetariaSecret ( ) ; fn ariaSecret ( ) ; fn SetariaSelected ( ) ; fn ariaSelected ( ) ; fn getAttribute ( ) ; fn setAttribute ( ) ; fn removeAttribute ( ) ; fn attributes ( ) ; fn SetariaValuenow ( ) ; fn ariaValuenow ( ) ; fn SetariaPosinset ( ) ; fn ariaPosinset ( ) ; fn SetariaSetsize ( ) ; fn ariaSetsize ( ) ; fn SetariaLevel ( ) ; fn ariaLevel ( ) ; fn SetariaValuemin ( ) ; fn ariaValuemin ( ) ; fn SetariaValuemax ( ) ; fn ariaValuemax ( ) ; fn SetariaControls ( ) ; fn ariaControls ( ) ; fn SetariaDescribedby ( ) ; fn ariaDescribedby ( ) ; fn SetariaFlowto ( ) ; fn ariaFlowto ( ) ; fn SetariaLabelledby ( ) ; fn ariaLabelledby ( ) ; fn SetariaActivedescendant ( ) ; fn ariaActivedescendant ( ) ; fn SetariaOwns ( ) ; fn ariaOwns ( ) ; fn hasAttributes ( ) ; fn SetariaLive ( ) ; fn ariaLive ( ) ; fn SetariaRelevant ( ) ; fn ariaRelevant ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLElement5Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLElement5Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLElement5Vtbl < > { unsafe extern "system" fn getAttributeNode < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ppretattribute : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn setAttributeNode < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pattr : :: windows :: core :: RawPtr , ppretattribute : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn removeAttributeNode < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pattr : :: windows :: core :: RawPtr , ppretattribute : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn hasAttribute < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , name : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pfhasattribute : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setrole < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn role < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetariaBusy < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ariaBusy < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetariaChecked < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ariaChecked < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetariaDisabled < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ariaDisabled < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetariaExpanded < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ariaExpanded < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetariaHaspopup < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ariaHaspopup < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetariaHidden < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ariaHidden < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetariaInvalid < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ariaInvalid < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetariaMultiselectable < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ariaMultiselectable < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetariaPressed < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ariaPressed < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetariaReadonly < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ariaReadonly < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetariaRequired < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ariaRequired < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetariaSecret < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ariaSecret < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetariaSelected < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ariaSelected < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getAttribute < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , strattributename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , attributevalue : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn setAttribute < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , strattributename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , attributevalue : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn removeAttribute < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , strattributename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pfsuccess : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn attributes < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetariaValuenow < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ariaValuenow < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetariaPosinset < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ariaPosinset < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetariaSetsize < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ariaSetsize < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetariaLevel < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ariaLevel < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetariaValuemin < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ariaValuemin < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetariaValuemax < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ariaValuemax < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetariaControls < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ariaControls < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetariaDescribedby < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ariaDescribedby < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetariaFlowto < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ariaFlowto < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetariaLabelledby < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ariaLabelledby < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetariaActivedescendant < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ariaActivedescendant < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetariaOwns < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ariaOwns < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn hasAttributes < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfhasattributes : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetariaLive < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ariaLive < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetariaRelevant < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ariaRelevant < Impl : IHTMLElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , getAttributeNode : getAttributeNode :: < Impl , IMPL_OFFSET > , setAttributeNode : setAttributeNode :: < Impl , IMPL_OFFSET > , removeAttributeNode : removeAttributeNode :: < Impl , IMPL_OFFSET > , hasAttribute : hasAttribute :: < Impl , IMPL_OFFSET > , Setrole : Setrole :: < Impl , IMPL_OFFSET > , role : role :: < Impl , IMPL_OFFSET > , SetariaBusy : SetariaBusy :: < Impl , IMPL_OFFSET > , ariaBusy : ariaBusy :: < Impl , IMPL_OFFSET > , SetariaChecked : SetariaChecked :: < Impl , IMPL_OFFSET > , ariaChecked : ariaChecked :: < Impl , IMPL_OFFSET > , SetariaDisabled : SetariaDisabled :: < Impl , IMPL_OFFSET > , ariaDisabled : ariaDisabled :: < Impl , IMPL_OFFSET > , SetariaExpanded : SetariaExpanded :: < Impl , IMPL_OFFSET > , ariaExpanded : ariaExpanded :: < Impl , IMPL_OFFSET > , SetariaHaspopup : SetariaHaspopup :: < Impl , IMPL_OFFSET > , ariaHaspopup : ariaHaspopup :: < Impl , IMPL_OFFSET > , SetariaHidden : SetariaHidden :: < Impl , IMPL_OFFSET > , ariaHidden : ariaHidden :: < Impl , IMPL_OFFSET > , SetariaInvalid : SetariaInvalid :: < Impl , IMPL_OFFSET > , ariaInvalid : ariaInvalid :: < Impl , IMPL_OFFSET > , SetariaMultiselectable : SetariaMultiselectable :: < Impl , IMPL_OFFSET > , ariaMultiselectable : ariaMultiselectable :: < Impl , IMPL_OFFSET > , SetariaPressed : SetariaPressed :: < Impl , IMPL_OFFSET > , ariaPressed : ariaPressed :: < Impl , IMPL_OFFSET > , SetariaReadonly : SetariaReadonly :: < Impl , IMPL_OFFSET > , ariaReadonly : ariaReadonly :: < Impl , IMPL_OFFSET > , SetariaRequired : SetariaRequired :: < Impl , IMPL_OFFSET > , ariaRequired : ariaRequired :: < Impl , IMPL_OFFSET > , SetariaSecret : SetariaSecret :: < Impl , IMPL_OFFSET > , ariaSecret : ariaSecret :: < Impl , IMPL_OFFSET > , SetariaSelected : SetariaSelected :: < Impl , IMPL_OFFSET > , ariaSelected : ariaSelected :: < Impl , IMPL_OFFSET > , getAttribute : getAttribute :: < Impl , IMPL_OFFSET > , setAttribute : setAttribute :: < Impl , IMPL_OFFSET > , removeAttribute : removeAttribute :: < Impl , IMPL_OFFSET > , attributes : attributes :: < Impl , IMPL_OFFSET > , SetariaValuenow : SetariaValuenow :: < Impl , IMPL_OFFSET > , ariaValuenow : ariaValuenow :: < Impl , IMPL_OFFSET > , SetariaPosinset : SetariaPosinset :: < Impl , IMPL_OFFSET > , ariaPosinset : ariaPosinset :: < Impl , IMPL_OFFSET > , SetariaSetsize : SetariaSetsize :: < Impl , IMPL_OFFSET > , ariaSetsize : ariaSetsize :: < Impl , IMPL_OFFSET > , SetariaLevel : SetariaLevel :: < Impl , IMPL_OFFSET > , ariaLevel : ariaLevel :: < Impl , IMPL_OFFSET > , SetariaValuemin : SetariaValuemin :: < Impl , IMPL_OFFSET > , ariaValuemin : ariaValuemin :: < Impl , IMPL_OFFSET > , SetariaValuemax : SetariaValuemax :: < Impl , IMPL_OFFSET > , ariaValuemax : ariaValuemax :: < Impl , IMPL_OFFSET > , SetariaControls : SetariaControls :: < Impl , IMPL_OFFSET > , ariaControls : ariaControls :: < Impl , IMPL_OFFSET > , SetariaDescribedby : SetariaDescribedby :: < Impl , IMPL_OFFSET > , ariaDescribedby : ariaDescribedby :: < Impl , IMPL_OFFSET > , SetariaFlowto : SetariaFlowto :: < Impl , IMPL_OFFSET > , ariaFlowto : ariaFlowto :: < Impl , IMPL_OFFSET > , SetariaLabelledby : SetariaLabelledby :: < Impl , IMPL_OFFSET > , ariaLabelledby : ariaLabelledby :: < Impl , IMPL_OFFSET > , SetariaActivedescendant : SetariaActivedescendant :: < Impl , IMPL_OFFSET > , ariaActivedescendant : ariaActivedescendant :: < Impl , IMPL_OFFSET > , SetariaOwns : SetariaOwns :: < Impl , IMPL_OFFSET > , ariaOwns : ariaOwns :: < Impl , IMPL_OFFSET > , hasAttributes : hasAttributes :: < Impl , IMPL_OFFSET > , SetariaLive : SetariaLive :: < Impl , IMPL_OFFSET > , ariaLive : ariaLive :: < Impl , IMPL_OFFSET > , SetariaRelevant : SetariaRelevant :: < Impl , IMPL_OFFSET > , ariaRelevant : ariaRelevant :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLElement5 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLElement6Impl < > : Sized + IDispatchImpl where { fn getAttributeNS ( ) ; fn setAttributeNS ( ) ; fn removeAttributeNS ( ) ; fn getAttributeNodeNS ( ) ; fn setAttributeNodeNS ( ) ; fn hasAttributeNS ( ) ; fn getAttribute ( ) ; fn setAttribute ( ) ; fn removeAttribute ( ) ; fn getAttributeNode ( ) ; fn setAttributeNode ( ) ; fn removeAttributeNode ( ) ; fn hasAttribute ( ) ; fn getElementsByTagNameNS ( ) ; fn tagName ( ) ; fn nodeName ( ) ; fn getElementsByClassName ( ) ; fn msMatchesSelector ( ) ; fn Setonabort ( ) ; fn onabort ( ) ; fn Setoncanplay ( ) ; fn oncanplay ( ) ; fn Setoncanplaythrough ( ) ; fn oncanplaythrough ( ) ; fn Setonchange ( ) ; fn onchange ( ) ; fn Setondurationchange ( ) ; fn ondurationchange ( ) ; fn Setonemptied ( ) ; fn onemptied ( ) ; fn Setonended ( ) ; fn onended ( ) ; fn Setonerror ( ) ; fn onerror ( ) ; fn Setoninput ( ) ; fn oninput ( ) ; fn Setonload ( ) ; fn onload ( ) ; fn Setonloadeddata ( ) ; fn onloadeddata ( ) ; fn Setonloadedmetadata ( ) ; fn onloadedmetadata ( ) ; fn Setonloadstart ( ) ; fn onloadstart ( ) ; fn Setonpause ( ) ; fn onpause ( ) ; fn Setonplay ( ) ; fn onplay ( ) ; fn Setonplaying ( ) ; fn onplaying ( ) ; fn Setonprogress ( ) ; fn onprogress ( ) ; fn Setonratechange ( ) ; fn onratechange ( ) ; fn Setonreset ( ) ; fn onreset ( ) ; fn Setonseeked ( ) ; fn onseeked ( ) ; fn Setonseeking ( ) ; fn onseeking ( ) ; fn Setonselect ( ) ; fn onselect ( ) ; fn Setonstalled ( ) ; fn onstalled ( ) ; fn Setonsubmit ( ) ; fn onsubmit ( ) ; fn Setonsuspend ( ) ; fn onsuspend ( ) ; fn Setontimeupdate ( ) ; fn ontimeupdate ( ) ; fn Setonvolumechange ( ) ; fn onvolumechange ( ) ; fn Setonwaiting ( ) ; fn onwaiting ( ) ; fn hasAttributes ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLElement6Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLElement6Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLElement6Vtbl < > { unsafe extern "system" fn getAttributeNS < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarns : * const super::super::System::Com:: VARIANT , strattributename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , attributevalue : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn setAttributeNS < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarns : * const super::super::System::Com:: VARIANT , strattributename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pvarattributevalue : * const super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn removeAttributeNS < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarns : * const super::super::System::Com:: VARIANT , strattributename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getAttributeNodeNS < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarns : * const super::super::System::Com:: VARIANT , bstrname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ppretattribute : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn setAttributeNodeNS < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pattr : :: windows :: core :: RawPtr , ppretattribute : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn hasAttributeNS < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarns : * const super::super::System::Com:: VARIANT , name : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pfhasattribute : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getAttribute < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , strattributename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , attributevalue : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn setAttribute < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , strattributename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pvarattributevalue : * const super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn removeAttribute < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , strattributename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getAttributeNode < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , strattributename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ppretattribute : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn setAttributeNode < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pattr : :: windows :: core :: RawPtr , ppretattribute : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn removeAttributeNode < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pattr : :: windows :: core :: RawPtr , ppretattribute : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn hasAttribute < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , name : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pfhasattribute : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getElementsByTagNameNS < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varns : * const super::super::System::Com:: VARIANT , bstrlocalname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pelcoll : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn tagName < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn nodeName < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getElementsByClassName < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pel : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msMatchesSelector < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pfmatches : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonabort < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onabort < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setoncanplay < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn oncanplay < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setoncanplaythrough < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn oncanplaythrough < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonchange < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onchange < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setondurationchange < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ondurationchange < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonemptied < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onemptied < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonended < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onended < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonerror < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onerror < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setoninput < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn oninput < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonload < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onload < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonloadeddata < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onloadeddata < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonloadedmetadata < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onloadedmetadata < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonloadstart < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onloadstart < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonpause < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onpause < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonplay < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onplay < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonplaying < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onplaying < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonprogress < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onprogress < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonratechange < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onratechange < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonreset < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onreset < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonseeked < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onseeked < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonseeking < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onseeking < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonselect < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onselect < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonstalled < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onstalled < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonsubmit < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onsubmit < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonsuspend < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onsuspend < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setontimeupdate < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ontimeupdate < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonvolumechange < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onvolumechange < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonwaiting < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onwaiting < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn hasAttributes < Impl : IHTMLElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfhasattributes : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , getAttributeNS : getAttributeNS :: < Impl , IMPL_OFFSET > , setAttributeNS : setAttributeNS :: < Impl , IMPL_OFFSET > , removeAttributeNS : removeAttributeNS :: < Impl , IMPL_OFFSET > , getAttributeNodeNS : getAttributeNodeNS :: < Impl , IMPL_OFFSET > , setAttributeNodeNS : setAttributeNodeNS :: < Impl , IMPL_OFFSET > , hasAttributeNS : hasAttributeNS :: < Impl , IMPL_OFFSET > , getAttribute : getAttribute :: < Impl , IMPL_OFFSET > , setAttribute : setAttribute :: < Impl , IMPL_OFFSET > , removeAttribute : removeAttribute :: < Impl , IMPL_OFFSET > , getAttributeNode : getAttributeNode :: < Impl , IMPL_OFFSET > , setAttributeNode : setAttributeNode :: < Impl , IMPL_OFFSET > , removeAttributeNode : removeAttributeNode :: < Impl , IMPL_OFFSET > , hasAttribute : hasAttribute :: < Impl , IMPL_OFFSET > , getElementsByTagNameNS : getElementsByTagNameNS :: < Impl , IMPL_OFFSET > , tagName : tagName :: < Impl , IMPL_OFFSET > , nodeName : nodeName :: < Impl , IMPL_OFFSET > , getElementsByClassName : getElementsByClassName :: < Impl , IMPL_OFFSET > , msMatchesSelector : msMatchesSelector :: < Impl , IMPL_OFFSET > , Setonabort : Setonabort :: < Impl , IMPL_OFFSET > , onabort : onabort :: < Impl , IMPL_OFFSET > , Setoncanplay : Setoncanplay :: < Impl , IMPL_OFFSET > , oncanplay : oncanplay :: < Impl , IMPL_OFFSET > , Setoncanplaythrough : Setoncanplaythrough :: < Impl , IMPL_OFFSET > , oncanplaythrough : oncanplaythrough :: < Impl , IMPL_OFFSET > , Setonchange : Setonchange :: < Impl , IMPL_OFFSET > , onchange : onchange :: < Impl , IMPL_OFFSET > , Setondurationchange : Setondurationchange :: < Impl , IMPL_OFFSET > , ondurationchange : ondurationchange :: < Impl , IMPL_OFFSET > , Setonemptied : Setonemptied :: < Impl , IMPL_OFFSET > , onemptied : onemptied :: < Impl , IMPL_OFFSET > , Setonended : Setonended :: < Impl , IMPL_OFFSET > , onended : onended :: < Impl , IMPL_OFFSET > , Setonerror : Setonerror :: < Impl , IMPL_OFFSET > , onerror : onerror :: < Impl , IMPL_OFFSET > , Setoninput : Setoninput :: < Impl , IMPL_OFFSET > , oninput : oninput :: < Impl , IMPL_OFFSET > , Setonload : Setonload :: < Impl , IMPL_OFFSET > , onload : onload :: < Impl , IMPL_OFFSET > , Setonloadeddata : Setonloadeddata :: < Impl , IMPL_OFFSET > , onloadeddata : onloadeddata :: < Impl , IMPL_OFFSET > , Setonloadedmetadata : Setonloadedmetadata :: < Impl , IMPL_OFFSET > , onloadedmetadata : onloadedmetadata :: < Impl , IMPL_OFFSET > , Setonloadstart : Setonloadstart :: < Impl , IMPL_OFFSET > , onloadstart : onloadstart :: < Impl , IMPL_OFFSET > , Setonpause : Setonpause :: < Impl , IMPL_OFFSET > , onpause : onpause :: < Impl , IMPL_OFFSET > , Setonplay : Setonplay :: < Impl , IMPL_OFFSET > , onplay : onplay :: < Impl , IMPL_OFFSET > , Setonplaying : Setonplaying :: < Impl , IMPL_OFFSET > , onplaying : onplaying :: < Impl , IMPL_OFFSET > , Setonprogress : Setonprogress :: < Impl , IMPL_OFFSET > , onprogress : onprogress :: < Impl , IMPL_OFFSET > , Setonratechange : Setonratechange :: < Impl , IMPL_OFFSET > , onratechange : onratechange :: < Impl , IMPL_OFFSET > , Setonreset : Setonreset :: < Impl , IMPL_OFFSET > , onreset : onreset :: < Impl , IMPL_OFFSET > , Setonseeked : Setonseeked :: < Impl , IMPL_OFFSET > , onseeked : onseeked :: < Impl , IMPL_OFFSET > , Setonseeking : Setonseeking :: < Impl , IMPL_OFFSET > , onseeking : onseeking :: < Impl , IMPL_OFFSET > , Setonselect : Setonselect :: < Impl , IMPL_OFFSET > , onselect : onselect :: < Impl , IMPL_OFFSET > , Setonstalled : Setonstalled :: < Impl , IMPL_OFFSET > , onstalled : onstalled :: < Impl , IMPL_OFFSET > , Setonsubmit : Setonsubmit :: < Impl , IMPL_OFFSET > , onsubmit : onsubmit :: < Impl , IMPL_OFFSET > , Setonsuspend : Setonsuspend :: < Impl , IMPL_OFFSET > , onsuspend : onsuspend :: < Impl , IMPL_OFFSET > , Setontimeupdate : Setontimeupdate :: < Impl , IMPL_OFFSET > , ontimeupdate : ontimeupdate :: < Impl , IMPL_OFFSET > , Setonvolumechange : Setonvolumechange :: < Impl , IMPL_OFFSET > , onvolumechange : onvolumechange :: < Impl , IMPL_OFFSET > , Setonwaiting : Setonwaiting :: < Impl , IMPL_OFFSET > , onwaiting : onwaiting :: < Impl , IMPL_OFFSET > , hasAttributes : hasAttributes :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLElement6 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLElement7Impl < > : Sized + IDispatchImpl where { fn Setonmspointerdown ( ) ; fn onmspointerdown ( ) ; fn Setonmspointermove ( ) ; fn onmspointermove ( ) ; fn Setonmspointerup ( ) ; fn onmspointerup ( ) ; fn Setonmspointerover ( ) ; fn onmspointerover ( ) ; fn Setonmspointerout ( ) ; fn onmspointerout ( ) ; fn Setonmspointercancel ( ) ; fn onmspointercancel ( ) ; fn Setonmspointerhover ( ) ; fn onmspointerhover ( ) ; fn Setonmslostpointercapture ( ) ; fn onmslostpointercapture ( ) ; fn Setonmsgotpointercapture ( ) ; fn onmsgotpointercapture ( ) ; fn Setonmsgesturestart ( ) ; fn onmsgesturestart ( ) ; fn Setonmsgesturechange ( ) ; fn onmsgesturechange ( ) ; fn Setonmsgestureend ( ) ; fn onmsgestureend ( ) ; fn Setonmsgesturehold ( ) ; fn onmsgesturehold ( ) ; fn Setonmsgesturetap ( ) ; fn onmsgesturetap ( ) ; fn Setonmsgesturedoubletap ( ) ; fn onmsgesturedoubletap ( ) ; fn Setonmsinertiastart ( ) ; fn onmsinertiastart ( ) ; fn msSetPointerCapture ( ) ; fn msReleasePointerCapture ( ) ; fn Setonmstransitionstart ( ) ; fn onmstransitionstart ( ) ; fn Setonmstransitionend ( ) ; fn onmstransitionend ( ) ; fn Setonmsanimationstart ( ) ; fn onmsanimationstart ( ) ; fn Setonmsanimationend ( ) ; fn onmsanimationend ( ) ; fn Setonmsanimationiteration ( ) ; fn onmsanimationiteration ( ) ; fn Setoninvalid ( ) ; fn oninvalid ( ) ; fn SetxmsAcceleratorKey ( ) ; fn xmsAcceleratorKey ( ) ; fn Setspellcheck ( ) ; fn spellcheck ( ) ; fn Setonmsmanipulationstatechanged ( ) ; fn onmsmanipulationstatechanged ( ) ; fn Setoncuechange ( ) ; fn oncuechange ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLElement7Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLElement7Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLElement7Vtbl < > { unsafe extern "system" fn Setonmspointerdown < Impl : IHTMLElement7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmspointerdown < Impl : IHTMLElement7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmspointermove < Impl : IHTMLElement7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmspointermove < Impl : IHTMLElement7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmspointerup < Impl : IHTMLElement7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmspointerup < Impl : IHTMLElement7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmspointerover < Impl : IHTMLElement7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmspointerover < Impl : IHTMLElement7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmspointerout < Impl : IHTMLElement7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmspointerout < Impl : IHTMLElement7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmspointercancel < Impl : IHTMLElement7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmspointercancel < Impl : IHTMLElement7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmspointerhover < Impl : IHTMLElement7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmspointerhover < Impl : IHTMLElement7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmslostpointercapture < Impl : IHTMLElement7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmslostpointercapture < Impl : IHTMLElement7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmsgotpointercapture < Impl : IHTMLElement7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmsgotpointercapture < Impl : IHTMLElement7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmsgesturestart < Impl : IHTMLElement7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmsgesturestart < Impl : IHTMLElement7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmsgesturechange < Impl : IHTMLElement7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmsgesturechange < Impl : IHTMLElement7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmsgestureend < Impl : IHTMLElement7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmsgestureend < Impl : IHTMLElement7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmsgesturehold < Impl : IHTMLElement7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmsgesturehold < Impl : IHTMLElement7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmsgesturetap < Impl : IHTMLElement7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmsgesturetap < Impl : IHTMLElement7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmsgesturedoubletap < Impl : IHTMLElement7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmsgesturedoubletap < Impl : IHTMLElement7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmsinertiastart < Impl : IHTMLElement7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmsinertiastart < Impl : IHTMLElement7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msSetPointerCapture < Impl : IHTMLElement7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pointerid : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msReleasePointerCapture < Impl : IHTMLElement7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pointerid : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmstransitionstart < Impl : IHTMLElement7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmstransitionstart < Impl : IHTMLElement7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmstransitionend < Impl : IHTMLElement7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmstransitionend < Impl : IHTMLElement7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmsanimationstart < Impl : IHTMLElement7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmsanimationstart < Impl : IHTMLElement7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmsanimationend < Impl : IHTMLElement7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmsanimationend < Impl : IHTMLElement7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmsanimationiteration < Impl : IHTMLElement7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmsanimationiteration < Impl : IHTMLElement7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setoninvalid < Impl : IHTMLElement7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn oninvalid < Impl : IHTMLElement7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetxmsAcceleratorKey < Impl : IHTMLElement7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn xmsAcceleratorKey < Impl : IHTMLElement7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setspellcheck < Impl : IHTMLElement7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn spellcheck < Impl : IHTMLElement7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmsmanipulationstatechanged < Impl : IHTMLElement7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmsmanipulationstatechanged < Impl : IHTMLElement7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setoncuechange < Impl : IHTMLElement7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn oncuechange < Impl : IHTMLElement7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setonmspointerdown : Setonmspointerdown :: < Impl , IMPL_OFFSET > , onmspointerdown : onmspointerdown :: < Impl , IMPL_OFFSET > , Setonmspointermove : Setonmspointermove :: < Impl , IMPL_OFFSET > , onmspointermove : onmspointermove :: < Impl , IMPL_OFFSET > , Setonmspointerup : Setonmspointerup :: < Impl , IMPL_OFFSET > , onmspointerup : onmspointerup :: < Impl , IMPL_OFFSET > , Setonmspointerover : Setonmspointerover :: < Impl , IMPL_OFFSET > , onmspointerover : onmspointerover :: < Impl , IMPL_OFFSET > , Setonmspointerout : Setonmspointerout :: < Impl , IMPL_OFFSET > , onmspointerout : onmspointerout :: < Impl , IMPL_OFFSET > , Setonmspointercancel : Setonmspointercancel :: < Impl , IMPL_OFFSET > , onmspointercancel : onmspointercancel :: < Impl , IMPL_OFFSET > , Setonmspointerhover : Setonmspointerhover :: < Impl , IMPL_OFFSET > , onmspointerhover : onmspointerhover :: < Impl , IMPL_OFFSET > , Setonmslostpointercapture : Setonmslostpointercapture :: < Impl , IMPL_OFFSET > , onmslostpointercapture : onmslostpointercapture :: < Impl , IMPL_OFFSET > , Setonmsgotpointercapture : Setonmsgotpointercapture :: < Impl , IMPL_OFFSET > , onmsgotpointercapture : onmsgotpointercapture :: < Impl , IMPL_OFFSET > , Setonmsgesturestart : Setonmsgesturestart :: < Impl , IMPL_OFFSET > , onmsgesturestart : onmsgesturestart :: < Impl , IMPL_OFFSET > , Setonmsgesturechange : Setonmsgesturechange :: < Impl , IMPL_OFFSET > , onmsgesturechange : onmsgesturechange :: < Impl , IMPL_OFFSET > , Setonmsgestureend : Setonmsgestureend :: < Impl , IMPL_OFFSET > , onmsgestureend : onmsgestureend :: < Impl , IMPL_OFFSET > , Setonmsgesturehold : Setonmsgesturehold :: < Impl , IMPL_OFFSET > , onmsgesturehold : onmsgesturehold :: < Impl , IMPL_OFFSET > , Setonmsgesturetap : Setonmsgesturetap :: < Impl , IMPL_OFFSET > , onmsgesturetap : onmsgesturetap :: < Impl , IMPL_OFFSET > , Setonmsgesturedoubletap : Setonmsgesturedoubletap :: < Impl , IMPL_OFFSET > , onmsgesturedoubletap : onmsgesturedoubletap :: < Impl , IMPL_OFFSET > , Setonmsinertiastart : Setonmsinertiastart :: < Impl , IMPL_OFFSET > , onmsinertiastart : onmsinertiastart :: < Impl , IMPL_OFFSET > , msSetPointerCapture : msSetPointerCapture :: < Impl , IMPL_OFFSET > , msReleasePointerCapture : msReleasePointerCapture :: < Impl , IMPL_OFFSET > , Setonmstransitionstart : Setonmstransitionstart :: < Impl , IMPL_OFFSET > , onmstransitionstart : onmstransitionstart :: < Impl , IMPL_OFFSET > , Setonmstransitionend : Setonmstransitionend :: < Impl , IMPL_OFFSET > , onmstransitionend : onmstransitionend :: < Impl , IMPL_OFFSET > , Setonmsanimationstart : Setonmsanimationstart :: < Impl , IMPL_OFFSET > , onmsanimationstart : onmsanimationstart :: < Impl , IMPL_OFFSET > , Setonmsanimationend : Setonmsanimationend :: < Impl , IMPL_OFFSET > , onmsanimationend : onmsanimationend :: < Impl , IMPL_OFFSET > , Setonmsanimationiteration : Setonmsanimationiteration :: < Impl , IMPL_OFFSET > , onmsanimationiteration : onmsanimationiteration :: < Impl , IMPL_OFFSET > , Setoninvalid : Setoninvalid :: < Impl , IMPL_OFFSET > , oninvalid : oninvalid :: < Impl , IMPL_OFFSET > , SetxmsAcceleratorKey : SetxmsAcceleratorKey :: < Impl , IMPL_OFFSET > , xmsAcceleratorKey : xmsAcceleratorKey :: < Impl , IMPL_OFFSET > , Setspellcheck : Setspellcheck :: < Impl , IMPL_OFFSET > , spellcheck : spellcheck :: < Impl , IMPL_OFFSET > , Setonmsmanipulationstatechanged : Setonmsmanipulationstatechanged :: < Impl , IMPL_OFFSET > , onmsmanipulationstatechanged : onmsmanipulationstatechanged :: < Impl , IMPL_OFFSET > , Setoncuechange : Setoncuechange :: < Impl , IMPL_OFFSET > , oncuechange : oncuechange :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLElement7 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLElementAppliedStylesImpl < > : Sized + IDispatchImpl where { fn msGetRulesApplied ( ) ; fn msGetRulesAppliedWithAncestor ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLElementAppliedStylesVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLElementAppliedStylesImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLElementAppliedStylesVtbl < > { unsafe extern "system" fn msGetRulesApplied < Impl : IHTMLElementAppliedStylesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pprulesappliedcollection : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msGetRulesAppliedWithAncestor < Impl : IHTMLElementAppliedStylesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varcontext : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , pprulesappliedcollection : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , msGetRulesApplied : msGetRulesApplied :: < Impl , IMPL_OFFSET > , msGetRulesAppliedWithAncestor : msGetRulesAppliedWithAncestor :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLElementAppliedStyles < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLElementCollectionImpl < > : Sized + IDispatchImpl where { fn toString ( ) ; fn Setlength ( ) ; fn length ( ) ; fn _newEnum ( ) ; fn item ( ) ; fn tags ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLElementCollectionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLElementCollectionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLElementCollectionVtbl < > { unsafe extern "system" fn toString < Impl : IHTMLElementCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , string : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setlength < Impl : IHTMLElementCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn length < Impl : IHTMLElementCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _newEnum < Impl : IHTMLElementCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn item < Impl : IHTMLElementCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , name : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , index : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , pdisp : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn tags < Impl : IHTMLElementCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , tagname : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , pdisp : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , toString : toString :: < Impl , IMPL_OFFSET > , Setlength : Setlength :: < Impl , IMPL_OFFSET > , length : length :: < Impl , IMPL_OFFSET > , _newEnum : _newEnum :: < Impl , IMPL_OFFSET > , item : item :: < Impl , IMPL_OFFSET > , tags : tags :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLElementCollection < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLElementCollection2Impl < > : Sized + IDispatchImpl where { fn urns ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLElementCollection2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLElementCollection2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLElementCollection2Vtbl < > { unsafe extern "system" fn urns < Impl : IHTMLElementCollection2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , urn : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , pdisp : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , urns : urns :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLElementCollection2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLElementCollection3Impl < > : Sized + IDispatchImpl where { fn namedItem ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLElementCollection3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLElementCollection3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLElementCollection3Vtbl < > { unsafe extern "system" fn namedItem < Impl : IHTMLElementCollection3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , name : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pdisp : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , namedItem : namedItem :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLElementCollection3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLElementCollection4Impl < > : Sized + IDispatchImpl where { fn length ( ) ; fn item ( ) ; fn namedItem ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLElementCollection4Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLElementCollection4Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLElementCollection4Vtbl < > { unsafe extern "system" fn length < Impl : IHTMLElementCollection4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn item < Impl : IHTMLElementCollection4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , pnode : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn namedItem < Impl : IHTMLElementCollection4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , name : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pnode : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , length : length :: < Impl , IMPL_OFFSET > , item : item :: < Impl , IMPL_OFFSET > , namedItem : namedItem :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLElementCollection4 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLElementDefaultsImpl < > : Sized + IDispatchImpl where { fn style ( ) ; fn SettabStop ( ) ; fn tabStop ( ) ; fn SetviewInheritStyle ( ) ; fn viewInheritStyle ( ) ; fn SetviewMasterTab ( ) ; fn viewMasterTab ( ) ; fn SetscrollSegmentX ( ) ; fn scrollSegmentX ( ) ; fn SetscrollSegmentY ( ) ; fn scrollSegmentY ( ) ; fn SetisMultiLine ( ) ; fn isMultiLine ( ) ; fn SetcontentEditable ( ) ; fn contentEditable ( ) ; fn SetcanHaveHTML ( ) ; fn canHaveHTML ( ) ; fn putref_viewLink ( ) ; fn viewLink ( ) ; fn Setfrozen ( ) ; fn frozen ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLElementDefaultsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLElementDefaultsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLElementDefaultsVtbl < > { unsafe extern "system" fn style < Impl : IHTMLElementDefaultsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettabStop < Impl : IHTMLElementDefaultsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn tabStop < Impl : IHTMLElementDefaultsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetviewInheritStyle < Impl : IHTMLElementDefaultsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn viewInheritStyle < Impl : IHTMLElementDefaultsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetviewMasterTab < Impl : IHTMLElementDefaultsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn viewMasterTab < Impl : IHTMLElementDefaultsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetscrollSegmentX < Impl : IHTMLElementDefaultsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scrollSegmentX < Impl : IHTMLElementDefaultsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetscrollSegmentY < Impl : IHTMLElementDefaultsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scrollSegmentY < Impl : IHTMLElementDefaultsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetisMultiLine < Impl : IHTMLElementDefaultsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn isMultiLine < Impl : IHTMLElementDefaultsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetcontentEditable < Impl : IHTMLElementDefaultsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn contentEditable < Impl : IHTMLElementDefaultsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetcanHaveHTML < Impl : IHTMLElementDefaultsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn canHaveHTML < Impl : IHTMLElementDefaultsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_viewLink < Impl : IHTMLElementDefaultsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn viewLink < Impl : IHTMLElementDefaultsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setfrozen < Impl : IHTMLElementDefaultsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn frozen < Impl : IHTMLElementDefaultsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , style : style :: < Impl , IMPL_OFFSET > , SettabStop : SettabStop :: < Impl , IMPL_OFFSET > , tabStop : tabStop :: < Impl , IMPL_OFFSET > , SetviewInheritStyle : SetviewInheritStyle :: < Impl , IMPL_OFFSET > , viewInheritStyle : viewInheritStyle :: < Impl , IMPL_OFFSET > , SetviewMasterTab : SetviewMasterTab :: < Impl , IMPL_OFFSET > , viewMasterTab : viewMasterTab :: < Impl , IMPL_OFFSET > , SetscrollSegmentX : SetscrollSegmentX :: < Impl , IMPL_OFFSET > , scrollSegmentX : scrollSegmentX :: < Impl , IMPL_OFFSET > , SetscrollSegmentY : SetscrollSegmentY :: < Impl , IMPL_OFFSET > , scrollSegmentY : scrollSegmentY :: < Impl , IMPL_OFFSET > , SetisMultiLine : SetisMultiLine :: < Impl , IMPL_OFFSET > , isMultiLine : isMultiLine :: < Impl , IMPL_OFFSET > , SetcontentEditable : SetcontentEditable :: < Impl , IMPL_OFFSET > , contentEditable : contentEditable :: < Impl , IMPL_OFFSET > , SetcanHaveHTML : SetcanHaveHTML :: < Impl , IMPL_OFFSET > , canHaveHTML : canHaveHTML :: < Impl , IMPL_OFFSET > , putref_viewLink : putref_viewLink :: < Impl , IMPL_OFFSET > , viewLink : viewLink :: < Impl , IMPL_OFFSET > , Setfrozen : Setfrozen :: < Impl , IMPL_OFFSET > , frozen : frozen :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLElementDefaults < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" ) ) ] pub trait IHTMLElementRenderImpl < > : Sized where { fn DrawToDC ( ) ; fn SetDocumentPrinter ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" ) ) ] impl < > IHTMLElementRenderVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLElementRenderImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLElementRenderVtbl < > { unsafe extern "system" fn DrawToDC < Impl : IHTMLElementRenderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hdc : super::super::Graphics::Gdi:: HDC , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetDocumentPrinter < Impl : IHTMLElementRenderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrprintername : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , hdc : super::super::Graphics::Gdi:: HDC , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , DrawToDC : DrawToDC :: < Impl , IMPL_OFFSET > , SetDocumentPrinter : SetDocumentPrinter :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLElementRender < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLEmbedElementImpl < > : Sized + IDispatchImpl where { fn Sethidden ( ) ; fn hidden ( ) ; fn palette ( ) ; fn pluginspage ( ) ; fn Setsrc ( ) ; fn src ( ) ; fn Setunits ( ) ; fn units ( ) ; fn Setname ( ) ; fn name ( ) ; fn Setwidth ( ) ; fn width ( ) ; fn Setheight ( ) ; fn height ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLEmbedElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLEmbedElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLEmbedElementVtbl < > { unsafe extern "system" fn Sethidden < Impl : IHTMLEmbedElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn hidden < Impl : IHTMLEmbedElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn palette < Impl : IHTMLEmbedElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn pluginspage < Impl : IHTMLEmbedElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setsrc < Impl : IHTMLEmbedElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn src < Impl : IHTMLEmbedElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setunits < Impl : IHTMLEmbedElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn units < Impl : IHTMLEmbedElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setname < Impl : IHTMLEmbedElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn name < Impl : IHTMLEmbedElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setwidth < Impl : IHTMLEmbedElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn width < Impl : IHTMLEmbedElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setheight < Impl : IHTMLEmbedElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn height < Impl : IHTMLEmbedElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Sethidden : Sethidden :: < Impl , IMPL_OFFSET > , hidden : hidden :: < Impl , IMPL_OFFSET > , palette : palette :: < Impl , IMPL_OFFSET > , pluginspage : pluginspage :: < Impl , IMPL_OFFSET > , Setsrc : Setsrc :: < Impl , IMPL_OFFSET > , src : src :: < Impl , IMPL_OFFSET > , Setunits : Setunits :: < Impl , IMPL_OFFSET > , units : units :: < Impl , IMPL_OFFSET > , Setname : Setname :: < Impl , IMPL_OFFSET > , name : name :: < Impl , IMPL_OFFSET > , Setwidth : Setwidth :: < Impl , IMPL_OFFSET > , width : width :: < Impl , IMPL_OFFSET > , Setheight : Setheight :: < Impl , IMPL_OFFSET > , height : height :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLEmbedElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLEmbedElement2Impl < > : Sized + IDispatchImpl where { fn Setsrc ( ) ; fn src ( ) ; fn pluginspage ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLEmbedElement2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLEmbedElement2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLEmbedElement2Vtbl < > { unsafe extern "system" fn Setsrc < Impl : IHTMLEmbedElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn src < Impl : IHTMLEmbedElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn pluginspage < Impl : IHTMLEmbedElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setsrc : Setsrc :: < Impl , IMPL_OFFSET > , src : src :: < Impl , IMPL_OFFSET > , pluginspage : pluginspage :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLEmbedElement2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLEventObjImpl < > : Sized + IDispatchImpl where { fn srcElement ( ) ; fn altKey ( ) ; fn ctrlKey ( ) ; fn shiftKey ( ) ; fn SetreturnValue ( ) ; fn returnValue ( ) ; fn SetcancelBubble ( ) ; fn cancelBubble ( ) ; fn fromElement ( ) ; fn toElement ( ) ; fn SetkeyCode ( ) ; fn keyCode ( ) ; fn button ( ) ; fn r#type ( ) ; fn qualifier ( ) ; fn reason ( ) ; fn x ( ) ; fn y ( ) ; fn clientX ( ) ; fn clientY ( ) ; fn offsetX ( ) ; fn offsetY ( ) ; fn screenX ( ) ; fn screenY ( ) ; fn srcFilter ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLEventObjVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLEventObjImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLEventObjVtbl < > { unsafe extern "system" fn srcElement < Impl : IHTMLEventObjImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn altKey < Impl : IHTMLEventObjImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ctrlKey < Impl : IHTMLEventObjImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn shiftKey < Impl : IHTMLEventObjImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetreturnValue < Impl : IHTMLEventObjImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn returnValue < Impl : IHTMLEventObjImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetcancelBubble < Impl : IHTMLEventObjImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn cancelBubble < Impl : IHTMLEventObjImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn fromElement < Impl : IHTMLEventObjImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn toElement < Impl : IHTMLEventObjImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetkeyCode < Impl : IHTMLEventObjImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn keyCode < Impl : IHTMLEventObjImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn button < Impl : IHTMLEventObjImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn r#type < Impl : IHTMLEventObjImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn qualifier < Impl : IHTMLEventObjImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn reason < Impl : IHTMLEventObjImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn x < Impl : IHTMLEventObjImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn y < Impl : IHTMLEventObjImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clientX < Impl : IHTMLEventObjImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clientY < Impl : IHTMLEventObjImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn offsetX < Impl : IHTMLEventObjImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn offsetY < Impl : IHTMLEventObjImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn screenX < Impl : IHTMLEventObjImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn screenY < Impl : IHTMLEventObjImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn srcFilter < Impl : IHTMLEventObjImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , srcElement : srcElement :: < Impl , IMPL_OFFSET > , altKey : altKey :: < Impl , IMPL_OFFSET > , ctrlKey : ctrlKey :: < Impl , IMPL_OFFSET > , shiftKey : shiftKey :: < Impl , IMPL_OFFSET > , SetreturnValue : SetreturnValue :: < Impl , IMPL_OFFSET > , returnValue : returnValue :: < Impl , IMPL_OFFSET > , SetcancelBubble : SetcancelBubble :: < Impl , IMPL_OFFSET > , cancelBubble : cancelBubble :: < Impl , IMPL_OFFSET > , fromElement : fromElement :: < Impl , IMPL_OFFSET > , toElement : toElement :: < Impl , IMPL_OFFSET > , SetkeyCode : SetkeyCode :: < Impl , IMPL_OFFSET > , keyCode : keyCode :: < Impl , IMPL_OFFSET > , button : button :: < Impl , IMPL_OFFSET > , r#type : r#type :: < Impl , IMPL_OFFSET > , qualifier : qualifier :: < Impl , IMPL_OFFSET > , reason : reason :: < Impl , IMPL_OFFSET > , x : x :: < Impl , IMPL_OFFSET > , y : y :: < Impl , IMPL_OFFSET > , clientX : clientX :: < Impl , IMPL_OFFSET > , clientY : clientY :: < Impl , IMPL_OFFSET > , offsetX : offsetX :: < Impl , IMPL_OFFSET > , offsetY : offsetY :: < Impl , IMPL_OFFSET > , screenX : screenX :: < Impl , IMPL_OFFSET > , screenY : screenY :: < Impl , IMPL_OFFSET > , srcFilter : srcFilter :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLEventObj < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLEventObj2Impl < > : Sized + IDispatchImpl where { fn setAttribute ( ) ; fn getAttribute ( ) ; fn removeAttribute ( ) ; fn SetpropertyName ( ) ; fn propertyName ( ) ; fn putref_bookmarks ( ) ; fn bookmarks ( ) ; fn putref_recordset ( ) ; fn recordset ( ) ; fn SetdataFld ( ) ; fn dataFld ( ) ; fn putref_boundElements ( ) ; fn boundElements ( ) ; fn Setrepeat ( ) ; fn repeat ( ) ; fn SetsrcUrn ( ) ; fn srcUrn ( ) ; fn putref_srcElement ( ) ; fn srcElement ( ) ; fn SetaltKey ( ) ; fn altKey ( ) ; fn SetctrlKey ( ) ; fn ctrlKey ( ) ; fn SetshiftKey ( ) ; fn shiftKey ( ) ; fn putref_fromElement ( ) ; fn fromElement ( ) ; fn putref_toElement ( ) ; fn toElement ( ) ; fn Setbutton ( ) ; fn button ( ) ; fn Settype ( ) ; fn r#type ( ) ; fn Setqualifier ( ) ; fn qualifier ( ) ; fn Setreason ( ) ; fn reason ( ) ; fn Setx ( ) ; fn x ( ) ; fn Sety ( ) ; fn y ( ) ; fn SetclientX ( ) ; fn clientX ( ) ; fn SetclientY ( ) ; fn clientY ( ) ; fn SetoffsetX ( ) ; fn offsetX ( ) ; fn SetoffsetY ( ) ; fn offsetY ( ) ; fn SetscreenX ( ) ; fn screenX ( ) ; fn SetscreenY ( ) ; fn screenY ( ) ; fn putref_srcFilter ( ) ; fn srcFilter ( ) ; fn dataTransfer ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLEventObj2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLEventObj2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLEventObj2Vtbl < > { unsafe extern "system" fn setAttribute < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , strattributename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , attributevalue : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , lflags : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getAttribute < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , strattributename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , lflags : i32 , attributevalue : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn removeAttribute < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , strattributename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , lflags : i32 , pfsuccess : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetpropertyName < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn propertyName < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_bookmarks < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn bookmarks < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_recordset < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn recordset < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetdataFld < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn dataFld < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_boundElements < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn boundElements < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setrepeat < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn repeat < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetsrcUrn < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn srcUrn < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_srcElement < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn srcElement < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetaltKey < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn altKey < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetctrlKey < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ctrlKey < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetshiftKey < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn shiftKey < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_fromElement < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn fromElement < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_toElement < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn toElement < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setbutton < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn button < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Settype < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn r#type < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setqualifier < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn qualifier < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setreason < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn reason < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setx < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn x < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Sety < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn y < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetclientX < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clientX < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetclientY < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clientY < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetoffsetX < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn offsetX < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetoffsetY < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn offsetY < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetscreenX < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn screenX < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetscreenY < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn screenY < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_srcFilter < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn srcFilter < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn dataTransfer < Impl : IHTMLEventObj2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , setAttribute : setAttribute :: < Impl , IMPL_OFFSET > , getAttribute : getAttribute :: < Impl , IMPL_OFFSET > , removeAttribute : removeAttribute :: < Impl , IMPL_OFFSET > , SetpropertyName : SetpropertyName :: < Impl , IMPL_OFFSET > , propertyName : propertyName :: < Impl , IMPL_OFFSET > , putref_bookmarks : putref_bookmarks :: < Impl , IMPL_OFFSET > , bookmarks : bookmarks :: < Impl , IMPL_OFFSET > , putref_recordset : putref_recordset :: < Impl , IMPL_OFFSET > , recordset : recordset :: < Impl , IMPL_OFFSET > , SetdataFld : SetdataFld :: < Impl , IMPL_OFFSET > , dataFld : dataFld :: < Impl , IMPL_OFFSET > , putref_boundElements : putref_boundElements :: < Impl , IMPL_OFFSET > , boundElements : boundElements :: < Impl , IMPL_OFFSET > , Setrepeat : Setrepeat :: < Impl , IMPL_OFFSET > , repeat : repeat :: < Impl , IMPL_OFFSET > , SetsrcUrn : SetsrcUrn :: < Impl , IMPL_OFFSET > , srcUrn : srcUrn :: < Impl , IMPL_OFFSET > , putref_srcElement : putref_srcElement :: < Impl , IMPL_OFFSET > , srcElement : srcElement :: < Impl , IMPL_OFFSET > , SetaltKey : SetaltKey :: < Impl , IMPL_OFFSET > , altKey : altKey :: < Impl , IMPL_OFFSET > , SetctrlKey : SetctrlKey :: < Impl , IMPL_OFFSET > , ctrlKey : ctrlKey :: < Impl , IMPL_OFFSET > , SetshiftKey : SetshiftKey :: < Impl , IMPL_OFFSET > , shiftKey : shiftKey :: < Impl , IMPL_OFFSET > , putref_fromElement : putref_fromElement :: < Impl , IMPL_OFFSET > , fromElement : fromElement :: < Impl , IMPL_OFFSET > , putref_toElement : putref_toElement :: < Impl , IMPL_OFFSET > , toElement : toElement :: < Impl , IMPL_OFFSET > , Setbutton : Setbutton :: < Impl , IMPL_OFFSET > , button : button :: < Impl , IMPL_OFFSET > , Settype : Settype :: < Impl , IMPL_OFFSET > , r#type : r#type :: < Impl , IMPL_OFFSET > , Setqualifier : Setqualifier :: < Impl , IMPL_OFFSET > , qualifier : qualifier :: < Impl , IMPL_OFFSET > , Setreason : Setreason :: < Impl , IMPL_OFFSET > , reason : reason :: < Impl , IMPL_OFFSET > , Setx : Setx :: < Impl , IMPL_OFFSET > , x : x :: < Impl , IMPL_OFFSET > , Sety : Sety :: < Impl , IMPL_OFFSET > , y : y :: < Impl , IMPL_OFFSET > , SetclientX : SetclientX :: < Impl , IMPL_OFFSET > , clientX : clientX :: < Impl , IMPL_OFFSET > , SetclientY : SetclientY :: < Impl , IMPL_OFFSET > , clientY : clientY :: < Impl , IMPL_OFFSET > , SetoffsetX : SetoffsetX :: < Impl , IMPL_OFFSET > , offsetX : offsetX :: < Impl , IMPL_OFFSET > , SetoffsetY : SetoffsetY :: < Impl , IMPL_OFFSET > , offsetY : offsetY :: < Impl , IMPL_OFFSET > , SetscreenX : SetscreenX :: < Impl , IMPL_OFFSET > , screenX : screenX :: < Impl , IMPL_OFFSET > , SetscreenY : SetscreenY :: < Impl , IMPL_OFFSET > , screenY : screenY :: < Impl , IMPL_OFFSET > , putref_srcFilter : putref_srcFilter :: < Impl , IMPL_OFFSET > , srcFilter : srcFilter :: < Impl , IMPL_OFFSET > , dataTransfer : dataTransfer :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLEventObj2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLEventObj3Impl < > : Sized + IDispatchImpl where { fn contentOverflow ( ) ; fn SetshiftLeft ( ) ; fn shiftLeft ( ) ; fn SetaltLeft ( ) ; fn altLeft ( ) ; fn SetctrlLeft ( ) ; fn ctrlLeft ( ) ; fn imeCompositionChange ( ) ; fn imeNotifyCommand ( ) ; fn imeNotifyData ( ) ; fn imeRequest ( ) ; fn imeRequestData ( ) ; fn keyboardLayout ( ) ; fn behaviorCookie ( ) ; fn behaviorPart ( ) ; fn nextPage ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLEventObj3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLEventObj3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLEventObj3Vtbl < > { unsafe extern "system" fn contentOverflow < Impl : IHTMLEventObj3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetshiftLeft < Impl : IHTMLEventObj3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn shiftLeft < Impl : IHTMLEventObj3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetaltLeft < Impl : IHTMLEventObj3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn altLeft < Impl : IHTMLEventObj3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetctrlLeft < Impl : IHTMLEventObj3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ctrlLeft < Impl : IHTMLEventObj3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn imeCompositionChange < Impl : IHTMLEventObj3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut isize , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn imeNotifyCommand < Impl : IHTMLEventObj3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut isize , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn imeNotifyData < Impl : IHTMLEventObj3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut isize , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn imeRequest < Impl : IHTMLEventObj3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut isize , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn imeRequestData < Impl : IHTMLEventObj3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut isize , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn keyboardLayout < Impl : IHTMLEventObj3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut isize , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn behaviorCookie < Impl : IHTMLEventObj3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn behaviorPart < Impl : IHTMLEventObj3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn nextPage < Impl : IHTMLEventObj3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , contentOverflow : contentOverflow :: < Impl , IMPL_OFFSET > , SetshiftLeft : SetshiftLeft :: < Impl , IMPL_OFFSET > , shiftLeft : shiftLeft :: < Impl , IMPL_OFFSET > , SetaltLeft : SetaltLeft :: < Impl , IMPL_OFFSET > , altLeft : altLeft :: < Impl , IMPL_OFFSET > , SetctrlLeft : SetctrlLeft :: < Impl , IMPL_OFFSET > , ctrlLeft : ctrlLeft :: < Impl , IMPL_OFFSET > , imeCompositionChange : imeCompositionChange :: < Impl , IMPL_OFFSET > , imeNotifyCommand : imeNotifyCommand :: < Impl , IMPL_OFFSET > , imeNotifyData : imeNotifyData :: < Impl , IMPL_OFFSET > , imeRequest : imeRequest :: < Impl , IMPL_OFFSET > , imeRequestData : imeRequestData :: < Impl , IMPL_OFFSET > , keyboardLayout : keyboardLayout :: < Impl , IMPL_OFFSET > , behaviorCookie : behaviorCookie :: < Impl , IMPL_OFFSET > , behaviorPart : behaviorPart :: < Impl , IMPL_OFFSET > , nextPage : nextPage :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLEventObj3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLEventObj4Impl < > : Sized + IDispatchImpl where { fn wheelDelta ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLEventObj4Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLEventObj4Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLEventObj4Vtbl < > { unsafe extern "system" fn wheelDelta < Impl : IHTMLEventObj4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , wheelDelta : wheelDelta :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLEventObj4 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLEventObj5Impl < > : Sized + IDispatchImpl where { fn Seturl ( ) ; fn url ( ) ; fn Setdata ( ) ; fn data ( ) ; fn source ( ) ; fn Setorigin ( ) ; fn origin ( ) ; fn Setissession ( ) ; fn issession ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLEventObj5Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLEventObj5Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLEventObj5Vtbl < > { unsafe extern "system" fn Seturl < Impl : IHTMLEventObj5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn url < Impl : IHTMLEventObj5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setdata < Impl : IHTMLEventObj5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn data < Impl : IHTMLEventObj5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn source < Impl : IHTMLEventObj5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setorigin < Impl : IHTMLEventObj5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn origin < Impl : IHTMLEventObj5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setissession < Impl : IHTMLEventObj5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn issession < Impl : IHTMLEventObj5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Seturl : Seturl :: < Impl , IMPL_OFFSET > , url : url :: < Impl , IMPL_OFFSET > , Setdata : Setdata :: < Impl , IMPL_OFFSET > , data : data :: < Impl , IMPL_OFFSET > , source : source :: < Impl , IMPL_OFFSET > , Setorigin : Setorigin :: < Impl , IMPL_OFFSET > , origin : origin :: < Impl , IMPL_OFFSET > , Setissession : Setissession :: < Impl , IMPL_OFFSET > , issession : issession :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLEventObj5 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLEventObj6Impl < > : Sized + IDispatchImpl where { fn actionURL ( ) ; fn buttonID ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLEventObj6Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLEventObj6Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLEventObj6Vtbl < > { unsafe extern "system" fn actionURL < Impl : IHTMLEventObj6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn buttonID < Impl : IHTMLEventObj6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , actionURL : actionURL :: < Impl , IMPL_OFFSET > , buttonID : buttonID :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLEventObj6 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLFieldSetElementImpl < > : Sized + IDispatchImpl where { fn Setalign ( ) ; fn align ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLFieldSetElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLFieldSetElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLFieldSetElementVtbl < > { unsafe extern "system" fn Setalign < Impl : IHTMLFieldSetElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn align < Impl : IHTMLFieldSetElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setalign : Setalign :: < Impl , IMPL_OFFSET > , align : align :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLFieldSetElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLFieldSetElement2Impl < > : Sized + IDispatchImpl where { fn form ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLFieldSetElement2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLFieldSetElement2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLFieldSetElement2Vtbl < > { unsafe extern "system" fn form < Impl : IHTMLFieldSetElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , form : form :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLFieldSetElement2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLFiltersCollectionImpl < > : Sized + IDispatchImpl where { fn length ( ) ; fn _newEnum ( ) ; fn item ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLFiltersCollectionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLFiltersCollectionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLFiltersCollectionVtbl < > { unsafe extern "system" fn length < Impl : IHTMLFiltersCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _newEnum < Impl : IHTMLFiltersCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn item < Impl : IHTMLFiltersCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarindex : * const super::super::System::Com:: VARIANT , pvarresult : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , length : length :: < Impl , IMPL_OFFSET > , _newEnum : _newEnum :: < Impl , IMPL_OFFSET > , item : item :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLFiltersCollection < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLFontElementImpl < > : Sized + IDispatchImpl where { fn Setcolor ( ) ; fn color ( ) ; fn Setface ( ) ; fn face ( ) ; fn Setsize ( ) ; fn size ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLFontElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLFontElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLFontElementVtbl < > { unsafe extern "system" fn Setcolor < Impl : IHTMLFontElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn color < Impl : IHTMLFontElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setface < Impl : IHTMLFontElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn face < Impl : IHTMLFontElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setsize < Impl : IHTMLFontElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn size < Impl : IHTMLFontElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setcolor : Setcolor :: < Impl , IMPL_OFFSET > , color : color :: < Impl , IMPL_OFFSET > , Setface : Setface :: < Impl , IMPL_OFFSET > , face : face :: < Impl , IMPL_OFFSET > , Setsize : Setsize :: < Impl , IMPL_OFFSET > , size : size :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLFontElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLFontNamesCollectionImpl < > : Sized + IDispatchImpl where { fn length ( ) ; fn _newEnum ( ) ; fn item ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLFontNamesCollectionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLFontNamesCollectionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLFontNamesCollectionVtbl < > { unsafe extern "system" fn length < Impl : IHTMLFontNamesCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _newEnum < Impl : IHTMLFontNamesCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn item < Impl : IHTMLFontNamesCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , pbstr : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , length : length :: < Impl , IMPL_OFFSET > , _newEnum : _newEnum :: < Impl , IMPL_OFFSET > , item : item :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLFontNamesCollection < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLFontSizesCollectionImpl < > : Sized + IDispatchImpl where { fn length ( ) ; fn _newEnum ( ) ; fn forFont ( ) ; fn item ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLFontSizesCollectionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLFontSizesCollectionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLFontSizesCollectionVtbl < > { unsafe extern "system" fn length < Impl : IHTMLFontSizesCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _newEnum < Impl : IHTMLFontSizesCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn forFont < Impl : IHTMLFontSizesCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn item < Impl : IHTMLFontSizesCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , plsize : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , length : length :: < Impl , IMPL_OFFSET > , _newEnum : _newEnum :: < Impl , IMPL_OFFSET > , forFont : forFont :: < Impl , IMPL_OFFSET > , item : item :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLFontSizesCollection < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLFormElementImpl < > : Sized + IDispatchImpl where { fn Setaction ( ) ; fn action ( ) ; fn Setdir ( ) ; fn dir ( ) ; fn Setencoding ( ) ; fn encoding ( ) ; fn Setmethod ( ) ; fn method ( ) ; fn elements ( ) ; fn Settarget ( ) ; fn target ( ) ; fn Setname ( ) ; fn name ( ) ; fn Setonsubmit ( ) ; fn onsubmit ( ) ; fn Setonreset ( ) ; fn onreset ( ) ; fn submit ( ) ; fn reset ( ) ; fn Setlength ( ) ; fn length ( ) ; fn _newEnum ( ) ; fn item ( ) ; fn tags ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLFormElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLFormElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLFormElementVtbl < > { unsafe extern "system" fn Setaction < Impl : IHTMLFormElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn action < Impl : IHTMLFormElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setdir < Impl : IHTMLFormElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn dir < Impl : IHTMLFormElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setencoding < Impl : IHTMLFormElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn encoding < Impl : IHTMLFormElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setmethod < Impl : IHTMLFormElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn method < Impl : IHTMLFormElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn elements < Impl : IHTMLFormElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Settarget < Impl : IHTMLFormElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn target < Impl : IHTMLFormElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setname < Impl : IHTMLFormElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn name < Impl : IHTMLFormElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonsubmit < Impl : IHTMLFormElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onsubmit < Impl : IHTMLFormElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonreset < Impl : IHTMLFormElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onreset < Impl : IHTMLFormElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn submit < Impl : IHTMLFormElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn reset < Impl : IHTMLFormElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setlength < Impl : IHTMLFormElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn length < Impl : IHTMLFormElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _newEnum < Impl : IHTMLFormElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn item < Impl : IHTMLFormElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , name : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , index : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , pdisp : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn tags < Impl : IHTMLFormElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , tagname : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , pdisp : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setaction : Setaction :: < Impl , IMPL_OFFSET > , action : action :: < Impl , IMPL_OFFSET > , Setdir : Setdir :: < Impl , IMPL_OFFSET > , dir : dir :: < Impl , IMPL_OFFSET > , Setencoding : Setencoding :: < Impl , IMPL_OFFSET > , encoding : encoding :: < Impl , IMPL_OFFSET > , Setmethod : Setmethod :: < Impl , IMPL_OFFSET > , method : method :: < Impl , IMPL_OFFSET > , elements : elements :: < Impl , IMPL_OFFSET > , Settarget : Settarget :: < Impl , IMPL_OFFSET > , target : target :: < Impl , IMPL_OFFSET > , Setname : Setname :: < Impl , IMPL_OFFSET > , name : name :: < Impl , IMPL_OFFSET > , Setonsubmit : Setonsubmit :: < Impl , IMPL_OFFSET > , onsubmit : onsubmit :: < Impl , IMPL_OFFSET > , Setonreset : Setonreset :: < Impl , IMPL_OFFSET > , onreset : onreset :: < Impl , IMPL_OFFSET > , submit : submit :: < Impl , IMPL_OFFSET > , reset : reset :: < Impl , IMPL_OFFSET > , Setlength : Setlength :: < Impl , IMPL_OFFSET > , length : length :: < Impl , IMPL_OFFSET > , _newEnum : _newEnum :: < Impl , IMPL_OFFSET > , item : item :: < Impl , IMPL_OFFSET > , tags : tags :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLFormElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLFormElement2Impl < > : Sized + IDispatchImpl where { fn SetacceptCharset ( ) ; fn acceptCharset ( ) ; fn urns ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLFormElement2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLFormElement2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLFormElement2Vtbl < > { unsafe extern "system" fn SetacceptCharset < Impl : IHTMLFormElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn acceptCharset < Impl : IHTMLFormElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn urns < Impl : IHTMLFormElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , urn : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , pdisp : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetacceptCharset : SetacceptCharset :: < Impl , IMPL_OFFSET > , acceptCharset : acceptCharset :: < Impl , IMPL_OFFSET > , urns : urns :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLFormElement2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLFormElement3Impl < > : Sized + IDispatchImpl where { fn namedItem ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLFormElement3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLFormElement3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLFormElement3Vtbl < > { unsafe extern "system" fn namedItem < Impl : IHTMLFormElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , name : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pdisp : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , namedItem : namedItem :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLFormElement3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLFormElement4Impl < > : Sized + IDispatchImpl where { fn Setaction ( ) ; fn action ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLFormElement4Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLFormElement4Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLFormElement4Vtbl < > { unsafe extern "system" fn Setaction < Impl : IHTMLFormElement4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn action < Impl : IHTMLFormElement4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setaction : Setaction :: < Impl , IMPL_OFFSET > , action : action :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLFormElement4 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLFrameBaseImpl < > : Sized + IDispatchImpl where { fn Setsrc ( ) ; fn src ( ) ; fn Setname ( ) ; fn name ( ) ; fn Setborder ( ) ; fn border ( ) ; fn SetframeBorder ( ) ; fn frameBorder ( ) ; fn SetframeSpacing ( ) ; fn frameSpacing ( ) ; fn SetmarginWidth ( ) ; fn marginWidth ( ) ; fn SetmarginHeight ( ) ; fn marginHeight ( ) ; fn SetnoResize ( ) ; fn noResize ( ) ; fn Setscrolling ( ) ; fn scrolling ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLFrameBaseVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLFrameBaseImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLFrameBaseVtbl < > { unsafe extern "system" fn Setsrc < Impl : IHTMLFrameBaseImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn src < Impl : IHTMLFrameBaseImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setname < Impl : IHTMLFrameBaseImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn name < Impl : IHTMLFrameBaseImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setborder < Impl : IHTMLFrameBaseImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn border < Impl : IHTMLFrameBaseImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetframeBorder < Impl : IHTMLFrameBaseImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn frameBorder < Impl : IHTMLFrameBaseImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetframeSpacing < Impl : IHTMLFrameBaseImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn frameSpacing < Impl : IHTMLFrameBaseImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmarginWidth < Impl : IHTMLFrameBaseImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn marginWidth < Impl : IHTMLFrameBaseImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmarginHeight < Impl : IHTMLFrameBaseImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn marginHeight < Impl : IHTMLFrameBaseImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetnoResize < Impl : IHTMLFrameBaseImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn noResize < Impl : IHTMLFrameBaseImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setscrolling < Impl : IHTMLFrameBaseImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scrolling < Impl : IHTMLFrameBaseImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setsrc : Setsrc :: < Impl , IMPL_OFFSET > , src : src :: < Impl , IMPL_OFFSET > , Setname : Setname :: < Impl , IMPL_OFFSET > , name : name :: < Impl , IMPL_OFFSET > , Setborder : Setborder :: < Impl , IMPL_OFFSET > , border : border :: < Impl , IMPL_OFFSET > , SetframeBorder : SetframeBorder :: < Impl , IMPL_OFFSET > , frameBorder : frameBorder :: < Impl , IMPL_OFFSET > , SetframeSpacing : SetframeSpacing :: < Impl , IMPL_OFFSET > , frameSpacing : frameSpacing :: < Impl , IMPL_OFFSET > , SetmarginWidth : SetmarginWidth :: < Impl , IMPL_OFFSET > , marginWidth : marginWidth :: < Impl , IMPL_OFFSET > , SetmarginHeight : SetmarginHeight :: < Impl , IMPL_OFFSET > , marginHeight : marginHeight :: < Impl , IMPL_OFFSET > , SetnoResize : SetnoResize :: < Impl , IMPL_OFFSET > , noResize : noResize :: < Impl , IMPL_OFFSET > , Setscrolling : Setscrolling :: < Impl , IMPL_OFFSET > , scrolling : scrolling :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLFrameBase < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLFrameBase2Impl < > : Sized + IDispatchImpl where { fn contentWindow ( ) ; fn Setonload ( ) ; fn onload ( ) ; fn Setonreadystatechange ( ) ; fn onreadystatechange ( ) ; fn readyState ( ) ; fn SetallowTransparency ( ) ; fn allowTransparency ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLFrameBase2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLFrameBase2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLFrameBase2Vtbl < > { unsafe extern "system" fn contentWindow < Impl : IHTMLFrameBase2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonload < Impl : IHTMLFrameBase2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onload < Impl : IHTMLFrameBase2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonreadystatechange < Impl : IHTMLFrameBase2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onreadystatechange < Impl : IHTMLFrameBase2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn readyState < Impl : IHTMLFrameBase2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetallowTransparency < Impl : IHTMLFrameBase2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn allowTransparency < Impl : IHTMLFrameBase2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , contentWindow : contentWindow :: < Impl , IMPL_OFFSET > , Setonload : Setonload :: < Impl , IMPL_OFFSET > , onload : onload :: < Impl , IMPL_OFFSET > , Setonreadystatechange : Setonreadystatechange :: < Impl , IMPL_OFFSET > , onreadystatechange : onreadystatechange :: < Impl , IMPL_OFFSET > , readyState : readyState :: < Impl , IMPL_OFFSET > , SetallowTransparency : SetallowTransparency :: < Impl , IMPL_OFFSET > , allowTransparency : allowTransparency :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLFrameBase2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLFrameBase3Impl < > : Sized + IDispatchImpl where { fn SetlongDesc ( ) ; fn longDesc ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLFrameBase3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLFrameBase3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLFrameBase3Vtbl < > { unsafe extern "system" fn SetlongDesc < Impl : IHTMLFrameBase3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn longDesc < Impl : IHTMLFrameBase3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetlongDesc : SetlongDesc :: < Impl , IMPL_OFFSET > , longDesc : longDesc :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLFrameBase3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLFrameElementImpl < > : Sized + IDispatchImpl where { fn SetborderColor ( ) ; fn borderColor ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLFrameElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLFrameElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLFrameElementVtbl < > { unsafe extern "system" fn SetborderColor < Impl : IHTMLFrameElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderColor < Impl : IHTMLFrameElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetborderColor : SetborderColor :: < Impl , IMPL_OFFSET > , borderColor : borderColor :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLFrameElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLFrameElement2Impl < > : Sized + IDispatchImpl where { fn Setheight ( ) ; fn height ( ) ; fn Setwidth ( ) ; fn width ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLFrameElement2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLFrameElement2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLFrameElement2Vtbl < > { unsafe extern "system" fn Setheight < Impl : IHTMLFrameElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn height < Impl : IHTMLFrameElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setwidth < Impl : IHTMLFrameElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn width < Impl : IHTMLFrameElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setheight : Setheight :: < Impl , IMPL_OFFSET > , height : height :: < Impl , IMPL_OFFSET > , Setwidth : Setwidth :: < Impl , IMPL_OFFSET > , width : width :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLFrameElement2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLFrameElement3Impl < > : Sized + IDispatchImpl where { fn contentDocument ( ) ; fn Setsrc ( ) ; fn src ( ) ; fn SetlongDesc ( ) ; fn longDesc ( ) ; fn SetframeBorder ( ) ; fn frameBorder ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLFrameElement3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLFrameElement3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLFrameElement3Vtbl < > { unsafe extern "system" fn contentDocument < Impl : IHTMLFrameElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setsrc < Impl : IHTMLFrameElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn src < Impl : IHTMLFrameElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetlongDesc < Impl : IHTMLFrameElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn longDesc < Impl : IHTMLFrameElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetframeBorder < Impl : IHTMLFrameElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn frameBorder < Impl : IHTMLFrameElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , contentDocument : contentDocument :: < Impl , IMPL_OFFSET > , Setsrc : Setsrc :: < Impl , IMPL_OFFSET > , src : src :: < Impl , IMPL_OFFSET > , SetlongDesc : SetlongDesc :: < Impl , IMPL_OFFSET > , longDesc : longDesc :: < Impl , IMPL_OFFSET > , SetframeBorder : SetframeBorder :: < Impl , IMPL_OFFSET > , frameBorder : frameBorder :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLFrameElement3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLFrameSetElementImpl < > : Sized + IDispatchImpl where { fn Setrows ( ) ; fn rows ( ) ; fn Setcols ( ) ; fn cols ( ) ; fn Setborder ( ) ; fn border ( ) ; fn SetborderColor ( ) ; fn borderColor ( ) ; fn SetframeBorder ( ) ; fn frameBorder ( ) ; fn SetframeSpacing ( ) ; fn frameSpacing ( ) ; fn Setname ( ) ; fn name ( ) ; fn Setonload ( ) ; fn onload ( ) ; fn Setonunload ( ) ; fn onunload ( ) ; fn Setonbeforeunload ( ) ; fn onbeforeunload ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLFrameSetElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLFrameSetElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLFrameSetElementVtbl < > { unsafe extern "system" fn Setrows < Impl : IHTMLFrameSetElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn rows < Impl : IHTMLFrameSetElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setcols < Impl : IHTMLFrameSetElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn cols < Impl : IHTMLFrameSetElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setborder < Impl : IHTMLFrameSetElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn border < Impl : IHTMLFrameSetElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderColor < Impl : IHTMLFrameSetElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderColor < Impl : IHTMLFrameSetElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetframeBorder < Impl : IHTMLFrameSetElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn frameBorder < Impl : IHTMLFrameSetElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetframeSpacing < Impl : IHTMLFrameSetElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn frameSpacing < Impl : IHTMLFrameSetElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setname < Impl : IHTMLFrameSetElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn name < Impl : IHTMLFrameSetElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonload < Impl : IHTMLFrameSetElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onload < Impl : IHTMLFrameSetElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonunload < Impl : IHTMLFrameSetElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onunload < Impl : IHTMLFrameSetElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonbeforeunload < Impl : IHTMLFrameSetElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onbeforeunload < Impl : IHTMLFrameSetElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setrows : Setrows :: < Impl , IMPL_OFFSET > , rows : rows :: < Impl , IMPL_OFFSET > , Setcols : Setcols :: < Impl , IMPL_OFFSET > , cols : cols :: < Impl , IMPL_OFFSET > , Setborder : Setborder :: < Impl , IMPL_OFFSET > , border : border :: < Impl , IMPL_OFFSET > , SetborderColor : SetborderColor :: < Impl , IMPL_OFFSET > , borderColor : borderColor :: < Impl , IMPL_OFFSET > , SetframeBorder : SetframeBorder :: < Impl , IMPL_OFFSET > , frameBorder : frameBorder :: < Impl , IMPL_OFFSET > , SetframeSpacing : SetframeSpacing :: < Impl , IMPL_OFFSET > , frameSpacing : frameSpacing :: < Impl , IMPL_OFFSET > , Setname : Setname :: < Impl , IMPL_OFFSET > , name : name :: < Impl , IMPL_OFFSET > , Setonload : Setonload :: < Impl , IMPL_OFFSET > , onload : onload :: < Impl , IMPL_OFFSET > , Setonunload : Setonunload :: < Impl , IMPL_OFFSET > , onunload : onunload :: < Impl , IMPL_OFFSET > , Setonbeforeunload : Setonbeforeunload :: < Impl , IMPL_OFFSET > , onbeforeunload : onbeforeunload :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLFrameSetElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLFrameSetElement2Impl < > : Sized + IDispatchImpl where { fn Setonbeforeprint ( ) ; fn onbeforeprint ( ) ; fn Setonafterprint ( ) ; fn onafterprint ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLFrameSetElement2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLFrameSetElement2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLFrameSetElement2Vtbl < > { unsafe extern "system" fn Setonbeforeprint < Impl : IHTMLFrameSetElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onbeforeprint < Impl : IHTMLFrameSetElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonafterprint < Impl : IHTMLFrameSetElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onafterprint < Impl : IHTMLFrameSetElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setonbeforeprint : Setonbeforeprint :: < Impl , IMPL_OFFSET > , onbeforeprint : onbeforeprint :: < Impl , IMPL_OFFSET > , Setonafterprint : Setonafterprint :: < Impl , IMPL_OFFSET > , onafterprint : onafterprint :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLFrameSetElement2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLFrameSetElement3Impl < > : Sized + IDispatchImpl where { fn Setonhashchange ( ) ; fn onhashchange ( ) ; fn Setonmessage ( ) ; fn onmessage ( ) ; fn Setonoffline ( ) ; fn onoffline ( ) ; fn Setononline ( ) ; fn ononline ( ) ; fn Setonstorage ( ) ; fn onstorage ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLFrameSetElement3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLFrameSetElement3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLFrameSetElement3Vtbl < > { unsafe extern "system" fn Setonhashchange < Impl : IHTMLFrameSetElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onhashchange < Impl : IHTMLFrameSetElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmessage < Impl : IHTMLFrameSetElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmessage < Impl : IHTMLFrameSetElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonoffline < Impl : IHTMLFrameSetElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onoffline < Impl : IHTMLFrameSetElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setononline < Impl : IHTMLFrameSetElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ononline < Impl : IHTMLFrameSetElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonstorage < Impl : IHTMLFrameSetElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onstorage < Impl : IHTMLFrameSetElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setonhashchange : Setonhashchange :: < Impl , IMPL_OFFSET > , onhashchange : onhashchange :: < Impl , IMPL_OFFSET > , Setonmessage : Setonmessage :: < Impl , IMPL_OFFSET > , onmessage : onmessage :: < Impl , IMPL_OFFSET > , Setonoffline : Setonoffline :: < Impl , IMPL_OFFSET > , onoffline : onoffline :: < Impl , IMPL_OFFSET > , Setononline : Setononline :: < Impl , IMPL_OFFSET > , ononline : ononline :: < Impl , IMPL_OFFSET > , Setonstorage : Setonstorage :: < Impl , IMPL_OFFSET > , onstorage : onstorage :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLFrameSetElement3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLFramesCollection2Impl < > : Sized + IDispatchImpl where { fn item ( ) ; fn length ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLFramesCollection2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLFramesCollection2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLFramesCollection2Vtbl < > { unsafe extern "system" fn item < Impl : IHTMLFramesCollection2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarindex : * const super::super::System::Com:: VARIANT , pvarresult : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn length < Impl : IHTMLFramesCollection2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , item : item :: < Impl , IMPL_OFFSET > , length : length :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLFramesCollection2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLGenericElementImpl < > : Sized + IDispatchImpl where { fn recordset ( ) ; fn namedRecordset ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLGenericElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLGenericElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLGenericElementVtbl < > { unsafe extern "system" fn recordset < Impl : IHTMLGenericElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn namedRecordset < Impl : IHTMLGenericElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , datamember : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , hierarchy : * const super::super::System::Com:: VARIANT , pprecordset : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , recordset : recordset :: < Impl , IMPL_OFFSET > , namedRecordset : namedRecordset :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLGenericElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLHRElementImpl < > : Sized + IDispatchImpl where { fn Setalign ( ) ; fn align ( ) ; fn Setcolor ( ) ; fn color ( ) ; fn SetnoShade ( ) ; fn noShade ( ) ; fn Setwidth ( ) ; fn width ( ) ; fn Setsize ( ) ; fn size ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLHRElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLHRElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLHRElementVtbl < > { unsafe extern "system" fn Setalign < Impl : IHTMLHRElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn align < Impl : IHTMLHRElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setcolor < Impl : IHTMLHRElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn color < Impl : IHTMLHRElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetnoShade < Impl : IHTMLHRElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn noShade < Impl : IHTMLHRElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setwidth < Impl : IHTMLHRElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn width < Impl : IHTMLHRElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setsize < Impl : IHTMLHRElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn size < Impl : IHTMLHRElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setalign : Setalign :: < Impl , IMPL_OFFSET > , align : align :: < Impl , IMPL_OFFSET > , Setcolor : Setcolor :: < Impl , IMPL_OFFSET > , color : color :: < Impl , IMPL_OFFSET > , SetnoShade : SetnoShade :: < Impl , IMPL_OFFSET > , noShade : noShade :: < Impl , IMPL_OFFSET > , Setwidth : Setwidth :: < Impl , IMPL_OFFSET > , width : width :: < Impl , IMPL_OFFSET > , Setsize : Setsize :: < Impl , IMPL_OFFSET > , size : size :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLHRElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLHeadElementImpl < > : Sized + IDispatchImpl where { fn Setprofile ( ) ; fn profile ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLHeadElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLHeadElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLHeadElementVtbl < > { unsafe extern "system" fn Setprofile < Impl : IHTMLHeadElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn profile < Impl : IHTMLHeadElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setprofile : Setprofile :: < Impl , IMPL_OFFSET > , profile : profile :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLHeadElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLHeadElement2Impl < > : Sized + IDispatchImpl where { fn Setprofile ( ) ; fn profile ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLHeadElement2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLHeadElement2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLHeadElement2Vtbl < > { unsafe extern "system" fn Setprofile < Impl : IHTMLHeadElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn profile < Impl : IHTMLHeadElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setprofile : Setprofile :: < Impl , IMPL_OFFSET > , profile : profile :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLHeadElement2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLHeaderElementImpl < > : Sized + IDispatchImpl where { fn Setalign ( ) ; fn align ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLHeaderElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLHeaderElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLHeaderElementVtbl < > { unsafe extern "system" fn Setalign < Impl : IHTMLHeaderElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn align < Impl : IHTMLHeaderElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setalign : Setalign :: < Impl , IMPL_OFFSET > , align : align :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLHeaderElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLHtmlElementImpl < > : Sized + IDispatchImpl where { fn Setversion ( ) ; fn version ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLHtmlElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLHtmlElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLHtmlElementVtbl < > { unsafe extern "system" fn Setversion < Impl : IHTMLHtmlElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn version < Impl : IHTMLHtmlElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setversion : Setversion :: < Impl , IMPL_OFFSET > , version : version :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLHtmlElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLIFrameElementImpl < > : Sized + IDispatchImpl where { fn Setvspace ( ) ; fn vspace ( ) ; fn Sethspace ( ) ; fn hspace ( ) ; fn Setalign ( ) ; fn align ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLIFrameElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLIFrameElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLIFrameElementVtbl < > { unsafe extern "system" fn Setvspace < Impl : IHTMLIFrameElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn vspace < Impl : IHTMLIFrameElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Sethspace < Impl : IHTMLIFrameElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn hspace < Impl : IHTMLIFrameElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setalign < Impl : IHTMLIFrameElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn align < Impl : IHTMLIFrameElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setvspace : Setvspace :: < Impl , IMPL_OFFSET > , vspace : vspace :: < Impl , IMPL_OFFSET > , Sethspace : Sethspace :: < Impl , IMPL_OFFSET > , hspace : hspace :: < Impl , IMPL_OFFSET > , Setalign : Setalign :: < Impl , IMPL_OFFSET > , align : align :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLIFrameElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLIFrameElement2Impl < > : Sized + IDispatchImpl where { fn Setheight ( ) ; fn height ( ) ; fn Setwidth ( ) ; fn width ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLIFrameElement2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLIFrameElement2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLIFrameElement2Vtbl < > { unsafe extern "system" fn Setheight < Impl : IHTMLIFrameElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn height < Impl : IHTMLIFrameElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setwidth < Impl : IHTMLIFrameElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn width < Impl : IHTMLIFrameElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setheight : Setheight :: < Impl , IMPL_OFFSET > , height : height :: < Impl , IMPL_OFFSET > , Setwidth : Setwidth :: < Impl , IMPL_OFFSET > , width : width :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLIFrameElement2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLIFrameElement3Impl < > : Sized + IDispatchImpl where { fn contentDocument ( ) ; fn Setsrc ( ) ; fn src ( ) ; fn SetlongDesc ( ) ; fn longDesc ( ) ; fn SetframeBorder ( ) ; fn frameBorder ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLIFrameElement3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLIFrameElement3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLIFrameElement3Vtbl < > { unsafe extern "system" fn contentDocument < Impl : IHTMLIFrameElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setsrc < Impl : IHTMLIFrameElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn src < Impl : IHTMLIFrameElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetlongDesc < Impl : IHTMLIFrameElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn longDesc < Impl : IHTMLIFrameElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetframeBorder < Impl : IHTMLIFrameElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn frameBorder < Impl : IHTMLIFrameElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , contentDocument : contentDocument :: < Impl , IMPL_OFFSET > , Setsrc : Setsrc :: < Impl , IMPL_OFFSET > , src : src :: < Impl , IMPL_OFFSET > , SetlongDesc : SetlongDesc :: < Impl , IMPL_OFFSET > , longDesc : longDesc :: < Impl , IMPL_OFFSET > , SetframeBorder : SetframeBorder :: < Impl , IMPL_OFFSET > , frameBorder : frameBorder :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLIFrameElement3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLIPrintCollectionImpl < > : Sized + IDispatchImpl where { fn length ( ) ; fn _newEnum ( ) ; fn item ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLIPrintCollectionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLIPrintCollectionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLIPrintCollectionVtbl < > { unsafe extern "system" fn length < Impl : IHTMLIPrintCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _newEnum < Impl : IHTMLIPrintCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn item < Impl : IHTMLIPrintCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , ppiprint : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , length : length :: < Impl , IMPL_OFFSET > , _newEnum : _newEnum :: < Impl , IMPL_OFFSET > , item : item :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLIPrintCollection < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLImageElementFactoryImpl < > : Sized + IDispatchImpl where { fn create ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLImageElementFactoryVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLImageElementFactoryImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLImageElementFactoryVtbl < > { unsafe extern "system" fn create < Impl : IHTMLImageElementFactoryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , width : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , height : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , __midl__ihtmlimageelementfactory0000 : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , create : create :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLImageElementFactory < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLImgElementImpl < > : Sized + IDispatchImpl where { fn SetisMap ( ) ; fn isMap ( ) ; fn SetuseMap ( ) ; fn useMap ( ) ; fn mimeType ( ) ; fn fileSize ( ) ; fn fileCreatedDate ( ) ; fn fileModifiedDate ( ) ; fn fileUpdatedDate ( ) ; fn protocol ( ) ; fn href ( ) ; fn nameProp ( ) ; fn Setborder ( ) ; fn border ( ) ; fn Setvspace ( ) ; fn vspace ( ) ; fn Sethspace ( ) ; fn hspace ( ) ; fn Setalt ( ) ; fn alt ( ) ; fn Setsrc ( ) ; fn src ( ) ; fn Setlowsrc ( ) ; fn lowsrc ( ) ; fn Setvrml ( ) ; fn vrml ( ) ; fn Setdynsrc ( ) ; fn dynsrc ( ) ; fn readyState ( ) ; fn complete ( ) ; fn Setloop ( ) ; fn r#loop ( ) ; fn Setalign ( ) ; fn align ( ) ; fn Setonload ( ) ; fn onload ( ) ; fn Setonerror ( ) ; fn onerror ( ) ; fn Setonabort ( ) ; fn onabort ( ) ; fn Setname ( ) ; fn name ( ) ; fn Setwidth ( ) ; fn width ( ) ; fn Setheight ( ) ; fn height ( ) ; fn Setstart ( ) ; fn start ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLImgElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLImgElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLImgElementVtbl < > { unsafe extern "system" fn SetisMap < Impl : IHTMLImgElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn isMap < Impl : IHTMLImgElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetuseMap < Impl : IHTMLImgElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn useMap < Impl : IHTMLImgElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn mimeType < Impl : IHTMLImgElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn fileSize < Impl : IHTMLImgElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn fileCreatedDate < Impl : IHTMLImgElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn fileModifiedDate < Impl : IHTMLImgElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn fileUpdatedDate < Impl : IHTMLImgElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn protocol < Impl : IHTMLImgElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn href < Impl : IHTMLImgElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn nameProp < Impl : IHTMLImgElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setborder < Impl : IHTMLImgElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn border < Impl : IHTMLImgElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setvspace < Impl : IHTMLImgElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn vspace < Impl : IHTMLImgElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Sethspace < Impl : IHTMLImgElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn hspace < Impl : IHTMLImgElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setalt < Impl : IHTMLImgElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn alt < Impl : IHTMLImgElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setsrc < Impl : IHTMLImgElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn src < Impl : IHTMLImgElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setlowsrc < Impl : IHTMLImgElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn lowsrc < Impl : IHTMLImgElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setvrml < Impl : IHTMLImgElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn vrml < Impl : IHTMLImgElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setdynsrc < Impl : IHTMLImgElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn dynsrc < Impl : IHTMLImgElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn readyState < Impl : IHTMLImgElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn complete < Impl : IHTMLImgElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setloop < Impl : IHTMLImgElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn r#loop < Impl : IHTMLImgElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setalign < Impl : IHTMLImgElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn align < Impl : IHTMLImgElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonload < Impl : IHTMLImgElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onload < Impl : IHTMLImgElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonerror < Impl : IHTMLImgElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onerror < Impl : IHTMLImgElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonabort < Impl : IHTMLImgElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onabort < Impl : IHTMLImgElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setname < Impl : IHTMLImgElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn name < Impl : IHTMLImgElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setwidth < Impl : IHTMLImgElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn width < Impl : IHTMLImgElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setheight < Impl : IHTMLImgElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn height < Impl : IHTMLImgElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setstart < Impl : IHTMLImgElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn start < Impl : IHTMLImgElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetisMap : SetisMap :: < Impl , IMPL_OFFSET > , isMap : isMap :: < Impl , IMPL_OFFSET > , SetuseMap : SetuseMap :: < Impl , IMPL_OFFSET > , useMap : useMap :: < Impl , IMPL_OFFSET > , mimeType : mimeType :: < Impl , IMPL_OFFSET > , fileSize : fileSize :: < Impl , IMPL_OFFSET > , fileCreatedDate : fileCreatedDate :: < Impl , IMPL_OFFSET > , fileModifiedDate : fileModifiedDate :: < Impl , IMPL_OFFSET > , fileUpdatedDate : fileUpdatedDate :: < Impl , IMPL_OFFSET > , protocol : protocol :: < Impl , IMPL_OFFSET > , href : href :: < Impl , IMPL_OFFSET > , nameProp : nameProp :: < Impl , IMPL_OFFSET > , Setborder : Setborder :: < Impl , IMPL_OFFSET > , border : border :: < Impl , IMPL_OFFSET > , Setvspace : Setvspace :: < Impl , IMPL_OFFSET > , vspace : vspace :: < Impl , IMPL_OFFSET > , Sethspace : Sethspace :: < Impl , IMPL_OFFSET > , hspace : hspace :: < Impl , IMPL_OFFSET > , Setalt : Setalt :: < Impl , IMPL_OFFSET > , alt : alt :: < Impl , IMPL_OFFSET > , Setsrc : Setsrc :: < Impl , IMPL_OFFSET > , src : src :: < Impl , IMPL_OFFSET > , Setlowsrc : Setlowsrc :: < Impl , IMPL_OFFSET > , lowsrc : lowsrc :: < Impl , IMPL_OFFSET > , Setvrml : Setvrml :: < Impl , IMPL_OFFSET > , vrml : vrml :: < Impl , IMPL_OFFSET > , Setdynsrc : Setdynsrc :: < Impl , IMPL_OFFSET > , dynsrc : dynsrc :: < Impl , IMPL_OFFSET > , readyState : readyState :: < Impl , IMPL_OFFSET > , complete : complete :: < Impl , IMPL_OFFSET > , Setloop : Setloop :: < Impl , IMPL_OFFSET > , r#loop : r#loop :: < Impl , IMPL_OFFSET > , Setalign : Setalign :: < Impl , IMPL_OFFSET > , align : align :: < Impl , IMPL_OFFSET > , Setonload : Setonload :: < Impl , IMPL_OFFSET > , onload : onload :: < Impl , IMPL_OFFSET > , Setonerror : Setonerror :: < Impl , IMPL_OFFSET > , onerror : onerror :: < Impl , IMPL_OFFSET > , Setonabort : Setonabort :: < Impl , IMPL_OFFSET > , onabort : onabort :: < Impl , IMPL_OFFSET > , Setname : Setname :: < Impl , IMPL_OFFSET > , name : name :: < Impl , IMPL_OFFSET > , Setwidth : Setwidth :: < Impl , IMPL_OFFSET > , width : width :: < Impl , IMPL_OFFSET > , Setheight : Setheight :: < Impl , IMPL_OFFSET > , height : height :: < Impl , IMPL_OFFSET > , Setstart : Setstart :: < Impl , IMPL_OFFSET > , start : start :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLImgElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLImgElement2Impl < > : Sized + IDispatchImpl where { fn SetlongDesc ( ) ; fn longDesc ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLImgElement2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLImgElement2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLImgElement2Vtbl < > { unsafe extern "system" fn SetlongDesc < Impl : IHTMLImgElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn longDesc < Impl : IHTMLImgElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetlongDesc : SetlongDesc :: < Impl , IMPL_OFFSET > , longDesc : longDesc :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLImgElement2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLImgElement3Impl < > : Sized + IDispatchImpl where { fn SetlongDesc ( ) ; fn longDesc ( ) ; fn Setvrml ( ) ; fn vrml ( ) ; fn Setlowsrc ( ) ; fn lowsrc ( ) ; fn Setdynsrc ( ) ; fn dynsrc ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLImgElement3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLImgElement3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLImgElement3Vtbl < > { unsafe extern "system" fn SetlongDesc < Impl : IHTMLImgElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn longDesc < Impl : IHTMLImgElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setvrml < Impl : IHTMLImgElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn vrml < Impl : IHTMLImgElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setlowsrc < Impl : IHTMLImgElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn lowsrc < Impl : IHTMLImgElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setdynsrc < Impl : IHTMLImgElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn dynsrc < Impl : IHTMLImgElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetlongDesc : SetlongDesc :: < Impl , IMPL_OFFSET > , longDesc : longDesc :: < Impl , IMPL_OFFSET > , Setvrml : Setvrml :: < Impl , IMPL_OFFSET > , vrml : vrml :: < Impl , IMPL_OFFSET > , Setlowsrc : Setlowsrc :: < Impl , IMPL_OFFSET > , lowsrc : lowsrc :: < Impl , IMPL_OFFSET > , Setdynsrc : Setdynsrc :: < Impl , IMPL_OFFSET > , dynsrc : dynsrc :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLImgElement3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLImgElement4Impl < > : Sized + IDispatchImpl where { fn naturalWidth ( ) ; fn naturalHeight ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLImgElement4Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLImgElement4Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLImgElement4Vtbl < > { unsafe extern "system" fn naturalWidth < Impl : IHTMLImgElement4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn naturalHeight < Impl : IHTMLImgElement4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , naturalWidth : naturalWidth :: < Impl , IMPL_OFFSET > , naturalHeight : naturalHeight :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLImgElement4 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLInputButtonElementImpl < > : Sized + IDispatchImpl where { fn r#type ( ) ; fn Setvalue ( ) ; fn value ( ) ; fn Setname ( ) ; fn name ( ) ; fn Setstatus ( ) ; fn status ( ) ; fn Setdisabled ( ) ; fn disabled ( ) ; fn form ( ) ; fn createTextRange ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLInputButtonElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLInputButtonElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLInputButtonElementVtbl < > { unsafe extern "system" fn r#type < Impl : IHTMLInputButtonElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setvalue < Impl : IHTMLInputButtonElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn value < Impl : IHTMLInputButtonElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setname < Impl : IHTMLInputButtonElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn name < Impl : IHTMLInputButtonElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setstatus < Impl : IHTMLInputButtonElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn status < Impl : IHTMLInputButtonElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setdisabled < Impl : IHTMLInputButtonElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn disabled < Impl : IHTMLInputButtonElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn form < Impl : IHTMLInputButtonElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createTextRange < Impl : IHTMLInputButtonElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , range : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , r#type : r#type :: < Impl , IMPL_OFFSET > , Setvalue : Setvalue :: < Impl , IMPL_OFFSET > , value : value :: < Impl , IMPL_OFFSET > , Setname : Setname :: < Impl , IMPL_OFFSET > , name : name :: < Impl , IMPL_OFFSET > , Setstatus : Setstatus :: < Impl , IMPL_OFFSET > , status : status :: < Impl , IMPL_OFFSET > , Setdisabled : Setdisabled :: < Impl , IMPL_OFFSET > , disabled : disabled :: < Impl , IMPL_OFFSET > , form : form :: < Impl , IMPL_OFFSET > , createTextRange : createTextRange :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLInputButtonElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLInputElementImpl < > : Sized + IDispatchImpl where { fn Settype ( ) ; fn r#type ( ) ; fn Setvalue ( ) ; fn value ( ) ; fn Setname ( ) ; fn name ( ) ; fn Setstatus ( ) ; fn status ( ) ; fn Setdisabled ( ) ; fn disabled ( ) ; fn form ( ) ; fn Setsize ( ) ; fn size ( ) ; fn SetmaxLength ( ) ; fn maxLength ( ) ; fn select ( ) ; fn Setonchange ( ) ; fn onchange ( ) ; fn Setonselect ( ) ; fn onselect ( ) ; fn SetdefaultValue ( ) ; fn defaultValue ( ) ; fn SetreadOnly ( ) ; fn readOnly ( ) ; fn createTextRange ( ) ; fn Setindeterminate ( ) ; fn indeterminate ( ) ; fn SetdefaultChecked ( ) ; fn defaultChecked ( ) ; fn Setchecked ( ) ; fn checked ( ) ; fn Setborder ( ) ; fn border ( ) ; fn Setvspace ( ) ; fn vspace ( ) ; fn Sethspace ( ) ; fn hspace ( ) ; fn Setalt ( ) ; fn alt ( ) ; fn Setsrc ( ) ; fn src ( ) ; fn Setlowsrc ( ) ; fn lowsrc ( ) ; fn Setvrml ( ) ; fn vrml ( ) ; fn Setdynsrc ( ) ; fn dynsrc ( ) ; fn readyState ( ) ; fn complete ( ) ; fn Setloop ( ) ; fn r#loop ( ) ; fn Setalign ( ) ; fn align ( ) ; fn Setonload ( ) ; fn onload ( ) ; fn Setonerror ( ) ; fn onerror ( ) ; fn Setonabort ( ) ; fn onabort ( ) ; fn Setwidth ( ) ; fn width ( ) ; fn Setheight ( ) ; fn height ( ) ; fn Setstart ( ) ; fn start ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLInputElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLInputElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLInputElementVtbl < > { unsafe extern "system" fn Settype < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn r#type < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setvalue < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn value < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setname < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn name < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setstatus < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn status < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setdisabled < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn disabled < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn form < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setsize < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn size < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmaxLength < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn maxLength < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn select < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonchange < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onchange < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonselect < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onselect < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetdefaultValue < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn defaultValue < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetreadOnly < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn readOnly < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createTextRange < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , range : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setindeterminate < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn indeterminate < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetdefaultChecked < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn defaultChecked < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setchecked < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn checked < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setborder < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn border < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setvspace < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn vspace < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Sethspace < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn hspace < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setalt < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn alt < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setsrc < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn src < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setlowsrc < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn lowsrc < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setvrml < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn vrml < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setdynsrc < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn dynsrc < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn readyState < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn complete < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setloop < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn r#loop < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setalign < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn align < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonload < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onload < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonerror < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onerror < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonabort < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onabort < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setwidth < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn width < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setheight < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn height < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setstart < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn start < Impl : IHTMLInputElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Settype : Settype :: < Impl , IMPL_OFFSET > , r#type : r#type :: < Impl , IMPL_OFFSET > , Setvalue : Setvalue :: < Impl , IMPL_OFFSET > , value : value :: < Impl , IMPL_OFFSET > , Setname : Setname :: < Impl , IMPL_OFFSET > , name : name :: < Impl , IMPL_OFFSET > , Setstatus : Setstatus :: < Impl , IMPL_OFFSET > , status : status :: < Impl , IMPL_OFFSET > , Setdisabled : Setdisabled :: < Impl , IMPL_OFFSET > , disabled : disabled :: < Impl , IMPL_OFFSET > , form : form :: < Impl , IMPL_OFFSET > , Setsize : Setsize :: < Impl , IMPL_OFFSET > , size : size :: < Impl , IMPL_OFFSET > , SetmaxLength : SetmaxLength :: < Impl , IMPL_OFFSET > , maxLength : maxLength :: < Impl , IMPL_OFFSET > , select : select :: < Impl , IMPL_OFFSET > , Setonchange : Setonchange :: < Impl , IMPL_OFFSET > , onchange : onchange :: < Impl , IMPL_OFFSET > , Setonselect : Setonselect :: < Impl , IMPL_OFFSET > , onselect : onselect :: < Impl , IMPL_OFFSET > , SetdefaultValue : SetdefaultValue :: < Impl , IMPL_OFFSET > , defaultValue : defaultValue :: < Impl , IMPL_OFFSET > , SetreadOnly : SetreadOnly :: < Impl , IMPL_OFFSET > , readOnly : readOnly :: < Impl , IMPL_OFFSET > , createTextRange : createTextRange :: < Impl , IMPL_OFFSET > , Setindeterminate : Setindeterminate :: < Impl , IMPL_OFFSET > , indeterminate : indeterminate :: < Impl , IMPL_OFFSET > , SetdefaultChecked : SetdefaultChecked :: < Impl , IMPL_OFFSET > , defaultChecked : defaultChecked :: < Impl , IMPL_OFFSET > , Setchecked : Setchecked :: < Impl , IMPL_OFFSET > , checked : checked :: < Impl , IMPL_OFFSET > , Setborder : Setborder :: < Impl , IMPL_OFFSET > , border : border :: < Impl , IMPL_OFFSET > , Setvspace : Setvspace :: < Impl , IMPL_OFFSET > , vspace : vspace :: < Impl , IMPL_OFFSET > , Sethspace : Sethspace :: < Impl , IMPL_OFFSET > , hspace : hspace :: < Impl , IMPL_OFFSET > , Setalt : Setalt :: < Impl , IMPL_OFFSET > , alt : alt :: < Impl , IMPL_OFFSET > , Setsrc : Setsrc :: < Impl , IMPL_OFFSET > , src : src :: < Impl , IMPL_OFFSET > , Setlowsrc : Setlowsrc :: < Impl , IMPL_OFFSET > , lowsrc : lowsrc :: < Impl , IMPL_OFFSET > , Setvrml : Setvrml :: < Impl , IMPL_OFFSET > , vrml : vrml :: < Impl , IMPL_OFFSET > , Setdynsrc : Setdynsrc :: < Impl , IMPL_OFFSET > , dynsrc : dynsrc :: < Impl , IMPL_OFFSET > , readyState : readyState :: < Impl , IMPL_OFFSET > , complete : complete :: < Impl , IMPL_OFFSET > , Setloop : Setloop :: < Impl , IMPL_OFFSET > , r#loop : r#loop :: < Impl , IMPL_OFFSET > , Setalign : Setalign :: < Impl , IMPL_OFFSET > , align : align :: < Impl , IMPL_OFFSET > , Setonload : Setonload :: < Impl , IMPL_OFFSET > , onload : onload :: < Impl , IMPL_OFFSET > , Setonerror : Setonerror :: < Impl , IMPL_OFFSET > , onerror : onerror :: < Impl , IMPL_OFFSET > , Setonabort : Setonabort :: < Impl , IMPL_OFFSET > , onabort : onabort :: < Impl , IMPL_OFFSET > , Setwidth : Setwidth :: < Impl , IMPL_OFFSET > , width : width :: < Impl , IMPL_OFFSET > , Setheight : Setheight :: < Impl , IMPL_OFFSET > , height : height :: < Impl , IMPL_OFFSET > , Setstart : Setstart :: < Impl , IMPL_OFFSET > , start : start :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLInputElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLInputElement2Impl < > : Sized + IDispatchImpl where { fn Setaccept ( ) ; fn accept ( ) ; fn SetuseMap ( ) ; fn useMap ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLInputElement2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLInputElement2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLInputElement2Vtbl < > { unsafe extern "system" fn Setaccept < Impl : IHTMLInputElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn accept < Impl : IHTMLInputElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetuseMap < Impl : IHTMLInputElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn useMap < Impl : IHTMLInputElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setaccept : Setaccept :: < Impl , IMPL_OFFSET > , accept : accept :: < Impl , IMPL_OFFSET > , SetuseMap : SetuseMap :: < Impl , IMPL_OFFSET > , useMap : useMap :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLInputElement2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLInputElement3Impl < > : Sized + IDispatchImpl where { fn Setsrc ( ) ; fn src ( ) ; fn Setlowsrc ( ) ; fn lowsrc ( ) ; fn Setvrml ( ) ; fn vrml ( ) ; fn Setdynsrc ( ) ; fn dynsrc ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLInputElement3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLInputElement3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLInputElement3Vtbl < > { unsafe extern "system" fn Setsrc < Impl : IHTMLInputElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn src < Impl : IHTMLInputElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setlowsrc < Impl : IHTMLInputElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn lowsrc < Impl : IHTMLInputElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setvrml < Impl : IHTMLInputElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn vrml < Impl : IHTMLInputElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setdynsrc < Impl : IHTMLInputElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn dynsrc < Impl : IHTMLInputElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setsrc : Setsrc :: < Impl , IMPL_OFFSET > , src : src :: < Impl , IMPL_OFFSET > , Setlowsrc : Setlowsrc :: < Impl , IMPL_OFFSET > , lowsrc : lowsrc :: < Impl , IMPL_OFFSET > , Setvrml : Setvrml :: < Impl , IMPL_OFFSET > , vrml : vrml :: < Impl , IMPL_OFFSET > , Setdynsrc : Setdynsrc :: < Impl , IMPL_OFFSET > , dynsrc : dynsrc :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLInputElement3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLInputFileElementImpl < > : Sized + IDispatchImpl where { fn r#type ( ) ; fn Setname ( ) ; fn name ( ) ; fn Setstatus ( ) ; fn status ( ) ; fn Setdisabled ( ) ; fn disabled ( ) ; fn form ( ) ; fn Setsize ( ) ; fn size ( ) ; fn SetmaxLength ( ) ; fn maxLength ( ) ; fn select ( ) ; fn Setonchange ( ) ; fn onchange ( ) ; fn Setonselect ( ) ; fn onselect ( ) ; fn Setvalue ( ) ; fn value ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLInputFileElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLInputFileElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLInputFileElementVtbl < > { unsafe extern "system" fn r#type < Impl : IHTMLInputFileElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setname < Impl : IHTMLInputFileElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn name < Impl : IHTMLInputFileElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setstatus < Impl : IHTMLInputFileElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn status < Impl : IHTMLInputFileElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setdisabled < Impl : IHTMLInputFileElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn disabled < Impl : IHTMLInputFileElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn form < Impl : IHTMLInputFileElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setsize < Impl : IHTMLInputFileElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn size < Impl : IHTMLInputFileElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmaxLength < Impl : IHTMLInputFileElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn maxLength < Impl : IHTMLInputFileElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn select < Impl : IHTMLInputFileElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonchange < Impl : IHTMLInputFileElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onchange < Impl : IHTMLInputFileElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonselect < Impl : IHTMLInputFileElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onselect < Impl : IHTMLInputFileElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setvalue < Impl : IHTMLInputFileElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn value < Impl : IHTMLInputFileElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , r#type : r#type :: < Impl , IMPL_OFFSET > , Setname : Setname :: < Impl , IMPL_OFFSET > , name : name :: < Impl , IMPL_OFFSET > , Setstatus : Setstatus :: < Impl , IMPL_OFFSET > , status : status :: < Impl , IMPL_OFFSET > , Setdisabled : Setdisabled :: < Impl , IMPL_OFFSET > , disabled : disabled :: < Impl , IMPL_OFFSET > , form : form :: < Impl , IMPL_OFFSET > , Setsize : Setsize :: < Impl , IMPL_OFFSET > , size : size :: < Impl , IMPL_OFFSET > , SetmaxLength : SetmaxLength :: < Impl , IMPL_OFFSET > , maxLength : maxLength :: < Impl , IMPL_OFFSET > , select : select :: < Impl , IMPL_OFFSET > , Setonchange : Setonchange :: < Impl , IMPL_OFFSET > , onchange : onchange :: < Impl , IMPL_OFFSET > , Setonselect : Setonselect :: < Impl , IMPL_OFFSET > , onselect : onselect :: < Impl , IMPL_OFFSET > , Setvalue : Setvalue :: < Impl , IMPL_OFFSET > , value : value :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLInputFileElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLInputHiddenElementImpl < > : Sized + IDispatchImpl where { fn r#type ( ) ; fn Setvalue ( ) ; fn value ( ) ; fn Setname ( ) ; fn name ( ) ; fn Setstatus ( ) ; fn status ( ) ; fn Setdisabled ( ) ; fn disabled ( ) ; fn form ( ) ; fn createTextRange ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLInputHiddenElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLInputHiddenElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLInputHiddenElementVtbl < > { unsafe extern "system" fn r#type < Impl : IHTMLInputHiddenElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setvalue < Impl : IHTMLInputHiddenElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn value < Impl : IHTMLInputHiddenElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setname < Impl : IHTMLInputHiddenElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn name < Impl : IHTMLInputHiddenElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setstatus < Impl : IHTMLInputHiddenElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn status < Impl : IHTMLInputHiddenElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setdisabled < Impl : IHTMLInputHiddenElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn disabled < Impl : IHTMLInputHiddenElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn form < Impl : IHTMLInputHiddenElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createTextRange < Impl : IHTMLInputHiddenElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , range : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , r#type : r#type :: < Impl , IMPL_OFFSET > , Setvalue : Setvalue :: < Impl , IMPL_OFFSET > , value : value :: < Impl , IMPL_OFFSET > , Setname : Setname :: < Impl , IMPL_OFFSET > , name : name :: < Impl , IMPL_OFFSET > , Setstatus : Setstatus :: < Impl , IMPL_OFFSET > , status : status :: < Impl , IMPL_OFFSET > , Setdisabled : Setdisabled :: < Impl , IMPL_OFFSET > , disabled : disabled :: < Impl , IMPL_OFFSET > , form : form :: < Impl , IMPL_OFFSET > , createTextRange : createTextRange :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLInputHiddenElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLInputImageImpl < > : Sized + IDispatchImpl where { fn r#type ( ) ; fn Setdisabled ( ) ; fn disabled ( ) ; fn Setborder ( ) ; fn border ( ) ; fn Setvspace ( ) ; fn vspace ( ) ; fn Sethspace ( ) ; fn hspace ( ) ; fn Setalt ( ) ; fn alt ( ) ; fn Setsrc ( ) ; fn src ( ) ; fn Setlowsrc ( ) ; fn lowsrc ( ) ; fn Setvrml ( ) ; fn vrml ( ) ; fn Setdynsrc ( ) ; fn dynsrc ( ) ; fn readyState ( ) ; fn complete ( ) ; fn Setloop ( ) ; fn r#loop ( ) ; fn Setalign ( ) ; fn align ( ) ; fn Setonload ( ) ; fn onload ( ) ; fn Setonerror ( ) ; fn onerror ( ) ; fn Setonabort ( ) ; fn onabort ( ) ; fn Setname ( ) ; fn name ( ) ; fn Setwidth ( ) ; fn width ( ) ; fn Setheight ( ) ; fn height ( ) ; fn Setstart ( ) ; fn start ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLInputImageVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLInputImageImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLInputImageVtbl < > { unsafe extern "system" fn r#type < Impl : IHTMLInputImageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setdisabled < Impl : IHTMLInputImageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn disabled < Impl : IHTMLInputImageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setborder < Impl : IHTMLInputImageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn border < Impl : IHTMLInputImageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setvspace < Impl : IHTMLInputImageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn vspace < Impl : IHTMLInputImageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Sethspace < Impl : IHTMLInputImageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn hspace < Impl : IHTMLInputImageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setalt < Impl : IHTMLInputImageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn alt < Impl : IHTMLInputImageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setsrc < Impl : IHTMLInputImageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn src < Impl : IHTMLInputImageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setlowsrc < Impl : IHTMLInputImageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn lowsrc < Impl : IHTMLInputImageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setvrml < Impl : IHTMLInputImageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn vrml < Impl : IHTMLInputImageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setdynsrc < Impl : IHTMLInputImageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn dynsrc < Impl : IHTMLInputImageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn readyState < Impl : IHTMLInputImageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn complete < Impl : IHTMLInputImageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setloop < Impl : IHTMLInputImageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn r#loop < Impl : IHTMLInputImageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setalign < Impl : IHTMLInputImageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn align < Impl : IHTMLInputImageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonload < Impl : IHTMLInputImageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onload < Impl : IHTMLInputImageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonerror < Impl : IHTMLInputImageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onerror < Impl : IHTMLInputImageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonabort < Impl : IHTMLInputImageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onabort < Impl : IHTMLInputImageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setname < Impl : IHTMLInputImageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn name < Impl : IHTMLInputImageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setwidth < Impl : IHTMLInputImageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn width < Impl : IHTMLInputImageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setheight < Impl : IHTMLInputImageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn height < Impl : IHTMLInputImageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setstart < Impl : IHTMLInputImageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn start < Impl : IHTMLInputImageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , r#type : r#type :: < Impl , IMPL_OFFSET > , Setdisabled : Setdisabled :: < Impl , IMPL_OFFSET > , disabled : disabled :: < Impl , IMPL_OFFSET > , Setborder : Setborder :: < Impl , IMPL_OFFSET > , border : border :: < Impl , IMPL_OFFSET > , Setvspace : Setvspace :: < Impl , IMPL_OFFSET > , vspace : vspace :: < Impl , IMPL_OFFSET > , Sethspace : Sethspace :: < Impl , IMPL_OFFSET > , hspace : hspace :: < Impl , IMPL_OFFSET > , Setalt : Setalt :: < Impl , IMPL_OFFSET > , alt : alt :: < Impl , IMPL_OFFSET > , Setsrc : Setsrc :: < Impl , IMPL_OFFSET > , src : src :: < Impl , IMPL_OFFSET > , Setlowsrc : Setlowsrc :: < Impl , IMPL_OFFSET > , lowsrc : lowsrc :: < Impl , IMPL_OFFSET > , Setvrml : Setvrml :: < Impl , IMPL_OFFSET > , vrml : vrml :: < Impl , IMPL_OFFSET > , Setdynsrc : Setdynsrc :: < Impl , IMPL_OFFSET > , dynsrc : dynsrc :: < Impl , IMPL_OFFSET > , readyState : readyState :: < Impl , IMPL_OFFSET > , complete : complete :: < Impl , IMPL_OFFSET > , Setloop : Setloop :: < Impl , IMPL_OFFSET > , r#loop : r#loop :: < Impl , IMPL_OFFSET > , Setalign : Setalign :: < Impl , IMPL_OFFSET > , align : align :: < Impl , IMPL_OFFSET > , Setonload : Setonload :: < Impl , IMPL_OFFSET > , onload : onload :: < Impl , IMPL_OFFSET > , Setonerror : Setonerror :: < Impl , IMPL_OFFSET > , onerror : onerror :: < Impl , IMPL_OFFSET > , Setonabort : Setonabort :: < Impl , IMPL_OFFSET > , onabort : onabort :: < Impl , IMPL_OFFSET > , Setname : Setname :: < Impl , IMPL_OFFSET > , name : name :: < Impl , IMPL_OFFSET > , Setwidth : Setwidth :: < Impl , IMPL_OFFSET > , width : width :: < Impl , IMPL_OFFSET > , Setheight : Setheight :: < Impl , IMPL_OFFSET > , height : height :: < Impl , IMPL_OFFSET > , Setstart : Setstart :: < Impl , IMPL_OFFSET > , start : start :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLInputImage < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLInputRangeElementImpl < > : Sized + IDispatchImpl where { fn Setdisabled ( ) ; fn disabled ( ) ; fn r#type ( ) ; fn Setalt ( ) ; fn alt ( ) ; fn Setname ( ) ; fn name ( ) ; fn Setvalue ( ) ; fn value ( ) ; fn Setmin ( ) ; fn min ( ) ; fn Setmax ( ) ; fn max ( ) ; fn Setstep ( ) ; fn step ( ) ; fn SetvalueAsNumber ( ) ; fn valueAsNumber ( ) ; fn stepUp ( ) ; fn stepDown ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLInputRangeElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLInputRangeElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLInputRangeElementVtbl < > { unsafe extern "system" fn Setdisabled < Impl : IHTMLInputRangeElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn disabled < Impl : IHTMLInputRangeElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn r#type < Impl : IHTMLInputRangeElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setalt < Impl : IHTMLInputRangeElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn alt < Impl : IHTMLInputRangeElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setname < Impl : IHTMLInputRangeElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn name < Impl : IHTMLInputRangeElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setvalue < Impl : IHTMLInputRangeElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn value < Impl : IHTMLInputRangeElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setmin < Impl : IHTMLInputRangeElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn min < Impl : IHTMLInputRangeElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setmax < Impl : IHTMLInputRangeElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn max < Impl : IHTMLInputRangeElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setstep < Impl : IHTMLInputRangeElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn step < Impl : IHTMLInputRangeElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetvalueAsNumber < Impl : IHTMLInputRangeElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn valueAsNumber < Impl : IHTMLInputRangeElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn stepUp < Impl : IHTMLInputRangeElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , n : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn stepDown < Impl : IHTMLInputRangeElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , n : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setdisabled : Setdisabled :: < Impl , IMPL_OFFSET > , disabled : disabled :: < Impl , IMPL_OFFSET > , r#type : r#type :: < Impl , IMPL_OFFSET > , Setalt : Setalt :: < Impl , IMPL_OFFSET > , alt : alt :: < Impl , IMPL_OFFSET > , Setname : Setname :: < Impl , IMPL_OFFSET > , name : name :: < Impl , IMPL_OFFSET > , Setvalue : Setvalue :: < Impl , IMPL_OFFSET > , value : value :: < Impl , IMPL_OFFSET > , Setmin : Setmin :: < Impl , IMPL_OFFSET > , min : min :: < Impl , IMPL_OFFSET > , Setmax : Setmax :: < Impl , IMPL_OFFSET > , max : max :: < Impl , IMPL_OFFSET > , Setstep : Setstep :: < Impl , IMPL_OFFSET > , step : step :: < Impl , IMPL_OFFSET > , SetvalueAsNumber : SetvalueAsNumber :: < Impl , IMPL_OFFSET > , valueAsNumber : valueAsNumber :: < Impl , IMPL_OFFSET > , stepUp : stepUp :: < Impl , IMPL_OFFSET > , stepDown : stepDown :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLInputRangeElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLInputTextElementImpl < > : Sized + IDispatchImpl where { fn r#type ( ) ; fn Setvalue ( ) ; fn value ( ) ; fn Setname ( ) ; fn name ( ) ; fn Setstatus ( ) ; fn status ( ) ; fn Setdisabled ( ) ; fn disabled ( ) ; fn form ( ) ; fn SetdefaultValue ( ) ; fn defaultValue ( ) ; fn Setsize ( ) ; fn size ( ) ; fn SetmaxLength ( ) ; fn maxLength ( ) ; fn select ( ) ; fn Setonchange ( ) ; fn onchange ( ) ; fn Setonselect ( ) ; fn onselect ( ) ; fn SetreadOnly ( ) ; fn readOnly ( ) ; fn createTextRange ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLInputTextElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLInputTextElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLInputTextElementVtbl < > { unsafe extern "system" fn r#type < Impl : IHTMLInputTextElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setvalue < Impl : IHTMLInputTextElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn value < Impl : IHTMLInputTextElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setname < Impl : IHTMLInputTextElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn name < Impl : IHTMLInputTextElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setstatus < Impl : IHTMLInputTextElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn status < Impl : IHTMLInputTextElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setdisabled < Impl : IHTMLInputTextElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn disabled < Impl : IHTMLInputTextElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn form < Impl : IHTMLInputTextElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetdefaultValue < Impl : IHTMLInputTextElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn defaultValue < Impl : IHTMLInputTextElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setsize < Impl : IHTMLInputTextElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn size < Impl : IHTMLInputTextElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmaxLength < Impl : IHTMLInputTextElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn maxLength < Impl : IHTMLInputTextElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn select < Impl : IHTMLInputTextElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonchange < Impl : IHTMLInputTextElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onchange < Impl : IHTMLInputTextElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonselect < Impl : IHTMLInputTextElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onselect < Impl : IHTMLInputTextElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetreadOnly < Impl : IHTMLInputTextElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn readOnly < Impl : IHTMLInputTextElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createTextRange < Impl : IHTMLInputTextElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , range : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , r#type : r#type :: < Impl , IMPL_OFFSET > , Setvalue : Setvalue :: < Impl , IMPL_OFFSET > , value : value :: < Impl , IMPL_OFFSET > , Setname : Setname :: < Impl , IMPL_OFFSET > , name : name :: < Impl , IMPL_OFFSET > , Setstatus : Setstatus :: < Impl , IMPL_OFFSET > , status : status :: < Impl , IMPL_OFFSET > , Setdisabled : Setdisabled :: < Impl , IMPL_OFFSET > , disabled : disabled :: < Impl , IMPL_OFFSET > , form : form :: < Impl , IMPL_OFFSET > , SetdefaultValue : SetdefaultValue :: < Impl , IMPL_OFFSET > , defaultValue : defaultValue :: < Impl , IMPL_OFFSET > , Setsize : Setsize :: < Impl , IMPL_OFFSET > , size : size :: < Impl , IMPL_OFFSET > , SetmaxLength : SetmaxLength :: < Impl , IMPL_OFFSET > , maxLength : maxLength :: < Impl , IMPL_OFFSET > , select : select :: < Impl , IMPL_OFFSET > , Setonchange : Setonchange :: < Impl , IMPL_OFFSET > , onchange : onchange :: < Impl , IMPL_OFFSET > , Setonselect : Setonselect :: < Impl , IMPL_OFFSET > , onselect : onselect :: < Impl , IMPL_OFFSET > , SetreadOnly : SetreadOnly :: < Impl , IMPL_OFFSET > , readOnly : readOnly :: < Impl , IMPL_OFFSET > , createTextRange : createTextRange :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLInputTextElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLInputTextElement2Impl < > : Sized + IDispatchImpl where { fn SetselectionStart ( ) ; fn selectionStart ( ) ; fn SetselectionEnd ( ) ; fn selectionEnd ( ) ; fn setSelectionRange ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLInputTextElement2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLInputTextElement2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLInputTextElement2Vtbl < > { unsafe extern "system" fn SetselectionStart < Impl : IHTMLInputTextElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn selectionStart < Impl : IHTMLInputTextElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetselectionEnd < Impl : IHTMLInputTextElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn selectionEnd < Impl : IHTMLInputTextElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn setSelectionRange < Impl : IHTMLInputTextElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , start : i32 , end : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetselectionStart : SetselectionStart :: < Impl , IMPL_OFFSET > , selectionStart : selectionStart :: < Impl , IMPL_OFFSET > , SetselectionEnd : SetselectionEnd :: < Impl , IMPL_OFFSET > , selectionEnd : selectionEnd :: < Impl , IMPL_OFFSET > , setSelectionRange : setSelectionRange :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLInputTextElement2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLIsIndexElementImpl < > : Sized + IDispatchImpl where { fn Setprompt ( ) ; fn prompt ( ) ; fn Setaction ( ) ; fn action ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLIsIndexElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLIsIndexElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLIsIndexElementVtbl < > { unsafe extern "system" fn Setprompt < Impl : IHTMLIsIndexElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn prompt < Impl : IHTMLIsIndexElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setaction < Impl : IHTMLIsIndexElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn action < Impl : IHTMLIsIndexElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setprompt : Setprompt :: < Impl , IMPL_OFFSET > , prompt : prompt :: < Impl , IMPL_OFFSET > , Setaction : Setaction :: < Impl , IMPL_OFFSET > , action : action :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLIsIndexElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLIsIndexElement2Impl < > : Sized + IDispatchImpl where { fn form ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLIsIndexElement2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLIsIndexElement2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLIsIndexElement2Vtbl < > { unsafe extern "system" fn form < Impl : IHTMLIsIndexElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , form : form :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLIsIndexElement2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLLIElementImpl < > : Sized + IDispatchImpl where { fn Settype ( ) ; fn r#type ( ) ; fn Setvalue ( ) ; fn value ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLLIElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLLIElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLLIElementVtbl < > { unsafe extern "system" fn Settype < Impl : IHTMLLIElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn r#type < Impl : IHTMLLIElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setvalue < Impl : IHTMLLIElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn value < Impl : IHTMLLIElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Settype : Settype :: < Impl , IMPL_OFFSET > , r#type : r#type :: < Impl , IMPL_OFFSET > , Setvalue : Setvalue :: < Impl , IMPL_OFFSET > , value : value :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLLIElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLLabelElementImpl < > : Sized + IDispatchImpl where { fn SethtmlFor ( ) ; fn htmlFor ( ) ; fn SetaccessKey ( ) ; fn accessKey ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLLabelElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLLabelElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLLabelElementVtbl < > { unsafe extern "system" fn SethtmlFor < Impl : IHTMLLabelElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn htmlFor < Impl : IHTMLLabelElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetaccessKey < Impl : IHTMLLabelElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn accessKey < Impl : IHTMLLabelElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SethtmlFor : SethtmlFor :: < Impl , IMPL_OFFSET > , htmlFor : htmlFor :: < Impl , IMPL_OFFSET > , SetaccessKey : SetaccessKey :: < Impl , IMPL_OFFSET > , accessKey : accessKey :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLLabelElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLLabelElement2Impl < > : Sized + IDispatchImpl where { fn form ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLLabelElement2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLLabelElement2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLLabelElement2Vtbl < > { unsafe extern "system" fn form < Impl : IHTMLLabelElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , form : form :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLLabelElement2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLLegendElementImpl < > : Sized + IDispatchImpl where { fn Setalign ( ) ; fn align ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLLegendElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLLegendElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLLegendElementVtbl < > { unsafe extern "system" fn Setalign < Impl : IHTMLLegendElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn align < Impl : IHTMLLegendElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setalign : Setalign :: < Impl , IMPL_OFFSET > , align : align :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLLegendElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLLegendElement2Impl < > : Sized + IDispatchImpl where { fn form ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLLegendElement2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLLegendElement2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLLegendElement2Vtbl < > { unsafe extern "system" fn form < Impl : IHTMLLegendElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , form : form :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLLegendElement2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLLinkElementImpl < > : Sized + IDispatchImpl where { fn Sethref ( ) ; fn href ( ) ; fn Setrel ( ) ; fn rel ( ) ; fn Setrev ( ) ; fn rev ( ) ; fn Settype ( ) ; fn r#type ( ) ; fn readyState ( ) ; fn Setonreadystatechange ( ) ; fn onreadystatechange ( ) ; fn Setonload ( ) ; fn onload ( ) ; fn Setonerror ( ) ; fn onerror ( ) ; fn styleSheet ( ) ; fn Setdisabled ( ) ; fn disabled ( ) ; fn Setmedia ( ) ; fn media ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLLinkElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLLinkElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLLinkElementVtbl < > { unsafe extern "system" fn Sethref < Impl : IHTMLLinkElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn href < Impl : IHTMLLinkElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setrel < Impl : IHTMLLinkElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn rel < Impl : IHTMLLinkElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setrev < Impl : IHTMLLinkElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn rev < Impl : IHTMLLinkElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Settype < Impl : IHTMLLinkElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn r#type < Impl : IHTMLLinkElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn readyState < Impl : IHTMLLinkElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonreadystatechange < Impl : IHTMLLinkElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onreadystatechange < Impl : IHTMLLinkElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonload < Impl : IHTMLLinkElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onload < Impl : IHTMLLinkElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonerror < Impl : IHTMLLinkElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onerror < Impl : IHTMLLinkElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn styleSheet < Impl : IHTMLLinkElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setdisabled < Impl : IHTMLLinkElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn disabled < Impl : IHTMLLinkElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setmedia < Impl : IHTMLLinkElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn media < Impl : IHTMLLinkElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Sethref : Sethref :: < Impl , IMPL_OFFSET > , href : href :: < Impl , IMPL_OFFSET > , Setrel : Setrel :: < Impl , IMPL_OFFSET > , rel : rel :: < Impl , IMPL_OFFSET > , Setrev : Setrev :: < Impl , IMPL_OFFSET > , rev : rev :: < Impl , IMPL_OFFSET > , Settype : Settype :: < Impl , IMPL_OFFSET > , r#type : r#type :: < Impl , IMPL_OFFSET > , readyState : readyState :: < Impl , IMPL_OFFSET > , Setonreadystatechange : Setonreadystatechange :: < Impl , IMPL_OFFSET > , onreadystatechange : onreadystatechange :: < Impl , IMPL_OFFSET > , Setonload : Setonload :: < Impl , IMPL_OFFSET > , onload : onload :: < Impl , IMPL_OFFSET > , Setonerror : Setonerror :: < Impl , IMPL_OFFSET > , onerror : onerror :: < Impl , IMPL_OFFSET > , styleSheet : styleSheet :: < Impl , IMPL_OFFSET > , Setdisabled : Setdisabled :: < Impl , IMPL_OFFSET > , disabled : disabled :: < Impl , IMPL_OFFSET > , Setmedia : Setmedia :: < Impl , IMPL_OFFSET > , media : media :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLLinkElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLLinkElement2Impl < > : Sized + IDispatchImpl where { fn Settarget ( ) ; fn target ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLLinkElement2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLLinkElement2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLLinkElement2Vtbl < > { unsafe extern "system" fn Settarget < Impl : IHTMLLinkElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn target < Impl : IHTMLLinkElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Settarget : Settarget :: < Impl , IMPL_OFFSET > , target : target :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLLinkElement2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLLinkElement3Impl < > : Sized + IDispatchImpl where { fn Setcharset ( ) ; fn charset ( ) ; fn Sethreflang ( ) ; fn hreflang ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLLinkElement3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLLinkElement3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLLinkElement3Vtbl < > { unsafe extern "system" fn Setcharset < Impl : IHTMLLinkElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn charset < Impl : IHTMLLinkElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Sethreflang < Impl : IHTMLLinkElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn hreflang < Impl : IHTMLLinkElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setcharset : Setcharset :: < Impl , IMPL_OFFSET > , charset : charset :: < Impl , IMPL_OFFSET > , Sethreflang : Sethreflang :: < Impl , IMPL_OFFSET > , hreflang : hreflang :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLLinkElement3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLLinkElement4Impl < > : Sized + IDispatchImpl where { fn Sethref ( ) ; fn href ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLLinkElement4Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLLinkElement4Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLLinkElement4Vtbl < > { unsafe extern "system" fn Sethref < Impl : IHTMLLinkElement4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn href < Impl : IHTMLLinkElement4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Sethref : Sethref :: < Impl , IMPL_OFFSET > , href : href :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLLinkElement4 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLLinkElement5Impl < > : Sized + IDispatchImpl where { fn sheet ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLLinkElement5Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLLinkElement5Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLLinkElement5Vtbl < > { unsafe extern "system" fn sheet < Impl : IHTMLLinkElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , sheet : sheet :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLLinkElement5 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLListElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLListElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLListElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLListElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLListElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLListElement2Impl < > : Sized + IDispatchImpl where { fn Setcompact ( ) ; fn compact ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLListElement2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLListElement2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLListElement2Vtbl < > { unsafe extern "system" fn Setcompact < Impl : IHTMLListElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn compact < Impl : IHTMLListElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setcompact : Setcompact :: < Impl , IMPL_OFFSET > , compact : compact :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLListElement2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLLocationImpl < > : Sized + IDispatchImpl where { fn Sethref ( ) ; fn href ( ) ; fn Setprotocol ( ) ; fn protocol ( ) ; fn Sethost ( ) ; fn host ( ) ; fn Sethostname ( ) ; fn hostname ( ) ; fn Setport ( ) ; fn port ( ) ; fn Setpathname ( ) ; fn pathname ( ) ; fn Setsearch ( ) ; fn search ( ) ; fn Sethash ( ) ; fn hash ( ) ; fn reload ( ) ; fn replace ( ) ; fn assign ( ) ; fn toString ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLLocationVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLLocationImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLLocationVtbl < > { unsafe extern "system" fn Sethref < Impl : IHTMLLocationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn href < Impl : IHTMLLocationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setprotocol < Impl : IHTMLLocationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn protocol < Impl : IHTMLLocationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Sethost < Impl : IHTMLLocationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn host < Impl : IHTMLLocationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Sethostname < Impl : IHTMLLocationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn hostname < Impl : IHTMLLocationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setport < Impl : IHTMLLocationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn port < Impl : IHTMLLocationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setpathname < Impl : IHTMLLocationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn pathname < Impl : IHTMLLocationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setsearch < Impl : IHTMLLocationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn search < Impl : IHTMLLocationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Sethash < Impl : IHTMLLocationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn hash < Impl : IHTMLLocationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn reload < Impl : IHTMLLocationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , flag : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn replace < Impl : IHTMLLocationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstr : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn assign < Impl : IHTMLLocationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstr : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn toString < Impl : IHTMLLocationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , string : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Sethref : Sethref :: < Impl , IMPL_OFFSET > , href : href :: < Impl , IMPL_OFFSET > , Setprotocol : Setprotocol :: < Impl , IMPL_OFFSET > , protocol : protocol :: < Impl , IMPL_OFFSET > , Sethost : Sethost :: < Impl , IMPL_OFFSET > , host : host :: < Impl , IMPL_OFFSET > , Sethostname : Sethostname :: < Impl , IMPL_OFFSET > , hostname : hostname :: < Impl , IMPL_OFFSET > , Setport : Setport :: < Impl , IMPL_OFFSET > , port : port :: < Impl , IMPL_OFFSET > , Setpathname : Setpathname :: < Impl , IMPL_OFFSET > , pathname : pathname :: < Impl , IMPL_OFFSET > , Setsearch : Setsearch :: < Impl , IMPL_OFFSET > , search : search :: < Impl , IMPL_OFFSET > , Sethash : Sethash :: < Impl , IMPL_OFFSET > , hash : hash :: < Impl , IMPL_OFFSET > , reload : reload :: < Impl , IMPL_OFFSET > , replace : replace :: < Impl , IMPL_OFFSET > , assign : assign :: < Impl , IMPL_OFFSET > , toString : toString :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLLocation < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLMSCSSKeyframeRuleImpl < > : Sized + IDispatchImpl where { fn SetkeyText ( ) ; fn keyText ( ) ; fn style ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLMSCSSKeyframeRuleVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLMSCSSKeyframeRuleImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLMSCSSKeyframeRuleVtbl < > { unsafe extern "system" fn SetkeyText < Impl : IHTMLMSCSSKeyframeRuleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn keyText < Impl : IHTMLMSCSSKeyframeRuleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn style < Impl : IHTMLMSCSSKeyframeRuleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetkeyText : SetkeyText :: < Impl , IMPL_OFFSET > , keyText : keyText :: < Impl , IMPL_OFFSET > , style : style :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLMSCSSKeyframeRule < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLMSCSSKeyframesRuleImpl < > : Sized + IDispatchImpl where { fn Setname ( ) ; fn name ( ) ; fn cssRules ( ) ; fn appendRule ( ) ; fn deleteRule ( ) ; fn findRule ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLMSCSSKeyframesRuleVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLMSCSSKeyframesRuleImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLMSCSSKeyframesRuleVtbl < > { unsafe extern "system" fn Setname < Impl : IHTMLMSCSSKeyframesRuleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn name < Impl : IHTMLMSCSSKeyframesRuleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn cssRules < Impl : IHTMLMSCSSKeyframesRuleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn appendRule < Impl : IHTMLMSCSSKeyframesRuleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrrule : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn deleteRule < Impl : IHTMLMSCSSKeyframesRuleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrkey : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn findRule < Impl : IHTMLMSCSSKeyframesRuleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrkey : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ppmskeyframerule : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setname : Setname :: < Impl , IMPL_OFFSET > , name : name :: < Impl , IMPL_OFFSET > , cssRules : cssRules :: < Impl , IMPL_OFFSET > , appendRule : appendRule :: < Impl , IMPL_OFFSET > , deleteRule : deleteRule :: < Impl , IMPL_OFFSET > , findRule : findRule :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLMSCSSKeyframesRule < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLMSImgElementImpl < > : Sized + IDispatchImpl where { fn SetmsPlayToDisabled ( ) ; fn msPlayToDisabled ( ) ; fn SetmsPlayToPrimary ( ) ; fn msPlayToPrimary ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLMSImgElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLMSImgElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLMSImgElementVtbl < > { unsafe extern "system" fn SetmsPlayToDisabled < Impl : IHTMLMSImgElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msPlayToDisabled < Impl : IHTMLMSImgElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsPlayToPrimary < Impl : IHTMLMSImgElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msPlayToPrimary < Impl : IHTMLMSImgElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetmsPlayToDisabled : SetmsPlayToDisabled :: < Impl , IMPL_OFFSET > , msPlayToDisabled : msPlayToDisabled :: < Impl , IMPL_OFFSET > , SetmsPlayToPrimary : SetmsPlayToPrimary :: < Impl , IMPL_OFFSET > , msPlayToPrimary : msPlayToPrimary :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLMSImgElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLMSMediaElementImpl < > : Sized + IDispatchImpl where { fn SetmsPlayToDisabled ( ) ; fn msPlayToDisabled ( ) ; fn SetmsPlayToPrimary ( ) ; fn msPlayToPrimary ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLMSMediaElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLMSMediaElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLMSMediaElementVtbl < > { unsafe extern "system" fn SetmsPlayToDisabled < Impl : IHTMLMSMediaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msPlayToDisabled < Impl : IHTMLMSMediaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsPlayToPrimary < Impl : IHTMLMSMediaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msPlayToPrimary < Impl : IHTMLMSMediaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetmsPlayToDisabled : SetmsPlayToDisabled :: < Impl , IMPL_OFFSET > , msPlayToDisabled : msPlayToDisabled :: < Impl , IMPL_OFFSET > , SetmsPlayToPrimary : SetmsPlayToPrimary :: < Impl , IMPL_OFFSET > , msPlayToPrimary : msPlayToPrimary :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLMSMediaElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLMapElementImpl < > : Sized + IDispatchImpl where { fn areas ( ) ; fn Setname ( ) ; fn name ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLMapElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLMapElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLMapElementVtbl < > { unsafe extern "system" fn areas < Impl : IHTMLMapElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setname < Impl : IHTMLMapElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn name < Impl : IHTMLMapElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , areas : areas :: < Impl , IMPL_OFFSET > , Setname : Setname :: < Impl , IMPL_OFFSET > , name : name :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLMapElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLMarqueeElementImpl < > : Sized + IDispatchImpl where { fn SetbgColor ( ) ; fn bgColor ( ) ; fn SetscrollDelay ( ) ; fn scrollDelay ( ) ; fn Setdirection ( ) ; fn direction ( ) ; fn Setbehavior ( ) ; fn behavior ( ) ; fn SetscrollAmount ( ) ; fn scrollAmount ( ) ; fn Setloop ( ) ; fn r#loop ( ) ; fn Setvspace ( ) ; fn vspace ( ) ; fn Sethspace ( ) ; fn hspace ( ) ; fn Setonfinish ( ) ; fn onfinish ( ) ; fn Setonstart ( ) ; fn onstart ( ) ; fn Setonbounce ( ) ; fn onbounce ( ) ; fn Setwidth ( ) ; fn width ( ) ; fn Setheight ( ) ; fn height ( ) ; fn SettrueSpeed ( ) ; fn trueSpeed ( ) ; fn start ( ) ; fn stop ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLMarqueeElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLMarqueeElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLMarqueeElementVtbl < > { unsafe extern "system" fn SetbgColor < Impl : IHTMLMarqueeElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn bgColor < Impl : IHTMLMarqueeElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetscrollDelay < Impl : IHTMLMarqueeElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scrollDelay < Impl : IHTMLMarqueeElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setdirection < Impl : IHTMLMarqueeElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn direction < Impl : IHTMLMarqueeElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setbehavior < Impl : IHTMLMarqueeElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn behavior < Impl : IHTMLMarqueeElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetscrollAmount < Impl : IHTMLMarqueeElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scrollAmount < Impl : IHTMLMarqueeElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setloop < Impl : IHTMLMarqueeElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn r#loop < Impl : IHTMLMarqueeElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setvspace < Impl : IHTMLMarqueeElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn vspace < Impl : IHTMLMarqueeElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Sethspace < Impl : IHTMLMarqueeElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn hspace < Impl : IHTMLMarqueeElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonfinish < Impl : IHTMLMarqueeElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onfinish < Impl : IHTMLMarqueeElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonstart < Impl : IHTMLMarqueeElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onstart < Impl : IHTMLMarqueeElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonbounce < Impl : IHTMLMarqueeElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onbounce < Impl : IHTMLMarqueeElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setwidth < Impl : IHTMLMarqueeElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn width < Impl : IHTMLMarqueeElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setheight < Impl : IHTMLMarqueeElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn height < Impl : IHTMLMarqueeElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettrueSpeed < Impl : IHTMLMarqueeElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn trueSpeed < Impl : IHTMLMarqueeElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn start < Impl : IHTMLMarqueeElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn stop < Impl : IHTMLMarqueeElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetbgColor : SetbgColor :: < Impl , IMPL_OFFSET > , bgColor : bgColor :: < Impl , IMPL_OFFSET > , SetscrollDelay : SetscrollDelay :: < Impl , IMPL_OFFSET > , scrollDelay : scrollDelay :: < Impl , IMPL_OFFSET > , Setdirection : Setdirection :: < Impl , IMPL_OFFSET > , direction : direction :: < Impl , IMPL_OFFSET > , Setbehavior : Setbehavior :: < Impl , IMPL_OFFSET > , behavior : behavior :: < Impl , IMPL_OFFSET > , SetscrollAmount : SetscrollAmount :: < Impl , IMPL_OFFSET > , scrollAmount : scrollAmount :: < Impl , IMPL_OFFSET > , Setloop : Setloop :: < Impl , IMPL_OFFSET > , r#loop : r#loop :: < Impl , IMPL_OFFSET > , Setvspace : Setvspace :: < Impl , IMPL_OFFSET > , vspace : vspace :: < Impl , IMPL_OFFSET > , Sethspace : Sethspace :: < Impl , IMPL_OFFSET > , hspace : hspace :: < Impl , IMPL_OFFSET > , Setonfinish : Setonfinish :: < Impl , IMPL_OFFSET > , onfinish : onfinish :: < Impl , IMPL_OFFSET > , Setonstart : Setonstart :: < Impl , IMPL_OFFSET > , onstart : onstart :: < Impl , IMPL_OFFSET > , Setonbounce : Setonbounce :: < Impl , IMPL_OFFSET > , onbounce : onbounce :: < Impl , IMPL_OFFSET > , Setwidth : Setwidth :: < Impl , IMPL_OFFSET > , width : width :: < Impl , IMPL_OFFSET > , Setheight : Setheight :: < Impl , IMPL_OFFSET > , height : height :: < Impl , IMPL_OFFSET > , SettrueSpeed : SettrueSpeed :: < Impl , IMPL_OFFSET > , trueSpeed : trueSpeed :: < Impl , IMPL_OFFSET > , start : start :: < Impl , IMPL_OFFSET > , stop : stop :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLMarqueeElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLMediaElementImpl < > : Sized + IDispatchImpl where { fn error ( ) ; fn Setsrc ( ) ; fn src ( ) ; fn currentSrc ( ) ; fn networkState ( ) ; fn Setpreload ( ) ; fn preload ( ) ; fn buffered ( ) ; fn load ( ) ; fn canPlayType ( ) ; fn seeking ( ) ; fn SetcurrentTime ( ) ; fn currentTime ( ) ; fn initialTime ( ) ; fn duration ( ) ; fn paused ( ) ; fn SetdefaultPlaybackRate ( ) ; fn defaultPlaybackRate ( ) ; fn SetplaybackRate ( ) ; fn playbackRate ( ) ; fn played ( ) ; fn seekable ( ) ; fn ended ( ) ; fn Setautoplay ( ) ; fn autoplay ( ) ; fn Setloop ( ) ; fn r#loop ( ) ; fn play ( ) ; fn pause ( ) ; fn Setcontrols ( ) ; fn controls ( ) ; fn Setvolume ( ) ; fn volume ( ) ; fn Setmuted ( ) ; fn muted ( ) ; fn Setautobuffer ( ) ; fn autobuffer ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLMediaElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLMediaElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLMediaElementVtbl < > { unsafe extern "system" fn error < Impl : IHTMLMediaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setsrc < Impl : IHTMLMediaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn src < Impl : IHTMLMediaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn currentSrc < Impl : IHTMLMediaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn networkState < Impl : IHTMLMediaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut u16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setpreload < Impl : IHTMLMediaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn preload < Impl : IHTMLMediaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn buffered < Impl : IHTMLMediaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn load < Impl : IHTMLMediaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn canPlayType < Impl : IHTMLMediaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , r#type : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , canplay : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn seeking < Impl : IHTMLMediaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetcurrentTime < Impl : IHTMLMediaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn currentTime < Impl : IHTMLMediaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn initialTime < Impl : IHTMLMediaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn duration < Impl : IHTMLMediaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn paused < Impl : IHTMLMediaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetdefaultPlaybackRate < Impl : IHTMLMediaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn defaultPlaybackRate < Impl : IHTMLMediaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetplaybackRate < Impl : IHTMLMediaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn playbackRate < Impl : IHTMLMediaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn played < Impl : IHTMLMediaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn seekable < Impl : IHTMLMediaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ended < Impl : IHTMLMediaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setautoplay < Impl : IHTMLMediaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn autoplay < Impl : IHTMLMediaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setloop < Impl : IHTMLMediaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn r#loop < Impl : IHTMLMediaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn play < Impl : IHTMLMediaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn pause < Impl : IHTMLMediaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setcontrols < Impl : IHTMLMediaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn controls < Impl : IHTMLMediaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setvolume < Impl : IHTMLMediaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn volume < Impl : IHTMLMediaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setmuted < Impl : IHTMLMediaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn muted < Impl : IHTMLMediaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setautobuffer < Impl : IHTMLMediaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn autobuffer < Impl : IHTMLMediaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , error : error :: < Impl , IMPL_OFFSET > , Setsrc : Setsrc :: < Impl , IMPL_OFFSET > , src : src :: < Impl , IMPL_OFFSET > , currentSrc : currentSrc :: < Impl , IMPL_OFFSET > , networkState : networkState :: < Impl , IMPL_OFFSET > , Setpreload : Setpreload :: < Impl , IMPL_OFFSET > , preload : preload :: < Impl , IMPL_OFFSET > , buffered : buffered :: < Impl , IMPL_OFFSET > , load : load :: < Impl , IMPL_OFFSET > , canPlayType : canPlayType :: < Impl , IMPL_OFFSET > , seeking : seeking :: < Impl , IMPL_OFFSET > , SetcurrentTime : SetcurrentTime :: < Impl , IMPL_OFFSET > , currentTime : currentTime :: < Impl , IMPL_OFFSET > , initialTime : initialTime :: < Impl , IMPL_OFFSET > , duration : duration :: < Impl , IMPL_OFFSET > , paused : paused :: < Impl , IMPL_OFFSET > , SetdefaultPlaybackRate : SetdefaultPlaybackRate :: < Impl , IMPL_OFFSET > , defaultPlaybackRate : defaultPlaybackRate :: < Impl , IMPL_OFFSET > , SetplaybackRate : SetplaybackRate :: < Impl , IMPL_OFFSET > , playbackRate : playbackRate :: < Impl , IMPL_OFFSET > , played : played :: < Impl , IMPL_OFFSET > , seekable : seekable :: < Impl , IMPL_OFFSET > , ended : ended :: < Impl , IMPL_OFFSET > , Setautoplay : Setautoplay :: < Impl , IMPL_OFFSET > , autoplay : autoplay :: < Impl , IMPL_OFFSET > , Setloop : Setloop :: < Impl , IMPL_OFFSET > , r#loop : r#loop :: < Impl , IMPL_OFFSET > , play : play :: < Impl , IMPL_OFFSET > , pause : pause :: < Impl , IMPL_OFFSET > , Setcontrols : Setcontrols :: < Impl , IMPL_OFFSET > , controls : controls :: < Impl , IMPL_OFFSET > , Setvolume : Setvolume :: < Impl , IMPL_OFFSET > , volume : volume :: < Impl , IMPL_OFFSET > , Setmuted : Setmuted :: < Impl , IMPL_OFFSET > , muted : muted :: < Impl , IMPL_OFFSET > , Setautobuffer : Setautobuffer :: < Impl , IMPL_OFFSET > , autobuffer : autobuffer :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLMediaElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLMediaElement2Impl < > : Sized + IDispatchImpl where { fn SetcurrentTimeDouble ( ) ; fn currentTimeDouble ( ) ; fn initialTimeDouble ( ) ; fn durationDouble ( ) ; fn SetdefaultPlaybackRateDouble ( ) ; fn defaultPlaybackRateDouble ( ) ; fn SetplaybackRateDouble ( ) ; fn playbackRateDouble ( ) ; fn SetvolumeDouble ( ) ; fn volumeDouble ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLMediaElement2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLMediaElement2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLMediaElement2Vtbl < > { unsafe extern "system" fn SetcurrentTimeDouble < Impl : IHTMLMediaElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn currentTimeDouble < Impl : IHTMLMediaElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn initialTimeDouble < Impl : IHTMLMediaElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn durationDouble < Impl : IHTMLMediaElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetdefaultPlaybackRateDouble < Impl : IHTMLMediaElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn defaultPlaybackRateDouble < Impl : IHTMLMediaElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetplaybackRateDouble < Impl : IHTMLMediaElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn playbackRateDouble < Impl : IHTMLMediaElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetvolumeDouble < Impl : IHTMLMediaElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn volumeDouble < Impl : IHTMLMediaElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetcurrentTimeDouble : SetcurrentTimeDouble :: < Impl , IMPL_OFFSET > , currentTimeDouble : currentTimeDouble :: < Impl , IMPL_OFFSET > , initialTimeDouble : initialTimeDouble :: < Impl , IMPL_OFFSET > , durationDouble : durationDouble :: < Impl , IMPL_OFFSET > , SetdefaultPlaybackRateDouble : SetdefaultPlaybackRateDouble :: < Impl , IMPL_OFFSET > , defaultPlaybackRateDouble : defaultPlaybackRateDouble :: < Impl , IMPL_OFFSET > , SetplaybackRateDouble : SetplaybackRateDouble :: < Impl , IMPL_OFFSET > , playbackRateDouble : playbackRateDouble :: < Impl , IMPL_OFFSET > , SetvolumeDouble : SetvolumeDouble :: < Impl , IMPL_OFFSET > , volumeDouble : volumeDouble :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLMediaElement2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLMediaErrorImpl < > : Sized + IDispatchImpl where { fn code ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLMediaErrorVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLMediaErrorImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLMediaErrorVtbl < > { unsafe extern "system" fn code < Impl : IHTMLMediaErrorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , code : code :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLMediaError < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLMetaElementImpl < > : Sized + IDispatchImpl where { fn SethttpEquiv ( ) ; fn httpEquiv ( ) ; fn Setcontent ( ) ; fn content ( ) ; fn Setname ( ) ; fn name ( ) ; fn Seturl ( ) ; fn url ( ) ; fn Setcharset ( ) ; fn charset ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLMetaElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLMetaElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLMetaElementVtbl < > { unsafe extern "system" fn SethttpEquiv < Impl : IHTMLMetaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn httpEquiv < Impl : IHTMLMetaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setcontent < Impl : IHTMLMetaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn content < Impl : IHTMLMetaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setname < Impl : IHTMLMetaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn name < Impl : IHTMLMetaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Seturl < Impl : IHTMLMetaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn url < Impl : IHTMLMetaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setcharset < Impl : IHTMLMetaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn charset < Impl : IHTMLMetaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SethttpEquiv : SethttpEquiv :: < Impl , IMPL_OFFSET > , httpEquiv : httpEquiv :: < Impl , IMPL_OFFSET > , Setcontent : Setcontent :: < Impl , IMPL_OFFSET > , content : content :: < Impl , IMPL_OFFSET > , Setname : Setname :: < Impl , IMPL_OFFSET > , name : name :: < Impl , IMPL_OFFSET > , Seturl : Seturl :: < Impl , IMPL_OFFSET > , url : url :: < Impl , IMPL_OFFSET > , Setcharset : Setcharset :: < Impl , IMPL_OFFSET > , charset : charset :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLMetaElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLMetaElement2Impl < > : Sized + IDispatchImpl where { fn Setscheme ( ) ; fn scheme ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLMetaElement2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLMetaElement2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLMetaElement2Vtbl < > { unsafe extern "system" fn Setscheme < Impl : IHTMLMetaElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scheme < Impl : IHTMLMetaElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setscheme : Setscheme :: < Impl , IMPL_OFFSET > , scheme : scheme :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLMetaElement2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLMetaElement3Impl < > : Sized + IDispatchImpl where { fn Seturl ( ) ; fn url ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLMetaElement3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLMetaElement3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLMetaElement3Vtbl < > { unsafe extern "system" fn Seturl < Impl : IHTMLMetaElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn url < Impl : IHTMLMetaElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Seturl : Seturl :: < Impl , IMPL_OFFSET > , url : url :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLMetaElement3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLMimeTypesCollectionImpl < > : Sized + IDispatchImpl where { fn length ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLMimeTypesCollectionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLMimeTypesCollectionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLMimeTypesCollectionVtbl < > { unsafe extern "system" fn length < Impl : IHTMLMimeTypesCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , length : length :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLMimeTypesCollection < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLModelessInitImpl < > : Sized + IDispatchImpl where { fn parameters ( ) ; fn optionString ( ) ; fn moniker ( ) ; fn document ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLModelessInitVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLModelessInitImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLModelessInitVtbl < > { unsafe extern "system" fn parameters < Impl : IHTMLModelessInitImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn optionString < Impl : IHTMLModelessInitImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn moniker < Impl : IHTMLModelessInitImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn document < Impl : IHTMLModelessInitImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , parameters : parameters :: < Impl , IMPL_OFFSET > , optionString : optionString :: < Impl , IMPL_OFFSET > , moniker : moniker :: < Impl , IMPL_OFFSET > , document : document :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLModelessInit < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLNamespaceImpl < > : Sized + IDispatchImpl where { fn name ( ) ; fn urn ( ) ; fn tagNames ( ) ; fn readyState ( ) ; fn Setonreadystatechange ( ) ; fn onreadystatechange ( ) ; fn doImport ( ) ; fn attachEvent ( ) ; fn detachEvent ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLNamespaceVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLNamespaceImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLNamespaceVtbl < > { unsafe extern "system" fn name < Impl : IHTMLNamespaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn urn < Impl : IHTMLNamespaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn tagNames < Impl : IHTMLNamespaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn readyState < Impl : IHTMLNamespaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonreadystatechange < Impl : IHTMLNamespaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onreadystatechange < Impl : IHTMLNamespaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn doImport < Impl : IHTMLNamespaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrimplementationurl : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn attachEvent < Impl : IHTMLNamespaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , event : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pdisp : :: windows :: core :: RawPtr , pfresult : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn detachEvent < Impl : IHTMLNamespaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , event : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pdisp : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , name : name :: < Impl , IMPL_OFFSET > , urn : urn :: < Impl , IMPL_OFFSET > , tagNames : tagNames :: < Impl , IMPL_OFFSET > , readyState : readyState :: < Impl , IMPL_OFFSET > , Setonreadystatechange : Setonreadystatechange :: < Impl , IMPL_OFFSET > , onreadystatechange : onreadystatechange :: < Impl , IMPL_OFFSET > , doImport : doImport :: < Impl , IMPL_OFFSET > , attachEvent : attachEvent :: < Impl , IMPL_OFFSET > , detachEvent : detachEvent :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLNamespace < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLNamespaceCollectionImpl < > : Sized + IDispatchImpl where { fn length ( ) ; fn item ( ) ; fn add ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLNamespaceCollectionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLNamespaceCollectionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLNamespaceCollectionVtbl < > { unsafe extern "system" fn length < Impl : IHTMLNamespaceCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn item < Impl : IHTMLNamespaceCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ppnamespace : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn add < Impl : IHTMLNamespaceCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrnamespace : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , bstrurn : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , implementationurl : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ppnamespace : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , length : length :: < Impl , IMPL_OFFSET > , item : item :: < Impl , IMPL_OFFSET > , add : add :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLNamespaceCollection < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLNextIdElementImpl < > : Sized + IDispatchImpl where { fn Setn ( ) ; fn n ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLNextIdElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLNextIdElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLNextIdElementVtbl < > { unsafe extern "system" fn Setn < Impl : IHTMLNextIdElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn n < Impl : IHTMLNextIdElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setn : Setn :: < Impl , IMPL_OFFSET > , n : n :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLNextIdElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLNoShowElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLNoShowElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLNoShowElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLNoShowElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLNoShowElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLOListElementImpl < > : Sized + IDispatchImpl where { fn Setcompact ( ) ; fn compact ( ) ; fn Setstart ( ) ; fn start ( ) ; fn Settype ( ) ; fn r#type ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLOListElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLOListElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLOListElementVtbl < > { unsafe extern "system" fn Setcompact < Impl : IHTMLOListElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn compact < Impl : IHTMLOListElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setstart < Impl : IHTMLOListElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn start < Impl : IHTMLOListElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Settype < Impl : IHTMLOListElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn r#type < Impl : IHTMLOListElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setcompact : Setcompact :: < Impl , IMPL_OFFSET > , compact : compact :: < Impl , IMPL_OFFSET > , Setstart : Setstart :: < Impl , IMPL_OFFSET > , start : start :: < Impl , IMPL_OFFSET > , Settype : Settype :: < Impl , IMPL_OFFSET > , r#type : r#type :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLOListElement < > as :: windows :: core :: Interface > :: IID } } pub trait IHTMLOMWindowServicesImpl < > : Sized where { fn moveTo ( ) ; fn moveBy ( ) ; fn resizeTo ( ) ; fn resizeBy ( ) ; } impl < > IHTMLOMWindowServicesVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLOMWindowServicesImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLOMWindowServicesVtbl < > { unsafe extern "system" fn moveTo < Impl : IHTMLOMWindowServicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , x : i32 , y : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn moveBy < Impl : IHTMLOMWindowServicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , x : i32 , y : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn resizeTo < Impl : IHTMLOMWindowServicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , x : i32 , y : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn resizeBy < Impl : IHTMLOMWindowServicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , x : i32 , y : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , moveTo : moveTo :: < Impl , IMPL_OFFSET > , moveBy : moveBy :: < Impl , IMPL_OFFSET > , resizeTo : resizeTo :: < Impl , IMPL_OFFSET > , resizeBy : resizeBy :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLOMWindowServices < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLObjectElementImpl < > : Sized + IDispatchImpl where { fn object ( ) ; fn classid ( ) ; fn data ( ) ; fn putref_recordset ( ) ; fn recordset ( ) ; fn Setalign ( ) ; fn align ( ) ; fn Setname ( ) ; fn name ( ) ; fn SetcodeBase ( ) ; fn codeBase ( ) ; fn SetcodeType ( ) ; fn codeType ( ) ; fn Setcode ( ) ; fn code ( ) ; fn BaseHref ( ) ; fn Settype ( ) ; fn r#type ( ) ; fn form ( ) ; fn Setwidth ( ) ; fn width ( ) ; fn Setheight ( ) ; fn height ( ) ; fn readyState ( ) ; fn Setonreadystatechange ( ) ; fn onreadystatechange ( ) ; fn Setonerror ( ) ; fn onerror ( ) ; fn SetaltHtml ( ) ; fn altHtml ( ) ; fn Setvspace ( ) ; fn vspace ( ) ; fn Sethspace ( ) ; fn hspace ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLObjectElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLObjectElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLObjectElementVtbl < > { unsafe extern "system" fn object < Impl : IHTMLObjectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn classid < Impl : IHTMLObjectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn data < Impl : IHTMLObjectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_recordset < Impl : IHTMLObjectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn recordset < Impl : IHTMLObjectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setalign < Impl : IHTMLObjectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn align < Impl : IHTMLObjectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setname < Impl : IHTMLObjectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn name < Impl : IHTMLObjectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetcodeBase < Impl : IHTMLObjectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn codeBase < Impl : IHTMLObjectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetcodeType < Impl : IHTMLObjectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn codeType < Impl : IHTMLObjectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setcode < Impl : IHTMLObjectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn code < Impl : IHTMLObjectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BaseHref < Impl : IHTMLObjectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Settype < Impl : IHTMLObjectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn r#type < Impl : IHTMLObjectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn form < Impl : IHTMLObjectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setwidth < Impl : IHTMLObjectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn width < Impl : IHTMLObjectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setheight < Impl : IHTMLObjectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn height < Impl : IHTMLObjectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn readyState < Impl : IHTMLObjectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonreadystatechange < Impl : IHTMLObjectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onreadystatechange < Impl : IHTMLObjectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonerror < Impl : IHTMLObjectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onerror < Impl : IHTMLObjectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetaltHtml < Impl : IHTMLObjectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn altHtml < Impl : IHTMLObjectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setvspace < Impl : IHTMLObjectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn vspace < Impl : IHTMLObjectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Sethspace < Impl : IHTMLObjectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn hspace < Impl : IHTMLObjectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , object : object :: < Impl , IMPL_OFFSET > , classid : classid :: < Impl , IMPL_OFFSET > , data : data :: < Impl , IMPL_OFFSET > , putref_recordset : putref_recordset :: < Impl , IMPL_OFFSET > , recordset : recordset :: < Impl , IMPL_OFFSET > , Setalign : Setalign :: < Impl , IMPL_OFFSET > , align : align :: < Impl , IMPL_OFFSET > , Setname : Setname :: < Impl , IMPL_OFFSET > , name : name :: < Impl , IMPL_OFFSET > , SetcodeBase : SetcodeBase :: < Impl , IMPL_OFFSET > , codeBase : codeBase :: < Impl , IMPL_OFFSET > , SetcodeType : SetcodeType :: < Impl , IMPL_OFFSET > , codeType : codeType :: < Impl , IMPL_OFFSET > , Setcode : Setcode :: < Impl , IMPL_OFFSET > , code : code :: < Impl , IMPL_OFFSET > , BaseHref : BaseHref :: < Impl , IMPL_OFFSET > , Settype : Settype :: < Impl , IMPL_OFFSET > , r#type : r#type :: < Impl , IMPL_OFFSET > , form : form :: < Impl , IMPL_OFFSET > , Setwidth : Setwidth :: < Impl , IMPL_OFFSET > , width : width :: < Impl , IMPL_OFFSET > , Setheight : Setheight :: < Impl , IMPL_OFFSET > , height : height :: < Impl , IMPL_OFFSET > , readyState : readyState :: < Impl , IMPL_OFFSET > , Setonreadystatechange : Setonreadystatechange :: < Impl , IMPL_OFFSET > , onreadystatechange : onreadystatechange :: < Impl , IMPL_OFFSET > , Setonerror : Setonerror :: < Impl , IMPL_OFFSET > , onerror : onerror :: < Impl , IMPL_OFFSET > , SetaltHtml : SetaltHtml :: < Impl , IMPL_OFFSET > , altHtml : altHtml :: < Impl , IMPL_OFFSET > , Setvspace : Setvspace :: < Impl , IMPL_OFFSET > , vspace : vspace :: < Impl , IMPL_OFFSET > , Sethspace : Sethspace :: < Impl , IMPL_OFFSET > , hspace : hspace :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLObjectElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLObjectElement2Impl < > : Sized + IDispatchImpl where { fn namedRecordset ( ) ; fn Setclassid ( ) ; fn classid ( ) ; fn Setdata ( ) ; fn data ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLObjectElement2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLObjectElement2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLObjectElement2Vtbl < > { unsafe extern "system" fn namedRecordset < Impl : IHTMLObjectElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , datamember : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , hierarchy : * const super::super::System::Com:: VARIANT , pprecordset : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setclassid < Impl : IHTMLObjectElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn classid < Impl : IHTMLObjectElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setdata < Impl : IHTMLObjectElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn data < Impl : IHTMLObjectElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , namedRecordset : namedRecordset :: < Impl , IMPL_OFFSET > , Setclassid : Setclassid :: < Impl , IMPL_OFFSET > , classid : classid :: < Impl , IMPL_OFFSET > , Setdata : Setdata :: < Impl , IMPL_OFFSET > , data : data :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLObjectElement2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLObjectElement3Impl < > : Sized + IDispatchImpl where { fn Setarchive ( ) ; fn archive ( ) ; fn Setalt ( ) ; fn alt ( ) ; fn Setdeclare ( ) ; fn declare ( ) ; fn Setstandby ( ) ; fn standby ( ) ; fn Setborder ( ) ; fn border ( ) ; fn SetuseMap ( ) ; fn useMap ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLObjectElement3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLObjectElement3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLObjectElement3Vtbl < > { unsafe extern "system" fn Setarchive < Impl : IHTMLObjectElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn archive < Impl : IHTMLObjectElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setalt < Impl : IHTMLObjectElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn alt < Impl : IHTMLObjectElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setdeclare < Impl : IHTMLObjectElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn declare < Impl : IHTMLObjectElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setstandby < Impl : IHTMLObjectElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn standby < Impl : IHTMLObjectElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setborder < Impl : IHTMLObjectElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn border < Impl : IHTMLObjectElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetuseMap < Impl : IHTMLObjectElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn useMap < Impl : IHTMLObjectElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setarchive : Setarchive :: < Impl , IMPL_OFFSET > , archive : archive :: < Impl , IMPL_OFFSET > , Setalt : Setalt :: < Impl , IMPL_OFFSET > , alt : alt :: < Impl , IMPL_OFFSET > , Setdeclare : Setdeclare :: < Impl , IMPL_OFFSET > , declare : declare :: < Impl , IMPL_OFFSET > , Setstandby : Setstandby :: < Impl , IMPL_OFFSET > , standby : standby :: < Impl , IMPL_OFFSET > , Setborder : Setborder :: < Impl , IMPL_OFFSET > , border : border :: < Impl , IMPL_OFFSET > , SetuseMap : SetuseMap :: < Impl , IMPL_OFFSET > , useMap : useMap :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLObjectElement3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLObjectElement4Impl < > : Sized + IDispatchImpl where { fn contentDocument ( ) ; fn SetcodeBase ( ) ; fn codeBase ( ) ; fn Setdata ( ) ; fn data ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLObjectElement4Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLObjectElement4Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLObjectElement4Vtbl < > { unsafe extern "system" fn contentDocument < Impl : IHTMLObjectElement4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetcodeBase < Impl : IHTMLObjectElement4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn codeBase < Impl : IHTMLObjectElement4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setdata < Impl : IHTMLObjectElement4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn data < Impl : IHTMLObjectElement4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , contentDocument : contentDocument :: < Impl , IMPL_OFFSET > , SetcodeBase : SetcodeBase :: < Impl , IMPL_OFFSET > , codeBase : codeBase :: < Impl , IMPL_OFFSET > , Setdata : Setdata :: < Impl , IMPL_OFFSET > , data : data :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLObjectElement4 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLObjectElement5Impl < > : Sized + IDispatchImpl where { fn Setobject ( ) ; fn object ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLObjectElement5Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLObjectElement5Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLObjectElement5Vtbl < > { unsafe extern "system" fn Setobject < Impl : IHTMLObjectElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn object < Impl : IHTMLObjectElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setobject : Setobject :: < Impl , IMPL_OFFSET > , object : object :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLObjectElement5 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLOpsProfileImpl < > : Sized + IDispatchImpl where { fn addRequest ( ) ; fn clearRequest ( ) ; fn doRequest ( ) ; fn getAttribute ( ) ; fn setAttribute ( ) ; fn commitChanges ( ) ; fn addReadRequest ( ) ; fn doReadRequest ( ) ; fn doWriteRequest ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLOpsProfileVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLOpsProfileImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLOpsProfileVtbl < > { unsafe extern "system" fn addRequest < Impl : IHTMLOpsProfileImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , name : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , reserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , success : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clearRequest < Impl : IHTMLOpsProfileImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn doRequest < Impl : IHTMLOpsProfileImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , usage : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , fname : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , domain : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , path : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , expire : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , reserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getAttribute < Impl : IHTMLOpsProfileImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , name : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , value : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn setAttribute < Impl : IHTMLOpsProfileImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , name : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , value : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , prefs : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , success : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn commitChanges < Impl : IHTMLOpsProfileImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , success : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn addReadRequest < Impl : IHTMLOpsProfileImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , name : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , reserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , success : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn doReadRequest < Impl : IHTMLOpsProfileImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , usage : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , fname : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , domain : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , path : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , expire : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , reserved : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn doWriteRequest < Impl : IHTMLOpsProfileImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , success : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , addRequest : addRequest :: < Impl , IMPL_OFFSET > , clearRequest : clearRequest :: < Impl , IMPL_OFFSET > , doRequest : doRequest :: < Impl , IMPL_OFFSET > , getAttribute : getAttribute :: < Impl , IMPL_OFFSET > , setAttribute : setAttribute :: < Impl , IMPL_OFFSET > , commitChanges : commitChanges :: < Impl , IMPL_OFFSET > , addReadRequest : addReadRequest :: < Impl , IMPL_OFFSET > , doReadRequest : doReadRequest :: < Impl , IMPL_OFFSET > , doWriteRequest : doWriteRequest :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLOpsProfile < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLOptionButtonElementImpl < > : Sized + IDispatchImpl where { fn Setvalue ( ) ; fn value ( ) ; fn r#type ( ) ; fn Setname ( ) ; fn name ( ) ; fn Setchecked ( ) ; fn checked ( ) ; fn SetdefaultChecked ( ) ; fn defaultChecked ( ) ; fn Setonchange ( ) ; fn onchange ( ) ; fn Setdisabled ( ) ; fn disabled ( ) ; fn Setstatus ( ) ; fn status ( ) ; fn Setindeterminate ( ) ; fn indeterminate ( ) ; fn form ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLOptionButtonElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLOptionButtonElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLOptionButtonElementVtbl < > { unsafe extern "system" fn Setvalue < Impl : IHTMLOptionButtonElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn value < Impl : IHTMLOptionButtonElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn r#type < Impl : IHTMLOptionButtonElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setname < Impl : IHTMLOptionButtonElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn name < Impl : IHTMLOptionButtonElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setchecked < Impl : IHTMLOptionButtonElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn checked < Impl : IHTMLOptionButtonElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetdefaultChecked < Impl : IHTMLOptionButtonElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn defaultChecked < Impl : IHTMLOptionButtonElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonchange < Impl : IHTMLOptionButtonElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onchange < Impl : IHTMLOptionButtonElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setdisabled < Impl : IHTMLOptionButtonElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn disabled < Impl : IHTMLOptionButtonElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setstatus < Impl : IHTMLOptionButtonElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn status < Impl : IHTMLOptionButtonElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setindeterminate < Impl : IHTMLOptionButtonElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn indeterminate < Impl : IHTMLOptionButtonElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn form < Impl : IHTMLOptionButtonElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setvalue : Setvalue :: < Impl , IMPL_OFFSET > , value : value :: < Impl , IMPL_OFFSET > , r#type : r#type :: < Impl , IMPL_OFFSET > , Setname : Setname :: < Impl , IMPL_OFFSET > , name : name :: < Impl , IMPL_OFFSET > , Setchecked : Setchecked :: < Impl , IMPL_OFFSET > , checked : checked :: < Impl , IMPL_OFFSET > , SetdefaultChecked : SetdefaultChecked :: < Impl , IMPL_OFFSET > , defaultChecked : defaultChecked :: < Impl , IMPL_OFFSET > , Setonchange : Setonchange :: < Impl , IMPL_OFFSET > , onchange : onchange :: < Impl , IMPL_OFFSET > , Setdisabled : Setdisabled :: < Impl , IMPL_OFFSET > , disabled : disabled :: < Impl , IMPL_OFFSET > , Setstatus : Setstatus :: < Impl , IMPL_OFFSET > , status : status :: < Impl , IMPL_OFFSET > , Setindeterminate : Setindeterminate :: < Impl , IMPL_OFFSET > , indeterminate : indeterminate :: < Impl , IMPL_OFFSET > , form : form :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLOptionButtonElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLOptionElementImpl < > : Sized + IDispatchImpl where { fn Setselected ( ) ; fn selected ( ) ; fn Setvalue ( ) ; fn value ( ) ; fn SetdefaultSelected ( ) ; fn defaultSelected ( ) ; fn Setindex ( ) ; fn index ( ) ; fn Settext ( ) ; fn text ( ) ; fn form ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLOptionElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLOptionElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLOptionElementVtbl < > { unsafe extern "system" fn Setselected < Impl : IHTMLOptionElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn selected < Impl : IHTMLOptionElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setvalue < Impl : IHTMLOptionElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn value < Impl : IHTMLOptionElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetdefaultSelected < Impl : IHTMLOptionElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn defaultSelected < Impl : IHTMLOptionElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setindex < Impl : IHTMLOptionElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn index < Impl : IHTMLOptionElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Settext < Impl : IHTMLOptionElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn text < Impl : IHTMLOptionElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn form < Impl : IHTMLOptionElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setselected : Setselected :: < Impl , IMPL_OFFSET > , selected : selected :: < Impl , IMPL_OFFSET > , Setvalue : Setvalue :: < Impl , IMPL_OFFSET > , value : value :: < Impl , IMPL_OFFSET > , SetdefaultSelected : SetdefaultSelected :: < Impl , IMPL_OFFSET > , defaultSelected : defaultSelected :: < Impl , IMPL_OFFSET > , Setindex : Setindex :: < Impl , IMPL_OFFSET > , index : index :: < Impl , IMPL_OFFSET > , Settext : Settext :: < Impl , IMPL_OFFSET > , text : text :: < Impl , IMPL_OFFSET > , form : form :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLOptionElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLOptionElement3Impl < > : Sized + IDispatchImpl where { fn Setlabel ( ) ; fn label ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLOptionElement3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLOptionElement3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLOptionElement3Vtbl < > { unsafe extern "system" fn Setlabel < Impl : IHTMLOptionElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn label < Impl : IHTMLOptionElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setlabel : Setlabel :: < Impl , IMPL_OFFSET > , label : label :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLOptionElement3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLOptionElement4Impl < > : Sized + IDispatchImpl where { fn Setvalue ( ) ; fn value ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLOptionElement4Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLOptionElement4Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLOptionElement4Vtbl < > { unsafe extern "system" fn Setvalue < Impl : IHTMLOptionElement4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn value < Impl : IHTMLOptionElement4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setvalue : Setvalue :: < Impl , IMPL_OFFSET > , value : value :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLOptionElement4 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLOptionElementFactoryImpl < > : Sized + IDispatchImpl where { fn create ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLOptionElementFactoryVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLOptionElementFactoryImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLOptionElementFactoryVtbl < > { unsafe extern "system" fn create < Impl : IHTMLOptionElementFactoryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , text : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , value : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , defaultselected : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , selected : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , __midl__ihtmloptionelementfactory0000 : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , create : create :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLOptionElementFactory < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLOptionsHolderImpl < > : Sized + IDispatchImpl where { fn document ( ) ; fn fonts ( ) ; fn SetexecArg ( ) ; fn execArg ( ) ; fn SeterrorLine ( ) ; fn errorLine ( ) ; fn SeterrorCharacter ( ) ; fn errorCharacter ( ) ; fn SeterrorCode ( ) ; fn errorCode ( ) ; fn SeterrorMessage ( ) ; fn errorMessage ( ) ; fn SeterrorDebug ( ) ; fn errorDebug ( ) ; fn unsecuredWindowOfDocument ( ) ; fn SetfindText ( ) ; fn findText ( ) ; fn SetanythingAfterFrameset ( ) ; fn anythingAfterFrameset ( ) ; fn sizes ( ) ; fn openfiledlg ( ) ; fn savefiledlg ( ) ; fn choosecolordlg ( ) ; fn showSecurityInfo ( ) ; fn isApartmentModel ( ) ; fn getCharset ( ) ; fn secureConnectionInfo ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLOptionsHolderVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLOptionsHolderImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLOptionsHolderVtbl < > { unsafe extern "system" fn document < Impl : IHTMLOptionsHolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn fonts < Impl : IHTMLOptionsHolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetexecArg < Impl : IHTMLOptionsHolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn execArg < Impl : IHTMLOptionsHolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SeterrorLine < Impl : IHTMLOptionsHolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn errorLine < Impl : IHTMLOptionsHolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SeterrorCharacter < Impl : IHTMLOptionsHolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn errorCharacter < Impl : IHTMLOptionsHolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SeterrorCode < Impl : IHTMLOptionsHolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn errorCode < Impl : IHTMLOptionsHolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SeterrorMessage < Impl : IHTMLOptionsHolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn errorMessage < Impl : IHTMLOptionsHolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SeterrorDebug < Impl : IHTMLOptionsHolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn errorDebug < Impl : IHTMLOptionsHolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn unsecuredWindowOfDocument < Impl : IHTMLOptionsHolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetfindText < Impl : IHTMLOptionsHolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn findText < Impl : IHTMLOptionsHolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetanythingAfterFrameset < Impl : IHTMLOptionsHolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn anythingAfterFrameset < Impl : IHTMLOptionsHolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn sizes < Impl : IHTMLOptionsHolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fontname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , psizescollection : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn openfiledlg < Impl : IHTMLOptionsHolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , initfile : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , initdir : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , filter : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , title : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , pathname : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn savefiledlg < Impl : IHTMLOptionsHolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , initfile : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , initdir : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , filter : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , title : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , pathname : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn choosecolordlg < Impl : IHTMLOptionsHolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , initcolor : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , rgbcolor : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn showSecurityInfo < Impl : IHTMLOptionsHolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn isApartmentModel < Impl : IHTMLOptionsHolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , object : :: windows :: core :: RawPtr , fapartment : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getCharset < Impl : IHTMLOptionsHolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fontname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , charset : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn secureConnectionInfo < Impl : IHTMLOptionsHolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , document : document :: < Impl , IMPL_OFFSET > , fonts : fonts :: < Impl , IMPL_OFFSET > , SetexecArg : SetexecArg :: < Impl , IMPL_OFFSET > , execArg : execArg :: < Impl , IMPL_OFFSET > , SeterrorLine : SeterrorLine :: < Impl , IMPL_OFFSET > , errorLine : errorLine :: < Impl , IMPL_OFFSET > , SeterrorCharacter : SeterrorCharacter :: < Impl , IMPL_OFFSET > , errorCharacter : errorCharacter :: < Impl , IMPL_OFFSET > , SeterrorCode : SeterrorCode :: < Impl , IMPL_OFFSET > , errorCode : errorCode :: < Impl , IMPL_OFFSET > , SeterrorMessage : SeterrorMessage :: < Impl , IMPL_OFFSET > , errorMessage : errorMessage :: < Impl , IMPL_OFFSET > , SeterrorDebug : SeterrorDebug :: < Impl , IMPL_OFFSET > , errorDebug : errorDebug :: < Impl , IMPL_OFFSET > , unsecuredWindowOfDocument : unsecuredWindowOfDocument :: < Impl , IMPL_OFFSET > , SetfindText : SetfindText :: < Impl , IMPL_OFFSET > , findText : findText :: < Impl , IMPL_OFFSET > , SetanythingAfterFrameset : SetanythingAfterFrameset :: < Impl , IMPL_OFFSET > , anythingAfterFrameset : anythingAfterFrameset :: < Impl , IMPL_OFFSET > , sizes : sizes :: < Impl , IMPL_OFFSET > , openfiledlg : openfiledlg :: < Impl , IMPL_OFFSET > , savefiledlg : savefiledlg :: < Impl , IMPL_OFFSET > , choosecolordlg : choosecolordlg :: < Impl , IMPL_OFFSET > , showSecurityInfo : showSecurityInfo :: < Impl , IMPL_OFFSET > , isApartmentModel : isApartmentModel :: < Impl , IMPL_OFFSET > , getCharset : getCharset :: < Impl , IMPL_OFFSET > , secureConnectionInfo : secureConnectionInfo :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLOptionsHolder < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" ) ) ] pub trait IHTMLPaintSiteImpl < > : Sized where { fn InvalidatePainterInfo ( ) ; fn InvalidateRect ( ) ; fn InvalidateRegion ( ) ; fn GetDrawInfo ( ) ; fn TransformGlobalToLocal ( ) ; fn TransformLocalToGlobal ( ) ; fn GetHitTestCookie ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" ) ) ] impl < > IHTMLPaintSiteVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLPaintSiteImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLPaintSiteVtbl < > { unsafe extern "system" fn InvalidatePainterInfo < Impl : IHTMLPaintSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn InvalidateRect < Impl : IHTMLPaintSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , prcinvalid : * const super::super::Foundation:: RECT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn InvalidateRegion < Impl : IHTMLPaintSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , rgninvalid : super::super::Graphics::Gdi:: HRGN , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetDrawInfo < Impl : IHTMLPaintSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lflags : i32 , pdrawinfo : * mut HTML_PAINT_DRAW_INFO , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn TransformGlobalToLocal < Impl : IHTMLPaintSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ptglobal : super::super::Foundation:: POINT , pptlocal : * mut super::super::Foundation:: POINT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn TransformLocalToGlobal < Impl : IHTMLPaintSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ptlocal : super::super::Foundation:: POINT , pptglobal : * mut super::super::Foundation:: POINT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetHitTestCookie < Impl : IHTMLPaintSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plcookie : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , InvalidatePainterInfo : InvalidatePainterInfo :: < Impl , IMPL_OFFSET > , InvalidateRect : InvalidateRect :: < Impl , IMPL_OFFSET > , InvalidateRegion : InvalidateRegion :: < Impl , IMPL_OFFSET > , GetDrawInfo : GetDrawInfo :: < Impl , IMPL_OFFSET > , TransformGlobalToLocal : TransformGlobalToLocal :: < Impl , IMPL_OFFSET > , TransformLocalToGlobal : TransformLocalToGlobal :: < Impl , IMPL_OFFSET > , GetHitTestCookie : GetHitTestCookie :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLPaintSite < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" ) ) ] pub trait IHTMLPainterImpl < > : Sized where { fn Draw ( ) ; fn OnResize ( ) ; fn GetPainterInfo ( ) ; fn HitTestPoint ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Gdi" ) ) ] impl < > IHTMLPainterVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLPainterImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLPainterVtbl < > { unsafe extern "system" fn Draw < Impl : IHTMLPainterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , rcbounds : super::super::Foundation:: RECT , rcupdate : super::super::Foundation:: RECT , ldrawflags : i32 , hdc : super::super::Graphics::Gdi:: HDC , pvdrawobject : * const :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnResize < Impl : IHTMLPainterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , size : super::super::Foundation:: SIZE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetPainterInfo < Impl : IHTMLPainterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pinfo : * mut HTML_PAINTER_INFO , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HitTestPoint < Impl : IHTMLPainterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pt : super::super::Foundation:: POINT , pbhit : * mut super::super::Foundation:: BOOL , plpartid : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Draw : Draw :: < Impl , IMPL_OFFSET > , OnResize : OnResize :: < Impl , IMPL_OFFSET > , GetPainterInfo : GetPainterInfo :: < Impl , IMPL_OFFSET > , HitTestPoint : HitTestPoint :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLPainter < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IHTMLPainterEventInfoImpl < > : Sized where { fn GetEventInfoFlags ( ) ; fn GetEventTarget ( ) ; fn SetCursor ( ) ; fn StringFromPartID ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IHTMLPainterEventInfoVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLPainterEventInfoImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLPainterEventInfoVtbl < > { unsafe extern "system" fn GetEventInfoFlags < Impl : IHTMLPainterEventInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pleventinfoflags : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetEventTarget < Impl : IHTMLPainterEventInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppelement : * const :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetCursor < Impl : IHTMLPainterEventInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpartid : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn StringFromPartID < Impl : IHTMLPainterEventInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpartid : i32 , pbstrpart : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetEventInfoFlags : GetEventInfoFlags :: < Impl , IMPL_OFFSET > , GetEventTarget : GetEventTarget :: < Impl , IMPL_OFFSET > , SetCursor : SetCursor :: < Impl , IMPL_OFFSET > , StringFromPartID : StringFromPartID :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLPainterEventInfo < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IHTMLPainterOverlayImpl < > : Sized where { fn OnMove ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IHTMLPainterOverlayVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLPainterOverlayImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLPainterOverlayVtbl < > { unsafe extern "system" fn OnMove < Impl : IHTMLPainterOverlayImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , rcdevice : super::super::Foundation:: RECT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , OnMove : OnMove :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLPainterOverlay < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLParaElementImpl < > : Sized + IDispatchImpl where { fn Setalign ( ) ; fn align ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLParaElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLParaElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLParaElementVtbl < > { unsafe extern "system" fn Setalign < Impl : IHTMLParaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn align < Impl : IHTMLParaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setalign : Setalign :: < Impl , IMPL_OFFSET > , align : align :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLParaElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLParamElementImpl < > : Sized + IDispatchImpl where { fn Setname ( ) ; fn name ( ) ; fn Setvalue ( ) ; fn value ( ) ; fn Settype ( ) ; fn r#type ( ) ; fn SetvalueType ( ) ; fn valueType ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLParamElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLParamElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLParamElementVtbl < > { unsafe extern "system" fn Setname < Impl : IHTMLParamElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn name < Impl : IHTMLParamElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setvalue < Impl : IHTMLParamElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn value < Impl : IHTMLParamElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Settype < Impl : IHTMLParamElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn r#type < Impl : IHTMLParamElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetvalueType < Impl : IHTMLParamElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn valueType < Impl : IHTMLParamElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setname : Setname :: < Impl , IMPL_OFFSET > , name : name :: < Impl , IMPL_OFFSET > , Setvalue : Setvalue :: < Impl , IMPL_OFFSET > , value : value :: < Impl , IMPL_OFFSET > , Settype : Settype :: < Impl , IMPL_OFFSET > , r#type : r#type :: < Impl , IMPL_OFFSET > , SetvalueType : SetvalueType :: < Impl , IMPL_OFFSET > , valueType : valueType :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLParamElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLParamElement2Impl < > : Sized + IDispatchImpl where { fn Setname ( ) ; fn name ( ) ; fn Settype ( ) ; fn r#type ( ) ; fn Setvalue ( ) ; fn value ( ) ; fn SetvalueType ( ) ; fn valueType ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLParamElement2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLParamElement2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLParamElement2Vtbl < > { unsafe extern "system" fn Setname < Impl : IHTMLParamElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn name < Impl : IHTMLParamElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Settype < Impl : IHTMLParamElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn r#type < Impl : IHTMLParamElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setvalue < Impl : IHTMLParamElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn value < Impl : IHTMLParamElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetvalueType < Impl : IHTMLParamElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn valueType < Impl : IHTMLParamElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setname : Setname :: < Impl , IMPL_OFFSET > , name : name :: < Impl , IMPL_OFFSET > , Settype : Settype :: < Impl , IMPL_OFFSET > , r#type : r#type :: < Impl , IMPL_OFFSET > , Setvalue : Setvalue :: < Impl , IMPL_OFFSET > , value : value :: < Impl , IMPL_OFFSET > , SetvalueType : SetvalueType :: < Impl , IMPL_OFFSET > , valueType : valueType :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLParamElement2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLPerformanceImpl < > : Sized + IDispatchImpl where { fn navigation ( ) ; fn timing ( ) ; fn toString ( ) ; fn toJSON ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLPerformanceVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLPerformanceImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLPerformanceVtbl < > { unsafe extern "system" fn navigation < Impl : IHTMLPerformanceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn timing < Impl : IHTMLPerformanceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn toString < Impl : IHTMLPerformanceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , string : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn toJSON < Impl : IHTMLPerformanceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvar : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , navigation : navigation :: < Impl , IMPL_OFFSET > , timing : timing :: < Impl , IMPL_OFFSET > , toString : toString :: < Impl , IMPL_OFFSET > , toJSON : toJSON :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLPerformance < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLPerformanceNavigationImpl < > : Sized + IDispatchImpl where { fn r#type ( ) ; fn redirectCount ( ) ; fn toString ( ) ; fn toJSON ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLPerformanceNavigationVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLPerformanceNavigationImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLPerformanceNavigationVtbl < > { unsafe extern "system" fn r#type < Impl : IHTMLPerformanceNavigationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn redirectCount < Impl : IHTMLPerformanceNavigationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn toString < Impl : IHTMLPerformanceNavigationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , string : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn toJSON < Impl : IHTMLPerformanceNavigationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvar : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , r#type : r#type :: < Impl , IMPL_OFFSET > , redirectCount : redirectCount :: < Impl , IMPL_OFFSET > , toString : toString :: < Impl , IMPL_OFFSET > , toJSON : toJSON :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLPerformanceNavigation < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLPerformanceTimingImpl < > : Sized + IDispatchImpl where { fn navigationStart ( ) ; fn unloadEventStart ( ) ; fn unloadEventEnd ( ) ; fn redirectStart ( ) ; fn redirectEnd ( ) ; fn fetchStart ( ) ; fn domainLookupStart ( ) ; fn domainLookupEnd ( ) ; fn connectStart ( ) ; fn connectEnd ( ) ; fn requestStart ( ) ; fn responseStart ( ) ; fn responseEnd ( ) ; fn domLoading ( ) ; fn domInteractive ( ) ; fn domContentLoadedEventStart ( ) ; fn domContentLoadedEventEnd ( ) ; fn domComplete ( ) ; fn loadEventStart ( ) ; fn loadEventEnd ( ) ; fn msFirstPaint ( ) ; fn toString ( ) ; fn toJSON ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLPerformanceTimingVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLPerformanceTimingImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLPerformanceTimingVtbl < > { unsafe extern "system" fn navigationStart < Impl : IHTMLPerformanceTimingImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn unloadEventStart < Impl : IHTMLPerformanceTimingImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn unloadEventEnd < Impl : IHTMLPerformanceTimingImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn redirectStart < Impl : IHTMLPerformanceTimingImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn redirectEnd < Impl : IHTMLPerformanceTimingImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn fetchStart < Impl : IHTMLPerformanceTimingImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn domainLookupStart < Impl : IHTMLPerformanceTimingImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn domainLookupEnd < Impl : IHTMLPerformanceTimingImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn connectStart < Impl : IHTMLPerformanceTimingImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn connectEnd < Impl : IHTMLPerformanceTimingImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn requestStart < Impl : IHTMLPerformanceTimingImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn responseStart < Impl : IHTMLPerformanceTimingImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn responseEnd < Impl : IHTMLPerformanceTimingImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn domLoading < Impl : IHTMLPerformanceTimingImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn domInteractive < Impl : IHTMLPerformanceTimingImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn domContentLoadedEventStart < Impl : IHTMLPerformanceTimingImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn domContentLoadedEventEnd < Impl : IHTMLPerformanceTimingImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn domComplete < Impl : IHTMLPerformanceTimingImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn loadEventStart < Impl : IHTMLPerformanceTimingImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn loadEventEnd < Impl : IHTMLPerformanceTimingImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msFirstPaint < Impl : IHTMLPerformanceTimingImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn toString < Impl : IHTMLPerformanceTimingImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , string : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn toJSON < Impl : IHTMLPerformanceTimingImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvar : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , navigationStart : navigationStart :: < Impl , IMPL_OFFSET > , unloadEventStart : unloadEventStart :: < Impl , IMPL_OFFSET > , unloadEventEnd : unloadEventEnd :: < Impl , IMPL_OFFSET > , redirectStart : redirectStart :: < Impl , IMPL_OFFSET > , redirectEnd : redirectEnd :: < Impl , IMPL_OFFSET > , fetchStart : fetchStart :: < Impl , IMPL_OFFSET > , domainLookupStart : domainLookupStart :: < Impl , IMPL_OFFSET > , domainLookupEnd : domainLookupEnd :: < Impl , IMPL_OFFSET > , connectStart : connectStart :: < Impl , IMPL_OFFSET > , connectEnd : connectEnd :: < Impl , IMPL_OFFSET > , requestStart : requestStart :: < Impl , IMPL_OFFSET > , responseStart : responseStart :: < Impl , IMPL_OFFSET > , responseEnd : responseEnd :: < Impl , IMPL_OFFSET > , domLoading : domLoading :: < Impl , IMPL_OFFSET > , domInteractive : domInteractive :: < Impl , IMPL_OFFSET > , domContentLoadedEventStart : domContentLoadedEventStart :: < Impl , IMPL_OFFSET > , domContentLoadedEventEnd : domContentLoadedEventEnd :: < Impl , IMPL_OFFSET > , domComplete : domComplete :: < Impl , IMPL_OFFSET > , loadEventStart : loadEventStart :: < Impl , IMPL_OFFSET > , loadEventEnd : loadEventEnd :: < Impl , IMPL_OFFSET > , msFirstPaint : msFirstPaint :: < Impl , IMPL_OFFSET > , toString : toString :: < Impl , IMPL_OFFSET > , toJSON : toJSON :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLPerformanceTiming < > as :: windows :: core :: Interface > :: IID } } pub trait IHTMLPersistDataImpl < > : Sized where { fn save ( ) ; fn load ( ) ; fn queryType ( ) ; } impl < > IHTMLPersistDataVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLPersistDataImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLPersistDataVtbl < > { unsafe extern "system" fn save < Impl : IHTMLPersistDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punk : * mut :: core :: ffi :: c_void , ltype : i32 , fcontinuebroacast : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn load < Impl : IHTMLPersistDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punk : * mut :: core :: ffi :: c_void , ltype : i32 , fdodefault : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn queryType < Impl : IHTMLPersistDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ltype : i32 , pfsupportstype : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , save : save :: < Impl , IMPL_OFFSET > , load : load :: < Impl , IMPL_OFFSET > , queryType : queryType :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLPersistData < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLPersistDataOMImpl < > : Sized + IDispatchImpl where { fn XMLDocument ( ) ; fn getAttribute ( ) ; fn setAttribute ( ) ; fn removeAttribute ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLPersistDataOMVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLPersistDataOMImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLPersistDataOMVtbl < > { unsafe extern "system" fn XMLDocument < Impl : IHTMLPersistDataOMImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getAttribute < Impl : IHTMLPersistDataOMImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , name : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pvalue : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn setAttribute < Impl : IHTMLPersistDataOMImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , name : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , value : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn removeAttribute < Impl : IHTMLPersistDataOMImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , name : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , XMLDocument : XMLDocument :: < Impl , IMPL_OFFSET > , getAttribute : getAttribute :: < Impl , IMPL_OFFSET > , setAttribute : setAttribute :: < Impl , IMPL_OFFSET > , removeAttribute : removeAttribute :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLPersistDataOM < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLPhraseElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLPhraseElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLPhraseElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLPhraseElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLPhraseElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLPhraseElement2Impl < > : Sized + IDispatchImpl where { fn Setcite ( ) ; fn cite ( ) ; fn SetdateTime ( ) ; fn dateTime ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLPhraseElement2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLPhraseElement2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLPhraseElement2Vtbl < > { unsafe extern "system" fn Setcite < Impl : IHTMLPhraseElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn cite < Impl : IHTMLPhraseElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetdateTime < Impl : IHTMLPhraseElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn dateTime < Impl : IHTMLPhraseElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setcite : Setcite :: < Impl , IMPL_OFFSET > , cite : cite :: < Impl , IMPL_OFFSET > , SetdateTime : SetdateTime :: < Impl , IMPL_OFFSET > , dateTime : dateTime :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLPhraseElement2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLPhraseElement3Impl < > : Sized + IDispatchImpl where { fn Setcite ( ) ; fn cite ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLPhraseElement3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLPhraseElement3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLPhraseElement3Vtbl < > { unsafe extern "system" fn Setcite < Impl : IHTMLPhraseElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn cite < Impl : IHTMLPhraseElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setcite : Setcite :: < Impl , IMPL_OFFSET > , cite : cite :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLPhraseElement3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLPluginsCollectionImpl < > : Sized + IDispatchImpl where { fn length ( ) ; fn refresh ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLPluginsCollectionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLPluginsCollectionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLPluginsCollectionVtbl < > { unsafe extern "system" fn length < Impl : IHTMLPluginsCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn refresh < Impl : IHTMLPluginsCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , reload : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , length : length :: < Impl , IMPL_OFFSET > , refresh : refresh :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLPluginsCollection < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLPopupImpl < > : Sized + IDispatchImpl where { fn show ( ) ; fn hide ( ) ; fn document ( ) ; fn isOpen ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLPopupVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLPopupImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLPopupVtbl < > { unsafe extern "system" fn show < Impl : IHTMLPopupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , x : i32 , y : i32 , w : i32 , h : i32 , pelement : * const super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn hide < Impl : IHTMLPopupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn document < Impl : IHTMLPopupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn isOpen < Impl : IHTMLPopupImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , show : show :: < Impl , IMPL_OFFSET > , hide : hide :: < Impl , IMPL_OFFSET > , document : document :: < Impl , IMPL_OFFSET > , isOpen : isOpen :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLPopup < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLProgressElementImpl < > : Sized + IDispatchImpl where { fn Setvalue ( ) ; fn value ( ) ; fn Setmax ( ) ; fn max ( ) ; fn position ( ) ; fn form ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLProgressElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLProgressElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLProgressElementVtbl < > { unsafe extern "system" fn Setvalue < Impl : IHTMLProgressElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn value < Impl : IHTMLProgressElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setmax < Impl : IHTMLProgressElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn max < Impl : IHTMLProgressElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn position < Impl : IHTMLProgressElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn form < Impl : IHTMLProgressElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setvalue : Setvalue :: < Impl , IMPL_OFFSET > , value : value :: < Impl , IMPL_OFFSET > , Setmax : Setmax :: < Impl , IMPL_OFFSET > , max : max :: < Impl , IMPL_OFFSET > , position : position :: < Impl , IMPL_OFFSET > , form : form :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLProgressElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLRectImpl < > : Sized + IDispatchImpl where { fn Setleft ( ) ; fn left ( ) ; fn Settop ( ) ; fn top ( ) ; fn Setright ( ) ; fn right ( ) ; fn Setbottom ( ) ; fn bottom ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLRectVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLRectImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLRectVtbl < > { unsafe extern "system" fn Setleft < Impl : IHTMLRectImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn left < Impl : IHTMLRectImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Settop < Impl : IHTMLRectImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn top < Impl : IHTMLRectImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setright < Impl : IHTMLRectImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn right < Impl : IHTMLRectImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setbottom < Impl : IHTMLRectImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn bottom < Impl : IHTMLRectImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setleft : Setleft :: < Impl , IMPL_OFFSET > , left : left :: < Impl , IMPL_OFFSET > , Settop : Settop :: < Impl , IMPL_OFFSET > , top : top :: < Impl , IMPL_OFFSET > , Setright : Setright :: < Impl , IMPL_OFFSET > , right : right :: < Impl , IMPL_OFFSET > , Setbottom : Setbottom :: < Impl , IMPL_OFFSET > , bottom : bottom :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLRect < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLRect2Impl < > : Sized + IDispatchImpl where { fn width ( ) ; fn height ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLRect2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLRect2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLRect2Vtbl < > { unsafe extern "system" fn width < Impl : IHTMLRect2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn height < Impl : IHTMLRect2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , width : width :: < Impl , IMPL_OFFSET > , height : height :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLRect2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLRectCollectionImpl < > : Sized + IDispatchImpl where { fn length ( ) ; fn _newEnum ( ) ; fn item ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLRectCollectionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLRectCollectionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLRectCollectionVtbl < > { unsafe extern "system" fn length < Impl : IHTMLRectCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _newEnum < Impl : IHTMLRectCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn item < Impl : IHTMLRectCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarindex : * const super::super::System::Com:: VARIANT , pvarresult : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , length : length :: < Impl , IMPL_OFFSET > , _newEnum : _newEnum :: < Impl , IMPL_OFFSET > , item : item :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLRectCollection < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLRenderStyleImpl < > : Sized + IDispatchImpl where { fn SettextLineThroughStyle ( ) ; fn textLineThroughStyle ( ) ; fn SettextUnderlineStyle ( ) ; fn textUnderlineStyle ( ) ; fn SettextEffect ( ) ; fn textEffect ( ) ; fn SettextColor ( ) ; fn textColor ( ) ; fn SettextBackgroundColor ( ) ; fn textBackgroundColor ( ) ; fn SettextDecorationColor ( ) ; fn textDecorationColor ( ) ; fn SetrenderingPriority ( ) ; fn renderingPriority ( ) ; fn SetdefaultTextSelection ( ) ; fn defaultTextSelection ( ) ; fn SettextDecoration ( ) ; fn textDecoration ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLRenderStyleVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLRenderStyleImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLRenderStyleVtbl < > { unsafe extern "system" fn SettextLineThroughStyle < Impl : IHTMLRenderStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textLineThroughStyle < Impl : IHTMLRenderStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextUnderlineStyle < Impl : IHTMLRenderStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textUnderlineStyle < Impl : IHTMLRenderStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextEffect < Impl : IHTMLRenderStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textEffect < Impl : IHTMLRenderStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextColor < Impl : IHTMLRenderStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textColor < Impl : IHTMLRenderStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextBackgroundColor < Impl : IHTMLRenderStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textBackgroundColor < Impl : IHTMLRenderStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextDecorationColor < Impl : IHTMLRenderStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textDecorationColor < Impl : IHTMLRenderStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetrenderingPriority < Impl : IHTMLRenderStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn renderingPriority < Impl : IHTMLRenderStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetdefaultTextSelection < Impl : IHTMLRenderStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn defaultTextSelection < Impl : IHTMLRenderStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextDecoration < Impl : IHTMLRenderStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textDecoration < Impl : IHTMLRenderStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SettextLineThroughStyle : SettextLineThroughStyle :: < Impl , IMPL_OFFSET > , textLineThroughStyle : textLineThroughStyle :: < Impl , IMPL_OFFSET > , SettextUnderlineStyle : SettextUnderlineStyle :: < Impl , IMPL_OFFSET > , textUnderlineStyle : textUnderlineStyle :: < Impl , IMPL_OFFSET > , SettextEffect : SettextEffect :: < Impl , IMPL_OFFSET > , textEffect : textEffect :: < Impl , IMPL_OFFSET > , SettextColor : SettextColor :: < Impl , IMPL_OFFSET > , textColor : textColor :: < Impl , IMPL_OFFSET > , SettextBackgroundColor : SettextBackgroundColor :: < Impl , IMPL_OFFSET > , textBackgroundColor : textBackgroundColor :: < Impl , IMPL_OFFSET > , SettextDecorationColor : SettextDecorationColor :: < Impl , IMPL_OFFSET > , textDecorationColor : textDecorationColor :: < Impl , IMPL_OFFSET > , SetrenderingPriority : SetrenderingPriority :: < Impl , IMPL_OFFSET > , renderingPriority : renderingPriority :: < Impl , IMPL_OFFSET > , SetdefaultTextSelection : SetdefaultTextSelection :: < Impl , IMPL_OFFSET > , defaultTextSelection : defaultTextSelection :: < Impl , IMPL_OFFSET > , SettextDecoration : SettextDecoration :: < Impl , IMPL_OFFSET > , textDecoration : textDecoration :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLRenderStyle < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLRuleStyleImpl < > : Sized + IDispatchImpl where { fn SetfontFamily ( ) ; fn fontFamily ( ) ; fn SetfontStyle ( ) ; fn fontStyle ( ) ; fn SetfontVariant ( ) ; fn fontVariant ( ) ; fn SetfontWeight ( ) ; fn fontWeight ( ) ; fn SetfontSize ( ) ; fn fontSize ( ) ; fn Setfont ( ) ; fn font ( ) ; fn Setcolor ( ) ; fn color ( ) ; fn Setbackground ( ) ; fn background ( ) ; fn SetbackgroundColor ( ) ; fn backgroundColor ( ) ; fn SetbackgroundImage ( ) ; fn backgroundImage ( ) ; fn SetbackgroundRepeat ( ) ; fn backgroundRepeat ( ) ; fn SetbackgroundAttachment ( ) ; fn backgroundAttachment ( ) ; fn SetbackgroundPosition ( ) ; fn backgroundPosition ( ) ; fn SetbackgroundPositionX ( ) ; fn backgroundPositionX ( ) ; fn SetbackgroundPositionY ( ) ; fn backgroundPositionY ( ) ; fn SetwordSpacing ( ) ; fn wordSpacing ( ) ; fn SetletterSpacing ( ) ; fn letterSpacing ( ) ; fn SettextDecoration ( ) ; fn textDecoration ( ) ; fn SettextDecorationNone ( ) ; fn textDecorationNone ( ) ; fn SettextDecorationUnderline ( ) ; fn textDecorationUnderline ( ) ; fn SettextDecorationOverline ( ) ; fn textDecorationOverline ( ) ; fn SettextDecorationLineThrough ( ) ; fn textDecorationLineThrough ( ) ; fn SettextDecorationBlink ( ) ; fn textDecorationBlink ( ) ; fn SetverticalAlign ( ) ; fn verticalAlign ( ) ; fn SettextTransform ( ) ; fn textTransform ( ) ; fn SettextAlign ( ) ; fn textAlign ( ) ; fn SettextIndent ( ) ; fn textIndent ( ) ; fn SetlineHeight ( ) ; fn lineHeight ( ) ; fn SetmarginTop ( ) ; fn marginTop ( ) ; fn SetmarginRight ( ) ; fn marginRight ( ) ; fn SetmarginBottom ( ) ; fn marginBottom ( ) ; fn SetmarginLeft ( ) ; fn marginLeft ( ) ; fn Setmargin ( ) ; fn margin ( ) ; fn SetpaddingTop ( ) ; fn paddingTop ( ) ; fn SetpaddingRight ( ) ; fn paddingRight ( ) ; fn SetpaddingBottom ( ) ; fn paddingBottom ( ) ; fn SetpaddingLeft ( ) ; fn paddingLeft ( ) ; fn Setpadding ( ) ; fn padding ( ) ; fn Setborder ( ) ; fn border ( ) ; fn SetborderTop ( ) ; fn borderTop ( ) ; fn SetborderRight ( ) ; fn borderRight ( ) ; fn SetborderBottom ( ) ; fn borderBottom ( ) ; fn SetborderLeft ( ) ; fn borderLeft ( ) ; fn SetborderColor ( ) ; fn borderColor ( ) ; fn SetborderTopColor ( ) ; fn borderTopColor ( ) ; fn SetborderRightColor ( ) ; fn borderRightColor ( ) ; fn SetborderBottomColor ( ) ; fn borderBottomColor ( ) ; fn SetborderLeftColor ( ) ; fn borderLeftColor ( ) ; fn SetborderWidth ( ) ; fn borderWidth ( ) ; fn SetborderTopWidth ( ) ; fn borderTopWidth ( ) ; fn SetborderRightWidth ( ) ; fn borderRightWidth ( ) ; fn SetborderBottomWidth ( ) ; fn borderBottomWidth ( ) ; fn SetborderLeftWidth ( ) ; fn borderLeftWidth ( ) ; fn SetborderStyle ( ) ; fn borderStyle ( ) ; fn SetborderTopStyle ( ) ; fn borderTopStyle ( ) ; fn SetborderRightStyle ( ) ; fn borderRightStyle ( ) ; fn SetborderBottomStyle ( ) ; fn borderBottomStyle ( ) ; fn SetborderLeftStyle ( ) ; fn borderLeftStyle ( ) ; fn Setwidth ( ) ; fn width ( ) ; fn Setheight ( ) ; fn height ( ) ; fn SetstyleFloat ( ) ; fn styleFloat ( ) ; fn Setclear ( ) ; fn clear ( ) ; fn Setdisplay ( ) ; fn display ( ) ; fn Setvisibility ( ) ; fn visibility ( ) ; fn SetlistStyleType ( ) ; fn listStyleType ( ) ; fn SetlistStylePosition ( ) ; fn listStylePosition ( ) ; fn SetlistStyleImage ( ) ; fn listStyleImage ( ) ; fn SetlistStyle ( ) ; fn listStyle ( ) ; fn SetwhiteSpace ( ) ; fn whiteSpace ( ) ; fn Settop ( ) ; fn top ( ) ; fn Setleft ( ) ; fn left ( ) ; fn position ( ) ; fn SetzIndex ( ) ; fn zIndex ( ) ; fn Setoverflow ( ) ; fn overflow ( ) ; fn SetpageBreakBefore ( ) ; fn pageBreakBefore ( ) ; fn SetpageBreakAfter ( ) ; fn pageBreakAfter ( ) ; fn SetcssText ( ) ; fn cssText ( ) ; fn Setcursor ( ) ; fn cursor ( ) ; fn Setclip ( ) ; fn clip ( ) ; fn Setfilter ( ) ; fn filter ( ) ; fn setAttribute ( ) ; fn getAttribute ( ) ; fn removeAttribute ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLRuleStyleVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLRuleStyleImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLRuleStyleVtbl < > { unsafe extern "system" fn SetfontFamily < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn fontFamily < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetfontStyle < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn fontStyle < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetfontVariant < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn fontVariant < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetfontWeight < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn fontWeight < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetfontSize < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn fontSize < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setfont < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn font < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setcolor < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn color < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setbackground < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn background < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetbackgroundColor < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn backgroundColor < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetbackgroundImage < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn backgroundImage < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetbackgroundRepeat < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn backgroundRepeat < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetbackgroundAttachment < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn backgroundAttachment < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetbackgroundPosition < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn backgroundPosition < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetbackgroundPositionX < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn backgroundPositionX < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetbackgroundPositionY < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn backgroundPositionY < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwordSpacing < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn wordSpacing < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetletterSpacing < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn letterSpacing < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextDecoration < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textDecoration < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextDecorationNone < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textDecorationNone < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextDecorationUnderline < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textDecorationUnderline < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextDecorationOverline < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textDecorationOverline < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextDecorationLineThrough < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textDecorationLineThrough < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextDecorationBlink < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textDecorationBlink < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetverticalAlign < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn verticalAlign < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextTransform < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textTransform < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextAlign < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textAlign < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextIndent < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textIndent < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetlineHeight < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn lineHeight < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmarginTop < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn marginTop < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmarginRight < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn marginRight < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmarginBottom < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn marginBottom < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmarginLeft < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn marginLeft < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setmargin < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn margin < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetpaddingTop < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn paddingTop < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetpaddingRight < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn paddingRight < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetpaddingBottom < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn paddingBottom < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetpaddingLeft < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn paddingLeft < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setpadding < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn padding < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setborder < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn border < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderTop < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderTop < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderRight < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderRight < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderBottom < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderBottom < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderLeft < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderLeft < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderColor < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderColor < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderTopColor < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderTopColor < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderRightColor < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderRightColor < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderBottomColor < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderBottomColor < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderLeftColor < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderLeftColor < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderWidth < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderWidth < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderTopWidth < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderTopWidth < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderRightWidth < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderRightWidth < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderBottomWidth < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderBottomWidth < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderLeftWidth < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderLeftWidth < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderStyle < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderStyle < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderTopStyle < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderTopStyle < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderRightStyle < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderRightStyle < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderBottomStyle < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderBottomStyle < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderLeftStyle < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderLeftStyle < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setwidth < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn width < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setheight < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn height < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetstyleFloat < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn styleFloat < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setclear < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clear < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setdisplay < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn display < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setvisibility < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn visibility < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetlistStyleType < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn listStyleType < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetlistStylePosition < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn listStylePosition < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetlistStyleImage < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn listStyleImage < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetlistStyle < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn listStyle < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwhiteSpace < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn whiteSpace < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Settop < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn top < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setleft < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn left < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn position < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetzIndex < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn zIndex < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setoverflow < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn overflow < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetpageBreakBefore < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn pageBreakBefore < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetpageBreakAfter < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn pageBreakAfter < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetcssText < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn cssText < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setcursor < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn cursor < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setclip < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clip < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setfilter < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn filter < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn setAttribute < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , strattributename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , attributevalue : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , lflags : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getAttribute < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , strattributename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , lflags : i32 , attributevalue : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn removeAttribute < Impl : IHTMLRuleStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , strattributename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , lflags : i32 , pfsuccess : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetfontFamily : SetfontFamily :: < Impl , IMPL_OFFSET > , fontFamily : fontFamily :: < Impl , IMPL_OFFSET > , SetfontStyle : SetfontStyle :: < Impl , IMPL_OFFSET > , fontStyle : fontStyle :: < Impl , IMPL_OFFSET > , SetfontVariant : SetfontVariant :: < Impl , IMPL_OFFSET > , fontVariant : fontVariant :: < Impl , IMPL_OFFSET > , SetfontWeight : SetfontWeight :: < Impl , IMPL_OFFSET > , fontWeight : fontWeight :: < Impl , IMPL_OFFSET > , SetfontSize : SetfontSize :: < Impl , IMPL_OFFSET > , fontSize : fontSize :: < Impl , IMPL_OFFSET > , Setfont : Setfont :: < Impl , IMPL_OFFSET > , font : font :: < Impl , IMPL_OFFSET > , Setcolor : Setcolor :: < Impl , IMPL_OFFSET > , color : color :: < Impl , IMPL_OFFSET > , Setbackground : Setbackground :: < Impl , IMPL_OFFSET > , background : background :: < Impl , IMPL_OFFSET > , SetbackgroundColor : SetbackgroundColor :: < Impl , IMPL_OFFSET > , backgroundColor : backgroundColor :: < Impl , IMPL_OFFSET > , SetbackgroundImage : SetbackgroundImage :: < Impl , IMPL_OFFSET > , backgroundImage : backgroundImage :: < Impl , IMPL_OFFSET > , SetbackgroundRepeat : SetbackgroundRepeat :: < Impl , IMPL_OFFSET > , backgroundRepeat : backgroundRepeat :: < Impl , IMPL_OFFSET > , SetbackgroundAttachment : SetbackgroundAttachment :: < Impl , IMPL_OFFSET > , backgroundAttachment : backgroundAttachment :: < Impl , IMPL_OFFSET > , SetbackgroundPosition : SetbackgroundPosition :: < Impl , IMPL_OFFSET > , backgroundPosition : backgroundPosition :: < Impl , IMPL_OFFSET > , SetbackgroundPositionX : SetbackgroundPositionX :: < Impl , IMPL_OFFSET > , backgroundPositionX : backgroundPositionX :: < Impl , IMPL_OFFSET > , SetbackgroundPositionY : SetbackgroundPositionY :: < Impl , IMPL_OFFSET > , backgroundPositionY : backgroundPositionY :: < Impl , IMPL_OFFSET > , SetwordSpacing : SetwordSpacing :: < Impl , IMPL_OFFSET > , wordSpacing : wordSpacing :: < Impl , IMPL_OFFSET > , SetletterSpacing : SetletterSpacing :: < Impl , IMPL_OFFSET > , letterSpacing : letterSpacing :: < Impl , IMPL_OFFSET > , SettextDecoration : SettextDecoration :: < Impl , IMPL_OFFSET > , textDecoration : textDecoration :: < Impl , IMPL_OFFSET > , SettextDecorationNone : SettextDecorationNone :: < Impl , IMPL_OFFSET > , textDecorationNone : textDecorationNone :: < Impl , IMPL_OFFSET > , SettextDecorationUnderline : SettextDecorationUnderline :: < Impl , IMPL_OFFSET > , textDecorationUnderline : textDecorationUnderline :: < Impl , IMPL_OFFSET > , SettextDecorationOverline : SettextDecorationOverline :: < Impl , IMPL_OFFSET > , textDecorationOverline : textDecorationOverline :: < Impl , IMPL_OFFSET > , SettextDecorationLineThrough : SettextDecorationLineThrough :: < Impl , IMPL_OFFSET > , textDecorationLineThrough : textDecorationLineThrough :: < Impl , IMPL_OFFSET > , SettextDecorationBlink : SettextDecorationBlink :: < Impl , IMPL_OFFSET > , textDecorationBlink : textDecorationBlink :: < Impl , IMPL_OFFSET > , SetverticalAlign : SetverticalAlign :: < Impl , IMPL_OFFSET > , verticalAlign : verticalAlign :: < Impl , IMPL_OFFSET > , SettextTransform : SettextTransform :: < Impl , IMPL_OFFSET > , textTransform : textTransform :: < Impl , IMPL_OFFSET > , SettextAlign : SettextAlign :: < Impl , IMPL_OFFSET > , textAlign : textAlign :: < Impl , IMPL_OFFSET > , SettextIndent : SettextIndent :: < Impl , IMPL_OFFSET > , textIndent : textIndent :: < Impl , IMPL_OFFSET > , SetlineHeight : SetlineHeight :: < Impl , IMPL_OFFSET > , lineHeight : lineHeight :: < Impl , IMPL_OFFSET > , SetmarginTop : SetmarginTop :: < Impl , IMPL_OFFSET > , marginTop : marginTop :: < Impl , IMPL_OFFSET > , SetmarginRight : SetmarginRight :: < Impl , IMPL_OFFSET > , marginRight : marginRight :: < Impl , IMPL_OFFSET > , SetmarginBottom : SetmarginBottom :: < Impl , IMPL_OFFSET > , marginBottom : marginBottom :: < Impl , IMPL_OFFSET > , SetmarginLeft : SetmarginLeft :: < Impl , IMPL_OFFSET > , marginLeft : marginLeft :: < Impl , IMPL_OFFSET > , Setmargin : Setmargin :: < Impl , IMPL_OFFSET > , margin : margin :: < Impl , IMPL_OFFSET > , SetpaddingTop : SetpaddingTop :: < Impl , IMPL_OFFSET > , paddingTop : paddingTop :: < Impl , IMPL_OFFSET > , SetpaddingRight : SetpaddingRight :: < Impl , IMPL_OFFSET > , paddingRight : paddingRight :: < Impl , IMPL_OFFSET > , SetpaddingBottom : SetpaddingBottom :: < Impl , IMPL_OFFSET > , paddingBottom : paddingBottom :: < Impl , IMPL_OFFSET > , SetpaddingLeft : SetpaddingLeft :: < Impl , IMPL_OFFSET > , paddingLeft : paddingLeft :: < Impl , IMPL_OFFSET > , Setpadding : Setpadding :: < Impl , IMPL_OFFSET > , padding : padding :: < Impl , IMPL_OFFSET > , Setborder : Setborder :: < Impl , IMPL_OFFSET > , border : border :: < Impl , IMPL_OFFSET > , SetborderTop : SetborderTop :: < Impl , IMPL_OFFSET > , borderTop : borderTop :: < Impl , IMPL_OFFSET > , SetborderRight : SetborderRight :: < Impl , IMPL_OFFSET > , borderRight : borderRight :: < Impl , IMPL_OFFSET > , SetborderBottom : SetborderBottom :: < Impl , IMPL_OFFSET > , borderBottom : borderBottom :: < Impl , IMPL_OFFSET > , SetborderLeft : SetborderLeft :: < Impl , IMPL_OFFSET > , borderLeft : borderLeft :: < Impl , IMPL_OFFSET > , SetborderColor : SetborderColor :: < Impl , IMPL_OFFSET > , borderColor : borderColor :: < Impl , IMPL_OFFSET > , SetborderTopColor : SetborderTopColor :: < Impl , IMPL_OFFSET > , borderTopColor : borderTopColor :: < Impl , IMPL_OFFSET > , SetborderRightColor : SetborderRightColor :: < Impl , IMPL_OFFSET > , borderRightColor : borderRightColor :: < Impl , IMPL_OFFSET > , SetborderBottomColor : SetborderBottomColor :: < Impl , IMPL_OFFSET > , borderBottomColor : borderBottomColor :: < Impl , IMPL_OFFSET > , SetborderLeftColor : SetborderLeftColor :: < Impl , IMPL_OFFSET > , borderLeftColor : borderLeftColor :: < Impl , IMPL_OFFSET > , SetborderWidth : SetborderWidth :: < Impl , IMPL_OFFSET > , borderWidth : borderWidth :: < Impl , IMPL_OFFSET > , SetborderTopWidth : SetborderTopWidth :: < Impl , IMPL_OFFSET > , borderTopWidth : borderTopWidth :: < Impl , IMPL_OFFSET > , SetborderRightWidth : SetborderRightWidth :: < Impl , IMPL_OFFSET > , borderRightWidth : borderRightWidth :: < Impl , IMPL_OFFSET > , SetborderBottomWidth : SetborderBottomWidth :: < Impl , IMPL_OFFSET > , borderBottomWidth : borderBottomWidth :: < Impl , IMPL_OFFSET > , SetborderLeftWidth : SetborderLeftWidth :: < Impl , IMPL_OFFSET > , borderLeftWidth : borderLeftWidth :: < Impl , IMPL_OFFSET > , SetborderStyle : SetborderStyle :: < Impl , IMPL_OFFSET > , borderStyle : borderStyle :: < Impl , IMPL_OFFSET > , SetborderTopStyle : SetborderTopStyle :: < Impl , IMPL_OFFSET > , borderTopStyle : borderTopStyle :: < Impl , IMPL_OFFSET > , SetborderRightStyle : SetborderRightStyle :: < Impl , IMPL_OFFSET > , borderRightStyle : borderRightStyle :: < Impl , IMPL_OFFSET > , SetborderBottomStyle : SetborderBottomStyle :: < Impl , IMPL_OFFSET > , borderBottomStyle : borderBottomStyle :: < Impl , IMPL_OFFSET > , SetborderLeftStyle : SetborderLeftStyle :: < Impl , IMPL_OFFSET > , borderLeftStyle : borderLeftStyle :: < Impl , IMPL_OFFSET > , Setwidth : Setwidth :: < Impl , IMPL_OFFSET > , width : width :: < Impl , IMPL_OFFSET > , Setheight : Setheight :: < Impl , IMPL_OFFSET > , height : height :: < Impl , IMPL_OFFSET > , SetstyleFloat : SetstyleFloat :: < Impl , IMPL_OFFSET > , styleFloat : styleFloat :: < Impl , IMPL_OFFSET > , Setclear : Setclear :: < Impl , IMPL_OFFSET > , clear : clear :: < Impl , IMPL_OFFSET > , Setdisplay : Setdisplay :: < Impl , IMPL_OFFSET > , display : display :: < Impl , IMPL_OFFSET > , Setvisibility : Setvisibility :: < Impl , IMPL_OFFSET > , visibility : visibility :: < Impl , IMPL_OFFSET > , SetlistStyleType : SetlistStyleType :: < Impl , IMPL_OFFSET > , listStyleType : listStyleType :: < Impl , IMPL_OFFSET > , SetlistStylePosition : SetlistStylePosition :: < Impl , IMPL_OFFSET > , listStylePosition : listStylePosition :: < Impl , IMPL_OFFSET > , SetlistStyleImage : SetlistStyleImage :: < Impl , IMPL_OFFSET > , listStyleImage : listStyleImage :: < Impl , IMPL_OFFSET > , SetlistStyle : SetlistStyle :: < Impl , IMPL_OFFSET > , listStyle : listStyle :: < Impl , IMPL_OFFSET > , SetwhiteSpace : SetwhiteSpace :: < Impl , IMPL_OFFSET > , whiteSpace : whiteSpace :: < Impl , IMPL_OFFSET > , Settop : Settop :: < Impl , IMPL_OFFSET > , top : top :: < Impl , IMPL_OFFSET > , Setleft : Setleft :: < Impl , IMPL_OFFSET > , left : left :: < Impl , IMPL_OFFSET > , position : position :: < Impl , IMPL_OFFSET > , SetzIndex : SetzIndex :: < Impl , IMPL_OFFSET > , zIndex : zIndex :: < Impl , IMPL_OFFSET > , Setoverflow : Setoverflow :: < Impl , IMPL_OFFSET > , overflow : overflow :: < Impl , IMPL_OFFSET > , SetpageBreakBefore : SetpageBreakBefore :: < Impl , IMPL_OFFSET > , pageBreakBefore : pageBreakBefore :: < Impl , IMPL_OFFSET > , SetpageBreakAfter : SetpageBreakAfter :: < Impl , IMPL_OFFSET > , pageBreakAfter : pageBreakAfter :: < Impl , IMPL_OFFSET > , SetcssText : SetcssText :: < Impl , IMPL_OFFSET > , cssText : cssText :: < Impl , IMPL_OFFSET > , Setcursor : Setcursor :: < Impl , IMPL_OFFSET > , cursor : cursor :: < Impl , IMPL_OFFSET > , Setclip : Setclip :: < Impl , IMPL_OFFSET > , clip : clip :: < Impl , IMPL_OFFSET > , Setfilter : Setfilter :: < Impl , IMPL_OFFSET > , filter : filter :: < Impl , IMPL_OFFSET > , setAttribute : setAttribute :: < Impl , IMPL_OFFSET > , getAttribute : getAttribute :: < Impl , IMPL_OFFSET > , removeAttribute : removeAttribute :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLRuleStyle < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLRuleStyle2Impl < > : Sized + IDispatchImpl where { fn SettableLayout ( ) ; fn tableLayout ( ) ; fn SetborderCollapse ( ) ; fn borderCollapse ( ) ; fn Setdirection ( ) ; fn direction ( ) ; fn Setbehavior ( ) ; fn behavior ( ) ; fn Setposition ( ) ; fn position ( ) ; fn SetunicodeBidi ( ) ; fn unicodeBidi ( ) ; fn Setbottom ( ) ; fn bottom ( ) ; fn Setright ( ) ; fn right ( ) ; fn SetpixelBottom ( ) ; fn pixelBottom ( ) ; fn SetpixelRight ( ) ; fn pixelRight ( ) ; fn SetposBottom ( ) ; fn posBottom ( ) ; fn SetposRight ( ) ; fn posRight ( ) ; fn SetimeMode ( ) ; fn imeMode ( ) ; fn SetrubyAlign ( ) ; fn rubyAlign ( ) ; fn SetrubyPosition ( ) ; fn rubyPosition ( ) ; fn SetrubyOverhang ( ) ; fn rubyOverhang ( ) ; fn SetlayoutGridChar ( ) ; fn layoutGridChar ( ) ; fn SetlayoutGridLine ( ) ; fn layoutGridLine ( ) ; fn SetlayoutGridMode ( ) ; fn layoutGridMode ( ) ; fn SetlayoutGridType ( ) ; fn layoutGridType ( ) ; fn SetlayoutGrid ( ) ; fn layoutGrid ( ) ; fn SettextAutospace ( ) ; fn textAutospace ( ) ; fn SetwordBreak ( ) ; fn wordBreak ( ) ; fn SetlineBreak ( ) ; fn lineBreak ( ) ; fn SettextJustify ( ) ; fn textJustify ( ) ; fn SettextJustifyTrim ( ) ; fn textJustifyTrim ( ) ; fn SettextKashida ( ) ; fn textKashida ( ) ; fn SetoverflowX ( ) ; fn overflowX ( ) ; fn SetoverflowY ( ) ; fn overflowY ( ) ; fn Setaccelerator ( ) ; fn accelerator ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLRuleStyle2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLRuleStyle2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLRuleStyle2Vtbl < > { unsafe extern "system" fn SettableLayout < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn tableLayout < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderCollapse < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderCollapse < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setdirection < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn direction < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setbehavior < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn behavior < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setposition < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn position < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetunicodeBidi < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn unicodeBidi < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setbottom < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn bottom < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setright < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn right < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetpixelBottom < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn pixelBottom < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetpixelRight < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn pixelRight < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetposBottom < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn posBottom < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetposRight < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn posRight < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetimeMode < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn imeMode < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetrubyAlign < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn rubyAlign < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetrubyPosition < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn rubyPosition < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetrubyOverhang < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn rubyOverhang < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetlayoutGridChar < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn layoutGridChar < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetlayoutGridLine < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn layoutGridLine < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetlayoutGridMode < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn layoutGridMode < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetlayoutGridType < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn layoutGridType < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetlayoutGrid < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn layoutGrid < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextAutospace < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textAutospace < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwordBreak < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn wordBreak < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetlineBreak < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn lineBreak < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextJustify < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textJustify < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextJustifyTrim < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textJustifyTrim < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextKashida < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textKashida < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetoverflowX < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn overflowX < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetoverflowY < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn overflowY < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setaccelerator < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn accelerator < Impl : IHTMLRuleStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SettableLayout : SettableLayout :: < Impl , IMPL_OFFSET > , tableLayout : tableLayout :: < Impl , IMPL_OFFSET > , SetborderCollapse : SetborderCollapse :: < Impl , IMPL_OFFSET > , borderCollapse : borderCollapse :: < Impl , IMPL_OFFSET > , Setdirection : Setdirection :: < Impl , IMPL_OFFSET > , direction : direction :: < Impl , IMPL_OFFSET > , Setbehavior : Setbehavior :: < Impl , IMPL_OFFSET > , behavior : behavior :: < Impl , IMPL_OFFSET > , Setposition : Setposition :: < Impl , IMPL_OFFSET > , position : position :: < Impl , IMPL_OFFSET > , SetunicodeBidi : SetunicodeBidi :: < Impl , IMPL_OFFSET > , unicodeBidi : unicodeBidi :: < Impl , IMPL_OFFSET > , Setbottom : Setbottom :: < Impl , IMPL_OFFSET > , bottom : bottom :: < Impl , IMPL_OFFSET > , Setright : Setright :: < Impl , IMPL_OFFSET > , right : right :: < Impl , IMPL_OFFSET > , SetpixelBottom : SetpixelBottom :: < Impl , IMPL_OFFSET > , pixelBottom : pixelBottom :: < Impl , IMPL_OFFSET > , SetpixelRight : SetpixelRight :: < Impl , IMPL_OFFSET > , pixelRight : pixelRight :: < Impl , IMPL_OFFSET > , SetposBottom : SetposBottom :: < Impl , IMPL_OFFSET > , posBottom : posBottom :: < Impl , IMPL_OFFSET > , SetposRight : SetposRight :: < Impl , IMPL_OFFSET > , posRight : posRight :: < Impl , IMPL_OFFSET > , SetimeMode : SetimeMode :: < Impl , IMPL_OFFSET > , imeMode : imeMode :: < Impl , IMPL_OFFSET > , SetrubyAlign : SetrubyAlign :: < Impl , IMPL_OFFSET > , rubyAlign : rubyAlign :: < Impl , IMPL_OFFSET > , SetrubyPosition : SetrubyPosition :: < Impl , IMPL_OFFSET > , rubyPosition : rubyPosition :: < Impl , IMPL_OFFSET > , SetrubyOverhang : SetrubyOverhang :: < Impl , IMPL_OFFSET > , rubyOverhang : rubyOverhang :: < Impl , IMPL_OFFSET > , SetlayoutGridChar : SetlayoutGridChar :: < Impl , IMPL_OFFSET > , layoutGridChar : layoutGridChar :: < Impl , IMPL_OFFSET > , SetlayoutGridLine : SetlayoutGridLine :: < Impl , IMPL_OFFSET > , layoutGridLine : layoutGridLine :: < Impl , IMPL_OFFSET > , SetlayoutGridMode : SetlayoutGridMode :: < Impl , IMPL_OFFSET > , layoutGridMode : layoutGridMode :: < Impl , IMPL_OFFSET > , SetlayoutGridType : SetlayoutGridType :: < Impl , IMPL_OFFSET > , layoutGridType : layoutGridType :: < Impl , IMPL_OFFSET > , SetlayoutGrid : SetlayoutGrid :: < Impl , IMPL_OFFSET > , layoutGrid : layoutGrid :: < Impl , IMPL_OFFSET > , SettextAutospace : SettextAutospace :: < Impl , IMPL_OFFSET > , textAutospace : textAutospace :: < Impl , IMPL_OFFSET > , SetwordBreak : SetwordBreak :: < Impl , IMPL_OFFSET > , wordBreak : wordBreak :: < Impl , IMPL_OFFSET > , SetlineBreak : SetlineBreak :: < Impl , IMPL_OFFSET > , lineBreak : lineBreak :: < Impl , IMPL_OFFSET > , SettextJustify : SettextJustify :: < Impl , IMPL_OFFSET > , textJustify : textJustify :: < Impl , IMPL_OFFSET > , SettextJustifyTrim : SettextJustifyTrim :: < Impl , IMPL_OFFSET > , textJustifyTrim : textJustifyTrim :: < Impl , IMPL_OFFSET > , SettextKashida : SettextKashida :: < Impl , IMPL_OFFSET > , textKashida : textKashida :: < Impl , IMPL_OFFSET > , SetoverflowX : SetoverflowX :: < Impl , IMPL_OFFSET > , overflowX : overflowX :: < Impl , IMPL_OFFSET > , SetoverflowY : SetoverflowY :: < Impl , IMPL_OFFSET > , overflowY : overflowY :: < Impl , IMPL_OFFSET > , Setaccelerator : Setaccelerator :: < Impl , IMPL_OFFSET > , accelerator : accelerator :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLRuleStyle2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLRuleStyle3Impl < > : Sized + IDispatchImpl where { fn SetlayoutFlow ( ) ; fn layoutFlow ( ) ; fn Setzoom ( ) ; fn zoom ( ) ; fn SetwordWrap ( ) ; fn wordWrap ( ) ; fn SettextUnderlinePosition ( ) ; fn textUnderlinePosition ( ) ; fn SetscrollbarBaseColor ( ) ; fn scrollbarBaseColor ( ) ; fn SetscrollbarFaceColor ( ) ; fn scrollbarFaceColor ( ) ; fn Setscrollbar3dLightColor ( ) ; fn scrollbar3dLightColor ( ) ; fn SetscrollbarShadowColor ( ) ; fn scrollbarShadowColor ( ) ; fn SetscrollbarHighlightColor ( ) ; fn scrollbarHighlightColor ( ) ; fn SetscrollbarDarkShadowColor ( ) ; fn scrollbarDarkShadowColor ( ) ; fn SetscrollbarArrowColor ( ) ; fn scrollbarArrowColor ( ) ; fn SetscrollbarTrackColor ( ) ; fn scrollbarTrackColor ( ) ; fn SetwritingMode ( ) ; fn writingMode ( ) ; fn SettextAlignLast ( ) ; fn textAlignLast ( ) ; fn SettextKashidaSpace ( ) ; fn textKashidaSpace ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLRuleStyle3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLRuleStyle3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLRuleStyle3Vtbl < > { unsafe extern "system" fn SetlayoutFlow < Impl : IHTMLRuleStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn layoutFlow < Impl : IHTMLRuleStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setzoom < Impl : IHTMLRuleStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn zoom < Impl : IHTMLRuleStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwordWrap < Impl : IHTMLRuleStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn wordWrap < Impl : IHTMLRuleStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextUnderlinePosition < Impl : IHTMLRuleStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textUnderlinePosition < Impl : IHTMLRuleStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetscrollbarBaseColor < Impl : IHTMLRuleStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scrollbarBaseColor < Impl : IHTMLRuleStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetscrollbarFaceColor < Impl : IHTMLRuleStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scrollbarFaceColor < Impl : IHTMLRuleStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setscrollbar3dLightColor < Impl : IHTMLRuleStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scrollbar3dLightColor < Impl : IHTMLRuleStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetscrollbarShadowColor < Impl : IHTMLRuleStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scrollbarShadowColor < Impl : IHTMLRuleStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetscrollbarHighlightColor < Impl : IHTMLRuleStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scrollbarHighlightColor < Impl : IHTMLRuleStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetscrollbarDarkShadowColor < Impl : IHTMLRuleStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scrollbarDarkShadowColor < Impl : IHTMLRuleStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetscrollbarArrowColor < Impl : IHTMLRuleStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scrollbarArrowColor < Impl : IHTMLRuleStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetscrollbarTrackColor < Impl : IHTMLRuleStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scrollbarTrackColor < Impl : IHTMLRuleStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwritingMode < Impl : IHTMLRuleStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn writingMode < Impl : IHTMLRuleStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextAlignLast < Impl : IHTMLRuleStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textAlignLast < Impl : IHTMLRuleStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextKashidaSpace < Impl : IHTMLRuleStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textKashidaSpace < Impl : IHTMLRuleStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetlayoutFlow : SetlayoutFlow :: < Impl , IMPL_OFFSET > , layoutFlow : layoutFlow :: < Impl , IMPL_OFFSET > , Setzoom : Setzoom :: < Impl , IMPL_OFFSET > , zoom : zoom :: < Impl , IMPL_OFFSET > , SetwordWrap : SetwordWrap :: < Impl , IMPL_OFFSET > , wordWrap : wordWrap :: < Impl , IMPL_OFFSET > , SettextUnderlinePosition : SettextUnderlinePosition :: < Impl , IMPL_OFFSET > , textUnderlinePosition : textUnderlinePosition :: < Impl , IMPL_OFFSET > , SetscrollbarBaseColor : SetscrollbarBaseColor :: < Impl , IMPL_OFFSET > , scrollbarBaseColor : scrollbarBaseColor :: < Impl , IMPL_OFFSET > , SetscrollbarFaceColor : SetscrollbarFaceColor :: < Impl , IMPL_OFFSET > , scrollbarFaceColor : scrollbarFaceColor :: < Impl , IMPL_OFFSET > , Setscrollbar3dLightColor : Setscrollbar3dLightColor :: < Impl , IMPL_OFFSET > , scrollbar3dLightColor : scrollbar3dLightColor :: < Impl , IMPL_OFFSET > , SetscrollbarShadowColor : SetscrollbarShadowColor :: < Impl , IMPL_OFFSET > , scrollbarShadowColor : scrollbarShadowColor :: < Impl , IMPL_OFFSET > , SetscrollbarHighlightColor : SetscrollbarHighlightColor :: < Impl , IMPL_OFFSET > , scrollbarHighlightColor : scrollbarHighlightColor :: < Impl , IMPL_OFFSET > , SetscrollbarDarkShadowColor : SetscrollbarDarkShadowColor :: < Impl , IMPL_OFFSET > , scrollbarDarkShadowColor : scrollbarDarkShadowColor :: < Impl , IMPL_OFFSET > , SetscrollbarArrowColor : SetscrollbarArrowColor :: < Impl , IMPL_OFFSET > , scrollbarArrowColor : scrollbarArrowColor :: < Impl , IMPL_OFFSET > , SetscrollbarTrackColor : SetscrollbarTrackColor :: < Impl , IMPL_OFFSET > , scrollbarTrackColor : scrollbarTrackColor :: < Impl , IMPL_OFFSET > , SetwritingMode : SetwritingMode :: < Impl , IMPL_OFFSET > , writingMode : writingMode :: < Impl , IMPL_OFFSET > , SettextAlignLast : SettextAlignLast :: < Impl , IMPL_OFFSET > , textAlignLast : textAlignLast :: < Impl , IMPL_OFFSET > , SettextKashidaSpace : SettextKashidaSpace :: < Impl , IMPL_OFFSET > , textKashidaSpace : textKashidaSpace :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLRuleStyle3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLRuleStyle4Impl < > : Sized + IDispatchImpl where { fn SettextOverflow ( ) ; fn textOverflow ( ) ; fn SetminHeight ( ) ; fn minHeight ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLRuleStyle4Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLRuleStyle4Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLRuleStyle4Vtbl < > { unsafe extern "system" fn SettextOverflow < Impl : IHTMLRuleStyle4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textOverflow < Impl : IHTMLRuleStyle4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetminHeight < Impl : IHTMLRuleStyle4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn minHeight < Impl : IHTMLRuleStyle4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SettextOverflow : SettextOverflow :: < Impl , IMPL_OFFSET > , textOverflow : textOverflow :: < Impl , IMPL_OFFSET > , SetminHeight : SetminHeight :: < Impl , IMPL_OFFSET > , minHeight : minHeight :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLRuleStyle4 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLRuleStyle5Impl < > : Sized + IDispatchImpl where { fn SetmsInterpolationMode ( ) ; fn msInterpolationMode ( ) ; fn SetmaxHeight ( ) ; fn maxHeight ( ) ; fn SetminWidth ( ) ; fn minWidth ( ) ; fn SetmaxWidth ( ) ; fn maxWidth ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLRuleStyle5Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLRuleStyle5Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLRuleStyle5Vtbl < > { unsafe extern "system" fn SetmsInterpolationMode < Impl : IHTMLRuleStyle5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msInterpolationMode < Impl : IHTMLRuleStyle5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmaxHeight < Impl : IHTMLRuleStyle5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn maxHeight < Impl : IHTMLRuleStyle5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetminWidth < Impl : IHTMLRuleStyle5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn minWidth < Impl : IHTMLRuleStyle5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmaxWidth < Impl : IHTMLRuleStyle5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn maxWidth < Impl : IHTMLRuleStyle5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetmsInterpolationMode : SetmsInterpolationMode :: < Impl , IMPL_OFFSET > , msInterpolationMode : msInterpolationMode :: < Impl , IMPL_OFFSET > , SetmaxHeight : SetmaxHeight :: < Impl , IMPL_OFFSET > , maxHeight : maxHeight :: < Impl , IMPL_OFFSET > , SetminWidth : SetminWidth :: < Impl , IMPL_OFFSET > , minWidth : minWidth :: < Impl , IMPL_OFFSET > , SetmaxWidth : SetmaxWidth :: < Impl , IMPL_OFFSET > , maxWidth : maxWidth :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLRuleStyle5 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLRuleStyle6Impl < > : Sized + IDispatchImpl where { fn Setcontent ( ) ; fn content ( ) ; fn SetcaptionSide ( ) ; fn captionSide ( ) ; fn SetcounterIncrement ( ) ; fn counterIncrement ( ) ; fn SetcounterReset ( ) ; fn counterReset ( ) ; fn Setoutline ( ) ; fn outline ( ) ; fn SetoutlineWidth ( ) ; fn outlineWidth ( ) ; fn SetoutlineStyle ( ) ; fn outlineStyle ( ) ; fn SetoutlineColor ( ) ; fn outlineColor ( ) ; fn SetboxSizing ( ) ; fn boxSizing ( ) ; fn SetborderSpacing ( ) ; fn borderSpacing ( ) ; fn Setorphans ( ) ; fn orphans ( ) ; fn Setwidows ( ) ; fn widows ( ) ; fn SetpageBreakInside ( ) ; fn pageBreakInside ( ) ; fn SetemptyCells ( ) ; fn emptyCells ( ) ; fn SetmsBlockProgression ( ) ; fn msBlockProgression ( ) ; fn Setquotes ( ) ; fn quotes ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLRuleStyle6Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLRuleStyle6Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLRuleStyle6Vtbl < > { unsafe extern "system" fn Setcontent < Impl : IHTMLRuleStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn content < Impl : IHTMLRuleStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetcaptionSide < Impl : IHTMLRuleStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn captionSide < Impl : IHTMLRuleStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetcounterIncrement < Impl : IHTMLRuleStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn counterIncrement < Impl : IHTMLRuleStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetcounterReset < Impl : IHTMLRuleStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn counterReset < Impl : IHTMLRuleStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setoutline < Impl : IHTMLRuleStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn outline < Impl : IHTMLRuleStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetoutlineWidth < Impl : IHTMLRuleStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn outlineWidth < Impl : IHTMLRuleStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetoutlineStyle < Impl : IHTMLRuleStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn outlineStyle < Impl : IHTMLRuleStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetoutlineColor < Impl : IHTMLRuleStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn outlineColor < Impl : IHTMLRuleStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetboxSizing < Impl : IHTMLRuleStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn boxSizing < Impl : IHTMLRuleStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderSpacing < Impl : IHTMLRuleStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderSpacing < Impl : IHTMLRuleStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setorphans < Impl : IHTMLRuleStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn orphans < Impl : IHTMLRuleStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setwidows < Impl : IHTMLRuleStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn widows < Impl : IHTMLRuleStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetpageBreakInside < Impl : IHTMLRuleStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn pageBreakInside < Impl : IHTMLRuleStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetemptyCells < Impl : IHTMLRuleStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn emptyCells < Impl : IHTMLRuleStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsBlockProgression < Impl : IHTMLRuleStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msBlockProgression < Impl : IHTMLRuleStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setquotes < Impl : IHTMLRuleStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn quotes < Impl : IHTMLRuleStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setcontent : Setcontent :: < Impl , IMPL_OFFSET > , content : content :: < Impl , IMPL_OFFSET > , SetcaptionSide : SetcaptionSide :: < Impl , IMPL_OFFSET > , captionSide : captionSide :: < Impl , IMPL_OFFSET > , SetcounterIncrement : SetcounterIncrement :: < Impl , IMPL_OFFSET > , counterIncrement : counterIncrement :: < Impl , IMPL_OFFSET > , SetcounterReset : SetcounterReset :: < Impl , IMPL_OFFSET > , counterReset : counterReset :: < Impl , IMPL_OFFSET > , Setoutline : Setoutline :: < Impl , IMPL_OFFSET > , outline : outline :: < Impl , IMPL_OFFSET > , SetoutlineWidth : SetoutlineWidth :: < Impl , IMPL_OFFSET > , outlineWidth : outlineWidth :: < Impl , IMPL_OFFSET > , SetoutlineStyle : SetoutlineStyle :: < Impl , IMPL_OFFSET > , outlineStyle : outlineStyle :: < Impl , IMPL_OFFSET > , SetoutlineColor : SetoutlineColor :: < Impl , IMPL_OFFSET > , outlineColor : outlineColor :: < Impl , IMPL_OFFSET > , SetboxSizing : SetboxSizing :: < Impl , IMPL_OFFSET > , boxSizing : boxSizing :: < Impl , IMPL_OFFSET > , SetborderSpacing : SetborderSpacing :: < Impl , IMPL_OFFSET > , borderSpacing : borderSpacing :: < Impl , IMPL_OFFSET > , Setorphans : Setorphans :: < Impl , IMPL_OFFSET > , orphans : orphans :: < Impl , IMPL_OFFSET > , Setwidows : Setwidows :: < Impl , IMPL_OFFSET > , widows : widows :: < Impl , IMPL_OFFSET > , SetpageBreakInside : SetpageBreakInside :: < Impl , IMPL_OFFSET > , pageBreakInside : pageBreakInside :: < Impl , IMPL_OFFSET > , SetemptyCells : SetemptyCells :: < Impl , IMPL_OFFSET > , emptyCells : emptyCells :: < Impl , IMPL_OFFSET > , SetmsBlockProgression : SetmsBlockProgression :: < Impl , IMPL_OFFSET > , msBlockProgression : msBlockProgression :: < Impl , IMPL_OFFSET > , Setquotes : Setquotes :: < Impl , IMPL_OFFSET > , quotes : quotes :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLRuleStyle6 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLScreenImpl < > : Sized + IDispatchImpl where { fn colorDepth ( ) ; fn SetbufferDepth ( ) ; fn bufferDepth ( ) ; fn width ( ) ; fn height ( ) ; fn SetupdateInterval ( ) ; fn updateInterval ( ) ; fn availHeight ( ) ; fn availWidth ( ) ; fn fontSmoothingEnabled ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLScreenVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLScreenImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLScreenVtbl < > { unsafe extern "system" fn colorDepth < Impl : IHTMLScreenImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetbufferDepth < Impl : IHTMLScreenImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn bufferDepth < Impl : IHTMLScreenImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn width < Impl : IHTMLScreenImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn height < Impl : IHTMLScreenImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetupdateInterval < Impl : IHTMLScreenImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn updateInterval < Impl : IHTMLScreenImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn availHeight < Impl : IHTMLScreenImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn availWidth < Impl : IHTMLScreenImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn fontSmoothingEnabled < Impl : IHTMLScreenImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , colorDepth : colorDepth :: < Impl , IMPL_OFFSET > , SetbufferDepth : SetbufferDepth :: < Impl , IMPL_OFFSET > , bufferDepth : bufferDepth :: < Impl , IMPL_OFFSET > , width : width :: < Impl , IMPL_OFFSET > , height : height :: < Impl , IMPL_OFFSET > , SetupdateInterval : SetupdateInterval :: < Impl , IMPL_OFFSET > , updateInterval : updateInterval :: < Impl , IMPL_OFFSET > , availHeight : availHeight :: < Impl , IMPL_OFFSET > , availWidth : availWidth :: < Impl , IMPL_OFFSET > , fontSmoothingEnabled : fontSmoothingEnabled :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLScreen < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLScreen2Impl < > : Sized + IDispatchImpl where { fn logicalXDPI ( ) ; fn logicalYDPI ( ) ; fn deviceXDPI ( ) ; fn deviceYDPI ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLScreen2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLScreen2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLScreen2Vtbl < > { unsafe extern "system" fn logicalXDPI < Impl : IHTMLScreen2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn logicalYDPI < Impl : IHTMLScreen2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn deviceXDPI < Impl : IHTMLScreen2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn deviceYDPI < Impl : IHTMLScreen2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , logicalXDPI : logicalXDPI :: < Impl , IMPL_OFFSET > , logicalYDPI : logicalYDPI :: < Impl , IMPL_OFFSET > , deviceXDPI : deviceXDPI :: < Impl , IMPL_OFFSET > , deviceYDPI : deviceYDPI :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLScreen2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLScreen3Impl < > : Sized + IDispatchImpl where { fn systemXDPI ( ) ; fn systemYDPI ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLScreen3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLScreen3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLScreen3Vtbl < > { unsafe extern "system" fn systemXDPI < Impl : IHTMLScreen3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn systemYDPI < Impl : IHTMLScreen3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , systemXDPI : systemXDPI :: < Impl , IMPL_OFFSET > , systemYDPI : systemYDPI :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLScreen3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLScreen4Impl < > : Sized + IDispatchImpl where { fn pixelDepth ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLScreen4Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLScreen4Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLScreen4Vtbl < > { unsafe extern "system" fn pixelDepth < Impl : IHTMLScreen4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , pixelDepth : pixelDepth :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLScreen4 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLScriptElementImpl < > : Sized + IDispatchImpl where { fn Setsrc ( ) ; fn src ( ) ; fn SethtmlFor ( ) ; fn htmlFor ( ) ; fn Setevent ( ) ; fn event ( ) ; fn Settext ( ) ; fn text ( ) ; fn Setdefer ( ) ; fn defer ( ) ; fn readyState ( ) ; fn Setonerror ( ) ; fn onerror ( ) ; fn Settype ( ) ; fn r#type ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLScriptElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLScriptElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLScriptElementVtbl < > { unsafe extern "system" fn Setsrc < Impl : IHTMLScriptElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn src < Impl : IHTMLScriptElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SethtmlFor < Impl : IHTMLScriptElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn htmlFor < Impl : IHTMLScriptElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setevent < Impl : IHTMLScriptElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn event < Impl : IHTMLScriptElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Settext < Impl : IHTMLScriptElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn text < Impl : IHTMLScriptElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setdefer < Impl : IHTMLScriptElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn defer < Impl : IHTMLScriptElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn readyState < Impl : IHTMLScriptElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonerror < Impl : IHTMLScriptElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onerror < Impl : IHTMLScriptElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Settype < Impl : IHTMLScriptElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn r#type < Impl : IHTMLScriptElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setsrc : Setsrc :: < Impl , IMPL_OFFSET > , src : src :: < Impl , IMPL_OFFSET > , SethtmlFor : SethtmlFor :: < Impl , IMPL_OFFSET > , htmlFor : htmlFor :: < Impl , IMPL_OFFSET > , Setevent : Setevent :: < Impl , IMPL_OFFSET > , event : event :: < Impl , IMPL_OFFSET > , Settext : Settext :: < Impl , IMPL_OFFSET > , text : text :: < Impl , IMPL_OFFSET > , Setdefer : Setdefer :: < Impl , IMPL_OFFSET > , defer : defer :: < Impl , IMPL_OFFSET > , readyState : readyState :: < Impl , IMPL_OFFSET > , Setonerror : Setonerror :: < Impl , IMPL_OFFSET > , onerror : onerror :: < Impl , IMPL_OFFSET > , Settype : Settype :: < Impl , IMPL_OFFSET > , r#type : r#type :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLScriptElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLScriptElement2Impl < > : Sized + IDispatchImpl where { fn Setcharset ( ) ; fn charset ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLScriptElement2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLScriptElement2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLScriptElement2Vtbl < > { unsafe extern "system" fn Setcharset < Impl : IHTMLScriptElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn charset < Impl : IHTMLScriptElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setcharset : Setcharset :: < Impl , IMPL_OFFSET > , charset : charset :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLScriptElement2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLScriptElement3Impl < > : Sized + IDispatchImpl where { fn Setsrc ( ) ; fn src ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLScriptElement3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLScriptElement3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLScriptElement3Vtbl < > { unsafe extern "system" fn Setsrc < Impl : IHTMLScriptElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn src < Impl : IHTMLScriptElement3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setsrc : Setsrc :: < Impl , IMPL_OFFSET > , src : src :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLScriptElement3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLScriptElement4Impl < > : Sized + IDispatchImpl where { fn usedCharset ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLScriptElement4Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLScriptElement4Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLScriptElement4Vtbl < > { unsafe extern "system" fn usedCharset < Impl : IHTMLScriptElement4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , usedCharset : usedCharset :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLScriptElement4 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLSelectElementImpl < > : Sized + IDispatchImpl where { fn Setsize ( ) ; fn size ( ) ; fn Setmultiple ( ) ; fn multiple ( ) ; fn Setname ( ) ; fn name ( ) ; fn options ( ) ; fn Setonchange ( ) ; fn onchange ( ) ; fn SetselectedIndex ( ) ; fn selectedIndex ( ) ; fn r#type ( ) ; fn Setvalue ( ) ; fn value ( ) ; fn Setdisabled ( ) ; fn disabled ( ) ; fn form ( ) ; fn add ( ) ; fn remove ( ) ; fn Setlength ( ) ; fn length ( ) ; fn _newEnum ( ) ; fn item ( ) ; fn tags ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLSelectElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLSelectElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLSelectElementVtbl < > { unsafe extern "system" fn Setsize < Impl : IHTMLSelectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn size < Impl : IHTMLSelectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setmultiple < Impl : IHTMLSelectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn multiple < Impl : IHTMLSelectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setname < Impl : IHTMLSelectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn name < Impl : IHTMLSelectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn options < Impl : IHTMLSelectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonchange < Impl : IHTMLSelectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onchange < Impl : IHTMLSelectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetselectedIndex < Impl : IHTMLSelectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn selectedIndex < Impl : IHTMLSelectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn r#type < Impl : IHTMLSelectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setvalue < Impl : IHTMLSelectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn value < Impl : IHTMLSelectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setdisabled < Impl : IHTMLSelectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn disabled < Impl : IHTMLSelectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn form < Impl : IHTMLSelectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn add < Impl : IHTMLSelectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , element : :: windows :: core :: RawPtr , before : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn remove < Impl : IHTMLSelectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setlength < Impl : IHTMLSelectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn length < Impl : IHTMLSelectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _newEnum < Impl : IHTMLSelectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn item < Impl : IHTMLSelectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , name : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , index : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , pdisp : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn tags < Impl : IHTMLSelectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , tagname : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , pdisp : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setsize : Setsize :: < Impl , IMPL_OFFSET > , size : size :: < Impl , IMPL_OFFSET > , Setmultiple : Setmultiple :: < Impl , IMPL_OFFSET > , multiple : multiple :: < Impl , IMPL_OFFSET > , Setname : Setname :: < Impl , IMPL_OFFSET > , name : name :: < Impl , IMPL_OFFSET > , options : options :: < Impl , IMPL_OFFSET > , Setonchange : Setonchange :: < Impl , IMPL_OFFSET > , onchange : onchange :: < Impl , IMPL_OFFSET > , SetselectedIndex : SetselectedIndex :: < Impl , IMPL_OFFSET > , selectedIndex : selectedIndex :: < Impl , IMPL_OFFSET > , r#type : r#type :: < Impl , IMPL_OFFSET > , Setvalue : Setvalue :: < Impl , IMPL_OFFSET > , value : value :: < Impl , IMPL_OFFSET > , Setdisabled : Setdisabled :: < Impl , IMPL_OFFSET > , disabled : disabled :: < Impl , IMPL_OFFSET > , form : form :: < Impl , IMPL_OFFSET > , add : add :: < Impl , IMPL_OFFSET > , remove : remove :: < Impl , IMPL_OFFSET > , Setlength : Setlength :: < Impl , IMPL_OFFSET > , length : length :: < Impl , IMPL_OFFSET > , _newEnum : _newEnum :: < Impl , IMPL_OFFSET > , item : item :: < Impl , IMPL_OFFSET > , tags : tags :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLSelectElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLSelectElement2Impl < > : Sized + IDispatchImpl where { fn urns ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLSelectElement2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLSelectElement2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLSelectElement2Vtbl < > { unsafe extern "system" fn urns < Impl : IHTMLSelectElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , urn : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , pdisp : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , urns : urns :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLSelectElement2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLSelectElement4Impl < > : Sized + IDispatchImpl where { fn namedItem ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLSelectElement4Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLSelectElement4Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLSelectElement4Vtbl < > { unsafe extern "system" fn namedItem < Impl : IHTMLSelectElement4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , name : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pdisp : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , namedItem : namedItem :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLSelectElement4 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLSelectElement5Impl < > : Sized + IDispatchImpl where { fn add ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLSelectElement5Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLSelectElement5Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLSelectElement5Vtbl < > { unsafe extern "system" fn add < Impl : IHTMLSelectElement5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pelem : :: windows :: core :: RawPtr , pvarbefore : * const super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , add : add :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLSelectElement5 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLSelectElement6Impl < > : Sized + IDispatchImpl where { fn add ( ) ; fn Setvalue ( ) ; fn value ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLSelectElement6Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLSelectElement6Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLSelectElement6Vtbl < > { unsafe extern "system" fn add < Impl : IHTMLSelectElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pelem : :: windows :: core :: RawPtr , pvarbefore : * const super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setvalue < Impl : IHTMLSelectElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn value < Impl : IHTMLSelectElement6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , add : add :: < Impl , IMPL_OFFSET > , Setvalue : Setvalue :: < Impl , IMPL_OFFSET > , value : value :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLSelectElement6 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IHTMLSelectElementExImpl < > : Sized where { fn ShowDropdown ( ) ; fn SetSelectExFlags ( ) ; fn GetSelectExFlags ( ) ; fn GetDropdownOpen ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IHTMLSelectElementExVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLSelectElementExImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLSelectElementExVtbl < > { unsafe extern "system" fn ShowDropdown < Impl : IHTMLSelectElementExImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fshow : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetSelectExFlags < Impl : IHTMLSelectElementExImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetSelectExFlags < Impl : IHTMLSelectElementExImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pflags : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetDropdownOpen < Impl : IHTMLSelectElementExImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfopen : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , ShowDropdown : ShowDropdown :: < Impl , IMPL_OFFSET > , SetSelectExFlags : SetSelectExFlags :: < Impl , IMPL_OFFSET > , GetSelectExFlags : GetSelectExFlags :: < Impl , IMPL_OFFSET > , GetDropdownOpen : GetDropdownOpen :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLSelectElementEx < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLSelectionImpl < > : Sized + IDispatchImpl where { fn anchorNode ( ) ; fn anchorOffset ( ) ; fn focusNode ( ) ; fn focusOffset ( ) ; fn isCollapsed ( ) ; fn collapse ( ) ; fn collapseToStart ( ) ; fn collapseToEnd ( ) ; fn selectAllChildren ( ) ; fn deleteFromDocument ( ) ; fn rangeCount ( ) ; fn getRangeAt ( ) ; fn addRange ( ) ; fn removeRange ( ) ; fn removeAllRanges ( ) ; fn toString ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLSelectionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLSelectionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLSelectionVtbl < > { unsafe extern "system" fn anchorNode < Impl : IHTMLSelectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn anchorOffset < Impl : IHTMLSelectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn focusNode < Impl : IHTMLSelectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn focusOffset < Impl : IHTMLSelectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn isCollapsed < Impl : IHTMLSelectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn collapse < Impl : IHTMLSelectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , parentnode : :: windows :: core :: RawPtr , offfset : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn collapseToStart < Impl : IHTMLSelectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn collapseToEnd < Impl : IHTMLSelectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn selectAllChildren < Impl : IHTMLSelectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , parentnode : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn deleteFromDocument < Impl : IHTMLSelectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn rangeCount < Impl : IHTMLSelectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getRangeAt < Impl : IHTMLSelectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , pprange : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn addRange < Impl : IHTMLSelectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , range : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn removeRange < Impl : IHTMLSelectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , range : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn removeAllRanges < Impl : IHTMLSelectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn toString < Impl : IHTMLSelectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pselectionstring : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , anchorNode : anchorNode :: < Impl , IMPL_OFFSET > , anchorOffset : anchorOffset :: < Impl , IMPL_OFFSET > , focusNode : focusNode :: < Impl , IMPL_OFFSET > , focusOffset : focusOffset :: < Impl , IMPL_OFFSET > , isCollapsed : isCollapsed :: < Impl , IMPL_OFFSET > , collapse : collapse :: < Impl , IMPL_OFFSET > , collapseToStart : collapseToStart :: < Impl , IMPL_OFFSET > , collapseToEnd : collapseToEnd :: < Impl , IMPL_OFFSET > , selectAllChildren : selectAllChildren :: < Impl , IMPL_OFFSET > , deleteFromDocument : deleteFromDocument :: < Impl , IMPL_OFFSET > , rangeCount : rangeCount :: < Impl , IMPL_OFFSET > , getRangeAt : getRangeAt :: < Impl , IMPL_OFFSET > , addRange : addRange :: < Impl , IMPL_OFFSET > , removeRange : removeRange :: < Impl , IMPL_OFFSET > , removeAllRanges : removeAllRanges :: < Impl , IMPL_OFFSET > , toString : toString :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLSelection < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLSelectionObjectImpl < > : Sized + IDispatchImpl where { fn createRange ( ) ; fn empty ( ) ; fn clear ( ) ; fn r#type ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLSelectionObjectVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLSelectionObjectImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLSelectionObjectVtbl < > { unsafe extern "system" fn createRange < Impl : IHTMLSelectionObjectImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , range : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn empty < Impl : IHTMLSelectionObjectImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clear < Impl : IHTMLSelectionObjectImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn r#type < Impl : IHTMLSelectionObjectImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , createRange : createRange :: < Impl , IMPL_OFFSET > , empty : empty :: < Impl , IMPL_OFFSET > , clear : clear :: < Impl , IMPL_OFFSET > , r#type : r#type :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLSelectionObject < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLSelectionObject2Impl < > : Sized + IDispatchImpl where { fn createRangeCollection ( ) ; fn typeDetail ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLSelectionObject2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLSelectionObject2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLSelectionObject2Vtbl < > { unsafe extern "system" fn createRangeCollection < Impl : IHTMLSelectionObject2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , rangecollection : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn typeDetail < Impl : IHTMLSelectionObject2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , createRangeCollection : createRangeCollection :: < Impl , IMPL_OFFSET > , typeDetail : typeDetail :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLSelectionObject2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLSourceElementImpl < > : Sized + IDispatchImpl where { fn Setsrc ( ) ; fn src ( ) ; fn Settype ( ) ; fn r#type ( ) ; fn Setmedia ( ) ; fn media ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLSourceElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLSourceElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLSourceElementVtbl < > { unsafe extern "system" fn Setsrc < Impl : IHTMLSourceElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn src < Impl : IHTMLSourceElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Settype < Impl : IHTMLSourceElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn r#type < Impl : IHTMLSourceElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setmedia < Impl : IHTMLSourceElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn media < Impl : IHTMLSourceElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setsrc : Setsrc :: < Impl , IMPL_OFFSET > , src : src :: < Impl , IMPL_OFFSET > , Settype : Settype :: < Impl , IMPL_OFFSET > , r#type : r#type :: < Impl , IMPL_OFFSET > , Setmedia : Setmedia :: < Impl , IMPL_OFFSET > , media : media :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLSourceElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLSpanElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLSpanElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLSpanElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLSpanElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLSpanElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLSpanFlowImpl < > : Sized + IDispatchImpl where { fn Setalign ( ) ; fn align ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLSpanFlowVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLSpanFlowImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLSpanFlowVtbl < > { unsafe extern "system" fn Setalign < Impl : IHTMLSpanFlowImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn align < Impl : IHTMLSpanFlowImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setalign : Setalign :: < Impl , IMPL_OFFSET > , align : align :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLSpanFlow < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLStorageImpl < > : Sized + IDispatchImpl where { fn length ( ) ; fn remainingSpace ( ) ; fn key ( ) ; fn getItem ( ) ; fn setItem ( ) ; fn removeItem ( ) ; fn clear ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLStorageVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLStorageImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLStorageVtbl < > { unsafe extern "system" fn length < Impl : IHTMLStorageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn remainingSpace < Impl : IHTMLStorageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn key < Impl : IHTMLStorageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lindex : i32 , __midl__ihtmlstorage0000 : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getItem < Impl : IHTMLStorageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrkey : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , __midl__ihtmlstorage0001 : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn setItem < Impl : IHTMLStorageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrkey : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , bstrvalue : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn removeItem < Impl : IHTMLStorageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrkey : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clear < Impl : IHTMLStorageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , length : length :: < Impl , IMPL_OFFSET > , remainingSpace : remainingSpace :: < Impl , IMPL_OFFSET > , key : key :: < Impl , IMPL_OFFSET > , getItem : getItem :: < Impl , IMPL_OFFSET > , setItem : setItem :: < Impl , IMPL_OFFSET > , removeItem : removeItem :: < Impl , IMPL_OFFSET > , clear : clear :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLStorage < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLStorage2Impl < > : Sized + IDispatchImpl where { fn setItem ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLStorage2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLStorage2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLStorage2Vtbl < > { unsafe extern "system" fn setItem < Impl : IHTMLStorage2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrkey : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , bstrvalue : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , setItem : setItem :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLStorage2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLStyleImpl < > : Sized + IDispatchImpl where { fn SetfontFamily ( ) ; fn fontFamily ( ) ; fn SetfontStyle ( ) ; fn fontStyle ( ) ; fn SetfontVariant ( ) ; fn fontVariant ( ) ; fn SetfontWeight ( ) ; fn fontWeight ( ) ; fn SetfontSize ( ) ; fn fontSize ( ) ; fn Setfont ( ) ; fn font ( ) ; fn Setcolor ( ) ; fn color ( ) ; fn Setbackground ( ) ; fn background ( ) ; fn SetbackgroundColor ( ) ; fn backgroundColor ( ) ; fn SetbackgroundImage ( ) ; fn backgroundImage ( ) ; fn SetbackgroundRepeat ( ) ; fn backgroundRepeat ( ) ; fn SetbackgroundAttachment ( ) ; fn backgroundAttachment ( ) ; fn SetbackgroundPosition ( ) ; fn backgroundPosition ( ) ; fn SetbackgroundPositionX ( ) ; fn backgroundPositionX ( ) ; fn SetbackgroundPositionY ( ) ; fn backgroundPositionY ( ) ; fn SetwordSpacing ( ) ; fn wordSpacing ( ) ; fn SetletterSpacing ( ) ; fn letterSpacing ( ) ; fn SettextDecoration ( ) ; fn textDecoration ( ) ; fn SettextDecorationNone ( ) ; fn textDecorationNone ( ) ; fn SettextDecorationUnderline ( ) ; fn textDecorationUnderline ( ) ; fn SettextDecorationOverline ( ) ; fn textDecorationOverline ( ) ; fn SettextDecorationLineThrough ( ) ; fn textDecorationLineThrough ( ) ; fn SettextDecorationBlink ( ) ; fn textDecorationBlink ( ) ; fn SetverticalAlign ( ) ; fn verticalAlign ( ) ; fn SettextTransform ( ) ; fn textTransform ( ) ; fn SettextAlign ( ) ; fn textAlign ( ) ; fn SettextIndent ( ) ; fn textIndent ( ) ; fn SetlineHeight ( ) ; fn lineHeight ( ) ; fn SetmarginTop ( ) ; fn marginTop ( ) ; fn SetmarginRight ( ) ; fn marginRight ( ) ; fn SetmarginBottom ( ) ; fn marginBottom ( ) ; fn SetmarginLeft ( ) ; fn marginLeft ( ) ; fn Setmargin ( ) ; fn margin ( ) ; fn SetpaddingTop ( ) ; fn paddingTop ( ) ; fn SetpaddingRight ( ) ; fn paddingRight ( ) ; fn SetpaddingBottom ( ) ; fn paddingBottom ( ) ; fn SetpaddingLeft ( ) ; fn paddingLeft ( ) ; fn Setpadding ( ) ; fn padding ( ) ; fn Setborder ( ) ; fn border ( ) ; fn SetborderTop ( ) ; fn borderTop ( ) ; fn SetborderRight ( ) ; fn borderRight ( ) ; fn SetborderBottom ( ) ; fn borderBottom ( ) ; fn SetborderLeft ( ) ; fn borderLeft ( ) ; fn SetborderColor ( ) ; fn borderColor ( ) ; fn SetborderTopColor ( ) ; fn borderTopColor ( ) ; fn SetborderRightColor ( ) ; fn borderRightColor ( ) ; fn SetborderBottomColor ( ) ; fn borderBottomColor ( ) ; fn SetborderLeftColor ( ) ; fn borderLeftColor ( ) ; fn SetborderWidth ( ) ; fn borderWidth ( ) ; fn SetborderTopWidth ( ) ; fn borderTopWidth ( ) ; fn SetborderRightWidth ( ) ; fn borderRightWidth ( ) ; fn SetborderBottomWidth ( ) ; fn borderBottomWidth ( ) ; fn SetborderLeftWidth ( ) ; fn borderLeftWidth ( ) ; fn SetborderStyle ( ) ; fn borderStyle ( ) ; fn SetborderTopStyle ( ) ; fn borderTopStyle ( ) ; fn SetborderRightStyle ( ) ; fn borderRightStyle ( ) ; fn SetborderBottomStyle ( ) ; fn borderBottomStyle ( ) ; fn SetborderLeftStyle ( ) ; fn borderLeftStyle ( ) ; fn Setwidth ( ) ; fn width ( ) ; fn Setheight ( ) ; fn height ( ) ; fn SetstyleFloat ( ) ; fn styleFloat ( ) ; fn Setclear ( ) ; fn clear ( ) ; fn Setdisplay ( ) ; fn display ( ) ; fn Setvisibility ( ) ; fn visibility ( ) ; fn SetlistStyleType ( ) ; fn listStyleType ( ) ; fn SetlistStylePosition ( ) ; fn listStylePosition ( ) ; fn SetlistStyleImage ( ) ; fn listStyleImage ( ) ; fn SetlistStyle ( ) ; fn listStyle ( ) ; fn SetwhiteSpace ( ) ; fn whiteSpace ( ) ; fn Settop ( ) ; fn top ( ) ; fn Setleft ( ) ; fn left ( ) ; fn position ( ) ; fn SetzIndex ( ) ; fn zIndex ( ) ; fn Setoverflow ( ) ; fn overflow ( ) ; fn SetpageBreakBefore ( ) ; fn pageBreakBefore ( ) ; fn SetpageBreakAfter ( ) ; fn pageBreakAfter ( ) ; fn SetcssText ( ) ; fn cssText ( ) ; fn SetpixelTop ( ) ; fn pixelTop ( ) ; fn SetpixelLeft ( ) ; fn pixelLeft ( ) ; fn SetpixelWidth ( ) ; fn pixelWidth ( ) ; fn SetpixelHeight ( ) ; fn pixelHeight ( ) ; fn SetposTop ( ) ; fn posTop ( ) ; fn SetposLeft ( ) ; fn posLeft ( ) ; fn SetposWidth ( ) ; fn posWidth ( ) ; fn SetposHeight ( ) ; fn posHeight ( ) ; fn Setcursor ( ) ; fn cursor ( ) ; fn Setclip ( ) ; fn clip ( ) ; fn Setfilter ( ) ; fn filter ( ) ; fn setAttribute ( ) ; fn getAttribute ( ) ; fn removeAttribute ( ) ; fn toString ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLStyleVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLStyleImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLStyleVtbl < > { unsafe extern "system" fn SetfontFamily < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn fontFamily < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetfontStyle < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn fontStyle < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetfontVariant < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn fontVariant < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetfontWeight < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn fontWeight < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetfontSize < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn fontSize < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setfont < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn font < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setcolor < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn color < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setbackground < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn background < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetbackgroundColor < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn backgroundColor < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetbackgroundImage < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn backgroundImage < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetbackgroundRepeat < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn backgroundRepeat < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetbackgroundAttachment < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn backgroundAttachment < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetbackgroundPosition < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn backgroundPosition < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetbackgroundPositionX < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn backgroundPositionX < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetbackgroundPositionY < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn backgroundPositionY < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwordSpacing < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn wordSpacing < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetletterSpacing < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn letterSpacing < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextDecoration < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textDecoration < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextDecorationNone < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textDecorationNone < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextDecorationUnderline < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textDecorationUnderline < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextDecorationOverline < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textDecorationOverline < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextDecorationLineThrough < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textDecorationLineThrough < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextDecorationBlink < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textDecorationBlink < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetverticalAlign < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn verticalAlign < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextTransform < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textTransform < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextAlign < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textAlign < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextIndent < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textIndent < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetlineHeight < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn lineHeight < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmarginTop < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn marginTop < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmarginRight < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn marginRight < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmarginBottom < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn marginBottom < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmarginLeft < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn marginLeft < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setmargin < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn margin < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetpaddingTop < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn paddingTop < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetpaddingRight < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn paddingRight < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetpaddingBottom < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn paddingBottom < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetpaddingLeft < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn paddingLeft < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setpadding < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn padding < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setborder < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn border < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderTop < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderTop < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderRight < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderRight < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderBottom < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderBottom < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderLeft < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderLeft < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderColor < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderColor < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderTopColor < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderTopColor < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderRightColor < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderRightColor < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderBottomColor < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderBottomColor < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderLeftColor < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderLeftColor < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderWidth < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderWidth < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderTopWidth < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderTopWidth < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderRightWidth < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderRightWidth < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderBottomWidth < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderBottomWidth < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderLeftWidth < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderLeftWidth < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderStyle < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderStyle < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderTopStyle < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderTopStyle < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderRightStyle < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderRightStyle < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderBottomStyle < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderBottomStyle < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderLeftStyle < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderLeftStyle < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setwidth < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn width < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setheight < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn height < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetstyleFloat < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn styleFloat < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setclear < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clear < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setdisplay < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn display < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setvisibility < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn visibility < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetlistStyleType < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn listStyleType < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetlistStylePosition < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn listStylePosition < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetlistStyleImage < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn listStyleImage < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetlistStyle < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn listStyle < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwhiteSpace < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn whiteSpace < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Settop < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn top < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setleft < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn left < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn position < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetzIndex < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn zIndex < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setoverflow < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn overflow < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetpageBreakBefore < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn pageBreakBefore < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetpageBreakAfter < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn pageBreakAfter < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetcssText < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn cssText < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetpixelTop < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn pixelTop < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetpixelLeft < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn pixelLeft < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetpixelWidth < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn pixelWidth < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetpixelHeight < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn pixelHeight < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetposTop < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn posTop < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetposLeft < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn posLeft < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetposWidth < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn posWidth < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetposHeight < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn posHeight < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setcursor < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn cursor < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setclip < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clip < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setfilter < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn filter < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn setAttribute < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , strattributename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , attributevalue : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , lflags : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getAttribute < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , strattributename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , lflags : i32 , attributevalue : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn removeAttribute < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , strattributename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , lflags : i32 , pfsuccess : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn toString < Impl : IHTMLStyleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , string : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetfontFamily : SetfontFamily :: < Impl , IMPL_OFFSET > , fontFamily : fontFamily :: < Impl , IMPL_OFFSET > , SetfontStyle : SetfontStyle :: < Impl , IMPL_OFFSET > , fontStyle : fontStyle :: < Impl , IMPL_OFFSET > , SetfontVariant : SetfontVariant :: < Impl , IMPL_OFFSET > , fontVariant : fontVariant :: < Impl , IMPL_OFFSET > , SetfontWeight : SetfontWeight :: < Impl , IMPL_OFFSET > , fontWeight : fontWeight :: < Impl , IMPL_OFFSET > , SetfontSize : SetfontSize :: < Impl , IMPL_OFFSET > , fontSize : fontSize :: < Impl , IMPL_OFFSET > , Setfont : Setfont :: < Impl , IMPL_OFFSET > , font : font :: < Impl , IMPL_OFFSET > , Setcolor : Setcolor :: < Impl , IMPL_OFFSET > , color : color :: < Impl , IMPL_OFFSET > , Setbackground : Setbackground :: < Impl , IMPL_OFFSET > , background : background :: < Impl , IMPL_OFFSET > , SetbackgroundColor : SetbackgroundColor :: < Impl , IMPL_OFFSET > , backgroundColor : backgroundColor :: < Impl , IMPL_OFFSET > , SetbackgroundImage : SetbackgroundImage :: < Impl , IMPL_OFFSET > , backgroundImage : backgroundImage :: < Impl , IMPL_OFFSET > , SetbackgroundRepeat : SetbackgroundRepeat :: < Impl , IMPL_OFFSET > , backgroundRepeat : backgroundRepeat :: < Impl , IMPL_OFFSET > , SetbackgroundAttachment : SetbackgroundAttachment :: < Impl , IMPL_OFFSET > , backgroundAttachment : backgroundAttachment :: < Impl , IMPL_OFFSET > , SetbackgroundPosition : SetbackgroundPosition :: < Impl , IMPL_OFFSET > , backgroundPosition : backgroundPosition :: < Impl , IMPL_OFFSET > , SetbackgroundPositionX : SetbackgroundPositionX :: < Impl , IMPL_OFFSET > , backgroundPositionX : backgroundPositionX :: < Impl , IMPL_OFFSET > , SetbackgroundPositionY : SetbackgroundPositionY :: < Impl , IMPL_OFFSET > , backgroundPositionY : backgroundPositionY :: < Impl , IMPL_OFFSET > , SetwordSpacing : SetwordSpacing :: < Impl , IMPL_OFFSET > , wordSpacing : wordSpacing :: < Impl , IMPL_OFFSET > , SetletterSpacing : SetletterSpacing :: < Impl , IMPL_OFFSET > , letterSpacing : letterSpacing :: < Impl , IMPL_OFFSET > , SettextDecoration : SettextDecoration :: < Impl , IMPL_OFFSET > , textDecoration : textDecoration :: < Impl , IMPL_OFFSET > , SettextDecorationNone : SettextDecorationNone :: < Impl , IMPL_OFFSET > , textDecorationNone : textDecorationNone :: < Impl , IMPL_OFFSET > , SettextDecorationUnderline : SettextDecorationUnderline :: < Impl , IMPL_OFFSET > , textDecorationUnderline : textDecorationUnderline :: < Impl , IMPL_OFFSET > , SettextDecorationOverline : SettextDecorationOverline :: < Impl , IMPL_OFFSET > , textDecorationOverline : textDecorationOverline :: < Impl , IMPL_OFFSET > , SettextDecorationLineThrough : SettextDecorationLineThrough :: < Impl , IMPL_OFFSET > , textDecorationLineThrough : textDecorationLineThrough :: < Impl , IMPL_OFFSET > , SettextDecorationBlink : SettextDecorationBlink :: < Impl , IMPL_OFFSET > , textDecorationBlink : textDecorationBlink :: < Impl , IMPL_OFFSET > , SetverticalAlign : SetverticalAlign :: < Impl , IMPL_OFFSET > , verticalAlign : verticalAlign :: < Impl , IMPL_OFFSET > , SettextTransform : SettextTransform :: < Impl , IMPL_OFFSET > , textTransform : textTransform :: < Impl , IMPL_OFFSET > , SettextAlign : SettextAlign :: < Impl , IMPL_OFFSET > , textAlign : textAlign :: < Impl , IMPL_OFFSET > , SettextIndent : SettextIndent :: < Impl , IMPL_OFFSET > , textIndent : textIndent :: < Impl , IMPL_OFFSET > , SetlineHeight : SetlineHeight :: < Impl , IMPL_OFFSET > , lineHeight : lineHeight :: < Impl , IMPL_OFFSET > , SetmarginTop : SetmarginTop :: < Impl , IMPL_OFFSET > , marginTop : marginTop :: < Impl , IMPL_OFFSET > , SetmarginRight : SetmarginRight :: < Impl , IMPL_OFFSET > , marginRight : marginRight :: < Impl , IMPL_OFFSET > , SetmarginBottom : SetmarginBottom :: < Impl , IMPL_OFFSET > , marginBottom : marginBottom :: < Impl , IMPL_OFFSET > , SetmarginLeft : SetmarginLeft :: < Impl , IMPL_OFFSET > , marginLeft : marginLeft :: < Impl , IMPL_OFFSET > , Setmargin : Setmargin :: < Impl , IMPL_OFFSET > , margin : margin :: < Impl , IMPL_OFFSET > , SetpaddingTop : SetpaddingTop :: < Impl , IMPL_OFFSET > , paddingTop : paddingTop :: < Impl , IMPL_OFFSET > , SetpaddingRight : SetpaddingRight :: < Impl , IMPL_OFFSET > , paddingRight : paddingRight :: < Impl , IMPL_OFFSET > , SetpaddingBottom : SetpaddingBottom :: < Impl , IMPL_OFFSET > , paddingBottom : paddingBottom :: < Impl , IMPL_OFFSET > , SetpaddingLeft : SetpaddingLeft :: < Impl , IMPL_OFFSET > , paddingLeft : paddingLeft :: < Impl , IMPL_OFFSET > , Setpadding : Setpadding :: < Impl , IMPL_OFFSET > , padding : padding :: < Impl , IMPL_OFFSET > , Setborder : Setborder :: < Impl , IMPL_OFFSET > , border : border :: < Impl , IMPL_OFFSET > , SetborderTop : SetborderTop :: < Impl , IMPL_OFFSET > , borderTop : borderTop :: < Impl , IMPL_OFFSET > , SetborderRight : SetborderRight :: < Impl , IMPL_OFFSET > , borderRight : borderRight :: < Impl , IMPL_OFFSET > , SetborderBottom : SetborderBottom :: < Impl , IMPL_OFFSET > , borderBottom : borderBottom :: < Impl , IMPL_OFFSET > , SetborderLeft : SetborderLeft :: < Impl , IMPL_OFFSET > , borderLeft : borderLeft :: < Impl , IMPL_OFFSET > , SetborderColor : SetborderColor :: < Impl , IMPL_OFFSET > , borderColor : borderColor :: < Impl , IMPL_OFFSET > , SetborderTopColor : SetborderTopColor :: < Impl , IMPL_OFFSET > , borderTopColor : borderTopColor :: < Impl , IMPL_OFFSET > , SetborderRightColor : SetborderRightColor :: < Impl , IMPL_OFFSET > , borderRightColor : borderRightColor :: < Impl , IMPL_OFFSET > , SetborderBottomColor : SetborderBottomColor :: < Impl , IMPL_OFFSET > , borderBottomColor : borderBottomColor :: < Impl , IMPL_OFFSET > , SetborderLeftColor : SetborderLeftColor :: < Impl , IMPL_OFFSET > , borderLeftColor : borderLeftColor :: < Impl , IMPL_OFFSET > , SetborderWidth : SetborderWidth :: < Impl , IMPL_OFFSET > , borderWidth : borderWidth :: < Impl , IMPL_OFFSET > , SetborderTopWidth : SetborderTopWidth :: < Impl , IMPL_OFFSET > , borderTopWidth : borderTopWidth :: < Impl , IMPL_OFFSET > , SetborderRightWidth : SetborderRightWidth :: < Impl , IMPL_OFFSET > , borderRightWidth : borderRightWidth :: < Impl , IMPL_OFFSET > , SetborderBottomWidth : SetborderBottomWidth :: < Impl , IMPL_OFFSET > , borderBottomWidth : borderBottomWidth :: < Impl , IMPL_OFFSET > , SetborderLeftWidth : SetborderLeftWidth :: < Impl , IMPL_OFFSET > , borderLeftWidth : borderLeftWidth :: < Impl , IMPL_OFFSET > , SetborderStyle : SetborderStyle :: < Impl , IMPL_OFFSET > , borderStyle : borderStyle :: < Impl , IMPL_OFFSET > , SetborderTopStyle : SetborderTopStyle :: < Impl , IMPL_OFFSET > , borderTopStyle : borderTopStyle :: < Impl , IMPL_OFFSET > , SetborderRightStyle : SetborderRightStyle :: < Impl , IMPL_OFFSET > , borderRightStyle : borderRightStyle :: < Impl , IMPL_OFFSET > , SetborderBottomStyle : SetborderBottomStyle :: < Impl , IMPL_OFFSET > , borderBottomStyle : borderBottomStyle :: < Impl , IMPL_OFFSET > , SetborderLeftStyle : SetborderLeftStyle :: < Impl , IMPL_OFFSET > , borderLeftStyle : borderLeftStyle :: < Impl , IMPL_OFFSET > , Setwidth : Setwidth :: < Impl , IMPL_OFFSET > , width : width :: < Impl , IMPL_OFFSET > , Setheight : Setheight :: < Impl , IMPL_OFFSET > , height : height :: < Impl , IMPL_OFFSET > , SetstyleFloat : SetstyleFloat :: < Impl , IMPL_OFFSET > , styleFloat : styleFloat :: < Impl , IMPL_OFFSET > , Setclear : Setclear :: < Impl , IMPL_OFFSET > , clear : clear :: < Impl , IMPL_OFFSET > , Setdisplay : Setdisplay :: < Impl , IMPL_OFFSET > , display : display :: < Impl , IMPL_OFFSET > , Setvisibility : Setvisibility :: < Impl , IMPL_OFFSET > , visibility : visibility :: < Impl , IMPL_OFFSET > , SetlistStyleType : SetlistStyleType :: < Impl , IMPL_OFFSET > , listStyleType : listStyleType :: < Impl , IMPL_OFFSET > , SetlistStylePosition : SetlistStylePosition :: < Impl , IMPL_OFFSET > , listStylePosition : listStylePosition :: < Impl , IMPL_OFFSET > , SetlistStyleImage : SetlistStyleImage :: < Impl , IMPL_OFFSET > , listStyleImage : listStyleImage :: < Impl , IMPL_OFFSET > , SetlistStyle : SetlistStyle :: < Impl , IMPL_OFFSET > , listStyle : listStyle :: < Impl , IMPL_OFFSET > , SetwhiteSpace : SetwhiteSpace :: < Impl , IMPL_OFFSET > , whiteSpace : whiteSpace :: < Impl , IMPL_OFFSET > , Settop : Settop :: < Impl , IMPL_OFFSET > , top : top :: < Impl , IMPL_OFFSET > , Setleft : Setleft :: < Impl , IMPL_OFFSET > , left : left :: < Impl , IMPL_OFFSET > , position : position :: < Impl , IMPL_OFFSET > , SetzIndex : SetzIndex :: < Impl , IMPL_OFFSET > , zIndex : zIndex :: < Impl , IMPL_OFFSET > , Setoverflow : Setoverflow :: < Impl , IMPL_OFFSET > , overflow : overflow :: < Impl , IMPL_OFFSET > , SetpageBreakBefore : SetpageBreakBefore :: < Impl , IMPL_OFFSET > , pageBreakBefore : pageBreakBefore :: < Impl , IMPL_OFFSET > , SetpageBreakAfter : SetpageBreakAfter :: < Impl , IMPL_OFFSET > , pageBreakAfter : pageBreakAfter :: < Impl , IMPL_OFFSET > , SetcssText : SetcssText :: < Impl , IMPL_OFFSET > , cssText : cssText :: < Impl , IMPL_OFFSET > , SetpixelTop : SetpixelTop :: < Impl , IMPL_OFFSET > , pixelTop : pixelTop :: < Impl , IMPL_OFFSET > , SetpixelLeft : SetpixelLeft :: < Impl , IMPL_OFFSET > , pixelLeft : pixelLeft :: < Impl , IMPL_OFFSET > , SetpixelWidth : SetpixelWidth :: < Impl , IMPL_OFFSET > , pixelWidth : pixelWidth :: < Impl , IMPL_OFFSET > , SetpixelHeight : SetpixelHeight :: < Impl , IMPL_OFFSET > , pixelHeight : pixelHeight :: < Impl , IMPL_OFFSET > , SetposTop : SetposTop :: < Impl , IMPL_OFFSET > , posTop : posTop :: < Impl , IMPL_OFFSET > , SetposLeft : SetposLeft :: < Impl , IMPL_OFFSET > , posLeft : posLeft :: < Impl , IMPL_OFFSET > , SetposWidth : SetposWidth :: < Impl , IMPL_OFFSET > , posWidth : posWidth :: < Impl , IMPL_OFFSET > , SetposHeight : SetposHeight :: < Impl , IMPL_OFFSET > , posHeight : posHeight :: < Impl , IMPL_OFFSET > , Setcursor : Setcursor :: < Impl , IMPL_OFFSET > , cursor : cursor :: < Impl , IMPL_OFFSET > , Setclip : Setclip :: < Impl , IMPL_OFFSET > , clip : clip :: < Impl , IMPL_OFFSET > , Setfilter : Setfilter :: < Impl , IMPL_OFFSET > , filter : filter :: < Impl , IMPL_OFFSET > , setAttribute : setAttribute :: < Impl , IMPL_OFFSET > , getAttribute : getAttribute :: < Impl , IMPL_OFFSET > , removeAttribute : removeAttribute :: < Impl , IMPL_OFFSET > , toString : toString :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLStyle < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLStyle2Impl < > : Sized + IDispatchImpl where { fn SettableLayout ( ) ; fn tableLayout ( ) ; fn SetborderCollapse ( ) ; fn borderCollapse ( ) ; fn Setdirection ( ) ; fn direction ( ) ; fn Setbehavior ( ) ; fn behavior ( ) ; fn setExpression ( ) ; fn getExpression ( ) ; fn removeExpression ( ) ; fn Setposition ( ) ; fn position ( ) ; fn SetunicodeBidi ( ) ; fn unicodeBidi ( ) ; fn Setbottom ( ) ; fn bottom ( ) ; fn Setright ( ) ; fn right ( ) ; fn SetpixelBottom ( ) ; fn pixelBottom ( ) ; fn SetpixelRight ( ) ; fn pixelRight ( ) ; fn SetposBottom ( ) ; fn posBottom ( ) ; fn SetposRight ( ) ; fn posRight ( ) ; fn SetimeMode ( ) ; fn imeMode ( ) ; fn SetrubyAlign ( ) ; fn rubyAlign ( ) ; fn SetrubyPosition ( ) ; fn rubyPosition ( ) ; fn SetrubyOverhang ( ) ; fn rubyOverhang ( ) ; fn SetlayoutGridChar ( ) ; fn layoutGridChar ( ) ; fn SetlayoutGridLine ( ) ; fn layoutGridLine ( ) ; fn SetlayoutGridMode ( ) ; fn layoutGridMode ( ) ; fn SetlayoutGridType ( ) ; fn layoutGridType ( ) ; fn SetlayoutGrid ( ) ; fn layoutGrid ( ) ; fn SetwordBreak ( ) ; fn wordBreak ( ) ; fn SetlineBreak ( ) ; fn lineBreak ( ) ; fn SettextJustify ( ) ; fn textJustify ( ) ; fn SettextJustifyTrim ( ) ; fn textJustifyTrim ( ) ; fn SettextKashida ( ) ; fn textKashida ( ) ; fn SettextAutospace ( ) ; fn textAutospace ( ) ; fn SetoverflowX ( ) ; fn overflowX ( ) ; fn SetoverflowY ( ) ; fn overflowY ( ) ; fn Setaccelerator ( ) ; fn accelerator ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLStyle2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLStyle2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLStyle2Vtbl < > { unsafe extern "system" fn SettableLayout < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn tableLayout < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderCollapse < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderCollapse < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setdirection < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn direction < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setbehavior < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn behavior < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn setExpression < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , propname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , expression : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , language : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getExpression < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , propname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , expression : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn removeExpression < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , propname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pfsuccess : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setposition < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn position < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetunicodeBidi < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn unicodeBidi < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setbottom < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn bottom < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setright < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn right < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetpixelBottom < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn pixelBottom < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetpixelRight < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn pixelRight < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetposBottom < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn posBottom < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetposRight < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn posRight < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetimeMode < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn imeMode < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetrubyAlign < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn rubyAlign < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetrubyPosition < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn rubyPosition < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetrubyOverhang < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn rubyOverhang < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetlayoutGridChar < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn layoutGridChar < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetlayoutGridLine < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn layoutGridLine < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetlayoutGridMode < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn layoutGridMode < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetlayoutGridType < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn layoutGridType < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetlayoutGrid < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn layoutGrid < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwordBreak < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn wordBreak < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetlineBreak < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn lineBreak < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextJustify < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textJustify < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextJustifyTrim < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textJustifyTrim < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextKashida < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textKashida < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextAutospace < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textAutospace < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetoverflowX < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn overflowX < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetoverflowY < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn overflowY < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setaccelerator < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn accelerator < Impl : IHTMLStyle2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SettableLayout : SettableLayout :: < Impl , IMPL_OFFSET > , tableLayout : tableLayout :: < Impl , IMPL_OFFSET > , SetborderCollapse : SetborderCollapse :: < Impl , IMPL_OFFSET > , borderCollapse : borderCollapse :: < Impl , IMPL_OFFSET > , Setdirection : Setdirection :: < Impl , IMPL_OFFSET > , direction : direction :: < Impl , IMPL_OFFSET > , Setbehavior : Setbehavior :: < Impl , IMPL_OFFSET > , behavior : behavior :: < Impl , IMPL_OFFSET > , setExpression : setExpression :: < Impl , IMPL_OFFSET > , getExpression : getExpression :: < Impl , IMPL_OFFSET > , removeExpression : removeExpression :: < Impl , IMPL_OFFSET > , Setposition : Setposition :: < Impl , IMPL_OFFSET > , position : position :: < Impl , IMPL_OFFSET > , SetunicodeBidi : SetunicodeBidi :: < Impl , IMPL_OFFSET > , unicodeBidi : unicodeBidi :: < Impl , IMPL_OFFSET > , Setbottom : Setbottom :: < Impl , IMPL_OFFSET > , bottom : bottom :: < Impl , IMPL_OFFSET > , Setright : Setright :: < Impl , IMPL_OFFSET > , right : right :: < Impl , IMPL_OFFSET > , SetpixelBottom : SetpixelBottom :: < Impl , IMPL_OFFSET > , pixelBottom : pixelBottom :: < Impl , IMPL_OFFSET > , SetpixelRight : SetpixelRight :: < Impl , IMPL_OFFSET > , pixelRight : pixelRight :: < Impl , IMPL_OFFSET > , SetposBottom : SetposBottom :: < Impl , IMPL_OFFSET > , posBottom : posBottom :: < Impl , IMPL_OFFSET > , SetposRight : SetposRight :: < Impl , IMPL_OFFSET > , posRight : posRight :: < Impl , IMPL_OFFSET > , SetimeMode : SetimeMode :: < Impl , IMPL_OFFSET > , imeMode : imeMode :: < Impl , IMPL_OFFSET > , SetrubyAlign : SetrubyAlign :: < Impl , IMPL_OFFSET > , rubyAlign : rubyAlign :: < Impl , IMPL_OFFSET > , SetrubyPosition : SetrubyPosition :: < Impl , IMPL_OFFSET > , rubyPosition : rubyPosition :: < Impl , IMPL_OFFSET > , SetrubyOverhang : SetrubyOverhang :: < Impl , IMPL_OFFSET > , rubyOverhang : rubyOverhang :: < Impl , IMPL_OFFSET > , SetlayoutGridChar : SetlayoutGridChar :: < Impl , IMPL_OFFSET > , layoutGridChar : layoutGridChar :: < Impl , IMPL_OFFSET > , SetlayoutGridLine : SetlayoutGridLine :: < Impl , IMPL_OFFSET > , layoutGridLine : layoutGridLine :: < Impl , IMPL_OFFSET > , SetlayoutGridMode : SetlayoutGridMode :: < Impl , IMPL_OFFSET > , layoutGridMode : layoutGridMode :: < Impl , IMPL_OFFSET > , SetlayoutGridType : SetlayoutGridType :: < Impl , IMPL_OFFSET > , layoutGridType : layoutGridType :: < Impl , IMPL_OFFSET > , SetlayoutGrid : SetlayoutGrid :: < Impl , IMPL_OFFSET > , layoutGrid : layoutGrid :: < Impl , IMPL_OFFSET > , SetwordBreak : SetwordBreak :: < Impl , IMPL_OFFSET > , wordBreak : wordBreak :: < Impl , IMPL_OFFSET > , SetlineBreak : SetlineBreak :: < Impl , IMPL_OFFSET > , lineBreak : lineBreak :: < Impl , IMPL_OFFSET > , SettextJustify : SettextJustify :: < Impl , IMPL_OFFSET > , textJustify : textJustify :: < Impl , IMPL_OFFSET > , SettextJustifyTrim : SettextJustifyTrim :: < Impl , IMPL_OFFSET > , textJustifyTrim : textJustifyTrim :: < Impl , IMPL_OFFSET > , SettextKashida : SettextKashida :: < Impl , IMPL_OFFSET > , textKashida : textKashida :: < Impl , IMPL_OFFSET > , SettextAutospace : SettextAutospace :: < Impl , IMPL_OFFSET > , textAutospace : textAutospace :: < Impl , IMPL_OFFSET > , SetoverflowX : SetoverflowX :: < Impl , IMPL_OFFSET > , overflowX : overflowX :: < Impl , IMPL_OFFSET > , SetoverflowY : SetoverflowY :: < Impl , IMPL_OFFSET > , overflowY : overflowY :: < Impl , IMPL_OFFSET > , Setaccelerator : Setaccelerator :: < Impl , IMPL_OFFSET > , accelerator : accelerator :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLStyle2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLStyle3Impl < > : Sized + IDispatchImpl where { fn SetlayoutFlow ( ) ; fn layoutFlow ( ) ; fn Setzoom ( ) ; fn zoom ( ) ; fn SetwordWrap ( ) ; fn wordWrap ( ) ; fn SettextUnderlinePosition ( ) ; fn textUnderlinePosition ( ) ; fn SetscrollbarBaseColor ( ) ; fn scrollbarBaseColor ( ) ; fn SetscrollbarFaceColor ( ) ; fn scrollbarFaceColor ( ) ; fn Setscrollbar3dLightColor ( ) ; fn scrollbar3dLightColor ( ) ; fn SetscrollbarShadowColor ( ) ; fn scrollbarShadowColor ( ) ; fn SetscrollbarHighlightColor ( ) ; fn scrollbarHighlightColor ( ) ; fn SetscrollbarDarkShadowColor ( ) ; fn scrollbarDarkShadowColor ( ) ; fn SetscrollbarArrowColor ( ) ; fn scrollbarArrowColor ( ) ; fn SetscrollbarTrackColor ( ) ; fn scrollbarTrackColor ( ) ; fn SetwritingMode ( ) ; fn writingMode ( ) ; fn SettextAlignLast ( ) ; fn textAlignLast ( ) ; fn SettextKashidaSpace ( ) ; fn textKashidaSpace ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLStyle3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLStyle3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLStyle3Vtbl < > { unsafe extern "system" fn SetlayoutFlow < Impl : IHTMLStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn layoutFlow < Impl : IHTMLStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setzoom < Impl : IHTMLStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn zoom < Impl : IHTMLStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwordWrap < Impl : IHTMLStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn wordWrap < Impl : IHTMLStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextUnderlinePosition < Impl : IHTMLStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textUnderlinePosition < Impl : IHTMLStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetscrollbarBaseColor < Impl : IHTMLStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scrollbarBaseColor < Impl : IHTMLStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetscrollbarFaceColor < Impl : IHTMLStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scrollbarFaceColor < Impl : IHTMLStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setscrollbar3dLightColor < Impl : IHTMLStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scrollbar3dLightColor < Impl : IHTMLStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetscrollbarShadowColor < Impl : IHTMLStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scrollbarShadowColor < Impl : IHTMLStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetscrollbarHighlightColor < Impl : IHTMLStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scrollbarHighlightColor < Impl : IHTMLStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetscrollbarDarkShadowColor < Impl : IHTMLStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scrollbarDarkShadowColor < Impl : IHTMLStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetscrollbarArrowColor < Impl : IHTMLStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scrollbarArrowColor < Impl : IHTMLStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetscrollbarTrackColor < Impl : IHTMLStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scrollbarTrackColor < Impl : IHTMLStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetwritingMode < Impl : IHTMLStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn writingMode < Impl : IHTMLStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextAlignLast < Impl : IHTMLStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textAlignLast < Impl : IHTMLStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextKashidaSpace < Impl : IHTMLStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textKashidaSpace < Impl : IHTMLStyle3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetlayoutFlow : SetlayoutFlow :: < Impl , IMPL_OFFSET > , layoutFlow : layoutFlow :: < Impl , IMPL_OFFSET > , Setzoom : Setzoom :: < Impl , IMPL_OFFSET > , zoom : zoom :: < Impl , IMPL_OFFSET > , SetwordWrap : SetwordWrap :: < Impl , IMPL_OFFSET > , wordWrap : wordWrap :: < Impl , IMPL_OFFSET > , SettextUnderlinePosition : SettextUnderlinePosition :: < Impl , IMPL_OFFSET > , textUnderlinePosition : textUnderlinePosition :: < Impl , IMPL_OFFSET > , SetscrollbarBaseColor : SetscrollbarBaseColor :: < Impl , IMPL_OFFSET > , scrollbarBaseColor : scrollbarBaseColor :: < Impl , IMPL_OFFSET > , SetscrollbarFaceColor : SetscrollbarFaceColor :: < Impl , IMPL_OFFSET > , scrollbarFaceColor : scrollbarFaceColor :: < Impl , IMPL_OFFSET > , Setscrollbar3dLightColor : Setscrollbar3dLightColor :: < Impl , IMPL_OFFSET > , scrollbar3dLightColor : scrollbar3dLightColor :: < Impl , IMPL_OFFSET > , SetscrollbarShadowColor : SetscrollbarShadowColor :: < Impl , IMPL_OFFSET > , scrollbarShadowColor : scrollbarShadowColor :: < Impl , IMPL_OFFSET > , SetscrollbarHighlightColor : SetscrollbarHighlightColor :: < Impl , IMPL_OFFSET > , scrollbarHighlightColor : scrollbarHighlightColor :: < Impl , IMPL_OFFSET > , SetscrollbarDarkShadowColor : SetscrollbarDarkShadowColor :: < Impl , IMPL_OFFSET > , scrollbarDarkShadowColor : scrollbarDarkShadowColor :: < Impl , IMPL_OFFSET > , SetscrollbarArrowColor : SetscrollbarArrowColor :: < Impl , IMPL_OFFSET > , scrollbarArrowColor : scrollbarArrowColor :: < Impl , IMPL_OFFSET > , SetscrollbarTrackColor : SetscrollbarTrackColor :: < Impl , IMPL_OFFSET > , scrollbarTrackColor : scrollbarTrackColor :: < Impl , IMPL_OFFSET > , SetwritingMode : SetwritingMode :: < Impl , IMPL_OFFSET > , writingMode : writingMode :: < Impl , IMPL_OFFSET > , SettextAlignLast : SettextAlignLast :: < Impl , IMPL_OFFSET > , textAlignLast : textAlignLast :: < Impl , IMPL_OFFSET > , SettextKashidaSpace : SettextKashidaSpace :: < Impl , IMPL_OFFSET > , textKashidaSpace : textKashidaSpace :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLStyle3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLStyle4Impl < > : Sized + IDispatchImpl where { fn SettextOverflow ( ) ; fn textOverflow ( ) ; fn SetminHeight ( ) ; fn minHeight ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLStyle4Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLStyle4Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLStyle4Vtbl < > { unsafe extern "system" fn SettextOverflow < Impl : IHTMLStyle4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textOverflow < Impl : IHTMLStyle4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetminHeight < Impl : IHTMLStyle4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn minHeight < Impl : IHTMLStyle4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SettextOverflow : SettextOverflow :: < Impl , IMPL_OFFSET > , textOverflow : textOverflow :: < Impl , IMPL_OFFSET > , SetminHeight : SetminHeight :: < Impl , IMPL_OFFSET > , minHeight : minHeight :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLStyle4 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLStyle5Impl < > : Sized + IDispatchImpl where { fn SetmsInterpolationMode ( ) ; fn msInterpolationMode ( ) ; fn SetmaxHeight ( ) ; fn maxHeight ( ) ; fn SetminWidth ( ) ; fn minWidth ( ) ; fn SetmaxWidth ( ) ; fn maxWidth ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLStyle5Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLStyle5Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLStyle5Vtbl < > { unsafe extern "system" fn SetmsInterpolationMode < Impl : IHTMLStyle5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msInterpolationMode < Impl : IHTMLStyle5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmaxHeight < Impl : IHTMLStyle5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn maxHeight < Impl : IHTMLStyle5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetminWidth < Impl : IHTMLStyle5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn minWidth < Impl : IHTMLStyle5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmaxWidth < Impl : IHTMLStyle5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn maxWidth < Impl : IHTMLStyle5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetmsInterpolationMode : SetmsInterpolationMode :: < Impl , IMPL_OFFSET > , msInterpolationMode : msInterpolationMode :: < Impl , IMPL_OFFSET > , SetmaxHeight : SetmaxHeight :: < Impl , IMPL_OFFSET > , maxHeight : maxHeight :: < Impl , IMPL_OFFSET > , SetminWidth : SetminWidth :: < Impl , IMPL_OFFSET > , minWidth : minWidth :: < Impl , IMPL_OFFSET > , SetmaxWidth : SetmaxWidth :: < Impl , IMPL_OFFSET > , maxWidth : maxWidth :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLStyle5 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLStyle6Impl < > : Sized + IDispatchImpl where { fn Setcontent ( ) ; fn content ( ) ; fn SetcaptionSide ( ) ; fn captionSide ( ) ; fn SetcounterIncrement ( ) ; fn counterIncrement ( ) ; fn SetcounterReset ( ) ; fn counterReset ( ) ; fn Setoutline ( ) ; fn outline ( ) ; fn SetoutlineWidth ( ) ; fn outlineWidth ( ) ; fn SetoutlineStyle ( ) ; fn outlineStyle ( ) ; fn SetoutlineColor ( ) ; fn outlineColor ( ) ; fn SetboxSizing ( ) ; fn boxSizing ( ) ; fn SetborderSpacing ( ) ; fn borderSpacing ( ) ; fn Setorphans ( ) ; fn orphans ( ) ; fn Setwidows ( ) ; fn widows ( ) ; fn SetpageBreakInside ( ) ; fn pageBreakInside ( ) ; fn SetemptyCells ( ) ; fn emptyCells ( ) ; fn SetmsBlockProgression ( ) ; fn msBlockProgression ( ) ; fn Setquotes ( ) ; fn quotes ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLStyle6Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLStyle6Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLStyle6Vtbl < > { unsafe extern "system" fn Setcontent < Impl : IHTMLStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn content < Impl : IHTMLStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetcaptionSide < Impl : IHTMLStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn captionSide < Impl : IHTMLStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetcounterIncrement < Impl : IHTMLStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn counterIncrement < Impl : IHTMLStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetcounterReset < Impl : IHTMLStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn counterReset < Impl : IHTMLStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setoutline < Impl : IHTMLStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn outline < Impl : IHTMLStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetoutlineWidth < Impl : IHTMLStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn outlineWidth < Impl : IHTMLStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetoutlineStyle < Impl : IHTMLStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn outlineStyle < Impl : IHTMLStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetoutlineColor < Impl : IHTMLStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn outlineColor < Impl : IHTMLStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetboxSizing < Impl : IHTMLStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn boxSizing < Impl : IHTMLStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderSpacing < Impl : IHTMLStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderSpacing < Impl : IHTMLStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setorphans < Impl : IHTMLStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn orphans < Impl : IHTMLStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setwidows < Impl : IHTMLStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn widows < Impl : IHTMLStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetpageBreakInside < Impl : IHTMLStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn pageBreakInside < Impl : IHTMLStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetemptyCells < Impl : IHTMLStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn emptyCells < Impl : IHTMLStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmsBlockProgression < Impl : IHTMLStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msBlockProgression < Impl : IHTMLStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setquotes < Impl : IHTMLStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn quotes < Impl : IHTMLStyle6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setcontent : Setcontent :: < Impl , IMPL_OFFSET > , content : content :: < Impl , IMPL_OFFSET > , SetcaptionSide : SetcaptionSide :: < Impl , IMPL_OFFSET > , captionSide : captionSide :: < Impl , IMPL_OFFSET > , SetcounterIncrement : SetcounterIncrement :: < Impl , IMPL_OFFSET > , counterIncrement : counterIncrement :: < Impl , IMPL_OFFSET > , SetcounterReset : SetcounterReset :: < Impl , IMPL_OFFSET > , counterReset : counterReset :: < Impl , IMPL_OFFSET > , Setoutline : Setoutline :: < Impl , IMPL_OFFSET > , outline : outline :: < Impl , IMPL_OFFSET > , SetoutlineWidth : SetoutlineWidth :: < Impl , IMPL_OFFSET > , outlineWidth : outlineWidth :: < Impl , IMPL_OFFSET > , SetoutlineStyle : SetoutlineStyle :: < Impl , IMPL_OFFSET > , outlineStyle : outlineStyle :: < Impl , IMPL_OFFSET > , SetoutlineColor : SetoutlineColor :: < Impl , IMPL_OFFSET > , outlineColor : outlineColor :: < Impl , IMPL_OFFSET > , SetboxSizing : SetboxSizing :: < Impl , IMPL_OFFSET > , boxSizing : boxSizing :: < Impl , IMPL_OFFSET > , SetborderSpacing : SetborderSpacing :: < Impl , IMPL_OFFSET > , borderSpacing : borderSpacing :: < Impl , IMPL_OFFSET > , Setorphans : Setorphans :: < Impl , IMPL_OFFSET > , orphans : orphans :: < Impl , IMPL_OFFSET > , Setwidows : Setwidows :: < Impl , IMPL_OFFSET > , widows : widows :: < Impl , IMPL_OFFSET > , SetpageBreakInside : SetpageBreakInside :: < Impl , IMPL_OFFSET > , pageBreakInside : pageBreakInside :: < Impl , IMPL_OFFSET > , SetemptyCells : SetemptyCells :: < Impl , IMPL_OFFSET > , emptyCells : emptyCells :: < Impl , IMPL_OFFSET > , SetmsBlockProgression : SetmsBlockProgression :: < Impl , IMPL_OFFSET > , msBlockProgression : msBlockProgression :: < Impl , IMPL_OFFSET > , Setquotes : Setquotes :: < Impl , IMPL_OFFSET > , quotes : quotes :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLStyle6 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLStyleElementImpl < > : Sized + IDispatchImpl where { fn Settype ( ) ; fn r#type ( ) ; fn readyState ( ) ; fn Setonreadystatechange ( ) ; fn onreadystatechange ( ) ; fn Setonload ( ) ; fn onload ( ) ; fn Setonerror ( ) ; fn onerror ( ) ; fn styleSheet ( ) ; fn Setdisabled ( ) ; fn disabled ( ) ; fn Setmedia ( ) ; fn media ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLStyleElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLStyleElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLStyleElementVtbl < > { unsafe extern "system" fn Settype < Impl : IHTMLStyleElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn r#type < Impl : IHTMLStyleElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn readyState < Impl : IHTMLStyleElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonreadystatechange < Impl : IHTMLStyleElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onreadystatechange < Impl : IHTMLStyleElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonload < Impl : IHTMLStyleElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onload < Impl : IHTMLStyleElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonerror < Impl : IHTMLStyleElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onerror < Impl : IHTMLStyleElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn styleSheet < Impl : IHTMLStyleElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setdisabled < Impl : IHTMLStyleElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn disabled < Impl : IHTMLStyleElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setmedia < Impl : IHTMLStyleElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn media < Impl : IHTMLStyleElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Settype : Settype :: < Impl , IMPL_OFFSET > , r#type : r#type :: < Impl , IMPL_OFFSET > , readyState : readyState :: < Impl , IMPL_OFFSET > , Setonreadystatechange : Setonreadystatechange :: < Impl , IMPL_OFFSET > , onreadystatechange : onreadystatechange :: < Impl , IMPL_OFFSET > , Setonload : Setonload :: < Impl , IMPL_OFFSET > , onload : onload :: < Impl , IMPL_OFFSET > , Setonerror : Setonerror :: < Impl , IMPL_OFFSET > , onerror : onerror :: < Impl , IMPL_OFFSET > , styleSheet : styleSheet :: < Impl , IMPL_OFFSET > , Setdisabled : Setdisabled :: < Impl , IMPL_OFFSET > , disabled : disabled :: < Impl , IMPL_OFFSET > , Setmedia : Setmedia :: < Impl , IMPL_OFFSET > , media : media :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLStyleElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLStyleElement2Impl < > : Sized + IDispatchImpl where { fn sheet ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLStyleElement2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLStyleElement2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLStyleElement2Vtbl < > { unsafe extern "system" fn sheet < Impl : IHTMLStyleElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , sheet : sheet :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLStyleElement2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLStyleEnabledImpl < > : Sized + IDispatchImpl where { fn msGetPropertyEnabled ( ) ; fn msPutPropertyEnabled ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLStyleEnabledVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLStyleEnabledImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLStyleEnabledVtbl < > { unsafe extern "system" fn msGetPropertyEnabled < Impl : IHTMLStyleEnabledImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , name : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msPutPropertyEnabled < Impl : IHTMLStyleEnabledImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , name : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , b : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , msGetPropertyEnabled : msGetPropertyEnabled :: < Impl , IMPL_OFFSET > , msPutPropertyEnabled : msPutPropertyEnabled :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLStyleEnabled < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLStyleFontFaceImpl < > : Sized + IDispatchImpl where { fn Setfontsrc ( ) ; fn fontsrc ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLStyleFontFaceVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLStyleFontFaceImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLStyleFontFaceVtbl < > { unsafe extern "system" fn Setfontsrc < Impl : IHTMLStyleFontFaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn fontsrc < Impl : IHTMLStyleFontFaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setfontsrc : Setfontsrc :: < Impl , IMPL_OFFSET > , fontsrc : fontsrc :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLStyleFontFace < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLStyleFontFace2Impl < > : Sized + IDispatchImpl where { fn style ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLStyleFontFace2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLStyleFontFace2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLStyleFontFace2Vtbl < > { unsafe extern "system" fn style < Impl : IHTMLStyleFontFace2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , style : style :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLStyleFontFace2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLStyleMediaImpl < > : Sized + IDispatchImpl where { fn r#type ( ) ; fn matchMedium ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLStyleMediaVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLStyleMediaImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLStyleMediaVtbl < > { unsafe extern "system" fn r#type < Impl : IHTMLStyleMediaImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn matchMedium < Impl : IHTMLStyleMediaImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , mediaquery : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , matches : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , r#type : r#type :: < Impl , IMPL_OFFSET > , matchMedium : matchMedium :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLStyleMedia < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLStyleSheetImpl < > : Sized + IDispatchImpl where { fn Settitle ( ) ; fn title ( ) ; fn parentStyleSheet ( ) ; fn owningElement ( ) ; fn Setdisabled ( ) ; fn disabled ( ) ; fn readOnly ( ) ; fn imports ( ) ; fn Sethref ( ) ; fn href ( ) ; fn r#type ( ) ; fn id ( ) ; fn addImport ( ) ; fn addRule ( ) ; fn removeImport ( ) ; fn removeRule ( ) ; fn Setmedia ( ) ; fn media ( ) ; fn SetcssText ( ) ; fn cssText ( ) ; fn rules ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLStyleSheetVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLStyleSheetImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLStyleSheetVtbl < > { unsafe extern "system" fn Settitle < Impl : IHTMLStyleSheetImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn title < Impl : IHTMLStyleSheetImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn parentStyleSheet < Impl : IHTMLStyleSheetImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn owningElement < Impl : IHTMLStyleSheetImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setdisabled < Impl : IHTMLStyleSheetImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn disabled < Impl : IHTMLStyleSheetImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn readOnly < Impl : IHTMLStyleSheetImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn imports < Impl : IHTMLStyleSheetImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Sethref < Impl : IHTMLStyleSheetImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn href < Impl : IHTMLStyleSheetImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn r#type < Impl : IHTMLStyleSheetImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn id < Impl : IHTMLStyleSheetImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn addImport < Impl : IHTMLStyleSheetImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrurl : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , lindex : i32 , plindex : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn addRule < Impl : IHTMLStyleSheetImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrselector : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , bstrstyle : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , lindex : i32 , plnewindex : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn removeImport < Impl : IHTMLStyleSheetImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lindex : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn removeRule < Impl : IHTMLStyleSheetImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lindex : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setmedia < Impl : IHTMLStyleSheetImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn media < Impl : IHTMLStyleSheetImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetcssText < Impl : IHTMLStyleSheetImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn cssText < Impl : IHTMLStyleSheetImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn rules < Impl : IHTMLStyleSheetImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Settitle : Settitle :: < Impl , IMPL_OFFSET > , title : title :: < Impl , IMPL_OFFSET > , parentStyleSheet : parentStyleSheet :: < Impl , IMPL_OFFSET > , owningElement : owningElement :: < Impl , IMPL_OFFSET > , Setdisabled : Setdisabled :: < Impl , IMPL_OFFSET > , disabled : disabled :: < Impl , IMPL_OFFSET > , readOnly : readOnly :: < Impl , IMPL_OFFSET > , imports : imports :: < Impl , IMPL_OFFSET > , Sethref : Sethref :: < Impl , IMPL_OFFSET > , href : href :: < Impl , IMPL_OFFSET > , r#type : r#type :: < Impl , IMPL_OFFSET > , id : id :: < Impl , IMPL_OFFSET > , addImport : addImport :: < Impl , IMPL_OFFSET > , addRule : addRule :: < Impl , IMPL_OFFSET > , removeImport : removeImport :: < Impl , IMPL_OFFSET > , removeRule : removeRule :: < Impl , IMPL_OFFSET > , Setmedia : Setmedia :: < Impl , IMPL_OFFSET > , media : media :: < Impl , IMPL_OFFSET > , SetcssText : SetcssText :: < Impl , IMPL_OFFSET > , cssText : cssText :: < Impl , IMPL_OFFSET > , rules : rules :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLStyleSheet < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLStyleSheet2Impl < > : Sized + IDispatchImpl where { fn pages ( ) ; fn addPageRule ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLStyleSheet2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLStyleSheet2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLStyleSheet2Vtbl < > { unsafe extern "system" fn pages < Impl : IHTMLStyleSheet2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn addPageRule < Impl : IHTMLStyleSheet2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrselector : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , bstrstyle : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , lindex : i32 , plnewindex : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , pages : pages :: < Impl , IMPL_OFFSET > , addPageRule : addPageRule :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLStyleSheet2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLStyleSheet3Impl < > : Sized + IDispatchImpl where { fn Sethref ( ) ; fn href ( ) ; fn isAlternate ( ) ; fn isPrefAlternate ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLStyleSheet3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLStyleSheet3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLStyleSheet3Vtbl < > { unsafe extern "system" fn Sethref < Impl : IHTMLStyleSheet3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn href < Impl : IHTMLStyleSheet3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn isAlternate < Impl : IHTMLStyleSheet3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn isPrefAlternate < Impl : IHTMLStyleSheet3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Sethref : Sethref :: < Impl , IMPL_OFFSET > , href : href :: < Impl , IMPL_OFFSET > , isAlternate : isAlternate :: < Impl , IMPL_OFFSET > , isPrefAlternate : isPrefAlternate :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLStyleSheet3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLStyleSheet4Impl < > : Sized + IDispatchImpl where { fn r#type ( ) ; fn href ( ) ; fn title ( ) ; fn ownerNode ( ) ; fn ownerRule ( ) ; fn cssRules ( ) ; fn media ( ) ; fn insertRule ( ) ; fn deleteRule ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLStyleSheet4Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLStyleSheet4Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLStyleSheet4Vtbl < > { unsafe extern "system" fn r#type < Impl : IHTMLStyleSheet4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn href < Impl : IHTMLStyleSheet4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn title < Impl : IHTMLStyleSheet4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ownerNode < Impl : IHTMLStyleSheet4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ownerRule < Impl : IHTMLStyleSheet4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn cssRules < Impl : IHTMLStyleSheet4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn media < Impl : IHTMLStyleSheet4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn insertRule < Impl : IHTMLStyleSheet4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrrule : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , lindex : i32 , plnewindex : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn deleteRule < Impl : IHTMLStyleSheet4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lindex : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , r#type : r#type :: < Impl , IMPL_OFFSET > , href : href :: < Impl , IMPL_OFFSET > , title : title :: < Impl , IMPL_OFFSET > , ownerNode : ownerNode :: < Impl , IMPL_OFFSET > , ownerRule : ownerRule :: < Impl , IMPL_OFFSET > , cssRules : cssRules :: < Impl , IMPL_OFFSET > , media : media :: < Impl , IMPL_OFFSET > , insertRule : insertRule :: < Impl , IMPL_OFFSET > , deleteRule : deleteRule :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLStyleSheet4 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLStyleSheetPageImpl < > : Sized + IDispatchImpl where { fn selector ( ) ; fn pseudoClass ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLStyleSheetPageVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLStyleSheetPageImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLStyleSheetPageVtbl < > { unsafe extern "system" fn selector < Impl : IHTMLStyleSheetPageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn pseudoClass < Impl : IHTMLStyleSheetPageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , selector : selector :: < Impl , IMPL_OFFSET > , pseudoClass : pseudoClass :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLStyleSheetPage < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLStyleSheetPage2Impl < > : Sized + IDispatchImpl where { fn SetselectorText ( ) ; fn selectorText ( ) ; fn style ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLStyleSheetPage2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLStyleSheetPage2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLStyleSheetPage2Vtbl < > { unsafe extern "system" fn SetselectorText < Impl : IHTMLStyleSheetPage2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn selectorText < Impl : IHTMLStyleSheetPage2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn style < Impl : IHTMLStyleSheetPage2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetselectorText : SetselectorText :: < Impl , IMPL_OFFSET > , selectorText : selectorText :: < Impl , IMPL_OFFSET > , style : style :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLStyleSheetPage2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLStyleSheetPagesCollectionImpl < > : Sized + IDispatchImpl where { fn length ( ) ; fn item ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLStyleSheetPagesCollectionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLStyleSheetPagesCollectionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLStyleSheetPagesCollectionVtbl < > { unsafe extern "system" fn length < Impl : IHTMLStyleSheetPagesCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn item < Impl : IHTMLStyleSheetPagesCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , pphtmlstylesheetpage : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , length : length :: < Impl , IMPL_OFFSET > , item : item :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLStyleSheetPagesCollection < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLStyleSheetRuleImpl < > : Sized + IDispatchImpl where { fn SetselectorText ( ) ; fn selectorText ( ) ; fn style ( ) ; fn readOnly ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLStyleSheetRuleVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLStyleSheetRuleImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLStyleSheetRuleVtbl < > { unsafe extern "system" fn SetselectorText < Impl : IHTMLStyleSheetRuleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn selectorText < Impl : IHTMLStyleSheetRuleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn style < Impl : IHTMLStyleSheetRuleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn readOnly < Impl : IHTMLStyleSheetRuleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetselectorText : SetselectorText :: < Impl , IMPL_OFFSET > , selectorText : selectorText :: < Impl , IMPL_OFFSET > , style : style :: < Impl , IMPL_OFFSET > , readOnly : readOnly :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLStyleSheetRule < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLStyleSheetRule2Impl < > : Sized + IDispatchImpl where { fn SetselectorText ( ) ; fn selectorText ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLStyleSheetRule2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLStyleSheetRule2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLStyleSheetRule2Vtbl < > { unsafe extern "system" fn SetselectorText < Impl : IHTMLStyleSheetRule2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn selectorText < Impl : IHTMLStyleSheetRule2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetselectorText : SetselectorText :: < Impl , IMPL_OFFSET > , selectorText : selectorText :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLStyleSheetRule2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLStyleSheetRuleAppliedImpl < > : Sized + IDispatchImpl where { fn msSpecificity ( ) ; fn msGetSpecificity ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLStyleSheetRuleAppliedVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLStyleSheetRuleAppliedImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLStyleSheetRuleAppliedVtbl < > { unsafe extern "system" fn msSpecificity < Impl : IHTMLStyleSheetRuleAppliedImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msGetSpecificity < Impl : IHTMLStyleSheetRuleAppliedImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , msSpecificity : msSpecificity :: < Impl , IMPL_OFFSET > , msGetSpecificity : msGetSpecificity :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLStyleSheetRuleApplied < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLStyleSheetRulesAppliedCollectionImpl < > : Sized + IDispatchImpl where { fn item ( ) ; fn length ( ) ; fn propertyAppliedBy ( ) ; fn propertyAppliedTrace ( ) ; fn propertyAppliedTraceLength ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLStyleSheetRulesAppliedCollectionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLStyleSheetRulesAppliedCollectionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLStyleSheetRulesAppliedCollectionVtbl < > { unsafe extern "system" fn item < Impl : IHTMLStyleSheetRulesAppliedCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , pphtmlstylesheetrule : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn length < Impl : IHTMLStyleSheetRulesAppliedCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn propertyAppliedBy < Impl : IHTMLStyleSheetRulesAppliedCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , name : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pprule : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn propertyAppliedTrace < Impl : IHTMLStyleSheetRulesAppliedCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , name : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , index : i32 , pprule : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn propertyAppliedTraceLength < Impl : IHTMLStyleSheetRulesAppliedCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , name : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , plength : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , item : item :: < Impl , IMPL_OFFSET > , length : length :: < Impl , IMPL_OFFSET > , propertyAppliedBy : propertyAppliedBy :: < Impl , IMPL_OFFSET > , propertyAppliedTrace : propertyAppliedTrace :: < Impl , IMPL_OFFSET > , propertyAppliedTraceLength : propertyAppliedTraceLength :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLStyleSheetRulesAppliedCollection < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLStyleSheetRulesCollectionImpl < > : Sized + IDispatchImpl where { fn length ( ) ; fn item ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLStyleSheetRulesCollectionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLStyleSheetRulesCollectionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLStyleSheetRulesCollectionVtbl < > { unsafe extern "system" fn length < Impl : IHTMLStyleSheetRulesCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn item < Impl : IHTMLStyleSheetRulesCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , pphtmlstylesheetrule : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , length : length :: < Impl , IMPL_OFFSET > , item : item :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLStyleSheetRulesCollection < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLStyleSheetRulesCollection2Impl < > : Sized + IDispatchImpl where { fn length ( ) ; fn item ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLStyleSheetRulesCollection2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLStyleSheetRulesCollection2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLStyleSheetRulesCollection2Vtbl < > { unsafe extern "system" fn length < Impl : IHTMLStyleSheetRulesCollection2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn item < Impl : IHTMLStyleSheetRulesCollection2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , pphtmlcssrule : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , length : length :: < Impl , IMPL_OFFSET > , item : item :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLStyleSheetRulesCollection2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLStyleSheetsCollectionImpl < > : Sized + IDispatchImpl where { fn length ( ) ; fn _newEnum ( ) ; fn item ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLStyleSheetsCollectionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLStyleSheetsCollectionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLStyleSheetsCollectionVtbl < > { unsafe extern "system" fn length < Impl : IHTMLStyleSheetsCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _newEnum < Impl : IHTMLStyleSheetsCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn item < Impl : IHTMLStyleSheetsCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarindex : * const super::super::System::Com:: VARIANT , pvarresult : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , length : length :: < Impl , IMPL_OFFSET > , _newEnum : _newEnum :: < Impl , IMPL_OFFSET > , item : item :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLStyleSheetsCollection < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLStyleSheetsCollection2Impl < > : Sized + IDispatchImpl where { fn item ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLStyleSheetsCollection2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLStyleSheetsCollection2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLStyleSheetsCollection2Vtbl < > { unsafe extern "system" fn item < Impl : IHTMLStyleSheetsCollection2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , pvarresult : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , item : item :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLStyleSheetsCollection2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLSubmitDataImpl < > : Sized + IDispatchImpl where { fn appendNameValuePair ( ) ; fn appendNameFilePair ( ) ; fn appendItemSeparator ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLSubmitDataVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLSubmitDataImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLSubmitDataVtbl < > { unsafe extern "system" fn appendNameValuePair < Impl : IHTMLSubmitDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , name : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , value : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn appendNameFilePair < Impl : IHTMLSubmitDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , name : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , filename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn appendItemSeparator < Impl : IHTMLSubmitDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , appendNameValuePair : appendNameValuePair :: < Impl , IMPL_OFFSET > , appendNameFilePair : appendNameFilePair :: < Impl , IMPL_OFFSET > , appendItemSeparator : appendItemSeparator :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLSubmitData < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLTableImpl < > : Sized + IDispatchImpl where { fn Setcols ( ) ; fn cols ( ) ; fn Setborder ( ) ; fn border ( ) ; fn Setframe ( ) ; fn frame ( ) ; fn Setrules ( ) ; fn rules ( ) ; fn SetcellSpacing ( ) ; fn cellSpacing ( ) ; fn SetcellPadding ( ) ; fn cellPadding ( ) ; fn Setbackground ( ) ; fn background ( ) ; fn SetbgColor ( ) ; fn bgColor ( ) ; fn SetborderColor ( ) ; fn borderColor ( ) ; fn SetborderColorLight ( ) ; fn borderColorLight ( ) ; fn SetborderColorDark ( ) ; fn borderColorDark ( ) ; fn Setalign ( ) ; fn align ( ) ; fn refresh ( ) ; fn rows ( ) ; fn Setwidth ( ) ; fn width ( ) ; fn Setheight ( ) ; fn height ( ) ; fn SetdataPageSize ( ) ; fn dataPageSize ( ) ; fn nextPage ( ) ; fn previousPage ( ) ; fn tHead ( ) ; fn tFoot ( ) ; fn tBodies ( ) ; fn caption ( ) ; fn createTHead ( ) ; fn deleteTHead ( ) ; fn createTFoot ( ) ; fn deleteTFoot ( ) ; fn createCaption ( ) ; fn deleteCaption ( ) ; fn insertRow ( ) ; fn deleteRow ( ) ; fn readyState ( ) ; fn Setonreadystatechange ( ) ; fn onreadystatechange ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLTableVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLTableImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLTableVtbl < > { unsafe extern "system" fn Setcols < Impl : IHTMLTableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn cols < Impl : IHTMLTableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setborder < Impl : IHTMLTableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn border < Impl : IHTMLTableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setframe < Impl : IHTMLTableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn frame < Impl : IHTMLTableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setrules < Impl : IHTMLTableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn rules < Impl : IHTMLTableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetcellSpacing < Impl : IHTMLTableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn cellSpacing < Impl : IHTMLTableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetcellPadding < Impl : IHTMLTableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn cellPadding < Impl : IHTMLTableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setbackground < Impl : IHTMLTableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn background < Impl : IHTMLTableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetbgColor < Impl : IHTMLTableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn bgColor < Impl : IHTMLTableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderColor < Impl : IHTMLTableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderColor < Impl : IHTMLTableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderColorLight < Impl : IHTMLTableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderColorLight < Impl : IHTMLTableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderColorDark < Impl : IHTMLTableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderColorDark < Impl : IHTMLTableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setalign < Impl : IHTMLTableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn align < Impl : IHTMLTableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn refresh < Impl : IHTMLTableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn rows < Impl : IHTMLTableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setwidth < Impl : IHTMLTableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn width < Impl : IHTMLTableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setheight < Impl : IHTMLTableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn height < Impl : IHTMLTableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetdataPageSize < Impl : IHTMLTableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn dataPageSize < Impl : IHTMLTableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn nextPage < Impl : IHTMLTableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn previousPage < Impl : IHTMLTableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn tHead < Impl : IHTMLTableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn tFoot < Impl : IHTMLTableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn tBodies < Impl : IHTMLTableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn caption < Impl : IHTMLTableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createTHead < Impl : IHTMLTableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , head : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn deleteTHead < Impl : IHTMLTableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createTFoot < Impl : IHTMLTableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , foot : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn deleteTFoot < Impl : IHTMLTableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createCaption < Impl : IHTMLTableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , caption : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn deleteCaption < Impl : IHTMLTableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn insertRow < Impl : IHTMLTableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , row : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn deleteRow < Impl : IHTMLTableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn readyState < Impl : IHTMLTableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonreadystatechange < Impl : IHTMLTableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onreadystatechange < Impl : IHTMLTableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setcols : Setcols :: < Impl , IMPL_OFFSET > , cols : cols :: < Impl , IMPL_OFFSET > , Setborder : Setborder :: < Impl , IMPL_OFFSET > , border : border :: < Impl , IMPL_OFFSET > , Setframe : Setframe :: < Impl , IMPL_OFFSET > , frame : frame :: < Impl , IMPL_OFFSET > , Setrules : Setrules :: < Impl , IMPL_OFFSET > , rules : rules :: < Impl , IMPL_OFFSET > , SetcellSpacing : SetcellSpacing :: < Impl , IMPL_OFFSET > , cellSpacing : cellSpacing :: < Impl , IMPL_OFFSET > , SetcellPadding : SetcellPadding :: < Impl , IMPL_OFFSET > , cellPadding : cellPadding :: < Impl , IMPL_OFFSET > , Setbackground : Setbackground :: < Impl , IMPL_OFFSET > , background : background :: < Impl , IMPL_OFFSET > , SetbgColor : SetbgColor :: < Impl , IMPL_OFFSET > , bgColor : bgColor :: < Impl , IMPL_OFFSET > , SetborderColor : SetborderColor :: < Impl , IMPL_OFFSET > , borderColor : borderColor :: < Impl , IMPL_OFFSET > , SetborderColorLight : SetborderColorLight :: < Impl , IMPL_OFFSET > , borderColorLight : borderColorLight :: < Impl , IMPL_OFFSET > , SetborderColorDark : SetborderColorDark :: < Impl , IMPL_OFFSET > , borderColorDark : borderColorDark :: < Impl , IMPL_OFFSET > , Setalign : Setalign :: < Impl , IMPL_OFFSET > , align : align :: < Impl , IMPL_OFFSET > , refresh : refresh :: < Impl , IMPL_OFFSET > , rows : rows :: < Impl , IMPL_OFFSET > , Setwidth : Setwidth :: < Impl , IMPL_OFFSET > , width : width :: < Impl , IMPL_OFFSET > , Setheight : Setheight :: < Impl , IMPL_OFFSET > , height : height :: < Impl , IMPL_OFFSET > , SetdataPageSize : SetdataPageSize :: < Impl , IMPL_OFFSET > , dataPageSize : dataPageSize :: < Impl , IMPL_OFFSET > , nextPage : nextPage :: < Impl , IMPL_OFFSET > , previousPage : previousPage :: < Impl , IMPL_OFFSET > , tHead : tHead :: < Impl , IMPL_OFFSET > , tFoot : tFoot :: < Impl , IMPL_OFFSET > , tBodies : tBodies :: < Impl , IMPL_OFFSET > , caption : caption :: < Impl , IMPL_OFFSET > , createTHead : createTHead :: < Impl , IMPL_OFFSET > , deleteTHead : deleteTHead :: < Impl , IMPL_OFFSET > , createTFoot : createTFoot :: < Impl , IMPL_OFFSET > , deleteTFoot : deleteTFoot :: < Impl , IMPL_OFFSET > , createCaption : createCaption :: < Impl , IMPL_OFFSET > , deleteCaption : deleteCaption :: < Impl , IMPL_OFFSET > , insertRow : insertRow :: < Impl , IMPL_OFFSET > , deleteRow : deleteRow :: < Impl , IMPL_OFFSET > , readyState : readyState :: < Impl , IMPL_OFFSET > , Setonreadystatechange : Setonreadystatechange :: < Impl , IMPL_OFFSET > , onreadystatechange : onreadystatechange :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLTable < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLTable2Impl < > : Sized + IDispatchImpl where { fn firstPage ( ) ; fn lastPage ( ) ; fn cells ( ) ; fn moveRow ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLTable2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLTable2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLTable2Vtbl < > { unsafe extern "system" fn firstPage < Impl : IHTMLTable2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn lastPage < Impl : IHTMLTable2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn cells < Impl : IHTMLTable2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn moveRow < Impl : IHTMLTable2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , indexfrom : i32 , indexto : i32 , row : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , firstPage : firstPage :: < Impl , IMPL_OFFSET > , lastPage : lastPage :: < Impl , IMPL_OFFSET > , cells : cells :: < Impl , IMPL_OFFSET > , moveRow : moveRow :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLTable2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLTable3Impl < > : Sized + IDispatchImpl where { fn Setsummary ( ) ; fn summary ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLTable3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLTable3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLTable3Vtbl < > { unsafe extern "system" fn Setsummary < Impl : IHTMLTable3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn summary < Impl : IHTMLTable3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setsummary : Setsummary :: < Impl , IMPL_OFFSET > , summary : summary :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLTable3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLTable4Impl < > : Sized + IDispatchImpl where { fn putref_tHead ( ) ; fn tHead ( ) ; fn putref_tFoot ( ) ; fn tFoot ( ) ; fn putref_caption ( ) ; fn caption ( ) ; fn insertRow ( ) ; fn deleteRow ( ) ; fn createTBody ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLTable4Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLTable4Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLTable4Vtbl < > { unsafe extern "system" fn putref_tHead < Impl : IHTMLTable4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn tHead < Impl : IHTMLTable4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_tFoot < Impl : IHTMLTable4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn tFoot < Impl : IHTMLTable4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_caption < Impl : IHTMLTable4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn caption < Impl : IHTMLTable4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn insertRow < Impl : IHTMLTable4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , row : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn deleteRow < Impl : IHTMLTable4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createTBody < Impl : IHTMLTable4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , tbody : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , putref_tHead : putref_tHead :: < Impl , IMPL_OFFSET > , tHead : tHead :: < Impl , IMPL_OFFSET > , putref_tFoot : putref_tFoot :: < Impl , IMPL_OFFSET > , tFoot : tFoot :: < Impl , IMPL_OFFSET > , putref_caption : putref_caption :: < Impl , IMPL_OFFSET > , caption : caption :: < Impl , IMPL_OFFSET > , insertRow : insertRow :: < Impl , IMPL_OFFSET > , deleteRow : deleteRow :: < Impl , IMPL_OFFSET > , createTBody : createTBody :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLTable4 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLTableCaptionImpl < > : Sized + IDispatchImpl where { fn Setalign ( ) ; fn align ( ) ; fn SetvAlign ( ) ; fn vAlign ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLTableCaptionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLTableCaptionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLTableCaptionVtbl < > { unsafe extern "system" fn Setalign < Impl : IHTMLTableCaptionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn align < Impl : IHTMLTableCaptionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetvAlign < Impl : IHTMLTableCaptionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn vAlign < Impl : IHTMLTableCaptionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setalign : Setalign :: < Impl , IMPL_OFFSET > , align : align :: < Impl , IMPL_OFFSET > , SetvAlign : SetvAlign :: < Impl , IMPL_OFFSET > , vAlign : vAlign :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLTableCaption < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLTableCellImpl < > : Sized + IDispatchImpl where { fn SetrowSpan ( ) ; fn rowSpan ( ) ; fn SetcolSpan ( ) ; fn colSpan ( ) ; fn Setalign ( ) ; fn align ( ) ; fn SetvAlign ( ) ; fn vAlign ( ) ; fn SetbgColor ( ) ; fn bgColor ( ) ; fn SetnoWrap ( ) ; fn noWrap ( ) ; fn Setbackground ( ) ; fn background ( ) ; fn SetborderColor ( ) ; fn borderColor ( ) ; fn SetborderColorLight ( ) ; fn borderColorLight ( ) ; fn SetborderColorDark ( ) ; fn borderColorDark ( ) ; fn Setwidth ( ) ; fn width ( ) ; fn Setheight ( ) ; fn height ( ) ; fn cellIndex ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLTableCellVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLTableCellImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLTableCellVtbl < > { unsafe extern "system" fn SetrowSpan < Impl : IHTMLTableCellImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn rowSpan < Impl : IHTMLTableCellImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetcolSpan < Impl : IHTMLTableCellImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn colSpan < Impl : IHTMLTableCellImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setalign < Impl : IHTMLTableCellImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn align < Impl : IHTMLTableCellImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetvAlign < Impl : IHTMLTableCellImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn vAlign < Impl : IHTMLTableCellImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetbgColor < Impl : IHTMLTableCellImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn bgColor < Impl : IHTMLTableCellImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetnoWrap < Impl : IHTMLTableCellImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn noWrap < Impl : IHTMLTableCellImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setbackground < Impl : IHTMLTableCellImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn background < Impl : IHTMLTableCellImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderColor < Impl : IHTMLTableCellImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderColor < Impl : IHTMLTableCellImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderColorLight < Impl : IHTMLTableCellImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderColorLight < Impl : IHTMLTableCellImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderColorDark < Impl : IHTMLTableCellImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderColorDark < Impl : IHTMLTableCellImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setwidth < Impl : IHTMLTableCellImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn width < Impl : IHTMLTableCellImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setheight < Impl : IHTMLTableCellImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn height < Impl : IHTMLTableCellImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn cellIndex < Impl : IHTMLTableCellImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetrowSpan : SetrowSpan :: < Impl , IMPL_OFFSET > , rowSpan : rowSpan :: < Impl , IMPL_OFFSET > , SetcolSpan : SetcolSpan :: < Impl , IMPL_OFFSET > , colSpan : colSpan :: < Impl , IMPL_OFFSET > , Setalign : Setalign :: < Impl , IMPL_OFFSET > , align : align :: < Impl , IMPL_OFFSET > , SetvAlign : SetvAlign :: < Impl , IMPL_OFFSET > , vAlign : vAlign :: < Impl , IMPL_OFFSET > , SetbgColor : SetbgColor :: < Impl , IMPL_OFFSET > , bgColor : bgColor :: < Impl , IMPL_OFFSET > , SetnoWrap : SetnoWrap :: < Impl , IMPL_OFFSET > , noWrap : noWrap :: < Impl , IMPL_OFFSET > , Setbackground : Setbackground :: < Impl , IMPL_OFFSET > , background : background :: < Impl , IMPL_OFFSET > , SetborderColor : SetborderColor :: < Impl , IMPL_OFFSET > , borderColor : borderColor :: < Impl , IMPL_OFFSET > , SetborderColorLight : SetborderColorLight :: < Impl , IMPL_OFFSET > , borderColorLight : borderColorLight :: < Impl , IMPL_OFFSET > , SetborderColorDark : SetborderColorDark :: < Impl , IMPL_OFFSET > , borderColorDark : borderColorDark :: < Impl , IMPL_OFFSET > , Setwidth : Setwidth :: < Impl , IMPL_OFFSET > , width : width :: < Impl , IMPL_OFFSET > , Setheight : Setheight :: < Impl , IMPL_OFFSET > , height : height :: < Impl , IMPL_OFFSET > , cellIndex : cellIndex :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLTableCell < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLTableCell2Impl < > : Sized + IDispatchImpl where { fn Setabbr ( ) ; fn abbr ( ) ; fn Setaxis ( ) ; fn axis ( ) ; fn Setch ( ) ; fn ch ( ) ; fn SetchOff ( ) ; fn chOff ( ) ; fn Setheaders ( ) ; fn headers ( ) ; fn Setscope ( ) ; fn scope ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLTableCell2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLTableCell2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLTableCell2Vtbl < > { unsafe extern "system" fn Setabbr < Impl : IHTMLTableCell2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn abbr < Impl : IHTMLTableCell2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setaxis < Impl : IHTMLTableCell2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn axis < Impl : IHTMLTableCell2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setch < Impl : IHTMLTableCell2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ch < Impl : IHTMLTableCell2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetchOff < Impl : IHTMLTableCell2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn chOff < Impl : IHTMLTableCell2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setheaders < Impl : IHTMLTableCell2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn headers < Impl : IHTMLTableCell2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setscope < Impl : IHTMLTableCell2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scope < Impl : IHTMLTableCell2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setabbr : Setabbr :: < Impl , IMPL_OFFSET > , abbr : abbr :: < Impl , IMPL_OFFSET > , Setaxis : Setaxis :: < Impl , IMPL_OFFSET > , axis : axis :: < Impl , IMPL_OFFSET > , Setch : Setch :: < Impl , IMPL_OFFSET > , ch : ch :: < Impl , IMPL_OFFSET > , SetchOff : SetchOff :: < Impl , IMPL_OFFSET > , chOff : chOff :: < Impl , IMPL_OFFSET > , Setheaders : Setheaders :: < Impl , IMPL_OFFSET > , headers : headers :: < Impl , IMPL_OFFSET > , Setscope : Setscope :: < Impl , IMPL_OFFSET > , scope : scope :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLTableCell2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLTableCell3Impl < > : Sized + IDispatchImpl where { fn Setch ( ) ; fn ch ( ) ; fn SetchOff ( ) ; fn chOff ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLTableCell3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLTableCell3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLTableCell3Vtbl < > { unsafe extern "system" fn Setch < Impl : IHTMLTableCell3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ch < Impl : IHTMLTableCell3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetchOff < Impl : IHTMLTableCell3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn chOff < Impl : IHTMLTableCell3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setch : Setch :: < Impl , IMPL_OFFSET > , ch : ch :: < Impl , IMPL_OFFSET > , SetchOff : SetchOff :: < Impl , IMPL_OFFSET > , chOff : chOff :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLTableCell3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLTableColImpl < > : Sized + IDispatchImpl where { fn Setspan ( ) ; fn span ( ) ; fn Setwidth ( ) ; fn width ( ) ; fn Setalign ( ) ; fn align ( ) ; fn SetvAlign ( ) ; fn vAlign ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLTableColVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLTableColImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLTableColVtbl < > { unsafe extern "system" fn Setspan < Impl : IHTMLTableColImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn span < Impl : IHTMLTableColImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setwidth < Impl : IHTMLTableColImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn width < Impl : IHTMLTableColImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setalign < Impl : IHTMLTableColImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn align < Impl : IHTMLTableColImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetvAlign < Impl : IHTMLTableColImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn vAlign < Impl : IHTMLTableColImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setspan : Setspan :: < Impl , IMPL_OFFSET > , span : span :: < Impl , IMPL_OFFSET > , Setwidth : Setwidth :: < Impl , IMPL_OFFSET > , width : width :: < Impl , IMPL_OFFSET > , Setalign : Setalign :: < Impl , IMPL_OFFSET > , align : align :: < Impl , IMPL_OFFSET > , SetvAlign : SetvAlign :: < Impl , IMPL_OFFSET > , vAlign : vAlign :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLTableCol < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLTableCol2Impl < > : Sized + IDispatchImpl where { fn Setch ( ) ; fn ch ( ) ; fn SetchOff ( ) ; fn chOff ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLTableCol2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLTableCol2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLTableCol2Vtbl < > { unsafe extern "system" fn Setch < Impl : IHTMLTableCol2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ch < Impl : IHTMLTableCol2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetchOff < Impl : IHTMLTableCol2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn chOff < Impl : IHTMLTableCol2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setch : Setch :: < Impl , IMPL_OFFSET > , ch : ch :: < Impl , IMPL_OFFSET > , SetchOff : SetchOff :: < Impl , IMPL_OFFSET > , chOff : chOff :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLTableCol2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLTableCol3Impl < > : Sized + IDispatchImpl where { fn Setch ( ) ; fn ch ( ) ; fn SetchOff ( ) ; fn chOff ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLTableCol3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLTableCol3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLTableCol3Vtbl < > { unsafe extern "system" fn Setch < Impl : IHTMLTableCol3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ch < Impl : IHTMLTableCol3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetchOff < Impl : IHTMLTableCol3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn chOff < Impl : IHTMLTableCol3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setch : Setch :: < Impl , IMPL_OFFSET > , ch : ch :: < Impl , IMPL_OFFSET > , SetchOff : SetchOff :: < Impl , IMPL_OFFSET > , chOff : chOff :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLTableCol3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLTableRowImpl < > : Sized + IDispatchImpl where { fn Setalign ( ) ; fn align ( ) ; fn SetvAlign ( ) ; fn vAlign ( ) ; fn SetbgColor ( ) ; fn bgColor ( ) ; fn SetborderColor ( ) ; fn borderColor ( ) ; fn SetborderColorLight ( ) ; fn borderColorLight ( ) ; fn SetborderColorDark ( ) ; fn borderColorDark ( ) ; fn rowIndex ( ) ; fn sectionRowIndex ( ) ; fn cells ( ) ; fn insertCell ( ) ; fn deleteCell ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLTableRowVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLTableRowImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLTableRowVtbl < > { unsafe extern "system" fn Setalign < Impl : IHTMLTableRowImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn align < Impl : IHTMLTableRowImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetvAlign < Impl : IHTMLTableRowImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn vAlign < Impl : IHTMLTableRowImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetbgColor < Impl : IHTMLTableRowImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn bgColor < Impl : IHTMLTableRowImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderColor < Impl : IHTMLTableRowImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderColor < Impl : IHTMLTableRowImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderColorLight < Impl : IHTMLTableRowImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderColorLight < Impl : IHTMLTableRowImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetborderColorDark < Impl : IHTMLTableRowImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn borderColorDark < Impl : IHTMLTableRowImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn rowIndex < Impl : IHTMLTableRowImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn sectionRowIndex < Impl : IHTMLTableRowImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn cells < Impl : IHTMLTableRowImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn insertCell < Impl : IHTMLTableRowImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , row : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn deleteCell < Impl : IHTMLTableRowImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setalign : Setalign :: < Impl , IMPL_OFFSET > , align : align :: < Impl , IMPL_OFFSET > , SetvAlign : SetvAlign :: < Impl , IMPL_OFFSET > , vAlign : vAlign :: < Impl , IMPL_OFFSET > , SetbgColor : SetbgColor :: < Impl , IMPL_OFFSET > , bgColor : bgColor :: < Impl , IMPL_OFFSET > , SetborderColor : SetborderColor :: < Impl , IMPL_OFFSET > , borderColor : borderColor :: < Impl , IMPL_OFFSET > , SetborderColorLight : SetborderColorLight :: < Impl , IMPL_OFFSET > , borderColorLight : borderColorLight :: < Impl , IMPL_OFFSET > , SetborderColorDark : SetborderColorDark :: < Impl , IMPL_OFFSET > , borderColorDark : borderColorDark :: < Impl , IMPL_OFFSET > , rowIndex : rowIndex :: < Impl , IMPL_OFFSET > , sectionRowIndex : sectionRowIndex :: < Impl , IMPL_OFFSET > , cells : cells :: < Impl , IMPL_OFFSET > , insertCell : insertCell :: < Impl , IMPL_OFFSET > , deleteCell : deleteCell :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLTableRow < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLTableRow2Impl < > : Sized + IDispatchImpl where { fn Setheight ( ) ; fn height ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLTableRow2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLTableRow2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLTableRow2Vtbl < > { unsafe extern "system" fn Setheight < Impl : IHTMLTableRow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn height < Impl : IHTMLTableRow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setheight : Setheight :: < Impl , IMPL_OFFSET > , height : height :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLTableRow2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLTableRow3Impl < > : Sized + IDispatchImpl where { fn Setch ( ) ; fn ch ( ) ; fn SetchOff ( ) ; fn chOff ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLTableRow3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLTableRow3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLTableRow3Vtbl < > { unsafe extern "system" fn Setch < Impl : IHTMLTableRow3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ch < Impl : IHTMLTableRow3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetchOff < Impl : IHTMLTableRow3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn chOff < Impl : IHTMLTableRow3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setch : Setch :: < Impl , IMPL_OFFSET > , ch : ch :: < Impl , IMPL_OFFSET > , SetchOff : SetchOff :: < Impl , IMPL_OFFSET > , chOff : chOff :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLTableRow3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLTableRow4Impl < > : Sized + IDispatchImpl where { fn Setch ( ) ; fn ch ( ) ; fn SetchOff ( ) ; fn chOff ( ) ; fn insertCell ( ) ; fn deleteCell ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLTableRow4Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLTableRow4Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLTableRow4Vtbl < > { unsafe extern "system" fn Setch < Impl : IHTMLTableRow4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ch < Impl : IHTMLTableRow4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetchOff < Impl : IHTMLTableRow4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn chOff < Impl : IHTMLTableRow4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn insertCell < Impl : IHTMLTableRow4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , row : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn deleteCell < Impl : IHTMLTableRow4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setch : Setch :: < Impl , IMPL_OFFSET > , ch : ch :: < Impl , IMPL_OFFSET > , SetchOff : SetchOff :: < Impl , IMPL_OFFSET > , chOff : chOff :: < Impl , IMPL_OFFSET > , insertCell : insertCell :: < Impl , IMPL_OFFSET > , deleteCell : deleteCell :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLTableRow4 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLTableRowMetricsImpl < > : Sized + IDispatchImpl where { fn clientHeight ( ) ; fn clientWidth ( ) ; fn clientTop ( ) ; fn clientLeft ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLTableRowMetricsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLTableRowMetricsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLTableRowMetricsVtbl < > { unsafe extern "system" fn clientHeight < Impl : IHTMLTableRowMetricsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clientWidth < Impl : IHTMLTableRowMetricsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clientTop < Impl : IHTMLTableRowMetricsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clientLeft < Impl : IHTMLTableRowMetricsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , clientHeight : clientHeight :: < Impl , IMPL_OFFSET > , clientWidth : clientWidth :: < Impl , IMPL_OFFSET > , clientTop : clientTop :: < Impl , IMPL_OFFSET > , clientLeft : clientLeft :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLTableRowMetrics < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLTableSectionImpl < > : Sized + IDispatchImpl where { fn Setalign ( ) ; fn align ( ) ; fn SetvAlign ( ) ; fn vAlign ( ) ; fn SetbgColor ( ) ; fn bgColor ( ) ; fn rows ( ) ; fn insertRow ( ) ; fn deleteRow ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLTableSectionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLTableSectionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLTableSectionVtbl < > { unsafe extern "system" fn Setalign < Impl : IHTMLTableSectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn align < Impl : IHTMLTableSectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetvAlign < Impl : IHTMLTableSectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn vAlign < Impl : IHTMLTableSectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetbgColor < Impl : IHTMLTableSectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn bgColor < Impl : IHTMLTableSectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn rows < Impl : IHTMLTableSectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn insertRow < Impl : IHTMLTableSectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , row : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn deleteRow < Impl : IHTMLTableSectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setalign : Setalign :: < Impl , IMPL_OFFSET > , align : align :: < Impl , IMPL_OFFSET > , SetvAlign : SetvAlign :: < Impl , IMPL_OFFSET > , vAlign : vAlign :: < Impl , IMPL_OFFSET > , SetbgColor : SetbgColor :: < Impl , IMPL_OFFSET > , bgColor : bgColor :: < Impl , IMPL_OFFSET > , rows : rows :: < Impl , IMPL_OFFSET > , insertRow : insertRow :: < Impl , IMPL_OFFSET > , deleteRow : deleteRow :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLTableSection < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLTableSection2Impl < > : Sized + IDispatchImpl where { fn moveRow ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLTableSection2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLTableSection2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLTableSection2Vtbl < > { unsafe extern "system" fn moveRow < Impl : IHTMLTableSection2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , indexfrom : i32 , indexto : i32 , row : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , moveRow : moveRow :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLTableSection2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLTableSection3Impl < > : Sized + IDispatchImpl where { fn Setch ( ) ; fn ch ( ) ; fn SetchOff ( ) ; fn chOff ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLTableSection3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLTableSection3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLTableSection3Vtbl < > { unsafe extern "system" fn Setch < Impl : IHTMLTableSection3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ch < Impl : IHTMLTableSection3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetchOff < Impl : IHTMLTableSection3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn chOff < Impl : IHTMLTableSection3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setch : Setch :: < Impl , IMPL_OFFSET > , ch : ch :: < Impl , IMPL_OFFSET > , SetchOff : SetchOff :: < Impl , IMPL_OFFSET > , chOff : chOff :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLTableSection3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLTableSection4Impl < > : Sized + IDispatchImpl where { fn Setch ( ) ; fn ch ( ) ; fn SetchOff ( ) ; fn chOff ( ) ; fn insertRow ( ) ; fn deleteRow ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLTableSection4Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLTableSection4Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLTableSection4Vtbl < > { unsafe extern "system" fn Setch < Impl : IHTMLTableSection4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ch < Impl : IHTMLTableSection4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetchOff < Impl : IHTMLTableSection4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn chOff < Impl : IHTMLTableSection4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn insertRow < Impl : IHTMLTableSection4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , row : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn deleteRow < Impl : IHTMLTableSection4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setch : Setch :: < Impl , IMPL_OFFSET > , ch : ch :: < Impl , IMPL_OFFSET > , SetchOff : SetchOff :: < Impl , IMPL_OFFSET > , chOff : chOff :: < Impl , IMPL_OFFSET > , insertRow : insertRow :: < Impl , IMPL_OFFSET > , deleteRow : deleteRow :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLTableSection4 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLTextAreaElementImpl < > : Sized + IDispatchImpl where { fn r#type ( ) ; fn Setvalue ( ) ; fn value ( ) ; fn Setname ( ) ; fn name ( ) ; fn Setstatus ( ) ; fn status ( ) ; fn Setdisabled ( ) ; fn disabled ( ) ; fn form ( ) ; fn SetdefaultValue ( ) ; fn defaultValue ( ) ; fn select ( ) ; fn Setonchange ( ) ; fn onchange ( ) ; fn Setonselect ( ) ; fn onselect ( ) ; fn SetreadOnly ( ) ; fn readOnly ( ) ; fn Setrows ( ) ; fn rows ( ) ; fn Setcols ( ) ; fn cols ( ) ; fn Setwrap ( ) ; fn wrap ( ) ; fn createTextRange ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLTextAreaElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLTextAreaElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLTextAreaElementVtbl < > { unsafe extern "system" fn r#type < Impl : IHTMLTextAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setvalue < Impl : IHTMLTextAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn value < Impl : IHTMLTextAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setname < Impl : IHTMLTextAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn name < Impl : IHTMLTextAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setstatus < Impl : IHTMLTextAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn status < Impl : IHTMLTextAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setdisabled < Impl : IHTMLTextAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn disabled < Impl : IHTMLTextAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn form < Impl : IHTMLTextAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetdefaultValue < Impl : IHTMLTextAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn defaultValue < Impl : IHTMLTextAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn select < Impl : IHTMLTextAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonchange < Impl : IHTMLTextAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onchange < Impl : IHTMLTextAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonselect < Impl : IHTMLTextAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onselect < Impl : IHTMLTextAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetreadOnly < Impl : IHTMLTextAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn readOnly < Impl : IHTMLTextAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setrows < Impl : IHTMLTextAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn rows < Impl : IHTMLTextAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setcols < Impl : IHTMLTextAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn cols < Impl : IHTMLTextAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setwrap < Impl : IHTMLTextAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn wrap < Impl : IHTMLTextAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createTextRange < Impl : IHTMLTextAreaElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , range : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , r#type : r#type :: < Impl , IMPL_OFFSET > , Setvalue : Setvalue :: < Impl , IMPL_OFFSET > , value : value :: < Impl , IMPL_OFFSET > , Setname : Setname :: < Impl , IMPL_OFFSET > , name : name :: < Impl , IMPL_OFFSET > , Setstatus : Setstatus :: < Impl , IMPL_OFFSET > , status : status :: < Impl , IMPL_OFFSET > , Setdisabled : Setdisabled :: < Impl , IMPL_OFFSET > , disabled : disabled :: < Impl , IMPL_OFFSET > , form : form :: < Impl , IMPL_OFFSET > , SetdefaultValue : SetdefaultValue :: < Impl , IMPL_OFFSET > , defaultValue : defaultValue :: < Impl , IMPL_OFFSET > , select : select :: < Impl , IMPL_OFFSET > , Setonchange : Setonchange :: < Impl , IMPL_OFFSET > , onchange : onchange :: < Impl , IMPL_OFFSET > , Setonselect : Setonselect :: < Impl , IMPL_OFFSET > , onselect : onselect :: < Impl , IMPL_OFFSET > , SetreadOnly : SetreadOnly :: < Impl , IMPL_OFFSET > , readOnly : readOnly :: < Impl , IMPL_OFFSET > , Setrows : Setrows :: < Impl , IMPL_OFFSET > , rows : rows :: < Impl , IMPL_OFFSET > , Setcols : Setcols :: < Impl , IMPL_OFFSET > , cols : cols :: < Impl , IMPL_OFFSET > , Setwrap : Setwrap :: < Impl , IMPL_OFFSET > , wrap : wrap :: < Impl , IMPL_OFFSET > , createTextRange : createTextRange :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLTextAreaElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLTextAreaElement2Impl < > : Sized + IDispatchImpl where { fn SetselectionStart ( ) ; fn selectionStart ( ) ; fn SetselectionEnd ( ) ; fn selectionEnd ( ) ; fn setSelectionRange ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLTextAreaElement2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLTextAreaElement2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLTextAreaElement2Vtbl < > { unsafe extern "system" fn SetselectionStart < Impl : IHTMLTextAreaElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn selectionStart < Impl : IHTMLTextAreaElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetselectionEnd < Impl : IHTMLTextAreaElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn selectionEnd < Impl : IHTMLTextAreaElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn setSelectionRange < Impl : IHTMLTextAreaElement2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , start : i32 , end : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetselectionStart : SetselectionStart :: < Impl , IMPL_OFFSET > , selectionStart : selectionStart :: < Impl , IMPL_OFFSET > , SetselectionEnd : SetselectionEnd :: < Impl , IMPL_OFFSET > , selectionEnd : selectionEnd :: < Impl , IMPL_OFFSET > , setSelectionRange : setSelectionRange :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLTextAreaElement2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLTextContainerImpl < > : Sized + IDispatchImpl where { fn createControlRange ( ) ; fn scrollHeight ( ) ; fn scrollWidth ( ) ; fn SetscrollTop ( ) ; fn scrollTop ( ) ; fn SetscrollLeft ( ) ; fn scrollLeft ( ) ; fn Setonscroll ( ) ; fn onscroll ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLTextContainerVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLTextContainerImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLTextContainerVtbl < > { unsafe extern "system" fn createControlRange < Impl : IHTMLTextContainerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , range : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scrollHeight < Impl : IHTMLTextContainerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scrollWidth < Impl : IHTMLTextContainerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetscrollTop < Impl : IHTMLTextContainerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scrollTop < Impl : IHTMLTextContainerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetscrollLeft < Impl : IHTMLTextContainerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scrollLeft < Impl : IHTMLTextContainerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonscroll < Impl : IHTMLTextContainerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onscroll < Impl : IHTMLTextContainerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , createControlRange : createControlRange :: < Impl , IMPL_OFFSET > , scrollHeight : scrollHeight :: < Impl , IMPL_OFFSET > , scrollWidth : scrollWidth :: < Impl , IMPL_OFFSET > , SetscrollTop : SetscrollTop :: < Impl , IMPL_OFFSET > , scrollTop : scrollTop :: < Impl , IMPL_OFFSET > , SetscrollLeft : SetscrollLeft :: < Impl , IMPL_OFFSET > , scrollLeft : scrollLeft :: < Impl , IMPL_OFFSET > , Setonscroll : Setonscroll :: < Impl , IMPL_OFFSET > , onscroll : onscroll :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLTextContainer < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLTextElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLTextElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLTextElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLTextElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLTextElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLTextRangeMetricsImpl < > : Sized + IDispatchImpl where { fn offsetTop ( ) ; fn offsetLeft ( ) ; fn boundingTop ( ) ; fn boundingLeft ( ) ; fn boundingWidth ( ) ; fn boundingHeight ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLTextRangeMetricsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLTextRangeMetricsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLTextRangeMetricsVtbl < > { unsafe extern "system" fn offsetTop < Impl : IHTMLTextRangeMetricsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn offsetLeft < Impl : IHTMLTextRangeMetricsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn boundingTop < Impl : IHTMLTextRangeMetricsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn boundingLeft < Impl : IHTMLTextRangeMetricsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn boundingWidth < Impl : IHTMLTextRangeMetricsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn boundingHeight < Impl : IHTMLTextRangeMetricsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , offsetTop : offsetTop :: < Impl , IMPL_OFFSET > , offsetLeft : offsetLeft :: < Impl , IMPL_OFFSET > , boundingTop : boundingTop :: < Impl , IMPL_OFFSET > , boundingLeft : boundingLeft :: < Impl , IMPL_OFFSET > , boundingWidth : boundingWidth :: < Impl , IMPL_OFFSET > , boundingHeight : boundingHeight :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLTextRangeMetrics < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLTextRangeMetrics2Impl < > : Sized + IDispatchImpl where { fn getClientRects ( ) ; fn getBoundingClientRect ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLTextRangeMetrics2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLTextRangeMetrics2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLTextRangeMetrics2Vtbl < > { unsafe extern "system" fn getClientRects < Impl : IHTMLTextRangeMetrics2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , prectcol : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getBoundingClientRect < Impl : IHTMLTextRangeMetrics2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , prect : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , getClientRects : getClientRects :: < Impl , IMPL_OFFSET > , getBoundingClientRect : getBoundingClientRect :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLTextRangeMetrics2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLTimeRangesImpl < > : Sized + IDispatchImpl where { fn length ( ) ; fn start ( ) ; fn end ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLTimeRangesVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLTimeRangesImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLTimeRangesVtbl < > { unsafe extern "system" fn length < Impl : IHTMLTimeRangesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn start < Impl : IHTMLTimeRangesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , starttime : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn end < Impl : IHTMLTimeRangesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , endtime : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , length : length :: < Impl , IMPL_OFFSET > , start : start :: < Impl , IMPL_OFFSET > , end : end :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLTimeRanges < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLTimeRanges2Impl < > : Sized + IDispatchImpl where { fn startDouble ( ) ; fn endDouble ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLTimeRanges2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLTimeRanges2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLTimeRanges2Vtbl < > { unsafe extern "system" fn startDouble < Impl : IHTMLTimeRanges2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , starttime : * mut f64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn endDouble < Impl : IHTMLTimeRanges2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , endtime : * mut f64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , startDouble : startDouble :: < Impl , IMPL_OFFSET > , endDouble : endDouble :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLTimeRanges2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLTitleElementImpl < > : Sized + IDispatchImpl where { fn Settext ( ) ; fn text ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLTitleElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLTitleElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLTitleElementVtbl < > { unsafe extern "system" fn Settext < Impl : IHTMLTitleElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn text < Impl : IHTMLTitleElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Settext : Settext :: < Impl , IMPL_OFFSET > , text : text :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLTitleElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLTxtRangeImpl < > : Sized + IDispatchImpl where { fn htmlText ( ) ; fn Settext ( ) ; fn text ( ) ; fn parentElement ( ) ; fn duplicate ( ) ; fn inRange ( ) ; fn isEqual ( ) ; fn scrollIntoView ( ) ; fn collapse ( ) ; fn expand ( ) ; fn r#move ( ) ; fn moveStart ( ) ; fn moveEnd ( ) ; fn select ( ) ; fn pasteHTML ( ) ; fn moveToElementText ( ) ; fn setEndPoint ( ) ; fn compareEndPoints ( ) ; fn findText ( ) ; fn moveToPoint ( ) ; fn getBookmark ( ) ; fn moveToBookmark ( ) ; fn queryCommandSupported ( ) ; fn queryCommandEnabled ( ) ; fn queryCommandState ( ) ; fn queryCommandIndeterm ( ) ; fn queryCommandText ( ) ; fn queryCommandValue ( ) ; fn execCommand ( ) ; fn execCommandShowHelp ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLTxtRangeVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLTxtRangeImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLTxtRangeVtbl < > { unsafe extern "system" fn htmlText < Impl : IHTMLTxtRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Settext < Impl : IHTMLTxtRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn text < Impl : IHTMLTxtRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn parentElement < Impl : IHTMLTxtRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , parent : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn duplicate < Impl : IHTMLTxtRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , duplicate : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn inRange < Impl : IHTMLTxtRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , range : :: windows :: core :: RawPtr , inrange : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn isEqual < Impl : IHTMLTxtRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , range : :: windows :: core :: RawPtr , isequal : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scrollIntoView < Impl : IHTMLTxtRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fstart : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn collapse < Impl : IHTMLTxtRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , start : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn expand < Impl : IHTMLTxtRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , unit : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , success : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn r#move < Impl : IHTMLTxtRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , unit : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , count : i32 , actualcount : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn moveStart < Impl : IHTMLTxtRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , unit : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , count : i32 , actualcount : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn moveEnd < Impl : IHTMLTxtRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , unit : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , count : i32 , actualcount : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn select < Impl : IHTMLTxtRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn pasteHTML < Impl : IHTMLTxtRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , html : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn moveToElementText < Impl : IHTMLTxtRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , element : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn setEndPoint < Impl : IHTMLTxtRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , how : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , sourcerange : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn compareEndPoints < Impl : IHTMLTxtRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , how : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , sourcerange : :: windows :: core :: RawPtr , ret : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn findText < Impl : IHTMLTxtRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , string : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , count : i32 , flags : i32 , success : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn moveToPoint < Impl : IHTMLTxtRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , x : i32 , y : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getBookmark < Impl : IHTMLTxtRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , boolmark : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn moveToBookmark < Impl : IHTMLTxtRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bookmark : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , success : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn queryCommandSupported < Impl : IHTMLTxtRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cmdid : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pfret : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn queryCommandEnabled < Impl : IHTMLTxtRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cmdid : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pfret : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn queryCommandState < Impl : IHTMLTxtRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cmdid : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pfret : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn queryCommandIndeterm < Impl : IHTMLTxtRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cmdid : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pfret : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn queryCommandText < Impl : IHTMLTxtRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cmdid : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pcmdtext : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn queryCommandValue < Impl : IHTMLTxtRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cmdid : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pcmdvalue : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn execCommand < Impl : IHTMLTxtRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cmdid : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , showui : i16 , value : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , pfret : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn execCommandShowHelp < Impl : IHTMLTxtRangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cmdid : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pfret : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , htmlText : htmlText :: < Impl , IMPL_OFFSET > , Settext : Settext :: < Impl , IMPL_OFFSET > , text : text :: < Impl , IMPL_OFFSET > , parentElement : parentElement :: < Impl , IMPL_OFFSET > , duplicate : duplicate :: < Impl , IMPL_OFFSET > , inRange : inRange :: < Impl , IMPL_OFFSET > , isEqual : isEqual :: < Impl , IMPL_OFFSET > , scrollIntoView : scrollIntoView :: < Impl , IMPL_OFFSET > , collapse : collapse :: < Impl , IMPL_OFFSET > , expand : expand :: < Impl , IMPL_OFFSET > , r#move : r#move :: < Impl , IMPL_OFFSET > , moveStart : moveStart :: < Impl , IMPL_OFFSET > , moveEnd : moveEnd :: < Impl , IMPL_OFFSET > , select : select :: < Impl , IMPL_OFFSET > , pasteHTML : pasteHTML :: < Impl , IMPL_OFFSET > , moveToElementText : moveToElementText :: < Impl , IMPL_OFFSET > , setEndPoint : setEndPoint :: < Impl , IMPL_OFFSET > , compareEndPoints : compareEndPoints :: < Impl , IMPL_OFFSET > , findText : findText :: < Impl , IMPL_OFFSET > , moveToPoint : moveToPoint :: < Impl , IMPL_OFFSET > , getBookmark : getBookmark :: < Impl , IMPL_OFFSET > , moveToBookmark : moveToBookmark :: < Impl , IMPL_OFFSET > , queryCommandSupported : queryCommandSupported :: < Impl , IMPL_OFFSET > , queryCommandEnabled : queryCommandEnabled :: < Impl , IMPL_OFFSET > , queryCommandState : queryCommandState :: < Impl , IMPL_OFFSET > , queryCommandIndeterm : queryCommandIndeterm :: < Impl , IMPL_OFFSET > , queryCommandText : queryCommandText :: < Impl , IMPL_OFFSET > , queryCommandValue : queryCommandValue :: < Impl , IMPL_OFFSET > , execCommand : execCommand :: < Impl , IMPL_OFFSET > , execCommandShowHelp : execCommandShowHelp :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLTxtRange < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLTxtRangeCollectionImpl < > : Sized + IDispatchImpl where { fn length ( ) ; fn _newEnum ( ) ; fn item ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLTxtRangeCollectionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLTxtRangeCollectionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLTxtRangeCollectionVtbl < > { unsafe extern "system" fn length < Impl : IHTMLTxtRangeCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _newEnum < Impl : IHTMLTxtRangeCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn item < Impl : IHTMLTxtRangeCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarindex : * const super::super::System::Com:: VARIANT , pvarresult : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , length : length :: < Impl , IMPL_OFFSET > , _newEnum : _newEnum :: < Impl , IMPL_OFFSET > , item : item :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLTxtRangeCollection < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLUListElementImpl < > : Sized + IDispatchImpl where { fn Setcompact ( ) ; fn compact ( ) ; fn Settype ( ) ; fn r#type ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLUListElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLUListElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLUListElementVtbl < > { unsafe extern "system" fn Setcompact < Impl : IHTMLUListElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn compact < Impl : IHTMLUListElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Settype < Impl : IHTMLUListElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn r#type < Impl : IHTMLUListElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setcompact : Setcompact :: < Impl , IMPL_OFFSET > , compact : compact :: < Impl , IMPL_OFFSET > , Settype : Settype :: < Impl , IMPL_OFFSET > , r#type : r#type :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLUListElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLUniqueNameImpl < > : Sized + IDispatchImpl where { fn uniqueNumber ( ) ; fn uniqueID ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLUniqueNameVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLUniqueNameImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLUniqueNameVtbl < > { unsafe extern "system" fn uniqueNumber < Impl : IHTMLUniqueNameImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn uniqueID < Impl : IHTMLUniqueNameImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , uniqueNumber : uniqueNumber :: < Impl , IMPL_OFFSET > , uniqueID : uniqueID :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLUniqueName < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLUnknownElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLUnknownElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLUnknownElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLUnknownElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLUnknownElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLUrnCollectionImpl < > : Sized + IDispatchImpl where { fn length ( ) ; fn item ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLUrnCollectionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLUrnCollectionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLUrnCollectionVtbl < > { unsafe extern "system" fn length < Impl : IHTMLUrnCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn item < Impl : IHTMLUrnCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , ppurn : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , length : length :: < Impl , IMPL_OFFSET > , item : item :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLUrnCollection < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLUserDataOMImpl < > : Sized + IDispatchImpl where { fn XMLDocument ( ) ; fn save ( ) ; fn load ( ) ; fn getAttribute ( ) ; fn setAttribute ( ) ; fn removeAttribute ( ) ; fn Setexpires ( ) ; fn expires ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLUserDataOMVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLUserDataOMImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLUserDataOMVtbl < > { unsafe extern "system" fn XMLDocument < Impl : IHTMLUserDataOMImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn save < Impl : IHTMLUserDataOMImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , strname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn load < Impl : IHTMLUserDataOMImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , strname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getAttribute < Impl : IHTMLUserDataOMImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , name : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pvalue : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn setAttribute < Impl : IHTMLUserDataOMImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , name : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , value : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn removeAttribute < Impl : IHTMLUserDataOMImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , name : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setexpires < Impl : IHTMLUserDataOMImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstr : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn expires < Impl : IHTMLUserDataOMImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstr : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , XMLDocument : XMLDocument :: < Impl , IMPL_OFFSET > , save : save :: < Impl , IMPL_OFFSET > , load : load :: < Impl , IMPL_OFFSET > , getAttribute : getAttribute :: < Impl , IMPL_OFFSET > , setAttribute : setAttribute :: < Impl , IMPL_OFFSET > , removeAttribute : removeAttribute :: < Impl , IMPL_OFFSET > , Setexpires : Setexpires :: < Impl , IMPL_OFFSET > , expires : expires :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLUserDataOM < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLVideoElementImpl < > : Sized + IDispatchImpl where { fn Setwidth ( ) ; fn width ( ) ; fn Setheight ( ) ; fn height ( ) ; fn videoWidth ( ) ; fn videoHeight ( ) ; fn Setposter ( ) ; fn poster ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLVideoElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLVideoElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLVideoElementVtbl < > { unsafe extern "system" fn Setwidth < Impl : IHTMLVideoElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn width < Impl : IHTMLVideoElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setheight < Impl : IHTMLVideoElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn height < Impl : IHTMLVideoElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn videoWidth < Impl : IHTMLVideoElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn videoHeight < Impl : IHTMLVideoElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setposter < Impl : IHTMLVideoElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn poster < Impl : IHTMLVideoElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setwidth : Setwidth :: < Impl , IMPL_OFFSET > , width : width :: < Impl , IMPL_OFFSET > , Setheight : Setheight :: < Impl , IMPL_OFFSET > , height : height :: < Impl , IMPL_OFFSET > , videoWidth : videoWidth :: < Impl , IMPL_OFFSET > , videoHeight : videoHeight :: < Impl , IMPL_OFFSET > , Setposter : Setposter :: < Impl , IMPL_OFFSET > , poster : poster :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLVideoElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLWindow2Impl < > : Sized + IHTMLFramesCollection2Impl + IDispatchImpl where { fn frames ( ) ; fn SetdefaultStatus ( ) ; fn defaultStatus ( ) ; fn Setstatus ( ) ; fn status ( ) ; fn setTimeout ( ) ; fn clearTimeout ( ) ; fn alert ( ) ; fn confirm ( ) ; fn prompt ( ) ; fn Image ( ) ; fn location ( ) ; fn history ( ) ; fn close ( ) ; fn Setopener ( ) ; fn opener ( ) ; fn navigator ( ) ; fn Setname ( ) ; fn name ( ) ; fn parent ( ) ; fn open ( ) ; fn self_ ( ) ; fn top ( ) ; fn window ( ) ; fn navigate ( ) ; fn Setonfocus ( ) ; fn onfocus ( ) ; fn Setonblur ( ) ; fn onblur ( ) ; fn Setonload ( ) ; fn onload ( ) ; fn Setonbeforeunload ( ) ; fn onbeforeunload ( ) ; fn Setonunload ( ) ; fn onunload ( ) ; fn Setonhelp ( ) ; fn onhelp ( ) ; fn Setonerror ( ) ; fn onerror ( ) ; fn Setonresize ( ) ; fn onresize ( ) ; fn Setonscroll ( ) ; fn onscroll ( ) ; fn document ( ) ; fn event ( ) ; fn _newEnum ( ) ; fn showModalDialog ( ) ; fn showHelp ( ) ; fn screen ( ) ; fn Option ( ) ; fn focus ( ) ; fn closed ( ) ; fn blur ( ) ; fn scroll ( ) ; fn clientInformation ( ) ; fn setInterval ( ) ; fn clearInterval ( ) ; fn SetoffscreenBuffering ( ) ; fn offscreenBuffering ( ) ; fn execScript ( ) ; fn toString ( ) ; fn scrollBy ( ) ; fn scrollTo ( ) ; fn moveTo ( ) ; fn moveBy ( ) ; fn resizeTo ( ) ; fn resizeBy ( ) ; fn external ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLWindow2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLWindow2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLWindow2Vtbl < > { unsafe extern "system" fn frames < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetdefaultStatus < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn defaultStatus < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setstatus < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn status < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn setTimeout < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , expression : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , msec : i32 , language : * const super::super::System::Com:: VARIANT , timerid : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clearTimeout < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , timerid : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn alert < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , message : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn confirm < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , message : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , confirmed : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn prompt < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , message : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , defstr : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , textdata : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Image < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn location < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn history < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn close < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setopener < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn opener < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn navigator < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setname < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn name < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn parent < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn open < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , url : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , name : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , features : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , replace : i16 , pomwindowresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn self_ < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn top < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn window < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn navigate < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , url : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonfocus < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onfocus < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonblur < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onblur < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonload < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onload < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonbeforeunload < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onbeforeunload < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonunload < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onunload < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonhelp < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onhelp < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonerror < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onerror < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonresize < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onresize < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonscroll < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onscroll < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn document < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn event < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _newEnum < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn showModalDialog < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dialog : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varargin : * const super::super::System::Com:: VARIANT , varoptions : * const super::super::System::Com:: VARIANT , varargout : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn showHelp < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , helpurl : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , helparg : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , features : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn screen < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Option < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn focus < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn closed < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn blur < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scroll < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , x : i32 , y : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clientInformation < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn setInterval < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , expression : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , msec : i32 , language : * const super::super::System::Com:: VARIANT , timerid : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clearInterval < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , timerid : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetoffscreenBuffering < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn offscreenBuffering < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn execScript < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , code : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , language : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pvarret : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn toString < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , string : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scrollBy < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , x : i32 , y : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scrollTo < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , x : i32 , y : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn moveTo < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , x : i32 , y : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn moveBy < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , x : i32 , y : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn resizeTo < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , x : i32 , y : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn resizeBy < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , x : i32 , y : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn external < Impl : IHTMLWindow2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , frames : frames :: < Impl , IMPL_OFFSET > , SetdefaultStatus : SetdefaultStatus :: < Impl , IMPL_OFFSET > , defaultStatus : defaultStatus :: < Impl , IMPL_OFFSET > , Setstatus : Setstatus :: < Impl , IMPL_OFFSET > , status : status :: < Impl , IMPL_OFFSET > , setTimeout : setTimeout :: < Impl , IMPL_OFFSET > , clearTimeout : clearTimeout :: < Impl , IMPL_OFFSET > , alert : alert :: < Impl , IMPL_OFFSET > , confirm : confirm :: < Impl , IMPL_OFFSET > , prompt : prompt :: < Impl , IMPL_OFFSET > , Image : Image :: < Impl , IMPL_OFFSET > , location : location :: < Impl , IMPL_OFFSET > , history : history :: < Impl , IMPL_OFFSET > , close : close :: < Impl , IMPL_OFFSET > , Setopener : Setopener :: < Impl , IMPL_OFFSET > , opener : opener :: < Impl , IMPL_OFFSET > , navigator : navigator :: < Impl , IMPL_OFFSET > , Setname : Setname :: < Impl , IMPL_OFFSET > , name : name :: < Impl , IMPL_OFFSET > , parent : parent :: < Impl , IMPL_OFFSET > , open : open :: < Impl , IMPL_OFFSET > , self_ : self_ :: < Impl , IMPL_OFFSET > , top : top :: < Impl , IMPL_OFFSET > , window : window :: < Impl , IMPL_OFFSET > , navigate : navigate :: < Impl , IMPL_OFFSET > , Setonfocus : Setonfocus :: < Impl , IMPL_OFFSET > , onfocus : onfocus :: < Impl , IMPL_OFFSET > , Setonblur : Setonblur :: < Impl , IMPL_OFFSET > , onblur : onblur :: < Impl , IMPL_OFFSET > , Setonload : Setonload :: < Impl , IMPL_OFFSET > , onload : onload :: < Impl , IMPL_OFFSET > , Setonbeforeunload : Setonbeforeunload :: < Impl , IMPL_OFFSET > , onbeforeunload : onbeforeunload :: < Impl , IMPL_OFFSET > , Setonunload : Setonunload :: < Impl , IMPL_OFFSET > , onunload : onunload :: < Impl , IMPL_OFFSET > , Setonhelp : Setonhelp :: < Impl , IMPL_OFFSET > , onhelp : onhelp :: < Impl , IMPL_OFFSET > , Setonerror : Setonerror :: < Impl , IMPL_OFFSET > , onerror : onerror :: < Impl , IMPL_OFFSET > , Setonresize : Setonresize :: < Impl , IMPL_OFFSET > , onresize : onresize :: < Impl , IMPL_OFFSET > , Setonscroll : Setonscroll :: < Impl , IMPL_OFFSET > , onscroll : onscroll :: < Impl , IMPL_OFFSET > , document : document :: < Impl , IMPL_OFFSET > , event : event :: < Impl , IMPL_OFFSET > , _newEnum : _newEnum :: < Impl , IMPL_OFFSET > , showModalDialog : showModalDialog :: < Impl , IMPL_OFFSET > , showHelp : showHelp :: < Impl , IMPL_OFFSET > , screen : screen :: < Impl , IMPL_OFFSET > , Option : Option :: < Impl , IMPL_OFFSET > , focus : focus :: < Impl , IMPL_OFFSET > , closed : closed :: < Impl , IMPL_OFFSET > , blur : blur :: < Impl , IMPL_OFFSET > , scroll : scroll :: < Impl , IMPL_OFFSET > , clientInformation : clientInformation :: < Impl , IMPL_OFFSET > , setInterval : setInterval :: < Impl , IMPL_OFFSET > , clearInterval : clearInterval :: < Impl , IMPL_OFFSET > , SetoffscreenBuffering : SetoffscreenBuffering :: < Impl , IMPL_OFFSET > , offscreenBuffering : offscreenBuffering :: < Impl , IMPL_OFFSET > , execScript : execScript :: < Impl , IMPL_OFFSET > , toString : toString :: < Impl , IMPL_OFFSET > , scrollBy : scrollBy :: < Impl , IMPL_OFFSET > , scrollTo : scrollTo :: < Impl , IMPL_OFFSET > , moveTo : moveTo :: < Impl , IMPL_OFFSET > , moveBy : moveBy :: < Impl , IMPL_OFFSET > , resizeTo : resizeTo :: < Impl , IMPL_OFFSET > , resizeBy : resizeBy :: < Impl , IMPL_OFFSET > , external : external :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLWindow2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLWindow3Impl < > : Sized + IDispatchImpl where { fn screenLeft ( ) ; fn screenTop ( ) ; fn attachEvent ( ) ; fn detachEvent ( ) ; fn setTimeout ( ) ; fn setInterval ( ) ; fn print ( ) ; fn Setonbeforeprint ( ) ; fn onbeforeprint ( ) ; fn Setonafterprint ( ) ; fn onafterprint ( ) ; fn clipboardData ( ) ; fn showModelessDialog ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLWindow3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLWindow3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLWindow3Vtbl < > { unsafe extern "system" fn screenLeft < Impl : IHTMLWindow3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn screenTop < Impl : IHTMLWindow3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn attachEvent < Impl : IHTMLWindow3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , event : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pdisp : :: windows :: core :: RawPtr , pfresult : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn detachEvent < Impl : IHTMLWindow3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , event : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pdisp : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn setTimeout < Impl : IHTMLWindow3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , expression : * const super::super::System::Com:: VARIANT , msec : i32 , language : * const super::super::System::Com:: VARIANT , timerid : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn setInterval < Impl : IHTMLWindow3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , expression : * const super::super::System::Com:: VARIANT , msec : i32 , language : * const super::super::System::Com:: VARIANT , timerid : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn print < Impl : IHTMLWindow3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonbeforeprint < Impl : IHTMLWindow3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onbeforeprint < Impl : IHTMLWindow3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonafterprint < Impl : IHTMLWindow3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onafterprint < Impl : IHTMLWindow3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clipboardData < Impl : IHTMLWindow3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn showModelessDialog < Impl : IHTMLWindow3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , url : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varargin : * const super::super::System::Com:: VARIANT , options : * const super::super::System::Com:: VARIANT , pdialog : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , screenLeft : screenLeft :: < Impl , IMPL_OFFSET > , screenTop : screenTop :: < Impl , IMPL_OFFSET > , attachEvent : attachEvent :: < Impl , IMPL_OFFSET > , detachEvent : detachEvent :: < Impl , IMPL_OFFSET > , setTimeout : setTimeout :: < Impl , IMPL_OFFSET > , setInterval : setInterval :: < Impl , IMPL_OFFSET > , print : print :: < Impl , IMPL_OFFSET > , Setonbeforeprint : Setonbeforeprint :: < Impl , IMPL_OFFSET > , onbeforeprint : onbeforeprint :: < Impl , IMPL_OFFSET > , Setonafterprint : Setonafterprint :: < Impl , IMPL_OFFSET > , onafterprint : onafterprint :: < Impl , IMPL_OFFSET > , clipboardData : clipboardData :: < Impl , IMPL_OFFSET > , showModelessDialog : showModelessDialog :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLWindow3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLWindow4Impl < > : Sized + IDispatchImpl where { fn createPopup ( ) ; fn frameElement ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLWindow4Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLWindow4Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLWindow4Vtbl < > { unsafe extern "system" fn createPopup < Impl : IHTMLWindow4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varargin : * const super::super::System::Com:: VARIANT , pppopup : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn frameElement < Impl : IHTMLWindow4Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , createPopup : createPopup :: < Impl , IMPL_OFFSET > , frameElement : frameElement :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLWindow4 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLWindow5Impl < > : Sized + IDispatchImpl where { fn SetXMLHttpRequest ( ) ; fn XMLHttpRequest ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLWindow5Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLWindow5Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLWindow5Vtbl < > { unsafe extern "system" fn SetXMLHttpRequest < Impl : IHTMLWindow5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn XMLHttpRequest < Impl : IHTMLWindow5Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetXMLHttpRequest : SetXMLHttpRequest :: < Impl , IMPL_OFFSET > , XMLHttpRequest : XMLHttpRequest :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLWindow5 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLWindow6Impl < > : Sized + IDispatchImpl where { fn SetXDomainRequest ( ) ; fn XDomainRequest ( ) ; fn sessionStorage ( ) ; fn localStorage ( ) ; fn Setonhashchange ( ) ; fn onhashchange ( ) ; fn maxConnectionsPerServer ( ) ; fn postMessage ( ) ; fn toStaticHTML ( ) ; fn Setonmessage ( ) ; fn onmessage ( ) ; fn msWriteProfilerMark ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLWindow6Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLWindow6Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLWindow6Vtbl < > { unsafe extern "system" fn SetXDomainRequest < Impl : IHTMLWindow6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn XDomainRequest < Impl : IHTMLWindow6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn sessionStorage < Impl : IHTMLWindow6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn localStorage < Impl : IHTMLWindow6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonhashchange < Impl : IHTMLWindow6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onhashchange < Impl : IHTMLWindow6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn maxConnectionsPerServer < Impl : IHTMLWindow6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn postMessage < Impl : IHTMLWindow6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , msg : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , targetorigin : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn toStaticHTML < Impl : IHTMLWindow6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrhtml : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pbstrstatichtml : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmessage < Impl : IHTMLWindow6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmessage < Impl : IHTMLWindow6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn msWriteProfilerMark < Impl : IHTMLWindow6Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrprofilermarkname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetXDomainRequest : SetXDomainRequest :: < Impl , IMPL_OFFSET > , XDomainRequest : XDomainRequest :: < Impl , IMPL_OFFSET > , sessionStorage : sessionStorage :: < Impl , IMPL_OFFSET > , localStorage : localStorage :: < Impl , IMPL_OFFSET > , Setonhashchange : Setonhashchange :: < Impl , IMPL_OFFSET > , onhashchange : onhashchange :: < Impl , IMPL_OFFSET > , maxConnectionsPerServer : maxConnectionsPerServer :: < Impl , IMPL_OFFSET > , postMessage : postMessage :: < Impl , IMPL_OFFSET > , toStaticHTML : toStaticHTML :: < Impl , IMPL_OFFSET > , Setonmessage : Setonmessage :: < Impl , IMPL_OFFSET > , onmessage : onmessage :: < Impl , IMPL_OFFSET > , msWriteProfilerMark : msWriteProfilerMark :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLWindow6 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLWindow7Impl < > : Sized + IDispatchImpl where { fn getSelection ( ) ; fn getComputedStyle ( ) ; fn styleMedia ( ) ; fn Setperformance ( ) ; fn performance ( ) ; fn innerWidth ( ) ; fn innerHeight ( ) ; fn pageXOffset ( ) ; fn pageYOffset ( ) ; fn screenX ( ) ; fn screenY ( ) ; fn outerWidth ( ) ; fn outerHeight ( ) ; fn Setonabort ( ) ; fn onabort ( ) ; fn Setoncanplay ( ) ; fn oncanplay ( ) ; fn Setoncanplaythrough ( ) ; fn oncanplaythrough ( ) ; fn Setonchange ( ) ; fn onchange ( ) ; fn Setonclick ( ) ; fn onclick ( ) ; fn Setoncontextmenu ( ) ; fn oncontextmenu ( ) ; fn Setondblclick ( ) ; fn ondblclick ( ) ; fn Setondrag ( ) ; fn ondrag ( ) ; fn Setondragend ( ) ; fn ondragend ( ) ; fn Setondragenter ( ) ; fn ondragenter ( ) ; fn Setondragleave ( ) ; fn ondragleave ( ) ; fn Setondragover ( ) ; fn ondragover ( ) ; fn Setondragstart ( ) ; fn ondragstart ( ) ; fn Setondrop ( ) ; fn ondrop ( ) ; fn Setondurationchange ( ) ; fn ondurationchange ( ) ; fn Setonfocusin ( ) ; fn onfocusin ( ) ; fn Setonfocusout ( ) ; fn onfocusout ( ) ; fn Setoninput ( ) ; fn oninput ( ) ; fn Setonemptied ( ) ; fn onemptied ( ) ; fn Setonended ( ) ; fn onended ( ) ; fn Setonkeydown ( ) ; fn onkeydown ( ) ; fn Setonkeypress ( ) ; fn onkeypress ( ) ; fn Setonkeyup ( ) ; fn onkeyup ( ) ; fn Setonloadeddata ( ) ; fn onloadeddata ( ) ; fn Setonloadedmetadata ( ) ; fn onloadedmetadata ( ) ; fn Setonloadstart ( ) ; fn onloadstart ( ) ; fn Setonmousedown ( ) ; fn onmousedown ( ) ; fn Setonmouseenter ( ) ; fn onmouseenter ( ) ; fn Setonmouseleave ( ) ; fn onmouseleave ( ) ; fn Setonmousemove ( ) ; fn onmousemove ( ) ; fn Setonmouseout ( ) ; fn onmouseout ( ) ; fn Setonmouseover ( ) ; fn onmouseover ( ) ; fn Setonmouseup ( ) ; fn onmouseup ( ) ; fn Setonmousewheel ( ) ; fn onmousewheel ( ) ; fn Setonoffline ( ) ; fn onoffline ( ) ; fn Setononline ( ) ; fn ononline ( ) ; fn Setonprogress ( ) ; fn onprogress ( ) ; fn Setonratechange ( ) ; fn onratechange ( ) ; fn Setonreadystatechange ( ) ; fn onreadystatechange ( ) ; fn Setonreset ( ) ; fn onreset ( ) ; fn Setonseeked ( ) ; fn onseeked ( ) ; fn Setonseeking ( ) ; fn onseeking ( ) ; fn Setonselect ( ) ; fn onselect ( ) ; fn Setonstalled ( ) ; fn onstalled ( ) ; fn Setonstorage ( ) ; fn onstorage ( ) ; fn Setonsubmit ( ) ; fn onsubmit ( ) ; fn Setonsuspend ( ) ; fn onsuspend ( ) ; fn Setontimeupdate ( ) ; fn ontimeupdate ( ) ; fn Setonpause ( ) ; fn onpause ( ) ; fn Setonplay ( ) ; fn onplay ( ) ; fn Setonplaying ( ) ; fn onplaying ( ) ; fn Setonvolumechange ( ) ; fn onvolumechange ( ) ; fn Setonwaiting ( ) ; fn onwaiting ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLWindow7Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLWindow7Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLWindow7Vtbl < > { unsafe extern "system" fn getSelection < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppihtmlselection : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getComputedStyle < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varargin : :: windows :: core :: RawPtr , bstrpseudoelt : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ppcomputedstyle : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn styleMedia < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setperformance < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn performance < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn innerWidth < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn innerHeight < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn pageXOffset < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn pageYOffset < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn screenX < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn screenY < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn outerWidth < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn outerHeight < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonabort < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onabort < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setoncanplay < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn oncanplay < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setoncanplaythrough < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn oncanplaythrough < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonchange < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onchange < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonclick < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onclick < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setoncontextmenu < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn oncontextmenu < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setondblclick < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ondblclick < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setondrag < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ondrag < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setondragend < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ondragend < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setondragenter < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ondragenter < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setondragleave < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ondragleave < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setondragover < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ondragover < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setondragstart < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ondragstart < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setondrop < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ondrop < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setondurationchange < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ondurationchange < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonfocusin < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onfocusin < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonfocusout < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onfocusout < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setoninput < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn oninput < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonemptied < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onemptied < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonended < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onended < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonkeydown < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onkeydown < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonkeypress < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onkeypress < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonkeyup < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onkeyup < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonloadeddata < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onloadeddata < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonloadedmetadata < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onloadedmetadata < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonloadstart < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onloadstart < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmousedown < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmousedown < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmouseenter < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmouseenter < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmouseleave < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmouseleave < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmousemove < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmousemove < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmouseout < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmouseout < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmouseover < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmouseover < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmouseup < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmouseup < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmousewheel < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmousewheel < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonoffline < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onoffline < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setononline < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ononline < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonprogress < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onprogress < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonratechange < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onratechange < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonreadystatechange < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onreadystatechange < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonreset < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onreset < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonseeked < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onseeked < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonseeking < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onseeking < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonselect < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onselect < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonstalled < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onstalled < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonstorage < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onstorage < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonsubmit < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onsubmit < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonsuspend < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onsuspend < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setontimeupdate < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ontimeupdate < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonpause < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onpause < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonplay < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onplay < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonplaying < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onplaying < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonvolumechange < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onvolumechange < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonwaiting < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onwaiting < Impl : IHTMLWindow7Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , getSelection : getSelection :: < Impl , IMPL_OFFSET > , getComputedStyle : getComputedStyle :: < Impl , IMPL_OFFSET > , styleMedia : styleMedia :: < Impl , IMPL_OFFSET > , Setperformance : Setperformance :: < Impl , IMPL_OFFSET > , performance : performance :: < Impl , IMPL_OFFSET > , innerWidth : innerWidth :: < Impl , IMPL_OFFSET > , innerHeight : innerHeight :: < Impl , IMPL_OFFSET > , pageXOffset : pageXOffset :: < Impl , IMPL_OFFSET > , pageYOffset : pageYOffset :: < Impl , IMPL_OFFSET > , screenX : screenX :: < Impl , IMPL_OFFSET > , screenY : screenY :: < Impl , IMPL_OFFSET > , outerWidth : outerWidth :: < Impl , IMPL_OFFSET > , outerHeight : outerHeight :: < Impl , IMPL_OFFSET > , Setonabort : Setonabort :: < Impl , IMPL_OFFSET > , onabort : onabort :: < Impl , IMPL_OFFSET > , Setoncanplay : Setoncanplay :: < Impl , IMPL_OFFSET > , oncanplay : oncanplay :: < Impl , IMPL_OFFSET > , Setoncanplaythrough : Setoncanplaythrough :: < Impl , IMPL_OFFSET > , oncanplaythrough : oncanplaythrough :: < Impl , IMPL_OFFSET > , Setonchange : Setonchange :: < Impl , IMPL_OFFSET > , onchange : onchange :: < Impl , IMPL_OFFSET > , Setonclick : Setonclick :: < Impl , IMPL_OFFSET > , onclick : onclick :: < Impl , IMPL_OFFSET > , Setoncontextmenu : Setoncontextmenu :: < Impl , IMPL_OFFSET > , oncontextmenu : oncontextmenu :: < Impl , IMPL_OFFSET > , Setondblclick : Setondblclick :: < Impl , IMPL_OFFSET > , ondblclick : ondblclick :: < Impl , IMPL_OFFSET > , Setondrag : Setondrag :: < Impl , IMPL_OFFSET > , ondrag : ondrag :: < Impl , IMPL_OFFSET > , Setondragend : Setondragend :: < Impl , IMPL_OFFSET > , ondragend : ondragend :: < Impl , IMPL_OFFSET > , Setondragenter : Setondragenter :: < Impl , IMPL_OFFSET > , ondragenter : ondragenter :: < Impl , IMPL_OFFSET > , Setondragleave : Setondragleave :: < Impl , IMPL_OFFSET > , ondragleave : ondragleave :: < Impl , IMPL_OFFSET > , Setondragover : Setondragover :: < Impl , IMPL_OFFSET > , ondragover : ondragover :: < Impl , IMPL_OFFSET > , Setondragstart : Setondragstart :: < Impl , IMPL_OFFSET > , ondragstart : ondragstart :: < Impl , IMPL_OFFSET > , Setondrop : Setondrop :: < Impl , IMPL_OFFSET > , ondrop : ondrop :: < Impl , IMPL_OFFSET > , Setondurationchange : Setondurationchange :: < Impl , IMPL_OFFSET > , ondurationchange : ondurationchange :: < Impl , IMPL_OFFSET > , Setonfocusin : Setonfocusin :: < Impl , IMPL_OFFSET > , onfocusin : onfocusin :: < Impl , IMPL_OFFSET > , Setonfocusout : Setonfocusout :: < Impl , IMPL_OFFSET > , onfocusout : onfocusout :: < Impl , IMPL_OFFSET > , Setoninput : Setoninput :: < Impl , IMPL_OFFSET > , oninput : oninput :: < Impl , IMPL_OFFSET > , Setonemptied : Setonemptied :: < Impl , IMPL_OFFSET > , onemptied : onemptied :: < Impl , IMPL_OFFSET > , Setonended : Setonended :: < Impl , IMPL_OFFSET > , onended : onended :: < Impl , IMPL_OFFSET > , Setonkeydown : Setonkeydown :: < Impl , IMPL_OFFSET > , onkeydown : onkeydown :: < Impl , IMPL_OFFSET > , Setonkeypress : Setonkeypress :: < Impl , IMPL_OFFSET > , onkeypress : onkeypress :: < Impl , IMPL_OFFSET > , Setonkeyup : Setonkeyup :: < Impl , IMPL_OFFSET > , onkeyup : onkeyup :: < Impl , IMPL_OFFSET > , Setonloadeddata : Setonloadeddata :: < Impl , IMPL_OFFSET > , onloadeddata : onloadeddata :: < Impl , IMPL_OFFSET > , Setonloadedmetadata : Setonloadedmetadata :: < Impl , IMPL_OFFSET > , onloadedmetadata : onloadedmetadata :: < Impl , IMPL_OFFSET > , Setonloadstart : Setonloadstart :: < Impl , IMPL_OFFSET > , onloadstart : onloadstart :: < Impl , IMPL_OFFSET > , Setonmousedown : Setonmousedown :: < Impl , IMPL_OFFSET > , onmousedown : onmousedown :: < Impl , IMPL_OFFSET > , Setonmouseenter : Setonmouseenter :: < Impl , IMPL_OFFSET > , onmouseenter : onmouseenter :: < Impl , IMPL_OFFSET > , Setonmouseleave : Setonmouseleave :: < Impl , IMPL_OFFSET > , onmouseleave : onmouseleave :: < Impl , IMPL_OFFSET > , Setonmousemove : Setonmousemove :: < Impl , IMPL_OFFSET > , onmousemove : onmousemove :: < Impl , IMPL_OFFSET > , Setonmouseout : Setonmouseout :: < Impl , IMPL_OFFSET > , onmouseout : onmouseout :: < Impl , IMPL_OFFSET > , Setonmouseover : Setonmouseover :: < Impl , IMPL_OFFSET > , onmouseover : onmouseover :: < Impl , IMPL_OFFSET > , Setonmouseup : Setonmouseup :: < Impl , IMPL_OFFSET > , onmouseup : onmouseup :: < Impl , IMPL_OFFSET > , Setonmousewheel : Setonmousewheel :: < Impl , IMPL_OFFSET > , onmousewheel : onmousewheel :: < Impl , IMPL_OFFSET > , Setonoffline : Setonoffline :: < Impl , IMPL_OFFSET > , onoffline : onoffline :: < Impl , IMPL_OFFSET > , Setononline : Setononline :: < Impl , IMPL_OFFSET > , ononline : ononline :: < Impl , IMPL_OFFSET > , Setonprogress : Setonprogress :: < Impl , IMPL_OFFSET > , onprogress : onprogress :: < Impl , IMPL_OFFSET > , Setonratechange : Setonratechange :: < Impl , IMPL_OFFSET > , onratechange : onratechange :: < Impl , IMPL_OFFSET > , Setonreadystatechange : Setonreadystatechange :: < Impl , IMPL_OFFSET > , onreadystatechange : onreadystatechange :: < Impl , IMPL_OFFSET > , Setonreset : Setonreset :: < Impl , IMPL_OFFSET > , onreset : onreset :: < Impl , IMPL_OFFSET > , Setonseeked : Setonseeked :: < Impl , IMPL_OFFSET > , onseeked : onseeked :: < Impl , IMPL_OFFSET > , Setonseeking : Setonseeking :: < Impl , IMPL_OFFSET > , onseeking : onseeking :: < Impl , IMPL_OFFSET > , Setonselect : Setonselect :: < Impl , IMPL_OFFSET > , onselect : onselect :: < Impl , IMPL_OFFSET > , Setonstalled : Setonstalled :: < Impl , IMPL_OFFSET > , onstalled : onstalled :: < Impl , IMPL_OFFSET > , Setonstorage : Setonstorage :: < Impl , IMPL_OFFSET > , onstorage : onstorage :: < Impl , IMPL_OFFSET > , Setonsubmit : Setonsubmit :: < Impl , IMPL_OFFSET > , onsubmit : onsubmit :: < Impl , IMPL_OFFSET > , Setonsuspend : Setonsuspend :: < Impl , IMPL_OFFSET > , onsuspend : onsuspend :: < Impl , IMPL_OFFSET > , Setontimeupdate : Setontimeupdate :: < Impl , IMPL_OFFSET > , ontimeupdate : ontimeupdate :: < Impl , IMPL_OFFSET > , Setonpause : Setonpause :: < Impl , IMPL_OFFSET > , onpause : onpause :: < Impl , IMPL_OFFSET > , Setonplay : Setonplay :: < Impl , IMPL_OFFSET > , onplay : onplay :: < Impl , IMPL_OFFSET > , Setonplaying : Setonplaying :: < Impl , IMPL_OFFSET > , onplaying : onplaying :: < Impl , IMPL_OFFSET > , Setonvolumechange : Setonvolumechange :: < Impl , IMPL_OFFSET > , onvolumechange : onvolumechange :: < Impl , IMPL_OFFSET > , Setonwaiting : Setonwaiting :: < Impl , IMPL_OFFSET > , onwaiting : onwaiting :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLWindow7 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLWindow8Impl < > : Sized + IDispatchImpl where { fn Setonmspointerdown ( ) ; fn onmspointerdown ( ) ; fn Setonmspointermove ( ) ; fn onmspointermove ( ) ; fn Setonmspointerup ( ) ; fn onmspointerup ( ) ; fn Setonmspointerover ( ) ; fn onmspointerover ( ) ; fn Setonmspointerout ( ) ; fn onmspointerout ( ) ; fn Setonmspointercancel ( ) ; fn onmspointercancel ( ) ; fn Setonmspointerhover ( ) ; fn onmspointerhover ( ) ; fn Setonmsgesturestart ( ) ; fn onmsgesturestart ( ) ; fn Setonmsgesturechange ( ) ; fn onmsgesturechange ( ) ; fn Setonmsgestureend ( ) ; fn onmsgestureend ( ) ; fn Setonmsgesturehold ( ) ; fn onmsgesturehold ( ) ; fn Setonmsgesturetap ( ) ; fn onmsgesturetap ( ) ; fn Setonmsgesturedoubletap ( ) ; fn onmsgesturedoubletap ( ) ; fn Setonmsinertiastart ( ) ; fn onmsinertiastart ( ) ; fn applicationCache ( ) ; fn Setonpopstate ( ) ; fn onpopstate ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLWindow8Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLWindow8Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLWindow8Vtbl < > { unsafe extern "system" fn Setonmspointerdown < Impl : IHTMLWindow8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmspointerdown < Impl : IHTMLWindow8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmspointermove < Impl : IHTMLWindow8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmspointermove < Impl : IHTMLWindow8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmspointerup < Impl : IHTMLWindow8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmspointerup < Impl : IHTMLWindow8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmspointerover < Impl : IHTMLWindow8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmspointerover < Impl : IHTMLWindow8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmspointerout < Impl : IHTMLWindow8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmspointerout < Impl : IHTMLWindow8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmspointercancel < Impl : IHTMLWindow8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmspointercancel < Impl : IHTMLWindow8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmspointerhover < Impl : IHTMLWindow8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmspointerhover < Impl : IHTMLWindow8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmsgesturestart < Impl : IHTMLWindow8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmsgesturestart < Impl : IHTMLWindow8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmsgesturechange < Impl : IHTMLWindow8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmsgesturechange < Impl : IHTMLWindow8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmsgestureend < Impl : IHTMLWindow8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmsgestureend < Impl : IHTMLWindow8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmsgesturehold < Impl : IHTMLWindow8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmsgesturehold < Impl : IHTMLWindow8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmsgesturetap < Impl : IHTMLWindow8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmsgesturetap < Impl : IHTMLWindow8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmsgesturedoubletap < Impl : IHTMLWindow8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmsgesturedoubletap < Impl : IHTMLWindow8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonmsinertiastart < Impl : IHTMLWindow8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onmsinertiastart < Impl : IHTMLWindow8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn applicationCache < Impl : IHTMLWindow8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonpopstate < Impl : IHTMLWindow8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onpopstate < Impl : IHTMLWindow8Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setonmspointerdown : Setonmspointerdown :: < Impl , IMPL_OFFSET > , onmspointerdown : onmspointerdown :: < Impl , IMPL_OFFSET > , Setonmspointermove : Setonmspointermove :: < Impl , IMPL_OFFSET > , onmspointermove : onmspointermove :: < Impl , IMPL_OFFSET > , Setonmspointerup : Setonmspointerup :: < Impl , IMPL_OFFSET > , onmspointerup : onmspointerup :: < Impl , IMPL_OFFSET > , Setonmspointerover : Setonmspointerover :: < Impl , IMPL_OFFSET > , onmspointerover : onmspointerover :: < Impl , IMPL_OFFSET > , Setonmspointerout : Setonmspointerout :: < Impl , IMPL_OFFSET > , onmspointerout : onmspointerout :: < Impl , IMPL_OFFSET > , Setonmspointercancel : Setonmspointercancel :: < Impl , IMPL_OFFSET > , onmspointercancel : onmspointercancel :: < Impl , IMPL_OFFSET > , Setonmspointerhover : Setonmspointerhover :: < Impl , IMPL_OFFSET > , onmspointerhover : onmspointerhover :: < Impl , IMPL_OFFSET > , Setonmsgesturestart : Setonmsgesturestart :: < Impl , IMPL_OFFSET > , onmsgesturestart : onmsgesturestart :: < Impl , IMPL_OFFSET > , Setonmsgesturechange : Setonmsgesturechange :: < Impl , IMPL_OFFSET > , onmsgesturechange : onmsgesturechange :: < Impl , IMPL_OFFSET > , Setonmsgestureend : Setonmsgestureend :: < Impl , IMPL_OFFSET > , onmsgestureend : onmsgestureend :: < Impl , IMPL_OFFSET > , Setonmsgesturehold : Setonmsgesturehold :: < Impl , IMPL_OFFSET > , onmsgesturehold : onmsgesturehold :: < Impl , IMPL_OFFSET > , Setonmsgesturetap : Setonmsgesturetap :: < Impl , IMPL_OFFSET > , onmsgesturetap : onmsgesturetap :: < Impl , IMPL_OFFSET > , Setonmsgesturedoubletap : Setonmsgesturedoubletap :: < Impl , IMPL_OFFSET > , onmsgesturedoubletap : onmsgesturedoubletap :: < Impl , IMPL_OFFSET > , Setonmsinertiastart : Setonmsinertiastart :: < Impl , IMPL_OFFSET > , onmsinertiastart : onmsinertiastart :: < Impl , IMPL_OFFSET > , applicationCache : applicationCache :: < Impl , IMPL_OFFSET > , Setonpopstate : Setonpopstate :: < Impl , IMPL_OFFSET > , onpopstate : onpopstate :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLWindow8 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLXDomainRequestImpl < > : Sized + IDispatchImpl where { fn responseText ( ) ; fn Settimeout ( ) ; fn timeout ( ) ; fn contentType ( ) ; fn Setonprogress ( ) ; fn onprogress ( ) ; fn Setonerror ( ) ; fn onerror ( ) ; fn Setontimeout ( ) ; fn ontimeout ( ) ; fn Setonload ( ) ; fn onload ( ) ; fn abort ( ) ; fn open ( ) ; fn send ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLXDomainRequestVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLXDomainRequestImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLXDomainRequestVtbl < > { unsafe extern "system" fn responseText < Impl : IHTMLXDomainRequestImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Settimeout < Impl : IHTMLXDomainRequestImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn timeout < Impl : IHTMLXDomainRequestImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn contentType < Impl : IHTMLXDomainRequestImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonprogress < Impl : IHTMLXDomainRequestImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onprogress < Impl : IHTMLXDomainRequestImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonerror < Impl : IHTMLXDomainRequestImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onerror < Impl : IHTMLXDomainRequestImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setontimeout < Impl : IHTMLXDomainRequestImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ontimeout < Impl : IHTMLXDomainRequestImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonload < Impl : IHTMLXDomainRequestImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onload < Impl : IHTMLXDomainRequestImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn abort < Impl : IHTMLXDomainRequestImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn open < Impl : IHTMLXDomainRequestImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrmethod : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , bstrurl : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn send < Impl : IHTMLXDomainRequestImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varbody : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , responseText : responseText :: < Impl , IMPL_OFFSET > , Settimeout : Settimeout :: < Impl , IMPL_OFFSET > , timeout : timeout :: < Impl , IMPL_OFFSET > , contentType : contentType :: < Impl , IMPL_OFFSET > , Setonprogress : Setonprogress :: < Impl , IMPL_OFFSET > , onprogress : onprogress :: < Impl , IMPL_OFFSET > , Setonerror : Setonerror :: < Impl , IMPL_OFFSET > , onerror : onerror :: < Impl , IMPL_OFFSET > , Setontimeout : Setontimeout :: < Impl , IMPL_OFFSET > , ontimeout : ontimeout :: < Impl , IMPL_OFFSET > , Setonload : Setonload :: < Impl , IMPL_OFFSET > , onload : onload :: < Impl , IMPL_OFFSET > , abort : abort :: < Impl , IMPL_OFFSET > , open : open :: < Impl , IMPL_OFFSET > , send : send :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLXDomainRequest < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLXDomainRequestFactoryImpl < > : Sized + IDispatchImpl where { fn create ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLXDomainRequestFactoryVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLXDomainRequestFactoryImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLXDomainRequestFactoryVtbl < > { unsafe extern "system" fn create < Impl : IHTMLXDomainRequestFactoryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , __midl__ihtmlxdomainrequestfactory0000 : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , create : create :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLXDomainRequestFactory < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLXMLHttpRequestImpl < > : Sized + IDispatchImpl where { fn readyState ( ) ; fn responseBody ( ) ; fn responseText ( ) ; fn responseXML ( ) ; fn status ( ) ; fn statusText ( ) ; fn Setonreadystatechange ( ) ; fn onreadystatechange ( ) ; fn abort ( ) ; fn open ( ) ; fn send ( ) ; fn getAllResponseHeaders ( ) ; fn getResponseHeader ( ) ; fn setRequestHeader ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLXMLHttpRequestVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLXMLHttpRequestImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLXMLHttpRequestVtbl < > { unsafe extern "system" fn readyState < Impl : IHTMLXMLHttpRequestImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn responseBody < Impl : IHTMLXMLHttpRequestImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn responseText < Impl : IHTMLXMLHttpRequestImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn responseXML < Impl : IHTMLXMLHttpRequestImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn status < Impl : IHTMLXMLHttpRequestImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn statusText < Impl : IHTMLXMLHttpRequestImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonreadystatechange < Impl : IHTMLXMLHttpRequestImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onreadystatechange < Impl : IHTMLXMLHttpRequestImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn abort < Impl : IHTMLXMLHttpRequestImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn open < Impl : IHTMLXMLHttpRequestImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrmethod : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , bstrurl : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , varasync : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , varuser : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , varpassword : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn send < Impl : IHTMLXMLHttpRequestImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varbody : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getAllResponseHeaders < Impl : IHTMLXMLHttpRequestImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , __midl__ihtmlxmlhttprequest0000 : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getResponseHeader < Impl : IHTMLXMLHttpRequestImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrheader : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , __midl__ihtmlxmlhttprequest0001 : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn setRequestHeader < Impl : IHTMLXMLHttpRequestImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrheader : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , bstrvalue : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , readyState : readyState :: < Impl , IMPL_OFFSET > , responseBody : responseBody :: < Impl , IMPL_OFFSET > , responseText : responseText :: < Impl , IMPL_OFFSET > , responseXML : responseXML :: < Impl , IMPL_OFFSET > , status : status :: < Impl , IMPL_OFFSET > , statusText : statusText :: < Impl , IMPL_OFFSET > , Setonreadystatechange : Setonreadystatechange :: < Impl , IMPL_OFFSET > , onreadystatechange : onreadystatechange :: < Impl , IMPL_OFFSET > , abort : abort :: < Impl , IMPL_OFFSET > , open : open :: < Impl , IMPL_OFFSET > , send : send :: < Impl , IMPL_OFFSET > , getAllResponseHeaders : getAllResponseHeaders :: < Impl , IMPL_OFFSET > , getResponseHeader : getResponseHeader :: < Impl , IMPL_OFFSET > , setRequestHeader : setRequestHeader :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLXMLHttpRequest < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLXMLHttpRequest2Impl < > : Sized + IDispatchImpl where { fn Settimeout ( ) ; fn timeout ( ) ; fn Setontimeout ( ) ; fn ontimeout ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLXMLHttpRequest2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLXMLHttpRequest2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLXMLHttpRequest2Vtbl < > { unsafe extern "system" fn Settimeout < Impl : IHTMLXMLHttpRequest2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn timeout < Impl : IHTMLXMLHttpRequest2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setontimeout < Impl : IHTMLXMLHttpRequest2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ontimeout < Impl : IHTMLXMLHttpRequest2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Settimeout : Settimeout :: < Impl , IMPL_OFFSET > , timeout : timeout :: < Impl , IMPL_OFFSET > , Setontimeout : Setontimeout :: < Impl , IMPL_OFFSET > , ontimeout : ontimeout :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLXMLHttpRequest2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHTMLXMLHttpRequestFactoryImpl < > : Sized + IDispatchImpl where { fn create ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHTMLXMLHttpRequestFactoryVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHTMLXMLHttpRequestFactoryImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHTMLXMLHttpRequestFactoryVtbl < > { unsafe extern "system" fn create < Impl : IHTMLXMLHttpRequestFactoryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , __midl__ihtmlxmlhttprequestfactory0000 : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , create : create :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHTMLXMLHttpRequestFactory < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHeaderFooterImpl < > : Sized + IDispatchImpl where { fn htmlHead ( ) ; fn htmlFoot ( ) ; fn SettextHead ( ) ; fn textHead ( ) ; fn SettextFoot ( ) ; fn textFoot ( ) ; fn Setpage ( ) ; fn page ( ) ; fn SetpageTotal ( ) ; fn pageTotal ( ) ; fn SetURL ( ) ; fn URL ( ) ; fn Settitle ( ) ; fn title ( ) ; fn SetdateShort ( ) ; fn dateShort ( ) ; fn SetdateLong ( ) ; fn dateLong ( ) ; fn SettimeShort ( ) ; fn timeShort ( ) ; fn SettimeLong ( ) ; fn timeLong ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHeaderFooterVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHeaderFooterImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHeaderFooterVtbl < > { unsafe extern "system" fn htmlHead < Impl : IHeaderFooterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn htmlFoot < Impl : IHeaderFooterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextHead < Impl : IHeaderFooterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textHead < Impl : IHeaderFooterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettextFoot < Impl : IHeaderFooterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textFoot < Impl : IHeaderFooterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setpage < Impl : IHeaderFooterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn page < Impl : IHeaderFooterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetpageTotal < Impl : IHeaderFooterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn pageTotal < Impl : IHeaderFooterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetURL < Impl : IHeaderFooterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn URL < Impl : IHeaderFooterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Settitle < Impl : IHeaderFooterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn title < Impl : IHeaderFooterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetdateShort < Impl : IHeaderFooterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn dateShort < Impl : IHeaderFooterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetdateLong < Impl : IHeaderFooterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn dateLong < Impl : IHeaderFooterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettimeShort < Impl : IHeaderFooterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn timeShort < Impl : IHeaderFooterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettimeLong < Impl : IHeaderFooterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn timeLong < Impl : IHeaderFooterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , htmlHead : htmlHead :: < Impl , IMPL_OFFSET > , htmlFoot : htmlFoot :: < Impl , IMPL_OFFSET > , SettextHead : SettextHead :: < Impl , IMPL_OFFSET > , textHead : textHead :: < Impl , IMPL_OFFSET > , SettextFoot : SettextFoot :: < Impl , IMPL_OFFSET > , textFoot : textFoot :: < Impl , IMPL_OFFSET > , Setpage : Setpage :: < Impl , IMPL_OFFSET > , page : page :: < Impl , IMPL_OFFSET > , SetpageTotal : SetpageTotal :: < Impl , IMPL_OFFSET > , pageTotal : pageTotal :: < Impl , IMPL_OFFSET > , SetURL : SetURL :: < Impl , IMPL_OFFSET > , URL : URL :: < Impl , IMPL_OFFSET > , Settitle : Settitle :: < Impl , IMPL_OFFSET > , title : title :: < Impl , IMPL_OFFSET > , SetdateShort : SetdateShort :: < Impl , IMPL_OFFSET > , dateShort : dateShort :: < Impl , IMPL_OFFSET > , SetdateLong : SetdateLong :: < Impl , IMPL_OFFSET > , dateLong : dateLong :: < Impl , IMPL_OFFSET > , SettimeShort : SettimeShort :: < Impl , IMPL_OFFSET > , timeShort : timeShort :: < Impl , IMPL_OFFSET > , SettimeLong : SettimeLong :: < Impl , IMPL_OFFSET > , timeLong : timeLong :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHeaderFooter < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHeaderFooter2Impl < > : Sized + IHeaderFooterImpl + IDispatchImpl where { fn Setfont ( ) ; fn font ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHeaderFooter2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHeaderFooter2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHeaderFooter2Vtbl < > { unsafe extern "system" fn Setfont < Impl : IHeaderFooter2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn font < Impl : IHeaderFooter2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setfont : Setfont :: < Impl , IMPL_OFFSET > , font : font :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHeaderFooter2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_System_Com" ) ] pub trait IHighlightRenderingServicesImpl < > : Sized where { fn AddSegment ( ) ; fn MoveSegmentToPointers ( ) ; fn RemoveSegment ( ) ; } # [ cfg ( feature ="Win32_System_Com" ) ] impl < > IHighlightRenderingServicesVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHighlightRenderingServicesImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHighlightRenderingServicesVtbl < > { unsafe extern "system" fn AddSegment < Impl : IHighlightRenderingServicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdisppointerstart : :: windows :: core :: RawPtr , pdisppointerend : :: windows :: core :: RawPtr , pirenderstyle : :: windows :: core :: RawPtr , ppisegment : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn MoveSegmentToPointers < Impl : IHighlightRenderingServicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pisegment : :: windows :: core :: RawPtr , pdisppointerstart : :: windows :: core :: RawPtr , pdisppointerend : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RemoveSegment < Impl : IHighlightRenderingServicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pisegment : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , AddSegment : AddSegment :: < Impl , IMPL_OFFSET > , MoveSegmentToPointers : MoveSegmentToPointers :: < Impl , IMPL_OFFSET > , RemoveSegment : RemoveSegment :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHighlightRenderingServices < > as :: windows :: core :: Interface > :: IID } } pub trait IHighlightSegmentImpl < > : Sized + ISegmentImpl where { } impl < > IHighlightSegmentVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHighlightSegmentImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHighlightSegmentVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHighlightSegment < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHomePageImpl < > : Sized + IDispatchImpl where { fn navigateHomePage ( ) ; fn setHomePage ( ) ; fn isHomePage ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHomePageVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHomePageImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHomePageVtbl < > { unsafe extern "system" fn navigateHomePage < Impl : IHomePageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn setHomePage < Impl : IHomePageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrurl : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn isHomePage < Impl : IHomePageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrurl : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , navigateHomePage : navigateHomePage :: < Impl , IMPL_OFFSET > , setHomePage : setHomePage :: < Impl , IMPL_OFFSET > , isHomePage : isHomePage :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHomePage < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IHomePageSettingImpl < > : Sized where { fn SetHomePage ( ) ; fn IsHomePage ( ) ; fn SetHomePageToBrowserDefault ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IHomePageSettingVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHomePageSettingImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHomePageSettingVtbl < > { unsafe extern "system" fn SetHomePage < Impl : IHomePageSettingImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwnd : super::super::Foundation:: HWND , homepageuri : super::super::Foundation:: PWSTR , brandingmessage : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsHomePage < Impl : IHomePageSettingImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , uri : super::super::Foundation:: PWSTR , isdefault : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetHomePageToBrowserDefault < Impl : IHomePageSettingImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetHomePage : SetHomePage :: < Impl , IMPL_OFFSET > , IsHomePage : IsHomePage :: < Impl , IMPL_OFFSET > , SetHomePageToBrowserDefault : SetHomePageToBrowserDefault :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHomePageSetting < > as :: windows :: core :: Interface > :: IID } } pub trait IHostBehaviorInitImpl < > : Sized where { fn PopulateNamespaceTable ( ) ; } impl < > IHostBehaviorInitVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHostBehaviorInitImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHostBehaviorInitVtbl < > { unsafe extern "system" fn PopulateNamespaceTable < Impl : IHostBehaviorInitImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , PopulateNamespaceTable : PopulateNamespaceTable :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHostBehaviorInit < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHostDialogHelperImpl < > : Sized where { fn ShowHTMLDialog ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHostDialogHelperVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHostDialogHelperImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHostDialogHelperVtbl < > { unsafe extern "system" fn ShowHTMLDialog < Impl : IHostDialogHelperImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwndparent : super::super::Foundation:: HWND , pmk : :: windows :: core :: RawPtr , pvarargin : * mut super::super::System::Com:: VARIANT , pchoptions : super::super::Foundation:: PWSTR , pvarargout : * mut super::super::System::Com:: VARIANT , punkhost : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , ShowHTMLDialog : ShowHTMLDialog :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHostDialogHelper < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IHtmlDlgSafeHelperImpl < > : Sized + IDispatchImpl where { fn choosecolordlg ( ) ; fn getCharset ( ) ; fn Fonts ( ) ; fn BlockFormats ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IHtmlDlgSafeHelperVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IHtmlDlgSafeHelperImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IHtmlDlgSafeHelperVtbl < > { unsafe extern "system" fn choosecolordlg < Impl : IHtmlDlgSafeHelperImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , initcolor : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , rgbcolor : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getCharset < Impl : IHtmlDlgSafeHelperImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fontname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , charset : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Fonts < Impl : IHtmlDlgSafeHelperImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BlockFormats < Impl : IHtmlDlgSafeHelperImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , choosecolordlg : choosecolordlg :: < Impl , IMPL_OFFSET > , getCharset : getCharset :: < Impl , IMPL_OFFSET > , Fonts : Fonts :: < Impl , IMPL_OFFSET > , BlockFormats : BlockFormats :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IHtmlDlgSafeHelper < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IICCSVGColorImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IICCSVGColorVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IICCSVGColorImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IICCSVGColorVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IICCSVGColor < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IIE70DispatchExImpl < > : Sized + IDispatchExImpl + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IIE70DispatchExVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IIE70DispatchExImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IIE70DispatchExVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IIE70DispatchEx < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IIE80DispatchExImpl < > : Sized + IDispatchExImpl + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IIE80DispatchExVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IIE80DispatchExImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IIE80DispatchExVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IIE80DispatchEx < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IIEWebDriverManagerImpl < > : Sized + IDispatchImpl where { fn ExecuteCommand ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IIEWebDriverManagerVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IIEWebDriverManagerImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IIEWebDriverManagerVtbl < > { unsafe extern "system" fn ExecuteCommand < Impl : IIEWebDriverManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , command : super::super::Foundation:: PWSTR , response : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , ExecuteCommand : ExecuteCommand :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IIEWebDriverManager < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IIEWebDriverSiteImpl < > : Sized + IDispatchImpl where { fn WindowOperation ( ) ; fn DetachWebdriver ( ) ; fn GetCapabilityValue ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IIEWebDriverSiteVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IIEWebDriverSiteImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IIEWebDriverSiteVtbl < > { unsafe extern "system" fn WindowOperation < Impl : IIEWebDriverSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , operationcode : u32 , hwnd : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DetachWebdriver < Impl : IIEWebDriverSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punkwd : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetCapabilityValue < Impl : IIEWebDriverSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punkwd : * mut :: core :: ffi :: c_void , capname : super::super::Foundation:: PWSTR , capvalue : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , WindowOperation : WindowOperation :: < Impl , IMPL_OFFSET > , DetachWebdriver : DetachWebdriver :: < Impl , IMPL_OFFSET > , GetCapabilityValue : GetCapabilityValue :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IIEWebDriverSite < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_UI_Input_Ime" ) ] pub trait IIMEServicesImpl < > : Sized where { fn GetActiveIMM ( ) ; } # [ cfg ( feature ="Win32_UI_Input_Ime" ) ] impl < > IIMEServicesVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IIMEServicesImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IIMEServicesVtbl < > { unsafe extern "system" fn GetActiveIMM < Impl : IIMEServicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppactiveimm : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetActiveIMM : GetActiveIMM :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IIMEServices < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IImageDecodeEventSinkImpl < > : Sized where { fn GetSurface ( ) ; fn OnBeginDecode ( ) ; fn OnBitsComplete ( ) ; fn OnDecodeComplete ( ) ; fn OnPalette ( ) ; fn OnProgress ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IImageDecodeEventSinkVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IImageDecodeEventSinkImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IImageDecodeEventSinkVtbl < > { unsafe extern "system" fn GetSurface < Impl : IImageDecodeEventSinkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , nwidth : i32 , nheight : i32 , bfid : * const :: windows :: core :: GUID , npasses : u32 , dwhints : u32 , ppsurface : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnBeginDecode < Impl : IImageDecodeEventSinkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdwevents : * mut u32 , pnformats : * mut u32 , ppformats : * mut * mut :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnBitsComplete < Impl : IImageDecodeEventSinkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnDecodeComplete < Impl : IImageDecodeEventSinkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hrstatus : :: windows :: core :: HRESULT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnPalette < Impl : IImageDecodeEventSinkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnProgress < Impl : IImageDecodeEventSinkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbounds : * const super::super::Foundation:: RECT , bcomplete : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetSurface : GetSurface :: < Impl , IMPL_OFFSET > , OnBeginDecode : OnBeginDecode :: < Impl , IMPL_OFFSET > , OnBitsComplete : OnBitsComplete :: < Impl , IMPL_OFFSET > , OnDecodeComplete : OnDecodeComplete :: < Impl , IMPL_OFFSET > , OnPalette : OnPalette :: < Impl , IMPL_OFFSET > , OnProgress : OnProgress :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IImageDecodeEventSink < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IImageDecodeEventSink2Impl < > : Sized + IImageDecodeEventSinkImpl where { fn IsAlphaPremultRequired ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IImageDecodeEventSink2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IImageDecodeEventSink2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IImageDecodeEventSink2Vtbl < > { unsafe extern "system" fn IsAlphaPremultRequired < Impl : IImageDecodeEventSink2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfpremultalpha : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , IsAlphaPremultRequired : IsAlphaPremultRequired :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IImageDecodeEventSink2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_System_Com" ) ] pub trait IImageDecodeFilterImpl < > : Sized where { fn Initialize ( ) ; fn Process ( ) ; fn Terminate ( ) ; } # [ cfg ( feature ="Win32_System_Com" ) ] impl < > IImageDecodeFilterVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IImageDecodeFilterImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IImageDecodeFilterVtbl < > { unsafe extern "system" fn Initialize < Impl : IImageDecodeFilterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , peventsink : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Process < Impl : IImageDecodeFilterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pstream : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Terminate < Impl : IImageDecodeFilterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hrstatus : :: windows :: core :: HRESULT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Initialize : Initialize :: < Impl , IMPL_OFFSET > , Process : Process :: < Impl , IMPL_OFFSET > , Terminate : Terminate :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IImageDecodeFilter < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IIntelliFormsImpl < > : Sized + IDispatchImpl where { fn enabled ( ) ; fn Setenabled ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IIntelliFormsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IIntelliFormsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IIntelliFormsVtbl < > { unsafe extern "system" fn enabled < Impl : IIntelliFormsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pval : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setenabled < Impl : IIntelliFormsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bval : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , enabled : enabled :: < Impl , IMPL_OFFSET > , Setenabled : Setenabled :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IIntelliForms < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IInternetExplorerManagerImpl < > : Sized where { fn CreateObject ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IInternetExplorerManagerVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IInternetExplorerManagerImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IInternetExplorerManagerVtbl < > { unsafe extern "system" fn CreateObject < Impl : IInternetExplorerManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwconfig : u32 , pszurl : super::super::Foundation:: PWSTR , riid : * const :: windows :: core :: GUID , ppv : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , CreateObject : CreateObject :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IInternetExplorerManager < > as :: windows :: core :: Interface > :: IID } } pub trait IInternetExplorerManager2Impl < > : Sized where { fn EnumFrameWindows ( ) ; } impl < > IInternetExplorerManager2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IInternetExplorerManager2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IInternetExplorerManager2Vtbl < > { unsafe extern "system" fn EnumFrameWindows < Impl : IInternetExplorerManager2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppenum : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , EnumFrameWindows : EnumFrameWindows :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IInternetExplorerManager2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ILayoutRectImpl < > : Sized + IDispatchImpl where { fn SetnextRect ( ) ; fn nextRect ( ) ; fn SetcontentSrc ( ) ; fn contentSrc ( ) ; fn SethonorPageBreaks ( ) ; fn honorPageBreaks ( ) ; fn SethonorPageRules ( ) ; fn honorPageRules ( ) ; fn SetnextRectElement ( ) ; fn nextRectElement ( ) ; fn contentDocument ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ILayoutRectVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ILayoutRectImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ILayoutRectVtbl < > { unsafe extern "system" fn SetnextRect < Impl : ILayoutRectImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrelementid : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn nextRect < Impl : ILayoutRectImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrelementid : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetcontentSrc < Impl : ILayoutRectImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varcontentsrc : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn contentSrc < Impl : ILayoutRectImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarcontentsrc : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SethonorPageBreaks < Impl : ILayoutRectImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn honorPageBreaks < Impl : ILayoutRectImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SethonorPageRules < Impl : ILayoutRectImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn honorPageRules < Impl : ILayoutRectImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetnextRectElement < Impl : ILayoutRectImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pelem : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn nextRectElement < Impl : ILayoutRectImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppelem : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn contentDocument < Impl : ILayoutRectImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdoc : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetnextRect : SetnextRect :: < Impl , IMPL_OFFSET > , nextRect : nextRect :: < Impl , IMPL_OFFSET > , SetcontentSrc : SetcontentSrc :: < Impl , IMPL_OFFSET > , contentSrc : contentSrc :: < Impl , IMPL_OFFSET > , SethonorPageBreaks : SethonorPageBreaks :: < Impl , IMPL_OFFSET > , honorPageBreaks : honorPageBreaks :: < Impl , IMPL_OFFSET > , SethonorPageRules : SethonorPageRules :: < Impl , IMPL_OFFSET > , honorPageRules : honorPageRules :: < Impl , IMPL_OFFSET > , SetnextRectElement : SetnextRectElement :: < Impl , IMPL_OFFSET > , nextRectElement : nextRectElement :: < Impl , IMPL_OFFSET > , contentDocument : contentDocument :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ILayoutRect < > as :: windows :: core :: Interface > :: IID } } pub trait ILineInfoImpl < > : Sized where { fn x ( ) ; fn baseLine ( ) ; fn textDescent ( ) ; fn textHeight ( ) ; fn lineDirection ( ) ; } impl < > ILineInfoVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ILineInfoImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ILineInfoVtbl < > { unsafe extern "system" fn x < Impl : ILineInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn baseLine < Impl : ILineInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textDescent < Impl : ILineInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textHeight < Impl : ILineInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn lineDirection < Impl : ILineInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , x : x :: < Impl , IMPL_OFFSET > , baseLine : baseLine :: < Impl , IMPL_OFFSET > , textDescent : textDescent :: < Impl , IMPL_OFFSET > , textHeight : textHeight :: < Impl , IMPL_OFFSET > , lineDirection : lineDirection :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ILineInfo < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IMapMIMEToCLSIDImpl < > : Sized where { fn EnableDefaultMappings ( ) ; fn MapMIMEToCLSID ( ) ; fn SetMapping ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IMapMIMEToCLSIDVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IMapMIMEToCLSIDImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IMapMIMEToCLSIDVtbl < > { unsafe extern "system" fn EnableDefaultMappings < Impl : IMapMIMEToCLSIDImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , benable : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn MapMIMEToCLSID < Impl : IMapMIMEToCLSIDImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszmimetype : super::super::Foundation:: PWSTR , pclsid : * const :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetMapping < Impl : IMapMIMEToCLSIDImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszmimetype : super::super::Foundation:: PWSTR , dwmapmode : u32 , clsid : * const :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , EnableDefaultMappings : EnableDefaultMappings :: < Impl , IMPL_OFFSET > , MapMIMEToCLSID : MapMIMEToCLSID :: < Impl , IMPL_OFFSET > , SetMapping : SetMapping :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IMapMIMEToCLSID < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_System_Com" ) ] pub trait IMarkupContainerImpl < > : Sized where { fn OwningDoc ( ) ; } # [ cfg ( feature ="Win32_System_Com" ) ] impl < > IMarkupContainerVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IMarkupContainerImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IMarkupContainerVtbl < > { unsafe extern "system" fn OwningDoc < Impl : IMarkupContainerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppdoc : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , OwningDoc : OwningDoc :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IMarkupContainer < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IMarkupContainer2Impl < > : Sized + IMarkupContainerImpl where { fn CreateChangeLog ( ) ; fn RegisterForDirtyRange ( ) ; fn UnRegisterForDirtyRange ( ) ; fn GetAndClearDirtyRange ( ) ; fn GetVersionNumber ( ) ; fn GetMasterElement ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IMarkupContainer2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IMarkupContainer2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IMarkupContainer2Vtbl < > { unsafe extern "system" fn CreateChangeLog < Impl : IMarkupContainer2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pchangesink : :: windows :: core :: RawPtr , ppchangelog : * mut :: windows :: core :: RawPtr , fforward : super::super::Foundation:: BOOL , fbackward : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RegisterForDirtyRange < Impl : IMarkupContainer2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pchangesink : :: windows :: core :: RawPtr , pdwcookie : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UnRegisterForDirtyRange < Impl : IMarkupContainer2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwcookie : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetAndClearDirtyRange < Impl : IMarkupContainer2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwcookie : u32 , pipointerbegin : :: windows :: core :: RawPtr , pipointerend : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetVersionNumber < Impl : IMarkupContainer2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> i32 { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetMasterElement < Impl : IMarkupContainer2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppelementmaster : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , CreateChangeLog : CreateChangeLog :: < Impl , IMPL_OFFSET > , RegisterForDirtyRange : RegisterForDirtyRange :: < Impl , IMPL_OFFSET > , UnRegisterForDirtyRange : UnRegisterForDirtyRange :: < Impl , IMPL_OFFSET > , GetAndClearDirtyRange : GetAndClearDirtyRange :: < Impl , IMPL_OFFSET > , GetVersionNumber : GetVersionNumber :: < Impl , IMPL_OFFSET > , GetMasterElement : GetMasterElement :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IMarkupContainer2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IMarkupPointerImpl < > : Sized where { fn OwningDoc ( ) ; fn Gravity ( ) ; fn SetGravity ( ) ; fn Cling ( ) ; fn SetCling ( ) ; fn Unposition ( ) ; fn IsPositioned ( ) ; fn GetContainer ( ) ; fn MoveAdjacentToElement ( ) ; fn MoveToPointer ( ) ; fn MoveToContainer ( ) ; fn Left ( ) ; fn Right ( ) ; fn CurrentScope ( ) ; fn IsLeftOf ( ) ; fn IsLeftOfOrEqualTo ( ) ; fn IsRightOf ( ) ; fn IsRightOfOrEqualTo ( ) ; fn IsEqualTo ( ) ; fn MoveUnit ( ) ; fn FindText ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IMarkupPointerVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IMarkupPointerImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IMarkupPointerVtbl < > { unsafe extern "system" fn OwningDoc < Impl : IMarkupPointerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppdoc : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Gravity < Impl : IMarkupPointerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pgravity : * mut POINTER_GRAVITY , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetGravity < Impl : IMarkupPointerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , gravity : POINTER_GRAVITY , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Cling < Impl : IMarkupPointerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfcling : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetCling < Impl : IMarkupPointerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fcling : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Unposition < Impl : IMarkupPointerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsPositioned < Impl : IMarkupPointerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfpositioned : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetContainer < Impl : IMarkupPointerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppcontainer : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn MoveAdjacentToElement < Impl : IMarkupPointerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pelement : :: windows :: core :: RawPtr , eadj : ELEMENT_ADJACENCY , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn MoveToPointer < Impl : IMarkupPointerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppointer : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn MoveToContainer < Impl : IMarkupPointerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcontainer : :: windows :: core :: RawPtr , fatstart : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Left < Impl : IMarkupPointerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fmove : super::super::Foundation:: BOOL , pcontext : * mut MARKUP_CONTEXT_TYPE , ppelement : * mut :: windows :: core :: RawPtr , pcch : * mut i32 , pchtext : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Right < Impl : IMarkupPointerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fmove : super::super::Foundation:: BOOL , pcontext : * mut MARKUP_CONTEXT_TYPE , ppelement : * mut :: windows :: core :: RawPtr , pcch : * mut i32 , pchtext : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CurrentScope < Impl : IMarkupPointerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppelemcurrent : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsLeftOf < Impl : IMarkupPointerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppointerthat : :: windows :: core :: RawPtr , pfresult : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsLeftOfOrEqualTo < Impl : IMarkupPointerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppointerthat : :: windows :: core :: RawPtr , pfresult : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsRightOf < Impl : IMarkupPointerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppointerthat : :: windows :: core :: RawPtr , pfresult : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsRightOfOrEqualTo < Impl : IMarkupPointerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppointerthat : :: windows :: core :: RawPtr , pfresult : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsEqualTo < Impl : IMarkupPointerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppointerthat : :: windows :: core :: RawPtr , pfareequal : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn MoveUnit < Impl : IMarkupPointerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , muaction : MOVEUNIT_ACTION , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn FindText < Impl : IMarkupPointerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pchfindtext : super::super::Foundation:: PWSTR , dwflags : u32 , piendmatch : :: windows :: core :: RawPtr , piendsearch : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , OwningDoc : OwningDoc :: < Impl , IMPL_OFFSET > , Gravity : Gravity :: < Impl , IMPL_OFFSET > , SetGravity : SetGravity :: < Impl , IMPL_OFFSET > , Cling : Cling :: < Impl , IMPL_OFFSET > , SetCling : SetCling :: < Impl , IMPL_OFFSET > , Unposition : Unposition :: < Impl , IMPL_OFFSET > , IsPositioned : IsPositioned :: < Impl , IMPL_OFFSET > , GetContainer : GetContainer :: < Impl , IMPL_OFFSET > , MoveAdjacentToElement : MoveAdjacentToElement :: < Impl , IMPL_OFFSET > , MoveToPointer : MoveToPointer :: < Impl , IMPL_OFFSET > , MoveToContainer : MoveToContainer :: < Impl , IMPL_OFFSET > , Left : Left :: < Impl , IMPL_OFFSET > , Right : Right :: < Impl , IMPL_OFFSET > , CurrentScope : CurrentScope :: < Impl , IMPL_OFFSET > , IsLeftOf : IsLeftOf :: < Impl , IMPL_OFFSET > , IsLeftOfOrEqualTo : IsLeftOfOrEqualTo :: < Impl , IMPL_OFFSET > , IsRightOf : IsRightOf :: < Impl , IMPL_OFFSET > , IsRightOfOrEqualTo : IsRightOfOrEqualTo :: < Impl , IMPL_OFFSET > , IsEqualTo : IsEqualTo :: < Impl , IMPL_OFFSET > , MoveUnit : MoveUnit :: < Impl , IMPL_OFFSET > , FindText : FindText :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IMarkupPointer < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IMarkupPointer2Impl < > : Sized + IMarkupPointerImpl where { fn IsAtWordBreak ( ) ; fn GetMarkupPosition ( ) ; fn MoveToMarkupPosition ( ) ; fn MoveUnitBounded ( ) ; fn IsInsideURL ( ) ; fn MoveToContent ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IMarkupPointer2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IMarkupPointer2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IMarkupPointer2Vtbl < > { unsafe extern "system" fn IsAtWordBreak < Impl : IMarkupPointer2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfatbreak : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetMarkupPosition < Impl : IMarkupPointer2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plmp : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn MoveToMarkupPosition < Impl : IMarkupPointer2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcontainer : :: windows :: core :: RawPtr , lmp : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn MoveUnitBounded < Impl : IMarkupPointer2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , muaction : MOVEUNIT_ACTION , piboundary : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsInsideURL < Impl : IMarkupPointer2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pright : :: windows :: core :: RawPtr , pfresult : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn MoveToContent < Impl : IMarkupPointer2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pielement : :: windows :: core :: RawPtr , fatstart : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , IsAtWordBreak : IsAtWordBreak :: < Impl , IMPL_OFFSET > , GetMarkupPosition : GetMarkupPosition :: < Impl , IMPL_OFFSET > , MoveToMarkupPosition : MoveToMarkupPosition :: < Impl , IMPL_OFFSET > , MoveUnitBounded : MoveUnitBounded :: < Impl , IMPL_OFFSET > , IsInsideURL : IsInsideURL :: < Impl , IMPL_OFFSET > , MoveToContent : MoveToContent :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IMarkupPointer2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IMarkupServicesImpl < > : Sized where { fn CreateMarkupPointer ( ) ; fn CreateMarkupContainer ( ) ; fn CreateElement ( ) ; fn CloneElement ( ) ; fn InsertElement ( ) ; fn RemoveElement ( ) ; fn Remove ( ) ; fn Copy ( ) ; fn Move ( ) ; fn InsertText ( ) ; fn ParseString ( ) ; fn ParseGlobal ( ) ; fn IsScopedElement ( ) ; fn GetElementTagId ( ) ; fn GetTagIDForName ( ) ; fn GetNameForTagID ( ) ; fn MovePointersToRange ( ) ; fn MoveRangeToPointers ( ) ; fn BeginUndoUnit ( ) ; fn EndUndoUnit ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IMarkupServicesVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IMarkupServicesImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IMarkupServicesVtbl < > { unsafe extern "system" fn CreateMarkupPointer < Impl : IMarkupServicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pppointer : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CreateMarkupContainer < Impl : IMarkupServicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppmarkupcontainer : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CreateElement < Impl : IMarkupServicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , tagid : ELEMENT_TAG_ID , pchattributes : super::super::Foundation:: PWSTR , ppelement : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CloneElement < Impl : IMarkupServicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pelemclonethis : :: windows :: core :: RawPtr , ppelementtheclone : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn InsertElement < Impl : IMarkupServicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pelementinsert : :: windows :: core :: RawPtr , ppointerstart : :: windows :: core :: RawPtr , ppointerfinish : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RemoveElement < Impl : IMarkupServicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pelementremove : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Remove < Impl : IMarkupServicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppointerstart : :: windows :: core :: RawPtr , ppointerfinish : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Copy < Impl : IMarkupServicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppointersourcestart : :: windows :: core :: RawPtr , ppointersourcefinish : :: windows :: core :: RawPtr , ppointertarget : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Move < Impl : IMarkupServicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppointersourcestart : :: windows :: core :: RawPtr , ppointersourcefinish : :: windows :: core :: RawPtr , ppointertarget : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn InsertText < Impl : IMarkupServicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pchtext : super::super::Foundation:: PWSTR , cch : i32 , ppointertarget : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ParseString < Impl : IMarkupServicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pchhtml : super::super::Foundation:: PWSTR , dwflags : u32 , ppcontainerresult : * mut :: windows :: core :: RawPtr , pppointerstart : :: windows :: core :: RawPtr , pppointerfinish : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ParseGlobal < Impl : IMarkupServicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hglobalhtml : isize , dwflags : u32 , ppcontainerresult : * mut :: windows :: core :: RawPtr , ppointerstart : :: windows :: core :: RawPtr , ppointerfinish : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsScopedElement < Impl : IMarkupServicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pelement : :: windows :: core :: RawPtr , pfscoped : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetElementTagId < Impl : IMarkupServicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pelement : :: windows :: core :: RawPtr , ptagid : * mut ELEMENT_TAG_ID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetTagIDForName < Impl : IMarkupServicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ptagid : * mut ELEMENT_TAG_ID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetNameForTagID < Impl : IMarkupServicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , tagid : ELEMENT_TAG_ID , pbstrname : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn MovePointersToRange < Impl : IMarkupServicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pirange : :: windows :: core :: RawPtr , ppointerstart : :: windows :: core :: RawPtr , ppointerfinish : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn MoveRangeToPointers < Impl : IMarkupServicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppointerstart : :: windows :: core :: RawPtr , ppointerfinish : :: windows :: core :: RawPtr , pirange : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BeginUndoUnit < Impl : IMarkupServicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pchtitle : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn EndUndoUnit < Impl : IMarkupServicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , CreateMarkupPointer : CreateMarkupPointer :: < Impl , IMPL_OFFSET > , CreateMarkupContainer : CreateMarkupContainer :: < Impl , IMPL_OFFSET > , CreateElement : CreateElement :: < Impl , IMPL_OFFSET > , CloneElement : CloneElement :: < Impl , IMPL_OFFSET > , InsertElement : InsertElement :: < Impl , IMPL_OFFSET > , RemoveElement : RemoveElement :: < Impl , IMPL_OFFSET > , Remove : Remove :: < Impl , IMPL_OFFSET > , Copy : Copy :: < Impl , IMPL_OFFSET > , Move : Move :: < Impl , IMPL_OFFSET > , InsertText : InsertText :: < Impl , IMPL_OFFSET > , ParseString : ParseString :: < Impl , IMPL_OFFSET > , ParseGlobal : ParseGlobal :: < Impl , IMPL_OFFSET > , IsScopedElement : IsScopedElement :: < Impl , IMPL_OFFSET > , GetElementTagId : GetElementTagId :: < Impl , IMPL_OFFSET > , GetTagIDForName : GetTagIDForName :: < Impl , IMPL_OFFSET > , GetNameForTagID : GetNameForTagID :: < Impl , IMPL_OFFSET > , MovePointersToRange : MovePointersToRange :: < Impl , IMPL_OFFSET > , MoveRangeToPointers : MoveRangeToPointers :: < Impl , IMPL_OFFSET > , BeginUndoUnit : BeginUndoUnit :: < Impl , IMPL_OFFSET > , EndUndoUnit : EndUndoUnit :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IMarkupServices < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IMarkupServices2Impl < > : Sized + IMarkupServicesImpl where { fn ParseGlobalEx ( ) ; fn ValidateElements ( ) ; fn SaveSegmentsToClipboard ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IMarkupServices2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IMarkupServices2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IMarkupServices2Vtbl < > { unsafe extern "system" fn ParseGlobalEx < Impl : IMarkupServices2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hglobalhtml : isize , dwflags : u32 , pcontext : :: windows :: core :: RawPtr , ppcontainerresult : * mut :: windows :: core :: RawPtr , ppointerstart : :: windows :: core :: RawPtr , ppointerfinish : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ValidateElements < Impl : IMarkupServices2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppointerstart : :: windows :: core :: RawPtr , ppointerfinish : :: windows :: core :: RawPtr , ppointertarget : :: windows :: core :: RawPtr , ppointerstatus : :: windows :: core :: RawPtr , ppelemfailbottom : * mut :: windows :: core :: RawPtr , ppelemfailtop : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SaveSegmentsToClipboard < Impl : IMarkupServices2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psegmentlist : :: windows :: core :: RawPtr , dwflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , ParseGlobalEx : ParseGlobalEx :: < Impl , IMPL_OFFSET > , ValidateElements : ValidateElements :: < Impl , IMPL_OFFSET > , SaveSegmentsToClipboard : SaveSegmentsToClipboard :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IMarkupServices2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IMarkupTextFragsImpl < > : Sized where { fn GetTextFragCount ( ) ; fn GetTextFrag ( ) ; fn RemoveTextFrag ( ) ; fn InsertTextFrag ( ) ; fn FindTextFragFromMarkupPointer ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IMarkupTextFragsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IMarkupTextFragsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IMarkupTextFragsVtbl < > { unsafe extern "system" fn GetTextFragCount < Impl : IMarkupTextFragsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcfrags : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetTextFrag < Impl : IMarkupTextFragsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ifrag : i32 , pbstrfrag : * mut super::super::Foundation:: BSTR , ppointerfrag : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RemoveTextFrag < Impl : IMarkupTextFragsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ifrag : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn InsertTextFrag < Impl : IMarkupTextFragsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ifrag : i32 , bstrinsert : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ppointerinsert : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn FindTextFragFromMarkupPointer < Impl : IMarkupTextFragsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppointerfind : :: windows :: core :: RawPtr , pifrag : * mut i32 , pffragfound : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetTextFragCount : GetTextFragCount :: < Impl , IMPL_OFFSET > , GetTextFrag : GetTextFrag :: < Impl , IMPL_OFFSET > , RemoveTextFrag : RemoveTextFrag :: < Impl , IMPL_OFFSET > , InsertTextFrag : InsertTextFrag :: < Impl , IMPL_OFFSET > , FindTextFragFromMarkupPointer : FindTextFragFromMarkupPointer :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IMarkupTextFrags < > as :: windows :: core :: Interface > :: IID } } pub trait IMediaActivityNotifySiteImpl < > : Sized where { fn OnMediaActivityStarted ( ) ; fn OnMediaActivityStopped ( ) ; } impl < > IMediaActivityNotifySiteVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IMediaActivityNotifySiteImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IMediaActivityNotifySiteVtbl < > { unsafe extern "system" fn OnMediaActivityStarted < Impl : IMediaActivityNotifySiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , mediaactivitytype : MediaActivityNotifyType , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnMediaActivityStopped < Impl : IMediaActivityNotifySiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , mediaactivitytype : MediaActivityNotifyType , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , OnMediaActivityStarted : OnMediaActivityStarted :: < Impl , IMPL_OFFSET > , OnMediaActivityStopped : OnMediaActivityStopped :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IMediaActivityNotifySite < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait INavigatorDoNotTrackImpl < > : Sized + IDispatchImpl where { fn msDoNotTrack ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > INavigatorDoNotTrackVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : INavigatorDoNotTrackImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> INavigatorDoNotTrackVtbl < > { unsafe extern "system" fn msDoNotTrack < Impl : INavigatorDoNotTrackImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , msDoNotTrack : msDoNotTrack :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < INavigatorDoNotTrack < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait INavigatorGeolocationImpl < > : Sized + IDispatchImpl where { fn geolocation ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > INavigatorGeolocationVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : INavigatorGeolocationImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> INavigatorGeolocationVtbl < > { unsafe extern "system" fn geolocation < Impl : INavigatorGeolocationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , geolocation : geolocation :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < INavigatorGeolocation < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IOmHistoryImpl < > : Sized + IDispatchImpl where { fn length ( ) ; fn back ( ) ; fn forward ( ) ; fn go ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IOmHistoryVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IOmHistoryImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IOmHistoryVtbl < > { unsafe extern "system" fn length < Impl : IOmHistoryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn back < Impl : IOmHistoryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvargdistance : * const super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn forward < Impl : IOmHistoryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvargdistance : * const super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn go < Impl : IOmHistoryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvargdistance : * const super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , length : length :: < Impl , IMPL_OFFSET > , back : back :: < Impl , IMPL_OFFSET > , forward : forward :: < Impl , IMPL_OFFSET > , go : go :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IOmHistory < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IOmNavigatorImpl < > : Sized + IDispatchImpl where { fn appCodeName ( ) ; fn appName ( ) ; fn appVersion ( ) ; fn userAgent ( ) ; fn javaEnabled ( ) ; fn taintEnabled ( ) ; fn mimeTypes ( ) ; fn plugins ( ) ; fn cookieEnabled ( ) ; fn opsProfile ( ) ; fn toString ( ) ; fn cpuClass ( ) ; fn systemLanguage ( ) ; fn browserLanguage ( ) ; fn userLanguage ( ) ; fn platform ( ) ; fn appMinorVersion ( ) ; fn connectionSpeed ( ) ; fn onLine ( ) ; fn userProfile ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IOmNavigatorVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IOmNavigatorImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IOmNavigatorVtbl < > { unsafe extern "system" fn appCodeName < Impl : IOmNavigatorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn appName < Impl : IOmNavigatorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn appVersion < Impl : IOmNavigatorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn userAgent < Impl : IOmNavigatorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn javaEnabled < Impl : IOmNavigatorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , enabled : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn taintEnabled < Impl : IOmNavigatorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , enabled : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn mimeTypes < Impl : IOmNavigatorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn plugins < Impl : IOmNavigatorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn cookieEnabled < Impl : IOmNavigatorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn opsProfile < Impl : IOmNavigatorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn toString < Impl : IOmNavigatorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , string : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn cpuClass < Impl : IOmNavigatorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn systemLanguage < Impl : IOmNavigatorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn browserLanguage < Impl : IOmNavigatorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn userLanguage < Impl : IOmNavigatorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn platform < Impl : IOmNavigatorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn appMinorVersion < Impl : IOmNavigatorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn connectionSpeed < Impl : IOmNavigatorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onLine < Impl : IOmNavigatorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn userProfile < Impl : IOmNavigatorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , appCodeName : appCodeName :: < Impl , IMPL_OFFSET > , appName : appName :: < Impl , IMPL_OFFSET > , appVersion : appVersion :: < Impl , IMPL_OFFSET > , userAgent : userAgent :: < Impl , IMPL_OFFSET > , javaEnabled : javaEnabled :: < Impl , IMPL_OFFSET > , taintEnabled : taintEnabled :: < Impl , IMPL_OFFSET > , mimeTypes : mimeTypes :: < Impl , IMPL_OFFSET > , plugins : plugins :: < Impl , IMPL_OFFSET > , cookieEnabled : cookieEnabled :: < Impl , IMPL_OFFSET > , opsProfile : opsProfile :: < Impl , IMPL_OFFSET > , toString : toString :: < Impl , IMPL_OFFSET > , cpuClass : cpuClass :: < Impl , IMPL_OFFSET > , systemLanguage : systemLanguage :: < Impl , IMPL_OFFSET > , browserLanguage : browserLanguage :: < Impl , IMPL_OFFSET > , userLanguage : userLanguage :: < Impl , IMPL_OFFSET > , platform : platform :: < Impl , IMPL_OFFSET > , appMinorVersion : appMinorVersion :: < Impl , IMPL_OFFSET > , connectionSpeed : connectionSpeed :: < Impl , IMPL_OFFSET > , onLine : onLine :: < Impl , IMPL_OFFSET > , userProfile : userProfile :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IOmNavigator < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IOpenServiceImpl < > : Sized where { fn IsDefault ( ) ; fn SetDefault ( ) ; fn GetID ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IOpenServiceVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IOpenServiceImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IOpenServiceVtbl < > { unsafe extern "system" fn IsDefault < Impl : IOpenServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfisdefault : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetDefault < Impl : IOpenServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fdefault : super::super::Foundation:: BOOL , hwnd : super::super::Foundation:: HWND , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetID < Impl : IOpenServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrid : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , IsDefault : IsDefault :: < Impl , IMPL_OFFSET > , SetDefault : SetDefault :: < Impl , IMPL_OFFSET > , GetID : GetID :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IOpenService < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] pub trait IOpenServiceActivityImpl < > : Sized + IOpenServiceImpl where { fn Execute ( ) ; fn CanExecute ( ) ; fn CanExecuteType ( ) ; fn Preview ( ) ; fn CanPreview ( ) ; fn CanPreviewType ( ) ; fn GetStatusText ( ) ; fn GetHomepageUrl ( ) ; fn GetDisplayName ( ) ; fn GetDescription ( ) ; fn GetCategoryName ( ) ; fn GetIconPath ( ) ; fn GetIcon ( ) ; fn GetDescriptionFilePath ( ) ; fn GetDownloadUrl ( ) ; fn GetInstallUrl ( ) ; fn IsEnabled ( ) ; fn SetEnabled ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] impl < > IOpenServiceActivityVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IOpenServiceActivityImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IOpenServiceActivityVtbl < > { unsafe extern "system" fn Execute < Impl : IOpenServiceActivityImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pinput : :: windows :: core :: RawPtr , poutput : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CanExecute < Impl : IOpenServiceActivityImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pinput : :: windows :: core :: RawPtr , poutput : :: windows :: core :: RawPtr , pfcanexecute : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CanExecuteType < Impl : IOpenServiceActivityImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , r#type : OpenServiceActivityContentType , pfcanexecute : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Preview < Impl : IOpenServiceActivityImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pinput : :: windows :: core :: RawPtr , poutput : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CanPreview < Impl : IOpenServiceActivityImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pinput : :: windows :: core :: RawPtr , poutput : :: windows :: core :: RawPtr , pfcanpreview : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CanPreviewType < Impl : IOpenServiceActivityImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , r#type : OpenServiceActivityContentType , pfcanpreview : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetStatusText < Impl : IOpenServiceActivityImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pinput : :: windows :: core :: RawPtr , pbstrstatustext : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetHomepageUrl < Impl : IOpenServiceActivityImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrhomepageurl : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetDisplayName < Impl : IOpenServiceActivityImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrdisplayname : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetDescription < Impl : IOpenServiceActivityImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrdescription : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetCategoryName < Impl : IOpenServiceActivityImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrcategoryname : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetIconPath < Impl : IOpenServiceActivityImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstriconpath : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetIcon < Impl : IOpenServiceActivityImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fsmallicon : super::super::Foundation:: BOOL , phicon : * mut super::super::UI::WindowsAndMessaging:: HICON , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetDescriptionFilePath < Impl : IOpenServiceActivityImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrxmlpath : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetDownloadUrl < Impl : IOpenServiceActivityImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrxmluri : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetInstallUrl < Impl : IOpenServiceActivityImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrinstalluri : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsEnabled < Impl : IOpenServiceActivityImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfisenabled : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetEnabled < Impl : IOpenServiceActivityImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fenable : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Execute : Execute :: < Impl , IMPL_OFFSET > , CanExecute : CanExecute :: < Impl , IMPL_OFFSET > , CanExecuteType : CanExecuteType :: < Impl , IMPL_OFFSET > , Preview : Preview :: < Impl , IMPL_OFFSET > , CanPreview : CanPreview :: < Impl , IMPL_OFFSET > , CanPreviewType : CanPreviewType :: < Impl , IMPL_OFFSET > , GetStatusText : GetStatusText :: < Impl , IMPL_OFFSET > , GetHomepageUrl : GetHomepageUrl :: < Impl , IMPL_OFFSET > , GetDisplayName : GetDisplayName :: < Impl , IMPL_OFFSET > , GetDescription : GetDescription :: < Impl , IMPL_OFFSET > , GetCategoryName : GetCategoryName :: < Impl , IMPL_OFFSET > , GetIconPath : GetIconPath :: < Impl , IMPL_OFFSET > , GetIcon : GetIcon :: < Impl , IMPL_OFFSET > , GetDescriptionFilePath : GetDescriptionFilePath :: < Impl , IMPL_OFFSET > , GetDownloadUrl : GetDownloadUrl :: < Impl , IMPL_OFFSET > , GetInstallUrl : GetInstallUrl :: < Impl , IMPL_OFFSET > , IsEnabled : IsEnabled :: < Impl , IMPL_OFFSET > , SetEnabled : SetEnabled :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IOpenServiceActivity < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IOpenServiceActivityCategoryImpl < > : Sized where { fn HasDefaultActivity ( ) ; fn GetDefaultActivity ( ) ; fn SetDefaultActivity ( ) ; fn GetName ( ) ; fn GetActivityEnumerator ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IOpenServiceActivityCategoryVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IOpenServiceActivityCategoryImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IOpenServiceActivityCategoryVtbl < > { unsafe extern "system" fn HasDefaultActivity < Impl : IOpenServiceActivityCategoryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfhasdefaultactivity : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetDefaultActivity < Impl : IOpenServiceActivityCategoryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppdefaultactivity : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetDefaultActivity < Impl : IOpenServiceActivityCategoryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pactivity : :: windows :: core :: RawPtr , hwnd : super::super::Foundation:: HWND , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetName < Impl : IOpenServiceActivityCategoryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrname : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetActivityEnumerator < Impl : IOpenServiceActivityCategoryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pinput : :: windows :: core :: RawPtr , poutput : :: windows :: core :: RawPtr , ppenumactivity : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , HasDefaultActivity : HasDefaultActivity :: < Impl , IMPL_OFFSET > , GetDefaultActivity : GetDefaultActivity :: < Impl , IMPL_OFFSET > , SetDefaultActivity : SetDefaultActivity :: < Impl , IMPL_OFFSET > , GetName : GetName :: < Impl , IMPL_OFFSET > , GetActivityEnumerator : GetActivityEnumerator :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IOpenServiceActivityCategory < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IOpenServiceActivityInputImpl < > : Sized where { fn GetVariable ( ) ; fn HasVariable ( ) ; fn GetType ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IOpenServiceActivityInputVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IOpenServiceActivityInputImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IOpenServiceActivityInputVtbl < > { unsafe extern "system" fn GetVariable < Impl : IOpenServiceActivityInputImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pwzvariablename : super::super::Foundation:: PWSTR , pwzvariabletype : super::super::Foundation:: PWSTR , pbstrvariablecontent : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HasVariable < Impl : IOpenServiceActivityInputImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pwzvariablename : super::super::Foundation:: PWSTR , pwzvariabletype : super::super::Foundation:: PWSTR , pfhasvariable : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetType < Impl : IOpenServiceActivityInputImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ptype : * mut OpenServiceActivityContentType , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetVariable : GetVariable :: < Impl , IMPL_OFFSET > , HasVariable : HasVariable :: < Impl , IMPL_OFFSET > , GetType : GetType :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IOpenServiceActivityInput < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IOpenServiceActivityManagerImpl < > : Sized where { fn GetCategoryEnumerator ( ) ; fn GetActivityByID ( ) ; fn GetActivityByHomepageAndCategory ( ) ; fn GetVersionCookie ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IOpenServiceActivityManagerVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IOpenServiceActivityManagerImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IOpenServiceActivityManagerVtbl < > { unsafe extern "system" fn GetCategoryEnumerator < Impl : IOpenServiceActivityManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , etype : OpenServiceActivityContentType , ppenum : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetActivityByID < Impl : IOpenServiceActivityManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pwzactivityid : super::super::Foundation:: PWSTR , ppactivity : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetActivityByHomepageAndCategory < Impl : IOpenServiceActivityManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pwzhomepage : super::super::Foundation:: PWSTR , pwzcategory : super::super::Foundation:: PWSTR , ppactivity : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetVersionCookie < Impl : IOpenServiceActivityManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdwversioncookie : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetCategoryEnumerator : GetCategoryEnumerator :: < Impl , IMPL_OFFSET > , GetActivityByID : GetActivityByID :: < Impl , IMPL_OFFSET > , GetActivityByHomepageAndCategory : GetActivityByHomepageAndCategory :: < Impl , IMPL_OFFSET > , GetVersionCookie : GetVersionCookie :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IOpenServiceActivityManager < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IOpenServiceActivityOutputContextImpl < > : Sized where { fn Navigate ( ) ; fn CanNavigate ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IOpenServiceActivityOutputContextVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IOpenServiceActivityOutputContextImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IOpenServiceActivityOutputContextVtbl < > { unsafe extern "system" fn Navigate < Impl : IOpenServiceActivityOutputContextImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pwzuri : super::super::Foundation:: PWSTR , pwzmethod : super::super::Foundation:: PWSTR , pwzheaders : super::super::Foundation:: PWSTR , ppostdata : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CanNavigate < Impl : IOpenServiceActivityOutputContextImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pwzuri : super::super::Foundation:: PWSTR , pwzmethod : super::super::Foundation:: PWSTR , pwzheaders : super::super::Foundation:: PWSTR , ppostdata : :: windows :: core :: RawPtr , pfcannavigate : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Navigate : Navigate :: < Impl , IMPL_OFFSET > , CanNavigate : CanNavigate :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IOpenServiceActivityOutputContext < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IOpenServiceManagerImpl < > : Sized where { fn InstallService ( ) ; fn UninstallService ( ) ; fn GetServiceByID ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IOpenServiceManagerVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IOpenServiceManagerImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IOpenServiceManagerVtbl < > { unsafe extern "system" fn InstallService < Impl : IOpenServiceManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pwzserviceurl : super::super::Foundation:: PWSTR , ppservice : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UninstallService < Impl : IOpenServiceManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pservice : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetServiceByID < Impl : IOpenServiceManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pwzid : super::super::Foundation:: PWSTR , ppservice : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , InstallService : InstallService :: < Impl , IMPL_OFFSET > , UninstallService : UninstallService :: < Impl , IMPL_OFFSET > , GetServiceByID : GetServiceByID :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IOpenServiceManager < > as :: windows :: core :: Interface > :: IID } } pub trait IPeerFactoryImpl < > : Sized where { } impl < > IPeerFactoryVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IPeerFactoryImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IPeerFactoryVtbl < > { Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IPeerFactory < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_System_Com" ) ] pub trait IPersistHistoryImpl < > : Sized + IPersistImpl where { fn LoadHistory ( ) ; fn SaveHistory ( ) ; fn SetPositionCookie ( ) ; fn GetPositionCookie ( ) ; } # [ cfg ( feature ="Win32_System_Com" ) ] impl < > IPersistHistoryVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IPersistHistoryImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IPersistHistoryVtbl < > { unsafe extern "system" fn LoadHistory < Impl : IPersistHistoryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pstream : :: windows :: core :: RawPtr , pbc : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SaveHistory < Impl : IPersistHistoryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pstream : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetPositionCookie < Impl : IPersistHistoryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwpositioncookie : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetPositionCookie < Impl : IPersistHistoryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdwpositioncookie : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , LoadHistory : LoadHistory :: < Impl , IMPL_OFFSET > , SaveHistory : SaveHistory :: < Impl , IMPL_OFFSET > , SetPositionCookie : SetPositionCookie :: < Impl , IMPL_OFFSET > , GetPositionCookie : GetPositionCookie :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IPersistHistory < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IPrintManagerTemplatePrinterImpl < > : Sized + IDispatchImpl where { fn startPrint ( ) ; fn drawPreviewPage ( ) ; fn setPageCount ( ) ; fn invalidatePreview ( ) ; fn getPrintTaskOptionValue ( ) ; fn endPrint ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IPrintManagerTemplatePrinterVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IPrintManagerTemplatePrinterImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IPrintManagerTemplatePrinterVtbl < > { unsafe extern "system" fn startPrint < Impl : IPrintManagerTemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn drawPreviewPage < Impl : IPrintManagerTemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pelemdisp : :: windows :: core :: RawPtr , npage : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn setPageCount < Impl : IPrintManagerTemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , npage : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn invalidatePreview < Impl : IPrintManagerTemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getPrintTaskOptionValue < Impl : IPrintManagerTemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrkey : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pvarin : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn endPrint < Impl : IPrintManagerTemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , startPrint : startPrint :: < Impl , IMPL_OFFSET > , drawPreviewPage : drawPreviewPage :: < Impl , IMPL_OFFSET > , setPageCount : setPageCount :: < Impl , IMPL_OFFSET > , invalidatePreview : invalidatePreview :: < Impl , IMPL_OFFSET > , getPrintTaskOptionValue : getPrintTaskOptionValue :: < Impl , IMPL_OFFSET > , endPrint : endPrint :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IPrintManagerTemplatePrinter < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IPrintManagerTemplatePrinter2Impl < > : Sized + IPrintManagerTemplatePrinterImpl + IDispatchImpl where { fn showHeaderFooter ( ) ; fn shrinkToFit ( ) ; fn percentScale ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IPrintManagerTemplatePrinter2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IPrintManagerTemplatePrinter2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IPrintManagerTemplatePrinter2Vtbl < > { unsafe extern "system" fn showHeaderFooter < Impl : IPrintManagerTemplatePrinter2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn shrinkToFit < Impl : IPrintManagerTemplatePrinter2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn percentScale < Impl : IPrintManagerTemplatePrinter2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , showHeaderFooter : showHeaderFooter :: < Impl , IMPL_OFFSET > , shrinkToFit : shrinkToFit :: < Impl , IMPL_OFFSET > , percentScale : percentScale :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IPrintManagerTemplatePrinter2 < > as :: windows :: core :: Interface > :: IID } } pub trait IPrintTaskRequestFactoryImpl < > : Sized where { fn CreatePrintTaskRequest ( ) ; } impl < > IPrintTaskRequestFactoryVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IPrintTaskRequestFactoryImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IPrintTaskRequestFactoryVtbl < > { unsafe extern "system" fn CreatePrintTaskRequest < Impl : IPrintTaskRequestFactoryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pprinttaskrequesthandler : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , CreatePrintTaskRequest : CreatePrintTaskRequest :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IPrintTaskRequestFactory < > as :: windows :: core :: Interface > :: IID } } pub trait IPrintTaskRequestHandlerImpl < > : Sized where { fn HandlePrintTaskRequest ( ) ; } impl < > IPrintTaskRequestHandlerVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IPrintTaskRequestHandlerImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IPrintTaskRequestHandlerVtbl < > { unsafe extern "system" fn HandlePrintTaskRequest < Impl : IPrintTaskRequestHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pprinttaskrequest : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , HandlePrintTaskRequest : HandlePrintTaskRequest :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IPrintTaskRequestHandler < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IRangeExceptionImpl < > : Sized + IDispatchImpl where { fn Setcode ( ) ; fn code ( ) ; fn message ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IRangeExceptionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IRangeExceptionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IRangeExceptionVtbl < > { unsafe extern "system" fn Setcode < Impl : IRangeExceptionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn code < Impl : IRangeExceptionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn message < Impl : IRangeExceptionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setcode : Setcode :: < Impl , IMPL_OFFSET > , code : code :: < Impl , IMPL_OFFSET > , message : message :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IRangeException < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IRulesAppliedImpl < > : Sized + IDispatchImpl where { fn element ( ) ; fn inlineStyles ( ) ; fn appliedRules ( ) ; fn propertyIsInline ( ) ; fn propertyIsInheritable ( ) ; fn hasInheritableProperty ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IRulesAppliedVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IRulesAppliedImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IRulesAppliedVtbl < > { unsafe extern "system" fn element < Impl : IRulesAppliedImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn inlineStyles < Impl : IRulesAppliedImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn appliedRules < Impl : IRulesAppliedImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn propertyIsInline < Impl : IRulesAppliedImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , name : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn propertyIsInheritable < Impl : IRulesAppliedImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , name : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn hasInheritableProperty < Impl : IRulesAppliedImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , element : element :: < Impl , IMPL_OFFSET > , inlineStyles : inlineStyles :: < Impl , IMPL_OFFSET > , appliedRules : appliedRules :: < Impl , IMPL_OFFSET > , propertyIsInline : propertyIsInline :: < Impl , IMPL_OFFSET > , propertyIsInheritable : propertyIsInheritable :: < Impl , IMPL_OFFSET > , hasInheritableProperty : hasInheritableProperty :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IRulesApplied < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IRulesAppliedCollectionImpl < > : Sized + IDispatchImpl where { fn item ( ) ; fn length ( ) ; fn element ( ) ; fn propertyInheritedFrom ( ) ; fn propertyCount ( ) ; fn property ( ) ; fn propertyInheritedTrace ( ) ; fn propertyInheritedTraceLength ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IRulesAppliedCollectionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IRulesAppliedCollectionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IRulesAppliedCollectionVtbl < > { unsafe extern "system" fn item < Impl : IRulesAppliedCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , pprulesapplied : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn length < Impl : IRulesAppliedCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn element < Impl : IRulesAppliedCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn propertyInheritedFrom < Impl : IRulesAppliedCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , name : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pprulesapplied : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn propertyCount < Impl : IRulesAppliedCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn property < Impl : IRulesAppliedCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , pbstrproperty : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn propertyInheritedTrace < Impl : IRulesAppliedCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , name : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , index : i32 , pprulesapplied : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn propertyInheritedTraceLength < Impl : IRulesAppliedCollectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , name : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , plength : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , item : item :: < Impl , IMPL_OFFSET > , length : length :: < Impl , IMPL_OFFSET > , element : element :: < Impl , IMPL_OFFSET > , propertyInheritedFrom : propertyInheritedFrom :: < Impl , IMPL_OFFSET > , propertyCount : propertyCount :: < Impl , IMPL_OFFSET > , property : property :: < Impl , IMPL_OFFSET > , propertyInheritedTrace : propertyInheritedTrace :: < Impl , IMPL_OFFSET > , propertyInheritedTraceLength : propertyInheritedTraceLength :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IRulesAppliedCollection < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGAElementImpl < > : Sized + IDispatchImpl where { fn putref_target ( ) ; fn target ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGAElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGAElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGAElementVtbl < > { unsafe extern "system" fn putref_target < Impl : ISVGAElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn target < Impl : ISVGAElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , putref_target : putref_target :: < Impl , IMPL_OFFSET > , target : target :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGAElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGAngleImpl < > : Sized + IDispatchImpl where { fn SetunitType ( ) ; fn unitType ( ) ; fn Setvalue ( ) ; fn value ( ) ; fn SetvalueInSpecifiedUnits ( ) ; fn valueInSpecifiedUnits ( ) ; fn SetvalueAsString ( ) ; fn valueAsString ( ) ; fn newValueSpecifiedUnits ( ) ; fn convertToSpecifiedUnits ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGAngleVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGAngleImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGAngleVtbl < > { unsafe extern "system" fn SetunitType < Impl : ISVGAngleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn unitType < Impl : ISVGAngleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setvalue < Impl : ISVGAngleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn value < Impl : ISVGAngleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetvalueInSpecifiedUnits < Impl : ISVGAngleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn valueInSpecifiedUnits < Impl : ISVGAngleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetvalueAsString < Impl : ISVGAngleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn valueAsString < Impl : ISVGAngleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn newValueSpecifiedUnits < Impl : ISVGAngleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , unittype : i16 , valueinspecifiedunits : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn convertToSpecifiedUnits < Impl : ISVGAngleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , unittype : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetunitType : SetunitType :: < Impl , IMPL_OFFSET > , unitType : unitType :: < Impl , IMPL_OFFSET > , Setvalue : Setvalue :: < Impl , IMPL_OFFSET > , value : value :: < Impl , IMPL_OFFSET > , SetvalueInSpecifiedUnits : SetvalueInSpecifiedUnits :: < Impl , IMPL_OFFSET > , valueInSpecifiedUnits : valueInSpecifiedUnits :: < Impl , IMPL_OFFSET > , SetvalueAsString : SetvalueAsString :: < Impl , IMPL_OFFSET > , valueAsString : valueAsString :: < Impl , IMPL_OFFSET > , newValueSpecifiedUnits : newValueSpecifiedUnits :: < Impl , IMPL_OFFSET > , convertToSpecifiedUnits : convertToSpecifiedUnits :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGAngle < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGAnimatedAngleImpl < > : Sized + IDispatchImpl where { fn putref_baseVal ( ) ; fn baseVal ( ) ; fn putref_animVal ( ) ; fn animVal ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGAnimatedAngleVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGAnimatedAngleImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGAnimatedAngleVtbl < > { unsafe extern "system" fn putref_baseVal < Impl : ISVGAnimatedAngleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn baseVal < Impl : ISVGAnimatedAngleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_animVal < Impl : ISVGAnimatedAngleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn animVal < Impl : ISVGAnimatedAngleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , putref_baseVal : putref_baseVal :: < Impl , IMPL_OFFSET > , baseVal : baseVal :: < Impl , IMPL_OFFSET > , putref_animVal : putref_animVal :: < Impl , IMPL_OFFSET > , animVal : animVal :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGAnimatedAngle < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGAnimatedBooleanImpl < > : Sized + IDispatchImpl where { fn SetbaseVal ( ) ; fn baseVal ( ) ; fn SetanimVal ( ) ; fn animVal ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGAnimatedBooleanVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGAnimatedBooleanImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGAnimatedBooleanVtbl < > { unsafe extern "system" fn SetbaseVal < Impl : ISVGAnimatedBooleanImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn baseVal < Impl : ISVGAnimatedBooleanImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetanimVal < Impl : ISVGAnimatedBooleanImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn animVal < Impl : ISVGAnimatedBooleanImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetbaseVal : SetbaseVal :: < Impl , IMPL_OFFSET > , baseVal : baseVal :: < Impl , IMPL_OFFSET > , SetanimVal : SetanimVal :: < Impl , IMPL_OFFSET > , animVal : animVal :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGAnimatedBoolean < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGAnimatedEnumerationImpl < > : Sized + IDispatchImpl where { fn SetbaseVal ( ) ; fn baseVal ( ) ; fn SetanimVal ( ) ; fn animVal ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGAnimatedEnumerationVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGAnimatedEnumerationImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGAnimatedEnumerationVtbl < > { unsafe extern "system" fn SetbaseVal < Impl : ISVGAnimatedEnumerationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : u16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn baseVal < Impl : ISVGAnimatedEnumerationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut u16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetanimVal < Impl : ISVGAnimatedEnumerationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : u16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn animVal < Impl : ISVGAnimatedEnumerationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut u16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetbaseVal : SetbaseVal :: < Impl , IMPL_OFFSET > , baseVal : baseVal :: < Impl , IMPL_OFFSET > , SetanimVal : SetanimVal :: < Impl , IMPL_OFFSET > , animVal : animVal :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGAnimatedEnumeration < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGAnimatedIntegerImpl < > : Sized + IDispatchImpl where { fn SetbaseVal ( ) ; fn baseVal ( ) ; fn SetanimVal ( ) ; fn animVal ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGAnimatedIntegerVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGAnimatedIntegerImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGAnimatedIntegerVtbl < > { unsafe extern "system" fn SetbaseVal < Impl : ISVGAnimatedIntegerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn baseVal < Impl : ISVGAnimatedIntegerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetanimVal < Impl : ISVGAnimatedIntegerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn animVal < Impl : ISVGAnimatedIntegerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetbaseVal : SetbaseVal :: < Impl , IMPL_OFFSET > , baseVal : baseVal :: < Impl , IMPL_OFFSET > , SetanimVal : SetanimVal :: < Impl , IMPL_OFFSET > , animVal : animVal :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGAnimatedInteger < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGAnimatedLengthImpl < > : Sized + IDispatchImpl where { fn putref_baseVal ( ) ; fn baseVal ( ) ; fn putref_animVal ( ) ; fn animVal ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGAnimatedLengthVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGAnimatedLengthImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGAnimatedLengthVtbl < > { unsafe extern "system" fn putref_baseVal < Impl : ISVGAnimatedLengthImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn baseVal < Impl : ISVGAnimatedLengthImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_animVal < Impl : ISVGAnimatedLengthImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn animVal < Impl : ISVGAnimatedLengthImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , putref_baseVal : putref_baseVal :: < Impl , IMPL_OFFSET > , baseVal : baseVal :: < Impl , IMPL_OFFSET > , putref_animVal : putref_animVal :: < Impl , IMPL_OFFSET > , animVal : animVal :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGAnimatedLength < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGAnimatedLengthListImpl < > : Sized + IDispatchImpl where { fn putref_baseVal ( ) ; fn baseVal ( ) ; fn putref_animVal ( ) ; fn animVal ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGAnimatedLengthListVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGAnimatedLengthListImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGAnimatedLengthListVtbl < > { unsafe extern "system" fn putref_baseVal < Impl : ISVGAnimatedLengthListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn baseVal < Impl : ISVGAnimatedLengthListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_animVal < Impl : ISVGAnimatedLengthListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn animVal < Impl : ISVGAnimatedLengthListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , putref_baseVal : putref_baseVal :: < Impl , IMPL_OFFSET > , baseVal : baseVal :: < Impl , IMPL_OFFSET > , putref_animVal : putref_animVal :: < Impl , IMPL_OFFSET > , animVal : animVal :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGAnimatedLengthList < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGAnimatedNumberImpl < > : Sized + IDispatchImpl where { fn SetbaseVal ( ) ; fn baseVal ( ) ; fn SetanimVal ( ) ; fn animVal ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGAnimatedNumberVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGAnimatedNumberImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGAnimatedNumberVtbl < > { unsafe extern "system" fn SetbaseVal < Impl : ISVGAnimatedNumberImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn baseVal < Impl : ISVGAnimatedNumberImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetanimVal < Impl : ISVGAnimatedNumberImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn animVal < Impl : ISVGAnimatedNumberImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetbaseVal : SetbaseVal :: < Impl , IMPL_OFFSET > , baseVal : baseVal :: < Impl , IMPL_OFFSET > , SetanimVal : SetanimVal :: < Impl , IMPL_OFFSET > , animVal : animVal :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGAnimatedNumber < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGAnimatedNumberListImpl < > : Sized + IDispatchImpl where { fn putref_baseVal ( ) ; fn baseVal ( ) ; fn putref_animVal ( ) ; fn animVal ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGAnimatedNumberListVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGAnimatedNumberListImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGAnimatedNumberListVtbl < > { unsafe extern "system" fn putref_baseVal < Impl : ISVGAnimatedNumberListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn baseVal < Impl : ISVGAnimatedNumberListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_animVal < Impl : ISVGAnimatedNumberListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn animVal < Impl : ISVGAnimatedNumberListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , putref_baseVal : putref_baseVal :: < Impl , IMPL_OFFSET > , baseVal : baseVal :: < Impl , IMPL_OFFSET > , putref_animVal : putref_animVal :: < Impl , IMPL_OFFSET > , animVal : animVal :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGAnimatedNumberList < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGAnimatedPathDataImpl < > : Sized + IDispatchImpl where { fn putref_pathSegList ( ) ; fn pathSegList ( ) ; fn putref_normalizedPathSegList ( ) ; fn normalizedPathSegList ( ) ; fn putref_animatedPathSegList ( ) ; fn animatedPathSegList ( ) ; fn putref_animatedNormalizedPathSegList ( ) ; fn animatedNormalizedPathSegList ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGAnimatedPathDataVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGAnimatedPathDataImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGAnimatedPathDataVtbl < > { unsafe extern "system" fn putref_pathSegList < Impl : ISVGAnimatedPathDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn pathSegList < Impl : ISVGAnimatedPathDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_normalizedPathSegList < Impl : ISVGAnimatedPathDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn normalizedPathSegList < Impl : ISVGAnimatedPathDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_animatedPathSegList < Impl : ISVGAnimatedPathDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn animatedPathSegList < Impl : ISVGAnimatedPathDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_animatedNormalizedPathSegList < Impl : ISVGAnimatedPathDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn animatedNormalizedPathSegList < Impl : ISVGAnimatedPathDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , putref_pathSegList : putref_pathSegList :: < Impl , IMPL_OFFSET > , pathSegList : pathSegList :: < Impl , IMPL_OFFSET > , putref_normalizedPathSegList : putref_normalizedPathSegList :: < Impl , IMPL_OFFSET > , normalizedPathSegList : normalizedPathSegList :: < Impl , IMPL_OFFSET > , putref_animatedPathSegList : putref_animatedPathSegList :: < Impl , IMPL_OFFSET > , animatedPathSegList : animatedPathSegList :: < Impl , IMPL_OFFSET > , putref_animatedNormalizedPathSegList : putref_animatedNormalizedPathSegList :: < Impl , IMPL_OFFSET > , animatedNormalizedPathSegList : animatedNormalizedPathSegList :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGAnimatedPathData < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGAnimatedPointsImpl < > : Sized + IDispatchImpl where { fn putref_points ( ) ; fn points ( ) ; fn putref_animatedPoints ( ) ; fn animatedPoints ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGAnimatedPointsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGAnimatedPointsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGAnimatedPointsVtbl < > { unsafe extern "system" fn putref_points < Impl : ISVGAnimatedPointsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn points < Impl : ISVGAnimatedPointsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_animatedPoints < Impl : ISVGAnimatedPointsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn animatedPoints < Impl : ISVGAnimatedPointsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , putref_points : putref_points :: < Impl , IMPL_OFFSET > , points : points :: < Impl , IMPL_OFFSET > , putref_animatedPoints : putref_animatedPoints :: < Impl , IMPL_OFFSET > , animatedPoints : animatedPoints :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGAnimatedPoints < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGAnimatedPreserveAspectRatioImpl < > : Sized + IDispatchImpl where { fn putref_baseVal ( ) ; fn baseVal ( ) ; fn putref_animVal ( ) ; fn animVal ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGAnimatedPreserveAspectRatioVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGAnimatedPreserveAspectRatioImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGAnimatedPreserveAspectRatioVtbl < > { unsafe extern "system" fn putref_baseVal < Impl : ISVGAnimatedPreserveAspectRatioImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn baseVal < Impl : ISVGAnimatedPreserveAspectRatioImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_animVal < Impl : ISVGAnimatedPreserveAspectRatioImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn animVal < Impl : ISVGAnimatedPreserveAspectRatioImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , putref_baseVal : putref_baseVal :: < Impl , IMPL_OFFSET > , baseVal : baseVal :: < Impl , IMPL_OFFSET > , putref_animVal : putref_animVal :: < Impl , IMPL_OFFSET > , animVal : animVal :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGAnimatedPreserveAspectRatio < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGAnimatedRectImpl < > : Sized + IDispatchImpl where { fn putref_baseVal ( ) ; fn baseVal ( ) ; fn putref_animVal ( ) ; fn animVal ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGAnimatedRectVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGAnimatedRectImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGAnimatedRectVtbl < > { unsafe extern "system" fn putref_baseVal < Impl : ISVGAnimatedRectImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn baseVal < Impl : ISVGAnimatedRectImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_animVal < Impl : ISVGAnimatedRectImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn animVal < Impl : ISVGAnimatedRectImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , putref_baseVal : putref_baseVal :: < Impl , IMPL_OFFSET > , baseVal : baseVal :: < Impl , IMPL_OFFSET > , putref_animVal : putref_animVal :: < Impl , IMPL_OFFSET > , animVal : animVal :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGAnimatedRect < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGAnimatedStringImpl < > : Sized + IDispatchImpl where { fn SetbaseVal ( ) ; fn baseVal ( ) ; fn animVal ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGAnimatedStringVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGAnimatedStringImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGAnimatedStringVtbl < > { unsafe extern "system" fn SetbaseVal < Impl : ISVGAnimatedStringImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn baseVal < Impl : ISVGAnimatedStringImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn animVal < Impl : ISVGAnimatedStringImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetbaseVal : SetbaseVal :: < Impl , IMPL_OFFSET > , baseVal : baseVal :: < Impl , IMPL_OFFSET > , animVal : animVal :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGAnimatedString < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGAnimatedTransformListImpl < > : Sized + IDispatchImpl where { fn putref_baseVal ( ) ; fn baseVal ( ) ; fn putref_animVal ( ) ; fn animVal ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGAnimatedTransformListVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGAnimatedTransformListImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGAnimatedTransformListVtbl < > { unsafe extern "system" fn putref_baseVal < Impl : ISVGAnimatedTransformListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn baseVal < Impl : ISVGAnimatedTransformListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_animVal < Impl : ISVGAnimatedTransformListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn animVal < Impl : ISVGAnimatedTransformListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , putref_baseVal : putref_baseVal :: < Impl , IMPL_OFFSET > , baseVal : baseVal :: < Impl , IMPL_OFFSET > , putref_animVal : putref_animVal :: < Impl , IMPL_OFFSET > , animVal : animVal :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGAnimatedTransformList < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGCircleElementImpl < > : Sized + IDispatchImpl where { fn putref_cx ( ) ; fn cx ( ) ; fn putref_cy ( ) ; fn cy ( ) ; fn putref_r ( ) ; fn r ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGCircleElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGCircleElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGCircleElementVtbl < > { unsafe extern "system" fn putref_cx < Impl : ISVGCircleElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn cx < Impl : ISVGCircleElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_cy < Impl : ISVGCircleElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn cy < Impl : ISVGCircleElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_r < Impl : ISVGCircleElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn r < Impl : ISVGCircleElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , putref_cx : putref_cx :: < Impl , IMPL_OFFSET > , cx : cx :: < Impl , IMPL_OFFSET > , putref_cy : putref_cy :: < Impl , IMPL_OFFSET > , cy : cy :: < Impl , IMPL_OFFSET > , putref_r : putref_r :: < Impl , IMPL_OFFSET > , r : r :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGCircleElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGClipPathElementImpl < > : Sized + IDispatchImpl where { fn putref_clipPathUnits ( ) ; fn clipPathUnits ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGClipPathElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGClipPathElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGClipPathElementVtbl < > { unsafe extern "system" fn putref_clipPathUnits < Impl : ISVGClipPathElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clipPathUnits < Impl : ISVGClipPathElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , putref_clipPathUnits : putref_clipPathUnits :: < Impl , IMPL_OFFSET > , clipPathUnits : clipPathUnits :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGClipPathElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGDefsElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGDefsElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGDefsElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGDefsElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGDefsElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGDescElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGDescElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGDescElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGDescElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGDescElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGDocumentImpl < > : Sized + IDispatchImpl where { fn rootElement ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGDocumentVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGDocumentImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGDocumentVtbl < > { unsafe extern "system" fn rootElement < Impl : ISVGDocumentImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , rootElement : rootElement :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGDocument < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGElementImpl < > : Sized + IDispatchImpl where { fn Setxmlbase ( ) ; fn xmlbase ( ) ; fn putref_ownerSVGElement ( ) ; fn ownerSVGElement ( ) ; fn putref_viewportElement ( ) ; fn viewportElement ( ) ; fn putref_focusable ( ) ; fn focusable ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGElementVtbl < > { unsafe extern "system" fn Setxmlbase < Impl : ISVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn xmlbase < Impl : ISVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_ownerSVGElement < Impl : ISVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ownerSVGElement < Impl : ISVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_viewportElement < Impl : ISVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn viewportElement < Impl : ISVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_focusable < Impl : ISVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn focusable < Impl : ISVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setxmlbase : Setxmlbase :: < Impl , IMPL_OFFSET > , xmlbase : xmlbase :: < Impl , IMPL_OFFSET > , putref_ownerSVGElement : putref_ownerSVGElement :: < Impl , IMPL_OFFSET > , ownerSVGElement : ownerSVGElement :: < Impl , IMPL_OFFSET > , putref_viewportElement : putref_viewportElement :: < Impl , IMPL_OFFSET > , viewportElement : viewportElement :: < Impl , IMPL_OFFSET > , putref_focusable : putref_focusable :: < Impl , IMPL_OFFSET > , focusable : focusable :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGElementInstanceImpl < > : Sized + IDispatchImpl where { fn correspondingElement ( ) ; fn correspondingUseElement ( ) ; fn parentNode ( ) ; fn childNodes ( ) ; fn firstChild ( ) ; fn lastChild ( ) ; fn previousSibling ( ) ; fn nextSibling ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGElementInstanceVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGElementInstanceImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGElementInstanceVtbl < > { unsafe extern "system" fn correspondingElement < Impl : ISVGElementInstanceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn correspondingUseElement < Impl : ISVGElementInstanceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn parentNode < Impl : ISVGElementInstanceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn childNodes < Impl : ISVGElementInstanceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn firstChild < Impl : ISVGElementInstanceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn lastChild < Impl : ISVGElementInstanceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn previousSibling < Impl : ISVGElementInstanceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn nextSibling < Impl : ISVGElementInstanceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , correspondingElement : correspondingElement :: < Impl , IMPL_OFFSET > , correspondingUseElement : correspondingUseElement :: < Impl , IMPL_OFFSET > , parentNode : parentNode :: < Impl , IMPL_OFFSET > , childNodes : childNodes :: < Impl , IMPL_OFFSET > , firstChild : firstChild :: < Impl , IMPL_OFFSET > , lastChild : lastChild :: < Impl , IMPL_OFFSET > , previousSibling : previousSibling :: < Impl , IMPL_OFFSET > , nextSibling : nextSibling :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGElementInstance < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGElementInstanceListImpl < > : Sized + IDispatchImpl where { fn length ( ) ; fn item ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGElementInstanceListVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGElementInstanceListImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGElementInstanceListVtbl < > { unsafe extern "system" fn length < Impl : ISVGElementInstanceListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn item < Impl : ISVGElementInstanceListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , length : length :: < Impl , IMPL_OFFSET > , item : item :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGElementInstanceList < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGEllipseElementImpl < > : Sized + IDispatchImpl where { fn putref_cx ( ) ; fn cx ( ) ; fn putref_cy ( ) ; fn cy ( ) ; fn putref_rx ( ) ; fn rx ( ) ; fn putref_ry ( ) ; fn ry ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGEllipseElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGEllipseElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGEllipseElementVtbl < > { unsafe extern "system" fn putref_cx < Impl : ISVGEllipseElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn cx < Impl : ISVGEllipseElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_cy < Impl : ISVGEllipseElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn cy < Impl : ISVGEllipseElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_rx < Impl : ISVGEllipseElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn rx < Impl : ISVGEllipseElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_ry < Impl : ISVGEllipseElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ry < Impl : ISVGEllipseElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , putref_cx : putref_cx :: < Impl , IMPL_OFFSET > , cx : cx :: < Impl , IMPL_OFFSET > , putref_cy : putref_cy :: < Impl , IMPL_OFFSET > , cy : cy :: < Impl , IMPL_OFFSET > , putref_rx : putref_rx :: < Impl , IMPL_OFFSET > , rx : rx :: < Impl , IMPL_OFFSET > , putref_ry : putref_ry :: < Impl , IMPL_OFFSET > , ry : ry :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGEllipseElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGExceptionImpl < > : Sized + IDispatchImpl where { fn Setcode ( ) ; fn code ( ) ; fn message ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGExceptionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGExceptionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGExceptionVtbl < > { unsafe extern "system" fn Setcode < Impl : ISVGExceptionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn code < Impl : ISVGExceptionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn message < Impl : ISVGExceptionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setcode : Setcode :: < Impl , IMPL_OFFSET > , code : code :: < Impl , IMPL_OFFSET > , message : message :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGException < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGExternalResourcesRequiredImpl < > : Sized + IDispatchImpl where { fn externalResourcesRequired ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGExternalResourcesRequiredVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGExternalResourcesRequiredImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGExternalResourcesRequiredVtbl < > { unsafe extern "system" fn externalResourcesRequired < Impl : ISVGExternalResourcesRequiredImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , externalResourcesRequired : externalResourcesRequired :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGExternalResourcesRequired < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGFitToViewBoxImpl < > : Sized + IDispatchImpl where { fn viewBox ( ) ; fn putref_preserveAspectRatio ( ) ; fn preserveAspectRatio ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGFitToViewBoxVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGFitToViewBoxImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGFitToViewBoxVtbl < > { unsafe extern "system" fn viewBox < Impl : ISVGFitToViewBoxImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_preserveAspectRatio < Impl : ISVGFitToViewBoxImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn preserveAspectRatio < Impl : ISVGFitToViewBoxImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , viewBox : viewBox :: < Impl , IMPL_OFFSET > , putref_preserveAspectRatio : putref_preserveAspectRatio :: < Impl , IMPL_OFFSET > , preserveAspectRatio : preserveAspectRatio :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGFitToViewBox < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGGElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGGElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGGElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGGElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGGElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGGradientElementImpl < > : Sized + IDispatchImpl where { fn putref_gradientUnits ( ) ; fn gradientUnits ( ) ; fn putref_gradientTransform ( ) ; fn gradientTransform ( ) ; fn putref_spreadMethod ( ) ; fn spreadMethod ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGGradientElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGGradientElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGGradientElementVtbl < > { unsafe extern "system" fn putref_gradientUnits < Impl : ISVGGradientElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn gradientUnits < Impl : ISVGGradientElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_gradientTransform < Impl : ISVGGradientElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn gradientTransform < Impl : ISVGGradientElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_spreadMethod < Impl : ISVGGradientElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn spreadMethod < Impl : ISVGGradientElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , putref_gradientUnits : putref_gradientUnits :: < Impl , IMPL_OFFSET > , gradientUnits : gradientUnits :: < Impl , IMPL_OFFSET > , putref_gradientTransform : putref_gradientTransform :: < Impl , IMPL_OFFSET > , gradientTransform : gradientTransform :: < Impl , IMPL_OFFSET > , putref_spreadMethod : putref_spreadMethod :: < Impl , IMPL_OFFSET > , spreadMethod : spreadMethod :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGGradientElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGImageElementImpl < > : Sized + IDispatchImpl where { fn putref_x ( ) ; fn x ( ) ; fn putref_y ( ) ; fn y ( ) ; fn putref_width ( ) ; fn width ( ) ; fn putref_height ( ) ; fn height ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGImageElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGImageElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGImageElementVtbl < > { unsafe extern "system" fn putref_x < Impl : ISVGImageElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn x < Impl : ISVGImageElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_y < Impl : ISVGImageElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn y < Impl : ISVGImageElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_width < Impl : ISVGImageElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn width < Impl : ISVGImageElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_height < Impl : ISVGImageElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn height < Impl : ISVGImageElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , putref_x : putref_x :: < Impl , IMPL_OFFSET > , x : x :: < Impl , IMPL_OFFSET > , putref_y : putref_y :: < Impl , IMPL_OFFSET > , y : y :: < Impl , IMPL_OFFSET > , putref_width : putref_width :: < Impl , IMPL_OFFSET > , width : width :: < Impl , IMPL_OFFSET > , putref_height : putref_height :: < Impl , IMPL_OFFSET > , height : height :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGImageElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGLangSpaceImpl < > : Sized + IDispatchImpl where { fn Setxmllang ( ) ; fn xmllang ( ) ; fn Setxmlspace ( ) ; fn xmlspace ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGLangSpaceVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGLangSpaceImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGLangSpaceVtbl < > { unsafe extern "system" fn Setxmllang < Impl : ISVGLangSpaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn xmllang < Impl : ISVGLangSpaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setxmlspace < Impl : ISVGLangSpaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn xmlspace < Impl : ISVGLangSpaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setxmllang : Setxmllang :: < Impl , IMPL_OFFSET > , xmllang : xmllang :: < Impl , IMPL_OFFSET > , Setxmlspace : Setxmlspace :: < Impl , IMPL_OFFSET > , xmlspace : xmlspace :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGLangSpace < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGLengthImpl < > : Sized + IDispatchImpl where { fn SetunitType ( ) ; fn unitType ( ) ; fn Setvalue ( ) ; fn value ( ) ; fn SetvalueInSpecifiedUnits ( ) ; fn valueInSpecifiedUnits ( ) ; fn SetvalueAsString ( ) ; fn valueAsString ( ) ; fn newValueSpecifiedUnits ( ) ; fn convertToSpecifiedUnits ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGLengthVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGLengthImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGLengthVtbl < > { unsafe extern "system" fn SetunitType < Impl : ISVGLengthImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn unitType < Impl : ISVGLengthImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setvalue < Impl : ISVGLengthImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn value < Impl : ISVGLengthImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetvalueInSpecifiedUnits < Impl : ISVGLengthImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn valueInSpecifiedUnits < Impl : ISVGLengthImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetvalueAsString < Impl : ISVGLengthImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn valueAsString < Impl : ISVGLengthImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn newValueSpecifiedUnits < Impl : ISVGLengthImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , unittype : i16 , valueinspecifiedunits : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn convertToSpecifiedUnits < Impl : ISVGLengthImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , unittype : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetunitType : SetunitType :: < Impl , IMPL_OFFSET > , unitType : unitType :: < Impl , IMPL_OFFSET > , Setvalue : Setvalue :: < Impl , IMPL_OFFSET > , value : value :: < Impl , IMPL_OFFSET > , SetvalueInSpecifiedUnits : SetvalueInSpecifiedUnits :: < Impl , IMPL_OFFSET > , valueInSpecifiedUnits : valueInSpecifiedUnits :: < Impl , IMPL_OFFSET > , SetvalueAsString : SetvalueAsString :: < Impl , IMPL_OFFSET > , valueAsString : valueAsString :: < Impl , IMPL_OFFSET > , newValueSpecifiedUnits : newValueSpecifiedUnits :: < Impl , IMPL_OFFSET > , convertToSpecifiedUnits : convertToSpecifiedUnits :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGLength < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGLengthListImpl < > : Sized + IDispatchImpl where { fn SetnumberOfItems ( ) ; fn numberOfItems ( ) ; fn clear ( ) ; fn initialize ( ) ; fn getItem ( ) ; fn insertItemBefore ( ) ; fn replaceItem ( ) ; fn removeItem ( ) ; fn appendItem ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGLengthListVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGLengthListImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGLengthListVtbl < > { unsafe extern "system" fn SetnumberOfItems < Impl : ISVGLengthListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn numberOfItems < Impl : ISVGLengthListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clear < Impl : ISVGLengthListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn initialize < Impl : ISVGLengthListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , newitem : :: windows :: core :: RawPtr , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getItem < Impl : ISVGLengthListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn insertItemBefore < Impl : ISVGLengthListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , newitem : :: windows :: core :: RawPtr , index : i32 , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn replaceItem < Impl : ISVGLengthListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , newitem : :: windows :: core :: RawPtr , index : i32 , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn removeItem < Impl : ISVGLengthListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn appendItem < Impl : ISVGLengthListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , newitem : :: windows :: core :: RawPtr , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetnumberOfItems : SetnumberOfItems :: < Impl , IMPL_OFFSET > , numberOfItems : numberOfItems :: < Impl , IMPL_OFFSET > , clear : clear :: < Impl , IMPL_OFFSET > , initialize : initialize :: < Impl , IMPL_OFFSET > , getItem : getItem :: < Impl , IMPL_OFFSET > , insertItemBefore : insertItemBefore :: < Impl , IMPL_OFFSET > , replaceItem : replaceItem :: < Impl , IMPL_OFFSET > , removeItem : removeItem :: < Impl , IMPL_OFFSET > , appendItem : appendItem :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGLengthList < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGLineElementImpl < > : Sized + IDispatchImpl where { fn putref_x1 ( ) ; fn x1 ( ) ; fn putref_y1 ( ) ; fn y1 ( ) ; fn putref_x2 ( ) ; fn x2 ( ) ; fn putref_y2 ( ) ; fn y2 ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGLineElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGLineElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGLineElementVtbl < > { unsafe extern "system" fn putref_x1 < Impl : ISVGLineElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn x1 < Impl : ISVGLineElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_y1 < Impl : ISVGLineElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn y1 < Impl : ISVGLineElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_x2 < Impl : ISVGLineElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn x2 < Impl : ISVGLineElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_y2 < Impl : ISVGLineElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn y2 < Impl : ISVGLineElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , putref_x1 : putref_x1 :: < Impl , IMPL_OFFSET > , x1 : x1 :: < Impl , IMPL_OFFSET > , putref_y1 : putref_y1 :: < Impl , IMPL_OFFSET > , y1 : y1 :: < Impl , IMPL_OFFSET > , putref_x2 : putref_x2 :: < Impl , IMPL_OFFSET > , x2 : x2 :: < Impl , IMPL_OFFSET > , putref_y2 : putref_y2 :: < Impl , IMPL_OFFSET > , y2 : y2 :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGLineElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGLinearGradientElementImpl < > : Sized + IDispatchImpl where { fn putref_x1 ( ) ; fn x1 ( ) ; fn putref_y1 ( ) ; fn y1 ( ) ; fn putref_x2 ( ) ; fn x2 ( ) ; fn putref_y2 ( ) ; fn y2 ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGLinearGradientElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGLinearGradientElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGLinearGradientElementVtbl < > { unsafe extern "system" fn putref_x1 < Impl : ISVGLinearGradientElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn x1 < Impl : ISVGLinearGradientElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_y1 < Impl : ISVGLinearGradientElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn y1 < Impl : ISVGLinearGradientElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_x2 < Impl : ISVGLinearGradientElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn x2 < Impl : ISVGLinearGradientElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_y2 < Impl : ISVGLinearGradientElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn y2 < Impl : ISVGLinearGradientElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , putref_x1 : putref_x1 :: < Impl , IMPL_OFFSET > , x1 : x1 :: < Impl , IMPL_OFFSET > , putref_y1 : putref_y1 :: < Impl , IMPL_OFFSET > , y1 : y1 :: < Impl , IMPL_OFFSET > , putref_x2 : putref_x2 :: < Impl , IMPL_OFFSET > , x2 : x2 :: < Impl , IMPL_OFFSET > , putref_y2 : putref_y2 :: < Impl , IMPL_OFFSET > , y2 : y2 :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGLinearGradientElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGLocatableImpl < > : Sized + IDispatchImpl where { fn nearestViewportElement ( ) ; fn farthestViewportElement ( ) ; fn getBBox ( ) ; fn getCTM ( ) ; fn getScreenCTM ( ) ; fn getTransformToElement ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGLocatableVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGLocatableImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGLocatableVtbl < > { unsafe extern "system" fn nearestViewportElement < Impl : ISVGLocatableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn farthestViewportElement < Impl : ISVGLocatableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getBBox < Impl : ISVGLocatableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getCTM < Impl : ISVGLocatableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getScreenCTM < Impl : ISVGLocatableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getTransformToElement < Impl : ISVGLocatableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pelement : :: windows :: core :: RawPtr , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , nearestViewportElement : nearestViewportElement :: < Impl , IMPL_OFFSET > , farthestViewportElement : farthestViewportElement :: < Impl , IMPL_OFFSET > , getBBox : getBBox :: < Impl , IMPL_OFFSET > , getCTM : getCTM :: < Impl , IMPL_OFFSET > , getScreenCTM : getScreenCTM :: < Impl , IMPL_OFFSET > , getTransformToElement : getTransformToElement :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGLocatable < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGMarkerElementImpl < > : Sized + IDispatchImpl where { fn putref_refX ( ) ; fn refX ( ) ; fn putref_refY ( ) ; fn refY ( ) ; fn putref_markerUnits ( ) ; fn markerUnits ( ) ; fn putref_markerWidth ( ) ; fn markerWidth ( ) ; fn putref_markerHeight ( ) ; fn markerHeight ( ) ; fn putref_orientType ( ) ; fn orientType ( ) ; fn putref_orientAngle ( ) ; fn orientAngle ( ) ; fn setOrientToAuto ( ) ; fn setOrientToAngle ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGMarkerElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGMarkerElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGMarkerElementVtbl < > { unsafe extern "system" fn putref_refX < Impl : ISVGMarkerElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn refX < Impl : ISVGMarkerElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_refY < Impl : ISVGMarkerElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn refY < Impl : ISVGMarkerElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_markerUnits < Impl : ISVGMarkerElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn markerUnits < Impl : ISVGMarkerElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_markerWidth < Impl : ISVGMarkerElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn markerWidth < Impl : ISVGMarkerElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_markerHeight < Impl : ISVGMarkerElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn markerHeight < Impl : ISVGMarkerElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_orientType < Impl : ISVGMarkerElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn orientType < Impl : ISVGMarkerElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_orientAngle < Impl : ISVGMarkerElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn orientAngle < Impl : ISVGMarkerElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn setOrientToAuto < Impl : ISVGMarkerElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn setOrientToAngle < Impl : ISVGMarkerElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psvgangle : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , putref_refX : putref_refX :: < Impl , IMPL_OFFSET > , refX : refX :: < Impl , IMPL_OFFSET > , putref_refY : putref_refY :: < Impl , IMPL_OFFSET > , refY : refY :: < Impl , IMPL_OFFSET > , putref_markerUnits : putref_markerUnits :: < Impl , IMPL_OFFSET > , markerUnits : markerUnits :: < Impl , IMPL_OFFSET > , putref_markerWidth : putref_markerWidth :: < Impl , IMPL_OFFSET > , markerWidth : markerWidth :: < Impl , IMPL_OFFSET > , putref_markerHeight : putref_markerHeight :: < Impl , IMPL_OFFSET > , markerHeight : markerHeight :: < Impl , IMPL_OFFSET > , putref_orientType : putref_orientType :: < Impl , IMPL_OFFSET > , orientType : orientType :: < Impl , IMPL_OFFSET > , putref_orientAngle : putref_orientAngle :: < Impl , IMPL_OFFSET > , orientAngle : orientAngle :: < Impl , IMPL_OFFSET > , setOrientToAuto : setOrientToAuto :: < Impl , IMPL_OFFSET > , setOrientToAngle : setOrientToAngle :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGMarkerElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGMaskElementImpl < > : Sized + IDispatchImpl where { fn putref_maskUnits ( ) ; fn maskUnits ( ) ; fn putref_maskContentUnits ( ) ; fn maskContentUnits ( ) ; fn putref_x ( ) ; fn x ( ) ; fn putref_y ( ) ; fn y ( ) ; fn putref_width ( ) ; fn width ( ) ; fn putref_height ( ) ; fn height ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGMaskElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGMaskElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGMaskElementVtbl < > { unsafe extern "system" fn putref_maskUnits < Impl : ISVGMaskElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn maskUnits < Impl : ISVGMaskElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_maskContentUnits < Impl : ISVGMaskElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn maskContentUnits < Impl : ISVGMaskElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_x < Impl : ISVGMaskElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn x < Impl : ISVGMaskElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_y < Impl : ISVGMaskElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn y < Impl : ISVGMaskElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_width < Impl : ISVGMaskElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn width < Impl : ISVGMaskElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_height < Impl : ISVGMaskElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn height < Impl : ISVGMaskElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , putref_maskUnits : putref_maskUnits :: < Impl , IMPL_OFFSET > , maskUnits : maskUnits :: < Impl , IMPL_OFFSET > , putref_maskContentUnits : putref_maskContentUnits :: < Impl , IMPL_OFFSET > , maskContentUnits : maskContentUnits :: < Impl , IMPL_OFFSET > , putref_x : putref_x :: < Impl , IMPL_OFFSET > , x : x :: < Impl , IMPL_OFFSET > , putref_y : putref_y :: < Impl , IMPL_OFFSET > , y : y :: < Impl , IMPL_OFFSET > , putref_width : putref_width :: < Impl , IMPL_OFFSET > , width : width :: < Impl , IMPL_OFFSET > , putref_height : putref_height :: < Impl , IMPL_OFFSET > , height : height :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGMaskElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGMatrixImpl < > : Sized + IDispatchImpl where { fn Seta ( ) ; fn a ( ) ; fn Setb ( ) ; fn b ( ) ; fn Setc ( ) ; fn c ( ) ; fn Setd ( ) ; fn d ( ) ; fn Sete ( ) ; fn e ( ) ; fn Setf ( ) ; fn f ( ) ; fn multiply ( ) ; fn inverse ( ) ; fn translate ( ) ; fn scale ( ) ; fn scaleNonUniform ( ) ; fn rotate ( ) ; fn rotateFromVector ( ) ; fn flipX ( ) ; fn flipY ( ) ; fn skewX ( ) ; fn skewY ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGMatrixVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGMatrixImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGMatrixVtbl < > { unsafe extern "system" fn Seta < Impl : ISVGMatrixImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn a < Impl : ISVGMatrixImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setb < Impl : ISVGMatrixImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn b < Impl : ISVGMatrixImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setc < Impl : ISVGMatrixImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn c < Impl : ISVGMatrixImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setd < Impl : ISVGMatrixImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn d < Impl : ISVGMatrixImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Sete < Impl : ISVGMatrixImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn e < Impl : ISVGMatrixImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setf < Impl : ISVGMatrixImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn f < Impl : ISVGMatrixImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn multiply < Impl : ISVGMatrixImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , secondmatrix : :: windows :: core :: RawPtr , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn inverse < Impl : ISVGMatrixImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn translate < Impl : ISVGMatrixImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , x : f32 , y : f32 , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scale < Impl : ISVGMatrixImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , scalefactor : f32 , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scaleNonUniform < Impl : ISVGMatrixImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , scalefactorx : f32 , scalefactory : f32 , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn rotate < Impl : ISVGMatrixImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , angle : f32 , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn rotateFromVector < Impl : ISVGMatrixImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , x : f32 , y : f32 , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn flipX < Impl : ISVGMatrixImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn flipY < Impl : ISVGMatrixImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn skewX < Impl : ISVGMatrixImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , angle : f32 , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn skewY < Impl : ISVGMatrixImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , angle : f32 , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Seta : Seta :: < Impl , IMPL_OFFSET > , a : a :: < Impl , IMPL_OFFSET > , Setb : Setb :: < Impl , IMPL_OFFSET > , b : b :: < Impl , IMPL_OFFSET > , Setc : Setc :: < Impl , IMPL_OFFSET > , c : c :: < Impl , IMPL_OFFSET > , Setd : Setd :: < Impl , IMPL_OFFSET > , d : d :: < Impl , IMPL_OFFSET > , Sete : Sete :: < Impl , IMPL_OFFSET > , e : e :: < Impl , IMPL_OFFSET > , Setf : Setf :: < Impl , IMPL_OFFSET > , f : f :: < Impl , IMPL_OFFSET > , multiply : multiply :: < Impl , IMPL_OFFSET > , inverse : inverse :: < Impl , IMPL_OFFSET > , translate : translate :: < Impl , IMPL_OFFSET > , scale : scale :: < Impl , IMPL_OFFSET > , scaleNonUniform : scaleNonUniform :: < Impl , IMPL_OFFSET > , rotate : rotate :: < Impl , IMPL_OFFSET > , rotateFromVector : rotateFromVector :: < Impl , IMPL_OFFSET > , flipX : flipX :: < Impl , IMPL_OFFSET > , flipY : flipY :: < Impl , IMPL_OFFSET > , skewX : skewX :: < Impl , IMPL_OFFSET > , skewY : skewY :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGMatrix < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGMetadataElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGMetadataElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGMetadataElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGMetadataElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGMetadataElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGNumberImpl < > : Sized + IDispatchImpl where { fn Setvalue ( ) ; fn value ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGNumberVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGNumberImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGNumberVtbl < > { unsafe extern "system" fn Setvalue < Impl : ISVGNumberImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn value < Impl : ISVGNumberImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setvalue : Setvalue :: < Impl , IMPL_OFFSET > , value : value :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGNumber < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGNumberListImpl < > : Sized + IDispatchImpl where { fn SetnumberOfItems ( ) ; fn numberOfItems ( ) ; fn clear ( ) ; fn initialize ( ) ; fn getItem ( ) ; fn insertItemBefore ( ) ; fn replaceItem ( ) ; fn removeItem ( ) ; fn appendItem ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGNumberListVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGNumberListImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGNumberListVtbl < > { unsafe extern "system" fn SetnumberOfItems < Impl : ISVGNumberListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn numberOfItems < Impl : ISVGNumberListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clear < Impl : ISVGNumberListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn initialize < Impl : ISVGNumberListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , newitem : :: windows :: core :: RawPtr , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getItem < Impl : ISVGNumberListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn insertItemBefore < Impl : ISVGNumberListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , newitem : :: windows :: core :: RawPtr , index : i32 , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn replaceItem < Impl : ISVGNumberListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , newitem : :: windows :: core :: RawPtr , index : i32 , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn removeItem < Impl : ISVGNumberListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn appendItem < Impl : ISVGNumberListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , newitem : :: windows :: core :: RawPtr , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetnumberOfItems : SetnumberOfItems :: < Impl , IMPL_OFFSET > , numberOfItems : numberOfItems :: < Impl , IMPL_OFFSET > , clear : clear :: < Impl , IMPL_OFFSET > , initialize : initialize :: < Impl , IMPL_OFFSET > , getItem : getItem :: < Impl , IMPL_OFFSET > , insertItemBefore : insertItemBefore :: < Impl , IMPL_OFFSET > , replaceItem : replaceItem :: < Impl , IMPL_OFFSET > , removeItem : removeItem :: < Impl , IMPL_OFFSET > , appendItem : appendItem :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGNumberList < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGPaintImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGPaintVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGPaintImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGPaintVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGPaint < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGPathElementImpl < > : Sized + IDispatchImpl where { fn putref_pathLength ( ) ; fn pathLength ( ) ; fn getTotalLength ( ) ; fn getPointAtLength ( ) ; fn getPathSegAtLength ( ) ; fn createSVGPathSegClosePath ( ) ; fn createSVGPathSegMovetoAbs ( ) ; fn createSVGPathSegMovetoRel ( ) ; fn createSVGPathSegLinetoAbs ( ) ; fn createSVGPathSegLinetoRel ( ) ; fn createSVGPathSegCurvetoCubicAbs ( ) ; fn createSVGPathSegCurvetoCubicRel ( ) ; fn createSVGPathSegCurvetoQuadraticAbs ( ) ; fn createSVGPathSegCurvetoQuadraticRel ( ) ; fn createSVGPathSegArcAbs ( ) ; fn createSVGPathSegArcRel ( ) ; fn createSVGPathSegLinetoHorizontalAbs ( ) ; fn createSVGPathSegLinetoHorizontalRel ( ) ; fn createSVGPathSegLinetoVerticalAbs ( ) ; fn createSVGPathSegLinetoVerticalRel ( ) ; fn createSVGPathSegCurvetoCubicSmoothAbs ( ) ; fn createSVGPathSegCurvetoCubicSmoothRel ( ) ; fn createSVGPathSegCurvetoQuadraticSmoothAbs ( ) ; fn createSVGPathSegCurvetoQuadraticSmoothRel ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGPathElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGPathElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGPathElementVtbl < > { unsafe extern "system" fn putref_pathLength < Impl : ISVGPathElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn pathLength < Impl : ISVGPathElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getTotalLength < Impl : ISVGPathElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfltresult : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getPointAtLength < Impl : ISVGPathElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fltdistance : f32 , pppointresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getPathSegAtLength < Impl : ISVGPathElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fltdistance : f32 , plresult : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createSVGPathSegClosePath < Impl : ISVGPathElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createSVGPathSegMovetoAbs < Impl : ISVGPathElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , x : f32 , y : f32 , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createSVGPathSegMovetoRel < Impl : ISVGPathElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , x : f32 , y : f32 , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createSVGPathSegLinetoAbs < Impl : ISVGPathElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , x : f32 , y : f32 , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createSVGPathSegLinetoRel < Impl : ISVGPathElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , x : f32 , y : f32 , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createSVGPathSegCurvetoCubicAbs < Impl : ISVGPathElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , x : f32 , y : f32 , x1 : f32 , y1 : f32 , x2 : f32 , y2 : f32 , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createSVGPathSegCurvetoCubicRel < Impl : ISVGPathElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , x : f32 , y : f32 , x1 : f32 , y1 : f32 , x2 : f32 , y2 : f32 , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createSVGPathSegCurvetoQuadraticAbs < Impl : ISVGPathElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , x : f32 , y : f32 , x1 : f32 , y1 : f32 , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createSVGPathSegCurvetoQuadraticRel < Impl : ISVGPathElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , x : f32 , y : f32 , x1 : f32 , y1 : f32 , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createSVGPathSegArcAbs < Impl : ISVGPathElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , x : f32 , y : f32 , r1 : f32 , r2 : f32 , angle : f32 , largearcflag : i16 , sweepflag : i16 , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createSVGPathSegArcRel < Impl : ISVGPathElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , x : f32 , y : f32 , r1 : f32 , r2 : f32 , angle : f32 , largearcflag : i16 , sweepflag : i16 , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createSVGPathSegLinetoHorizontalAbs < Impl : ISVGPathElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , x : f32 , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createSVGPathSegLinetoHorizontalRel < Impl : ISVGPathElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , x : f32 , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createSVGPathSegLinetoVerticalAbs < Impl : ISVGPathElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , y : f32 , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createSVGPathSegLinetoVerticalRel < Impl : ISVGPathElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , y : f32 , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createSVGPathSegCurvetoCubicSmoothAbs < Impl : ISVGPathElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , x : f32 , y : f32 , x2 : f32 , y2 : f32 , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createSVGPathSegCurvetoCubicSmoothRel < Impl : ISVGPathElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , x : f32 , y : f32 , x2 : f32 , y2 : f32 , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createSVGPathSegCurvetoQuadraticSmoothAbs < Impl : ISVGPathElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , x : f32 , y : f32 , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createSVGPathSegCurvetoQuadraticSmoothRel < Impl : ISVGPathElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , x : f32 , y : f32 , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , putref_pathLength : putref_pathLength :: < Impl , IMPL_OFFSET > , pathLength : pathLength :: < Impl , IMPL_OFFSET > , getTotalLength : getTotalLength :: < Impl , IMPL_OFFSET > , getPointAtLength : getPointAtLength :: < Impl , IMPL_OFFSET > , getPathSegAtLength : getPathSegAtLength :: < Impl , IMPL_OFFSET > , createSVGPathSegClosePath : createSVGPathSegClosePath :: < Impl , IMPL_OFFSET > , createSVGPathSegMovetoAbs : createSVGPathSegMovetoAbs :: < Impl , IMPL_OFFSET > , createSVGPathSegMovetoRel : createSVGPathSegMovetoRel :: < Impl , IMPL_OFFSET > , createSVGPathSegLinetoAbs : createSVGPathSegLinetoAbs :: < Impl , IMPL_OFFSET > , createSVGPathSegLinetoRel : createSVGPathSegLinetoRel :: < Impl , IMPL_OFFSET > , createSVGPathSegCurvetoCubicAbs : createSVGPathSegCurvetoCubicAbs :: < Impl , IMPL_OFFSET > , createSVGPathSegCurvetoCubicRel : createSVGPathSegCurvetoCubicRel :: < Impl , IMPL_OFFSET > , createSVGPathSegCurvetoQuadraticAbs : createSVGPathSegCurvetoQuadraticAbs :: < Impl , IMPL_OFFSET > , createSVGPathSegCurvetoQuadraticRel : createSVGPathSegCurvetoQuadraticRel :: < Impl , IMPL_OFFSET > , createSVGPathSegArcAbs : createSVGPathSegArcAbs :: < Impl , IMPL_OFFSET > , createSVGPathSegArcRel : createSVGPathSegArcRel :: < Impl , IMPL_OFFSET > , createSVGPathSegLinetoHorizontalAbs : createSVGPathSegLinetoHorizontalAbs :: < Impl , IMPL_OFFSET > , createSVGPathSegLinetoHorizontalRel : createSVGPathSegLinetoHorizontalRel :: < Impl , IMPL_OFFSET > , createSVGPathSegLinetoVerticalAbs : createSVGPathSegLinetoVerticalAbs :: < Impl , IMPL_OFFSET > , createSVGPathSegLinetoVerticalRel : createSVGPathSegLinetoVerticalRel :: < Impl , IMPL_OFFSET > , createSVGPathSegCurvetoCubicSmoothAbs : createSVGPathSegCurvetoCubicSmoothAbs :: < Impl , IMPL_OFFSET > , createSVGPathSegCurvetoCubicSmoothRel : createSVGPathSegCurvetoCubicSmoothRel :: < Impl , IMPL_OFFSET > , createSVGPathSegCurvetoQuadraticSmoothAbs : createSVGPathSegCurvetoQuadraticSmoothAbs :: < Impl , IMPL_OFFSET > , createSVGPathSegCurvetoQuadraticSmoothRel : createSVGPathSegCurvetoQuadraticSmoothRel :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGPathElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGPathSegImpl < > : Sized + IDispatchImpl where { fn SetpathSegType ( ) ; fn pathSegType ( ) ; fn pathSegTypeAsLetter ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGPathSegVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGPathSegImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGPathSegVtbl < > { unsafe extern "system" fn SetpathSegType < Impl : ISVGPathSegImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn pathSegType < Impl : ISVGPathSegImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn pathSegTypeAsLetter < Impl : ISVGPathSegImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetpathSegType : SetpathSegType :: < Impl , IMPL_OFFSET > , pathSegType : pathSegType :: < Impl , IMPL_OFFSET > , pathSegTypeAsLetter : pathSegTypeAsLetter :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGPathSeg < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGPathSegArcAbsImpl < > : Sized + IDispatchImpl where { fn Setx ( ) ; fn x ( ) ; fn Sety ( ) ; fn y ( ) ; fn Setr1 ( ) ; fn r1 ( ) ; fn Setr2 ( ) ; fn r2 ( ) ; fn Setangle ( ) ; fn angle ( ) ; fn SetlargeArcFlag ( ) ; fn largeArcFlag ( ) ; fn SetsweepFlag ( ) ; fn sweepFlag ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGPathSegArcAbsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGPathSegArcAbsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGPathSegArcAbsVtbl < > { unsafe extern "system" fn Setx < Impl : ISVGPathSegArcAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn x < Impl : ISVGPathSegArcAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Sety < Impl : ISVGPathSegArcAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn y < Impl : ISVGPathSegArcAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setr1 < Impl : ISVGPathSegArcAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn r1 < Impl : ISVGPathSegArcAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setr2 < Impl : ISVGPathSegArcAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn r2 < Impl : ISVGPathSegArcAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setangle < Impl : ISVGPathSegArcAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn angle < Impl : ISVGPathSegArcAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetlargeArcFlag < Impl : ISVGPathSegArcAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn largeArcFlag < Impl : ISVGPathSegArcAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetsweepFlag < Impl : ISVGPathSegArcAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn sweepFlag < Impl : ISVGPathSegArcAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setx : Setx :: < Impl , IMPL_OFFSET > , x : x :: < Impl , IMPL_OFFSET > , Sety : Sety :: < Impl , IMPL_OFFSET > , y : y :: < Impl , IMPL_OFFSET > , Setr1 : Setr1 :: < Impl , IMPL_OFFSET > , r1 : r1 :: < Impl , IMPL_OFFSET > , Setr2 : Setr2 :: < Impl , IMPL_OFFSET > , r2 : r2 :: < Impl , IMPL_OFFSET > , Setangle : Setangle :: < Impl , IMPL_OFFSET > , angle : angle :: < Impl , IMPL_OFFSET > , SetlargeArcFlag : SetlargeArcFlag :: < Impl , IMPL_OFFSET > , largeArcFlag : largeArcFlag :: < Impl , IMPL_OFFSET > , SetsweepFlag : SetsweepFlag :: < Impl , IMPL_OFFSET > , sweepFlag : sweepFlag :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGPathSegArcAbs < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGPathSegArcRelImpl < > : Sized + IDispatchImpl where { fn Setx ( ) ; fn x ( ) ; fn Sety ( ) ; fn y ( ) ; fn Setr1 ( ) ; fn r1 ( ) ; fn Setr2 ( ) ; fn r2 ( ) ; fn Setangle ( ) ; fn angle ( ) ; fn SetlargeArcFlag ( ) ; fn largeArcFlag ( ) ; fn SetsweepFlag ( ) ; fn sweepFlag ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGPathSegArcRelVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGPathSegArcRelImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGPathSegArcRelVtbl < > { unsafe extern "system" fn Setx < Impl : ISVGPathSegArcRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn x < Impl : ISVGPathSegArcRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Sety < Impl : ISVGPathSegArcRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn y < Impl : ISVGPathSegArcRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setr1 < Impl : ISVGPathSegArcRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn r1 < Impl : ISVGPathSegArcRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setr2 < Impl : ISVGPathSegArcRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn r2 < Impl : ISVGPathSegArcRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setangle < Impl : ISVGPathSegArcRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn angle < Impl : ISVGPathSegArcRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetlargeArcFlag < Impl : ISVGPathSegArcRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn largeArcFlag < Impl : ISVGPathSegArcRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetsweepFlag < Impl : ISVGPathSegArcRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn sweepFlag < Impl : ISVGPathSegArcRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setx : Setx :: < Impl , IMPL_OFFSET > , x : x :: < Impl , IMPL_OFFSET > , Sety : Sety :: < Impl , IMPL_OFFSET > , y : y :: < Impl , IMPL_OFFSET > , Setr1 : Setr1 :: < Impl , IMPL_OFFSET > , r1 : r1 :: < Impl , IMPL_OFFSET > , Setr2 : Setr2 :: < Impl , IMPL_OFFSET > , r2 : r2 :: < Impl , IMPL_OFFSET > , Setangle : Setangle :: < Impl , IMPL_OFFSET > , angle : angle :: < Impl , IMPL_OFFSET > , SetlargeArcFlag : SetlargeArcFlag :: < Impl , IMPL_OFFSET > , largeArcFlag : largeArcFlag :: < Impl , IMPL_OFFSET > , SetsweepFlag : SetsweepFlag :: < Impl , IMPL_OFFSET > , sweepFlag : sweepFlag :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGPathSegArcRel < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGPathSegClosePathImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGPathSegClosePathVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGPathSegClosePathImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGPathSegClosePathVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGPathSegClosePath < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGPathSegCurvetoCubicAbsImpl < > : Sized + IDispatchImpl where { fn Setx ( ) ; fn x ( ) ; fn Sety ( ) ; fn y ( ) ; fn Setx1 ( ) ; fn x1 ( ) ; fn Sety1 ( ) ; fn y1 ( ) ; fn Setx2 ( ) ; fn x2 ( ) ; fn Sety2 ( ) ; fn y2 ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGPathSegCurvetoCubicAbsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGPathSegCurvetoCubicAbsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGPathSegCurvetoCubicAbsVtbl < > { unsafe extern "system" fn Setx < Impl : ISVGPathSegCurvetoCubicAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn x < Impl : ISVGPathSegCurvetoCubicAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Sety < Impl : ISVGPathSegCurvetoCubicAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn y < Impl : ISVGPathSegCurvetoCubicAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setx1 < Impl : ISVGPathSegCurvetoCubicAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn x1 < Impl : ISVGPathSegCurvetoCubicAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Sety1 < Impl : ISVGPathSegCurvetoCubicAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn y1 < Impl : ISVGPathSegCurvetoCubicAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setx2 < Impl : ISVGPathSegCurvetoCubicAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn x2 < Impl : ISVGPathSegCurvetoCubicAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Sety2 < Impl : ISVGPathSegCurvetoCubicAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn y2 < Impl : ISVGPathSegCurvetoCubicAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setx : Setx :: < Impl , IMPL_OFFSET > , x : x :: < Impl , IMPL_OFFSET > , Sety : Sety :: < Impl , IMPL_OFFSET > , y : y :: < Impl , IMPL_OFFSET > , Setx1 : Setx1 :: < Impl , IMPL_OFFSET > , x1 : x1 :: < Impl , IMPL_OFFSET > , Sety1 : Sety1 :: < Impl , IMPL_OFFSET > , y1 : y1 :: < Impl , IMPL_OFFSET > , Setx2 : Setx2 :: < Impl , IMPL_OFFSET > , x2 : x2 :: < Impl , IMPL_OFFSET > , Sety2 : Sety2 :: < Impl , IMPL_OFFSET > , y2 : y2 :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGPathSegCurvetoCubicAbs < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGPathSegCurvetoCubicRelImpl < > : Sized + IDispatchImpl where { fn Setx ( ) ; fn x ( ) ; fn Sety ( ) ; fn y ( ) ; fn Setx1 ( ) ; fn x1 ( ) ; fn Sety1 ( ) ; fn y1 ( ) ; fn Setx2 ( ) ; fn x2 ( ) ; fn Sety2 ( ) ; fn y2 ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGPathSegCurvetoCubicRelVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGPathSegCurvetoCubicRelImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGPathSegCurvetoCubicRelVtbl < > { unsafe extern "system" fn Setx < Impl : ISVGPathSegCurvetoCubicRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn x < Impl : ISVGPathSegCurvetoCubicRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Sety < Impl : ISVGPathSegCurvetoCubicRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn y < Impl : ISVGPathSegCurvetoCubicRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setx1 < Impl : ISVGPathSegCurvetoCubicRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn x1 < Impl : ISVGPathSegCurvetoCubicRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Sety1 < Impl : ISVGPathSegCurvetoCubicRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn y1 < Impl : ISVGPathSegCurvetoCubicRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setx2 < Impl : ISVGPathSegCurvetoCubicRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn x2 < Impl : ISVGPathSegCurvetoCubicRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Sety2 < Impl : ISVGPathSegCurvetoCubicRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn y2 < Impl : ISVGPathSegCurvetoCubicRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setx : Setx :: < Impl , IMPL_OFFSET > , x : x :: < Impl , IMPL_OFFSET > , Sety : Sety :: < Impl , IMPL_OFFSET > , y : y :: < Impl , IMPL_OFFSET > , Setx1 : Setx1 :: < Impl , IMPL_OFFSET > , x1 : x1 :: < Impl , IMPL_OFFSET > , Sety1 : Sety1 :: < Impl , IMPL_OFFSET > , y1 : y1 :: < Impl , IMPL_OFFSET > , Setx2 : Setx2 :: < Impl , IMPL_OFFSET > , x2 : x2 :: < Impl , IMPL_OFFSET > , Sety2 : Sety2 :: < Impl , IMPL_OFFSET > , y2 : y2 :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGPathSegCurvetoCubicRel < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGPathSegCurvetoCubicSmoothAbsImpl < > : Sized + IDispatchImpl where { fn Setx ( ) ; fn x ( ) ; fn Sety ( ) ; fn y ( ) ; fn Setx2 ( ) ; fn x2 ( ) ; fn Sety2 ( ) ; fn y2 ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGPathSegCurvetoCubicSmoothAbsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGPathSegCurvetoCubicSmoothAbsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGPathSegCurvetoCubicSmoothAbsVtbl < > { unsafe extern "system" fn Setx < Impl : ISVGPathSegCurvetoCubicSmoothAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn x < Impl : ISVGPathSegCurvetoCubicSmoothAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Sety < Impl : ISVGPathSegCurvetoCubicSmoothAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn y < Impl : ISVGPathSegCurvetoCubicSmoothAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setx2 < Impl : ISVGPathSegCurvetoCubicSmoothAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn x2 < Impl : ISVGPathSegCurvetoCubicSmoothAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Sety2 < Impl : ISVGPathSegCurvetoCubicSmoothAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn y2 < Impl : ISVGPathSegCurvetoCubicSmoothAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setx : Setx :: < Impl , IMPL_OFFSET > , x : x :: < Impl , IMPL_OFFSET > , Sety : Sety :: < Impl , IMPL_OFFSET > , y : y :: < Impl , IMPL_OFFSET > , Setx2 : Setx2 :: < Impl , IMPL_OFFSET > , x2 : x2 :: < Impl , IMPL_OFFSET > , Sety2 : Sety2 :: < Impl , IMPL_OFFSET > , y2 : y2 :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGPathSegCurvetoCubicSmoothAbs < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGPathSegCurvetoCubicSmoothRelImpl < > : Sized + IDispatchImpl where { fn Setx ( ) ; fn x ( ) ; fn Sety ( ) ; fn y ( ) ; fn Setx2 ( ) ; fn x2 ( ) ; fn Sety2 ( ) ; fn y2 ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGPathSegCurvetoCubicSmoothRelVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGPathSegCurvetoCubicSmoothRelImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGPathSegCurvetoCubicSmoothRelVtbl < > { unsafe extern "system" fn Setx < Impl : ISVGPathSegCurvetoCubicSmoothRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn x < Impl : ISVGPathSegCurvetoCubicSmoothRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Sety < Impl : ISVGPathSegCurvetoCubicSmoothRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn y < Impl : ISVGPathSegCurvetoCubicSmoothRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setx2 < Impl : ISVGPathSegCurvetoCubicSmoothRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn x2 < Impl : ISVGPathSegCurvetoCubicSmoothRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Sety2 < Impl : ISVGPathSegCurvetoCubicSmoothRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn y2 < Impl : ISVGPathSegCurvetoCubicSmoothRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setx : Setx :: < Impl , IMPL_OFFSET > , x : x :: < Impl , IMPL_OFFSET > , Sety : Sety :: < Impl , IMPL_OFFSET > , y : y :: < Impl , IMPL_OFFSET > , Setx2 : Setx2 :: < Impl , IMPL_OFFSET > , x2 : x2 :: < Impl , IMPL_OFFSET > , Sety2 : Sety2 :: < Impl , IMPL_OFFSET > , y2 : y2 :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGPathSegCurvetoCubicSmoothRel < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGPathSegCurvetoQuadraticAbsImpl < > : Sized + IDispatchImpl where { fn Setx ( ) ; fn x ( ) ; fn Sety ( ) ; fn y ( ) ; fn Setx1 ( ) ; fn x1 ( ) ; fn Sety1 ( ) ; fn y1 ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGPathSegCurvetoQuadraticAbsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGPathSegCurvetoQuadraticAbsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGPathSegCurvetoQuadraticAbsVtbl < > { unsafe extern "system" fn Setx < Impl : ISVGPathSegCurvetoQuadraticAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn x < Impl : ISVGPathSegCurvetoQuadraticAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Sety < Impl : ISVGPathSegCurvetoQuadraticAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn y < Impl : ISVGPathSegCurvetoQuadraticAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setx1 < Impl : ISVGPathSegCurvetoQuadraticAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn x1 < Impl : ISVGPathSegCurvetoQuadraticAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Sety1 < Impl : ISVGPathSegCurvetoQuadraticAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn y1 < Impl : ISVGPathSegCurvetoQuadraticAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setx : Setx :: < Impl , IMPL_OFFSET > , x : x :: < Impl , IMPL_OFFSET > , Sety : Sety :: < Impl , IMPL_OFFSET > , y : y :: < Impl , IMPL_OFFSET > , Setx1 : Setx1 :: < Impl , IMPL_OFFSET > , x1 : x1 :: < Impl , IMPL_OFFSET > , Sety1 : Sety1 :: < Impl , IMPL_OFFSET > , y1 : y1 :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGPathSegCurvetoQuadraticAbs < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGPathSegCurvetoQuadraticRelImpl < > : Sized + IDispatchImpl where { fn Setx ( ) ; fn x ( ) ; fn Sety ( ) ; fn y ( ) ; fn Setx1 ( ) ; fn x1 ( ) ; fn Sety1 ( ) ; fn y1 ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGPathSegCurvetoQuadraticRelVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGPathSegCurvetoQuadraticRelImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGPathSegCurvetoQuadraticRelVtbl < > { unsafe extern "system" fn Setx < Impl : ISVGPathSegCurvetoQuadraticRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn x < Impl : ISVGPathSegCurvetoQuadraticRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Sety < Impl : ISVGPathSegCurvetoQuadraticRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn y < Impl : ISVGPathSegCurvetoQuadraticRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setx1 < Impl : ISVGPathSegCurvetoQuadraticRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn x1 < Impl : ISVGPathSegCurvetoQuadraticRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Sety1 < Impl : ISVGPathSegCurvetoQuadraticRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn y1 < Impl : ISVGPathSegCurvetoQuadraticRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setx : Setx :: < Impl , IMPL_OFFSET > , x : x :: < Impl , IMPL_OFFSET > , Sety : Sety :: < Impl , IMPL_OFFSET > , y : y :: < Impl , IMPL_OFFSET > , Setx1 : Setx1 :: < Impl , IMPL_OFFSET > , x1 : x1 :: < Impl , IMPL_OFFSET > , Sety1 : Sety1 :: < Impl , IMPL_OFFSET > , y1 : y1 :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGPathSegCurvetoQuadraticRel < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGPathSegCurvetoQuadraticSmoothAbsImpl < > : Sized + IDispatchImpl where { fn Setx ( ) ; fn x ( ) ; fn Sety ( ) ; fn y ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGPathSegCurvetoQuadraticSmoothAbsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGPathSegCurvetoQuadraticSmoothAbsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGPathSegCurvetoQuadraticSmoothAbsVtbl < > { unsafe extern "system" fn Setx < Impl : ISVGPathSegCurvetoQuadraticSmoothAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn x < Impl : ISVGPathSegCurvetoQuadraticSmoothAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Sety < Impl : ISVGPathSegCurvetoQuadraticSmoothAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn y < Impl : ISVGPathSegCurvetoQuadraticSmoothAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setx : Setx :: < Impl , IMPL_OFFSET > , x : x :: < Impl , IMPL_OFFSET > , Sety : Sety :: < Impl , IMPL_OFFSET > , y : y :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGPathSegCurvetoQuadraticSmoothAbs < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGPathSegCurvetoQuadraticSmoothRelImpl < > : Sized + IDispatchImpl where { fn Setx ( ) ; fn x ( ) ; fn Sety ( ) ; fn y ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGPathSegCurvetoQuadraticSmoothRelVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGPathSegCurvetoQuadraticSmoothRelImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGPathSegCurvetoQuadraticSmoothRelVtbl < > { unsafe extern "system" fn Setx < Impl : ISVGPathSegCurvetoQuadraticSmoothRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn x < Impl : ISVGPathSegCurvetoQuadraticSmoothRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Sety < Impl : ISVGPathSegCurvetoQuadraticSmoothRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn y < Impl : ISVGPathSegCurvetoQuadraticSmoothRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setx : Setx :: < Impl , IMPL_OFFSET > , x : x :: < Impl , IMPL_OFFSET > , Sety : Sety :: < Impl , IMPL_OFFSET > , y : y :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGPathSegCurvetoQuadraticSmoothRel < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGPathSegLinetoAbsImpl < > : Sized + IDispatchImpl where { fn Setx ( ) ; fn x ( ) ; fn Sety ( ) ; fn y ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGPathSegLinetoAbsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGPathSegLinetoAbsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGPathSegLinetoAbsVtbl < > { unsafe extern "system" fn Setx < Impl : ISVGPathSegLinetoAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn x < Impl : ISVGPathSegLinetoAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Sety < Impl : ISVGPathSegLinetoAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn y < Impl : ISVGPathSegLinetoAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setx : Setx :: < Impl , IMPL_OFFSET > , x : x :: < Impl , IMPL_OFFSET > , Sety : Sety :: < Impl , IMPL_OFFSET > , y : y :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGPathSegLinetoAbs < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGPathSegLinetoHorizontalAbsImpl < > : Sized + IDispatchImpl where { fn Setx ( ) ; fn x ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGPathSegLinetoHorizontalAbsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGPathSegLinetoHorizontalAbsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGPathSegLinetoHorizontalAbsVtbl < > { unsafe extern "system" fn Setx < Impl : ISVGPathSegLinetoHorizontalAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn x < Impl : ISVGPathSegLinetoHorizontalAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setx : Setx :: < Impl , IMPL_OFFSET > , x : x :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGPathSegLinetoHorizontalAbs < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGPathSegLinetoHorizontalRelImpl < > : Sized + IDispatchImpl where { fn Setx ( ) ; fn x ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGPathSegLinetoHorizontalRelVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGPathSegLinetoHorizontalRelImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGPathSegLinetoHorizontalRelVtbl < > { unsafe extern "system" fn Setx < Impl : ISVGPathSegLinetoHorizontalRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn x < Impl : ISVGPathSegLinetoHorizontalRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setx : Setx :: < Impl , IMPL_OFFSET > , x : x :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGPathSegLinetoHorizontalRel < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGPathSegLinetoRelImpl < > : Sized + IDispatchImpl where { fn Setx ( ) ; fn x ( ) ; fn Sety ( ) ; fn y ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGPathSegLinetoRelVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGPathSegLinetoRelImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGPathSegLinetoRelVtbl < > { unsafe extern "system" fn Setx < Impl : ISVGPathSegLinetoRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn x < Impl : ISVGPathSegLinetoRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Sety < Impl : ISVGPathSegLinetoRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn y < Impl : ISVGPathSegLinetoRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setx : Setx :: < Impl , IMPL_OFFSET > , x : x :: < Impl , IMPL_OFFSET > , Sety : Sety :: < Impl , IMPL_OFFSET > , y : y :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGPathSegLinetoRel < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGPathSegLinetoVerticalAbsImpl < > : Sized + IDispatchImpl where { fn Sety ( ) ; fn y ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGPathSegLinetoVerticalAbsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGPathSegLinetoVerticalAbsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGPathSegLinetoVerticalAbsVtbl < > { unsafe extern "system" fn Sety < Impl : ISVGPathSegLinetoVerticalAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn y < Impl : ISVGPathSegLinetoVerticalAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Sety : Sety :: < Impl , IMPL_OFFSET > , y : y :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGPathSegLinetoVerticalAbs < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGPathSegLinetoVerticalRelImpl < > : Sized + IDispatchImpl where { fn Sety ( ) ; fn y ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGPathSegLinetoVerticalRelVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGPathSegLinetoVerticalRelImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGPathSegLinetoVerticalRelVtbl < > { unsafe extern "system" fn Sety < Impl : ISVGPathSegLinetoVerticalRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn y < Impl : ISVGPathSegLinetoVerticalRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Sety : Sety :: < Impl , IMPL_OFFSET > , y : y :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGPathSegLinetoVerticalRel < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGPathSegListImpl < > : Sized + IDispatchImpl where { fn SetnumberOfItems ( ) ; fn numberOfItems ( ) ; fn clear ( ) ; fn initialize ( ) ; fn getItem ( ) ; fn insertItemBefore ( ) ; fn replaceItem ( ) ; fn removeItem ( ) ; fn appendItem ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGPathSegListVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGPathSegListImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGPathSegListVtbl < > { unsafe extern "system" fn SetnumberOfItems < Impl : ISVGPathSegListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn numberOfItems < Impl : ISVGPathSegListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clear < Impl : ISVGPathSegListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn initialize < Impl : ISVGPathSegListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , newitem : :: windows :: core :: RawPtr , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getItem < Impl : ISVGPathSegListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn insertItemBefore < Impl : ISVGPathSegListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , newitem : :: windows :: core :: RawPtr , index : i32 , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn replaceItem < Impl : ISVGPathSegListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , newitem : :: windows :: core :: RawPtr , index : i32 , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn removeItem < Impl : ISVGPathSegListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn appendItem < Impl : ISVGPathSegListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , newitem : :: windows :: core :: RawPtr , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetnumberOfItems : SetnumberOfItems :: < Impl , IMPL_OFFSET > , numberOfItems : numberOfItems :: < Impl , IMPL_OFFSET > , clear : clear :: < Impl , IMPL_OFFSET > , initialize : initialize :: < Impl , IMPL_OFFSET > , getItem : getItem :: < Impl , IMPL_OFFSET > , insertItemBefore : insertItemBefore :: < Impl , IMPL_OFFSET > , replaceItem : replaceItem :: < Impl , IMPL_OFFSET > , removeItem : removeItem :: < Impl , IMPL_OFFSET > , appendItem : appendItem :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGPathSegList < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGPathSegMovetoAbsImpl < > : Sized + IDispatchImpl where { fn Setx ( ) ; fn x ( ) ; fn Sety ( ) ; fn y ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGPathSegMovetoAbsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGPathSegMovetoAbsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGPathSegMovetoAbsVtbl < > { unsafe extern "system" fn Setx < Impl : ISVGPathSegMovetoAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn x < Impl : ISVGPathSegMovetoAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Sety < Impl : ISVGPathSegMovetoAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn y < Impl : ISVGPathSegMovetoAbsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setx : Setx :: < Impl , IMPL_OFFSET > , x : x :: < Impl , IMPL_OFFSET > , Sety : Sety :: < Impl , IMPL_OFFSET > , y : y :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGPathSegMovetoAbs < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGPathSegMovetoRelImpl < > : Sized + IDispatchImpl where { fn Setx ( ) ; fn x ( ) ; fn Sety ( ) ; fn y ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGPathSegMovetoRelVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGPathSegMovetoRelImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGPathSegMovetoRelVtbl < > { unsafe extern "system" fn Setx < Impl : ISVGPathSegMovetoRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn x < Impl : ISVGPathSegMovetoRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Sety < Impl : ISVGPathSegMovetoRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn y < Impl : ISVGPathSegMovetoRelImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setx : Setx :: < Impl , IMPL_OFFSET > , x : x :: < Impl , IMPL_OFFSET > , Sety : Sety :: < Impl , IMPL_OFFSET > , y : y :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGPathSegMovetoRel < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGPatternElementImpl < > : Sized + IDispatchImpl where { fn putref_patternUnits ( ) ; fn patternUnits ( ) ; fn putref_patternContentUnits ( ) ; fn patternContentUnits ( ) ; fn putref_patternTransform ( ) ; fn patternTransform ( ) ; fn putref_x ( ) ; fn x ( ) ; fn putref_y ( ) ; fn y ( ) ; fn putref_width ( ) ; fn width ( ) ; fn putref_height ( ) ; fn height ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGPatternElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGPatternElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGPatternElementVtbl < > { unsafe extern "system" fn putref_patternUnits < Impl : ISVGPatternElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn patternUnits < Impl : ISVGPatternElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_patternContentUnits < Impl : ISVGPatternElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn patternContentUnits < Impl : ISVGPatternElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_patternTransform < Impl : ISVGPatternElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn patternTransform < Impl : ISVGPatternElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_x < Impl : ISVGPatternElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn x < Impl : ISVGPatternElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_y < Impl : ISVGPatternElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn y < Impl : ISVGPatternElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_width < Impl : ISVGPatternElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn width < Impl : ISVGPatternElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_height < Impl : ISVGPatternElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn height < Impl : ISVGPatternElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , putref_patternUnits : putref_patternUnits :: < Impl , IMPL_OFFSET > , patternUnits : patternUnits :: < Impl , IMPL_OFFSET > , putref_patternContentUnits : putref_patternContentUnits :: < Impl , IMPL_OFFSET > , patternContentUnits : patternContentUnits :: < Impl , IMPL_OFFSET > , putref_patternTransform : putref_patternTransform :: < Impl , IMPL_OFFSET > , patternTransform : patternTransform :: < Impl , IMPL_OFFSET > , putref_x : putref_x :: < Impl , IMPL_OFFSET > , x : x :: < Impl , IMPL_OFFSET > , putref_y : putref_y :: < Impl , IMPL_OFFSET > , y : y :: < Impl , IMPL_OFFSET > , putref_width : putref_width :: < Impl , IMPL_OFFSET > , width : width :: < Impl , IMPL_OFFSET > , putref_height : putref_height :: < Impl , IMPL_OFFSET > , height : height :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGPatternElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGPointImpl < > : Sized + IDispatchImpl where { fn Setx ( ) ; fn x ( ) ; fn Sety ( ) ; fn y ( ) ; fn matrixTransform ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGPointVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGPointImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGPointVtbl < > { unsafe extern "system" fn Setx < Impl : ISVGPointImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn x < Impl : ISVGPointImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Sety < Impl : ISVGPointImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn y < Impl : ISVGPointImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn matrixTransform < Impl : ISVGPointImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pmatrix : :: windows :: core :: RawPtr , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setx : Setx :: < Impl , IMPL_OFFSET > , x : x :: < Impl , IMPL_OFFSET > , Sety : Sety :: < Impl , IMPL_OFFSET > , y : y :: < Impl , IMPL_OFFSET > , matrixTransform : matrixTransform :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGPoint < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGPointListImpl < > : Sized + IDispatchImpl where { fn SetnumberOfItems ( ) ; fn numberOfItems ( ) ; fn clear ( ) ; fn initialize ( ) ; fn getItem ( ) ; fn insertItemBefore ( ) ; fn replaceItem ( ) ; fn removeItem ( ) ; fn appendItem ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGPointListVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGPointListImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGPointListVtbl < > { unsafe extern "system" fn SetnumberOfItems < Impl : ISVGPointListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn numberOfItems < Impl : ISVGPointListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clear < Impl : ISVGPointListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn initialize < Impl : ISVGPointListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pnewitem : :: windows :: core :: RawPtr , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getItem < Impl : ISVGPointListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn insertItemBefore < Impl : ISVGPointListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pnewitem : :: windows :: core :: RawPtr , index : i32 , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn replaceItem < Impl : ISVGPointListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pnewitem : :: windows :: core :: RawPtr , index : i32 , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn removeItem < Impl : ISVGPointListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn appendItem < Impl : ISVGPointListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pnewitem : :: windows :: core :: RawPtr , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetnumberOfItems : SetnumberOfItems :: < Impl , IMPL_OFFSET > , numberOfItems : numberOfItems :: < Impl , IMPL_OFFSET > , clear : clear :: < Impl , IMPL_OFFSET > , initialize : initialize :: < Impl , IMPL_OFFSET > , getItem : getItem :: < Impl , IMPL_OFFSET > , insertItemBefore : insertItemBefore :: < Impl , IMPL_OFFSET > , replaceItem : replaceItem :: < Impl , IMPL_OFFSET > , removeItem : removeItem :: < Impl , IMPL_OFFSET > , appendItem : appendItem :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGPointList < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGPolygonElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGPolygonElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGPolygonElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGPolygonElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGPolygonElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGPolylineElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGPolylineElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGPolylineElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGPolylineElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGPolylineElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGPreserveAspectRatioImpl < > : Sized + IDispatchImpl where { fn Setalign ( ) ; fn align ( ) ; fn SetmeetOrSlice ( ) ; fn meetOrSlice ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGPreserveAspectRatioVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGPreserveAspectRatioImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGPreserveAspectRatioVtbl < > { unsafe extern "system" fn Setalign < Impl : ISVGPreserveAspectRatioImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn align < Impl : ISVGPreserveAspectRatioImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmeetOrSlice < Impl : ISVGPreserveAspectRatioImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn meetOrSlice < Impl : ISVGPreserveAspectRatioImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setalign : Setalign :: < Impl , IMPL_OFFSET > , align : align :: < Impl , IMPL_OFFSET > , SetmeetOrSlice : SetmeetOrSlice :: < Impl , IMPL_OFFSET > , meetOrSlice : meetOrSlice :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGPreserveAspectRatio < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGRadialGradientElementImpl < > : Sized + IDispatchImpl where { fn putref_cx ( ) ; fn cx ( ) ; fn putref_cy ( ) ; fn cy ( ) ; fn putref_r ( ) ; fn r ( ) ; fn putref_fx ( ) ; fn fx ( ) ; fn putref_fy ( ) ; fn fy ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGRadialGradientElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGRadialGradientElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGRadialGradientElementVtbl < > { unsafe extern "system" fn putref_cx < Impl : ISVGRadialGradientElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn cx < Impl : ISVGRadialGradientElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_cy < Impl : ISVGRadialGradientElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn cy < Impl : ISVGRadialGradientElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_r < Impl : ISVGRadialGradientElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn r < Impl : ISVGRadialGradientElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_fx < Impl : ISVGRadialGradientElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn fx < Impl : ISVGRadialGradientElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_fy < Impl : ISVGRadialGradientElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn fy < Impl : ISVGRadialGradientElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , putref_cx : putref_cx :: < Impl , IMPL_OFFSET > , cx : cx :: < Impl , IMPL_OFFSET > , putref_cy : putref_cy :: < Impl , IMPL_OFFSET > , cy : cy :: < Impl , IMPL_OFFSET > , putref_r : putref_r :: < Impl , IMPL_OFFSET > , r : r :: < Impl , IMPL_OFFSET > , putref_fx : putref_fx :: < Impl , IMPL_OFFSET > , fx : fx :: < Impl , IMPL_OFFSET > , putref_fy : putref_fy :: < Impl , IMPL_OFFSET > , fy : fy :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGRadialGradientElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGRectImpl < > : Sized + IDispatchImpl where { fn Setx ( ) ; fn x ( ) ; fn Sety ( ) ; fn y ( ) ; fn Setwidth ( ) ; fn width ( ) ; fn Setheight ( ) ; fn height ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGRectVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGRectImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGRectVtbl < > { unsafe extern "system" fn Setx < Impl : ISVGRectImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn x < Impl : ISVGRectImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Sety < Impl : ISVGRectImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn y < Impl : ISVGRectImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setwidth < Impl : ISVGRectImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn width < Impl : ISVGRectImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setheight < Impl : ISVGRectImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn height < Impl : ISVGRectImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Setx : Setx :: < Impl , IMPL_OFFSET > , x : x :: < Impl , IMPL_OFFSET > , Sety : Sety :: < Impl , IMPL_OFFSET > , y : y :: < Impl , IMPL_OFFSET > , Setwidth : Setwidth :: < Impl , IMPL_OFFSET > , width : width :: < Impl , IMPL_OFFSET > , Setheight : Setheight :: < Impl , IMPL_OFFSET > , height : height :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGRect < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGRectElementImpl < > : Sized + IDispatchImpl where { fn putref_x ( ) ; fn x ( ) ; fn putref_y ( ) ; fn y ( ) ; fn putref_width ( ) ; fn width ( ) ; fn putref_height ( ) ; fn height ( ) ; fn putref_rx ( ) ; fn rx ( ) ; fn putref_ry ( ) ; fn ry ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGRectElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGRectElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGRectElementVtbl < > { unsafe extern "system" fn putref_x < Impl : ISVGRectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn x < Impl : ISVGRectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_y < Impl : ISVGRectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn y < Impl : ISVGRectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_width < Impl : ISVGRectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn width < Impl : ISVGRectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_height < Impl : ISVGRectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn height < Impl : ISVGRectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_rx < Impl : ISVGRectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn rx < Impl : ISVGRectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_ry < Impl : ISVGRectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ry < Impl : ISVGRectElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , putref_x : putref_x :: < Impl , IMPL_OFFSET > , x : x :: < Impl , IMPL_OFFSET > , putref_y : putref_y :: < Impl , IMPL_OFFSET > , y : y :: < Impl , IMPL_OFFSET > , putref_width : putref_width :: < Impl , IMPL_OFFSET > , width : width :: < Impl , IMPL_OFFSET > , putref_height : putref_height :: < Impl , IMPL_OFFSET > , height : height :: < Impl , IMPL_OFFSET > , putref_rx : putref_rx :: < Impl , IMPL_OFFSET > , rx : rx :: < Impl , IMPL_OFFSET > , putref_ry : putref_ry :: < Impl , IMPL_OFFSET > , ry : ry :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGRectElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGSVGElementImpl < > : Sized + IDispatchImpl where { fn putref_x ( ) ; fn x ( ) ; fn putref_y ( ) ; fn y ( ) ; fn putref_width ( ) ; fn width ( ) ; fn putref_height ( ) ; fn height ( ) ; fn SetcontentScriptType ( ) ; fn contentScriptType ( ) ; fn SetcontentStyleType ( ) ; fn contentStyleType ( ) ; fn putref_viewport ( ) ; fn viewport ( ) ; fn SetpixelUnitToMillimeterX ( ) ; fn pixelUnitToMillimeterX ( ) ; fn SetpixelUnitToMillimeterY ( ) ; fn pixelUnitToMillimeterY ( ) ; fn SetscreenPixelToMillimeterX ( ) ; fn screenPixelToMillimeterX ( ) ; fn SetscreenPixelToMillimeterY ( ) ; fn screenPixelToMillimeterY ( ) ; fn SetuseCurrentView ( ) ; fn useCurrentView ( ) ; fn putref_currentView ( ) ; fn currentView ( ) ; fn SetcurrentScale ( ) ; fn currentScale ( ) ; fn putref_currentTranslate ( ) ; fn currentTranslate ( ) ; fn suspendRedraw ( ) ; fn unsuspendRedraw ( ) ; fn unsuspendRedrawAll ( ) ; fn forceRedraw ( ) ; fn pauseAnimations ( ) ; fn unpauseAnimations ( ) ; fn animationsPaused ( ) ; fn getCurrentTime ( ) ; fn setCurrentTime ( ) ; fn getIntersectionList ( ) ; fn getEnclosureList ( ) ; fn checkIntersection ( ) ; fn checkEnclosure ( ) ; fn deselectAll ( ) ; fn createSVGNumber ( ) ; fn createSVGLength ( ) ; fn createSVGAngle ( ) ; fn createSVGPoint ( ) ; fn createSVGMatrix ( ) ; fn createSVGRect ( ) ; fn createSVGTransform ( ) ; fn createSVGTransformFromMatrix ( ) ; fn getElementById ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGSVGElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGSVGElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGSVGElementVtbl < > { unsafe extern "system" fn putref_x < Impl : ISVGSVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn x < Impl : ISVGSVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_y < Impl : ISVGSVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn y < Impl : ISVGSVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_width < Impl : ISVGSVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn width < Impl : ISVGSVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_height < Impl : ISVGSVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn height < Impl : ISVGSVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetcontentScriptType < Impl : ISVGSVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn contentScriptType < Impl : ISVGSVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetcontentStyleType < Impl : ISVGSVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn contentStyleType < Impl : ISVGSVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_viewport < Impl : ISVGSVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn viewport < Impl : ISVGSVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetpixelUnitToMillimeterX < Impl : ISVGSVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn pixelUnitToMillimeterX < Impl : ISVGSVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetpixelUnitToMillimeterY < Impl : ISVGSVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn pixelUnitToMillimeterY < Impl : ISVGSVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetscreenPixelToMillimeterX < Impl : ISVGSVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn screenPixelToMillimeterX < Impl : ISVGSVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetscreenPixelToMillimeterY < Impl : ISVGSVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn screenPixelToMillimeterY < Impl : ISVGSVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetuseCurrentView < Impl : ISVGSVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn useCurrentView < Impl : ISVGSVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_currentView < Impl : ISVGSVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn currentView < Impl : ISVGSVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetcurrentScale < Impl : ISVGSVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn currentScale < Impl : ISVGSVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_currentTranslate < Impl : ISVGSVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn currentTranslate < Impl : ISVGSVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn suspendRedraw < Impl : ISVGSVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , maxwaitmilliseconds : u32 , presult : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn unsuspendRedraw < Impl : ISVGSVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , suspendhandeid : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn unsuspendRedrawAll < Impl : ISVGSVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn forceRedraw < Impl : ISVGSVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn pauseAnimations < Impl : ISVGSVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn unpauseAnimations < Impl : ISVGSVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn animationsPaused < Impl : ISVGSVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , presult : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getCurrentTime < Impl : ISVGSVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , presult : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn setCurrentTime < Impl : ISVGSVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , seconds : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getIntersectionList < Impl : ISVGSVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , rect : :: windows :: core :: RawPtr , referenceelement : :: windows :: core :: RawPtr , presult : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getEnclosureList < Impl : ISVGSVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , rect : :: windows :: core :: RawPtr , referenceelement : :: windows :: core :: RawPtr , presult : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn checkIntersection < Impl : ISVGSVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , element : :: windows :: core :: RawPtr , rect : :: windows :: core :: RawPtr , presult : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn checkEnclosure < Impl : ISVGSVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , element : :: windows :: core :: RawPtr , rect : :: windows :: core :: RawPtr , presult : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn deselectAll < Impl : ISVGSVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createSVGNumber < Impl : ISVGSVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , presult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createSVGLength < Impl : ISVGSVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , presult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createSVGAngle < Impl : ISVGSVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , presult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createSVGPoint < Impl : ISVGSVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , presult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createSVGMatrix < Impl : ISVGSVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , presult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createSVGRect < Impl : ISVGSVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , presult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createSVGTransform < Impl : ISVGSVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , presult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createSVGTransformFromMatrix < Impl : ISVGSVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , matrix : :: windows :: core :: RawPtr , presult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getElementById < Impl : ISVGSVGElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , elementid : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , presult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , putref_x : putref_x :: < Impl , IMPL_OFFSET > , x : x :: < Impl , IMPL_OFFSET > , putref_y : putref_y :: < Impl , IMPL_OFFSET > , y : y :: < Impl , IMPL_OFFSET > , putref_width : putref_width :: < Impl , IMPL_OFFSET > , width : width :: < Impl , IMPL_OFFSET > , putref_height : putref_height :: < Impl , IMPL_OFFSET > , height : height :: < Impl , IMPL_OFFSET > , SetcontentScriptType : SetcontentScriptType :: < Impl , IMPL_OFFSET > , contentScriptType : contentScriptType :: < Impl , IMPL_OFFSET > , SetcontentStyleType : SetcontentStyleType :: < Impl , IMPL_OFFSET > , contentStyleType : contentStyleType :: < Impl , IMPL_OFFSET > , putref_viewport : putref_viewport :: < Impl , IMPL_OFFSET > , viewport : viewport :: < Impl , IMPL_OFFSET > , SetpixelUnitToMillimeterX : SetpixelUnitToMillimeterX :: < Impl , IMPL_OFFSET > , pixelUnitToMillimeterX : pixelUnitToMillimeterX :: < Impl , IMPL_OFFSET > , SetpixelUnitToMillimeterY : SetpixelUnitToMillimeterY :: < Impl , IMPL_OFFSET > , pixelUnitToMillimeterY : pixelUnitToMillimeterY :: < Impl , IMPL_OFFSET > , SetscreenPixelToMillimeterX : SetscreenPixelToMillimeterX :: < Impl , IMPL_OFFSET > , screenPixelToMillimeterX : screenPixelToMillimeterX :: < Impl , IMPL_OFFSET > , SetscreenPixelToMillimeterY : SetscreenPixelToMillimeterY :: < Impl , IMPL_OFFSET > , screenPixelToMillimeterY : screenPixelToMillimeterY :: < Impl , IMPL_OFFSET > , SetuseCurrentView : SetuseCurrentView :: < Impl , IMPL_OFFSET > , useCurrentView : useCurrentView :: < Impl , IMPL_OFFSET > , putref_currentView : putref_currentView :: < Impl , IMPL_OFFSET > , currentView : currentView :: < Impl , IMPL_OFFSET > , SetcurrentScale : SetcurrentScale :: < Impl , IMPL_OFFSET > , currentScale : currentScale :: < Impl , IMPL_OFFSET > , putref_currentTranslate : putref_currentTranslate :: < Impl , IMPL_OFFSET > , currentTranslate : currentTranslate :: < Impl , IMPL_OFFSET > , suspendRedraw : suspendRedraw :: < Impl , IMPL_OFFSET > , unsuspendRedraw : unsuspendRedraw :: < Impl , IMPL_OFFSET > , unsuspendRedrawAll : unsuspendRedrawAll :: < Impl , IMPL_OFFSET > , forceRedraw : forceRedraw :: < Impl , IMPL_OFFSET > , pauseAnimations : pauseAnimations :: < Impl , IMPL_OFFSET > , unpauseAnimations : unpauseAnimations :: < Impl , IMPL_OFFSET > , animationsPaused : animationsPaused :: < Impl , IMPL_OFFSET > , getCurrentTime : getCurrentTime :: < Impl , IMPL_OFFSET > , setCurrentTime : setCurrentTime :: < Impl , IMPL_OFFSET > , getIntersectionList : getIntersectionList :: < Impl , IMPL_OFFSET > , getEnclosureList : getEnclosureList :: < Impl , IMPL_OFFSET > , checkIntersection : checkIntersection :: < Impl , IMPL_OFFSET > , checkEnclosure : checkEnclosure :: < Impl , IMPL_OFFSET > , deselectAll : deselectAll :: < Impl , IMPL_OFFSET > , createSVGNumber : createSVGNumber :: < Impl , IMPL_OFFSET > , createSVGLength : createSVGLength :: < Impl , IMPL_OFFSET > , createSVGAngle : createSVGAngle :: < Impl , IMPL_OFFSET > , createSVGPoint : createSVGPoint :: < Impl , IMPL_OFFSET > , createSVGMatrix : createSVGMatrix :: < Impl , IMPL_OFFSET > , createSVGRect : createSVGRect :: < Impl , IMPL_OFFSET > , createSVGTransform : createSVGTransform :: < Impl , IMPL_OFFSET > , createSVGTransformFromMatrix : createSVGTransformFromMatrix :: < Impl , IMPL_OFFSET > , getElementById : getElementById :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGSVGElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGScriptElementImpl < > : Sized + IDispatchImpl where { fn Settype ( ) ; fn r#type ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGScriptElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGScriptElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGScriptElementVtbl < > { unsafe extern "system" fn Settype < Impl : ISVGScriptElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn r#type < Impl : ISVGScriptElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Settype : Settype :: < Impl , IMPL_OFFSET > , r#type : r#type :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGScriptElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGStopElementImpl < > : Sized + IDispatchImpl where { fn putref_offset ( ) ; fn offset ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGStopElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGStopElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGStopElementVtbl < > { unsafe extern "system" fn putref_offset < Impl : ISVGStopElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn offset < Impl : ISVGStopElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , putref_offset : putref_offset :: < Impl , IMPL_OFFSET > , offset : offset :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGStopElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGStringListImpl < > : Sized + IDispatchImpl where { fn SetnumberOfItems ( ) ; fn numberOfItems ( ) ; fn clear ( ) ; fn initialize ( ) ; fn getItem ( ) ; fn insertItemBefore ( ) ; fn replaceItem ( ) ; fn removeItem ( ) ; fn appendItem ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGStringListVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGStringListImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGStringListVtbl < > { unsafe extern "system" fn SetnumberOfItems < Impl : ISVGStringListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn numberOfItems < Impl : ISVGStringListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clear < Impl : ISVGStringListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn initialize < Impl : ISVGStringListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , newitem : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ppresult : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getItem < Impl : ISVGStringListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , ppresult : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn insertItemBefore < Impl : ISVGStringListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , newitem : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , index : i32 , ppresult : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn replaceItem < Impl : ISVGStringListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , newitem : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , index : i32 , ppresult : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn removeItem < Impl : ISVGStringListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , ppresult : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn appendItem < Impl : ISVGStringListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , newitem : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ppresult : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetnumberOfItems : SetnumberOfItems :: < Impl , IMPL_OFFSET > , numberOfItems : numberOfItems :: < Impl , IMPL_OFFSET > , clear : clear :: < Impl , IMPL_OFFSET > , initialize : initialize :: < Impl , IMPL_OFFSET > , getItem : getItem :: < Impl , IMPL_OFFSET > , insertItemBefore : insertItemBefore :: < Impl , IMPL_OFFSET > , replaceItem : replaceItem :: < Impl , IMPL_OFFSET > , removeItem : removeItem :: < Impl , IMPL_OFFSET > , appendItem : appendItem :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGStringList < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGStylableImpl < > : Sized + IDispatchImpl where { fn className ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGStylableVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGStylableImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGStylableVtbl < > { unsafe extern "system" fn className < Impl : ISVGStylableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , className : className :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGStylable < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGStyleElementImpl < > : Sized + IDispatchImpl where { fn Settype ( ) ; fn r#type ( ) ; fn Setmedia ( ) ; fn media ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGStyleElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGStyleElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGStyleElementVtbl < > { unsafe extern "system" fn Settype < Impl : ISVGStyleElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn r#type < Impl : ISVGStyleElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setmedia < Impl : ISVGStyleElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn media < Impl : ISVGStyleElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Settype : Settype :: < Impl , IMPL_OFFSET > , r#type : r#type :: < Impl , IMPL_OFFSET > , Setmedia : Setmedia :: < Impl , IMPL_OFFSET > , media : media :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGStyleElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGSwitchElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGSwitchElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGSwitchElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGSwitchElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGSwitchElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGSymbolElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGSymbolElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGSymbolElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGSymbolElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGSymbolElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGTSpanElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGTSpanElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGTSpanElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGTSpanElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGTSpanElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGTestsImpl < > : Sized + IDispatchImpl where { fn requiredFeatures ( ) ; fn requiredExtensions ( ) ; fn systemLanguage ( ) ; fn hasExtension ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGTestsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGTestsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGTestsVtbl < > { unsafe extern "system" fn requiredFeatures < Impl : ISVGTestsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn requiredExtensions < Impl : ISVGTestsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn systemLanguage < Impl : ISVGTestsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn hasExtension < Impl : ISVGTestsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , extension : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , presult : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , requiredFeatures : requiredFeatures :: < Impl , IMPL_OFFSET > , requiredExtensions : requiredExtensions :: < Impl , IMPL_OFFSET > , systemLanguage : systemLanguage :: < Impl , IMPL_OFFSET > , hasExtension : hasExtension :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGTests < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGTextContentElementImpl < > : Sized + IDispatchImpl where { fn putref_textLength ( ) ; fn textLength ( ) ; fn putref_lengthAdjust ( ) ; fn lengthAdjust ( ) ; fn getNumberOfChars ( ) ; fn getComputedTextLength ( ) ; fn getSubStringLength ( ) ; fn getStartPositionOfChar ( ) ; fn getEndPositionOfChar ( ) ; fn getExtentOfChar ( ) ; fn getRotationOfChar ( ) ; fn getCharNumAtPosition ( ) ; fn selectSubString ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGTextContentElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGTextContentElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGTextContentElementVtbl < > { unsafe extern "system" fn putref_textLength < Impl : ISVGTextContentElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn textLength < Impl : ISVGTextContentElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_lengthAdjust < Impl : ISVGTextContentElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn lengthAdjust < Impl : ISVGTextContentElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getNumberOfChars < Impl : ISVGTextContentElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , presult : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getComputedTextLength < Impl : ISVGTextContentElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , presult : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getSubStringLength < Impl : ISVGTextContentElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , charnum : i32 , nchars : i32 , presult : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getStartPositionOfChar < Impl : ISVGTextContentElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , charnum : i32 , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getEndPositionOfChar < Impl : ISVGTextContentElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , charnum : i32 , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getExtentOfChar < Impl : ISVGTextContentElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , charnum : i32 , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getRotationOfChar < Impl : ISVGTextContentElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , charnum : i32 , presult : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getCharNumAtPosition < Impl : ISVGTextContentElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , point : :: windows :: core :: RawPtr , presult : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn selectSubString < Impl : ISVGTextContentElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , charnum : i32 , nchars : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , putref_textLength : putref_textLength :: < Impl , IMPL_OFFSET > , textLength : textLength :: < Impl , IMPL_OFFSET > , putref_lengthAdjust : putref_lengthAdjust :: < Impl , IMPL_OFFSET > , lengthAdjust : lengthAdjust :: < Impl , IMPL_OFFSET > , getNumberOfChars : getNumberOfChars :: < Impl , IMPL_OFFSET > , getComputedTextLength : getComputedTextLength :: < Impl , IMPL_OFFSET > , getSubStringLength : getSubStringLength :: < Impl , IMPL_OFFSET > , getStartPositionOfChar : getStartPositionOfChar :: < Impl , IMPL_OFFSET > , getEndPositionOfChar : getEndPositionOfChar :: < Impl , IMPL_OFFSET > , getExtentOfChar : getExtentOfChar :: < Impl , IMPL_OFFSET > , getRotationOfChar : getRotationOfChar :: < Impl , IMPL_OFFSET > , getCharNumAtPosition : getCharNumAtPosition :: < Impl , IMPL_OFFSET > , selectSubString : selectSubString :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGTextContentElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGTextElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGTextElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGTextElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGTextElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGTextElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGTextPathElementImpl < > : Sized + IDispatchImpl where { fn putref_startOffset ( ) ; fn startOffset ( ) ; fn putref_method ( ) ; fn method ( ) ; fn putref_spacing ( ) ; fn spacing ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGTextPathElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGTextPathElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGTextPathElementVtbl < > { unsafe extern "system" fn putref_startOffset < Impl : ISVGTextPathElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn startOffset < Impl : ISVGTextPathElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_method < Impl : ISVGTextPathElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn method < Impl : ISVGTextPathElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_spacing < Impl : ISVGTextPathElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn spacing < Impl : ISVGTextPathElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , putref_startOffset : putref_startOffset :: < Impl , IMPL_OFFSET > , startOffset : startOffset :: < Impl , IMPL_OFFSET > , putref_method : putref_method :: < Impl , IMPL_OFFSET > , method : method :: < Impl , IMPL_OFFSET > , putref_spacing : putref_spacing :: < Impl , IMPL_OFFSET > , spacing : spacing :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGTextPathElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGTextPositioningElementImpl < > : Sized + IDispatchImpl where { fn putref_x ( ) ; fn x ( ) ; fn putref_y ( ) ; fn y ( ) ; fn putref_dx ( ) ; fn dx ( ) ; fn putref_dy ( ) ; fn dy ( ) ; fn putref_rotate ( ) ; fn rotate ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGTextPositioningElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGTextPositioningElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGTextPositioningElementVtbl < > { unsafe extern "system" fn putref_x < Impl : ISVGTextPositioningElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn x < Impl : ISVGTextPositioningElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_y < Impl : ISVGTextPositioningElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn y < Impl : ISVGTextPositioningElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_dx < Impl : ISVGTextPositioningElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn dx < Impl : ISVGTextPositioningElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_dy < Impl : ISVGTextPositioningElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn dy < Impl : ISVGTextPositioningElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_rotate < Impl : ISVGTextPositioningElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn rotate < Impl : ISVGTextPositioningElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , putref_x : putref_x :: < Impl , IMPL_OFFSET > , x : x :: < Impl , IMPL_OFFSET > , putref_y : putref_y :: < Impl , IMPL_OFFSET > , y : y :: < Impl , IMPL_OFFSET > , putref_dx : putref_dx :: < Impl , IMPL_OFFSET > , dx : dx :: < Impl , IMPL_OFFSET > , putref_dy : putref_dy :: < Impl , IMPL_OFFSET > , dy : dy :: < Impl , IMPL_OFFSET > , putref_rotate : putref_rotate :: < Impl , IMPL_OFFSET > , rotate : rotate :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGTextPositioningElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGTitleElementImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGTitleElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGTitleElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGTitleElementVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGTitleElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGTransformImpl < > : Sized + IDispatchImpl where { fn Settype ( ) ; fn r#type ( ) ; fn putref_matrix ( ) ; fn matrix ( ) ; fn Setangle ( ) ; fn angle ( ) ; fn setMatrix ( ) ; fn setTranslate ( ) ; fn setScale ( ) ; fn setRotate ( ) ; fn setSkewX ( ) ; fn setSkewY ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGTransformVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGTransformImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGTransformVtbl < > { unsafe extern "system" fn Settype < Impl : ISVGTransformImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn r#type < Impl : ISVGTransformImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_matrix < Impl : ISVGTransformImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn matrix < Impl : ISVGTransformImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setangle < Impl : ISVGTransformImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn angle < Impl : ISVGTransformImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn setMatrix < Impl : ISVGTransformImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , matrix : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn setTranslate < Impl : ISVGTransformImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , tx : f32 , ty : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn setScale < Impl : ISVGTransformImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , sx : f32 , sy : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn setRotate < Impl : ISVGTransformImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , angle : f32 , cx : f32 , cy : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn setSkewX < Impl : ISVGTransformImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , angle : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn setSkewY < Impl : ISVGTransformImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , angle : f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Settype : Settype :: < Impl , IMPL_OFFSET > , r#type : r#type :: < Impl , IMPL_OFFSET > , putref_matrix : putref_matrix :: < Impl , IMPL_OFFSET > , matrix : matrix :: < Impl , IMPL_OFFSET > , Setangle : Setangle :: < Impl , IMPL_OFFSET > , angle : angle :: < Impl , IMPL_OFFSET > , setMatrix : setMatrix :: < Impl , IMPL_OFFSET > , setTranslate : setTranslate :: < Impl , IMPL_OFFSET > , setScale : setScale :: < Impl , IMPL_OFFSET > , setRotate : setRotate :: < Impl , IMPL_OFFSET > , setSkewX : setSkewX :: < Impl , IMPL_OFFSET > , setSkewY : setSkewY :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGTransform < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGTransformListImpl < > : Sized + IDispatchImpl where { fn SetnumberOfItems ( ) ; fn numberOfItems ( ) ; fn clear ( ) ; fn initialize ( ) ; fn getItem ( ) ; fn insertItemBefore ( ) ; fn replaceItem ( ) ; fn removeItem ( ) ; fn appendItem ( ) ; fn createSVGTransformFromMatrix ( ) ; fn consolidate ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGTransformListVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGTransformListImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGTransformListVtbl < > { unsafe extern "system" fn SetnumberOfItems < Impl : ISVGTransformListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn numberOfItems < Impl : ISVGTransformListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clear < Impl : ISVGTransformListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn initialize < Impl : ISVGTransformListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , newitem : :: windows :: core :: RawPtr , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getItem < Impl : ISVGTransformListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn insertItemBefore < Impl : ISVGTransformListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , newitem : :: windows :: core :: RawPtr , index : i32 , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn replaceItem < Impl : ISVGTransformListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , newitem : :: windows :: core :: RawPtr , index : i32 , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn removeItem < Impl : ISVGTransformListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , index : i32 , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn appendItem < Impl : ISVGTransformListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , newitem : :: windows :: core :: RawPtr , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn createSVGTransformFromMatrix < Impl : ISVGTransformListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , newitem : :: windows :: core :: RawPtr , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn consolidate < Impl : ISVGTransformListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetnumberOfItems : SetnumberOfItems :: < Impl , IMPL_OFFSET > , numberOfItems : numberOfItems :: < Impl , IMPL_OFFSET > , clear : clear :: < Impl , IMPL_OFFSET > , initialize : initialize :: < Impl , IMPL_OFFSET > , getItem : getItem :: < Impl , IMPL_OFFSET > , insertItemBefore : insertItemBefore :: < Impl , IMPL_OFFSET > , replaceItem : replaceItem :: < Impl , IMPL_OFFSET > , removeItem : removeItem :: < Impl , IMPL_OFFSET > , appendItem : appendItem :: < Impl , IMPL_OFFSET > , createSVGTransformFromMatrix : createSVGTransformFromMatrix :: < Impl , IMPL_OFFSET > , consolidate : consolidate :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGTransformList < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGTransformableImpl < > : Sized + IDispatchImpl where { fn transform ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGTransformableVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGTransformableImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGTransformableVtbl < > { unsafe extern "system" fn transform < Impl : ISVGTransformableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , transform : transform :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGTransformable < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGURIReferenceImpl < > : Sized + IDispatchImpl where { fn href ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGURIReferenceVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGURIReferenceImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGURIReferenceVtbl < > { unsafe extern "system" fn href < Impl : ISVGURIReferenceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , href : href :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGURIReference < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGUseElementImpl < > : Sized + IDispatchImpl where { fn putref_x ( ) ; fn x ( ) ; fn putref_y ( ) ; fn y ( ) ; fn putref_width ( ) ; fn width ( ) ; fn putref_height ( ) ; fn height ( ) ; fn putref_instanceRoot ( ) ; fn instanceRoot ( ) ; fn putref_animatedInstanceRoot ( ) ; fn animatedInstanceRoot ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGUseElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGUseElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGUseElementVtbl < > { unsafe extern "system" fn putref_x < Impl : ISVGUseElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn x < Impl : ISVGUseElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_y < Impl : ISVGUseElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn y < Impl : ISVGUseElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_width < Impl : ISVGUseElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn width < Impl : ISVGUseElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_height < Impl : ISVGUseElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn height < Impl : ISVGUseElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_instanceRoot < Impl : ISVGUseElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn instanceRoot < Impl : ISVGUseElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn putref_animatedInstanceRoot < Impl : ISVGUseElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn animatedInstanceRoot < Impl : ISVGUseElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , putref_x : putref_x :: < Impl , IMPL_OFFSET > , x : x :: < Impl , IMPL_OFFSET > , putref_y : putref_y :: < Impl , IMPL_OFFSET > , y : y :: < Impl , IMPL_OFFSET > , putref_width : putref_width :: < Impl , IMPL_OFFSET > , width : width :: < Impl , IMPL_OFFSET > , putref_height : putref_height :: < Impl , IMPL_OFFSET > , height : height :: < Impl , IMPL_OFFSET > , putref_instanceRoot : putref_instanceRoot :: < Impl , IMPL_OFFSET > , instanceRoot : instanceRoot :: < Impl , IMPL_OFFSET > , putref_animatedInstanceRoot : putref_animatedInstanceRoot :: < Impl , IMPL_OFFSET > , animatedInstanceRoot : animatedInstanceRoot :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGUseElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGViewElementImpl < > : Sized + IDispatchImpl where { fn putref_viewTarget ( ) ; fn viewTarget ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGViewElementVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGViewElementImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGViewElementVtbl < > { unsafe extern "system" fn putref_viewTarget < Impl : ISVGViewElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn viewTarget < Impl : ISVGViewElementImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , putref_viewTarget : putref_viewTarget :: < Impl , IMPL_OFFSET > , viewTarget : viewTarget :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGViewElement < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGViewSpecImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGViewSpecVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGViewSpecImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGViewSpecVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGViewSpec < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGZoomAndPanImpl < > : Sized + IDispatchImpl where { fn zoomAndPan ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGZoomAndPanVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGZoomAndPanImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGZoomAndPanVtbl < > { unsafe extern "system" fn zoomAndPan < Impl : ISVGZoomAndPanImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , zoomAndPan : zoomAndPan :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGZoomAndPan < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ISVGZoomEventImpl < > : Sized + IDispatchImpl where { fn zoomRectScreen ( ) ; fn previousScale ( ) ; fn previousTranslate ( ) ; fn newScale ( ) ; fn newTranslate ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ISVGZoomEventVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISVGZoomEventImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISVGZoomEventVtbl < > { unsafe extern "system" fn zoomRectScreen < Impl : ISVGZoomEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn previousScale < Impl : ISVGZoomEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn previousTranslate < Impl : ISVGZoomEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn newScale < Impl : ISVGZoomEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn newTranslate < Impl : ISVGZoomEventImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , zoomRectScreen : zoomRectScreen :: < Impl , IMPL_OFFSET > , previousScale : previousScale :: < Impl , IMPL_OFFSET > , previousTranslate : previousTranslate :: < Impl , IMPL_OFFSET > , newScale : newScale :: < Impl , IMPL_OFFSET > , newTranslate : newTranslate :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISVGZoomEvent < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IScriptEventHandlerImpl < > : Sized where { fn FunctionName ( ) ; fn DebugDocumentContext ( ) ; fn EventHandlerDispatch ( ) ; fn UsesCapture ( ) ; fn Cookie ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IScriptEventHandlerVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IScriptEventHandlerImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IScriptEventHandlerVtbl < > { unsafe extern "system" fn FunctionName < Impl : IScriptEventHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrfunctionname : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DebugDocumentContext < Impl : IScriptEventHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppdebugdocumentcontext : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn EventHandlerDispatch < Impl : IScriptEventHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppdisphandler : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UsesCapture < Impl : IScriptEventHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfusescapture : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Cookie < Impl : IScriptEventHandlerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pullcookie : * mut u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , FunctionName : FunctionName :: < Impl , IMPL_OFFSET > , DebugDocumentContext : DebugDocumentContext :: < Impl , IMPL_OFFSET > , EventHandlerDispatch : EventHandlerDispatch :: < Impl , IMPL_OFFSET > , UsesCapture : UsesCapture :: < Impl , IMPL_OFFSET > , Cookie : Cookie :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IScriptEventHandler < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IScriptEventHandlerSourceInfoImpl < > : Sized where { fn GetSourceInfo ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IScriptEventHandlerSourceInfoVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IScriptEventHandlerSourceInfoImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IScriptEventHandlerSourceInfoVtbl < > { unsafe extern "system" fn GetSourceInfo < Impl : IScriptEventHandlerSourceInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrfunctionname : * mut super::super::Foundation:: BSTR , line : * mut u32 , column : * mut u32 , cchlength : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetSourceInfo : GetSourceInfo :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IScriptEventHandlerSourceInfo < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IScrollableContextMenuImpl < > : Sized where { fn AddItem ( ) ; fn ShowModal ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IScrollableContextMenuVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IScrollableContextMenuImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IScrollableContextMenuVtbl < > { unsafe extern "system" fn AddItem < Impl : IScrollableContextMenuImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , itemtext : super::super::Foundation:: PWSTR , cmdid : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ShowModal < Impl : IScrollableContextMenuImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , x : i32 , y : i32 , cmdid : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , AddItem : AddItem :: < Impl , IMPL_OFFSET > , ShowModal : ShowModal :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IScrollableContextMenu < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IScrollableContextMenu2Impl < > : Sized + IScrollableContextMenuImpl where { fn AddSeparator ( ) ; fn SetPlacement ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IScrollableContextMenu2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IScrollableContextMenu2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IScrollableContextMenu2Vtbl < > { unsafe extern "system" fn AddSeparator < Impl : IScrollableContextMenu2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetPlacement < Impl : IScrollableContextMenu2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , scmp : SCROLLABLECONTEXTMENU_PLACEMENT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , AddSeparator : AddSeparator :: < Impl , IMPL_OFFSET > , SetPlacement : SetPlacement :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IScrollableContextMenu2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait ISecureUrlHostImpl < > : Sized where { fn ValidateSecureUrl ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > ISecureUrlHostVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISecureUrlHostImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISecureUrlHostVtbl < > { unsafe extern "system" fn ValidateSecureUrl < Impl : ISecureUrlHostImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfallow : * mut super::super::Foundation:: BOOL , pchurlinquestion : super::super::Foundation:: PWSTR , dwflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , ValidateSecureUrl : ValidateSecureUrl :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISecureUrlHost < > as :: windows :: core :: Interface > :: IID } } pub trait ISegmentImpl < > : Sized where { fn GetPointers ( ) ; } impl < > ISegmentVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISegmentImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISegmentVtbl < > { unsafe extern "system" fn GetPointers < Impl : ISegmentImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pistart : :: windows :: core :: RawPtr , piend : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetPointers : GetPointers :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISegment < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait ISegmentListImpl < > : Sized where { fn CreateIterator ( ) ; fn GetType ( ) ; fn IsEmpty ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > ISegmentListVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISegmentListImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISegmentListVtbl < > { unsafe extern "system" fn CreateIterator < Impl : ISegmentListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppiiter : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetType < Impl : ISegmentListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , petype : * mut SELECTION_TYPE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsEmpty < Impl : ISegmentListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfempty : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , CreateIterator : CreateIterator :: < Impl , IMPL_OFFSET > , GetType : GetType :: < Impl , IMPL_OFFSET > , IsEmpty : IsEmpty :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISegmentList < > as :: windows :: core :: Interface > :: IID } } pub trait ISegmentListIteratorImpl < > : Sized where { fn Current ( ) ; fn First ( ) ; fn IsDone ( ) ; fn Advance ( ) ; } impl < > ISegmentListIteratorVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISegmentListIteratorImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISegmentListIteratorVtbl < > { unsafe extern "system" fn Current < Impl : ISegmentListIteratorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppisegment : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn First < Impl : ISegmentListIteratorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsDone < Impl : ISegmentListIteratorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Advance < Impl : ISegmentListIteratorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Current : Current :: < Impl , IMPL_OFFSET > , First : First :: < Impl , IMPL_OFFSET > , IsDone : IsDone :: < Impl , IMPL_OFFSET > , Advance : Advance :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISegmentListIterator < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_System_Com" ) ] pub trait ISelectionServicesImpl < > : Sized where { fn SetSelectionType ( ) ; fn GetMarkupContainer ( ) ; fn AddSegment ( ) ; fn AddElementSegment ( ) ; fn RemoveSegment ( ) ; fn GetSelectionServicesListener ( ) ; } # [ cfg ( feature ="Win32_System_Com" ) ] impl < > ISelectionServicesVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISelectionServicesImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISelectionServicesVtbl < > { unsafe extern "system" fn SetSelectionType < Impl : ISelectionServicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , etype : SELECTION_TYPE , pilistener : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetMarkupContainer < Impl : ISelectionServicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppicontainer : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddSegment < Impl : ISelectionServicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pistart : :: windows :: core :: RawPtr , piend : :: windows :: core :: RawPtr , ppisegmentadded : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddElementSegment < Impl : ISelectionServicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pielement : :: windows :: core :: RawPtr , ppisegmentadded : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RemoveSegment < Impl : ISelectionServicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pisegment : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetSelectionServicesListener < Impl : ISelectionServicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppiselectionserviceslistener : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetSelectionType : SetSelectionType :: < Impl , IMPL_OFFSET > , GetMarkupContainer : GetMarkupContainer :: < Impl , IMPL_OFFSET > , AddSegment : AddSegment :: < Impl , IMPL_OFFSET > , AddElementSegment : AddElementSegment :: < Impl , IMPL_OFFSET > , RemoveSegment : RemoveSegment :: < Impl , IMPL_OFFSET > , GetSelectionServicesListener : GetSelectionServicesListener :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISelectionServices < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait ISelectionServicesListenerImpl < > : Sized where { fn BeginSelectionUndo ( ) ; fn EndSelectionUndo ( ) ; fn OnSelectedElementExit ( ) ; fn OnChangeType ( ) ; fn GetTypeDetail ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > ISelectionServicesListenerVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISelectionServicesListenerImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISelectionServicesListenerVtbl < > { unsafe extern "system" fn BeginSelectionUndo < Impl : ISelectionServicesListenerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn EndSelectionUndo < Impl : ISelectionServicesListenerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnSelectedElementExit < Impl : ISelectionServicesListenerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pielementstart : :: windows :: core :: RawPtr , pielementend : :: windows :: core :: RawPtr , pielementcontentstart : :: windows :: core :: RawPtr , pielementcontentend : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnChangeType < Impl : ISelectionServicesListenerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , etype : SELECTION_TYPE , pilistener : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetTypeDetail < Impl : ISelectionServicesListenerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ptypedetail : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , BeginSelectionUndo : BeginSelectionUndo :: < Impl , IMPL_OFFSET > , EndSelectionUndo : EndSelectionUndo :: < Impl , IMPL_OFFSET > , OnSelectedElementExit : OnSelectedElementExit :: < Impl , IMPL_OFFSET > , OnChangeType : OnChangeType :: < Impl , IMPL_OFFSET > , GetTypeDetail : GetTypeDetail :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISelectionServicesListener < > as :: windows :: core :: Interface > :: IID } } pub trait ISequenceNumberImpl < > : Sized where { fn GetSequenceNumber ( ) ; } impl < > ISequenceNumberVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISequenceNumberImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISequenceNumberVtbl < > { unsafe extern "system" fn GetSequenceNumber < Impl : ISequenceNumberImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ncurrent : i32 , pnnew : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetSequenceNumber : GetSequenceNumber :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISequenceNumber < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_System_Com" ) ] pub trait ISniffStreamImpl < > : Sized where { fn Init ( ) ; fn Peek ( ) ; } # [ cfg ( feature ="Win32_System_Com" ) ] impl < > ISniffStreamVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISniffStreamImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISniffStreamVtbl < > { unsafe extern "system" fn Init < Impl : ISniffStreamImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pstream : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Peek < Impl : ISniffStreamImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbuffer : * mut :: core :: ffi :: c_void , nbytes : u32 , pnbytesread : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Init : Init :: < Impl , IMPL_OFFSET > , Peek : Peek :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISniffStream < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait ISurfacePresenterImpl < > : Sized where { fn Present ( ) ; fn GetBuffer ( ) ; fn IsCurrent ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > ISurfacePresenterVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISurfacePresenterImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISurfacePresenterVtbl < > { unsafe extern "system" fn Present < Impl : ISurfacePresenterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ubuffer : u32 , pdirty : * const super::super::Foundation:: RECT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetBuffer < Impl : ISurfacePresenterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , backbufferindex : u32 , riid : * const :: windows :: core :: GUID , ppbuffer : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsCurrent < Impl : ISurfacePresenterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , piscurrent : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Present : Present :: < Impl , IMPL_OFFSET > , GetBuffer : GetBuffer :: < Impl , IMPL_OFFSET > , IsCurrent : IsCurrent :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISurfacePresenter < > as :: windows :: core :: Interface > :: IID } } pub trait ISurfacePresenterFlipImpl < > : Sized where { fn Present ( ) ; fn GetBuffer ( ) ; } impl < > ISurfacePresenterFlipVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISurfacePresenterFlipImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISurfacePresenterFlipVtbl < > { unsafe extern "system" fn Present < Impl : ISurfacePresenterFlipImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetBuffer < Impl : ISurfacePresenterFlipImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , backbufferindex : u32 , riid : * const :: windows :: core :: GUID , ppbuffer : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Present : Present :: < Impl , IMPL_OFFSET > , GetBuffer : GetBuffer :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISurfacePresenterFlip < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Graphics_Dxgi_Common" ) ] pub trait ISurfacePresenterFlip2Impl < > : Sized where { fn SetRotation ( ) ; } # [ cfg ( feature ="Win32_Graphics_Dxgi_Common" ) ] impl < > ISurfacePresenterFlip2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISurfacePresenterFlip2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISurfacePresenterFlip2Vtbl < > { unsafe extern "system" fn SetRotation < Impl : ISurfacePresenterFlip2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dxgirotation : super::super::Graphics::Dxgi::Common:: DXGI_MODE_ROTATION , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetRotation : SetRotation :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISurfacePresenterFlip2 < > as :: windows :: core :: Interface > :: IID } } pub trait ISurfacePresenterFlipBufferImpl < > : Sized where { fn BeginDraw ( ) ; fn EndDraw ( ) ; } impl < > ISurfacePresenterFlipBufferVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISurfacePresenterFlipBufferImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISurfacePresenterFlipBufferVtbl < > { unsafe extern "system" fn BeginDraw < Impl : ISurfacePresenterFlipBufferImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , riid : * const :: windows :: core :: GUID , ppbuffer : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn EndDraw < Impl : ISurfacePresenterFlipBufferImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , BeginDraw : BeginDraw :: < Impl , IMPL_OFFSET > , EndDraw : EndDraw :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISurfacePresenterFlipBuffer < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Ole" ) ) ] pub trait ITargetContainerImpl < > : Sized where { fn GetFrameUrl ( ) ; fn GetFramesContainer ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Ole" ) ) ] impl < > ITargetContainerVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ITargetContainerImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ITargetContainerVtbl < > { unsafe extern "system" fn GetFrameUrl < Impl : ITargetContainerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppszframesrc : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetFramesContainer < Impl : ITargetContainerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppcontainer : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetFrameUrl : GetFrameUrl :: < Impl , IMPL_OFFSET > , GetFramesContainer : GetFramesContainer :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ITargetContainer < > as :: windows :: core :: Interface > :: IID } } pub trait ITargetEmbeddingImpl < > : Sized where { fn GetTargetFrame ( ) ; } impl < > ITargetEmbeddingVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ITargetEmbeddingImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ITargetEmbeddingVtbl < > { unsafe extern "system" fn GetTargetFrame < Impl : ITargetEmbeddingImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pptargetframe : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetTargetFrame : GetTargetFrame :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ITargetEmbedding < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Ole" ) ) ] pub trait ITargetFrameImpl < > : Sized where { fn SetFrameName ( ) ; fn GetFrameName ( ) ; fn GetParentFrame ( ) ; fn FindFrame ( ) ; fn SetFrameSrc ( ) ; fn GetFrameSrc ( ) ; fn GetFramesContainer ( ) ; fn SetFrameOptions ( ) ; fn GetFrameOptions ( ) ; fn SetFrameMargins ( ) ; fn GetFrameMargins ( ) ; fn RemoteNavigate ( ) ; fn OnChildFrameActivate ( ) ; fn OnChildFrameDeactivate ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Ole" ) ) ] impl < > ITargetFrameVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ITargetFrameImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ITargetFrameVtbl < > { unsafe extern "system" fn SetFrameName < Impl : ITargetFrameImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszframename : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetFrameName < Impl : ITargetFrameImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppszframename : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetParentFrame < Impl : ITargetFrameImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppunkparent : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn FindFrame < Impl : ITargetFrameImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psztargetname : super::super::Foundation:: PWSTR , ppunkcontextframe : * mut :: core :: ffi :: c_void , dwflags : u32 , ppunktargetframe : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetFrameSrc < Impl : ITargetFrameImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszframesrc : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetFrameSrc < Impl : ITargetFrameImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppszframesrc : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetFramesContainer < Impl : ITargetFrameImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppcontainer : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetFrameOptions < Impl : ITargetFrameImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetFrameOptions < Impl : ITargetFrameImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdwflags : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetFrameMargins < Impl : ITargetFrameImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwwidth : u32 , dwheight : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetFrameMargins < Impl : ITargetFrameImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdwwidth : * mut u32 , pdwheight : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RemoteNavigate < Impl : ITargetFrameImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , clength : u32 , puldata : * const u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnChildFrameActivate < Impl : ITargetFrameImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punkchildframe : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnChildFrameDeactivate < Impl : ITargetFrameImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punkchildframe : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetFrameName : SetFrameName :: < Impl , IMPL_OFFSET > , GetFrameName : GetFrameName :: < Impl , IMPL_OFFSET > , GetParentFrame : GetParentFrame :: < Impl , IMPL_OFFSET > , FindFrame : FindFrame :: < Impl , IMPL_OFFSET > , SetFrameSrc : SetFrameSrc :: < Impl , IMPL_OFFSET > , GetFrameSrc : GetFrameSrc :: < Impl , IMPL_OFFSET > , GetFramesContainer : GetFramesContainer :: < Impl , IMPL_OFFSET > , SetFrameOptions : SetFrameOptions :: < Impl , IMPL_OFFSET > , GetFrameOptions : GetFrameOptions :: < Impl , IMPL_OFFSET > , SetFrameMargins : SetFrameMargins :: < Impl , IMPL_OFFSET > , GetFrameMargins : GetFrameMargins :: < Impl , IMPL_OFFSET > , RemoteNavigate : RemoteNavigate :: < Impl , IMPL_OFFSET > , OnChildFrameActivate : OnChildFrameActivate :: < Impl , IMPL_OFFSET > , OnChildFrameDeactivate : OnChildFrameDeactivate :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ITargetFrame < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Ole" ) ) ] pub trait ITargetFrame2Impl < > : Sized where { fn SetFrameName ( ) ; fn GetFrameName ( ) ; fn GetParentFrame ( ) ; fn SetFrameSrc ( ) ; fn GetFrameSrc ( ) ; fn GetFramesContainer ( ) ; fn SetFrameOptions ( ) ; fn GetFrameOptions ( ) ; fn SetFrameMargins ( ) ; fn GetFrameMargins ( ) ; fn FindFrame ( ) ; fn GetTargetAlias ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Ole" ) ) ] impl < > ITargetFrame2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ITargetFrame2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ITargetFrame2Vtbl < > { unsafe extern "system" fn SetFrameName < Impl : ITargetFrame2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszframename : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetFrameName < Impl : ITargetFrame2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppszframename : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetParentFrame < Impl : ITargetFrame2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppunkparent : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetFrameSrc < Impl : ITargetFrame2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszframesrc : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetFrameSrc < Impl : ITargetFrame2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppszframesrc : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetFramesContainer < Impl : ITargetFrame2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppcontainer : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetFrameOptions < Impl : ITargetFrame2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetFrameOptions < Impl : ITargetFrame2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdwflags : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetFrameMargins < Impl : ITargetFrame2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwwidth : u32 , dwheight : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetFrameMargins < Impl : ITargetFrame2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdwwidth : * mut u32 , pdwheight : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn FindFrame < Impl : ITargetFrame2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psztargetname : super::super::Foundation:: PWSTR , dwflags : u32 , ppunktargetframe : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetTargetAlias < Impl : ITargetFrame2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psztargetname : super::super::Foundation:: PWSTR , ppsztargetalias : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetFrameName : SetFrameName :: < Impl , IMPL_OFFSET > , GetFrameName : GetFrameName :: < Impl , IMPL_OFFSET > , GetParentFrame : GetParentFrame :: < Impl , IMPL_OFFSET > , SetFrameSrc : SetFrameSrc :: < Impl , IMPL_OFFSET > , GetFrameSrc : GetFrameSrc :: < Impl , IMPL_OFFSET > , GetFramesContainer : GetFramesContainer :: < Impl , IMPL_OFFSET > , SetFrameOptions : SetFrameOptions :: < Impl , IMPL_OFFSET > , GetFrameOptions : GetFrameOptions :: < Impl , IMPL_OFFSET > , SetFrameMargins : SetFrameMargins :: < Impl , IMPL_OFFSET > , GetFrameMargins : GetFrameMargins :: < Impl , IMPL_OFFSET > , FindFrame : FindFrame :: < Impl , IMPL_OFFSET > , GetTargetAlias : GetTargetAlias :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ITargetFrame2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait ITargetFramePrivImpl < > : Sized where { fn FindFrameDownwards ( ) ; fn FindFrameInContext ( ) ; fn OnChildFrameActivate ( ) ; fn OnChildFrameDeactivate ( ) ; fn NavigateHack ( ) ; fn FindBrowserByIndex ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > ITargetFramePrivVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ITargetFramePrivImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ITargetFramePrivVtbl < > { unsafe extern "system" fn FindFrameDownwards < Impl : ITargetFramePrivImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psztargetname : super::super::Foundation:: PWSTR , dwflags : u32 , ppunktargetframe : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn FindFrameInContext < Impl : ITargetFramePrivImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psztargetname : super::super::Foundation:: PWSTR , punkcontextframe : * mut :: core :: ffi :: c_void , dwflags : u32 , ppunktargetframe : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnChildFrameActivate < Impl : ITargetFramePrivImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punkchildframe : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnChildFrameDeactivate < Impl : ITargetFramePrivImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punkchildframe : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn NavigateHack < Impl : ITargetFramePrivImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , grfhlnf : u32 , pbc : :: windows :: core :: RawPtr , pibsc : :: windows :: core :: RawPtr , psztargetname : super::super::Foundation:: PWSTR , pszurl : super::super::Foundation:: PWSTR , pszlocation : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn FindBrowserByIndex < Impl : ITargetFramePrivImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwid : u32 , ppunkbrowser : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , FindFrameDownwards : FindFrameDownwards :: < Impl , IMPL_OFFSET > , FindFrameInContext : FindFrameInContext :: < Impl , IMPL_OFFSET > , OnChildFrameActivate : OnChildFrameActivate :: < Impl , IMPL_OFFSET > , OnChildFrameDeactivate : OnChildFrameDeactivate :: < Impl , IMPL_OFFSET > , NavigateHack : NavigateHack :: < Impl , IMPL_OFFSET > , FindBrowserByIndex : FindBrowserByIndex :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ITargetFramePriv < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait ITargetFramePriv2Impl < > : Sized + ITargetFramePrivImpl where { fn AggregatedNavigation2 ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > ITargetFramePriv2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ITargetFramePriv2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ITargetFramePriv2Vtbl < > { unsafe extern "system" fn AggregatedNavigation2 < Impl : ITargetFramePriv2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , grfhlnf : u32 , pbc : :: windows :: core :: RawPtr , pibsc : :: windows :: core :: RawPtr , psztargetname : super::super::Foundation:: PWSTR , puri : :: windows :: core :: RawPtr , pszlocation : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , AggregatedNavigation2 : AggregatedNavigation2 :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ITargetFramePriv2 < > as :: windows :: core :: Interface > :: IID } } pub trait ITargetNotifyImpl < > : Sized where { fn OnCreate ( ) ; fn OnReuse ( ) ; } impl < > ITargetNotifyVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ITargetNotifyImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ITargetNotifyVtbl < > { unsafe extern "system" fn OnCreate < Impl : ITargetNotifyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punkdestination : * mut :: core :: ffi :: c_void , cbcookie : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnReuse < Impl : ITargetNotifyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punkdestination : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , OnCreate : OnCreate :: < Impl , IMPL_OFFSET > , OnReuse : OnReuse :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ITargetNotify < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait ITargetNotify2Impl < > : Sized + ITargetNotifyImpl where { fn GetOptionString ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > ITargetNotify2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ITargetNotify2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ITargetNotify2Vtbl < > { unsafe extern "system" fn GetOptionString < Impl : ITargetNotify2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstroptions : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , GetOptionString : GetOptionString :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ITargetNotify2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ITemplatePrinterImpl < > : Sized + IDispatchImpl where { fn startDoc ( ) ; fn stopDoc ( ) ; fn printBlankPage ( ) ; fn printPage ( ) ; fn ensurePrintDialogDefaults ( ) ; fn showPrintDialog ( ) ; fn showPageSetupDialog ( ) ; fn printNonNative ( ) ; fn printNonNativeFrames ( ) ; fn SetframesetDocument ( ) ; fn framesetDocument ( ) ; fn SetframeActive ( ) ; fn frameActive ( ) ; fn SetframeAsShown ( ) ; fn frameAsShown ( ) ; fn Setselection ( ) ; fn selection ( ) ; fn SetselectedPages ( ) ; fn selectedPages ( ) ; fn SetcurrentPage ( ) ; fn currentPage ( ) ; fn SetcurrentPageAvail ( ) ; fn currentPageAvail ( ) ; fn Setcollate ( ) ; fn collate ( ) ; fn duplex ( ) ; fn Setcopies ( ) ; fn copies ( ) ; fn SetpageFrom ( ) ; fn pageFrom ( ) ; fn SetpageTo ( ) ; fn pageTo ( ) ; fn SettableOfLinks ( ) ; fn tableOfLinks ( ) ; fn SetallLinkedDocuments ( ) ; fn allLinkedDocuments ( ) ; fn Setheader ( ) ; fn header ( ) ; fn Setfooter ( ) ; fn footer ( ) ; fn SetmarginLeft ( ) ; fn marginLeft ( ) ; fn SetmarginRight ( ) ; fn marginRight ( ) ; fn SetmarginTop ( ) ; fn marginTop ( ) ; fn SetmarginBottom ( ) ; fn marginBottom ( ) ; fn pageWidth ( ) ; fn pageHeight ( ) ; fn unprintableLeft ( ) ; fn unprintableTop ( ) ; fn unprintableRight ( ) ; fn unprintableBottom ( ) ; fn updatePageStatus ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ITemplatePrinterVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ITemplatePrinterImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ITemplatePrinterVtbl < > { unsafe extern "system" fn startDoc < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrtitle : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn stopDoc < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn printBlankPage < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn printPage < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pelemdisp : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ensurePrintDialogDefaults < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn showPrintDialog < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn showPageSetupDialog < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn printNonNative < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pmarkup : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn printNonNativeFrames < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pmarkup : * mut :: core :: ffi :: c_void , factiveframe : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetframesetDocument < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn framesetDocument < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetframeActive < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn frameActive < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetframeAsShown < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn frameAsShown < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setselection < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn selection < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetselectedPages < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn selectedPages < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetcurrentPage < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn currentPage < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetcurrentPageAvail < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn currentPageAvail < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setcollate < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn collate < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn duplex < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setcopies < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : u16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn copies < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut u16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetpageFrom < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : u16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn pageFrom < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut u16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetpageTo < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : u16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn pageTo < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut u16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettableOfLinks < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn tableOfLinks < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetallLinkedDocuments < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn allLinkedDocuments < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setheader < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn header < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setfooter < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn footer < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmarginLeft < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn marginLeft < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmarginRight < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn marginRight < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmarginTop < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn marginTop < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetmarginBottom < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn marginBottom < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn pageWidth < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn pageHeight < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn unprintableLeft < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn unprintableTop < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn unprintableRight < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn unprintableBottom < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn updatePageStatus < Impl : ITemplatePrinterImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * const i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , startDoc : startDoc :: < Impl , IMPL_OFFSET > , stopDoc : stopDoc :: < Impl , IMPL_OFFSET > , printBlankPage : printBlankPage :: < Impl , IMPL_OFFSET > , printPage : printPage :: < Impl , IMPL_OFFSET > , ensurePrintDialogDefaults : ensurePrintDialogDefaults :: < Impl , IMPL_OFFSET > , showPrintDialog : showPrintDialog :: < Impl , IMPL_OFFSET > , showPageSetupDialog : showPageSetupDialog :: < Impl , IMPL_OFFSET > , printNonNative : printNonNative :: < Impl , IMPL_OFFSET > , printNonNativeFrames : printNonNativeFrames :: < Impl , IMPL_OFFSET > , SetframesetDocument : SetframesetDocument :: < Impl , IMPL_OFFSET > , framesetDocument : framesetDocument :: < Impl , IMPL_OFFSET > , SetframeActive : SetframeActive :: < Impl , IMPL_OFFSET > , frameActive : frameActive :: < Impl , IMPL_OFFSET > , SetframeAsShown : SetframeAsShown :: < Impl , IMPL_OFFSET > , frameAsShown : frameAsShown :: < Impl , IMPL_OFFSET > , Setselection : Setselection :: < Impl , IMPL_OFFSET > , selection : selection :: < Impl , IMPL_OFFSET > , SetselectedPages : SetselectedPages :: < Impl , IMPL_OFFSET > , selectedPages : selectedPages :: < Impl , IMPL_OFFSET > , SetcurrentPage : SetcurrentPage :: < Impl , IMPL_OFFSET > , currentPage : currentPage :: < Impl , IMPL_OFFSET > , SetcurrentPageAvail : SetcurrentPageAvail :: < Impl , IMPL_OFFSET > , currentPageAvail : currentPageAvail :: < Impl , IMPL_OFFSET > , Setcollate : Setcollate :: < Impl , IMPL_OFFSET > , collate : collate :: < Impl , IMPL_OFFSET > , duplex : duplex :: < Impl , IMPL_OFFSET > , Setcopies : Setcopies :: < Impl , IMPL_OFFSET > , copies : copies :: < Impl , IMPL_OFFSET > , SetpageFrom : SetpageFrom :: < Impl , IMPL_OFFSET > , pageFrom : pageFrom :: < Impl , IMPL_OFFSET > , SetpageTo : SetpageTo :: < Impl , IMPL_OFFSET > , pageTo : pageTo :: < Impl , IMPL_OFFSET > , SettableOfLinks : SettableOfLinks :: < Impl , IMPL_OFFSET > , tableOfLinks : tableOfLinks :: < Impl , IMPL_OFFSET > , SetallLinkedDocuments : SetallLinkedDocuments :: < Impl , IMPL_OFFSET > , allLinkedDocuments : allLinkedDocuments :: < Impl , IMPL_OFFSET > , Setheader : Setheader :: < Impl , IMPL_OFFSET > , header : header :: < Impl , IMPL_OFFSET > , Setfooter : Setfooter :: < Impl , IMPL_OFFSET > , footer : footer :: < Impl , IMPL_OFFSET > , SetmarginLeft : SetmarginLeft :: < Impl , IMPL_OFFSET > , marginLeft : marginLeft :: < Impl , IMPL_OFFSET > , SetmarginRight : SetmarginRight :: < Impl , IMPL_OFFSET > , marginRight : marginRight :: < Impl , IMPL_OFFSET > , SetmarginTop : SetmarginTop :: < Impl , IMPL_OFFSET > , marginTop : marginTop :: < Impl , IMPL_OFFSET > , SetmarginBottom : SetmarginBottom :: < Impl , IMPL_OFFSET > , marginBottom : marginBottom :: < Impl , IMPL_OFFSET > , pageWidth : pageWidth :: < Impl , IMPL_OFFSET > , pageHeight : pageHeight :: < Impl , IMPL_OFFSET > , unprintableLeft : unprintableLeft :: < Impl , IMPL_OFFSET > , unprintableTop : unprintableTop :: < Impl , IMPL_OFFSET > , unprintableRight : unprintableRight :: < Impl , IMPL_OFFSET > , unprintableBottom : unprintableBottom :: < Impl , IMPL_OFFSET > , updatePageStatus : updatePageStatus :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ITemplatePrinter < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ITemplatePrinter2Impl < > : Sized + ITemplatePrinterImpl + IDispatchImpl where { fn SetselectionEnabled ( ) ; fn selectionEnabled ( ) ; fn SetframeActiveEnabled ( ) ; fn frameActiveEnabled ( ) ; fn Setorientation ( ) ; fn orientation ( ) ; fn SetusePrinterCopyCollate ( ) ; fn usePrinterCopyCollate ( ) ; fn deviceSupports ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ITemplatePrinter2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ITemplatePrinter2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ITemplatePrinter2Vtbl < > { unsafe extern "system" fn SetselectionEnabled < Impl : ITemplatePrinter2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn selectionEnabled < Impl : ITemplatePrinter2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetframeActiveEnabled < Impl : ITemplatePrinter2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn frameActiveEnabled < Impl : ITemplatePrinter2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setorientation < Impl : ITemplatePrinter2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn orientation < Impl : ITemplatePrinter2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetusePrinterCopyCollate < Impl : ITemplatePrinter2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn usePrinterCopyCollate < Impl : ITemplatePrinter2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn deviceSupports < Impl : ITemplatePrinter2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrproperty : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pvar : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetselectionEnabled : SetselectionEnabled :: < Impl , IMPL_OFFSET > , selectionEnabled : selectionEnabled :: < Impl , IMPL_OFFSET > , SetframeActiveEnabled : SetframeActiveEnabled :: < Impl , IMPL_OFFSET > , frameActiveEnabled : frameActiveEnabled :: < Impl , IMPL_OFFSET > , Setorientation : Setorientation :: < Impl , IMPL_OFFSET > , orientation : orientation :: < Impl , IMPL_OFFSET > , SetusePrinterCopyCollate : SetusePrinterCopyCollate :: < Impl , IMPL_OFFSET > , usePrinterCopyCollate : usePrinterCopyCollate :: < Impl , IMPL_OFFSET > , deviceSupports : deviceSupports :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ITemplatePrinter2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ITemplatePrinter3Impl < > : Sized + ITemplatePrinter2Impl + ITemplatePrinterImpl + IDispatchImpl where { fn SetheaderFooterFont ( ) ; fn headerFooterFont ( ) ; fn getPageMarginTop ( ) ; fn getPageMarginRight ( ) ; fn getPageMarginBottom ( ) ; fn getPageMarginLeft ( ) ; fn getPageMarginTopImportant ( ) ; fn getPageMarginRightImportant ( ) ; fn getPageMarginBottomImportant ( ) ; fn getPageMarginLeftImportant ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ITemplatePrinter3Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ITemplatePrinter3Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ITemplatePrinter3Vtbl < > { unsafe extern "system" fn SetheaderFooterFont < Impl : ITemplatePrinter3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn headerFooterFont < Impl : ITemplatePrinter3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getPageMarginTop < Impl : ITemplatePrinter3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pagerule : :: windows :: core :: RawPtr , pagewidth : i32 , pageheight : i32 , pmargin : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getPageMarginRight < Impl : ITemplatePrinter3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pagerule : :: windows :: core :: RawPtr , pagewidth : i32 , pageheight : i32 , pmargin : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getPageMarginBottom < Impl : ITemplatePrinter3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pagerule : :: windows :: core :: RawPtr , pagewidth : i32 , pageheight : i32 , pmargin : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getPageMarginLeft < Impl : ITemplatePrinter3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pagerule : :: windows :: core :: RawPtr , pagewidth : i32 , pageheight : i32 , pmargin : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getPageMarginTopImportant < Impl : ITemplatePrinter3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pagerule : :: windows :: core :: RawPtr , pbimportant : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getPageMarginRightImportant < Impl : ITemplatePrinter3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pagerule : :: windows :: core :: RawPtr , pbimportant : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getPageMarginBottomImportant < Impl : ITemplatePrinter3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pagerule : :: windows :: core :: RawPtr , pbimportant : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn getPageMarginLeftImportant < Impl : ITemplatePrinter3Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pagerule : :: windows :: core :: RawPtr , pbimportant : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetheaderFooterFont : SetheaderFooterFont :: < Impl , IMPL_OFFSET > , headerFooterFont : headerFooterFont :: < Impl , IMPL_OFFSET > , getPageMarginTop : getPageMarginTop :: < Impl , IMPL_OFFSET > , getPageMarginRight : getPageMarginRight :: < Impl , IMPL_OFFSET > , getPageMarginBottom : getPageMarginBottom :: < Impl , IMPL_OFFSET > , getPageMarginLeft : getPageMarginLeft :: < Impl , IMPL_OFFSET > , getPageMarginTopImportant : getPageMarginTopImportant :: < Impl , IMPL_OFFSET > , getPageMarginRightImportant : getPageMarginRightImportant :: < Impl , IMPL_OFFSET > , getPageMarginBottomImportant : getPageMarginBottomImportant :: < Impl , IMPL_OFFSET > , getPageMarginLeftImportant : getPageMarginLeftImportant :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ITemplatePrinter3 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ITimerImpl < > : Sized where { fn Advise ( ) ; fn Unadvise ( ) ; fn Freeze ( ) ; fn GetTime ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ITimerVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ITimerImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ITimerVtbl < > { unsafe extern "system" fn Advise < Impl : ITimerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , vtimemin : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , vtimemax : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , vtimeinterval : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , dwflags : u32 , ptimersink : :: windows :: core :: RawPtr , pdwcookie : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Unadvise < Impl : ITimerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwcookie : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Freeze < Impl : ITimerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ffreeze : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetTime < Impl : ITimerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvtime : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Advise : Advise :: < Impl , IMPL_OFFSET > , Unadvise : Unadvise :: < Impl , IMPL_OFFSET > , Freeze : Freeze :: < Impl , IMPL_OFFSET > , GetTime : GetTime :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ITimer < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ITimerExImpl < > : Sized + ITimerImpl where { fn SetMode ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ITimerExVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ITimerExImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ITimerExVtbl < > { unsafe extern "system" fn SetMode < Impl : ITimerExImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwmode : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetMode : SetMode :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ITimerEx < > as :: windows :: core :: Interface > :: IID } } pub trait ITimerServiceImpl < > : Sized where { fn CreateTimer ( ) ; fn GetNamedTimer ( ) ; fn SetNamedTimerReference ( ) ; } impl < > ITimerServiceVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ITimerServiceImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ITimerServiceVtbl < > { unsafe extern "system" fn CreateTimer < Impl : ITimerServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , preferencetimer : :: windows :: core :: RawPtr , ppnewtimer : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetNamedTimer < Impl : ITimerServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , rguidname : * const :: windows :: core :: GUID , pptimer : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetNamedTimerReference < Impl : ITimerServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , rguidname : * const :: windows :: core :: GUID , preferencetimer : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , CreateTimer : CreateTimer :: < Impl , IMPL_OFFSET > , GetNamedTimer : GetNamedTimer :: < Impl , IMPL_OFFSET > , SetNamedTimerReference : SetNamedTimerReference :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ITimerService < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ITimerSinkImpl < > : Sized where { fn OnTimer ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ITimerSinkVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ITimerSinkImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ITimerSinkVtbl < > { unsafe extern "system" fn OnTimer < Impl : ITimerSinkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , vtimeadvise : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , OnTimer : OnTimer :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ITimerSink < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait ITrackingProtectionImpl < > : Sized where { fn EvaluateUrl ( ) ; fn GetEnabled ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > ITrackingProtectionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ITrackingProtectionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ITrackingProtectionVtbl < > { unsafe extern "system" fn EvaluateUrl < Impl : ITrackingProtectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrurl : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pfallowed : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetEnabled < Impl : ITrackingProtectionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfenabled : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , EvaluateUrl : EvaluateUrl :: < Impl , IMPL_OFFSET > , GetEnabled : GetEnabled :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ITrackingProtection < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait ITridentTouchInputImpl < > : Sized where { fn OnPointerMessage ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > ITridentTouchInputVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ITridentTouchInputImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ITridentTouchInputVtbl < > { unsafe extern "system" fn OnPointerMessage < Impl : ITridentTouchInputImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , msg : u32 , wparam : super::super::Foundation:: WPARAM , lparam : super::super::Foundation:: LPARAM , pfallowmanipulations : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , OnPointerMessage : OnPointerMessage :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ITridentTouchInput < > as :: windows :: core :: Interface > :: IID } } pub trait ITridentTouchInputSiteImpl < > : Sized where { fn SetManipulationMode ( ) ; fn ZoomToPoint ( ) ; } impl < > ITridentTouchInputSiteVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ITridentTouchInputSiteImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ITridentTouchInputSiteVtbl < > { unsafe extern "system" fn SetManipulationMode < Impl : ITridentTouchInputSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , mstouchaction : styleMsTouchAction , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ZoomToPoint < Impl : ITridentTouchInputSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , x : i32 , y : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetManipulationMode : SetManipulationMode :: < Impl , IMPL_OFFSET > , ZoomToPoint : ZoomToPoint :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ITridentTouchInputSite < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IUrlHistoryNotifyImpl < > : Sized + IOleCommandTargetImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IUrlHistoryNotifyVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IUrlHistoryNotifyImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IUrlHistoryNotifyVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IUrlHistoryNotify < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IUrlHistoryStgImpl < > : Sized where { fn AddUrl ( ) ; fn DeleteUrl ( ) ; fn QueryUrl ( ) ; fn BindToObject ( ) ; fn EnumUrls ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IUrlHistoryStgVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IUrlHistoryStgImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IUrlHistoryStgVtbl < > { unsafe extern "system" fn AddUrl < Impl : IUrlHistoryStgImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pocsurl : super::super::Foundation:: PWSTR , pocstitle : super::super::Foundation:: PWSTR , dwflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteUrl < Impl : IUrlHistoryStgImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pocsurl : super::super::Foundation:: PWSTR , dwflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn QueryUrl < Impl : IUrlHistoryStgImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pocsurl : super::super::Foundation:: PWSTR , dwflags : u32 , lpstaturl : * mut STATURL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BindToObject < Impl : IUrlHistoryStgImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pocsurl : super::super::Foundation:: PWSTR , riid : * const :: windows :: core :: GUID , ppvout : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn EnumUrls < Impl : IUrlHistoryStgImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppenum : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , AddUrl : AddUrl :: < Impl , IMPL_OFFSET > , DeleteUrl : DeleteUrl :: < Impl , IMPL_OFFSET > , QueryUrl : QueryUrl :: < Impl , IMPL_OFFSET > , BindToObject : BindToObject :: < Impl , IMPL_OFFSET > , EnumUrls : EnumUrls :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IUrlHistoryStg < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Ole" ) ) ] pub trait IUrlHistoryStg2Impl < > : Sized + IUrlHistoryStgImpl where { fn AddUrlAndNotify ( ) ; fn ClearHistory ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Ole" ) ) ] impl < > IUrlHistoryStg2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IUrlHistoryStg2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IUrlHistoryStg2Vtbl < > { unsafe extern "system" fn AddUrlAndNotify < Impl : IUrlHistoryStg2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pocsurl : super::super::Foundation:: PWSTR , pocstitle : super::super::Foundation:: PWSTR , dwflags : u32 , fwritehistory : super::super::Foundation:: BOOL , poctnotify : :: windows :: core :: RawPtr , punkisfolder : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ClearHistory < Impl : IUrlHistoryStg2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , AddUrlAndNotify : AddUrlAndNotify :: < Impl , IMPL_OFFSET > , ClearHistory : ClearHistory :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IUrlHistoryStg2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IViewObjectPresentFlipImpl < > : Sized where { fn NotifyRender ( ) ; fn RenderObjectToBitmap ( ) ; fn RenderObjectToSharedBuffer ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IViewObjectPresentFlipVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IViewObjectPresentFlipImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IViewObjectPresentFlipVtbl < > { unsafe extern "system" fn NotifyRender < Impl : IViewObjectPresentFlipImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , frecreatepresenter : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RenderObjectToBitmap < Impl : IViewObjectPresentFlipImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbitmap : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RenderObjectToSharedBuffer < Impl : IViewObjectPresentFlipImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbuffer : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , NotifyRender : NotifyRender :: < Impl , IMPL_OFFSET > , RenderObjectToBitmap : RenderObjectToBitmap :: < Impl , IMPL_OFFSET > , RenderObjectToSharedBuffer : RenderObjectToSharedBuffer :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IViewObjectPresentFlip < > as :: windows :: core :: Interface > :: IID } } pub trait IViewObjectPresentFlip2Impl < > : Sized where { fn NotifyLeavingView ( ) ; } impl < > IViewObjectPresentFlip2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IViewObjectPresentFlip2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IViewObjectPresentFlip2Vtbl < > { unsafe extern "system" fn NotifyLeavingView < Impl : IViewObjectPresentFlip2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , NotifyLeavingView : NotifyLeavingView :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IViewObjectPresentFlip2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Dxgi_Common" ) ) ] pub trait IViewObjectPresentFlipSiteImpl < > : Sized where { fn CreateSurfacePresenterFlip ( ) ; fn GetDeviceLuid ( ) ; fn EnterFullScreen ( ) ; fn ExitFullScreen ( ) ; fn IsFullScreen ( ) ; fn GetBoundingRect ( ) ; fn GetMetrics ( ) ; fn GetFullScreenSize ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Dxgi_Common" ) ) ] impl < > IViewObjectPresentFlipSiteVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IViewObjectPresentFlipSiteImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IViewObjectPresentFlipSiteVtbl < > { unsafe extern "system" fn CreateSurfacePresenterFlip < Impl : IViewObjectPresentFlipSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdevice : * mut :: core :: ffi :: c_void , width : u32 , height : u32 , backbuffercount : u32 , format : super::super::Graphics::Dxgi::Common:: DXGI_FORMAT , mode : VIEW_OBJECT_ALPHA_MODE , ppspflip : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetDeviceLuid < Impl : IViewObjectPresentFlipSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pluid : * mut super::super::Foundation:: LUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn EnterFullScreen < Impl : IViewObjectPresentFlipSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ExitFullScreen < Impl : IViewObjectPresentFlipSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsFullScreen < Impl : IViewObjectPresentFlipSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pffullscreen : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetBoundingRect < Impl : IViewObjectPresentFlipSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , prect : * mut super::super::Foundation:: RECT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetMetrics < Impl : IViewObjectPresentFlipSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppos : * mut super::super::Foundation:: POINT , psize : * mut super::super::Foundation:: SIZE , pscalex : * mut f32 , pscaley : * mut f32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetFullScreenSize < Impl : IViewObjectPresentFlipSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psize : * mut super::super::Foundation:: SIZE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , CreateSurfacePresenterFlip : CreateSurfacePresenterFlip :: < Impl , IMPL_OFFSET > , GetDeviceLuid : GetDeviceLuid :: < Impl , IMPL_OFFSET > , EnterFullScreen : EnterFullScreen :: < Impl , IMPL_OFFSET > , ExitFullScreen : ExitFullScreen :: < Impl , IMPL_OFFSET > , IsFullScreen : IsFullScreen :: < Impl , IMPL_OFFSET > , GetBoundingRect : GetBoundingRect :: < Impl , IMPL_OFFSET > , GetMetrics : GetMetrics :: < Impl , IMPL_OFFSET > , GetFullScreenSize : GetFullScreenSize :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IViewObjectPresentFlipSite < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Graphics_Dxgi_Common" ) ] pub trait IViewObjectPresentFlipSite2Impl < > : Sized where { fn GetRotationForCurrentOutput ( ) ; } # [ cfg ( feature ="Win32_Graphics_Dxgi_Common" ) ] impl < > IViewObjectPresentFlipSite2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IViewObjectPresentFlipSite2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IViewObjectPresentFlipSite2Vtbl < > { unsafe extern "system" fn GetRotationForCurrentOutput < Impl : IViewObjectPresentFlipSite2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdxgirotation : * mut super::super::Graphics::Dxgi::Common:: DXGI_MODE_ROTATION , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetRotationForCurrentOutput : GetRotationForCurrentOutput :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IViewObjectPresentFlipSite2 < > as :: windows :: core :: Interface > :: IID } } pub trait IViewObjectPresentNotifyImpl < > : Sized where { fn OnPreRender ( ) ; } impl < > IViewObjectPresentNotifyVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IViewObjectPresentNotifyImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IViewObjectPresentNotifyVtbl < > { unsafe extern "system" fn OnPreRender < Impl : IViewObjectPresentNotifyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , OnPreRender : OnPreRender :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IViewObjectPresentNotify < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Dxgi_Common" ) ) ] pub trait IViewObjectPresentNotifySiteImpl < > : Sized + IViewObjectPresentSiteImpl where { fn RequestFrame ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Dxgi_Common" ) ) ] impl < > IViewObjectPresentNotifySiteVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IViewObjectPresentNotifySiteImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IViewObjectPresentNotifySiteVtbl < > { unsafe extern "system" fn RequestFrame < Impl : IViewObjectPresentNotifySiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , RequestFrame : RequestFrame :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IViewObjectPresentNotifySite < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Dxgi_Common" ) ) ] pub trait IViewObjectPresentSiteImpl < > : Sized where { fn CreateSurfacePresenter ( ) ; fn IsHardwareComposition ( ) ; fn SetCompositionMode ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Graphics_Dxgi_Common" ) ) ] impl < > IViewObjectPresentSiteVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IViewObjectPresentSiteImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IViewObjectPresentSiteVtbl < > { unsafe extern "system" fn CreateSurfacePresenter < Impl : IViewObjectPresentSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdevice : * mut :: core :: ffi :: c_void , width : u32 , height : u32 , backbuffercount : u32 , format : super::super::Graphics::Dxgi::Common:: DXGI_FORMAT , mode : VIEW_OBJECT_ALPHA_MODE , ppqueue : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsHardwareComposition < Impl : IViewObjectPresentSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pishardwarecomposition : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetCompositionMode < Impl : IViewObjectPresentSiteImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , mode : VIEW_OBJECT_COMPOSITION_MODE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , CreateSurfacePresenter : CreateSurfacePresenter :: < Impl , IMPL_OFFSET > , IsHardwareComposition : IsHardwareComposition :: < Impl , IMPL_OFFSET > , SetCompositionMode : SetCompositionMode :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IViewObjectPresentSite < > as :: windows :: core :: Interface > :: IID } } pub trait IViewObjectPrintImpl < > : Sized where { fn GetPrintBitmap ( ) ; } impl < > IViewObjectPrintVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IViewObjectPrintImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IViewObjectPrintVtbl < > { unsafe extern "system" fn GetPrintBitmap < Impl : IViewObjectPrintImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppprintbitmap : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetPrintBitmap : GetPrintBitmap :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IViewObjectPrint < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IWBScriptControlImpl < > : Sized + IDispatchImpl where { fn raiseEvent ( ) ; fn bubbleEvent ( ) ; fn setContextMenu ( ) ; fn SetselectableContent ( ) ; fn selectableContent ( ) ; fn frozen ( ) ; fn Setscrollbar ( ) ; fn scrollbar ( ) ; fn version ( ) ; fn visibility ( ) ; fn Setonvisibilitychange ( ) ; fn onvisibilitychange ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IWBScriptControlVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWBScriptControlImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWBScriptControlVtbl < > { unsafe extern "system" fn raiseEvent < Impl : IWBScriptControlImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , name : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , eventdata : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn bubbleEvent < Impl : IWBScriptControlImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn setContextMenu < Impl : IWBScriptControlImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , menuitempairs : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetselectableContent < Impl : IWBScriptControlImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn selectableContent < Impl : IWBScriptControlImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn frozen < Impl : IWBScriptControlImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setscrollbar < Impl : IWBScriptControlImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn scrollbar < Impl : IWBScriptControlImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn version < Impl : IWBScriptControlImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn visibility < Impl : IWBScriptControlImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setonvisibilitychange < Impl : IWBScriptControlImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn onvisibilitychange < Impl : IWBScriptControlImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , raiseEvent : raiseEvent :: < Impl , IMPL_OFFSET > , bubbleEvent : bubbleEvent :: < Impl , IMPL_OFFSET > , setContextMenu : setContextMenu :: < Impl , IMPL_OFFSET > , SetselectableContent : SetselectableContent :: < Impl , IMPL_OFFSET > , selectableContent : selectableContent :: < Impl , IMPL_OFFSET > , frozen : frozen :: < Impl , IMPL_OFFSET > , Setscrollbar : Setscrollbar :: < Impl , IMPL_OFFSET > , scrollbar : scrollbar :: < Impl , IMPL_OFFSET > , version : version :: < Impl , IMPL_OFFSET > , visibility : visibility :: < Impl , IMPL_OFFSET > , Setonvisibilitychange : Setonvisibilitychange :: < Impl , IMPL_OFFSET > , onvisibilitychange : onvisibilitychange :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWBScriptControl < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IWPCBlockedUrlsImpl < > : Sized where { fn GetCount ( ) ; fn GetUrl ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IWPCBlockedUrlsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWPCBlockedUrlsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWPCBlockedUrlsVtbl < > { unsafe extern "system" fn GetCount < Impl : IWPCBlockedUrlsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdwcount : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetUrl < Impl : IWPCBlockedUrlsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwidx : u32 , pbstrurl : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetCount : GetCount :: < Impl , IMPL_OFFSET > , GetUrl : GetUrl :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWPCBlockedUrls < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IWebBridgeImpl < > : Sized + IDispatchImpl where { fn SetURL ( ) ; fn URL ( ) ; fn SetScrollbar ( ) ; fn Scrollbar ( ) ; fn Setembed ( ) ; fn embed ( ) ; fn event ( ) ; fn readyState ( ) ; fn AboutBox ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IWebBridgeVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWebBridgeImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWebBridgeVtbl < > { unsafe extern "system" fn SetURL < Impl : IWebBridgeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn URL < Impl : IWebBridgeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetScrollbar < Impl : IWebBridgeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Scrollbar < Impl : IWebBridgeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Setembed < Impl : IWebBridgeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , v : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn embed < Impl : IWebBridgeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn event < Impl : IWebBridgeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn readyState < Impl : IWebBridgeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AboutBox < Impl : IWebBridgeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetURL : SetURL :: < Impl , IMPL_OFFSET > , URL : URL :: < Impl , IMPL_OFFSET > , SetScrollbar : SetScrollbar :: < Impl , IMPL_OFFSET > , Scrollbar : Scrollbar :: < Impl , IMPL_OFFSET > , Setembed : Setembed :: < Impl , IMPL_OFFSET > , embed : embed :: < Impl , IMPL_OFFSET > , event : event :: < Impl , IMPL_OFFSET > , readyState : readyState :: < Impl , IMPL_OFFSET > , AboutBox : AboutBox :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWebBridge < > as :: windows :: core :: Interface > :: IID } } pub trait IWebBrowserEventsServiceImpl < > : Sized where { fn FireBeforeNavigate2Event ( ) ; fn FireNavigateComplete2Event ( ) ; fn FireDownloadBeginEvent ( ) ; fn FireDownloadCompleteEvent ( ) ; fn FireDocumentCompleteEvent ( ) ; } impl < > IWebBrowserEventsServiceVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWebBrowserEventsServiceImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWebBrowserEventsServiceVtbl < > { unsafe extern "system" fn FireBeforeNavigate2Event < Impl : IWebBrowserEventsServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfcancel : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn FireNavigateComplete2Event < Impl : IWebBrowserEventsServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn FireDownloadBeginEvent < Impl : IWebBrowserEventsServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn FireDownloadCompleteEvent < Impl : IWebBrowserEventsServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn FireDocumentCompleteEvent < Impl : IWebBrowserEventsServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , FireBeforeNavigate2Event : FireBeforeNavigate2Event :: < Impl , IMPL_OFFSET > , FireNavigateComplete2Event : FireNavigateComplete2Event :: < Impl , IMPL_OFFSET > , FireDownloadBeginEvent : FireDownloadBeginEvent :: < Impl , IMPL_OFFSET > , FireDownloadCompleteEvent : FireDownloadCompleteEvent :: < Impl , IMPL_OFFSET > , FireDocumentCompleteEvent : FireDocumentCompleteEvent :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWebBrowserEventsService < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IWebBrowserEventsUrlServiceImpl < > : Sized where { fn GetUrlForEvents ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IWebBrowserEventsUrlServiceVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWebBrowserEventsUrlServiceImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWebBrowserEventsUrlServiceVtbl < > { unsafe extern "system" fn GetUrlForEvents < Impl : IWebBrowserEventsUrlServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , purl : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetUrlForEvents : GetUrlForEvents :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWebBrowserEventsUrlService < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IWebGeocoordinatesImpl < > : Sized + IDispatchImpl where { fn latitude ( ) ; fn longitude ( ) ; fn altitude ( ) ; fn accuracy ( ) ; fn altitudeAccuracy ( ) ; fn heading ( ) ; fn speed ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IWebGeocoordinatesVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWebGeocoordinatesImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWebGeocoordinatesVtbl < > { unsafe extern "system" fn latitude < Impl : IWebGeocoordinatesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn longitude < Impl : IWebGeocoordinatesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn altitude < Impl : IWebGeocoordinatesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn accuracy < Impl : IWebGeocoordinatesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut f64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn altitudeAccuracy < Impl : IWebGeocoordinatesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn heading < Impl : IWebGeocoordinatesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn speed < Impl : IWebGeocoordinatesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , latitude : latitude :: < Impl , IMPL_OFFSET > , longitude : longitude :: < Impl , IMPL_OFFSET > , altitude : altitude :: < Impl , IMPL_OFFSET > , accuracy : accuracy :: < Impl , IMPL_OFFSET > , altitudeAccuracy : altitudeAccuracy :: < Impl , IMPL_OFFSET > , heading : heading :: < Impl , IMPL_OFFSET > , speed : speed :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWebGeocoordinates < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IWebGeolocationImpl < > : Sized + IDispatchImpl where { fn getCurrentPosition ( ) ; fn watchPosition ( ) ; fn clearWatch ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IWebGeolocationVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWebGeolocationImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWebGeolocationVtbl < > { unsafe extern "system" fn getCurrentPosition < Impl : IWebGeolocationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , successcallback : :: windows :: core :: RawPtr , errorcallback : :: windows :: core :: RawPtr , options : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn watchPosition < Impl : IWebGeolocationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , successcallback : :: windows :: core :: RawPtr , errorcallback : :: windows :: core :: RawPtr , options : :: windows :: core :: RawPtr , watchid : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn clearWatch < Impl : IWebGeolocationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , watchid : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , getCurrentPosition : getCurrentPosition :: < Impl , IMPL_OFFSET > , watchPosition : watchPosition :: < Impl , IMPL_OFFSET > , clearWatch : clearWatch :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWebGeolocation < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IWebGeopositionImpl < > : Sized + IDispatchImpl where { fn coords ( ) ; fn timestamp ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IWebGeopositionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWebGeopositionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWebGeopositionVtbl < > { unsafe extern "system" fn coords < Impl : IWebGeopositionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn timestamp < Impl : IWebGeopositionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , coords : coords :: < Impl , IMPL_OFFSET > , timestamp : timestamp :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWebGeoposition < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IWebGeopositionErrorImpl < > : Sized + IDispatchImpl where { fn code ( ) ; fn message ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IWebGeopositionErrorVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWebGeopositionErrorImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWebGeopositionErrorVtbl < > { unsafe extern "system" fn code < Impl : IWebGeopositionErrorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn message < Impl : IWebGeopositionErrorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , p : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , code : code :: < Impl , IMPL_OFFSET > , message : message :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWebGeopositionError < > as :: windows :: core :: Interface > :: IID } } pub trait IXMLGenericParseImpl < > : Sized where { fn SetGenericParse ( ) ; } impl < > IXMLGenericParseVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IXMLGenericParseImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IXMLGenericParseVtbl < > { unsafe extern "system" fn SetGenericParse < Impl : IXMLGenericParseImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fdogeneric : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetGenericParse : SetGenericParse :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IXMLGenericParse < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IXMLHttpRequestEventTargetImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IXMLHttpRequestEventTargetVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IXMLHttpRequestEventTargetImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IXMLHttpRequestEventTargetVtbl < > { Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IXMLHttpRequestEventTarget < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IwfoldersImpl < > : Sized + IDispatchImpl where { fn navigate ( ) ; fn navigateFrame ( ) ; fn navigateNoSite ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IwfoldersVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IwfoldersImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IwfoldersVtbl < > { unsafe extern "system" fn navigate < Impl : IwfoldersImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrurl : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pbstrretval : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn navigateFrame < Impl : IwfoldersImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrurl : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , bstrtargetframe : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pbstrretval : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn navigateNoSite < Impl : IwfoldersImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrurl : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , bstrtargetframe : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , dwhwnd : u32 , pwb : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , navigate : navigate :: < Impl , IMPL_OFFSET > , navigateFrame : navigateFrame :: < Impl , IMPL_OFFSET > , navigateNoSite : navigateNoSite :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < Iwfolders < > as :: windows :: core :: Interface > :: IID } } 