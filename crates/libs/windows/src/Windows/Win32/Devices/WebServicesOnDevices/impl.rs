# [ cfg ( feature ="Win32_Foundation" ) ] pub trait IWSDAddressImpl < > : Sized where { fn Serialize ( ) ; fn Deserialize ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IWSDAddressVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWSDAddressImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWSDAddressVtbl < > { unsafe extern "system" fn Serialize < Impl : IWSDAddressImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszbuffer : super::super::Foundation:: PWSTR , cchlength : u32 , fsafe : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Deserialize < Impl : IWSDAddressImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszbuffer : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Serialize : Serialize :: < Impl , IMPL_OFFSET > , Deserialize : Deserialize :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWSDAddress < > as :: windows :: core :: Interface > :: IID } } pub trait IWSDAsyncCallbackImpl < > : Sized where { fn AsyncOperationComplete ( ) ; } impl < > IWSDAsyncCallbackVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWSDAsyncCallbackImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWSDAsyncCallbackVtbl < > { unsafe extern "system" fn AsyncOperationComplete < Impl : IWSDAsyncCallbackImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pasyncresult : :: windows :: core :: RawPtr , pasyncstate : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , AsyncOperationComplete : AsyncOperationComplete :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWSDAsyncCallback < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IWSDAsyncResultImpl < > : Sized where { fn SetCallback ( ) ; fn SetWaitHandle ( ) ; fn HasCompleted ( ) ; fn GetAsyncState ( ) ; fn Abort ( ) ; fn GetEvent ( ) ; fn GetEndpointProxy ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IWSDAsyncResultVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWSDAsyncResultImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWSDAsyncResultVtbl < > { unsafe extern "system" fn SetCallback < Impl : IWSDAsyncResultImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcallback : :: windows :: core :: RawPtr , pasyncstate : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetWaitHandle < Impl : IWSDAsyncResultImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwaithandle : super::super::Foundation:: HANDLE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HasCompleted < Impl : IWSDAsyncResultImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetAsyncState < Impl : IWSDAsyncResultImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppasyncstate : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Abort < Impl : IWSDAsyncResultImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetEvent < Impl : IWSDAsyncResultImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pevent : * mut WSD_EVENT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetEndpointProxy < Impl : IWSDAsyncResultImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppendpoint : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetCallback : SetCallback :: < Impl , IMPL_OFFSET > , SetWaitHandle : SetWaitHandle :: < Impl , IMPL_OFFSET > , HasCompleted : HasCompleted :: < Impl , IMPL_OFFSET > , GetAsyncState : GetAsyncState :: < Impl , IMPL_OFFSET > , Abort : Abort :: < Impl , IMPL_OFFSET > , GetEvent : GetEvent :: < Impl , IMPL_OFFSET > , GetEndpointProxy : GetEndpointProxy :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWSDAsyncResult < > as :: windows :: core :: Interface > :: IID } } pub trait IWSDAttachmentImpl < > : Sized where { } impl < > IWSDAttachmentVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWSDAttachmentImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWSDAttachmentVtbl < > { Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWSDAttachment < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IWSDDeviceHostImpl < > : Sized where { fn Init ( ) ; fn Start ( ) ; fn Stop ( ) ; fn Terminate ( ) ; fn RegisterPortType ( ) ; fn SetMetadata ( ) ; fn RegisterService ( ) ; fn RetireService ( ) ; fn AddDynamicService ( ) ; fn RemoveDynamicService ( ) ; fn SetServiceDiscoverable ( ) ; fn SignalEvent ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IWSDDeviceHostVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWSDDeviceHostImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWSDDeviceHostVtbl < > { unsafe extern "system" fn Init < Impl : IWSDDeviceHostImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszlocalid : super::super::Foundation:: PWSTR , pcontext : :: windows :: core :: RawPtr , pphostaddresses : * const :: windows :: core :: RawPtr , dwhostaddresscount : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Start < Impl : IWSDDeviceHostImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ullinstanceid : u64 , pscopelist : * const WSD_URI_LIST , pnotificationsink : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Stop < Impl : IWSDDeviceHostImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Terminate < Impl : IWSDDeviceHostImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RegisterPortType < Impl : IWSDDeviceHostImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pporttype : * const WSD_PORT_TYPE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetMetadata < Impl : IWSDDeviceHostImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pthismodelmetadata : * const WSD_THIS_MODEL_METADATA , pthisdevicemetadata : * const WSD_THIS_DEVICE_METADATA , phostmetadata : * const WSD_HOST_METADATA , pcustommetadata : * const WSD_METADATA_SECTION_LIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RegisterService < Impl : IWSDDeviceHostImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszserviceid : super::super::Foundation:: PWSTR , pservice : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RetireService < Impl : IWSDDeviceHostImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszserviceid : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddDynamicService < Impl : IWSDDeviceHostImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszserviceid : super::super::Foundation:: PWSTR , pszendpointaddress : super::super::Foundation:: PWSTR , pporttype : * const WSD_PORT_TYPE , pportname : * const WSDXML_NAME , pany : * const WSDXML_ELEMENT , pservice : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RemoveDynamicService < Impl : IWSDDeviceHostImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszserviceid : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetServiceDiscoverable < Impl : IWSDDeviceHostImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszserviceid : super::super::Foundation:: PWSTR , fdiscoverable : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SignalEvent < Impl : IWSDDeviceHostImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszserviceid : super::super::Foundation:: PWSTR , pbody : * const :: core :: ffi :: c_void , poperation : * const WSD_OPERATION , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Init : Init :: < Impl , IMPL_OFFSET > , Start : Start :: < Impl , IMPL_OFFSET > , Stop : Stop :: < Impl , IMPL_OFFSET > , Terminate : Terminate :: < Impl , IMPL_OFFSET > , RegisterPortType : RegisterPortType :: < Impl , IMPL_OFFSET > , SetMetadata : SetMetadata :: < Impl , IMPL_OFFSET > , RegisterService : RegisterService :: < Impl , IMPL_OFFSET > , RetireService : RetireService :: < Impl , IMPL_OFFSET > , AddDynamicService : AddDynamicService :: < Impl , IMPL_OFFSET > , RemoveDynamicService : RemoveDynamicService :: < Impl , IMPL_OFFSET > , SetServiceDiscoverable : SetServiceDiscoverable :: < Impl , IMPL_OFFSET > , SignalEvent : SignalEvent :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWSDDeviceHost < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IWSDDeviceHostNotifyImpl < > : Sized where { fn GetService ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IWSDDeviceHostNotifyVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWSDDeviceHostNotifyImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWSDDeviceHostNotifyVtbl < > { unsafe extern "system" fn GetService < Impl : IWSDDeviceHostNotifyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszserviceid : super::super::Foundation:: PWSTR , ppservice : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetService : GetService :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWSDDeviceHostNotify < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IWSDDeviceProxyImpl < > : Sized where { fn Init ( ) ; fn BeginGetMetadata ( ) ; fn EndGetMetadata ( ) ; fn GetHostMetadata ( ) ; fn GetThisModelMetadata ( ) ; fn GetThisDeviceMetadata ( ) ; fn GetAllMetadata ( ) ; fn GetServiceProxyById ( ) ; fn GetServiceProxyByType ( ) ; fn GetEndpointProxy ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IWSDDeviceProxyVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWSDDeviceProxyImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWSDDeviceProxyVtbl < > { unsafe extern "system" fn Init < Impl : IWSDDeviceProxyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszdeviceid : super::super::Foundation:: PWSTR , pdeviceaddress : :: windows :: core :: RawPtr , pszlocalid : super::super::Foundation:: PWSTR , pcontext : :: windows :: core :: RawPtr , psponsor : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BeginGetMetadata < Impl : IWSDDeviceProxyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn EndGetMetadata < Impl : IWSDDeviceProxyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , presult : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetHostMetadata < Impl : IWSDDeviceProxyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pphostmetadata : * mut * mut WSD_HOST_METADATA , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetThisModelMetadata < Impl : IWSDDeviceProxyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppmanufacturermetadata : * mut * mut WSD_THIS_MODEL_METADATA , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetThisDeviceMetadata < Impl : IWSDDeviceProxyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppthisdevicemetadata : * mut * mut WSD_THIS_DEVICE_METADATA , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetAllMetadata < Impl : IWSDDeviceProxyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppmetadata : * mut * mut WSD_METADATA_SECTION_LIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetServiceProxyById < Impl : IWSDDeviceProxyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszserviceid : super::super::Foundation:: PWSTR , ppserviceproxy : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetServiceProxyByType < Impl : IWSDDeviceProxyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ptype : * const WSDXML_NAME , ppserviceproxy : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetEndpointProxy < Impl : IWSDDeviceProxyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppproxy : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Init : Init :: < Impl , IMPL_OFFSET > , BeginGetMetadata : BeginGetMetadata :: < Impl , IMPL_OFFSET > , EndGetMetadata : EndGetMetadata :: < Impl , IMPL_OFFSET > , GetHostMetadata : GetHostMetadata :: < Impl , IMPL_OFFSET > , GetThisModelMetadata : GetThisModelMetadata :: < Impl , IMPL_OFFSET > , GetThisDeviceMetadata : GetThisDeviceMetadata :: < Impl , IMPL_OFFSET > , GetAllMetadata : GetAllMetadata :: < Impl , IMPL_OFFSET > , GetServiceProxyById : GetServiceProxyById :: < Impl , IMPL_OFFSET > , GetServiceProxyByType : GetServiceProxyByType :: < Impl , IMPL_OFFSET > , GetEndpointProxy : GetEndpointProxy :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWSDDeviceProxy < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IWSDEndpointProxyImpl < > : Sized where { fn SendOneWayRequest ( ) ; fn SendTwoWayRequest ( ) ; fn SendTwoWayRequestAsync ( ) ; fn AbortAsyncOperation ( ) ; fn ProcessFault ( ) ; fn GetErrorInfo ( ) ; fn GetFaultInfo ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IWSDEndpointProxyVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWSDEndpointProxyImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWSDEndpointProxyVtbl < > { unsafe extern "system" fn SendOneWayRequest < Impl : IWSDEndpointProxyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbody : * const :: core :: ffi :: c_void , poperation : * const WSD_OPERATION , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SendTwoWayRequest < Impl : IWSDEndpointProxyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbody : * const :: core :: ffi :: c_void , poperation : * const WSD_OPERATION , presponsecontext : * const WSD_SYNCHRONOUS_RESPONSE_CONTEXT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SendTwoWayRequestAsync < Impl : IWSDEndpointProxyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbody : * const :: core :: ffi :: c_void , poperation : * const WSD_OPERATION , pasyncstate : * mut :: core :: ffi :: c_void , pcallback : :: windows :: core :: RawPtr , presult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AbortAsyncOperation < Impl : IWSDEndpointProxyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pasyncresult : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ProcessFault < Impl : IWSDEndpointProxyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfault : * const WSD_SOAP_FAULT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetErrorInfo < Impl : IWSDEndpointProxyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppszerrorinfo : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetFaultInfo < Impl : IWSDEndpointProxyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppfault : * mut * mut WSD_SOAP_FAULT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SendOneWayRequest : SendOneWayRequest :: < Impl , IMPL_OFFSET > , SendTwoWayRequest : SendTwoWayRequest :: < Impl , IMPL_OFFSET > , SendTwoWayRequestAsync : SendTwoWayRequestAsync :: < Impl , IMPL_OFFSET > , AbortAsyncOperation : AbortAsyncOperation :: < Impl , IMPL_OFFSET > , ProcessFault : ProcessFault :: < Impl , IMPL_OFFSET > , GetErrorInfo : GetErrorInfo :: < Impl , IMPL_OFFSET > , GetFaultInfo : GetFaultInfo :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWSDEndpointProxy < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IWSDEventingStatusImpl < > : Sized where { fn SubscriptionRenewed ( ) ; fn SubscriptionRenewalFailed ( ) ; fn SubscriptionEnded ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IWSDEventingStatusVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWSDEventingStatusImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWSDEventingStatusVtbl < > { unsafe extern "system" fn SubscriptionRenewed < Impl : IWSDEventingStatusImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszsubscriptionaction : super::super::Foundation:: PWSTR , ) { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SubscriptionRenewalFailed < Impl : IWSDEventingStatusImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszsubscriptionaction : super::super::Foundation:: PWSTR , hr : :: windows :: core :: HRESULT , ) { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SubscriptionEnded < Impl : IWSDEventingStatusImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszsubscriptionaction : super::super::Foundation:: PWSTR , ) { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SubscriptionRenewed : SubscriptionRenewed :: < Impl , IMPL_OFFSET > , SubscriptionRenewalFailed : SubscriptionRenewalFailed :: < Impl , IMPL_OFFSET > , SubscriptionEnded : SubscriptionEnded :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWSDEventingStatus < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IWSDHttpAddressImpl < > : Sized + IWSDAddressImpl + IWSDTransportAddressImpl where { fn GetSecure ( ) ; fn SetSecure ( ) ; fn GetPath ( ) ; fn SetPath ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IWSDHttpAddressVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWSDHttpAddressImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWSDHttpAddressVtbl < > { unsafe extern "system" fn GetSecure < Impl : IWSDHttpAddressImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetSecure < Impl : IWSDHttpAddressImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fsecure : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetPath < Impl : IWSDHttpAddressImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppszpath : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetPath < Impl : IWSDHttpAddressImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszpath : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IWSDTransportAddressVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , GetSecure : GetSecure :: < Impl , IMPL_OFFSET > , SetSecure : SetSecure :: < Impl , IMPL_OFFSET > , GetPath : GetPath :: < Impl , IMPL_OFFSET > , SetPath : SetPath :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWSDHttpAddress < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IWSDHttpAuthParametersImpl < > : Sized where { fn GetClientAccessToken ( ) ; fn GetAuthType ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IWSDHttpAuthParametersVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWSDHttpAuthParametersImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWSDHttpAuthParametersVtbl < > { unsafe extern "system" fn GetClientAccessToken < Impl : IWSDHttpAuthParametersImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , phtoken : * mut super::super::Foundation:: HANDLE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetAuthType < Impl : IWSDHttpAuthParametersImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pauthtype : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetClientAccessToken : GetClientAccessToken :: < Impl , IMPL_OFFSET > , GetAuthType : GetAuthType :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWSDHttpAuthParameters < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IWSDHttpMessageParametersImpl < > : Sized + IWSDMessageParametersImpl where { fn SetInboundHttpHeaders ( ) ; fn GetInboundHttpHeaders ( ) ; fn SetOutboundHttpHeaders ( ) ; fn GetOutboundHttpHeaders ( ) ; fn SetID ( ) ; fn GetID ( ) ; fn SetContext ( ) ; fn GetContext ( ) ; fn Clear ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IWSDHttpMessageParametersVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWSDHttpMessageParametersImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWSDHttpMessageParametersVtbl < > { unsafe extern "system" fn SetInboundHttpHeaders < Impl : IWSDHttpMessageParametersImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszheaders : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetInboundHttpHeaders < Impl : IWSDHttpMessageParametersImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppszheaders : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetOutboundHttpHeaders < Impl : IWSDHttpMessageParametersImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszheaders : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetOutboundHttpHeaders < Impl : IWSDHttpMessageParametersImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppszheaders : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetID < Impl : IWSDHttpMessageParametersImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszid : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetID < Impl : IWSDHttpMessageParametersImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppszid : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetContext < Impl : IWSDHttpMessageParametersImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcontext : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetContext < Impl : IWSDHttpMessageParametersImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppcontext : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Clear < Impl : IWSDHttpMessageParametersImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IWSDMessageParametersVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetInboundHttpHeaders : SetInboundHttpHeaders :: < Impl , IMPL_OFFSET > , GetInboundHttpHeaders : GetInboundHttpHeaders :: < Impl , IMPL_OFFSET > , SetOutboundHttpHeaders : SetOutboundHttpHeaders :: < Impl , IMPL_OFFSET > , GetOutboundHttpHeaders : GetOutboundHttpHeaders :: < Impl , IMPL_OFFSET > , SetID : SetID :: < Impl , IMPL_OFFSET > , GetID : GetID :: < Impl , IMPL_OFFSET > , SetContext : SetContext :: < Impl , IMPL_OFFSET > , GetContext : GetContext :: < Impl , IMPL_OFFSET > , Clear : Clear :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWSDHttpMessageParameters < > as :: windows :: core :: Interface > :: IID } } pub trait IWSDInboundAttachmentImpl < > : Sized + IWSDAttachmentImpl where { fn Read ( ) ; fn Close ( ) ; } impl < > IWSDInboundAttachmentVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWSDInboundAttachmentImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWSDInboundAttachmentVtbl < > { unsafe extern "system" fn Read < Impl : IWSDInboundAttachmentImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbuffer : * mut u8 , dwbytestoread : u32 , pdwnumberofbytesread : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Close < Impl : IWSDInboundAttachmentImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IWSDAttachmentVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Read : Read :: < Impl , IMPL_OFFSET > , Close : Close :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWSDInboundAttachment < > as :: windows :: core :: Interface > :: IID } } pub trait IWSDMessageParametersImpl < > : Sized where { fn GetLocalAddress ( ) ; fn SetLocalAddress ( ) ; fn GetRemoteAddress ( ) ; fn SetRemoteAddress ( ) ; fn GetLowerParameters ( ) ; } impl < > IWSDMessageParametersVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWSDMessageParametersImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWSDMessageParametersVtbl < > { unsafe extern "system" fn GetLocalAddress < Impl : IWSDMessageParametersImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppaddress : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetLocalAddress < Impl : IWSDMessageParametersImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , paddress : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetRemoteAddress < Impl : IWSDMessageParametersImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppaddress : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetRemoteAddress < Impl : IWSDMessageParametersImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , paddress : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetLowerParameters < Impl : IWSDMessageParametersImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pptxparams : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetLocalAddress : GetLocalAddress :: < Impl , IMPL_OFFSET > , SetLocalAddress : SetLocalAddress :: < Impl , IMPL_OFFSET > , GetRemoteAddress : GetRemoteAddress :: < Impl , IMPL_OFFSET > , SetRemoteAddress : SetRemoteAddress :: < Impl , IMPL_OFFSET > , GetLowerParameters : GetLowerParameters :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWSDMessageParameters < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IWSDMetadataExchangeImpl < > : Sized where { fn GetMetadata ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IWSDMetadataExchangeVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWSDMetadataExchangeImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWSDMetadataExchangeVtbl < > { unsafe extern "system" fn GetMetadata < Impl : IWSDMetadataExchangeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , metadataout : * mut * mut WSD_METADATA_SECTION_LIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetMetadata : GetMetadata :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWSDMetadataExchange < > as :: windows :: core :: Interface > :: IID } } pub trait IWSDOutboundAttachmentImpl < > : Sized + IWSDAttachmentImpl where { fn Write ( ) ; fn Close ( ) ; fn Abort ( ) ; } impl < > IWSDOutboundAttachmentVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWSDOutboundAttachmentImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWSDOutboundAttachmentVtbl < > { unsafe extern "system" fn Write < Impl : IWSDOutboundAttachmentImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbuffer : * const u8 , dwbytestowrite : u32 , pdwnumberofbyteswritten : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Close < Impl : IWSDOutboundAttachmentImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Abort < Impl : IWSDOutboundAttachmentImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IWSDAttachmentVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Write : Write :: < Impl , IMPL_OFFSET > , Close : Close :: < Impl , IMPL_OFFSET > , Abort : Abort :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWSDOutboundAttachment < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Security_Cryptography" ) ) ] pub trait IWSDSSLClientCertificateImpl < > : Sized where { fn GetClientCertificate ( ) ; fn GetMappedAccessToken ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Security_Cryptography" ) ) ] impl < > IWSDSSLClientCertificateVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWSDSSLClientCertificateImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWSDSSLClientCertificateVtbl < > { unsafe extern "system" fn GetClientCertificate < Impl : IWSDSSLClientCertificateImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppcertcontext : * mut * mut super::super::Security::Cryptography:: CERT_CONTEXT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetMappedAccessToken < Impl : IWSDSSLClientCertificateImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , phtoken : * mut super::super::Foundation:: HANDLE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetClientCertificate : GetClientCertificate :: < Impl , IMPL_OFFSET > , GetMappedAccessToken : GetMappedAccessToken :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWSDSSLClientCertificate < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IWSDScopeMatchingRuleImpl < > : Sized where { fn GetScopeRule ( ) ; fn MatchScopes ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IWSDScopeMatchingRuleVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWSDScopeMatchingRuleImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWSDScopeMatchingRuleVtbl < > { unsafe extern "system" fn GetScopeRule < Impl : IWSDScopeMatchingRuleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppszscopematchingrule : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn MatchScopes < Impl : IWSDScopeMatchingRuleImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszscope1 : super::super::Foundation:: PWSTR , pszscope2 : super::super::Foundation:: PWSTR , pfmatch : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetScopeRule : GetScopeRule :: < Impl , IMPL_OFFSET > , MatchScopes : MatchScopes :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWSDScopeMatchingRule < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IWSDServiceMessagingImpl < > : Sized where { fn SendResponse ( ) ; fn FaultRequest ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IWSDServiceMessagingVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWSDServiceMessagingImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWSDServiceMessagingVtbl < > { unsafe extern "system" fn SendResponse < Impl : IWSDServiceMessagingImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbody : * const :: core :: ffi :: c_void , poperation : * const WSD_OPERATION , pmessageparameters : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn FaultRequest < Impl : IWSDServiceMessagingImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , prequestheader : * const WSD_SOAP_HEADER , pmessageparameters : :: windows :: core :: RawPtr , pfault : * const WSD_SOAP_FAULT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SendResponse : SendResponse :: < Impl , IMPL_OFFSET > , FaultRequest : FaultRequest :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWSDServiceMessaging < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IWSDServiceProxyImpl < > : Sized + IWSDMetadataExchangeImpl where { fn BeginGetMetadata ( ) ; fn EndGetMetadata ( ) ; fn GetServiceMetadata ( ) ; fn SubscribeToOperation ( ) ; fn UnsubscribeToOperation ( ) ; fn SetEventingStatusCallback ( ) ; fn GetEndpointProxy ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IWSDServiceProxyVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWSDServiceProxyImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWSDServiceProxyVtbl < > { unsafe extern "system" fn BeginGetMetadata < Impl : IWSDServiceProxyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn EndGetMetadata < Impl : IWSDServiceProxyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , presult : :: windows :: core :: RawPtr , ppmetadata : * mut * mut WSD_METADATA_SECTION_LIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetServiceMetadata < Impl : IWSDServiceProxyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppservicemetadata : * mut * mut WSD_SERVICE_METADATA , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SubscribeToOperation < Impl : IWSDServiceProxyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , poperation : * const WSD_OPERATION , punknown : * mut :: core :: ffi :: c_void , pany : * const WSDXML_ELEMENT , ppany : * mut * mut WSDXML_ELEMENT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UnsubscribeToOperation < Impl : IWSDServiceProxyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , poperation : * const WSD_OPERATION , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetEventingStatusCallback < Impl : IWSDServiceProxyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pstatus : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetEndpointProxy < Impl : IWSDServiceProxyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppproxy : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IWSDMetadataExchangeVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , BeginGetMetadata : BeginGetMetadata :: < Impl , IMPL_OFFSET > , EndGetMetadata : EndGetMetadata :: < Impl , IMPL_OFFSET > , GetServiceMetadata : GetServiceMetadata :: < Impl , IMPL_OFFSET > , SubscribeToOperation : SubscribeToOperation :: < Impl , IMPL_OFFSET > , UnsubscribeToOperation : UnsubscribeToOperation :: < Impl , IMPL_OFFSET > , SetEventingStatusCallback : SetEventingStatusCallback :: < Impl , IMPL_OFFSET > , GetEndpointProxy : GetEndpointProxy :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWSDServiceProxy < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IWSDServiceProxyEventingImpl < > : Sized + IWSDMetadataExchangeImpl + IWSDServiceProxyImpl where { fn SubscribeToMultipleOperations ( ) ; fn BeginSubscribeToMultipleOperations ( ) ; fn EndSubscribeToMultipleOperations ( ) ; fn UnsubscribeToMultipleOperations ( ) ; fn BeginUnsubscribeToMultipleOperations ( ) ; fn EndUnsubscribeToMultipleOperations ( ) ; fn RenewMultipleOperations ( ) ; fn BeginRenewMultipleOperations ( ) ; fn EndRenewMultipleOperations ( ) ; fn GetStatusForMultipleOperations ( ) ; fn BeginGetStatusForMultipleOperations ( ) ; fn EndGetStatusForMultipleOperations ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IWSDServiceProxyEventingVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWSDServiceProxyEventingImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWSDServiceProxyEventingVtbl < > { unsafe extern "system" fn SubscribeToMultipleOperations < Impl : IWSDServiceProxyEventingImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , poperations : * const WSD_OPERATION , dwoperationcount : u32 , punknown : * mut :: core :: ffi :: c_void , pexpires : * const WSD_EVENTING_EXPIRES , pany : * const WSDXML_ELEMENT , ppexpires : * mut * mut WSD_EVENTING_EXPIRES , ppany : * mut * mut WSDXML_ELEMENT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BeginSubscribeToMultipleOperations < Impl : IWSDServiceProxyEventingImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , poperations : * const WSD_OPERATION , dwoperationcount : u32 , punknown : * mut :: core :: ffi :: c_void , pexpires : * const WSD_EVENTING_EXPIRES , pany : * const WSDXML_ELEMENT , pasyncstate : * mut :: core :: ffi :: c_void , pasynccallback : :: windows :: core :: RawPtr , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn EndSubscribeToMultipleOperations < Impl : IWSDServiceProxyEventingImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , poperations : * const WSD_OPERATION , dwoperationcount : u32 , presult : :: windows :: core :: RawPtr , ppexpires : * mut * mut WSD_EVENTING_EXPIRES , ppany : * mut * mut WSDXML_ELEMENT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UnsubscribeToMultipleOperations < Impl : IWSDServiceProxyEventingImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , poperations : * const WSD_OPERATION , dwoperationcount : u32 , pany : * const WSDXML_ELEMENT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BeginUnsubscribeToMultipleOperations < Impl : IWSDServiceProxyEventingImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , poperations : * const WSD_OPERATION , dwoperationcount : u32 , pany : * const WSDXML_ELEMENT , pasyncstate : * mut :: core :: ffi :: c_void , pasynccallback : :: windows :: core :: RawPtr , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn EndUnsubscribeToMultipleOperations < Impl : IWSDServiceProxyEventingImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , poperations : * const WSD_OPERATION , dwoperationcount : u32 , presult : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RenewMultipleOperations < Impl : IWSDServiceProxyEventingImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , poperations : * const WSD_OPERATION , dwoperationcount : u32 , pexpires : * const WSD_EVENTING_EXPIRES , pany : * const WSDXML_ELEMENT , ppexpires : * mut * mut WSD_EVENTING_EXPIRES , ppany : * mut * mut WSDXML_ELEMENT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BeginRenewMultipleOperations < Impl : IWSDServiceProxyEventingImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , poperations : * const WSD_OPERATION , dwoperationcount : u32 , pexpires : * const WSD_EVENTING_EXPIRES , pany : * const WSDXML_ELEMENT , pasyncstate : * mut :: core :: ffi :: c_void , pasynccallback : :: windows :: core :: RawPtr , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn EndRenewMultipleOperations < Impl : IWSDServiceProxyEventingImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , poperations : * const WSD_OPERATION , dwoperationcount : u32 , presult : :: windows :: core :: RawPtr , ppexpires : * mut * mut WSD_EVENTING_EXPIRES , ppany : * mut * mut WSDXML_ELEMENT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetStatusForMultipleOperations < Impl : IWSDServiceProxyEventingImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , poperations : * const WSD_OPERATION , dwoperationcount : u32 , pany : * const WSDXML_ELEMENT , ppexpires : * mut * mut WSD_EVENTING_EXPIRES , ppany : * mut * mut WSDXML_ELEMENT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BeginGetStatusForMultipleOperations < Impl : IWSDServiceProxyEventingImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , poperations : * const WSD_OPERATION , dwoperationcount : u32 , pany : * const WSDXML_ELEMENT , pasyncstate : * mut :: core :: ffi :: c_void , pasynccallback : :: windows :: core :: RawPtr , ppresult : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn EndGetStatusForMultipleOperations < Impl : IWSDServiceProxyEventingImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , poperations : * const WSD_OPERATION , dwoperationcount : u32 , presult : :: windows :: core :: RawPtr , ppexpires : * mut * mut WSD_EVENTING_EXPIRES , ppany : * mut * mut WSDXML_ELEMENT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IWSDServiceProxyVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SubscribeToMultipleOperations : SubscribeToMultipleOperations :: < Impl , IMPL_OFFSET > , BeginSubscribeToMultipleOperations : BeginSubscribeToMultipleOperations :: < Impl , IMPL_OFFSET > , EndSubscribeToMultipleOperations : EndSubscribeToMultipleOperations :: < Impl , IMPL_OFFSET > , UnsubscribeToMultipleOperations : UnsubscribeToMultipleOperations :: < Impl , IMPL_OFFSET > , BeginUnsubscribeToMultipleOperations : BeginUnsubscribeToMultipleOperations :: < Impl , IMPL_OFFSET > , EndUnsubscribeToMultipleOperations : EndUnsubscribeToMultipleOperations :: < Impl , IMPL_OFFSET > , RenewMultipleOperations : RenewMultipleOperations :: < Impl , IMPL_OFFSET > , BeginRenewMultipleOperations : BeginRenewMultipleOperations :: < Impl , IMPL_OFFSET > , EndRenewMultipleOperations : EndRenewMultipleOperations :: < Impl , IMPL_OFFSET > , GetStatusForMultipleOperations : GetStatusForMultipleOperations :: < Impl , IMPL_OFFSET > , BeginGetStatusForMultipleOperations : BeginGetStatusForMultipleOperations :: < Impl , IMPL_OFFSET > , EndGetStatusForMultipleOperations : EndGetStatusForMultipleOperations :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWSDServiceProxyEventing < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IWSDSignaturePropertyImpl < > : Sized where { fn IsMessageSigned ( ) ; fn IsMessageSignatureTrusted ( ) ; fn GetKeyInfo ( ) ; fn GetSignature ( ) ; fn GetSignedInfoHash ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IWSDSignaturePropertyVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWSDSignaturePropertyImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWSDSignaturePropertyVtbl < > { unsafe extern "system" fn IsMessageSigned < Impl : IWSDSignaturePropertyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbsigned : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsMessageSignatureTrusted < Impl : IWSDSignaturePropertyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbsignaturetrusted : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetKeyInfo < Impl : IWSDSignaturePropertyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbkeyinfo : * mut u8 , pdwkeyinfosize : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetSignature < Impl : IWSDSignaturePropertyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbsignature : * mut u8 , pdwsignaturesize : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetSignedInfoHash < Impl : IWSDSignaturePropertyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbsignedinfohash : * mut u8 , pdwhashsize : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , IsMessageSigned : IsMessageSigned :: < Impl , IMPL_OFFSET > , IsMessageSignatureTrusted : IsMessageSignatureTrusted :: < Impl , IMPL_OFFSET > , GetKeyInfo : GetKeyInfo :: < Impl , IMPL_OFFSET > , GetSignature : GetSignature :: < Impl , IMPL_OFFSET > , GetSignedInfoHash : GetSignedInfoHash :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWSDSignatureProperty < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IWSDTransportAddressImpl < > : Sized + IWSDAddressImpl where { fn GetPort ( ) ; fn SetPort ( ) ; fn GetTransportAddress ( ) ; fn GetTransportAddressEx ( ) ; fn SetTransportAddress ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IWSDTransportAddressVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWSDTransportAddressImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWSDTransportAddressVtbl < > { unsafe extern "system" fn GetPort < Impl : IWSDTransportAddressImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pwport : * mut u16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetPort < Impl : IWSDTransportAddressImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , wport : u16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetTransportAddress < Impl : IWSDTransportAddressImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppszaddress : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetTransportAddressEx < Impl : IWSDTransportAddressImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fsafe : super::super::Foundation:: BOOL , ppszaddress : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetTransportAddress < Impl : IWSDTransportAddressImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszaddress : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IWSDAddressVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , GetPort : GetPort :: < Impl , IMPL_OFFSET > , SetPort : SetPort :: < Impl , IMPL_OFFSET > , GetTransportAddress : GetTransportAddress :: < Impl , IMPL_OFFSET > , GetTransportAddressEx : GetTransportAddressEx :: < Impl , IMPL_OFFSET > , SetTransportAddress : SetTransportAddress :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWSDTransportAddress < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Networking_WinSock" ) ) ] pub trait IWSDUdpAddressImpl < > : Sized + IWSDAddressImpl + IWSDTransportAddressImpl where { fn SetSockaddr ( ) ; fn GetSockaddr ( ) ; fn SetExclusive ( ) ; fn GetExclusive ( ) ; fn SetMessageType ( ) ; fn GetMessageType ( ) ; fn SetTTL ( ) ; fn GetTTL ( ) ; fn SetAlias ( ) ; fn GetAlias ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_Networking_WinSock" ) ) ] impl < > IWSDUdpAddressVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWSDUdpAddressImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWSDUdpAddressVtbl < > { unsafe extern "system" fn SetSockaddr < Impl : IWSDUdpAddressImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psockaddr : * const super::super::Networking::WinSock:: SOCKADDR_STORAGE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetSockaddr < Impl : IWSDUdpAddressImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psockaddr : * mut super::super::Networking::WinSock:: SOCKADDR_STORAGE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetExclusive < Impl : IWSDUdpAddressImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fexclusive : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetExclusive < Impl : IWSDUdpAddressImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetMessageType < Impl : IWSDUdpAddressImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , messagetype : WSDUdpMessageType , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetMessageType < Impl : IWSDUdpAddressImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pmessagetype : * mut WSDUdpMessageType , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetTTL < Impl : IWSDUdpAddressImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwttl : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetTTL < Impl : IWSDUdpAddressImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdwttl : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetAlias < Impl : IWSDUdpAddressImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , palias : * const :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetAlias < Impl : IWSDUdpAddressImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , palias : * mut :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IWSDTransportAddressVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetSockaddr : SetSockaddr :: < Impl , IMPL_OFFSET > , GetSockaddr : GetSockaddr :: < Impl , IMPL_OFFSET > , SetExclusive : SetExclusive :: < Impl , IMPL_OFFSET > , GetExclusive : GetExclusive :: < Impl , IMPL_OFFSET > , SetMessageType : SetMessageType :: < Impl , IMPL_OFFSET > , GetMessageType : GetMessageType :: < Impl , IMPL_OFFSET > , SetTTL : SetTTL :: < Impl , IMPL_OFFSET > , GetTTL : GetTTL :: < Impl , IMPL_OFFSET > , SetAlias : SetAlias :: < Impl , IMPL_OFFSET > , GetAlias : GetAlias :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWSDUdpAddress < > as :: windows :: core :: Interface > :: IID } } pub trait IWSDUdpMessageParametersImpl < > : Sized + IWSDMessageParametersImpl where { fn SetRetransmitParams ( ) ; fn GetRetransmitParams ( ) ; } impl < > IWSDUdpMessageParametersVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWSDUdpMessageParametersImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWSDUdpMessageParametersVtbl < > { unsafe extern "system" fn SetRetransmitParams < Impl : IWSDUdpMessageParametersImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pparams : * const WSDUdpRetransmitParams , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetRetransmitParams < Impl : IWSDUdpMessageParametersImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pparams : * mut WSDUdpRetransmitParams , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IWSDMessageParametersVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , SetRetransmitParams : SetRetransmitParams :: < Impl , IMPL_OFFSET > , GetRetransmitParams : GetRetransmitParams :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWSDUdpMessageParameters < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IWSDXMLContextImpl < > : Sized where { fn AddNamespace ( ) ; fn AddNameToNamespace ( ) ; fn SetNamespaces ( ) ; fn SetTypes ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IWSDXMLContextVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWSDXMLContextImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWSDXMLContextVtbl < > { unsafe extern "system" fn AddNamespace < Impl : IWSDXMLContextImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszuri : super::super::Foundation:: PWSTR , pszsuggestedprefix : super::super::Foundation:: PWSTR , ppnamespace : * mut * mut WSDXML_NAMESPACE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddNameToNamespace < Impl : IWSDXMLContextImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszuri : super::super::Foundation:: PWSTR , pszname : super::super::Foundation:: PWSTR , ppname : * mut * mut WSDXML_NAME , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetNamespaces < Impl : IWSDXMLContextImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pnamespaces : * const * const WSDXML_NAMESPACE , wnamespacescount : u16 , blayernumber : u8 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetTypes < Impl : IWSDXMLContextImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ptypes : * const * const WSDXML_TYPE , dwtypescount : u32 , blayernumber : u8 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , AddNamespace : AddNamespace :: < Impl , IMPL_OFFSET > , AddNameToNamespace : AddNameToNamespace :: < Impl , IMPL_OFFSET > , SetNamespaces : SetNamespaces :: < Impl , IMPL_OFFSET > , SetTypes : SetTypes :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWSDXMLContext < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IWSDiscoveredServiceImpl < > : Sized where { fn GetEndpointReference ( ) ; fn GetTypes ( ) ; fn GetScopes ( ) ; fn GetXAddrs ( ) ; fn GetMetadataVersion ( ) ; fn GetExtendedDiscoXML ( ) ; fn GetProbeResolveTag ( ) ; fn GetRemoteTransportAddress ( ) ; fn GetLocalTransportAddress ( ) ; fn GetLocalInterfaceGUID ( ) ; fn GetInstanceId ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IWSDiscoveredServiceVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWSDiscoveredServiceImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWSDiscoveredServiceVtbl < > { unsafe extern "system" fn GetEndpointReference < Impl : IWSDiscoveredServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppendpointreference : * mut * mut WSD_ENDPOINT_REFERENCE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetTypes < Impl : IWSDiscoveredServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pptypeslist : * mut * mut WSD_NAME_LIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetScopes < Impl : IWSDiscoveredServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppscopeslist : * mut * mut WSD_URI_LIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetXAddrs < Impl : IWSDiscoveredServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppxaddrslist : * mut * mut WSD_URI_LIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetMetadataVersion < Impl : IWSDiscoveredServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pullmetadataversion : * mut u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetExtendedDiscoXML < Impl : IWSDiscoveredServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppheaderany : * mut * mut WSDXML_ELEMENT , ppbodyany : * mut * mut WSDXML_ELEMENT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetProbeResolveTag < Impl : IWSDiscoveredServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppsztag : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetRemoteTransportAddress < Impl : IWSDiscoveredServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppszremotetransportaddress : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetLocalTransportAddress < Impl : IWSDiscoveredServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppszlocaltransportaddress : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetLocalInterfaceGUID < Impl : IWSDiscoveredServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pguid : * mut :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetInstanceId < Impl : IWSDiscoveredServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pullinstanceid : * mut u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetEndpointReference : GetEndpointReference :: < Impl , IMPL_OFFSET > , GetTypes : GetTypes :: < Impl , IMPL_OFFSET > , GetScopes : GetScopes :: < Impl , IMPL_OFFSET > , GetXAddrs : GetXAddrs :: < Impl , IMPL_OFFSET > , GetMetadataVersion : GetMetadataVersion :: < Impl , IMPL_OFFSET > , GetExtendedDiscoXML : GetExtendedDiscoXML :: < Impl , IMPL_OFFSET > , GetProbeResolveTag : GetProbeResolveTag :: < Impl , IMPL_OFFSET > , GetRemoteTransportAddress : GetRemoteTransportAddress :: < Impl , IMPL_OFFSET > , GetLocalTransportAddress : GetLocalTransportAddress :: < Impl , IMPL_OFFSET > , GetLocalInterfaceGUID : GetLocalInterfaceGUID :: < Impl , IMPL_OFFSET > , GetInstanceId : GetInstanceId :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWSDiscoveredService < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IWSDiscoveryProviderImpl < > : Sized where { fn SetAddressFamily ( ) ; fn Attach ( ) ; fn Detach ( ) ; fn SearchById ( ) ; fn SearchByAddress ( ) ; fn SearchByType ( ) ; fn GetXMLContext ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IWSDiscoveryProviderVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWSDiscoveryProviderImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWSDiscoveryProviderVtbl < > { unsafe extern "system" fn SetAddressFamily < Impl : IWSDiscoveryProviderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwaddressfamily : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Attach < Impl : IWSDiscoveryProviderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psink : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Detach < Impl : IWSDiscoveryProviderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SearchById < Impl : IWSDiscoveryProviderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszid : super::super::Foundation:: PWSTR , psztag : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SearchByAddress < Impl : IWSDiscoveryProviderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszaddress : super::super::Foundation:: PWSTR , psztag : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SearchByType < Impl : IWSDiscoveryProviderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ptypeslist : * const WSD_NAME_LIST , pscopeslist : * const WSD_URI_LIST , pszmatchby : super::super::Foundation:: PWSTR , psztag : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetXMLContext < Impl : IWSDiscoveryProviderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppcontext : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetAddressFamily : SetAddressFamily :: < Impl , IMPL_OFFSET > , Attach : Attach :: < Impl , IMPL_OFFSET > , Detach : Detach :: < Impl , IMPL_OFFSET > , SearchById : SearchById :: < Impl , IMPL_OFFSET > , SearchByAddress : SearchByAddress :: < Impl , IMPL_OFFSET > , SearchByType : SearchByType :: < Impl , IMPL_OFFSET > , GetXMLContext : GetXMLContext :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWSDiscoveryProvider < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IWSDiscoveryProviderNotifyImpl < > : Sized where { fn Add ( ) ; fn Remove ( ) ; fn SearchFailed ( ) ; fn SearchComplete ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IWSDiscoveryProviderNotifyVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWSDiscoveryProviderNotifyImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWSDiscoveryProviderNotifyVtbl < > { unsafe extern "system" fn Add < Impl : IWSDiscoveryProviderNotifyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pservice : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Remove < Impl : IWSDiscoveryProviderNotifyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pservice : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SearchFailed < Impl : IWSDiscoveryProviderNotifyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hr : :: windows :: core :: HRESULT , psztag : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SearchComplete < Impl : IWSDiscoveryProviderNotifyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psztag : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Add : Add :: < Impl , IMPL_OFFSET > , Remove : Remove :: < Impl , IMPL_OFFSET > , SearchFailed : SearchFailed :: < Impl , IMPL_OFFSET > , SearchComplete : SearchComplete :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWSDiscoveryProviderNotify < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IWSDiscoveryPublisherImpl < > : Sized where { fn SetAddressFamily ( ) ; fn RegisterNotificationSink ( ) ; fn UnRegisterNotificationSink ( ) ; fn Publish ( ) ; fn UnPublish ( ) ; fn MatchProbe ( ) ; fn MatchResolve ( ) ; fn PublishEx ( ) ; fn MatchProbeEx ( ) ; fn MatchResolveEx ( ) ; fn RegisterScopeMatchingRule ( ) ; fn UnRegisterScopeMatchingRule ( ) ; fn GetXMLContext ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IWSDiscoveryPublisherVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWSDiscoveryPublisherImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWSDiscoveryPublisherVtbl < > { unsafe extern "system" fn SetAddressFamily < Impl : IWSDiscoveryPublisherImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwaddressfamily : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RegisterNotificationSink < Impl : IWSDiscoveryPublisherImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psink : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UnRegisterNotificationSink < Impl : IWSDiscoveryPublisherImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psink : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Publish < Impl : IWSDiscoveryPublisherImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszid : super::super::Foundation:: PWSTR , ullmetadataversion : u64 , ullinstanceid : u64 , ullmessagenumber : u64 , pszsessionid : super::super::Foundation:: PWSTR , ptypeslist : * const WSD_NAME_LIST , pscopeslist : * const WSD_URI_LIST , pxaddrslist : * const WSD_URI_LIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UnPublish < Impl : IWSDiscoveryPublisherImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszid : super::super::Foundation:: PWSTR , ullinstanceid : u64 , ullmessagenumber : u64 , pszsessionid : super::super::Foundation:: PWSTR , pany : * const WSDXML_ELEMENT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn MatchProbe < Impl : IWSDiscoveryPublisherImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pprobemessage : * const WSD_SOAP_MESSAGE , pmessageparameters : :: windows :: core :: RawPtr , pszid : super::super::Foundation:: PWSTR , ullmetadataversion : u64 , ullinstanceid : u64 , ullmessagenumber : u64 , pszsessionid : super::super::Foundation:: PWSTR , ptypeslist : * const WSD_NAME_LIST , pscopeslist : * const WSD_URI_LIST , pxaddrslist : * const WSD_URI_LIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn MatchResolve < Impl : IWSDiscoveryPublisherImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , presolvemessage : * const WSD_SOAP_MESSAGE , pmessageparameters : :: windows :: core :: RawPtr , pszid : super::super::Foundation:: PWSTR , ullmetadataversion : u64 , ullinstanceid : u64 , ullmessagenumber : u64 , pszsessionid : super::super::Foundation:: PWSTR , ptypeslist : * const WSD_NAME_LIST , pscopeslist : * const WSD_URI_LIST , pxaddrslist : * const WSD_URI_LIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PublishEx < Impl : IWSDiscoveryPublisherImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pszid : super::super::Foundation:: PWSTR , ullmetadataversion : u64 , ullinstanceid : u64 , ullmessagenumber : u64 , pszsessionid : super::super::Foundation:: PWSTR , ptypeslist : * const WSD_NAME_LIST , pscopeslist : * const WSD_URI_LIST , pxaddrslist : * const WSD_URI_LIST , pheaderany : * const WSDXML_ELEMENT , preferenceparameterany : * const WSDXML_ELEMENT , ppolicyany : * const WSDXML_ELEMENT , pendpointreferenceany : * const WSDXML_ELEMENT , pany : * const WSDXML_ELEMENT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn MatchProbeEx < Impl : IWSDiscoveryPublisherImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pprobemessage : * const WSD_SOAP_MESSAGE , pmessageparameters : :: windows :: core :: RawPtr , pszid : super::super::Foundation:: PWSTR , ullmetadataversion : u64 , ullinstanceid : u64 , ullmessagenumber : u64 , pszsessionid : super::super::Foundation:: PWSTR , ptypeslist : * const WSD_NAME_LIST , pscopeslist : * const WSD_URI_LIST , pxaddrslist : * const WSD_URI_LIST , pheaderany : * const WSDXML_ELEMENT , preferenceparameterany : * const WSDXML_ELEMENT , ppolicyany : * const WSDXML_ELEMENT , pendpointreferenceany : * const WSDXML_ELEMENT , pany : * const WSDXML_ELEMENT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn MatchResolveEx < Impl : IWSDiscoveryPublisherImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , presolvemessage : * const WSD_SOAP_MESSAGE , pmessageparameters : :: windows :: core :: RawPtr , pszid : super::super::Foundation:: PWSTR , ullmetadataversion : u64 , ullinstanceid : u64 , ullmessagenumber : u64 , pszsessionid : super::super::Foundation:: PWSTR , ptypeslist : * const WSD_NAME_LIST , pscopeslist : * const WSD_URI_LIST , pxaddrslist : * const WSD_URI_LIST , pheaderany : * const WSDXML_ELEMENT , preferenceparameterany : * const WSDXML_ELEMENT , ppolicyany : * const WSDXML_ELEMENT , pendpointreferenceany : * const WSDXML_ELEMENT , pany : * const WSDXML_ELEMENT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RegisterScopeMatchingRule < Impl : IWSDiscoveryPublisherImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pscopematchingrule : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UnRegisterScopeMatchingRule < Impl : IWSDiscoveryPublisherImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pscopematchingrule : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetXMLContext < Impl : IWSDiscoveryPublisherImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppcontext : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetAddressFamily : SetAddressFamily :: < Impl , IMPL_OFFSET > , RegisterNotificationSink : RegisterNotificationSink :: < Impl , IMPL_OFFSET > , UnRegisterNotificationSink : UnRegisterNotificationSink :: < Impl , IMPL_OFFSET > , Publish : Publish :: < Impl , IMPL_OFFSET > , UnPublish : UnPublish :: < Impl , IMPL_OFFSET > , MatchProbe : MatchProbe :: < Impl , IMPL_OFFSET > , MatchResolve : MatchResolve :: < Impl , IMPL_OFFSET > , PublishEx : PublishEx :: < Impl , IMPL_OFFSET > , MatchProbeEx : MatchProbeEx :: < Impl , IMPL_OFFSET > , MatchResolveEx : MatchResolveEx :: < Impl , IMPL_OFFSET > , RegisterScopeMatchingRule : RegisterScopeMatchingRule :: < Impl , IMPL_OFFSET > , UnRegisterScopeMatchingRule : UnRegisterScopeMatchingRule :: < Impl , IMPL_OFFSET > , GetXMLContext : GetXMLContext :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWSDiscoveryPublisher < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IWSDiscoveryPublisherNotifyImpl < > : Sized where { fn ProbeHandler ( ) ; fn ResolveHandler ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IWSDiscoveryPublisherNotifyVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWSDiscoveryPublisherNotifyImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWSDiscoveryPublisherNotifyVtbl < > { unsafe extern "system" fn ProbeHandler < Impl : IWSDiscoveryPublisherNotifyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psoap : * const WSD_SOAP_MESSAGE , pmessageparameters : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ResolveHandler < Impl : IWSDiscoveryPublisherNotifyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psoap : * const WSD_SOAP_MESSAGE , pmessageparameters : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , ProbeHandler : ProbeHandler :: < Impl , IMPL_OFFSET > , ResolveHandler : ResolveHandler :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWSDiscoveryPublisherNotify < > as :: windows :: core :: Interface > :: IID } } 