pub trait IUPnPAddressFamilyControlImpl < > : Sized where { fn SetAddressFamily ( ) ; fn GetAddressFamily ( ) ; } impl < > IUPnPAddressFamilyControlVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IUPnPAddressFamilyControlImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IUPnPAddressFamilyControlVtbl < > { unsafe extern "system" fn SetAddressFamily < Impl : IUPnPAddressFamilyControlImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwflags : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetAddressFamily < Impl : IUPnPAddressFamilyControlImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdwflags : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetAddressFamily : SetAddressFamily :: < Impl , IMPL_OFFSET > , GetAddressFamily : GetAddressFamily :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IUPnPAddressFamilyControl < > as :: windows :: core :: Interface > :: IID } } pub trait IUPnPAsyncResultImpl < > : Sized where { fn AsyncOperationComplete ( ) ; } impl < > IUPnPAsyncResultVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IUPnPAsyncResultImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IUPnPAsyncResultVtbl < > { unsafe extern "system" fn AsyncOperationComplete < Impl : IUPnPAsyncResultImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ullrequestid : u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , AsyncOperationComplete : AsyncOperationComplete :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IUPnPAsyncResult < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IUPnPDescriptionDocumentImpl < > : Sized + IDispatchImpl where { fn ReadyState ( ) ; fn Load ( ) ; fn LoadAsync ( ) ; fn LoadResult ( ) ; fn Abort ( ) ; fn RootDevice ( ) ; fn DeviceByUDN ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IUPnPDescriptionDocumentVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IUPnPDescriptionDocumentImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IUPnPDescriptionDocumentVtbl < > { unsafe extern "system" fn ReadyState < Impl : IUPnPDescriptionDocumentImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plreadystate : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Load < Impl : IUPnPDescriptionDocumentImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrurl : :: core :: mem :: ManuallyDrop < super::super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn LoadAsync < Impl : IUPnPDescriptionDocumentImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrurl : :: core :: mem :: ManuallyDrop < super::super::super::Foundation:: BSTR > , punkcallback : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn LoadResult < Impl : IUPnPDescriptionDocumentImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , phrerror : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Abort < Impl : IUPnPDescriptionDocumentImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RootDevice < Impl : IUPnPDescriptionDocumentImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppudrootdevice : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeviceByUDN < Impl : IUPnPDescriptionDocumentImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrudn : :: core :: mem :: ManuallyDrop < super::super::super::Foundation:: BSTR > , ppuddevice : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IDispatchVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , ReadyState : ReadyState :: < Impl , IMPL_OFFSET > , Load : Load :: < Impl , IMPL_OFFSET > , LoadAsync : LoadAsync :: < Impl , IMPL_OFFSET > , LoadResult : LoadResult :: < Impl , IMPL_OFFSET > , Abort : Abort :: < Impl , IMPL_OFFSET > , RootDevice : RootDevice :: < Impl , IMPL_OFFSET > , DeviceByUDN : DeviceByUDN :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IUPnPDescriptionDocument < > as :: windows :: core :: Interface > :: IID } } pub trait IUPnPDescriptionDocumentCallbackImpl < > : Sized where { fn LoadComplete ( ) ; } impl < > IUPnPDescriptionDocumentCallbackVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IUPnPDescriptionDocumentCallbackImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IUPnPDescriptionDocumentCallbackVtbl < > { unsafe extern "system" fn LoadComplete < Impl : IUPnPDescriptionDocumentCallbackImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hrloadresult : :: windows :: core :: HRESULT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , LoadComplete : LoadComplete :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IUPnPDescriptionDocumentCallback < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IUPnPDeviceImpl < > : Sized + IDispatchImpl where { fn IsRootDevice ( ) ; fn RootDevice ( ) ; fn ParentDevice ( ) ; fn HasChildren ( ) ; fn Children ( ) ; fn UniqueDeviceName ( ) ; fn FriendlyName ( ) ; fn Type ( ) ; fn PresentationURL ( ) ; fn ManufacturerName ( ) ; fn ManufacturerURL ( ) ; fn ModelName ( ) ; fn ModelNumber ( ) ; fn Description ( ) ; fn ModelURL ( ) ; fn UPC ( ) ; fn SerialNumber ( ) ; fn IconURL ( ) ; fn Services ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IUPnPDeviceVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IUPnPDeviceImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IUPnPDeviceVtbl < > { unsafe extern "system" fn IsRootDevice < Impl : IUPnPDeviceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarb : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RootDevice < Impl : IUPnPDeviceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppudrootdevice : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ParentDevice < Impl : IUPnPDeviceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppuddeviceparent : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HasChildren < Impl : IUPnPDeviceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pvarb : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Children < Impl : IUPnPDeviceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppudchildren : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UniqueDeviceName < Impl : IUPnPDeviceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstr : * mut super::super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn FriendlyName < Impl : IUPnPDeviceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstr : * mut super::super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Type < Impl : IUPnPDeviceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstr : * mut super::super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PresentationURL < Impl : IUPnPDeviceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstr : * mut super::super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ManufacturerName < Impl : IUPnPDeviceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstr : * mut super::super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ManufacturerURL < Impl : IUPnPDeviceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstr : * mut super::super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ModelName < Impl : IUPnPDeviceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstr : * mut super::super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ModelNumber < Impl : IUPnPDeviceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstr : * mut super::super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Description < Impl : IUPnPDeviceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstr : * mut super::super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ModelURL < Impl : IUPnPDeviceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstr : * mut super::super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UPC < Impl : IUPnPDeviceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstr : * mut super::super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SerialNumber < Impl : IUPnPDeviceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstr : * mut super::super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IconURL < Impl : IUPnPDeviceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrencodingformat : :: core :: mem :: ManuallyDrop < super::super::super::Foundation:: BSTR > , lsizex : i32 , lsizey : i32 , lbitdepth : i32 , pbstriconurl : * mut super::super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Services < Impl : IUPnPDeviceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppusservices : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IDispatchVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , IsRootDevice : IsRootDevice :: < Impl , IMPL_OFFSET > , RootDevice : RootDevice :: < Impl , IMPL_OFFSET > , ParentDevice : ParentDevice :: < Impl , IMPL_OFFSET > , HasChildren : HasChildren :: < Impl , IMPL_OFFSET > , Children : Children :: < Impl , IMPL_OFFSET > , UniqueDeviceName : UniqueDeviceName :: < Impl , IMPL_OFFSET > , FriendlyName : FriendlyName :: < Impl , IMPL_OFFSET > , Type : Type :: < Impl , IMPL_OFFSET > , PresentationURL : PresentationURL :: < Impl , IMPL_OFFSET > , ManufacturerName : ManufacturerName :: < Impl , IMPL_OFFSET > , ManufacturerURL : ManufacturerURL :: < Impl , IMPL_OFFSET > , ModelName : ModelName :: < Impl , IMPL_OFFSET > , ModelNumber : ModelNumber :: < Impl , IMPL_OFFSET > , Description : Description :: < Impl , IMPL_OFFSET > , ModelURL : ModelURL :: < Impl , IMPL_OFFSET > , UPC : UPC :: < Impl , IMPL_OFFSET > , SerialNumber : SerialNumber :: < Impl , IMPL_OFFSET > , IconURL : IconURL :: < Impl , IMPL_OFFSET > , Services : Services :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IUPnPDevice < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IUPnPDeviceControlImpl < > : Sized where { fn Initialize ( ) ; fn GetServiceObject ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IUPnPDeviceControlVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IUPnPDeviceControlImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IUPnPDeviceControlVtbl < > { unsafe extern "system" fn Initialize < Impl : IUPnPDeviceControlImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrxmldesc : :: core :: mem :: ManuallyDrop < super::super::super::Foundation:: BSTR > , bstrdeviceidentifier : :: core :: mem :: ManuallyDrop < super::super::super::Foundation:: BSTR > , bstrinitstring : :: core :: mem :: ManuallyDrop < super::super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetServiceObject < Impl : IUPnPDeviceControlImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrudn : :: core :: mem :: ManuallyDrop < super::super::super::Foundation:: BSTR > , bstrserviceid : :: core :: mem :: ManuallyDrop < super::super::super::Foundation:: BSTR > , ppdispservice : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Initialize : Initialize :: < Impl , IMPL_OFFSET > , GetServiceObject : GetServiceObject :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IUPnPDeviceControl < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IUPnPDeviceControlHttpHeadersImpl < > : Sized where { fn GetAdditionalResponseHeaders ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IUPnPDeviceControlHttpHeadersVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IUPnPDeviceControlHttpHeadersImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IUPnPDeviceControlHttpHeadersVtbl < > { unsafe extern "system" fn GetAdditionalResponseHeaders < Impl : IUPnPDeviceControlHttpHeadersImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrhttpresponseheaders : * mut super::super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetAdditionalResponseHeaders : GetAdditionalResponseHeaders :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IUPnPDeviceControlHttpHeaders < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IUPnPDeviceDocumentAccessImpl < > : Sized where { fn GetDocumentURL ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IUPnPDeviceDocumentAccessVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IUPnPDeviceDocumentAccessImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IUPnPDeviceDocumentAccessVtbl < > { unsafe extern "system" fn GetDocumentURL < Impl : IUPnPDeviceDocumentAccessImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrdocument : * mut super::super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetDocumentURL : GetDocumentURL :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IUPnPDeviceDocumentAccess < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IUPnPDeviceDocumentAccessExImpl < > : Sized where { fn GetDocument ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IUPnPDeviceDocumentAccessExVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IUPnPDeviceDocumentAccessExImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IUPnPDeviceDocumentAccessExVtbl < > { unsafe extern "system" fn GetDocument < Impl : IUPnPDeviceDocumentAccessExImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrdocument : * mut super::super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetDocument : GetDocument :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IUPnPDeviceDocumentAccessEx < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IUPnPDeviceFinderImpl < > : Sized + IDispatchImpl where { fn FindByType ( ) ; fn CreateAsyncFind ( ) ; fn StartAsyncFind ( ) ; fn CancelAsyncFind ( ) ; fn FindByUDN ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IUPnPDeviceFinderVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IUPnPDeviceFinderImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IUPnPDeviceFinderVtbl < > { unsafe extern "system" fn FindByType < Impl : IUPnPDeviceFinderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrtypeuri : :: core :: mem :: ManuallyDrop < super::super::super::Foundation:: BSTR > , dwflags : u32 , pdevices : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CreateAsyncFind < Impl : IUPnPDeviceFinderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrtypeuri : :: core :: mem :: ManuallyDrop < super::super::super::Foundation:: BSTR > , dwflags : u32 , punkdevicefindercallback : * mut :: core :: ffi :: c_void , plfinddata : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn StartAsyncFind < Impl : IUPnPDeviceFinderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lfinddata : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CancelAsyncFind < Impl : IUPnPDeviceFinderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lfinddata : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn FindByUDN < Impl : IUPnPDeviceFinderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrudn : :: core :: mem :: ManuallyDrop < super::super::super::Foundation:: BSTR > , pdevice : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IDispatchVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , FindByType : FindByType :: < Impl , IMPL_OFFSET > , CreateAsyncFind : CreateAsyncFind :: < Impl , IMPL_OFFSET > , StartAsyncFind : StartAsyncFind :: < Impl , IMPL_OFFSET > , CancelAsyncFind : CancelAsyncFind :: < Impl , IMPL_OFFSET > , FindByUDN : FindByUDN :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IUPnPDeviceFinder < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_System_Com" ) ] pub trait IUPnPDeviceFinderAddCallbackWithInterfaceImpl < > : Sized where { fn DeviceAddedWithInterface ( ) ; } # [ cfg ( feature ="Win32_System_Com" ) ] impl < > IUPnPDeviceFinderAddCallbackWithInterfaceVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IUPnPDeviceFinderAddCallbackWithInterfaceImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IUPnPDeviceFinderAddCallbackWithInterfaceVtbl < > { unsafe extern "system" fn DeviceAddedWithInterface < Impl : IUPnPDeviceFinderAddCallbackWithInterfaceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lfinddata : i32 , pdevice : :: windows :: core :: RawPtr , pguidinterface : * const :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , DeviceAddedWithInterface : DeviceAddedWithInterface :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IUPnPDeviceFinderAddCallbackWithInterface < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IUPnPDeviceFinderCallbackImpl < > : Sized where { fn DeviceAdded ( ) ; fn DeviceRemoved ( ) ; fn SearchComplete ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IUPnPDeviceFinderCallbackVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IUPnPDeviceFinderCallbackImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IUPnPDeviceFinderCallbackVtbl < > { unsafe extern "system" fn DeviceAdded < Impl : IUPnPDeviceFinderCallbackImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lfinddata : i32 , pdevice : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeviceRemoved < Impl : IUPnPDeviceFinderCallbackImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lfinddata : i32 , bstrudn : :: core :: mem :: ManuallyDrop < super::super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SearchComplete < Impl : IUPnPDeviceFinderCallbackImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lfinddata : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , DeviceAdded : DeviceAdded :: < Impl , IMPL_OFFSET > , DeviceRemoved : DeviceRemoved :: < Impl , IMPL_OFFSET > , SearchComplete : SearchComplete :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IUPnPDeviceFinderCallback < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IUPnPDeviceProviderImpl < > : Sized where { fn Start ( ) ; fn Stop ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IUPnPDeviceProviderVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IUPnPDeviceProviderImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IUPnPDeviceProviderVtbl < > { unsafe extern "system" fn Start < Impl : IUPnPDeviceProviderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrinitstring : :: core :: mem :: ManuallyDrop < super::super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Stop < Impl : IUPnPDeviceProviderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Start : Start :: < Impl , IMPL_OFFSET > , Stop : Stop :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IUPnPDeviceProvider < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IUPnPDevicesImpl < > : Sized + IDispatchImpl where { fn Count ( ) ; fn _NewEnum ( ) ; fn Item ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IUPnPDevicesVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IUPnPDevicesImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IUPnPDevicesVtbl < > { unsafe extern "system" fn Count < Impl : IUPnPDevicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plcount : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _NewEnum < Impl : IUPnPDevicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppunk : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Item < Impl : IUPnPDevicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrudn : :: core :: mem :: ManuallyDrop < super::super::super::Foundation:: BSTR > , ppdevice : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IDispatchVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Count : Count :: < Impl , IMPL_OFFSET > , _NewEnum : _NewEnum :: < Impl , IMPL_OFFSET > , Item : Item :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IUPnPDevices < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IUPnPEventSinkImpl < > : Sized where { fn OnStateChanged ( ) ; fn OnStateChangedSafe ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IUPnPEventSinkVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IUPnPEventSinkImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IUPnPEventSinkVtbl < > { unsafe extern "system" fn OnStateChanged < Impl : IUPnPEventSinkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cchanges : u32 , rgdispidchanges : * const i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OnStateChangedSafe < Impl : IUPnPEventSinkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , varsadispidchanges : :: core :: mem :: ManuallyDrop < super::super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , OnStateChanged : OnStateChanged :: < Impl , IMPL_OFFSET > , OnStateChangedSafe : OnStateChangedSafe :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IUPnPEventSink < > as :: windows :: core :: Interface > :: IID } } pub trait IUPnPEventSourceImpl < > : Sized where { fn Advise ( ) ; fn Unadvise ( ) ; } impl < > IUPnPEventSourceVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IUPnPEventSourceImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IUPnPEventSourceVtbl < > { unsafe extern "system" fn Advise < Impl : IUPnPEventSourceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pessubscriber : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Unadvise < Impl : IUPnPEventSourceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pessubscriber : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Advise : Advise :: < Impl , IMPL_OFFSET > , Unadvise : Unadvise :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IUPnPEventSource < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IUPnPHttpHeaderControlImpl < > : Sized where { fn AddRequestHeaders ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IUPnPHttpHeaderControlVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IUPnPHttpHeaderControlImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IUPnPHttpHeaderControlVtbl < > { unsafe extern "system" fn AddRequestHeaders < Impl : IUPnPHttpHeaderControlImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrhttpheaders : :: core :: mem :: ManuallyDrop < super::super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , AddRequestHeaders : AddRequestHeaders :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IUPnPHttpHeaderControl < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IUPnPRegistrarImpl < > : Sized where { fn RegisterDevice ( ) ; fn RegisterRunningDevice ( ) ; fn RegisterDeviceProvider ( ) ; fn GetUniqueDeviceName ( ) ; fn UnregisterDevice ( ) ; fn UnregisterDeviceProvider ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IUPnPRegistrarVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IUPnPRegistrarImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IUPnPRegistrarVtbl < > { unsafe extern "system" fn RegisterDevice < Impl : IUPnPRegistrarImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrxmldesc : :: core :: mem :: ManuallyDrop < super::super::super::Foundation:: BSTR > , bstrprogiddevicecontrolclass : :: core :: mem :: ManuallyDrop < super::super::super::Foundation:: BSTR > , bstrinitstring : :: core :: mem :: ManuallyDrop < super::super::super::Foundation:: BSTR > , bstrcontainerid : :: core :: mem :: ManuallyDrop < super::super::super::Foundation:: BSTR > , bstrresourcepath : :: core :: mem :: ManuallyDrop < super::super::super::Foundation:: BSTR > , nlifetime : i32 , pbstrdeviceidentifier : * mut super::super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RegisterRunningDevice < Impl : IUPnPRegistrarImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrxmldesc : :: core :: mem :: ManuallyDrop < super::super::super::Foundation:: BSTR > , punkdevicecontrol : * mut :: core :: ffi :: c_void , bstrinitstring : :: core :: mem :: ManuallyDrop < super::super::super::Foundation:: BSTR > , bstrresourcepath : :: core :: mem :: ManuallyDrop < super::super::super::Foundation:: BSTR > , nlifetime : i32 , pbstrdeviceidentifier : * mut super::super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RegisterDeviceProvider < Impl : IUPnPRegistrarImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrprovidername : :: core :: mem :: ManuallyDrop < super::super::super::Foundation:: BSTR > , bstrprogidproviderclass : :: core :: mem :: ManuallyDrop < super::super::super::Foundation:: BSTR > , bstrinitstring : :: core :: mem :: ManuallyDrop < super::super::super::Foundation:: BSTR > , bstrcontainerid : :: core :: mem :: ManuallyDrop < super::super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetUniqueDeviceName < Impl : IUPnPRegistrarImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrdeviceidentifier : :: core :: mem :: ManuallyDrop < super::super::super::Foundation:: BSTR > , bstrtemplateudn : :: core :: mem :: ManuallyDrop < super::super::super::Foundation:: BSTR > , pbstrudn : * mut super::super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UnregisterDevice < Impl : IUPnPRegistrarImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrdeviceidentifier : :: core :: mem :: ManuallyDrop < super::super::super::Foundation:: BSTR > , fpermanent : super::super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UnregisterDeviceProvider < Impl : IUPnPRegistrarImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrprovidername : :: core :: mem :: ManuallyDrop < super::super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , RegisterDevice : RegisterDevice :: < Impl , IMPL_OFFSET > , RegisterRunningDevice : RegisterRunningDevice :: < Impl , IMPL_OFFSET > , RegisterDeviceProvider : RegisterDeviceProvider :: < Impl , IMPL_OFFSET > , GetUniqueDeviceName : GetUniqueDeviceName :: < Impl , IMPL_OFFSET > , UnregisterDevice : UnregisterDevice :: < Impl , IMPL_OFFSET > , UnregisterDeviceProvider : UnregisterDeviceProvider :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IUPnPRegistrar < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IUPnPRemoteEndpointInfoImpl < > : Sized where { fn GetDwordValue ( ) ; fn GetStringValue ( ) ; fn GetGuidValue ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IUPnPRemoteEndpointInfoVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IUPnPRemoteEndpointInfoImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IUPnPRemoteEndpointInfoVtbl < > { unsafe extern "system" fn GetDwordValue < Impl : IUPnPRemoteEndpointInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrvaluename : :: core :: mem :: ManuallyDrop < super::super::super::Foundation:: BSTR > , pdwvalue : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetStringValue < Impl : IUPnPRemoteEndpointInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrvaluename : :: core :: mem :: ManuallyDrop < super::super::super::Foundation:: BSTR > , pbstrvalue : * mut super::super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetGuidValue < Impl : IUPnPRemoteEndpointInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrvaluename : :: core :: mem :: ManuallyDrop < super::super::super::Foundation:: BSTR > , pguidvalue : * mut :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetDwordValue : GetDwordValue :: < Impl , IMPL_OFFSET > , GetStringValue : GetStringValue :: < Impl , IMPL_OFFSET > , GetGuidValue : GetGuidValue :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IUPnPRemoteEndpointInfo < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IUPnPReregistrarImpl < > : Sized where { fn ReregisterDevice ( ) ; fn ReregisterRunningDevice ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IUPnPReregistrarVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IUPnPReregistrarImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IUPnPReregistrarVtbl < > { unsafe extern "system" fn ReregisterDevice < Impl : IUPnPReregistrarImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrdeviceidentifier : :: core :: mem :: ManuallyDrop < super::super::super::Foundation:: BSTR > , bstrxmldesc : :: core :: mem :: ManuallyDrop < super::super::super::Foundation:: BSTR > , bstrprogiddevicecontrolclass : :: core :: mem :: ManuallyDrop < super::super::super::Foundation:: BSTR > , bstrinitstring : :: core :: mem :: ManuallyDrop < super::super::super::Foundation:: BSTR > , bstrcontainerid : :: core :: mem :: ManuallyDrop < super::super::super::Foundation:: BSTR > , bstrresourcepath : :: core :: mem :: ManuallyDrop < super::super::super::Foundation:: BSTR > , nlifetime : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ReregisterRunningDevice < Impl : IUPnPReregistrarImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrdeviceidentifier : :: core :: mem :: ManuallyDrop < super::super::super::Foundation:: BSTR > , bstrxmldesc : :: core :: mem :: ManuallyDrop < super::super::super::Foundation:: BSTR > , punkdevicecontrol : * mut :: core :: ffi :: c_void , bstrinitstring : :: core :: mem :: ManuallyDrop < super::super::super::Foundation:: BSTR > , bstrresourcepath : :: core :: mem :: ManuallyDrop < super::super::super::Foundation:: BSTR > , nlifetime : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , ReregisterDevice : ReregisterDevice :: < Impl , IMPL_OFFSET > , ReregisterRunningDevice : ReregisterRunningDevice :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IUPnPReregistrar < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IUPnPServiceImpl < > : Sized + IDispatchImpl where { fn QueryStateVariable ( ) ; fn InvokeAction ( ) ; fn ServiceTypeIdentifier ( ) ; fn AddCallback ( ) ; fn Id ( ) ; fn LastTransportStatus ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IUPnPServiceVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IUPnPServiceImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IUPnPServiceVtbl < > { unsafe extern "system" fn QueryStateVariable < Impl : IUPnPServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrvariablename : :: core :: mem :: ManuallyDrop < super::super::super::Foundation:: BSTR > , pvalue : * mut super::super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn InvokeAction < Impl : IUPnPServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstractionname : :: core :: mem :: ManuallyDrop < super::super::super::Foundation:: BSTR > , vinactionargs : :: core :: mem :: ManuallyDrop < super::super::super::System::Com:: VARIANT > , pvoutactionargs : * mut super::super::super::System::Com:: VARIANT , pvretval : * mut super::super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ServiceTypeIdentifier < Impl : IUPnPServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pval : * mut super::super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddCallback < Impl : IUPnPServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punkcallback : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Id < Impl : IUPnPServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrid : * mut super::super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn LastTransportStatus < Impl : IUPnPServiceImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plvalue : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IDispatchVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , QueryStateVariable : QueryStateVariable :: < Impl , IMPL_OFFSET > , InvokeAction : InvokeAction :: < Impl , IMPL_OFFSET > , ServiceTypeIdentifier : ServiceTypeIdentifier :: < Impl , IMPL_OFFSET > , AddCallback : AddCallback :: < Impl , IMPL_OFFSET > , Id : Id :: < Impl , IMPL_OFFSET > , LastTransportStatus : LastTransportStatus :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IUPnPService < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IUPnPServiceAsyncImpl < > : Sized where { fn BeginInvokeAction ( ) ; fn EndInvokeAction ( ) ; fn BeginQueryStateVariable ( ) ; fn EndQueryStateVariable ( ) ; fn BeginSubscribeToEvents ( ) ; fn EndSubscribeToEvents ( ) ; fn BeginSCPDDownload ( ) ; fn EndSCPDDownload ( ) ; fn CancelAsyncOperation ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IUPnPServiceAsyncVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IUPnPServiceAsyncImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IUPnPServiceAsyncVtbl < > { unsafe extern "system" fn BeginInvokeAction < Impl : IUPnPServiceAsyncImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstractionname : :: core :: mem :: ManuallyDrop < super::super::super::Foundation:: BSTR > , vinactionargs : :: core :: mem :: ManuallyDrop < super::super::super::System::Com:: VARIANT > , pasyncresult : :: windows :: core :: RawPtr , pullrequestid : * mut u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn EndInvokeAction < Impl : IUPnPServiceAsyncImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ullrequestid : u64 , pvoutactionargs : * mut super::super::super::System::Com:: VARIANT , pvretval : * mut super::super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BeginQueryStateVariable < Impl : IUPnPServiceAsyncImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrvariablename : :: core :: mem :: ManuallyDrop < super::super::super::Foundation:: BSTR > , pasyncresult : :: windows :: core :: RawPtr , pullrequestid : * mut u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn EndQueryStateVariable < Impl : IUPnPServiceAsyncImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ullrequestid : u64 , pvalue : * mut super::super::super::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BeginSubscribeToEvents < Impl : IUPnPServiceAsyncImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , punkcallback : * mut :: core :: ffi :: c_void , pasyncresult : :: windows :: core :: RawPtr , pullrequestid : * mut u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn EndSubscribeToEvents < Impl : IUPnPServiceAsyncImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ullrequestid : u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BeginSCPDDownload < Impl : IUPnPServiceAsyncImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pasyncresult : :: windows :: core :: RawPtr , pullrequestid : * mut u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn EndSCPDDownload < Impl : IUPnPServiceAsyncImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ullrequestid : u64 , pbstrscpddoc : * mut super::super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CancelAsyncOperation < Impl : IUPnPServiceAsyncImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ullrequestid : u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , BeginInvokeAction : BeginInvokeAction :: < Impl , IMPL_OFFSET > , EndInvokeAction : EndInvokeAction :: < Impl , IMPL_OFFSET > , BeginQueryStateVariable : BeginQueryStateVariable :: < Impl , IMPL_OFFSET > , EndQueryStateVariable : EndQueryStateVariable :: < Impl , IMPL_OFFSET > , BeginSubscribeToEvents : BeginSubscribeToEvents :: < Impl , IMPL_OFFSET > , EndSubscribeToEvents : EndSubscribeToEvents :: < Impl , IMPL_OFFSET > , BeginSCPDDownload : BeginSCPDDownload :: < Impl , IMPL_OFFSET > , EndSCPDDownload : EndSCPDDownload :: < Impl , IMPL_OFFSET > , CancelAsyncOperation : CancelAsyncOperation :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IUPnPServiceAsync < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IUPnPServiceCallbackImpl < > : Sized where { fn StateVariableChanged ( ) ; fn ServiceInstanceDied ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IUPnPServiceCallbackVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IUPnPServiceCallbackImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IUPnPServiceCallbackVtbl < > { unsafe extern "system" fn StateVariableChanged < Impl : IUPnPServiceCallbackImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pus : :: windows :: core :: RawPtr , pcwszstatevarname : super::super::super::Foundation:: PWSTR , vavalue : :: core :: mem :: ManuallyDrop < super::super::super::System::Com:: VARIANT > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ServiceInstanceDied < Impl : IUPnPServiceCallbackImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pus : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , StateVariableChanged : StateVariableChanged :: < Impl , IMPL_OFFSET > , ServiceInstanceDied : ServiceInstanceDied :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IUPnPServiceCallback < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IUPnPServiceDocumentAccessImpl < > : Sized where { fn GetDocumentURL ( ) ; fn GetDocument ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IUPnPServiceDocumentAccessVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IUPnPServiceDocumentAccessImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IUPnPServiceDocumentAccessVtbl < > { unsafe extern "system" fn GetDocumentURL < Impl : IUPnPServiceDocumentAccessImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrdocurl : * mut super::super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetDocument < Impl : IUPnPServiceDocumentAccessImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbstrdoc : * mut super::super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetDocumentURL : GetDocumentURL :: < Impl , IMPL_OFFSET > , GetDocument : GetDocument :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IUPnPServiceDocumentAccess < > as :: windows :: core :: Interface > :: IID } } pub trait IUPnPServiceEnumPropertyImpl < > : Sized where { fn SetServiceEnumProperty ( ) ; } impl < > IUPnPServiceEnumPropertyVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IUPnPServiceEnumPropertyImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IUPnPServiceEnumPropertyVtbl < > { unsafe extern "system" fn SetServiceEnumProperty < Impl : IUPnPServiceEnumPropertyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwmask : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetServiceEnumProperty : SetServiceEnumProperty :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IUPnPServiceEnumProperty < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IUPnPServicesImpl < > : Sized + IDispatchImpl where { fn Count ( ) ; fn _NewEnum ( ) ; fn Item ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IUPnPServicesVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IUPnPServicesImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IUPnPServicesVtbl < > { unsafe extern "system" fn Count < Impl : IUPnPServicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plcount : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _NewEnum < Impl : IUPnPServicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppunk : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Item < Impl : IUPnPServicesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrserviceid : :: core :: mem :: ManuallyDrop < super::super::super::Foundation:: BSTR > , ppservice : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IDispatchVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Count : Count :: < Impl , IMPL_OFFSET > , _NewEnum : _NewEnum :: < Impl , IMPL_OFFSET > , Item : Item :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IUPnPServices < > as :: windows :: core :: Interface > :: IID } } 