# [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait ICatalogImpl < > : Sized + IDispatchImpl where { fn GetCollection ( ) ; fn Connect ( ) ; fn MajorVersion ( ) ; fn MinorVersion ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > ICatalogVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ICatalogImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ICatalogVtbl < > { unsafe extern "system" fn GetCollection < Impl : ICatalogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrcollname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ppcatalogcollection : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Connect < Impl : ICatalogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrconnectstring : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ppcatalogcollection : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn MajorVersion < Impl : ICatalogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , retval : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn MinorVersion < Impl : ICatalogImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , retval : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IDispatchVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , GetCollection : GetCollection :: < Impl , IMPL_OFFSET > , Connect : Connect :: < Impl , IMPL_OFFSET > , MajorVersion : MajorVersion :: < Impl , IMPL_OFFSET > , MinorVersion : MinorVersion :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ICatalog < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IComponentUtilImpl < > : Sized + IDispatchImpl where { fn InstallComponent ( ) ; fn ImportComponent ( ) ; fn ImportComponentByName ( ) ; fn GetCLSIDs ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IComponentUtilVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IComponentUtilImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IComponentUtilVtbl < > { unsafe extern "system" fn InstallComponent < Impl : IComponentUtilImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrdllfile : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , bstrtypelibfile : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , bstrproxystubdllfile : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ImportComponent < Impl : IComponentUtilImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrclsid : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ImportComponentByName < Impl : IComponentUtilImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrprogid : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetCLSIDs < Impl : IComponentUtilImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrdllfile : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , bstrtypelibfile : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , aclsids : * mut * mut super::Com:: SAFEARRAY , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IDispatchVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , InstallComponent : InstallComponent :: < Impl , IMPL_OFFSET > , ImportComponent : ImportComponent :: < Impl , IMPL_OFFSET > , ImportComponentByName : ImportComponentByName :: < Impl , IMPL_OFFSET > , GetCLSIDs : GetCLSIDs :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IComponentUtil < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IPackageUtilImpl < > : Sized + IDispatchImpl where { fn InstallPackage ( ) ; fn ExportPackage ( ) ; fn ShutdownPackage ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IPackageUtilVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IPackageUtilImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IPackageUtilVtbl < > { unsafe extern "system" fn InstallPackage < Impl : IPackageUtilImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrpackagefile : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , bstrinstallpath : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , loptions : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ExportPackage < Impl : IPackageUtilImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrpackageid : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , bstrpackagefile : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , loptions : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ShutdownPackage < Impl : IPackageUtilImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrpackageid : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IDispatchVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , InstallPackage : InstallPackage :: < Impl , IMPL_OFFSET > , ExportPackage : ExportPackage :: < Impl , IMPL_OFFSET > , ShutdownPackage : ShutdownPackage :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IPackageUtil < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IRemoteComponentUtilImpl < > : Sized + IDispatchImpl where { fn InstallRemoteComponent ( ) ; fn InstallRemoteComponentByName ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IRemoteComponentUtilVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IRemoteComponentUtilImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IRemoteComponentUtilVtbl < > { unsafe extern "system" fn InstallRemoteComponent < Impl : IRemoteComponentUtilImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrserver : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , bstrpackageid : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , bstrclsid : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn InstallRemoteComponentByName < Impl : IRemoteComponentUtilImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrserver : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , bstrpackagename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , bstrprogid : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IDispatchVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , InstallRemoteComponent : InstallRemoteComponent :: < Impl , IMPL_OFFSET > , InstallRemoteComponentByName : InstallRemoteComponentByName :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IRemoteComponentUtil < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IRoleAssociationUtilImpl < > : Sized + IDispatchImpl where { fn AssociateRole ( ) ; fn AssociateRoleByName ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IRoleAssociationUtilVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IRoleAssociationUtilImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IRoleAssociationUtilVtbl < > { unsafe extern "system" fn AssociateRole < Impl : IRoleAssociationUtilImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrroleid : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AssociateRoleByName < Impl : IRoleAssociationUtilImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrrolename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IDispatchVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , AssociateRole : AssociateRole :: < Impl , IMPL_OFFSET > , AssociateRoleByName : AssociateRoleByName :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IRoleAssociationUtil < > as :: windows :: core :: Interface > :: IID } } 