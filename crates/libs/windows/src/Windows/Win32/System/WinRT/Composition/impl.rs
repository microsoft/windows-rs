# [ cfg ( all ( feature ="UI_Composition" , feature ="Win32_Foundation" ) ) ] pub trait ICompositionCapabilitiesInteropFactoryImpl < > : Sized where { fn GetForWindow ( ) ; } # [ cfg ( all ( feature ="UI_Composition" , feature ="Win32_Foundation" ) ) ] impl :: windows :: core :: RuntimeName for ICompositionCapabilitiesInteropFactory { const NAME : & 'static str = "" ; } # [ cfg ( all ( feature ="UI_Composition" , feature ="Win32_Foundation" ) ) ] impl < > ICompositionCapabilitiesInteropFactoryVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ICompositionCapabilitiesInteropFactoryImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ICompositionCapabilitiesInteropFactoryVtbl < > { unsafe extern "system" fn GetForWindow < Impl : ICompositionCapabilitiesInteropFactoryImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwnd : super::super::super::Foundation:: HWND , result : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IInspectableVtbl :: new :: < Identity , ICompositionCapabilitiesInteropFactory < > , BASE_OFFSET > ( ) , GetForWindow : GetForWindow :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ICompositionCapabilitiesInteropFactory < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait ICompositionDrawingSurfaceInteropImpl < > : Sized where { fn BeginDraw ( ) ; fn EndDraw ( ) ; fn Resize ( ) ; fn Scroll ( ) ; fn ResumeDraw ( ) ; fn SuspendDraw ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > ICompositionDrawingSurfaceInteropVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ICompositionDrawingSurfaceInteropImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ICompositionDrawingSurfaceInteropVtbl < > { unsafe extern "system" fn BeginDraw < Impl : ICompositionDrawingSurfaceInteropImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , updaterect : * const super::super::super::Foundation:: RECT , iid : * const :: windows :: core :: GUID , updateobject : * mut * mut :: core :: ffi :: c_void , updateoffset : * mut super::super::super::Foundation:: POINT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn EndDraw < Impl : ICompositionDrawingSurfaceInteropImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Resize < Impl : ICompositionDrawingSurfaceInteropImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , sizepixels : super::super::super::Foundation:: SIZE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Scroll < Impl : ICompositionDrawingSurfaceInteropImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , scrollrect : * const super::super::super::Foundation:: RECT , cliprect : * const super::super::super::Foundation:: RECT , offsetx : i32 , offsety : i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ResumeDraw < Impl : ICompositionDrawingSurfaceInteropImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SuspendDraw < Impl : ICompositionDrawingSurfaceInteropImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , BeginDraw : BeginDraw :: < Impl , IMPL_OFFSET > , EndDraw : EndDraw :: < Impl , IMPL_OFFSET > , Resize : Resize :: < Impl , IMPL_OFFSET > , Scroll : Scroll :: < Impl , IMPL_OFFSET > , ResumeDraw : ResumeDraw :: < Impl , IMPL_OFFSET > , SuspendDraw : SuspendDraw :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ICompositionDrawingSurfaceInterop < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait ICompositionDrawingSurfaceInterop2Impl < > : Sized + ICompositionDrawingSurfaceInteropImpl where { fn CopySurface ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > ICompositionDrawingSurfaceInterop2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ICompositionDrawingSurfaceInterop2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ICompositionDrawingSurfaceInterop2Vtbl < > { unsafe extern "system" fn CopySurface < Impl : ICompositionDrawingSurfaceInterop2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , destinationresource : * mut :: core :: ffi :: c_void , destinationoffsetx : i32 , destinationoffsety : i32 , sourcerectangle : * const super::super::super::Foundation:: RECT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { ICompositionDrawingSurfaceInteropVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , CopySurface : CopySurface :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ICompositionDrawingSurfaceInterop2 < > as :: windows :: core :: Interface > :: IID } } pub trait ICompositionGraphicsDeviceInteropImpl < > : Sized where { fn GetRenderingDevice ( ) ; fn SetRenderingDevice ( ) ; } impl < > ICompositionGraphicsDeviceInteropVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ICompositionGraphicsDeviceInteropImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ICompositionGraphicsDeviceInteropVtbl < > { unsafe extern "system" fn GetRenderingDevice < Impl : ICompositionGraphicsDeviceInteropImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , value : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetRenderingDevice < Impl : ICompositionGraphicsDeviceInteropImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , value : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetRenderingDevice : GetRenderingDevice :: < Impl , IMPL_OFFSET > , SetRenderingDevice : SetRenderingDevice :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ICompositionGraphicsDeviceInterop < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="UI_Composition_Desktop" , feature ="Win32_Foundation" ) ) ] pub trait ICompositorDesktopInteropImpl < > : Sized where { fn CreateDesktopWindowTarget ( ) ; fn EnsureOnThread ( ) ; } # [ cfg ( all ( feature ="UI_Composition_Desktop" , feature ="Win32_Foundation" ) ) ] impl < > ICompositorDesktopInteropVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ICompositorDesktopInteropImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ICompositorDesktopInteropVtbl < > { unsafe extern "system" fn CreateDesktopWindowTarget < Impl : ICompositorDesktopInteropImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwndtarget : super::super::super::Foundation:: HWND , istopmost : super::super::super::Foundation:: BOOL , result : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn EnsureOnThread < Impl : ICompositorDesktopInteropImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , threadid : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , CreateDesktopWindowTarget : CreateDesktopWindowTarget :: < Impl , IMPL_OFFSET > , EnsureOnThread : EnsureOnThread :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ICompositorDesktopInterop < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="UI_Composition" , feature ="Win32_Foundation" ) ) ] pub trait ICompositorInteropImpl < > : Sized where { fn CreateCompositionSurfaceForHandle ( ) ; fn CreateCompositionSurfaceForSwapChain ( ) ; fn CreateGraphicsDevice ( ) ; } # [ cfg ( all ( feature ="UI_Composition" , feature ="Win32_Foundation" ) ) ] impl < > ICompositorInteropVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ICompositorInteropImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ICompositorInteropVtbl < > { unsafe extern "system" fn CreateCompositionSurfaceForHandle < Impl : ICompositorInteropImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , swapchain : super::super::super::Foundation:: HANDLE , result : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CreateCompositionSurfaceForSwapChain < Impl : ICompositorInteropImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , swapchain : * mut :: core :: ffi :: c_void , result : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CreateGraphicsDevice < Impl : ICompositorInteropImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , renderingdevice : * mut :: core :: ffi :: c_void , result : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , CreateCompositionSurfaceForHandle : CreateCompositionSurfaceForHandle :: < Impl , IMPL_OFFSET > , CreateCompositionSurfaceForSwapChain : CreateCompositionSurfaceForSwapChain :: < Impl , IMPL_OFFSET > , CreateGraphicsDevice : CreateGraphicsDevice :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ICompositorInterop < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IDesktopWindowTargetInteropImpl < > : Sized where { fn Hwnd ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IDesktopWindowTargetInteropVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDesktopWindowTargetInteropImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDesktopWindowTargetInteropVtbl < > { unsafe extern "system" fn Hwnd < Impl : IDesktopWindowTargetInteropImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , value : * mut super::super::super::Foundation:: HWND , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Hwnd : Hwnd :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDesktopWindowTargetInterop < > as :: windows :: core :: Interface > :: IID } } pub trait ISwapChainInteropImpl < > : Sized where { fn SetSwapChain ( ) ; } impl < > ISwapChainInteropVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ISwapChainInteropImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ISwapChainInteropVtbl < > { unsafe extern "system" fn SetSwapChain < Impl : ISwapChainInteropImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , swapchain : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetSwapChain : SetSwapChain :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ISwapChainInterop < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Input_Pointer" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] pub trait IVisualInteractionSourceInteropImpl < > : Sized where { fn TryRedirectForManipulation ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_UI_Input_Pointer" , feature ="Win32_UI_WindowsAndMessaging" ) ) ] impl < > IVisualInteractionSourceInteropVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IVisualInteractionSourceInteropImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IVisualInteractionSourceInteropVtbl < > { unsafe extern "system" fn TryRedirectForManipulation < Impl : IVisualInteractionSourceInteropImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pointerinfo : * const super::super::super::UI::Input::Pointer:: POINTER_INFO , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , TryRedirectForManipulation : TryRedirectForManipulation :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IVisualInteractionSourceInterop < > as :: windows :: core :: Interface > :: IID } }