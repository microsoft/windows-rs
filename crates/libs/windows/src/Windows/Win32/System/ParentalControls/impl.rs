# [ cfg ( feature ="Win32_Foundation" ) ] pub trait IWPCGamesSettingsImpl < > : Sized + IWPCSettingsImpl where { fn IsBlocked ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IWPCGamesSettingsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWPCGamesSettingsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWPCGamesSettingsVtbl < > { unsafe extern "system" fn IsBlocked < Impl : IWPCGamesSettingsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , guidappid : :: windows :: core :: GUID , pdwreasons : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IWPCSettingsVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , IsBlocked : IsBlocked :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWPCGamesSettings < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IWPCProviderConfigImpl < > : Sized where { fn GetUserSummary ( ) ; fn Configure ( ) ; fn RequestOverride ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IWPCProviderConfigVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWPCProviderConfigImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWPCProviderConfigVtbl < > { unsafe extern "system" fn GetUserSummary < Impl : IWPCProviderConfigImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrsid : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pbstrusersummary : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Configure < Impl : IWPCProviderConfigImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwnd : super::super::Foundation:: HWND , bstrsid : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RequestOverride < Impl : IWPCProviderConfigImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwnd : super::super::Foundation:: HWND , bstrpath : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , dwflags : WPCFLAG_RESTRICTION , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetUserSummary : GetUserSummary :: < Impl , IMPL_OFFSET > , Configure : Configure :: < Impl , IMPL_OFFSET > , RequestOverride : RequestOverride :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWPCProviderConfig < > as :: windows :: core :: Interface > :: IID } } pub trait IWPCProviderStateImpl < > : Sized where { fn Enable ( ) ; fn Disable ( ) ; } impl < > IWPCProviderStateVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWPCProviderStateImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWPCProviderStateVtbl < > { unsafe extern "system" fn Enable < Impl : IWPCProviderStateImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Disable < Impl : IWPCProviderStateImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Enable : Enable :: < Impl , IMPL_OFFSET > , Disable : Disable :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWPCProviderState < > as :: windows :: core :: Interface > :: IID } } pub trait IWPCProviderSupportImpl < > : Sized where { fn GetCurrent ( ) ; } impl < > IWPCProviderSupportVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWPCProviderSupportImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWPCProviderSupportVtbl < > { unsafe extern "system" fn GetCurrent < Impl : IWPCProviderSupportImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pguidprovider : * mut :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetCurrent : GetCurrent :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWPCProviderSupport < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IWPCSettingsImpl < > : Sized where { fn IsLoggingRequired ( ) ; fn GetLastSettingsChangeTime ( ) ; fn GetRestrictions ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IWPCSettingsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWPCSettingsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWPCSettingsVtbl < > { unsafe extern "system" fn IsLoggingRequired < Impl : IWPCSettingsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfrequired : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetLastSettingsChangeTime < Impl : IWPCSettingsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ptime : * mut super::super::Foundation:: SYSTEMTIME , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetRestrictions < Impl : IWPCSettingsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdwrestrictions : * mut WPCFLAG_RESTRICTION , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , IsLoggingRequired : IsLoggingRequired :: < Impl , IMPL_OFFSET > , GetLastSettingsChangeTime : GetLastSettingsChangeTime :: < Impl , IMPL_OFFSET > , GetRestrictions : GetRestrictions :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWPCSettings < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IWPCWebSettingsImpl < > : Sized + IWPCSettingsImpl where { fn GetSettings ( ) ; fn RequestURLOverride ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IWPCWebSettingsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWPCWebSettingsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWPCWebSettingsVtbl < > { unsafe extern "system" fn GetSettings < Impl : IWPCWebSettingsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdwsettings : * mut WPCFLAG_WEB_SETTING , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RequestURLOverride < Impl : IWPCWebSettingsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hwnd : super::super::Foundation:: HWND , pcszurl : super::super::Foundation:: PWSTR , curls : u32 , ppcszsuburls : * const super::super::Foundation:: PWSTR , pfchanged : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IWPCSettingsVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , GetSettings : GetSettings :: < Impl , IMPL_OFFSET > , RequestURLOverride : RequestURLOverride :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWPCWebSettings < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IWindowsParentalControlsImpl < > : Sized + IWindowsParentalControlsCoreImpl where { fn GetGamesSettings ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IWindowsParentalControlsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWindowsParentalControlsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWindowsParentalControlsVtbl < > { unsafe extern "system" fn GetGamesSettings < Impl : IWindowsParentalControlsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcszsid : super::super::Foundation:: PWSTR , ppsettings : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IWindowsParentalControlsCoreVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , GetGamesSettings : GetGamesSettings :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWindowsParentalControls < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IWindowsParentalControlsCoreImpl < > : Sized where { fn GetVisibility ( ) ; fn GetUserSettings ( ) ; fn GetWebSettings ( ) ; fn GetWebFilterInfo ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IWindowsParentalControlsCoreVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWindowsParentalControlsCoreImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWindowsParentalControlsCoreVtbl < > { unsafe extern "system" fn GetVisibility < Impl : IWindowsParentalControlsCoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pevisibility : * mut WPCFLAG_VISIBILITY , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetUserSettings < Impl : IWindowsParentalControlsCoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcszsid : super::super::Foundation:: PWSTR , ppsettings : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetWebSettings < Impl : IWindowsParentalControlsCoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcszsid : super::super::Foundation:: PWSTR , ppsettings : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetWebFilterInfo < Impl : IWindowsParentalControlsCoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pguidid : * mut :: windows :: core :: GUID , ppszname : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetVisibility : GetVisibility :: < Impl , IMPL_OFFSET > , GetUserSettings : GetUserSettings :: < Impl , IMPL_OFFSET > , GetWebSettings : GetWebSettings :: < Impl , IMPL_OFFSET > , GetWebFilterInfo : GetWebFilterInfo :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWindowsParentalControlsCore < > as :: windows :: core :: Interface > :: IID } } 