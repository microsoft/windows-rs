# [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait DRendezvousSessionEventsImpl < > : Sized + IDispatchImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > DRendezvousSessionEventsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : DRendezvousSessionEventsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> DRendezvousSessionEventsVtbl < > { Self { IDispatchVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < DRendezvousSessionEvents < > as :: windows :: core :: Interface > :: IID } } pub trait IRendezvousApplicationImpl < > : Sized where { fn SetRendezvousSession ( ) ; } impl < > IRendezvousApplicationVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IRendezvousApplicationImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IRendezvousApplicationVtbl < > { unsafe extern "system" fn SetRendezvousSession < Impl : IRendezvousApplicationImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , prendezvoussession : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetRendezvousSession : SetRendezvousSession :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IRendezvousApplication < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IRendezvousSessionImpl < > : Sized where { fn State ( ) ; fn RemoteUser ( ) ; fn Flags ( ) ; fn SendContextData ( ) ; fn Terminate ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IRendezvousSessionVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IRendezvousSessionImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IRendezvousSessionVtbl < > { unsafe extern "system" fn State < Impl : IRendezvousSessionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psessionstate : * mut RENDEZVOUS_SESSION_STATE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RemoteUser < Impl : IRendezvousSessionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrusername : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Flags < Impl : IRendezvousSessionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pflags : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SendContextData < Impl : IRendezvousSessionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bstrdata : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Terminate < Impl : IRendezvousSessionImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hr : :: windows :: core :: HRESULT , bstrappdata : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , State : State :: < Impl , IMPL_OFFSET > , RemoteUser : RemoteUser :: < Impl , IMPL_OFFSET > , Flags : Flags :: < Impl , IMPL_OFFSET > , SendContextData : SendContextData :: < Impl , IMPL_OFFSET > , Terminate : Terminate :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IRendezvousSession < > as :: windows :: core :: Interface > :: IID } } 