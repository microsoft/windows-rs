pub trait IAmsiStreamImpl: Sized {
    fn GetAttribute();
    fn Read();
}
impl ::windows::core::RuntimeName for IAmsiStream {
    const NAME: &'static str = "Windows.Win32.System.Antimalware.IAmsiStream";
}
impl IAmsiStreamVtbl {
    pub const fn new<Impl: IAmsiStreamImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IAmsiStreamVtbl {
        unsafe extern "system" fn GetAttribute<Impl: IAmsiStreamImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, attribute: AMSI_ATTRIBUTE, datasize: u32, data: *mut u8, retdata: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetAttribute(attribute, datasize, ::core::mem::transmute_copy(&data), ::core::mem::transmute_copy(&retdata)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Read<Impl: IAmsiStreamImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, position: u64, size: u32, buffer: *mut u8, readsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Read(position, size, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&readsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IAmsiStream>, base.5, GetAttribute::<Impl, OFFSET>, Read::<Impl, OFFSET>)
    }
}
pub trait IAntimalwareImpl: Sized {
    fn Scan();
    fn CloseSession();
}
impl ::windows::core::RuntimeName for IAntimalware {
    const NAME: &'static str = "Windows.Win32.System.Antimalware.IAntimalware";
}
impl IAntimalwareVtbl {
    pub const fn new<Impl: IAntimalwareImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IAntimalwareVtbl {
        unsafe extern "system" fn Scan<Impl: IAntimalwareImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, stream: ::windows::core::RawPtr, result: *mut AMSI_RESULT, provider: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Scan(&*(&stream as *const <IAmsiStream as ::windows::core::Abi>::Abi as *const <IAmsiStream as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&result), ::core::mem::transmute_copy(&provider)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CloseSession<Impl: IAntimalwareImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, session: u64) {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            (*this).CloseSession(session).into()
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IAntimalware>, base.5, Scan::<Impl, OFFSET>, CloseSession::<Impl, OFFSET>)
    }
}
pub trait IAntimalware2Impl: Sized + IAntimalwareImpl {
    fn Notify();
}
impl ::windows::core::RuntimeName for IAntimalware2 {
    const NAME: &'static str = "Windows.Win32.System.Antimalware.IAntimalware2";
}
impl IAntimalware2Vtbl {
    pub const fn new<Impl: IAntimalware2Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IAntimalware2Vtbl {
        unsafe extern "system" fn Notify<Impl: IAntimalware2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: *const ::core::ffi::c_void, length: u32, contentname: super::super::Foundation::PWSTR, appname: super::super::Foundation::PWSTR, presult: *mut AMSI_RESULT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Notify(
                &*(&buffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType),
                length,
                &*(&contentname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&appname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                ::core::mem::transmute_copy(&presult),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IAntimalware2>, base.5, Notify::<Impl, OFFSET>)
    }
}
pub trait IAntimalwareProviderImpl: Sized {
    fn Scan();
    fn CloseSession();
    fn DisplayName();
}
impl ::windows::core::RuntimeName for IAntimalwareProvider {
    const NAME: &'static str = "Windows.Win32.System.Antimalware.IAntimalwareProvider";
}
impl IAntimalwareProviderVtbl {
    pub const fn new<Impl: IAntimalwareProviderImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IAntimalwareProviderVtbl {
        unsafe extern "system" fn Scan<Impl: IAntimalwareProviderImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, stream: ::windows::core::RawPtr, result: *mut AMSI_RESULT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Scan(&*(&stream as *const <IAmsiStream as ::windows::core::Abi>::Abi as *const <IAmsiStream as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&result)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CloseSession<Impl: IAntimalwareProviderImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, session: u64) {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            (*this).CloseSession(session).into()
        }
        unsafe extern "system" fn DisplayName<Impl: IAntimalwareProviderImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, displayname: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).DisplayName(::core::mem::transmute_copy(&displayname)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IAntimalwareProvider>, base.5, Scan::<Impl, OFFSET>, CloseSession::<Impl, OFFSET>, DisplayName::<Impl, OFFSET>)
    }
}
pub trait IAntimalwareProvider2Impl: Sized + IAntimalwareProviderImpl {
    fn Notify();
}
impl ::windows::core::RuntimeName for IAntimalwareProvider2 {
    const NAME: &'static str = "Windows.Win32.System.Antimalware.IAntimalwareProvider2";
}
impl IAntimalwareProvider2Vtbl {
    pub const fn new<Impl: IAntimalwareProvider2Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IAntimalwareProvider2Vtbl {
        unsafe extern "system" fn Notify<Impl: IAntimalwareProvider2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: *const ::core::ffi::c_void, length: u32, contentname: super::super::Foundation::PWSTR, appname: super::super::Foundation::PWSTR, presult: *mut AMSI_RESULT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Notify(
                &*(&buffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType),
                length,
                &*(&contentname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&appname as *const <super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                ::core::mem::transmute_copy(&presult),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IAntimalwareProvider2>, base.5, Notify::<Impl, OFFSET>)
    }
}
pub trait IAntimalwareUacProviderImpl: Sized {
    fn UacScan();
    fn DisplayName();
}
impl ::windows::core::RuntimeName for IAntimalwareUacProvider {
    const NAME: &'static str = "Windows.Win32.System.Antimalware.IAntimalwareUacProvider";
}
impl IAntimalwareUacProviderVtbl {
    pub const fn new<Impl: IAntimalwareUacProviderImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IAntimalwareUacProviderVtbl {
        unsafe extern "system" fn UacScan<Impl: IAntimalwareUacProviderImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: *const AMSI_UAC_REQUEST_CONTEXT, result: *mut AMSI_RESULT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).UacScan(&*(&context as *const <AMSI_UAC_REQUEST_CONTEXT as ::windows::core::Abi>::Abi as *const <AMSI_UAC_REQUEST_CONTEXT as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&result)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DisplayName<Impl: IAntimalwareUacProviderImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, displayname: *mut super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).DisplayName(::core::mem::transmute_copy(&displayname)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IAntimalwareUacProvider>, base.5, UacScan::<Impl, OFFSET>, DisplayName::<Impl, OFFSET>)
    }
}
