pub trait IAmsiStreamImpl < > : Sized where { fn GetAttribute ( ) ; fn Read ( ) ; } impl < > IAmsiStreamVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAmsiStreamImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAmsiStreamVtbl < > { unsafe extern "system" fn GetAttribute < Impl : IAmsiStreamImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , attribute : AMSI_ATTRIBUTE , datasize : u32 , data : * mut u8 , retdata : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Read < Impl : IAmsiStreamImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , position : u64 , size : u32 , buffer : * mut u8 , readsize : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetAttribute : GetAttribute :: < Impl , IMPL_OFFSET > , Read : Read :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAmsiStream < > as :: windows :: core :: Interface > :: IID } } pub trait IAntimalwareImpl < > : Sized where { fn Scan ( ) ; fn CloseSession ( ) ; } impl < > IAntimalwareVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAntimalwareImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAntimalwareVtbl < > { unsafe extern "system" fn Scan < Impl : IAntimalwareImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , stream : :: windows :: core :: RawPtr , result : * mut AMSI_RESULT , provider : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CloseSession < Impl : IAntimalwareImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , session : u64 , ) { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Scan : Scan :: < Impl , IMPL_OFFSET > , CloseSession : CloseSession :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAntimalware < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IAntimalware2Impl < > : Sized + IAntimalwareImpl where { fn Notify ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IAntimalware2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAntimalware2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAntimalware2Vtbl < > { unsafe extern "system" fn Notify < Impl : IAntimalware2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , buffer : * const :: core :: ffi :: c_void , length : u32 , contentname : super::super::Foundation:: PWSTR , appname : super::super::Foundation:: PWSTR , presult : * mut AMSI_RESULT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IAntimalwareVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Notify : Notify :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAntimalware2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IAntimalwareProviderImpl < > : Sized where { fn Scan ( ) ; fn CloseSession ( ) ; fn DisplayName ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IAntimalwareProviderVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAntimalwareProviderImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAntimalwareProviderVtbl < > { unsafe extern "system" fn Scan < Impl : IAntimalwareProviderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , stream : :: windows :: core :: RawPtr , result : * mut AMSI_RESULT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CloseSession < Impl : IAntimalwareProviderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , session : u64 , ) { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DisplayName < Impl : IAntimalwareProviderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , displayname : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Scan : Scan :: < Impl , IMPL_OFFSET > , CloseSession : CloseSession :: < Impl , IMPL_OFFSET > , DisplayName : DisplayName :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAntimalwareProvider < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IAntimalwareProvider2Impl < > : Sized + IAntimalwareProviderImpl where { fn Notify ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IAntimalwareProvider2Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAntimalwareProvider2Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAntimalwareProvider2Vtbl < > { unsafe extern "system" fn Notify < Impl : IAntimalwareProvider2Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , buffer : * const :: core :: ffi :: c_void , length : u32 , contentname : super::super::Foundation:: PWSTR , appname : super::super::Foundation:: PWSTR , presult : * mut AMSI_RESULT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IAntimalwareProviderVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Notify : Notify :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAntimalwareProvider2 < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IAntimalwareUacProviderImpl < > : Sized where { fn UacScan ( ) ; fn DisplayName ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IAntimalwareUacProviderVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAntimalwareUacProviderImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAntimalwareUacProviderVtbl < > { unsafe extern "system" fn UacScan < Impl : IAntimalwareUacProviderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , context : * const AMSI_UAC_REQUEST_CONTEXT , result : * mut AMSI_RESULT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DisplayName < Impl : IAntimalwareUacProviderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , displayname : * mut super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , UacScan : UacScan :: < Impl , IMPL_OFFSET > , DisplayName : DisplayName :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAntimalwareUacProvider < > as :: windows :: core :: Interface > :: IID } }