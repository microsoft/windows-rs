# [ cfg ( feature ="Win32_Foundation" ) ] pub trait IAssemblyCacheImpl < > : Sized where { fn UninstallAssembly ( ) ; fn QueryAssemblyInfo ( ) ; fn CreateAssemblyCacheItem ( ) ; fn Reserved ( ) ; fn InstallAssembly ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IAssemblyCacheVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAssemblyCacheImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAssemblyCacheVtbl < > { unsafe extern "system" fn UninstallAssembly < Impl : IAssemblyCacheImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwflags : u32 , pszassemblyname : super::super::Foundation:: PWSTR , prefdata : * mut FUSION_INSTALL_REFERENCE , puldisposition : * mut IASSEMBLYCACHE_UNINSTALL_DISPOSITION , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn QueryAssemblyInfo < Impl : IAssemblyCacheImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwflags : QUERYASMINFO_FLAGS , pszassemblyname : super::super::Foundation:: PWSTR , pasminfo : * mut ASSEMBLY_INFO , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CreateAssemblyCacheItem < Impl : IAssemblyCacheImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwflags : u32 , pvreserved : * mut :: core :: ffi :: c_void , ppasmitem : * mut :: windows :: core :: RawPtr , pszassemblyname : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Reserved < Impl : IAssemblyCacheImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppunk : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn InstallAssembly < Impl : IAssemblyCacheImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwflags : u32 , pszmanifestfilepath : super::super::Foundation:: PWSTR , prefdata : * mut FUSION_INSTALL_REFERENCE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , UninstallAssembly : UninstallAssembly :: < Impl , IMPL_OFFSET > , QueryAssemblyInfo : QueryAssemblyInfo :: < Impl , IMPL_OFFSET > , CreateAssemblyCacheItem : CreateAssemblyCacheItem :: < Impl , IMPL_OFFSET > , Reserved : Reserved :: < Impl , IMPL_OFFSET > , InstallAssembly : InstallAssembly :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAssemblyCache < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IAssemblyCacheItemImpl < > : Sized where { fn CreateStream ( ) ; fn Commit ( ) ; fn AbortItem ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IAssemblyCacheItemVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAssemblyCacheItemImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAssemblyCacheItemVtbl < > { unsafe extern "system" fn CreateStream < Impl : IAssemblyCacheItemImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwflags : u32 , pszstreamname : super::super::Foundation:: PWSTR , dwformat : u32 , dwformatflags : u32 , ppistream : * mut :: windows :: core :: RawPtr , pulimaxsize : * mut u64 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Commit < Impl : IAssemblyCacheItemImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dwflags : u32 , puldisposition : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AbortItem < Impl : IAssemblyCacheItemImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , CreateStream : CreateStream :: < Impl , IMPL_OFFSET > , Commit : Commit :: < Impl , IMPL_OFFSET > , AbortItem : AbortItem :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAssemblyCacheItem < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IAssemblyNameImpl < > : Sized where { fn SetProperty ( ) ; fn GetProperty ( ) ; fn Finalize ( ) ; fn GetDisplayName ( ) ; fn Reserved ( ) ; fn GetName ( ) ; fn GetVersion ( ) ; fn IsEqual ( ) ; fn Clone ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IAssemblyNameVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAssemblyNameImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAssemblyNameVtbl < > { unsafe extern "system" fn SetProperty < Impl : IAssemblyNameImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , propertyid : u32 , pvproperty : * mut :: core :: ffi :: c_void , cbproperty : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetProperty < Impl : IAssemblyNameImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , propertyid : u32 , pvproperty : * mut :: core :: ffi :: c_void , pcbproperty : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Finalize < Impl : IAssemblyNameImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetDisplayName < Impl : IAssemblyNameImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , szdisplayname : super::super::Foundation:: PWSTR , pccdisplayname : * mut u32 , dwdisplayflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Reserved < Impl : IAssemblyNameImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , refiid : * const :: windows :: core :: GUID , punkreserved1 : * mut :: core :: ffi :: c_void , punkreserved2 : * mut :: core :: ffi :: c_void , szreserved : super::super::Foundation:: PWSTR , llreserved : i64 , pvreserved : * mut :: core :: ffi :: c_void , cbreserved : u32 , ppreserved : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetName < Impl : IAssemblyNameImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpcwbuffer : * mut u32 , pwzname : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetVersion < Impl : IAssemblyNameImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdwversionhi : * mut u32 , pdwversionlow : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsEqual < Impl : IAssemblyNameImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pname : :: windows :: core :: RawPtr , dwcmpflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Clone < Impl : IAssemblyNameImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pname : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SetProperty : SetProperty :: < Impl , IMPL_OFFSET > , GetProperty : GetProperty :: < Impl , IMPL_OFFSET > , Finalize : Finalize :: < Impl , IMPL_OFFSET > , GetDisplayName : GetDisplayName :: < Impl , IMPL_OFFSET > , Reserved : Reserved :: < Impl , IMPL_OFFSET > , GetName : GetName :: < Impl , IMPL_OFFSET > , GetVersion : GetVersion :: < Impl , IMPL_OFFSET > , IsEqual : IsEqual :: < Impl , IMPL_OFFSET > , Clone : Clone :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAssemblyName < > as :: windows :: core :: Interface > :: IID } } pub trait IEnumMsmDependencyImpl < > : Sized where { fn Next ( ) ; fn Skip ( ) ; fn Reset ( ) ; fn Clone ( ) ; } impl < > IEnumMsmDependencyVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IEnumMsmDependencyImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IEnumMsmDependencyVtbl < > { unsafe extern "system" fn Next < Impl : IEnumMsmDependencyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cfetch : u32 , rgmsmdependencies : * mut :: windows :: core :: RawPtr , pcfetched : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Skip < Impl : IEnumMsmDependencyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cskip : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Reset < Impl : IEnumMsmDependencyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Clone < Impl : IEnumMsmDependencyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pemsmdependencies : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Next : Next :: < Impl , IMPL_OFFSET > , Skip : Skip :: < Impl , IMPL_OFFSET > , Reset : Reset :: < Impl , IMPL_OFFSET > , Clone : Clone :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IEnumMsmDependency < > as :: windows :: core :: Interface > :: IID } } pub trait IEnumMsmErrorImpl < > : Sized where { fn Next ( ) ; fn Skip ( ) ; fn Reset ( ) ; fn Clone ( ) ; } impl < > IEnumMsmErrorVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IEnumMsmErrorImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IEnumMsmErrorVtbl < > { unsafe extern "system" fn Next < Impl : IEnumMsmErrorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cfetch : u32 , rgmsmerrors : * mut :: windows :: core :: RawPtr , pcfetched : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Skip < Impl : IEnumMsmErrorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cskip : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Reset < Impl : IEnumMsmErrorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Clone < Impl : IEnumMsmErrorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pemsmerrors : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Next : Next :: < Impl , IMPL_OFFSET > , Skip : Skip :: < Impl , IMPL_OFFSET > , Reset : Reset :: < Impl , IMPL_OFFSET > , Clone : Clone :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IEnumMsmError < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IEnumMsmStringImpl < > : Sized where { fn Next ( ) ; fn Skip ( ) ; fn Reset ( ) ; fn Clone ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IEnumMsmStringVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IEnumMsmStringImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IEnumMsmStringVtbl < > { unsafe extern "system" fn Next < Impl : IEnumMsmStringImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cfetch : u32 , rgbstrstrings : * mut super::super::Foundation:: BSTR , pcfetched : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Skip < Impl : IEnumMsmStringImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cskip : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Reset < Impl : IEnumMsmStringImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Clone < Impl : IEnumMsmStringImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pemsmstrings : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Next : Next :: < Impl , IMPL_OFFSET > , Skip : Skip :: < Impl , IMPL_OFFSET > , Reset : Reset :: < Impl , IMPL_OFFSET > , Clone : Clone :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IEnumMsmString < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IMsmDependenciesImpl < > : Sized + IDispatchImpl where { fn Item ( ) ; fn Count ( ) ; fn _NewEnum ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IMsmDependenciesVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IMsmDependenciesImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IMsmDependenciesVtbl < > { unsafe extern "system" fn Item < Impl : IMsmDependenciesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , item : i32 , r#return : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Count < Impl : IMsmDependenciesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , count : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _NewEnum < Impl : IMsmDependenciesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , newenum : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Item : Item :: < Impl , IMPL_OFFSET > , Count : Count :: < Impl , IMPL_OFFSET > , _NewEnum : _NewEnum :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IMsmDependencies < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IMsmDependencyImpl < > : Sized + IDispatchImpl where { fn Module ( ) ; fn Language ( ) ; fn Version ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IMsmDependencyVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IMsmDependencyImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IMsmDependencyVtbl < > { unsafe extern "system" fn Module < Impl : IMsmDependencyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , module : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Language < Impl : IMsmDependencyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , language : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Version < Impl : IMsmDependencyImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , version : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Module : Module :: < Impl , IMPL_OFFSET > , Language : Language :: < Impl , IMPL_OFFSET > , Version : Version :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IMsmDependency < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IMsmErrorImpl < > : Sized + IDispatchImpl where { fn Type ( ) ; fn Path ( ) ; fn Language ( ) ; fn DatabaseTable ( ) ; fn DatabaseKeys ( ) ; fn ModuleTable ( ) ; fn ModuleKeys ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IMsmErrorVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IMsmErrorImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IMsmErrorVtbl < > { unsafe extern "system" fn Type < Impl : IMsmErrorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , errortype : * mut msmErrorType , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Path < Impl : IMsmErrorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , errorpath : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Language < Impl : IMsmErrorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , errorlanguage : * mut i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DatabaseTable < Impl : IMsmErrorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , errortable : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DatabaseKeys < Impl : IMsmErrorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , errorkeys : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ModuleTable < Impl : IMsmErrorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , errortable : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ModuleKeys < Impl : IMsmErrorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , errorkeys : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Type : Type :: < Impl , IMPL_OFFSET > , Path : Path :: < Impl , IMPL_OFFSET > , Language : Language :: < Impl , IMPL_OFFSET > , DatabaseTable : DatabaseTable :: < Impl , IMPL_OFFSET > , DatabaseKeys : DatabaseKeys :: < Impl , IMPL_OFFSET > , ModuleTable : ModuleTable :: < Impl , IMPL_OFFSET > , ModuleKeys : ModuleKeys :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IMsmError < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IMsmErrorsImpl < > : Sized + IDispatchImpl where { fn Item ( ) ; fn Count ( ) ; fn _NewEnum ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IMsmErrorsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IMsmErrorsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IMsmErrorsVtbl < > { unsafe extern "system" fn Item < Impl : IMsmErrorsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , item : i32 , r#return : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Count < Impl : IMsmErrorsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , count : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _NewEnum < Impl : IMsmErrorsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , newenum : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Item : Item :: < Impl , IMPL_OFFSET > , Count : Count :: < Impl , IMPL_OFFSET > , _NewEnum : _NewEnum :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IMsmErrors < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IMsmGetFilesImpl < > : Sized + IDispatchImpl where { fn ModuleFiles ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IMsmGetFilesVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IMsmGetFilesImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IMsmGetFilesVtbl < > { unsafe extern "system" fn ModuleFiles < Impl : IMsmGetFilesImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , files : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , ModuleFiles : ModuleFiles :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IMsmGetFiles < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IMsmMergeImpl < > : Sized + IDispatchImpl where { fn OpenDatabase ( ) ; fn OpenModule ( ) ; fn CloseDatabase ( ) ; fn CloseModule ( ) ; fn OpenLog ( ) ; fn CloseLog ( ) ; fn Log ( ) ; fn Errors ( ) ; fn Dependencies ( ) ; fn Merge ( ) ; fn Connect ( ) ; fn ExtractCAB ( ) ; fn ExtractFiles ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IMsmMergeVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IMsmMergeImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IMsmMergeVtbl < > { unsafe extern "system" fn OpenDatabase < Impl : IMsmMergeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , path : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OpenModule < Impl : IMsmMergeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , path : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , language : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CloseDatabase < Impl : IMsmMergeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , commit : i16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CloseModule < Impl : IMsmMergeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OpenLog < Impl : IMsmMergeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , path : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CloseLog < Impl : IMsmMergeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Log < Impl : IMsmMergeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , message : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Errors < Impl : IMsmMergeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , errors : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Dependencies < Impl : IMsmMergeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , dependencies : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Merge < Impl : IMsmMergeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , feature : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , redirectdir : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Connect < Impl : IMsmMergeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , feature : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ExtractCAB < Impl : IMsmMergeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , filename : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ExtractFiles < Impl : IMsmMergeImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , path : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , OpenDatabase : OpenDatabase :: < Impl , IMPL_OFFSET > , OpenModule : OpenModule :: < Impl , IMPL_OFFSET > , CloseDatabase : CloseDatabase :: < Impl , IMPL_OFFSET > , CloseModule : CloseModule :: < Impl , IMPL_OFFSET > , OpenLog : OpenLog :: < Impl , IMPL_OFFSET > , CloseLog : CloseLog :: < Impl , IMPL_OFFSET > , Log : Log :: < Impl , IMPL_OFFSET > , Errors : Errors :: < Impl , IMPL_OFFSET > , Dependencies : Dependencies :: < Impl , IMPL_OFFSET > , Merge : Merge :: < Impl , IMPL_OFFSET > , Connect : Connect :: < Impl , IMPL_OFFSET > , ExtractCAB : ExtractCAB :: < Impl , IMPL_OFFSET > , ExtractFiles : ExtractFiles :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IMsmMerge < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] pub trait IMsmStringsImpl < > : Sized + IDispatchImpl where { fn Item ( ) ; fn Count ( ) ; fn _NewEnum ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" , feature ="Win32_System_Ole" ) ) ] impl < > IMsmStringsVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IMsmStringsImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IMsmStringsVtbl < > { unsafe extern "system" fn Item < Impl : IMsmStringsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , item : i32 , r#return : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Count < Impl : IMsmStringsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , count : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn _NewEnum < Impl : IMsmStringsImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , newenum : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { vtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Item : Item :: < Impl , IMPL_OFFSET > , Count : Count :: < Impl , IMPL_OFFSET > , _NewEnum : _NewEnum :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IMsmStrings < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IPMApplicationInfoImpl < > : Sized where { fn ProductID ( ) ; fn InstanceID ( ) ; fn OfferID ( ) ; fn DefaultTask ( ) ; fn AppTitle ( ) ; fn IconPath ( ) ; fn NotificationState ( ) ; fn AppInstallType ( ) ; fn State ( ) ; fn IsRevoked ( ) ; fn UpdateAvailable ( ) ; fn InstallDate ( ) ; fn IsUninstallable ( ) ; fn IsThemable ( ) ; fn IsTrial ( ) ; fn InstallPath ( ) ; fn DataRoot ( ) ; fn Genre ( ) ; fn Publisher ( ) ; fn Author ( ) ; fn Description ( ) ; fn Version ( ) ; fn InvocationInfo ( ) ; fn AppPlatMajorVersion ( ) ; fn AppPlatMinorVersion ( ) ; fn PublisherID ( ) ; fn IsMultiCore ( ) ; fn SID ( ) ; fn AppPlatMajorVersionLightUp ( ) ; fn AppPlatMinorVersionLightUp ( ) ; fn set_UpdateAvailable ( ) ; fn set_NotificationState ( ) ; fn set_IconPath ( ) ; fn set_UninstallableState ( ) ; fn IsPinableOnKidZone ( ) ; fn IsOriginallyPreInstalled ( ) ; fn IsInstallOnSD ( ) ; fn IsOptoutOnSD ( ) ; fn IsOptoutBackupRestore ( ) ; fn set_EnterpriseDisabled ( ) ; fn set_EnterpriseUninstallable ( ) ; fn EnterpriseDisabled ( ) ; fn EnterpriseUninstallable ( ) ; fn IsVisibleOnAppList ( ) ; fn IsInboxApp ( ) ; fn StorageID ( ) ; fn StartAppBlob ( ) ; fn IsMovable ( ) ; fn DeploymentAppEnumerationHubFilter ( ) ; fn ModifiedDate ( ) ; fn IsOriginallyRestored ( ) ; fn ShouldDeferMdilBind ( ) ; fn IsFullyPreInstall ( ) ; fn set_IsMdilMaintenanceNeeded ( ) ; fn set_Title ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IPMApplicationInfoVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IPMApplicationInfoImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IPMApplicationInfoVtbl < > { unsafe extern "system" fn ProductID < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pproductid : * mut :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn InstanceID < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pinstanceid : * mut :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OfferID < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pofferid : * mut :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DefaultTask < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdefaulttask : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AppTitle < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , papptitle : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IconPath < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pappiconpath : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn NotificationState < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pisnotified : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AppInstallType < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pappinstalltype : * mut PM_APPLICATION_INSTALL_TYPE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn State < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pstate : * mut PM_APPLICATION_STATE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsRevoked < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pisrevoked : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UpdateAvailable < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pisupdateavailable : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn InstallDate < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pinstalldate : * mut super::super::Foundation:: FILETIME , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsUninstallable < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pisuninstallable : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsThemable < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pisthemable : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsTrial < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pistrial : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn InstallPath < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pinstallpath : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DataRoot < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdataroot : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Genre < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pgenre : * mut PM_APP_GENRE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Publisher < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppublisher : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Author < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pauthor : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Description < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdescription : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Version < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pversion : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn InvocationInfo < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pimageurn : * mut super::super::Foundation:: BSTR , pparameters : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AppPlatMajorVersion < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pmajorver : * mut u8 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AppPlatMinorVersion < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pminorver : * mut u8 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PublisherID < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppublisherid : * mut :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsMultiCore < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pismulticore : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SID < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psid : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AppPlatMajorVersionLightUp < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pmajorver : * mut u8 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AppPlatMinorVersionLightUp < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pminorver : * mut u8 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn set_UpdateAvailable < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , isupdateavailable : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn set_NotificationState < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , isnotified : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn set_IconPath < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , appiconpath : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn set_UninstallableState < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , isuninstallable : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsPinableOnKidZone < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pispinable : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsOriginallyPreInstalled < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pispreinstalled : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsInstallOnSD < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pisinstallonsd : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsOptoutOnSD < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pisoptoutonsd : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsOptoutBackupRestore < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pisoptoutbackuprestore : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn set_EnterpriseDisabled < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , isdisabled : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn set_EnterpriseUninstallable < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , isuninstallable : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn EnterpriseDisabled < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , isdisabled : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn EnterpriseUninstallable < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , isuninstallable : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsVisibleOnAppList < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pisvisible : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsInboxApp < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pisinboxapp : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn StorageID < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pstorageid : * mut :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn StartAppBlob < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pblob : * mut PM_STARTAPPBLOB , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsMovable < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pismovable : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeploymentAppEnumerationHubFilter < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hubtype : * mut PM_TILE_HUBTYPE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ModifiedDate < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pmodifieddate : * mut super::super::Foundation:: FILETIME , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsOriginallyRestored < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pisrestored : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ShouldDeferMdilBind < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfdefermdilbind : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsFullyPreInstall < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfisfullypreinstall : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn set_IsMdilMaintenanceNeeded < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , fismdilmaintenanceneeded : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn set_Title < Impl : IPMApplicationInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , apptitle : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , ProductID : ProductID :: < Impl , IMPL_OFFSET > , InstanceID : InstanceID :: < Impl , IMPL_OFFSET > , OfferID : OfferID :: < Impl , IMPL_OFFSET > , DefaultTask : DefaultTask :: < Impl , IMPL_OFFSET > , AppTitle : AppTitle :: < Impl , IMPL_OFFSET > , IconPath : IconPath :: < Impl , IMPL_OFFSET > , NotificationState : NotificationState :: < Impl , IMPL_OFFSET > , AppInstallType : AppInstallType :: < Impl , IMPL_OFFSET > , State : State :: < Impl , IMPL_OFFSET > , IsRevoked : IsRevoked :: < Impl , IMPL_OFFSET > , UpdateAvailable : UpdateAvailable :: < Impl , IMPL_OFFSET > , InstallDate : InstallDate :: < Impl , IMPL_OFFSET > , IsUninstallable : IsUninstallable :: < Impl , IMPL_OFFSET > , IsThemable : IsThemable :: < Impl , IMPL_OFFSET > , IsTrial : IsTrial :: < Impl , IMPL_OFFSET > , InstallPath : InstallPath :: < Impl , IMPL_OFFSET > , DataRoot : DataRoot :: < Impl , IMPL_OFFSET > , Genre : Genre :: < Impl , IMPL_OFFSET > , Publisher : Publisher :: < Impl , IMPL_OFFSET > , Author : Author :: < Impl , IMPL_OFFSET > , Description : Description :: < Impl , IMPL_OFFSET > , Version : Version :: < Impl , IMPL_OFFSET > , InvocationInfo : InvocationInfo :: < Impl , IMPL_OFFSET > , AppPlatMajorVersion : AppPlatMajorVersion :: < Impl , IMPL_OFFSET > , AppPlatMinorVersion : AppPlatMinorVersion :: < Impl , IMPL_OFFSET > , PublisherID : PublisherID :: < Impl , IMPL_OFFSET > , IsMultiCore : IsMultiCore :: < Impl , IMPL_OFFSET > , SID : SID :: < Impl , IMPL_OFFSET > , AppPlatMajorVersionLightUp : AppPlatMajorVersionLightUp :: < Impl , IMPL_OFFSET > , AppPlatMinorVersionLightUp : AppPlatMinorVersionLightUp :: < Impl , IMPL_OFFSET > , set_UpdateAvailable : set_UpdateAvailable :: < Impl , IMPL_OFFSET > , set_NotificationState : set_NotificationState :: < Impl , IMPL_OFFSET > , set_IconPath : set_IconPath :: < Impl , IMPL_OFFSET > , set_UninstallableState : set_UninstallableState :: < Impl , IMPL_OFFSET > , IsPinableOnKidZone : IsPinableOnKidZone :: < Impl , IMPL_OFFSET > , IsOriginallyPreInstalled : IsOriginallyPreInstalled :: < Impl , IMPL_OFFSET > , IsInstallOnSD : IsInstallOnSD :: < Impl , IMPL_OFFSET > , IsOptoutOnSD : IsOptoutOnSD :: < Impl , IMPL_OFFSET > , IsOptoutBackupRestore : IsOptoutBackupRestore :: < Impl , IMPL_OFFSET > , set_EnterpriseDisabled : set_EnterpriseDisabled :: < Impl , IMPL_OFFSET > , set_EnterpriseUninstallable : set_EnterpriseUninstallable :: < Impl , IMPL_OFFSET > , EnterpriseDisabled : EnterpriseDisabled :: < Impl , IMPL_OFFSET > , EnterpriseUninstallable : EnterpriseUninstallable :: < Impl , IMPL_OFFSET > , IsVisibleOnAppList : IsVisibleOnAppList :: < Impl , IMPL_OFFSET > , IsInboxApp : IsInboxApp :: < Impl , IMPL_OFFSET > , StorageID : StorageID :: < Impl , IMPL_OFFSET > , StartAppBlob : StartAppBlob :: < Impl , IMPL_OFFSET > , IsMovable : IsMovable :: < Impl , IMPL_OFFSET > , DeploymentAppEnumerationHubFilter : DeploymentAppEnumerationHubFilter :: < Impl , IMPL_OFFSET > , ModifiedDate : ModifiedDate :: < Impl , IMPL_OFFSET > , IsOriginallyRestored : IsOriginallyRestored :: < Impl , IMPL_OFFSET > , ShouldDeferMdilBind : ShouldDeferMdilBind :: < Impl , IMPL_OFFSET > , IsFullyPreInstall : IsFullyPreInstall :: < Impl , IMPL_OFFSET > , set_IsMdilMaintenanceNeeded : set_IsMdilMaintenanceNeeded :: < Impl , IMPL_OFFSET > , set_Title : set_Title :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IPMApplicationInfo < > as :: windows :: core :: Interface > :: IID } } pub trait IPMApplicationInfoEnumeratorImpl < > : Sized where { fn Next ( ) ; } impl < > IPMApplicationInfoEnumeratorVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IPMApplicationInfoEnumeratorImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IPMApplicationInfoEnumeratorVtbl < > { unsafe extern "system" fn Next < Impl : IPMApplicationInfoEnumeratorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppappinfo : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Next : Next :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IPMApplicationInfoEnumerator < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IPMBackgroundServiceAgentInfoImpl < > : Sized where { fn ProductID ( ) ; fn TaskID ( ) ; fn BSAID ( ) ; fn BGSpecifier ( ) ; fn BGName ( ) ; fn BGSource ( ) ; fn BGType ( ) ; fn IsPeriodic ( ) ; fn IsScheduled ( ) ; fn IsScheduleAllowed ( ) ; fn Description ( ) ; fn IsLaunchOnBoot ( ) ; fn set_IsScheduled ( ) ; fn set_IsScheduleAllowed ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IPMBackgroundServiceAgentInfoVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IPMBackgroundServiceAgentInfoImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IPMBackgroundServiceAgentInfoVtbl < > { unsafe extern "system" fn ProductID < Impl : IPMBackgroundServiceAgentInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pproductid : * mut :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn TaskID < Impl : IPMBackgroundServiceAgentInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ptaskid : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BSAID < Impl : IPMBackgroundServiceAgentInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbsaid : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BGSpecifier < Impl : IPMBackgroundServiceAgentInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbgspecifier : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BGName < Impl : IPMBackgroundServiceAgentInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbgname : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BGSource < Impl : IPMBackgroundServiceAgentInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbgsource : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BGType < Impl : IPMBackgroundServiceAgentInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbgtype : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsPeriodic < Impl : IPMBackgroundServiceAgentInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pisperiodic : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsScheduled < Impl : IPMBackgroundServiceAgentInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pisscheduled : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsScheduleAllowed < Impl : IPMBackgroundServiceAgentInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pisscheduleallowed : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Description < Impl : IPMBackgroundServiceAgentInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdescription : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsLaunchOnBoot < Impl : IPMBackgroundServiceAgentInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , plaunchonboot : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn set_IsScheduled < Impl : IPMBackgroundServiceAgentInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , isscheduled : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn set_IsScheduleAllowed < Impl : IPMBackgroundServiceAgentInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , isscheduleallowed : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , ProductID : ProductID :: < Impl , IMPL_OFFSET > , TaskID : TaskID :: < Impl , IMPL_OFFSET > , BSAID : BSAID :: < Impl , IMPL_OFFSET > , BGSpecifier : BGSpecifier :: < Impl , IMPL_OFFSET > , BGName : BGName :: < Impl , IMPL_OFFSET > , BGSource : BGSource :: < Impl , IMPL_OFFSET > , BGType : BGType :: < Impl , IMPL_OFFSET > , IsPeriodic : IsPeriodic :: < Impl , IMPL_OFFSET > , IsScheduled : IsScheduled :: < Impl , IMPL_OFFSET > , IsScheduleAllowed : IsScheduleAllowed :: < Impl , IMPL_OFFSET > , Description : Description :: < Impl , IMPL_OFFSET > , IsLaunchOnBoot : IsLaunchOnBoot :: < Impl , IMPL_OFFSET > , set_IsScheduled : set_IsScheduled :: < Impl , IMPL_OFFSET > , set_IsScheduleAllowed : set_IsScheduleAllowed :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IPMBackgroundServiceAgentInfo < > as :: windows :: core :: Interface > :: IID } } pub trait IPMBackgroundServiceAgentInfoEnumeratorImpl < > : Sized where { fn Next ( ) ; } impl < > IPMBackgroundServiceAgentInfoEnumeratorVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IPMBackgroundServiceAgentInfoEnumeratorImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IPMBackgroundServiceAgentInfoEnumeratorVtbl < > { unsafe extern "system" fn Next < Impl : IPMBackgroundServiceAgentInfoEnumeratorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppbsainfo : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Next : Next :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IPMBackgroundServiceAgentInfoEnumerator < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IPMBackgroundWorkerInfoImpl < > : Sized where { fn ProductID ( ) ; fn TaskID ( ) ; fn BGName ( ) ; fn MaxStartupLatency ( ) ; fn ExpectedRuntime ( ) ; fn IsBootWorker ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IPMBackgroundWorkerInfoVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IPMBackgroundWorkerInfoImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IPMBackgroundWorkerInfoVtbl < > { unsafe extern "system" fn ProductID < Impl : IPMBackgroundWorkerInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pproductid : * mut :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn TaskID < Impl : IPMBackgroundWorkerInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ptaskid : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BGName < Impl : IPMBackgroundWorkerInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbgname : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn MaxStartupLatency < Impl : IPMBackgroundWorkerInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pmaxstartuplatency : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ExpectedRuntime < Impl : IPMBackgroundWorkerInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pexpectedruntime : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsBootWorker < Impl : IPMBackgroundWorkerInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pisbootworker : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , ProductID : ProductID :: < Impl , IMPL_OFFSET > , TaskID : TaskID :: < Impl , IMPL_OFFSET > , BGName : BGName :: < Impl , IMPL_OFFSET > , MaxStartupLatency : MaxStartupLatency :: < Impl , IMPL_OFFSET > , ExpectedRuntime : ExpectedRuntime :: < Impl , IMPL_OFFSET > , IsBootWorker : IsBootWorker :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IPMBackgroundWorkerInfo < > as :: windows :: core :: Interface > :: IID } } pub trait IPMBackgroundWorkerInfoEnumeratorImpl < > : Sized where { fn Next ( ) ; } impl < > IPMBackgroundWorkerInfoEnumeratorVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IPMBackgroundWorkerInfoEnumeratorImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IPMBackgroundWorkerInfoEnumeratorVtbl < > { unsafe extern "system" fn Next < Impl : IPMBackgroundWorkerInfoEnumeratorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppbwinfo : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Next : Next :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IPMBackgroundWorkerInfoEnumerator < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IPMDeploymentManagerImpl < > : Sized where { fn ReportDownloadBegin ( ) ; fn ReportDownloadProgress ( ) ; fn ReportDownloadComplete ( ) ; fn BeginInstall ( ) ; fn BeginUpdate ( ) ; fn BeginDeployPackage ( ) ; fn BeginUpdateDeployedPackageLegacy ( ) ; fn BeginUninstall ( ) ; fn BeginEnterpriseAppInstall ( ) ; fn BeginEnterpriseAppUpdate ( ) ; fn BeginUpdateLicense ( ) ; fn GetLicenseChallenge ( ) ; fn GetLicenseChallengeByProductID ( ) ; fn GetLicenseChallengeByProductID2 ( ) ; fn RevokeLicense ( ) ; fn RebindMdilBinaries ( ) ; fn RebindAllMdilBinaries ( ) ; fn RegenerateXbf ( ) ; fn GenerateXbfForCurrentLocale ( ) ; fn BeginProvision ( ) ; fn BeginDeprovision ( ) ; fn ReindexSQLCEDatabases ( ) ; fn SetApplicationsNeedMaintenance ( ) ; fn UpdateChamberProfile ( ) ; fn EnterprisePolicyIsApplicationAllowed ( ) ; fn BeginUpdateDeployedPackage ( ) ; fn ReportRestoreCancelled ( ) ; fn ResolveResourceString ( ) ; fn UpdateCapabilitiesForModernApps ( ) ; fn ReportDownloadStatusUpdate ( ) ; fn BeginUninstallWithOptions ( ) ; fn BindDeferredMdilBinaries ( ) ; fn GenerateXamlLightupXbfForCurrentLocale ( ) ; fn AddLicenseForAppx ( ) ; fn FixJunctionsForAppsOnSDCard ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IPMDeploymentManagerVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IPMDeploymentManagerImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IPMDeploymentManagerVtbl < > { unsafe extern "system" fn ReportDownloadBegin < Impl : IPMDeploymentManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , productid : :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ReportDownloadProgress < Impl : IPMDeploymentManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , productid : :: windows :: core :: GUID , usprogress : u16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ReportDownloadComplete < Impl : IPMDeploymentManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , productid : :: windows :: core :: GUID , hrresult : :: windows :: core :: HRESULT , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BeginInstall < Impl : IPMDeploymentManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pinstallinfo : * const PM_INSTALLINFO , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BeginUpdate < Impl : IPMDeploymentManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pupdateinfo : * const PM_UPDATEINFO , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BeginDeployPackage < Impl : IPMDeploymentManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pinstallinfo : * const PM_INSTALLINFO , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BeginUpdateDeployedPackageLegacy < Impl : IPMDeploymentManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pupdateinfo : * const PM_UPDATEINFO_LEGACY , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BeginUninstall < Impl : IPMDeploymentManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , productid : :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BeginEnterpriseAppInstall < Impl : IPMDeploymentManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pinstallinfo : * const PM_INSTALLINFO , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BeginEnterpriseAppUpdate < Impl : IPMDeploymentManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pupdateinfo : * const PM_UPDATEINFO , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BeginUpdateLicense < Impl : IPMDeploymentManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , productid : :: windows :: core :: GUID , offerid : :: windows :: core :: GUID , pblicense : * const u8 , cblicense : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetLicenseChallenge < Impl : IPMDeploymentManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , packagepath : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ppbchallenge : * mut * mut u8 , pcbchallenge : * mut u32 , ppbkid : * mut * mut u8 , pcbkid : * mut u32 , ppbdeviceid : * mut * mut u8 , pcbdeviceid : * mut u32 , ppbsaltvalue : * mut * mut u8 , pcbsaltvalue : * mut u32 , ppbkgvvalue : * mut * mut u8 , pcbkgvvalue : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetLicenseChallengeByProductID < Impl : IPMDeploymentManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , productid : :: windows :: core :: GUID , ppbchallenge : * mut * mut u8 , pcblicense : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetLicenseChallengeByProductID2 < Impl : IPMDeploymentManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , productid : :: windows :: core :: GUID , ppbchallenge : * mut * mut u8 , pcblicense : * mut u32 , ppbkid : * mut * mut u8 , pcbkid : * mut u32 , ppbdeviceid : * mut * mut u8 , pcbdeviceid : * mut u32 , ppbsaltvalue : * mut * mut u8 , pcbsaltvalue : * mut u32 , ppbkgvvalue : * mut * mut u8 , pcbkgvvalue : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RevokeLicense < Impl : IPMDeploymentManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , productid : :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RebindMdilBinaries < Impl : IPMDeploymentManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , productid : :: windows :: core :: GUID , filenames : * const super::Com:: SAFEARRAY , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RebindAllMdilBinaries < Impl : IPMDeploymentManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , productid : :: windows :: core :: GUID , instanceid : :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RegenerateXbf < Impl : IPMDeploymentManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , productid : :: windows :: core :: GUID , assemblypaths : * const super::Com:: SAFEARRAY , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GenerateXbfForCurrentLocale < Impl : IPMDeploymentManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , productid : :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BeginProvision < Impl : IPMDeploymentManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , productid : :: windows :: core :: GUID , xmlpath : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BeginDeprovision < Impl : IPMDeploymentManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , productid : :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ReindexSQLCEDatabases < Impl : IPMDeploymentManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , productid : :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetApplicationsNeedMaintenance < Impl : IPMDeploymentManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , requiredmaintenanceoperations : u32 , pcapplications : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UpdateChamberProfile < Impl : IPMDeploymentManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , productid : :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn EnterprisePolicyIsApplicationAllowed < Impl : IPMDeploymentManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , productid : :: windows :: core :: GUID , publishername : super::super::Foundation:: PWSTR , pisallowed : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BeginUpdateDeployedPackage < Impl : IPMDeploymentManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pupdateinfo : * const PM_UPDATEINFO , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ReportRestoreCancelled < Impl : IPMDeploymentManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , productid : :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ResolveResourceString < Impl : IPMDeploymentManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , resourcestring : super::super::Foundation:: PWSTR , presolvedresourcestring : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UpdateCapabilitiesForModernApps < Impl : IPMDeploymentManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ReportDownloadStatusUpdate < Impl : IPMDeploymentManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , productid : :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BeginUninstallWithOptions < Impl : IPMDeploymentManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , productid : :: windows :: core :: GUID , removaloptions : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BindDeferredMdilBinaries < Impl : IPMDeploymentManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GenerateXamlLightupXbfForCurrentLocale < Impl : IPMDeploymentManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , packagefamilyname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddLicenseForAppx < Impl : IPMDeploymentManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , productid : :: windows :: core :: GUID , pblicense : * const u8 , cblicense : u32 , pbplayreadyheader : * const u8 , cbplayreadyheader : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn FixJunctionsForAppsOnSDCard < Impl : IPMDeploymentManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , ReportDownloadBegin : ReportDownloadBegin :: < Impl , IMPL_OFFSET > , ReportDownloadProgress : ReportDownloadProgress :: < Impl , IMPL_OFFSET > , ReportDownloadComplete : ReportDownloadComplete :: < Impl , IMPL_OFFSET > , BeginInstall : BeginInstall :: < Impl , IMPL_OFFSET > , BeginUpdate : BeginUpdate :: < Impl , IMPL_OFFSET > , BeginDeployPackage : BeginDeployPackage :: < Impl , IMPL_OFFSET > , BeginUpdateDeployedPackageLegacy : BeginUpdateDeployedPackageLegacy :: < Impl , IMPL_OFFSET > , BeginUninstall : BeginUninstall :: < Impl , IMPL_OFFSET > , BeginEnterpriseAppInstall : BeginEnterpriseAppInstall :: < Impl , IMPL_OFFSET > , BeginEnterpriseAppUpdate : BeginEnterpriseAppUpdate :: < Impl , IMPL_OFFSET > , BeginUpdateLicense : BeginUpdateLicense :: < Impl , IMPL_OFFSET > , GetLicenseChallenge : GetLicenseChallenge :: < Impl , IMPL_OFFSET > , GetLicenseChallengeByProductID : GetLicenseChallengeByProductID :: < Impl , IMPL_OFFSET > , GetLicenseChallengeByProductID2 : GetLicenseChallengeByProductID2 :: < Impl , IMPL_OFFSET > , RevokeLicense : RevokeLicense :: < Impl , IMPL_OFFSET > , RebindMdilBinaries : RebindMdilBinaries :: < Impl , IMPL_OFFSET > , RebindAllMdilBinaries : RebindAllMdilBinaries :: < Impl , IMPL_OFFSET > , RegenerateXbf : RegenerateXbf :: < Impl , IMPL_OFFSET > , GenerateXbfForCurrentLocale : GenerateXbfForCurrentLocale :: < Impl , IMPL_OFFSET > , BeginProvision : BeginProvision :: < Impl , IMPL_OFFSET > , BeginDeprovision : BeginDeprovision :: < Impl , IMPL_OFFSET > , ReindexSQLCEDatabases : ReindexSQLCEDatabases :: < Impl , IMPL_OFFSET > , SetApplicationsNeedMaintenance : SetApplicationsNeedMaintenance :: < Impl , IMPL_OFFSET > , UpdateChamberProfile : UpdateChamberProfile :: < Impl , IMPL_OFFSET > , EnterprisePolicyIsApplicationAllowed : EnterprisePolicyIsApplicationAllowed :: < Impl , IMPL_OFFSET > , BeginUpdateDeployedPackage : BeginUpdateDeployedPackage :: < Impl , IMPL_OFFSET > , ReportRestoreCancelled : ReportRestoreCancelled :: < Impl , IMPL_OFFSET > , ResolveResourceString : ResolveResourceString :: < Impl , IMPL_OFFSET > , UpdateCapabilitiesForModernApps : UpdateCapabilitiesForModernApps :: < Impl , IMPL_OFFSET > , ReportDownloadStatusUpdate : ReportDownloadStatusUpdate :: < Impl , IMPL_OFFSET > , BeginUninstallWithOptions : BeginUninstallWithOptions :: < Impl , IMPL_OFFSET > , BindDeferredMdilBinaries : BindDeferredMdilBinaries :: < Impl , IMPL_OFFSET > , GenerateXamlLightupXbfForCurrentLocale : GenerateXamlLightupXbfForCurrentLocale :: < Impl , IMPL_OFFSET > , AddLicenseForAppx : AddLicenseForAppx :: < Impl , IMPL_OFFSET > , FixJunctionsForAppsOnSDCard : FixJunctionsForAppsOnSDCard :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IPMDeploymentManager < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IPMEnumerationManagerImpl < > : Sized where { fn AllApplications ( ) ; fn AllTiles ( ) ; fn AllTasks ( ) ; fn AllExtensions ( ) ; fn AllBackgroundServiceAgents ( ) ; fn AllBackgroundWorkers ( ) ; fn ApplicationInfo ( ) ; fn TileInfo ( ) ; fn TaskInfo ( ) ; fn TaskInfoEx ( ) ; fn BackgroundServiceAgentInfo ( ) ; fn AllLiveTileJobs ( ) ; fn LiveTileJob ( ) ; fn ApplicationInfoExternal ( ) ; fn FileHandlerGenericLogo ( ) ; fn ApplicationInfoFromAccessClaims ( ) ; fn StartTileEnumeratorBlob ( ) ; fn StartAppEnumeratorBlob ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IPMEnumerationManagerVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IPMEnumerationManagerImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IPMEnumerationManagerVtbl < > { unsafe extern "system" fn AllApplications < Impl : IPMEnumerationManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppappenum : * mut :: windows :: core :: RawPtr , filter : :: core :: mem :: ManuallyDrop < PM_ENUM_FILTER > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AllTiles < Impl : IPMEnumerationManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pptileenum : * mut :: windows :: core :: RawPtr , filter : :: core :: mem :: ManuallyDrop < PM_ENUM_FILTER > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AllTasks < Impl : IPMEnumerationManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pptaskenum : * mut :: windows :: core :: RawPtr , filter : :: core :: mem :: ManuallyDrop < PM_ENUM_FILTER > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AllExtensions < Impl : IPMEnumerationManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppextensionenum : * mut :: windows :: core :: RawPtr , filter : :: core :: mem :: ManuallyDrop < PM_ENUM_FILTER > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AllBackgroundServiceAgents < Impl : IPMEnumerationManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppbsaenum : * mut :: windows :: core :: RawPtr , filter : :: core :: mem :: ManuallyDrop < PM_ENUM_FILTER > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AllBackgroundWorkers < Impl : IPMEnumerationManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppbswenum : * mut :: windows :: core :: RawPtr , filter : :: core :: mem :: ManuallyDrop < PM_ENUM_FILTER > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ApplicationInfo < Impl : IPMEnumerationManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , productid : :: windows :: core :: GUID , ppappinfo : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn TileInfo < Impl : IPMEnumerationManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , productid : :: windows :: core :: GUID , tileid : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pptileinfo : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn TaskInfo < Impl : IPMEnumerationManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , productid : :: windows :: core :: GUID , taskid : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pptaskinfo : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn TaskInfoEx < Impl : IPMEnumerationManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , productid : :: windows :: core :: GUID , taskid : super::super::Foundation:: PWSTR , pptaskinfo : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BackgroundServiceAgentInfo < Impl : IPMEnumerationManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bsaid : u32 , pptaskinfo : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AllLiveTileJobs < Impl : IPMEnumerationManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pplivetilejobenum : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn LiveTileJob < Impl : IPMEnumerationManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , productid : :: windows :: core :: GUID , tileid : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , recurrencetype : PM_LIVETILE_RECURRENCE_TYPE , pplivetilejobinfo : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ApplicationInfoExternal < Impl : IPMEnumerationManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , productid : :: windows :: core :: GUID , ppappinfo : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn FileHandlerGenericLogo < Impl : IPMEnumerationManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , filetype : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , logosize : PM_LOGO_SIZE , plogo : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ApplicationInfoFromAccessClaims < Impl : IPMEnumerationManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , sysappid0 : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , sysappid1 : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ppappinfo : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn StartTileEnumeratorBlob < Impl : IPMEnumerationManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , filter : :: core :: mem :: ManuallyDrop < PM_ENUM_FILTER > , pctiles : * mut u32 , pptileblobs : * mut * mut PM_STARTTILEBLOB , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn StartAppEnumeratorBlob < Impl : IPMEnumerationManagerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , filter : :: core :: mem :: ManuallyDrop < PM_ENUM_FILTER > , pcapps : * mut u32 , ppappblobs : * mut * mut PM_STARTAPPBLOB , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , AllApplications : AllApplications :: < Impl , IMPL_OFFSET > , AllTiles : AllTiles :: < Impl , IMPL_OFFSET > , AllTasks : AllTasks :: < Impl , IMPL_OFFSET > , AllExtensions : AllExtensions :: < Impl , IMPL_OFFSET > , AllBackgroundServiceAgents : AllBackgroundServiceAgents :: < Impl , IMPL_OFFSET > , AllBackgroundWorkers : AllBackgroundWorkers :: < Impl , IMPL_OFFSET > , ApplicationInfo : ApplicationInfo :: < Impl , IMPL_OFFSET > , TileInfo : TileInfo :: < Impl , IMPL_OFFSET > , TaskInfo : TaskInfo :: < Impl , IMPL_OFFSET > , TaskInfoEx : TaskInfoEx :: < Impl , IMPL_OFFSET > , BackgroundServiceAgentInfo : BackgroundServiceAgentInfo :: < Impl , IMPL_OFFSET > , AllLiveTileJobs : AllLiveTileJobs :: < Impl , IMPL_OFFSET > , LiveTileJob : LiveTileJob :: < Impl , IMPL_OFFSET > , ApplicationInfoExternal : ApplicationInfoExternal :: < Impl , IMPL_OFFSET > , FileHandlerGenericLogo : FileHandlerGenericLogo :: < Impl , IMPL_OFFSET > , ApplicationInfoFromAccessClaims : ApplicationInfoFromAccessClaims :: < Impl , IMPL_OFFSET > , StartTileEnumeratorBlob : StartTileEnumeratorBlob :: < Impl , IMPL_OFFSET > , StartAppEnumeratorBlob : StartAppEnumeratorBlob :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IPMEnumerationManager < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IPMExtensionCachedFileUpdaterInfoImpl < > : Sized where { fn SupportsUpdates ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IPMExtensionCachedFileUpdaterInfoVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IPMExtensionCachedFileUpdaterInfoImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IPMExtensionCachedFileUpdaterInfoVtbl < > { unsafe extern "system" fn SupportsUpdates < Impl : IPMExtensionCachedFileUpdaterInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psupportsupdates : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SupportsUpdates : SupportsUpdates :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IPMExtensionCachedFileUpdaterInfo < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IPMExtensionContractInfoImpl < > : Sized where { fn InvocationInfo ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IPMExtensionContractInfoVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IPMExtensionContractInfoImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IPMExtensionContractInfoVtbl < > { unsafe extern "system" fn InvocationInfo < Impl : IPMExtensionContractInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , paumid : * mut super::super::Foundation:: BSTR , pargs : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , InvocationInfo : InvocationInfo :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IPMExtensionContractInfo < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IPMExtensionFileExtensionInfoImpl < > : Sized where { fn Name ( ) ; fn DisplayName ( ) ; fn Logo ( ) ; fn ContentType ( ) ; fn FileType ( ) ; fn InvocationInfo ( ) ; fn AllFileTypes ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IPMExtensionFileExtensionInfoVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IPMExtensionFileExtensionInfoImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IPMExtensionFileExtensionInfoVtbl < > { unsafe extern "system" fn Name < Impl : IPMExtensionFileExtensionInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pname : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DisplayName < Impl : IPMExtensionFileExtensionInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdisplayname : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Logo < Impl : IPMExtensionFileExtensionInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , logosize : PM_LOGO_SIZE , plogo : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ContentType < Impl : IPMExtensionFileExtensionInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , filetype : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pcontenttype : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn FileType < Impl : IPMExtensionFileExtensionInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , contenttype : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , pfiletype : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn InvocationInfo < Impl : IPMExtensionFileExtensionInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pimageurn : * mut super::super::Foundation:: BSTR , pparameters : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AllFileTypes < Impl : IPMExtensionFileExtensionInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcbtypes : * mut u32 , pptypes : * mut * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Name : Name :: < Impl , IMPL_OFFSET > , DisplayName : DisplayName :: < Impl , IMPL_OFFSET > , Logo : Logo :: < Impl , IMPL_OFFSET > , ContentType : ContentType :: < Impl , IMPL_OFFSET > , FileType : FileType :: < Impl , IMPL_OFFSET > , InvocationInfo : InvocationInfo :: < Impl , IMPL_OFFSET > , AllFileTypes : AllFileTypes :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IPMExtensionFileExtensionInfo < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IPMExtensionFileOpenPickerInfoImpl < > : Sized where { fn AllFileTypes ( ) ; fn SupportsAllFileTypes ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IPMExtensionFileOpenPickerInfoVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IPMExtensionFileOpenPickerInfoImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IPMExtensionFileOpenPickerInfoVtbl < > { unsafe extern "system" fn AllFileTypes < Impl : IPMExtensionFileOpenPickerInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pctypes : * mut u32 , pptypes : * mut * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SupportsAllFileTypes < Impl : IPMExtensionFileOpenPickerInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psupportsalltypes : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , AllFileTypes : AllFileTypes :: < Impl , IMPL_OFFSET > , SupportsAllFileTypes : SupportsAllFileTypes :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IPMExtensionFileOpenPickerInfo < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IPMExtensionFileSavePickerInfoImpl < > : Sized where { fn AllFileTypes ( ) ; fn SupportsAllFileTypes ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IPMExtensionFileSavePickerInfoVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IPMExtensionFileSavePickerInfoImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IPMExtensionFileSavePickerInfoVtbl < > { unsafe extern "system" fn AllFileTypes < Impl : IPMExtensionFileSavePickerInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pctypes : * mut u32 , pptypes : * mut * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SupportsAllFileTypes < Impl : IPMExtensionFileSavePickerInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psupportsalltypes : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , AllFileTypes : AllFileTypes :: < Impl , IMPL_OFFSET > , SupportsAllFileTypes : SupportsAllFileTypes :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IPMExtensionFileSavePickerInfo < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IPMExtensionInfoImpl < > : Sized where { fn SupplierPID ( ) ; fn SupplierTaskID ( ) ; fn Title ( ) ; fn IconPath ( ) ; fn ExtraFile ( ) ; fn InvocationInfo ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IPMExtensionInfoVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IPMExtensionInfoImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IPMExtensionInfoVtbl < > { unsafe extern "system" fn SupplierPID < Impl : IPMExtensionInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psupplierpid : * mut :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SupplierTaskID < Impl : IPMExtensionInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psuppliertid : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Title < Impl : IPMExtensionInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ptitle : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IconPath < Impl : IPMExtensionInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , piconpath : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ExtraFile < Impl : IPMExtensionInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pfilepath : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn InvocationInfo < Impl : IPMExtensionInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pimageurn : * mut super::super::Foundation:: BSTR , pparameters : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , SupplierPID : SupplierPID :: < Impl , IMPL_OFFSET > , SupplierTaskID : SupplierTaskID :: < Impl , IMPL_OFFSET > , Title : Title :: < Impl , IMPL_OFFSET > , IconPath : IconPath :: < Impl , IMPL_OFFSET > , ExtraFile : ExtraFile :: < Impl , IMPL_OFFSET > , InvocationInfo : InvocationInfo :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IPMExtensionInfo < > as :: windows :: core :: Interface > :: IID } } pub trait IPMExtensionInfoEnumeratorImpl < > : Sized where { fn Next ( ) ; } impl < > IPMExtensionInfoEnumeratorVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IPMExtensionInfoEnumeratorImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IPMExtensionInfoEnumeratorVtbl < > { unsafe extern "system" fn Next < Impl : IPMExtensionInfoEnumeratorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppextensioninfo : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Next : Next :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IPMExtensionInfoEnumerator < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IPMExtensionProtocolInfoImpl < > : Sized where { fn Protocol ( ) ; fn InvocationInfo ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IPMExtensionProtocolInfoVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IPMExtensionProtocolInfoImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IPMExtensionProtocolInfoVtbl < > { unsafe extern "system" fn Protocol < Impl : IPMExtensionProtocolInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pprotocol : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn InvocationInfo < Impl : IPMExtensionProtocolInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pimageurn : * mut super::super::Foundation:: BSTR , pparameters : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Protocol : Protocol :: < Impl , IMPL_OFFSET > , InvocationInfo : InvocationInfo :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IPMExtensionProtocolInfo < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IPMExtensionShareTargetInfoImpl < > : Sized where { fn AllFileTypes ( ) ; fn AllDataFormats ( ) ; fn SupportsAllFileTypes ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IPMExtensionShareTargetInfoVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IPMExtensionShareTargetInfoImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IPMExtensionShareTargetInfoVtbl < > { unsafe extern "system" fn AllFileTypes < Impl : IPMExtensionShareTargetInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pctypes : * mut u32 , pptypes : * mut * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AllDataFormats < Impl : IPMExtensionShareTargetInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pcdataformats : * mut u32 , ppdataformats : * mut * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SupportsAllFileTypes < Impl : IPMExtensionShareTargetInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psupportsalltypes : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , AllFileTypes : AllFileTypes :: < Impl , IMPL_OFFSET > , AllDataFormats : AllDataFormats :: < Impl , IMPL_OFFSET > , SupportsAllFileTypes : SupportsAllFileTypes :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IPMExtensionShareTargetInfo < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IPMLiveTileJobInfoImpl < > : Sized where { fn ProductID ( ) ; fn TileID ( ) ; fn NextSchedule ( ) ; fn set_NextSchedule ( ) ; fn StartSchedule ( ) ; fn set_StartSchedule ( ) ; fn IntervalDuration ( ) ; fn set_IntervalDuration ( ) ; fn RunForever ( ) ; fn set_RunForever ( ) ; fn MaxRunCount ( ) ; fn set_MaxRunCount ( ) ; fn RunCount ( ) ; fn set_RunCount ( ) ; fn RecurrenceType ( ) ; fn set_RecurrenceType ( ) ; fn TileXML ( ) ; fn set_TileXML ( ) ; fn UrlXML ( ) ; fn set_UrlXML ( ) ; fn AttemptCount ( ) ; fn set_AttemptCount ( ) ; fn DownloadState ( ) ; fn set_DownloadState ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IPMLiveTileJobInfoVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IPMLiveTileJobInfoImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IPMLiveTileJobInfoVtbl < > { unsafe extern "system" fn ProductID < Impl : IPMLiveTileJobInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pproductid : * mut :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn TileID < Impl : IPMLiveTileJobInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ptileid : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn NextSchedule < Impl : IPMLiveTileJobInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pnextschedule : * mut super::super::Foundation:: FILETIME , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn set_NextSchedule < Impl : IPMLiveTileJobInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ftnextschedule : super::super::Foundation:: FILETIME , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn StartSchedule < Impl : IPMLiveTileJobInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pstartschedule : * mut super::super::Foundation:: FILETIME , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn set_StartSchedule < Impl : IPMLiveTileJobInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ftstartschedule : super::super::Foundation:: FILETIME , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IntervalDuration < Impl : IPMLiveTileJobInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pintervalduration : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn set_IntervalDuration < Impl : IPMLiveTileJobInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ulintervalduration : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RunForever < Impl : IPMLiveTileJobInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , isrunforever : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn set_RunForever < Impl : IPMLiveTileJobInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , frunforever : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn MaxRunCount < Impl : IPMLiveTileJobInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pmaxruncount : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn set_MaxRunCount < Impl : IPMLiveTileJobInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ulmaxruncount : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RunCount < Impl : IPMLiveTileJobInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pruncount : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn set_RunCount < Impl : IPMLiveTileJobInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ulruncount : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RecurrenceType < Impl : IPMLiveTileJobInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , precurrencetype : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn set_RecurrenceType < Impl : IPMLiveTileJobInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ulrecurrencetype : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn TileXML < Impl : IPMLiveTileJobInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ptilexml : * mut * mut u8 , pcbtilexml : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn set_TileXML < Impl : IPMLiveTileJobInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ptilexml : * const u8 , cbtilexml : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn UrlXML < Impl : IPMLiveTileJobInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , purlxml : * mut * mut u8 , pcburlxml : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn set_UrlXML < Impl : IPMLiveTileJobInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , purlxml : * const u8 , cburlxml : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AttemptCount < Impl : IPMLiveTileJobInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pattemptcount : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn set_AttemptCount < Impl : IPMLiveTileJobInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ulattemptcount : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DownloadState < Impl : IPMLiveTileJobInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdownloadstate : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn set_DownloadState < Impl : IPMLiveTileJobInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , uldownloadstate : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , ProductID : ProductID :: < Impl , IMPL_OFFSET > , TileID : TileID :: < Impl , IMPL_OFFSET > , NextSchedule : NextSchedule :: < Impl , IMPL_OFFSET > , set_NextSchedule : set_NextSchedule :: < Impl , IMPL_OFFSET > , StartSchedule : StartSchedule :: < Impl , IMPL_OFFSET > , set_StartSchedule : set_StartSchedule :: < Impl , IMPL_OFFSET > , IntervalDuration : IntervalDuration :: < Impl , IMPL_OFFSET > , set_IntervalDuration : set_IntervalDuration :: < Impl , IMPL_OFFSET > , RunForever : RunForever :: < Impl , IMPL_OFFSET > , set_RunForever : set_RunForever :: < Impl , IMPL_OFFSET > , MaxRunCount : MaxRunCount :: < Impl , IMPL_OFFSET > , set_MaxRunCount : set_MaxRunCount :: < Impl , IMPL_OFFSET > , RunCount : RunCount :: < Impl , IMPL_OFFSET > , set_RunCount : set_RunCount :: < Impl , IMPL_OFFSET > , RecurrenceType : RecurrenceType :: < Impl , IMPL_OFFSET > , set_RecurrenceType : set_RecurrenceType :: < Impl , IMPL_OFFSET > , TileXML : TileXML :: < Impl , IMPL_OFFSET > , set_TileXML : set_TileXML :: < Impl , IMPL_OFFSET > , UrlXML : UrlXML :: < Impl , IMPL_OFFSET > , set_UrlXML : set_UrlXML :: < Impl , IMPL_OFFSET > , AttemptCount : AttemptCount :: < Impl , IMPL_OFFSET > , set_AttemptCount : set_AttemptCount :: < Impl , IMPL_OFFSET > , DownloadState : DownloadState :: < Impl , IMPL_OFFSET > , set_DownloadState : set_DownloadState :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IPMLiveTileJobInfo < > as :: windows :: core :: Interface > :: IID } } pub trait IPMLiveTileJobInfoEnumeratorImpl < > : Sized where { fn Next ( ) ; } impl < > IPMLiveTileJobInfoEnumeratorVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IPMLiveTileJobInfoEnumeratorImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IPMLiveTileJobInfoEnumeratorVtbl < > { unsafe extern "system" fn Next < Impl : IPMLiveTileJobInfoEnumeratorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pplivetilejobinfo : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Next : Next :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IPMLiveTileJobInfoEnumerator < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IPMTaskInfoImpl < > : Sized where { fn ProductID ( ) ; fn TaskID ( ) ; fn NavigationPage ( ) ; fn TaskTransition ( ) ; fn RuntimeType ( ) ; fn ActivationPolicy ( ) ; fn TaskType ( ) ; fn InvocationInfo ( ) ; fn ImagePath ( ) ; fn ImageParams ( ) ; fn InstallRootFolder ( ) ; fn DataRootFolder ( ) ; fn IsSingleInstanceHost ( ) ; fn IsInteropEnabled ( ) ; fn ApplicationState ( ) ; fn InstallType ( ) ; fn Version ( ) ; fn BitsPerPixel ( ) ; fn SuppressesDehydration ( ) ; fn BackgroundExecutionAbilities ( ) ; fn IsOptedForExtendedMem ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IPMTaskInfoVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IPMTaskInfoImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IPMTaskInfoVtbl < > { unsafe extern "system" fn ProductID < Impl : IPMTaskInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pproductid : * mut :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn TaskID < Impl : IPMTaskInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ptaskid : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn NavigationPage < Impl : IPMTaskInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pnavigationpage : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn TaskTransition < Impl : IPMTaskInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ptasktransition : * mut PM_TASK_TRANSITION , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RuntimeType < Impl : IPMTaskInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pruntimetype : * mut PACKMAN_RUNTIME , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ActivationPolicy < Impl : IPMTaskInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pactivationpolicy : * mut PM_ACTIVATION_POLICY , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn TaskType < Impl : IPMTaskInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ptasktype : * mut PM_TASK_TYPE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn InvocationInfo < Impl : IPMTaskInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pimageurn : * mut super::super::Foundation:: BSTR , pparameters : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ImagePath < Impl : IPMTaskInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pimagepath : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ImageParams < Impl : IPMTaskInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pimageparams : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn InstallRootFolder < Impl : IPMTaskInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pinstallrootfolder : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DataRootFolder < Impl : IPMTaskInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdatarootfolder : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsSingleInstanceHost < Impl : IPMTaskInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pissingleinstancehost : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsInteropEnabled < Impl : IPMTaskInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pisinteropenabled : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ApplicationState < Impl : IPMTaskInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , papplicationstate : * mut PM_APPLICATION_STATE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn InstallType < Impl : IPMTaskInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pinstalltype : * mut PM_APPLICATION_INSTALL_TYPE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Version < Impl : IPMTaskInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ptargetmajorversion : * mut u8 , ptargetminorversion : * mut u8 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BitsPerPixel < Impl : IPMTaskInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbitsperpixel : * mut u16 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SuppressesDehydration < Impl : IPMTaskInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , psuppressesdehydration : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn BackgroundExecutionAbilities < Impl : IPMTaskInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pbackgroundexecutionabilities : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsOptedForExtendedMem < Impl : IPMTaskInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pisoptedin : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , ProductID : ProductID :: < Impl , IMPL_OFFSET > , TaskID : TaskID :: < Impl , IMPL_OFFSET > , NavigationPage : NavigationPage :: < Impl , IMPL_OFFSET > , TaskTransition : TaskTransition :: < Impl , IMPL_OFFSET > , RuntimeType : RuntimeType :: < Impl , IMPL_OFFSET > , ActivationPolicy : ActivationPolicy :: < Impl , IMPL_OFFSET > , TaskType : TaskType :: < Impl , IMPL_OFFSET > , InvocationInfo : InvocationInfo :: < Impl , IMPL_OFFSET > , ImagePath : ImagePath :: < Impl , IMPL_OFFSET > , ImageParams : ImageParams :: < Impl , IMPL_OFFSET > , InstallRootFolder : InstallRootFolder :: < Impl , IMPL_OFFSET > , DataRootFolder : DataRootFolder :: < Impl , IMPL_OFFSET > , IsSingleInstanceHost : IsSingleInstanceHost :: < Impl , IMPL_OFFSET > , IsInteropEnabled : IsInteropEnabled :: < Impl , IMPL_OFFSET > , ApplicationState : ApplicationState :: < Impl , IMPL_OFFSET > , InstallType : InstallType :: < Impl , IMPL_OFFSET > , Version : Version :: < Impl , IMPL_OFFSET > , BitsPerPixel : BitsPerPixel :: < Impl , IMPL_OFFSET > , SuppressesDehydration : SuppressesDehydration :: < Impl , IMPL_OFFSET > , BackgroundExecutionAbilities : BackgroundExecutionAbilities :: < Impl , IMPL_OFFSET > , IsOptedForExtendedMem : IsOptedForExtendedMem :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IPMTaskInfo < > as :: windows :: core :: Interface > :: IID } } pub trait IPMTaskInfoEnumeratorImpl < > : Sized where { fn Next ( ) ; } impl < > IPMTaskInfoEnumeratorVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IPMTaskInfoEnumeratorImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IPMTaskInfoEnumeratorVtbl < > { unsafe extern "system" fn Next < Impl : IPMTaskInfoEnumeratorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pptaskinfo : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Next : Next :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IPMTaskInfoEnumerator < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IPMTileInfoImpl < > : Sized where { fn ProductID ( ) ; fn TileID ( ) ; fn TemplateType ( ) ; fn HubPinnedState ( ) ; fn HubPosition ( ) ; fn IsNotified ( ) ; fn IsDefault ( ) ; fn TaskID ( ) ; fn TileType ( ) ; fn IsThemable ( ) ; fn PropertyById ( ) ; fn InvocationInfo ( ) ; fn PropertyEnum ( ) ; fn HubTileSize ( ) ; fn set_HubPosition ( ) ; fn set_NotifiedState ( ) ; fn set_HubPinnedState ( ) ; fn set_HubTileSize ( ) ; fn set_InvocationInfo ( ) ; fn StartTileBlob ( ) ; fn IsRestoring ( ) ; fn IsAutoRestoreDisabled ( ) ; fn set_IsRestoring ( ) ; fn set_IsAutoRestoreDisabled ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IPMTileInfoVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IPMTileInfoImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IPMTileInfoVtbl < > { unsafe extern "system" fn ProductID < Impl : IPMTileInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pproductid : * mut :: windows :: core :: GUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn TileID < Impl : IPMTileInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ptileid : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn TemplateType < Impl : IPMTileInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ptemplatetype : * mut TILE_TEMPLATE_TYPE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HubPinnedState < Impl : IPMTileInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hubtype : PM_TILE_HUBTYPE , ppinned : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HubPosition < Impl : IPMTileInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hubtype : PM_TILE_HUBTYPE , pposition : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsNotified < Impl : IPMTileInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pisnotified : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsDefault < Impl : IPMTileInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pisdefault : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn TaskID < Impl : IPMTileInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ptaskid : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn TileType < Impl : IPMTileInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pstarttiletype : * mut PM_STARTTILE_TYPE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsThemable < Impl : IPMTileInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pisthemable : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PropertyById < Impl : IPMTileInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , propid : u32 , pppropinfo : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn InvocationInfo < Impl : IPMTileInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pimageurn : * mut super::super::Foundation:: BSTR , pparameters : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PropertyEnum < Impl : IPMTileInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pptilepropenum : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HubTileSize < Impl : IPMTileInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hubtype : PM_TILE_HUBTYPE , psize : * mut PM_TILE_SIZE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn set_HubPosition < Impl : IPMTileInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hubtype : PM_TILE_HUBTYPE , position : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn set_NotifiedState < Impl : IPMTileInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , notified : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn set_HubPinnedState < Impl : IPMTileInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hubtype : PM_TILE_HUBTYPE , pinned : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn set_HubTileSize < Impl : IPMTileInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hubtype : PM_TILE_HUBTYPE , size : PM_TILE_SIZE , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn set_InvocationInfo < Impl : IPMTileInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , taskname : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , taskparameters : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn StartTileBlob < Impl : IPMTileInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pblob : * mut PM_STARTTILEBLOB , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsRestoring < Impl : IPMTileInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pisrestoring : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn IsAutoRestoreDisabled < Impl : IPMTileInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pisautorestoredisabled : * mut super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn set_IsRestoring < Impl : IPMTileInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , restoring : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn set_IsAutoRestoreDisabled < Impl : IPMTileInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , autorestoredisabled : super::super::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , ProductID : ProductID :: < Impl , IMPL_OFFSET > , TileID : TileID :: < Impl , IMPL_OFFSET > , TemplateType : TemplateType :: < Impl , IMPL_OFFSET > , HubPinnedState : HubPinnedState :: < Impl , IMPL_OFFSET > , HubPosition : HubPosition :: < Impl , IMPL_OFFSET > , IsNotified : IsNotified :: < Impl , IMPL_OFFSET > , IsDefault : IsDefault :: < Impl , IMPL_OFFSET > , TaskID : TaskID :: < Impl , IMPL_OFFSET > , TileType : TileType :: < Impl , IMPL_OFFSET > , IsThemable : IsThemable :: < Impl , IMPL_OFFSET > , PropertyById : PropertyById :: < Impl , IMPL_OFFSET > , InvocationInfo : InvocationInfo :: < Impl , IMPL_OFFSET > , PropertyEnum : PropertyEnum :: < Impl , IMPL_OFFSET > , HubTileSize : HubTileSize :: < Impl , IMPL_OFFSET > , set_HubPosition : set_HubPosition :: < Impl , IMPL_OFFSET > , set_NotifiedState : set_NotifiedState :: < Impl , IMPL_OFFSET > , set_HubPinnedState : set_HubPinnedState :: < Impl , IMPL_OFFSET > , set_HubTileSize : set_HubTileSize :: < Impl , IMPL_OFFSET > , set_InvocationInfo : set_InvocationInfo :: < Impl , IMPL_OFFSET > , StartTileBlob : StartTileBlob :: < Impl , IMPL_OFFSET > , IsRestoring : IsRestoring :: < Impl , IMPL_OFFSET > , IsAutoRestoreDisabled : IsAutoRestoreDisabled :: < Impl , IMPL_OFFSET > , set_IsRestoring : set_IsRestoring :: < Impl , IMPL_OFFSET > , set_IsAutoRestoreDisabled : set_IsAutoRestoreDisabled :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IPMTileInfo < > as :: windows :: core :: Interface > :: IID } } pub trait IPMTileInfoEnumeratorImpl < > : Sized where { fn Next ( ) ; } impl < > IPMTileInfoEnumeratorVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IPMTileInfoEnumeratorImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IPMTileInfoEnumeratorVtbl < > { unsafe extern "system" fn Next < Impl : IPMTileInfoEnumeratorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pptileinfo : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Next : Next :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IPMTileInfoEnumerator < > as :: windows :: core :: Interface > :: IID } } pub trait IPMTilePropertyEnumeratorImpl < > : Sized where { fn Next ( ) ; } impl < > IPMTilePropertyEnumeratorVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IPMTilePropertyEnumeratorImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IPMTilePropertyEnumeratorVtbl < > { unsafe extern "system" fn Next < Impl : IPMTilePropertyEnumeratorImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pppropinfo : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Next : Next :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IPMTilePropertyEnumerator < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IPMTilePropertyInfoImpl < > : Sized where { fn PropertyID ( ) ; fn PropertyValue ( ) ; fn set_Property ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IPMTilePropertyInfoVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IPMTilePropertyInfoImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IPMTilePropertyInfoVtbl < > { unsafe extern "system" fn PropertyID < Impl : IPMTilePropertyInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppropid : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PropertyValue < Impl : IPMTilePropertyInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ppropvalue : * mut super::super::Foundation:: BSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn set_Property < Impl : IPMTilePropertyInfoImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , propvalue : :: core :: mem :: ManuallyDrop < super::super::Foundation:: BSTR > , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , PropertyID : PropertyID :: < Impl , IMPL_OFFSET > , PropertyValue : PropertyValue :: < Impl , IMPL_OFFSET > , set_Property : set_Property :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IPMTilePropertyInfo < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IValidateImpl < > : Sized where { fn OpenDatabase ( ) ; fn OpenCUB ( ) ; fn CloseDatabase ( ) ; fn CloseCUB ( ) ; fn SetDisplay ( ) ; fn SetStatus ( ) ; fn Validate ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IValidateVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IValidateImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IValidateVtbl < > { unsafe extern "system" fn OpenDatabase < Impl : IValidateImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , szdatabase : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OpenCUB < Impl : IValidateImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , szcubfile : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CloseDatabase < Impl : IValidateImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CloseCUB < Impl : IValidateImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetDisplay < Impl : IValidateImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pdisplayfunction : :: windows :: core :: RawPtr , pcontext : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetStatus < Impl : IValidateImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , pstatusfunction : :: windows :: core :: RawPtr , pcontext : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Validate < Impl : IValidateImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , wzices : super::super::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , OpenDatabase : OpenDatabase :: < Impl , IMPL_OFFSET > , OpenCUB : OpenCUB :: < Impl , IMPL_OFFSET > , CloseDatabase : CloseDatabase :: < Impl , IMPL_OFFSET > , CloseCUB : CloseCUB :: < Impl , IMPL_OFFSET > , SetDisplay : SetDisplay :: < Impl , IMPL_OFFSET > , SetStatus : SetStatus :: < Impl , IMPL_OFFSET > , Validate : Validate :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IValidate < > as :: windows :: core :: Interface > :: IID } } 