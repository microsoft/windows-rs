# [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IABContainerImpl < > : Sized + IMAPIPropImpl + IMAPIContainerImpl where { fn CreateEntry ( ) ; fn CopyEntries ( ) ; fn DeleteEntries ( ) ; fn ResolveNames ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IABContainerVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IABContainerImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IABContainerVtbl < > { unsafe extern "system" fn CreateEntry < Impl : IABContainerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cbentryid : u32 , lpentryid : * const ENTRYID , ulcreateflags : u32 , lppmapipropentry : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CopyEntries < Impl : IABContainerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpentries : * const SBinaryArray , uluiparam : usize , lpprogress : :: windows :: core :: RawPtr , ulflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteEntries < Impl : IABContainerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpentries : * const SBinaryArray , ulflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ResolveNames < Impl : IABContainerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpproptagarray : * const SPropTagArray , ulflags : u32 , lpadrlist : * const ADRLIST , lpflaglist : * mut _flaglist , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IMAPIContainerVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , CreateEntry : CreateEntry :: < Impl , IMPL_OFFSET > , CopyEntries : CopyEntries :: < Impl , IMPL_OFFSET > , DeleteEntries : DeleteEntries :: < Impl , IMPL_OFFSET > , ResolveNames : ResolveNames :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IABContainer < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IAddrBookImpl < > : Sized + IMAPIPropImpl where { fn OpenEntry ( ) ; fn CompareEntryIDs ( ) ; fn Advise ( ) ; fn Unadvise ( ) ; fn CreateOneOff ( ) ; fn NewEntry ( ) ; fn ResolveName ( ) ; fn Address ( ) ; fn Details ( ) ; fn RecipOptions ( ) ; fn QueryDefaultRecipOpt ( ) ; fn GetPAB ( ) ; fn SetPAB ( ) ; fn GetDefaultDir ( ) ; fn SetDefaultDir ( ) ; fn GetSearchPath ( ) ; fn SetSearchPath ( ) ; fn PrepareRecips ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IAddrBookVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAddrBookImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAddrBookVtbl < > { unsafe extern "system" fn OpenEntry < Impl : IAddrBookImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cbentryid : u32 , lpentryid : * mut ENTRYID , lpinterface : * mut :: windows :: core :: GUID , ulflags : u32 , lpulobjtype : * mut u32 , lppunk : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CompareEntryIDs < Impl : IAddrBookImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cbentryid1 : u32 , lpentryid1 : * mut ENTRYID , cbentryid2 : u32 , lpentryid2 : * mut ENTRYID , ulflags : u32 , lpulresult : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Advise < Impl : IAddrBookImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cbentryid : u32 , lpentryid : * mut ENTRYID , uleventmask : u32 , lpadvisesink : :: windows :: core :: RawPtr , lpulconnection : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Unadvise < Impl : IAddrBookImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ulconnection : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CreateOneOff < Impl : IAddrBookImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpszname : * mut i8 , lpszadrtype : * mut i8 , lpszaddress : * mut i8 , ulflags : u32 , lpcbentryid : * mut u32 , lppentryid : * mut * mut ENTRYID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn NewEntry < Impl : IAddrBookImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , uluiparam : u32 , ulflags : u32 , cbeidcontainer : u32 , lpeidcontainer : * mut ENTRYID , cbeidnewentrytpl : u32 , lpeidnewentrytpl : * mut ENTRYID , lpcbeidnewentry : * mut u32 , lppeidnewentry : * mut * mut ENTRYID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ResolveName < Impl : IAddrBookImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , uluiparam : usize , ulflags : u32 , lpsznewentrytitle : * mut i8 , lpadrlist : * mut ADRLIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Address < Impl : IAddrBookImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpuluiparam : * mut u32 , lpadrparms : * mut ADRPARM , lppadrlist : * mut * mut ADRLIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Details < Impl : IAddrBookImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpuluiparam : * mut usize , lpfndismiss : :: windows :: core :: RawPtr , lpvdismisscontext : * mut :: core :: ffi :: c_void , cbentryid : u32 , lpentryid : * mut ENTRYID , lpfbuttoncallback : :: windows :: core :: RawPtr , lpvbuttoncontext : * mut :: core :: ffi :: c_void , lpszbuttontext : * mut i8 , ulflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn RecipOptions < Impl : IAddrBookImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , uluiparam : u32 , ulflags : u32 , lprecip : * mut ADRENTRY , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn QueryDefaultRecipOpt < Impl : IAddrBookImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpszadrtype : * mut i8 , ulflags : u32 , lpcvalues : * mut u32 , lppoptions : * mut * mut SPropValue , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetPAB < Impl : IAddrBookImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpcbentryid : * mut u32 , lppentryid : * mut * mut ENTRYID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetPAB < Impl : IAddrBookImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cbentryid : u32 , lpentryid : * mut ENTRYID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetDefaultDir < Impl : IAddrBookImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpcbentryid : * mut u32 , lppentryid : * mut * mut ENTRYID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetDefaultDir < Impl : IAddrBookImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cbentryid : u32 , lpentryid : * mut ENTRYID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetSearchPath < Impl : IAddrBookImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ulflags : u32 , lppsearchpath : * mut * mut SRowSet , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetSearchPath < Impl : IAddrBookImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ulflags : u32 , lpsearchpath : * mut SRowSet , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn PrepareRecips < Impl : IAddrBookImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ulflags : u32 , lpproptagarray : * mut SPropTagArray , lpreciplist : * mut ADRLIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IMAPIPropVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , OpenEntry : OpenEntry :: < Impl , IMPL_OFFSET > , CompareEntryIDs : CompareEntryIDs :: < Impl , IMPL_OFFSET > , Advise : Advise :: < Impl , IMPL_OFFSET > , Unadvise : Unadvise :: < Impl , IMPL_OFFSET > , CreateOneOff : CreateOneOff :: < Impl , IMPL_OFFSET > , NewEntry : NewEntry :: < Impl , IMPL_OFFSET > , ResolveName : ResolveName :: < Impl , IMPL_OFFSET > , Address : Address :: < Impl , IMPL_OFFSET > , Details : Details :: < Impl , IMPL_OFFSET > , RecipOptions : RecipOptions :: < Impl , IMPL_OFFSET > , QueryDefaultRecipOpt : QueryDefaultRecipOpt :: < Impl , IMPL_OFFSET > , GetPAB : GetPAB :: < Impl , IMPL_OFFSET > , SetPAB : SetPAB :: < Impl , IMPL_OFFSET > , GetDefaultDir : GetDefaultDir :: < Impl , IMPL_OFFSET > , SetDefaultDir : SetDefaultDir :: < Impl , IMPL_OFFSET > , GetSearchPath : GetSearchPath :: < Impl , IMPL_OFFSET > , SetSearchPath : SetSearchPath :: < Impl , IMPL_OFFSET > , PrepareRecips : PrepareRecips :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAddrBook < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IAttachImpl < > : Sized + IMAPIPropImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IAttachVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IAttachImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IAttachVtbl < > { Self { IMAPIPropVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IAttach < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IDistListImpl < > : Sized + IMAPIPropImpl + IMAPIContainerImpl where { fn CreateEntry ( ) ; fn CopyEntries ( ) ; fn DeleteEntries ( ) ; fn ResolveNames ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IDistListVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IDistListImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IDistListVtbl < > { unsafe extern "system" fn CreateEntry < Impl : IDistListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cbentryid : u32 , lpentryid : * const ENTRYID , ulcreateflags : u32 , lppmapipropentry : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CopyEntries < Impl : IDistListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpentries : * const SBinaryArray , uluiparam : usize , lpprogress : :: windows :: core :: RawPtr , ulflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteEntries < Impl : IDistListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpentries : * const SBinaryArray , ulflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ResolveNames < Impl : IDistListImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpproptagarray : * const SPropTagArray , ulflags : u32 , lpadrlist : * const ADRLIST , lpflaglist : * mut _flaglist , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IMAPIContainerVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , CreateEntry : CreateEntry :: < Impl , IMPL_OFFSET > , CopyEntries : CopyEntries :: < Impl , IMPL_OFFSET > , DeleteEntries : DeleteEntries :: < Impl , IMPL_OFFSET > , ResolveNames : ResolveNames :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IDistList < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IMAPIAdviseSinkImpl < > : Sized where { fn OnNotify ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IMAPIAdviseSinkVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IMAPIAdviseSinkImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IMAPIAdviseSinkVtbl < > { unsafe extern "system" fn OnNotify < Impl : IMAPIAdviseSinkImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cnotif : u32 , lpnotifications : * mut NOTIFICATION , ) -> u32 { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , OnNotify : OnNotify :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IMAPIAdviseSink < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IMAPIContainerImpl < > : Sized + IMAPIPropImpl where { fn GetContentsTable ( ) ; fn GetHierarchyTable ( ) ; fn OpenEntry ( ) ; fn SetSearchCriteria ( ) ; fn GetSearchCriteria ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IMAPIContainerVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IMAPIContainerImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IMAPIContainerVtbl < > { unsafe extern "system" fn GetContentsTable < Impl : IMAPIContainerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ulflags : u32 , lpptable : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetHierarchyTable < Impl : IMAPIContainerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ulflags : u32 , lpptable : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OpenEntry < Impl : IMAPIContainerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cbentryid : u32 , lpentryid : * const ENTRYID , lpinterface : * mut :: windows :: core :: GUID , ulflags : u32 , lpulobjtype : * mut u32 , lppunk : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetSearchCriteria < Impl : IMAPIContainerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lprestriction : * const SRestriction , lpcontainerlist : * const SBinaryArray , ulsearchflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetSearchCriteria < Impl : IMAPIContainerImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ulflags : u32 , lpprestriction : * mut * mut SRestriction , lppcontainerlist : * mut * mut SBinaryArray , lpulsearchstate : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IMAPIPropVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , GetContentsTable : GetContentsTable :: < Impl , IMPL_OFFSET > , GetHierarchyTable : GetHierarchyTable :: < Impl , IMPL_OFFSET > , OpenEntry : OpenEntry :: < Impl , IMPL_OFFSET > , SetSearchCriteria : SetSearchCriteria :: < Impl , IMPL_OFFSET > , GetSearchCriteria : GetSearchCriteria :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IMAPIContainer < > as :: windows :: core :: Interface > :: IID } } pub trait IMAPIControlImpl < > : Sized where { fn GetLastError ( ) ; fn Activate ( ) ; fn GetState ( ) ; } impl < > IMAPIControlVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IMAPIControlImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IMAPIControlVtbl < > { unsafe extern "system" fn GetLastError < Impl : IMAPIControlImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hresult : :: windows :: core :: HRESULT , ulflags : u32 , lppmapierror : * mut * mut MAPIERROR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Activate < Impl : IMAPIControlImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ulflags : u32 , uluiparam : usize , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetState < Impl : IMAPIControlImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ulflags : u32 , lpulstate : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetLastError : GetLastError :: < Impl , IMPL_OFFSET > , Activate : Activate :: < Impl , IMPL_OFFSET > , GetState : GetState :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IMAPIControl < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IMAPIFolderImpl < > : Sized + IMAPIPropImpl + IMAPIContainerImpl where { fn CreateMessage ( ) ; fn CopyMessages ( ) ; fn DeleteMessages ( ) ; fn CreateFolder ( ) ; fn CopyFolder ( ) ; fn DeleteFolder ( ) ; fn SetReadFlags ( ) ; fn GetMessageStatus ( ) ; fn SetMessageStatus ( ) ; fn SaveContentsSort ( ) ; fn EmptyFolder ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IMAPIFolderVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IMAPIFolderImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IMAPIFolderVtbl < > { unsafe extern "system" fn CreateMessage < Impl : IMAPIFolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpinterface : * mut :: windows :: core :: GUID , ulflags : u32 , lppmessage : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CopyMessages < Impl : IMAPIFolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpmsglist : * const SBinaryArray , lpinterface : * const :: windows :: core :: GUID , lpdestfolder : * const :: core :: ffi :: c_void , uluiparam : usize , lpprogress : :: windows :: core :: RawPtr , ulflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteMessages < Impl : IMAPIFolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpmsglist : * const SBinaryArray , uluiparam : usize , lpprogress : :: windows :: core :: RawPtr , ulflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CreateFolder < Impl : IMAPIFolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ulfoldertype : u32 , lpszfoldername : * const i8 , lpszfoldercomment : * const i8 , lpinterface : * const :: windows :: core :: GUID , ulflags : u32 , lppfolder : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CopyFolder < Impl : IMAPIFolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cbentryid : u32 , lpentryid : * const ENTRYID , lpinterface : * const :: windows :: core :: GUID , lpdestfolder : * const :: core :: ffi :: c_void , lpsznewfoldername : * const i8 , uluiparam : usize , lpprogress : :: windows :: core :: RawPtr , ulflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteFolder < Impl : IMAPIFolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cbentryid : u32 , lpentryid : * const ENTRYID , uluiparam : usize , lpprogress : :: windows :: core :: RawPtr , ulflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetReadFlags < Impl : IMAPIFolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpmsglist : * const SBinaryArray , uluiparam : usize , lpprogress : :: windows :: core :: RawPtr , ulflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetMessageStatus < Impl : IMAPIFolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cbentryid : u32 , lpentryid : * const ENTRYID , ulflags : u32 , lpulmessagestatus : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetMessageStatus < Impl : IMAPIFolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cbentryid : u32 , lpentryid : * const ENTRYID , ulnewstatus : u32 , ulnewstatusmask : u32 , lpuloldstatus : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SaveContentsSort < Impl : IMAPIFolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpsortcriteria : * const SSortOrderSet , ulflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn EmptyFolder < Impl : IMAPIFolderImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , uluiparam : usize , lpprogress : :: windows :: core :: RawPtr , ulflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IMAPIContainerVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , CreateMessage : CreateMessage :: < Impl , IMPL_OFFSET > , CopyMessages : CopyMessages :: < Impl , IMPL_OFFSET > , DeleteMessages : DeleteMessages :: < Impl , IMPL_OFFSET > , CreateFolder : CreateFolder :: < Impl , IMPL_OFFSET > , CopyFolder : CopyFolder :: < Impl , IMPL_OFFSET > , DeleteFolder : DeleteFolder :: < Impl , IMPL_OFFSET > , SetReadFlags : SetReadFlags :: < Impl , IMPL_OFFSET > , GetMessageStatus : GetMessageStatus :: < Impl , IMPL_OFFSET > , SetMessageStatus : SetMessageStatus :: < Impl , IMPL_OFFSET > , SaveContentsSort : SaveContentsSort :: < Impl , IMPL_OFFSET > , EmptyFolder : EmptyFolder :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IMAPIFolder < > as :: windows :: core :: Interface > :: IID } } pub trait IMAPIProgressImpl < > : Sized where { fn Progress ( ) ; fn GetFlags ( ) ; fn GetMax ( ) ; fn GetMin ( ) ; fn SetLimits ( ) ; } impl < > IMAPIProgressVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IMAPIProgressImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IMAPIProgressVtbl < > { unsafe extern "system" fn Progress < Impl : IMAPIProgressImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ulvalue : u32 , ulcount : u32 , ultotal : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetFlags < Impl : IMAPIProgressImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpulflags : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetMax < Impl : IMAPIProgressImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpulmax : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetMin < Impl : IMAPIProgressImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpulmin : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetLimits < Impl : IMAPIProgressImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpulmin : * mut u32 , lpulmax : * mut u32 , lpulflags : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Progress : Progress :: < Impl , IMPL_OFFSET > , GetFlags : GetFlags :: < Impl , IMPL_OFFSET > , GetMax : GetMax :: < Impl , IMPL_OFFSET > , GetMin : GetMin :: < Impl , IMPL_OFFSET > , SetLimits : SetLimits :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IMAPIProgress < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IMAPIPropImpl < > : Sized where { fn GetLastError ( ) ; fn SaveChanges ( ) ; fn GetProps ( ) ; fn GetPropList ( ) ; fn OpenProperty ( ) ; fn SetProps ( ) ; fn DeleteProps ( ) ; fn CopyTo ( ) ; fn CopyProps ( ) ; fn GetNamesFromIDs ( ) ; fn GetIDsFromNames ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IMAPIPropVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IMAPIPropImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IMAPIPropVtbl < > { unsafe extern "system" fn GetLastError < Impl : IMAPIPropImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hresult : :: windows :: core :: HRESULT , ulflags : u32 , lppmapierror : * mut * mut MAPIERROR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SaveChanges < Impl : IMAPIPropImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ulflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetProps < Impl : IMAPIPropImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpproptagarray : * mut SPropTagArray , ulflags : u32 , lpcvalues : * mut u32 , lppproparray : * mut * mut SPropValue , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetPropList < Impl : IMAPIPropImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ulflags : u32 , lppproptagarray : * mut * mut SPropTagArray , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OpenProperty < Impl : IMAPIPropImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ulproptag : u32 , lpiid : * mut :: windows :: core :: GUID , ulinterfaceoptions : u32 , ulflags : u32 , lppunk : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetProps < Impl : IMAPIPropImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cvalues : u32 , lpproparray : * mut SPropValue , lppproblems : * mut * mut SPropProblemArray , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteProps < Impl : IMAPIPropImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpproptagarray : * mut SPropTagArray , lppproblems : * mut * mut SPropProblemArray , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CopyTo < Impl : IMAPIPropImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ciidexclude : u32 , rgiidexclude : * mut :: windows :: core :: GUID , lpexcludeprops : * mut SPropTagArray , uluiparam : usize , lpprogress : :: windows :: core :: RawPtr , lpinterface : * mut :: windows :: core :: GUID , lpdestobj : * mut :: core :: ffi :: c_void , ulflags : u32 , lppproblems : * mut * mut SPropProblemArray , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CopyProps < Impl : IMAPIPropImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpincludeprops : * mut SPropTagArray , uluiparam : usize , lpprogress : :: windows :: core :: RawPtr , lpinterface : * mut :: windows :: core :: GUID , lpdestobj : * mut :: core :: ffi :: c_void , ulflags : u32 , lppproblems : * mut * mut SPropProblemArray , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetNamesFromIDs < Impl : IMAPIPropImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lppproptags : * mut * mut SPropTagArray , lppropsetguid : * mut :: windows :: core :: GUID , ulflags : u32 , lpcpropnames : * mut u32 , lppppropnames : * mut * mut * mut MAPINAMEID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetIDsFromNames < Impl : IMAPIPropImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cpropnames : u32 , lpppropnames : * mut * mut MAPINAMEID , ulflags : u32 , lppproptags : * mut * mut SPropTagArray , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetLastError : GetLastError :: < Impl , IMPL_OFFSET > , SaveChanges : SaveChanges :: < Impl , IMPL_OFFSET > , GetProps : GetProps :: < Impl , IMPL_OFFSET > , GetPropList : GetPropList :: < Impl , IMPL_OFFSET > , OpenProperty : OpenProperty :: < Impl , IMPL_OFFSET > , SetProps : SetProps :: < Impl , IMPL_OFFSET > , DeleteProps : DeleteProps :: < Impl , IMPL_OFFSET > , CopyTo : CopyTo :: < Impl , IMPL_OFFSET > , CopyProps : CopyProps :: < Impl , IMPL_OFFSET > , GetNamesFromIDs : GetNamesFromIDs :: < Impl , IMPL_OFFSET > , GetIDsFromNames : GetIDsFromNames :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IMAPIProp < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IMAPIStatusImpl < > : Sized + IMAPIPropImpl where { fn ValidateState ( ) ; fn SettingsDialog ( ) ; fn ChangePassword ( ) ; fn FlushQueues ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IMAPIStatusVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IMAPIStatusImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IMAPIStatusVtbl < > { unsafe extern "system" fn ValidateState < Impl : IMAPIStatusImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , uluiparam : usize , ulflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SettingsDialog < Impl : IMAPIStatusImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , uluiparam : usize , ulflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ChangePassword < Impl : IMAPIStatusImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpoldpass : * const i8 , lpnewpass : * const i8 , ulflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn FlushQueues < Impl : IMAPIStatusImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , uluiparam : usize , cbtargettransport : u32 , lptargettransport : * const ENTRYID , ulflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IMAPIPropVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , ValidateState : ValidateState :: < Impl , IMPL_OFFSET > , SettingsDialog : SettingsDialog :: < Impl , IMPL_OFFSET > , ChangePassword : ChangePassword :: < Impl , IMPL_OFFSET > , FlushQueues : FlushQueues :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IMAPIStatus < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IMAPITableImpl < > : Sized where { fn GetLastError ( ) ; fn Advise ( ) ; fn Unadvise ( ) ; fn GetStatus ( ) ; fn SetColumns ( ) ; fn QueryColumns ( ) ; fn GetRowCount ( ) ; fn SeekRow ( ) ; fn SeekRowApprox ( ) ; fn QueryPosition ( ) ; fn FindRow ( ) ; fn Restrict ( ) ; fn CreateBookmark ( ) ; fn FreeBookmark ( ) ; fn SortTable ( ) ; fn QuerySortOrder ( ) ; fn QueryRows ( ) ; fn Abort ( ) ; fn ExpandRow ( ) ; fn CollapseRow ( ) ; fn WaitForCompletion ( ) ; fn GetCollapseState ( ) ; fn SetCollapseState ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IMAPITableVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IMAPITableImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IMAPITableVtbl < > { unsafe extern "system" fn GetLastError < Impl : IMAPITableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hresult : :: windows :: core :: HRESULT , ulflags : u32 , lppmapierror : * mut * mut MAPIERROR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Advise < Impl : IMAPITableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , uleventmask : u32 , lpadvisesink : :: windows :: core :: RawPtr , lpulconnection : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Unadvise < Impl : IMAPITableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ulconnection : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetStatus < Impl : IMAPITableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpultablestatus : * mut u32 , lpultabletype : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetColumns < Impl : IMAPITableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpproptagarray : * mut SPropTagArray , ulflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn QueryColumns < Impl : IMAPITableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ulflags : u32 , lpproptagarray : * mut * mut SPropTagArray , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetRowCount < Impl : IMAPITableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ulflags : u32 , lpulcount : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SeekRow < Impl : IMAPITableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bkorigin : u32 , lrowcount : i32 , lplrowssought : * mut i32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SeekRowApprox < Impl : IMAPITableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ulnumerator : u32 , uldenominator : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn QueryPosition < Impl : IMAPITableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpulrow : * mut u32 , lpulnumerator : * mut u32 , lpuldenominator : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn FindRow < Impl : IMAPITableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lprestriction : * mut SRestriction , bkorigin : u32 , ulflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Restrict < Impl : IMAPITableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lprestriction : * mut SRestriction , ulflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CreateBookmark < Impl : IMAPITableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpbkposition : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn FreeBookmark < Impl : IMAPITableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , bkposition : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SortTable < Impl : IMAPITableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpsortcriteria : * mut SSortOrderSet , ulflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn QuerySortOrder < Impl : IMAPITableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lppsortcriteria : * mut * mut SSortOrderSet , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn QueryRows < Impl : IMAPITableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lrowcount : i32 , ulflags : u32 , lpprows : * mut * mut SRowSet , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Abort < Impl : IMAPITableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ExpandRow < Impl : IMAPITableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cbinstancekey : u32 , pbinstancekey : * mut u8 , ulrowcount : u32 , ulflags : u32 , lpprows : * mut * mut SRowSet , lpulmorerows : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CollapseRow < Impl : IMAPITableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cbinstancekey : u32 , pbinstancekey : * mut u8 , ulflags : u32 , lpulrowcount : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn WaitForCompletion < Impl : IMAPITableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ulflags : u32 , ultimeout : u32 , lpultablestatus : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetCollapseState < Impl : IMAPITableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ulflags : u32 , cbinstancekey : u32 , lpbinstancekey : * mut u8 , lpcbcollapsestate : * mut u32 , lppbcollapsestate : * mut * mut u8 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetCollapseState < Impl : IMAPITableImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ulflags : u32 , cbcollapsestate : u32 , pbcollapsestate : * mut u8 , lpbklocation : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetLastError : GetLastError :: < Impl , IMPL_OFFSET > , Advise : Advise :: < Impl , IMPL_OFFSET > , Unadvise : Unadvise :: < Impl , IMPL_OFFSET > , GetStatus : GetStatus :: < Impl , IMPL_OFFSET > , SetColumns : SetColumns :: < Impl , IMPL_OFFSET > , QueryColumns : QueryColumns :: < Impl , IMPL_OFFSET > , GetRowCount : GetRowCount :: < Impl , IMPL_OFFSET > , SeekRow : SeekRow :: < Impl , IMPL_OFFSET > , SeekRowApprox : SeekRowApprox :: < Impl , IMPL_OFFSET > , QueryPosition : QueryPosition :: < Impl , IMPL_OFFSET > , FindRow : FindRow :: < Impl , IMPL_OFFSET > , Restrict : Restrict :: < Impl , IMPL_OFFSET > , CreateBookmark : CreateBookmark :: < Impl , IMPL_OFFSET > , FreeBookmark : FreeBookmark :: < Impl , IMPL_OFFSET > , SortTable : SortTable :: < Impl , IMPL_OFFSET > , QuerySortOrder : QuerySortOrder :: < Impl , IMPL_OFFSET > , QueryRows : QueryRows :: < Impl , IMPL_OFFSET > , Abort : Abort :: < Impl , IMPL_OFFSET > , ExpandRow : ExpandRow :: < Impl , IMPL_OFFSET > , CollapseRow : CollapseRow :: < Impl , IMPL_OFFSET > , WaitForCompletion : WaitForCompletion :: < Impl , IMPL_OFFSET > , GetCollapseState : GetCollapseState :: < Impl , IMPL_OFFSET > , SetCollapseState : SetCollapseState :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IMAPITable < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IMailUserImpl < > : Sized + IMAPIPropImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IMailUserVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IMailUserImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IMailUserVtbl < > { Self { IMAPIPropVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IMailUser < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IMessageImpl < > : Sized + IMAPIPropImpl where { fn GetAttachmentTable ( ) ; fn OpenAttach ( ) ; fn CreateAttach ( ) ; fn DeleteAttach ( ) ; fn GetRecipientTable ( ) ; fn ModifyRecipients ( ) ; fn SubmitMessage ( ) ; fn SetReadFlag ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IMessageVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IMessageImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IMessageVtbl < > { unsafe extern "system" fn GetAttachmentTable < Impl : IMessageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ulflags : u32 , lpptable : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OpenAttach < Impl : IMessageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ulattachmentnum : u32 , lpinterface : * const :: windows :: core :: GUID , ulflags : u32 , lppattach : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CreateAttach < Impl : IMessageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpinterface : * const :: windows :: core :: GUID , ulflags : u32 , lpulattachmentnum : * mut u32 , lppattach : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteAttach < Impl : IMessageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ulattachmentnum : u32 , uluiparam : usize , lpprogress : :: windows :: core :: RawPtr , ulflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetRecipientTable < Impl : IMessageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ulflags : u32 , lpptable : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn ModifyRecipients < Impl : IMessageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ulflags : u32 , lpmods : * const ADRLIST , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SubmitMessage < Impl : IMessageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ulflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetReadFlag < Impl : IMessageImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ulflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IMAPIPropVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , GetAttachmentTable : GetAttachmentTable :: < Impl , IMPL_OFFSET > , OpenAttach : OpenAttach :: < Impl , IMPL_OFFSET > , CreateAttach : CreateAttach :: < Impl , IMPL_OFFSET > , DeleteAttach : DeleteAttach :: < Impl , IMPL_OFFSET > , GetRecipientTable : GetRecipientTable :: < Impl , IMPL_OFFSET > , ModifyRecipients : ModifyRecipients :: < Impl , IMPL_OFFSET > , SubmitMessage : SubmitMessage :: < Impl , IMPL_OFFSET > , SetReadFlag : SetReadFlag :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IMessage < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IMsgStoreImpl < > : Sized + IMAPIPropImpl where { fn Advise ( ) ; fn Unadvise ( ) ; fn CompareEntryIDs ( ) ; fn OpenEntry ( ) ; fn SetReceiveFolder ( ) ; fn GetReceiveFolder ( ) ; fn GetReceiveFolderTable ( ) ; fn StoreLogoff ( ) ; fn AbortSubmit ( ) ; fn GetOutgoingQueue ( ) ; fn SetLockState ( ) ; fn FinishedMsg ( ) ; fn NotifyNewMail ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IMsgStoreVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IMsgStoreImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IMsgStoreVtbl < > { unsafe extern "system" fn Advise < Impl : IMsgStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cbentryid : u32 , lpentryid : * const ENTRYID , uleventmask : u32 , lpadvisesink : :: windows :: core :: RawPtr , lpulconnection : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Unadvise < Impl : IMsgStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ulconnection : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CompareEntryIDs < Impl : IMsgStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cbentryid1 : u32 , lpentryid1 : * const ENTRYID , cbentryid2 : u32 , lpentryid2 : * const ENTRYID , ulflags : u32 , lpulresult : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OpenEntry < Impl : IMsgStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cbentryid : u32 , lpentryid : * const ENTRYID , lpinterface : * const :: windows :: core :: GUID , ulflags : u32 , lpulobjtype : * mut u32 , ppunk : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetReceiveFolder < Impl : IMsgStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpszmessageclass : * const i8 , ulflags : u32 , cbentryid : u32 , lpentryid : * const ENTRYID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetReceiveFolder < Impl : IMsgStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpszmessageclass : * const i8 , ulflags : u32 , lpcbentryid : * mut u32 , lppentryid : * mut * mut ENTRYID , lppszexplicitclass : * mut * mut i8 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetReceiveFolderTable < Impl : IMsgStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ulflags : u32 , lpptable : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn StoreLogoff < Impl : IMsgStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpulflags : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AbortSubmit < Impl : IMsgStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cbentryid : u32 , lpentryid : * const ENTRYID , ulflags : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetOutgoingQueue < Impl : IMsgStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ulflags : u32 , lpptable : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetLockState < Impl : IMsgStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpmessage : :: windows :: core :: RawPtr , ullockstate : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn FinishedMsg < Impl : IMsgStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ulflags : u32 , cbentryid : u32 , lpentryid : * const ENTRYID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn NotifyNewMail < Impl : IMsgStoreImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpnotification : * const NOTIFICATION , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IMAPIPropVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , Advise : Advise :: < Impl , IMPL_OFFSET > , Unadvise : Unadvise :: < Impl , IMPL_OFFSET > , CompareEntryIDs : CompareEntryIDs :: < Impl , IMPL_OFFSET > , OpenEntry : OpenEntry :: < Impl , IMPL_OFFSET > , SetReceiveFolder : SetReceiveFolder :: < Impl , IMPL_OFFSET > , GetReceiveFolder : GetReceiveFolder :: < Impl , IMPL_OFFSET > , GetReceiveFolderTable : GetReceiveFolderTable :: < Impl , IMPL_OFFSET > , StoreLogoff : StoreLogoff :: < Impl , IMPL_OFFSET > , AbortSubmit : AbortSubmit :: < Impl , IMPL_OFFSET > , GetOutgoingQueue : GetOutgoingQueue :: < Impl , IMPL_OFFSET > , SetLockState : SetLockState :: < Impl , IMPL_OFFSET > , FinishedMsg : FinishedMsg :: < Impl , IMPL_OFFSET > , NotifyNewMail : NotifyNewMail :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IMsgStore < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IProfSectImpl < > : Sized + IMAPIPropImpl where { } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IProfSectVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IProfSectImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IProfSectVtbl < > { Self { IMAPIPropVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IProfSect < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IPropDataImpl < > : Sized + IMAPIPropImpl where { fn HrSetObjAccess ( ) ; fn HrSetPropAccess ( ) ; fn HrGetPropAccess ( ) ; fn HrAddObjProps ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IPropDataVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IPropDataImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IPropDataVtbl < > { unsafe extern "system" fn HrSetObjAccess < Impl : IPropDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ulaccess : u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HrSetPropAccess < Impl : IPropDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpproptagarray : * mut SPropTagArray , rgulaccess : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HrGetPropAccess < Impl : IPropDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lppproptagarray : * mut * mut SPropTagArray , lprgulaccess : * mut * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HrAddObjProps < Impl : IPropDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lppproptagarray : * mut SPropTagArray , lprgulaccess : * mut * mut SPropProblemArray , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { IMAPIPropVtbl :: new :: < Identity , Impl , BASE_OFFSET , IMPL_OFFSET > ( ) , HrSetObjAccess : HrSetObjAccess :: < Impl , IMPL_OFFSET > , HrSetPropAccess : HrSetPropAccess :: < Impl , IMPL_OFFSET > , HrGetPropAccess : HrGetPropAccess :: < Impl , IMPL_OFFSET > , HrAddObjProps : HrAddObjProps :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IPropData < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait IProviderAdminImpl < > : Sized where { fn GetLastError ( ) ; fn GetProviderTable ( ) ; fn CreateProvider ( ) ; fn DeleteProvider ( ) ; fn OpenProfileSection ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > IProviderAdminVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IProviderAdminImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IProviderAdminVtbl < > { unsafe extern "system" fn GetLastError < Impl : IProviderAdminImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hresult : :: windows :: core :: HRESULT , ulflags : u32 , lppmapierror : * mut * mut MAPIERROR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetProviderTable < Impl : IProviderAdminImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ulflags : u32 , lpptable : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn CreateProvider < Impl : IProviderAdminImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpszprovider : * const i8 , cvalues : u32 , lpprops : * const SPropValue , uluiparam : usize , ulflags : u32 , lpuid : * mut MAPIUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn DeleteProvider < Impl : IProviderAdminImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpuid : * const MAPIUID , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn OpenProfileSection < Impl : IProviderAdminImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpuid : * const MAPIUID , lpinterface : * const :: windows :: core :: GUID , ulflags : u32 , lppprofsect : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetLastError : GetLastError :: < Impl , IMPL_OFFSET > , GetProviderTable : GetProviderTable :: < Impl , IMPL_OFFSET > , CreateProvider : CreateProvider :: < Impl , IMPL_OFFSET > , DeleteProvider : DeleteProvider :: < Impl , IMPL_OFFSET > , OpenProfileSection : OpenProfileSection :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IProviderAdmin < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] pub trait ITableDataImpl < > : Sized where { fn HrGetView ( ) ; fn HrModifyRow ( ) ; fn HrDeleteRow ( ) ; fn HrQueryRow ( ) ; fn HrEnumRow ( ) ; fn HrNotify ( ) ; fn HrInsertRow ( ) ; fn HrModifyRows ( ) ; fn HrDeleteRows ( ) ; } # [ cfg ( all ( feature ="Win32_Foundation" , feature ="Win32_System_Com" ) ) ] impl < > ITableDataVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : ITableDataImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> ITableDataVtbl < > { unsafe extern "system" fn HrGetView < Impl : ITableDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpssortorderset : * mut SSortOrderSet , lpfcallerrelease : * mut :: windows :: core :: RawPtr , ulcallerdata : u32 , lppmapitable : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HrModifyRow < Impl : ITableDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , param0 : * mut SRow , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HrDeleteRow < Impl : ITableDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpspropvalue : * mut SPropValue , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HrQueryRow < Impl : ITableDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpspropvalue : * mut SPropValue , lppsrow : * mut * mut SRow , lpulirow : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HrEnumRow < Impl : ITableDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ulrownumber : u32 , lppsrow : * mut * mut SRow , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HrNotify < Impl : ITableDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ulflags : u32 , cvalues : u32 , lpspropvalue : * mut SPropValue , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HrInsertRow < Impl : ITableDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ulirow : u32 , lpsrow : * mut SRow , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HrModifyRows < Impl : ITableDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ulflags : u32 , lpsrowset : * mut SRowSet , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn HrDeleteRows < Impl : ITableDataImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ulflags : u32 , lprowsettodelete : * mut SRowSet , crowsdeleted : * mut u32 , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , HrGetView : HrGetView :: < Impl , IMPL_OFFSET > , HrModifyRow : HrModifyRow :: < Impl , IMPL_OFFSET > , HrDeleteRow : HrDeleteRow :: < Impl , IMPL_OFFSET > , HrQueryRow : HrQueryRow :: < Impl , IMPL_OFFSET > , HrEnumRow : HrEnumRow :: < Impl , IMPL_OFFSET > , HrNotify : HrNotify :: < Impl , IMPL_OFFSET > , HrInsertRow : HrInsertRow :: < Impl , IMPL_OFFSET > , HrModifyRows : HrModifyRows :: < Impl , IMPL_OFFSET > , HrDeleteRows : HrDeleteRows :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < ITableData < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IWABExtInitImpl < > : Sized where { fn Initialize ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IWABExtInitVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWABExtInitImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWABExtInitVtbl < > { unsafe extern "system" fn Initialize < Impl : IWABExtInitImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpwabextdisplay : * mut WABEXTDISPLAY , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , Initialize : Initialize :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWABExtInit < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IWABOBJECT_Impl < > : Sized where { fn QueryInterface ( ) ; fn AddRef ( ) ; fn Release ( ) ; fn GetLastError ( ) ; fn AllocateBuffer ( ) ; fn AllocateMore ( ) ; fn FreeBuffer ( ) ; fn Backup ( ) ; fn Import ( ) ; fn Find ( ) ; fn VCardDisplay ( ) ; fn LDAPUrl ( ) ; fn VCardCreate ( ) ; fn VCardRetrieve ( ) ; fn GetMe ( ) ; fn SetMe ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IWABOBJECT_Vtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWABOBJECT_Impl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWABOBJECT_Vtbl < > { unsafe extern "system" fn QueryInterface < Impl : IWABOBJECT_Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , riid : * const :: windows :: core :: GUID , ppvobj : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AddRef < Impl : IWABOBJECT_Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> u32 { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Release < Impl : IWABOBJECT_Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , ) -> u32 { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetLastError < Impl : IWABOBJECT_Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hresult : :: windows :: core :: HRESULT , ulflags : u32 , lppmapierror : * mut * mut MAPIERROR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AllocateBuffer < Impl : IWABOBJECT_Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cbsize : u32 , lppbuffer : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AllocateMore < Impl : IWABOBJECT_Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cbsize : u32 , lpobject : * const :: core :: ffi :: c_void , lppbuffer : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn FreeBuffer < Impl : IWABOBJECT_Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpbuffer : * const :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Backup < Impl : IWABOBJECT_Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpfilename : super::super::Foundation:: PSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Import < Impl : IWABOBJECT_Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpwip : super::super::Foundation:: PSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Find < Impl : IWABOBJECT_Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpiab : :: windows :: core :: RawPtr , hwnd : super::super::Foundation:: HWND , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn VCardDisplay < Impl : IWABOBJECT_Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpiab : :: windows :: core :: RawPtr , hwnd : super::super::Foundation:: HWND , lpszfilename : super::super::Foundation:: PSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn LDAPUrl < Impl : IWABOBJECT_Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpiab : :: windows :: core :: RawPtr , hwnd : super::super::Foundation:: HWND , ulflags : u32 , lpszurl : super::super::Foundation:: PSTR , lppmailuser : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn VCardCreate < Impl : IWABOBJECT_Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpiab : :: windows :: core :: RawPtr , ulflags : u32 , lpszvcard : super::super::Foundation:: PSTR , lpmailuser : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn VCardRetrieve < Impl : IWABOBJECT_Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpiab : :: windows :: core :: RawPtr , ulflags : u32 , lpszvcard : super::super::Foundation:: PSTR , lppmailuser : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetMe < Impl : IWABOBJECT_Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpiab : :: windows :: core :: RawPtr , ulflags : u32 , lpdwaction : * mut u32 , lpsbeid : * mut SBinary , hwnd : super::super::Foundation:: HWND , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetMe < Impl : IWABOBJECT_Impl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpiab : :: windows :: core :: RawPtr , ulflags : u32 , sbeid : SBinary , hwnd : super::super::Foundation:: HWND , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { QueryInterface : QueryInterface :: < Impl , IMPL_OFFSET > , AddRef : AddRef :: < Impl , IMPL_OFFSET > , Release : Release :: < Impl , IMPL_OFFSET > , GetLastError : GetLastError :: < Impl , IMPL_OFFSET > , AllocateBuffer : AllocateBuffer :: < Impl , IMPL_OFFSET > , AllocateMore : AllocateMore :: < Impl , IMPL_OFFSET > , FreeBuffer : FreeBuffer :: < Impl , IMPL_OFFSET > , Backup : Backup :: < Impl , IMPL_OFFSET > , Import : Import :: < Impl , IMPL_OFFSET > , Find : Find :: < Impl , IMPL_OFFSET > , VCardDisplay : VCardDisplay :: < Impl , IMPL_OFFSET > , LDAPUrl : LDAPUrl :: < Impl , IMPL_OFFSET > , VCardCreate : VCardCreate :: < Impl , IMPL_OFFSET > , VCardRetrieve : VCardRetrieve :: < Impl , IMPL_OFFSET > , GetMe : GetMe :: < Impl , IMPL_OFFSET > , SetMe : SetMe :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWABOBJECT_ < > as :: windows :: core :: Interface > :: IID } } # [ cfg ( feature ="Win32_Foundation" ) ] pub trait IWABObjectImpl < > : Sized where { fn GetLastError ( ) ; fn AllocateBuffer ( ) ; fn AllocateMore ( ) ; fn FreeBuffer ( ) ; fn Backup ( ) ; fn Import ( ) ; fn Find ( ) ; fn VCardDisplay ( ) ; fn LDAPUrl ( ) ; fn VCardCreate ( ) ; fn VCardRetrieve ( ) ; fn GetMe ( ) ; fn SetMe ( ) ; } # [ cfg ( feature ="Win32_Foundation" ) ] impl < > IWABObjectVtbl < > { pub const fn new < Identity : :: windows :: core :: IUnknownImpl , Impl : IWABObjectImpl < > , const BASE_OFFSET : isize , const IMPL_OFFSET : isize > ( ) -> IWABObjectVtbl < > { unsafe extern "system" fn GetLastError < Impl : IWABObjectImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , hresult : :: windows :: core :: HRESULT , ulflags : u32 , lppmapierror : * mut * mut MAPIERROR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AllocateBuffer < Impl : IWABObjectImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cbsize : u32 , lppbuffer : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn AllocateMore < Impl : IWABObjectImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , cbsize : u32 , lpobject : * const :: core :: ffi :: c_void , lppbuffer : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn FreeBuffer < Impl : IWABObjectImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpbuffer : * const :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Backup < Impl : IWABObjectImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpfilename : super::super::Foundation:: PSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Import < Impl : IWABObjectImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpwip : super::super::Foundation:: PSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn Find < Impl : IWABObjectImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpiab : :: windows :: core :: RawPtr , hwnd : super::super::Foundation:: HWND , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn VCardDisplay < Impl : IWABObjectImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpiab : :: windows :: core :: RawPtr , hwnd : super::super::Foundation:: HWND , lpszfilename : super::super::Foundation:: PSTR , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn LDAPUrl < Impl : IWABObjectImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpiab : :: windows :: core :: RawPtr , hwnd : super::super::Foundation:: HWND , ulflags : u32 , lpszurl : super::super::Foundation:: PSTR , lppmailuser : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn VCardCreate < Impl : IWABObjectImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpiab : :: windows :: core :: RawPtr , ulflags : u32 , lpszvcard : super::super::Foundation:: PSTR , lpmailuser : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn VCardRetrieve < Impl : IWABObjectImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpiab : :: windows :: core :: RawPtr , ulflags : u32 , lpszvcard : super::super::Foundation:: PSTR , lppmailuser : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn GetMe < Impl : IWABObjectImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpiab : :: windows :: core :: RawPtr , ulflags : u32 , lpdwaction : * mut u32 , lpsbeid : * mut SBinary , hwnd : super::super::Foundation:: HWND , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } unsafe extern "system" fn SetMe < Impl : IWABObjectImpl < > , const OFFSET : isize > ( this : * mut :: core :: ffi :: c_void , lpiab : :: windows :: core :: RawPtr , ulflags : u32 , sbeid : SBinary , hwnd : super::super::Foundation:: HWND , ) -> :: windows :: core :: HRESULT { let this = ( this as * mut :: windows :: core :: RawPtr ) . offset ( OFFSET ) as * mut Impl ; panic ! ( ) } Self { base : :: windows :: core :: IUnknownVtbl :: new :: < Identity , BASE_OFFSET > ( ) , GetLastError : GetLastError :: < Impl , IMPL_OFFSET > , AllocateBuffer : AllocateBuffer :: < Impl , IMPL_OFFSET > , AllocateMore : AllocateMore :: < Impl , IMPL_OFFSET > , FreeBuffer : FreeBuffer :: < Impl , IMPL_OFFSET > , Backup : Backup :: < Impl , IMPL_OFFSET > , Import : Import :: < Impl , IMPL_OFFSET > , Find : Find :: < Impl , IMPL_OFFSET > , VCardDisplay : VCardDisplay :: < Impl , IMPL_OFFSET > , LDAPUrl : LDAPUrl :: < Impl , IMPL_OFFSET > , VCardCreate : VCardCreate :: < Impl , IMPL_OFFSET > , VCardRetrieve : VCardRetrieve :: < Impl , IMPL_OFFSET > , GetMe : GetMe :: < Impl , IMPL_OFFSET > , SetMe : SetMe :: < Impl , IMPL_OFFSET > , } } pub fn matches ( iid : & windows :: core :: GUID ) -> bool { iid == & < IWABObject < > as :: windows :: core :: Interface > :: IID } } 