pub trait AsyncIDebugApplicationNodeEventsImpl: Sized {
    fn Begin_onAddChild();
    fn Finish_onAddChild();
    fn Begin_onRemoveChild();
    fn Finish_onRemoveChild();
    fn Begin_onDetach();
    fn Finish_onDetach();
    fn Begin_onAttach();
    fn Finish_onAttach();
}
impl AsyncIDebugApplicationNodeEventsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: AsyncIDebugApplicationNodeEventsImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> AsyncIDebugApplicationNodeEventsVtbl {
        unsafe extern "system" fn Begin_onAddChild<Impl: AsyncIDebugApplicationNodeEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prddpchild: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Finish_onAddChild<Impl: AsyncIDebugApplicationNodeEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Begin_onRemoveChild<Impl: AsyncIDebugApplicationNodeEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prddpchild: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Finish_onRemoveChild<Impl: AsyncIDebugApplicationNodeEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Begin_onDetach<Impl: AsyncIDebugApplicationNodeEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Finish_onDetach<Impl: AsyncIDebugApplicationNodeEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Begin_onAttach<Impl: AsyncIDebugApplicationNodeEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prddpparent: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Finish_onAttach<Impl: AsyncIDebugApplicationNodeEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Begin_onAddChild::<Impl, IMPL_OFFSET>, Finish_onAddChild::<Impl, IMPL_OFFSET>, Begin_onRemoveChild::<Impl, IMPL_OFFSET>, Finish_onRemoveChild::<Impl, IMPL_OFFSET>, Begin_onDetach::<Impl, IMPL_OFFSET>, Finish_onDetach::<Impl, IMPL_OFFSET>, Begin_onAttach::<Impl, IMPL_OFFSET>, Finish_onAttach::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<AsyncIDebugApplicationNodeEvents as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait DebugBaseEventCallbacksImpl: Sized + IDebugEventCallbacksImpl {}
#[cfg(feature = "Win32_Foundation")]
impl DebugBaseEventCallbacksVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: DebugBaseEventCallbacksImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> DebugBaseEventCallbacksVtbl {
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetInterestMask::<Impl, IMPL_OFFSET>,
            Breakpoint::<Impl, IMPL_OFFSET>,
            Exception::<Impl, IMPL_OFFSET>,
            CreateThread::<Impl, IMPL_OFFSET>,
            ExitThread::<Impl, IMPL_OFFSET>,
            CreateProcessA::<Impl, IMPL_OFFSET>,
            ExitProcess::<Impl, IMPL_OFFSET>,
            LoadModule::<Impl, IMPL_OFFSET>,
            UnloadModule::<Impl, IMPL_OFFSET>,
            SystemError::<Impl, IMPL_OFFSET>,
            SessionStatus::<Impl, IMPL_OFFSET>,
            ChangeDebuggeeState::<Impl, IMPL_OFFSET>,
            ChangeEngineState::<Impl, IMPL_OFFSET>,
            ChangeSymbolState::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<DebugBaseEventCallbacks as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait DebugBaseEventCallbacksWideImpl: Sized + IDebugEventCallbacksWideImpl {}
#[cfg(feature = "Win32_Foundation")]
impl DebugBaseEventCallbacksWideVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: DebugBaseEventCallbacksWideImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> DebugBaseEventCallbacksWideVtbl {
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetInterestMask::<Impl, IMPL_OFFSET>,
            Breakpoint::<Impl, IMPL_OFFSET>,
            Exception::<Impl, IMPL_OFFSET>,
            CreateThread::<Impl, IMPL_OFFSET>,
            ExitThread::<Impl, IMPL_OFFSET>,
            CreateProcessA::<Impl, IMPL_OFFSET>,
            ExitProcess::<Impl, IMPL_OFFSET>,
            LoadModule::<Impl, IMPL_OFFSET>,
            UnloadModule::<Impl, IMPL_OFFSET>,
            SystemError::<Impl, IMPL_OFFSET>,
            SessionStatus::<Impl, IMPL_OFFSET>,
            ChangeDebuggeeState::<Impl, IMPL_OFFSET>,
            ChangeEngineState::<Impl, IMPL_OFFSET>,
            ChangeSymbolState::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<DebugBaseEventCallbacksWide as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IActiveScriptImpl: Sized {
    fn SetScriptSite();
    fn GetScriptSite();
    fn SetScriptState();
    fn GetScriptState();
    fn Close();
    fn AddNamedItem();
    fn AddTypeLib();
    fn GetScriptDispatch();
    fn GetCurrentScriptThreadID();
    fn GetScriptThreadID();
    fn GetScriptThreadState();
    fn InterruptScriptThread();
    fn Clone();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl IActiveScriptVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptVtbl {
        unsafe extern "system" fn SetScriptSite<Impl: IActiveScriptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pass: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetScriptSite<Impl: IActiveScriptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, riid: *const ::windows::core::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetScriptState<Impl: IActiveScriptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ss: SCRIPTSTATE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetScriptState<Impl: IActiveScriptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pssstate: *mut SCRIPTSTATE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Close<Impl: IActiveScriptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddNamedItem<Impl: IActiveScriptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstrname: super::super::super::Foundation::PWSTR, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddTypeLib<Impl: IActiveScriptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rguidtypelib: *const ::windows::core::GUID, dwmajor: u32, dwminor: u32, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetScriptDispatch<Impl: IActiveScriptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstritemname: super::super::super::Foundation::PWSTR, ppdisp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentScriptThreadID<Impl: IActiveScriptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstidthread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetScriptThreadID<Impl: IActiveScriptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwwin32threadid: u32, pstidthread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetScriptThreadState<Impl: IActiveScriptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, stidthread: u32, pstsstate: *mut SCRIPTTHREADSTATE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn InterruptScriptThread<Impl: IActiveScriptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, stidthread: u32, pexcepinfo: *const super::super::Com::EXCEPINFO, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Clone<Impl: IActiveScriptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppscript: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            SetScriptSite::<Impl, IMPL_OFFSET>,
            GetScriptSite::<Impl, IMPL_OFFSET>,
            SetScriptState::<Impl, IMPL_OFFSET>,
            GetScriptState::<Impl, IMPL_OFFSET>,
            Close::<Impl, IMPL_OFFSET>,
            AddNamedItem::<Impl, IMPL_OFFSET>,
            AddTypeLib::<Impl, IMPL_OFFSET>,
            GetScriptDispatch::<Impl, IMPL_OFFSET>,
            GetCurrentScriptThreadID::<Impl, IMPL_OFFSET>,
            GetScriptThreadID::<Impl, IMPL_OFFSET>,
            GetScriptThreadState::<Impl, IMPL_OFFSET>,
            InterruptScriptThread::<Impl, IMPL_OFFSET>,
            Clone::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScript as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IActiveScriptAuthorImpl: Sized {
    fn AddNamedItem();
    fn AddScriptlet();
    fn ParseScriptText();
    fn GetScriptTextAttributes();
    fn GetScriptletTextAttributes();
    fn GetRoot();
    fn GetLanguageFlags();
    fn GetEventHandler();
    fn RemoveNamedItem();
    fn AddTypeLib();
    fn RemoveTypeLib();
    fn GetChars();
    fn GetInfoFromContext();
    fn IsCommitChar();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl IActiveScriptAuthorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptAuthorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptAuthorVtbl {
        unsafe extern "system" fn AddNamedItem<Impl: IActiveScriptAuthorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszname: super::super::super::Foundation::PWSTR, dwflags: u32, pdisp: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddScriptlet<Impl: IActiveScriptAuthorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszdefaultname: super::super::super::Foundation::PWSTR, pszcode: super::super::super::Foundation::PWSTR, pszitemname: super::super::super::Foundation::PWSTR, pszsubitemname: super::super::super::Foundation::PWSTR, pszeventname: super::super::super::Foundation::PWSTR, pszdelimiter: super::super::super::Foundation::PWSTR, dwcookie: u32, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ParseScriptText<Impl: IActiveScriptAuthorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszcode: super::super::super::Foundation::PWSTR, pszitemname: super::super::super::Foundation::PWSTR, pszdelimiter: super::super::super::Foundation::PWSTR, dwcookie: u32, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetScriptTextAttributes<Impl: IActiveScriptAuthorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszcode: super::super::super::Foundation::PWSTR, cch: u32, pszdelimiter: super::super::super::Foundation::PWSTR, dwflags: u32, pattr: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetScriptletTextAttributes<Impl: IActiveScriptAuthorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszcode: super::super::super::Foundation::PWSTR, cch: u32, pszdelimiter: super::super::super::Foundation::PWSTR, dwflags: u32, pattr: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRoot<Impl: IActiveScriptAuthorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppsp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLanguageFlags<Impl: IActiveScriptAuthorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pgrfasa: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEventHandler<Impl: IActiveScriptAuthorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdisp: ::windows::core::RawPtr, pszitem: super::super::super::Foundation::PWSTR, pszsubitem: super::super::super::Foundation::PWSTR, pszevent: super::super::super::Foundation::PWSTR, ppse: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveNamedItem<Impl: IActiveScriptAuthorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddTypeLib<Impl: IActiveScriptAuthorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rguidtypelib: *const ::windows::core::GUID, dwmajor: u32, dwminor: u32, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveTypeLib<Impl: IActiveScriptAuthorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rguidtypelib: *const ::windows::core::GUID, dwmajor: u32, dwminor: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetChars<Impl: IActiveScriptAuthorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, frequestedlist: u32, pbstrchars: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetInfoFromContext<Impl: IActiveScriptAuthorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszcode: super::super::super::Foundation::PWSTR, cchcode: u32, ichcurrentposition: u32, dwlisttypesrequested: u32, pdwlisttypesprovided: *mut u32, pichlistanchorposition: *mut u32, pichfuncanchorposition: *mut u32, pmemid: *mut i32, picurrentparameter: *mut i32, ppunk: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsCommitChar<Impl: IActiveScriptAuthorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ch: u16, pfcommit: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            AddNamedItem::<Impl, IMPL_OFFSET>,
            AddScriptlet::<Impl, IMPL_OFFSET>,
            ParseScriptText::<Impl, IMPL_OFFSET>,
            GetScriptTextAttributes::<Impl, IMPL_OFFSET>,
            GetScriptletTextAttributes::<Impl, IMPL_OFFSET>,
            GetRoot::<Impl, IMPL_OFFSET>,
            GetLanguageFlags::<Impl, IMPL_OFFSET>,
            GetEventHandler::<Impl, IMPL_OFFSET>,
            RemoveNamedItem::<Impl, IMPL_OFFSET>,
            AddTypeLib::<Impl, IMPL_OFFSET>,
            RemoveTypeLib::<Impl, IMPL_OFFSET>,
            GetChars::<Impl, IMPL_OFFSET>,
            GetInfoFromContext::<Impl, IMPL_OFFSET>,
            IsCommitChar::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptAuthor as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IActiveScriptAuthorProcedureImpl: Sized {
    fn ParseProcedureText();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl IActiveScriptAuthorProcedureVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptAuthorProcedureImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptAuthorProcedureVtbl {
        unsafe extern "system" fn ParseProcedureText<Impl: IActiveScriptAuthorProcedureImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszcode: super::super::super::Foundation::PWSTR, pszformalparams: super::super::super::Foundation::PWSTR, pszprocedurename: super::super::super::Foundation::PWSTR, pszitemname: super::super::super::Foundation::PWSTR, pszdelimiter: super::super::super::Foundation::PWSTR, dwcookie: u32, dwflags: u32, pdispfor: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, ParseProcedureText::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptAuthorProcedure as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IActiveScriptDebug32Impl: Sized {
    fn GetScriptTextAttributes();
    fn GetScriptletTextAttributes();
    fn EnumCodeContextsOfPosition();
}
#[cfg(feature = "Win32_Foundation")]
impl IActiveScriptDebug32Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptDebug32Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptDebug32Vtbl {
        unsafe extern "system" fn GetScriptTextAttributes<Impl: IActiveScriptDebug32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstrcode: super::super::super::Foundation::PWSTR, unumcodechars: u32, pstrdelimiter: super::super::super::Foundation::PWSTR, dwflags: u32, pattr: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetScriptletTextAttributes<Impl: IActiveScriptDebug32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstrcode: super::super::super::Foundation::PWSTR, unumcodechars: u32, pstrdelimiter: super::super::super::Foundation::PWSTR, dwflags: u32, pattr: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnumCodeContextsOfPosition<Impl: IActiveScriptDebug32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwsourcecontext: u32, ucharacteroffset: u32, unumchars: u32, ppescc: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetScriptTextAttributes::<Impl, IMPL_OFFSET>, GetScriptletTextAttributes::<Impl, IMPL_OFFSET>, EnumCodeContextsOfPosition::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptDebug32 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IActiveScriptDebug64Impl: Sized {
    fn GetScriptTextAttributes();
    fn GetScriptletTextAttributes();
    fn EnumCodeContextsOfPosition();
}
#[cfg(feature = "Win32_Foundation")]
impl IActiveScriptDebug64Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptDebug64Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptDebug64Vtbl {
        unsafe extern "system" fn GetScriptTextAttributes<Impl: IActiveScriptDebug64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstrcode: super::super::super::Foundation::PWSTR, unumcodechars: u32, pstrdelimiter: super::super::super::Foundation::PWSTR, dwflags: u32, pattr: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetScriptletTextAttributes<Impl: IActiveScriptDebug64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstrcode: super::super::super::Foundation::PWSTR, unumcodechars: u32, pstrdelimiter: super::super::super::Foundation::PWSTR, dwflags: u32, pattr: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnumCodeContextsOfPosition<Impl: IActiveScriptDebug64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwsourcecontext: u64, ucharacteroffset: u32, unumchars: u32, ppescc: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetScriptTextAttributes::<Impl, IMPL_OFFSET>, GetScriptletTextAttributes::<Impl, IMPL_OFFSET>, EnumCodeContextsOfPosition::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptDebug64 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IActiveScriptEncodeImpl: Sized {
    fn EncodeSection();
    fn DecodeScript();
    fn GetEncodeProgId();
}
#[cfg(feature = "Win32_Foundation")]
impl IActiveScriptEncodeVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptEncodeImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptEncodeVtbl {
        unsafe extern "system" fn EncodeSection<Impl: IActiveScriptEncodeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pchin: super::super::super::Foundation::PWSTR, cchin: u32, pchout: super::super::super::Foundation::PWSTR, cchout: u32, pcchret: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DecodeScript<Impl: IActiveScriptEncodeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pchin: super::super::super::Foundation::PWSTR, cchin: u32, pchout: super::super::super::Foundation::PWSTR, cchout: u32, pcchret: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEncodeProgId<Impl: IActiveScriptEncodeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrout: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, EncodeSection::<Impl, IMPL_OFFSET>, DecodeScript::<Impl, IMPL_OFFSET>, GetEncodeProgId::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptEncode as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IActiveScriptErrorImpl: Sized {
    fn GetExceptionInfo();
    fn GetSourcePosition();
    fn GetSourceLineText();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl IActiveScriptErrorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptErrorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptErrorVtbl {
        unsafe extern "system" fn GetExceptionInfo<Impl: IActiveScriptErrorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pexcepinfo: *mut super::super::Com::EXCEPINFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourcePosition<Impl: IActiveScriptErrorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwsourcecontext: *mut u32, pullinenumber: *mut u32, plcharacterposition: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourceLineText<Impl: IActiveScriptErrorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrsourceline: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetExceptionInfo::<Impl, IMPL_OFFSET>, GetSourcePosition::<Impl, IMPL_OFFSET>, GetSourceLineText::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptError as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IActiveScriptError64Impl: Sized + IActiveScriptErrorImpl {
    fn GetSourcePosition64();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl IActiveScriptError64Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptError64Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptError64Vtbl {
        unsafe extern "system" fn GetSourcePosition64<Impl: IActiveScriptError64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwsourcecontext: *mut u64, pullinenumber: *mut u32, plcharacterposition: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetExceptionInfo::<Impl, IMPL_OFFSET>, GetSourcePosition::<Impl, IMPL_OFFSET>, GetSourceLineText::<Impl, IMPL_OFFSET>, GetSourcePosition64::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptError64 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IActiveScriptErrorDebugImpl: Sized + IActiveScriptErrorImpl {
    fn GetDocumentContext();
    fn GetStackFrame();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl IActiveScriptErrorDebugVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptErrorDebugImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptErrorDebugVtbl {
        unsafe extern "system" fn GetDocumentContext<Impl: IActiveScriptErrorDebugImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppssc: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetStackFrame<Impl: IActiveScriptErrorDebugImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppdsf: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetExceptionInfo::<Impl, IMPL_OFFSET>, GetSourcePosition::<Impl, IMPL_OFFSET>, GetSourceLineText::<Impl, IMPL_OFFSET>, GetDocumentContext::<Impl, IMPL_OFFSET>, GetStackFrame::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptErrorDebug as ::windows::core::Interface>::IID
    }
}
pub trait IActiveScriptErrorDebug110Impl: Sized {
    fn GetExceptionThrownKind();
}
impl IActiveScriptErrorDebug110Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptErrorDebug110Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptErrorDebug110Vtbl {
        unsafe extern "system" fn GetExceptionThrownKind<Impl: IActiveScriptErrorDebug110Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pexceptionkind: *mut SCRIPT_ERROR_DEBUG_EXCEPTION_THROWN_KIND) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetExceptionThrownKind::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptErrorDebug110 as ::windows::core::Interface>::IID
    }
}
pub trait IActiveScriptGarbageCollectorImpl: Sized {
    fn CollectGarbage();
}
impl IActiveScriptGarbageCollectorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptGarbageCollectorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptGarbageCollectorVtbl {
        unsafe extern "system" fn CollectGarbage<Impl: IActiveScriptGarbageCollectorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, scriptgctype: SCRIPTGCTYPE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, CollectGarbage::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptGarbageCollector as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IActiveScriptHostEncodeImpl: Sized {
    fn EncodeScriptHostFile();
}
#[cfg(feature = "Win32_Foundation")]
impl IActiveScriptHostEncodeVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptHostEncodeImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptHostEncodeVtbl {
        unsafe extern "system" fn EncodeScriptHostFile<Impl: IActiveScriptHostEncodeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bstrinfile: ::core::mem::ManuallyDrop<super::super::super::Foundation::BSTR>, pbstroutfile: *mut super::super::super::Foundation::BSTR, cflags: u32, bstrdefaultlang: ::core::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, EncodeScriptHostFile::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptHostEncode as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IActiveScriptParse32Impl: Sized {
    fn InitNew();
    fn AddScriptlet();
    fn ParseScriptText();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IActiveScriptParse32Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptParse32Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptParse32Vtbl {
        unsafe extern "system" fn InitNew<Impl: IActiveScriptParse32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddScriptlet<Impl: IActiveScriptParse32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstrdefaultname: super::super::super::Foundation::PWSTR, pstrcode: super::super::super::Foundation::PWSTR, pstritemname: super::super::super::Foundation::PWSTR, pstrsubitemname: super::super::super::Foundation::PWSTR, pstreventname: super::super::super::Foundation::PWSTR, pstrdelimiter: super::super::super::Foundation::PWSTR, dwsourcecontextcookie: u32, ulstartinglinenumber: u32, dwflags: u32, pbstrname: *mut super::super::super::Foundation::BSTR, pexcepinfo: *mut super::super::Com::EXCEPINFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ParseScriptText<Impl: IActiveScriptParse32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstrcode: super::super::super::Foundation::PWSTR, pstritemname: super::super::super::Foundation::PWSTR, punkcontext: *mut ::core::ffi::c_void, pstrdelimiter: super::super::super::Foundation::PWSTR, dwsourcecontextcookie: u32, ulstartinglinenumber: u32, dwflags: u32, pvarresult: *mut super::super::Com::VARIANT, pexcepinfo: *mut super::super::Com::EXCEPINFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, InitNew::<Impl, IMPL_OFFSET>, AddScriptlet::<Impl, IMPL_OFFSET>, ParseScriptText::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptParse32 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IActiveScriptParse64Impl: Sized {
    fn InitNew();
    fn AddScriptlet();
    fn ParseScriptText();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IActiveScriptParse64Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptParse64Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptParse64Vtbl {
        unsafe extern "system" fn InitNew<Impl: IActiveScriptParse64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddScriptlet<Impl: IActiveScriptParse64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstrdefaultname: super::super::super::Foundation::PWSTR, pstrcode: super::super::super::Foundation::PWSTR, pstritemname: super::super::super::Foundation::PWSTR, pstrsubitemname: super::super::super::Foundation::PWSTR, pstreventname: super::super::super::Foundation::PWSTR, pstrdelimiter: super::super::super::Foundation::PWSTR, dwsourcecontextcookie: u64, ulstartinglinenumber: u32, dwflags: u32, pbstrname: *mut super::super::super::Foundation::BSTR, pexcepinfo: *mut super::super::Com::EXCEPINFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ParseScriptText<Impl: IActiveScriptParse64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstrcode: super::super::super::Foundation::PWSTR, pstritemname: super::super::super::Foundation::PWSTR, punkcontext: *mut ::core::ffi::c_void, pstrdelimiter: super::super::super::Foundation::PWSTR, dwsourcecontextcookie: u64, ulstartinglinenumber: u32, dwflags: u32, pvarresult: *mut super::super::Com::VARIANT, pexcepinfo: *mut super::super::Com::EXCEPINFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, InitNew::<Impl, IMPL_OFFSET>, AddScriptlet::<Impl, IMPL_OFFSET>, ParseScriptText::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptParse64 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IActiveScriptParseProcedure2_32Impl: Sized + IActiveScriptParseProcedure32Impl {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl IActiveScriptParseProcedure2_32Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptParseProcedure2_32Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptParseProcedure2_32Vtbl {
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, ParseProcedureText::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptParseProcedure2_32 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IActiveScriptParseProcedure2_64Impl: Sized + IActiveScriptParseProcedure64Impl {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl IActiveScriptParseProcedure2_64Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptParseProcedure2_64Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptParseProcedure2_64Vtbl {
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, ParseProcedureText::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptParseProcedure2_64 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IActiveScriptParseProcedure32Impl: Sized {
    fn ParseProcedureText();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl IActiveScriptParseProcedure32Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptParseProcedure32Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptParseProcedure32Vtbl {
        unsafe extern "system" fn ParseProcedureText<Impl: IActiveScriptParseProcedure32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstrcode: super::super::super::Foundation::PWSTR, pstrformalparams: super::super::super::Foundation::PWSTR, pstrprocedurename: super::super::super::Foundation::PWSTR, pstritemname: super::super::super::Foundation::PWSTR, punkcontext: *mut ::core::ffi::c_void, pstrdelimiter: super::super::super::Foundation::PWSTR, dwsourcecontextcookie: u32, ulstartinglinenumber: u32, dwflags: u32, ppdisp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, ParseProcedureText::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptParseProcedure32 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IActiveScriptParseProcedure64Impl: Sized {
    fn ParseProcedureText();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl IActiveScriptParseProcedure64Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptParseProcedure64Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptParseProcedure64Vtbl {
        unsafe extern "system" fn ParseProcedureText<Impl: IActiveScriptParseProcedure64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstrcode: super::super::super::Foundation::PWSTR, pstrformalparams: super::super::super::Foundation::PWSTR, pstrprocedurename: super::super::super::Foundation::PWSTR, pstritemname: super::super::super::Foundation::PWSTR, punkcontext: *mut ::core::ffi::c_void, pstrdelimiter: super::super::super::Foundation::PWSTR, dwsourcecontextcookie: u64, ulstartinglinenumber: u32, dwflags: u32, ppdisp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, ParseProcedureText::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptParseProcedure64 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IActiveScriptParseProcedureOld32Impl: Sized {
    fn ParseProcedureText();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl IActiveScriptParseProcedureOld32Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptParseProcedureOld32Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptParseProcedureOld32Vtbl {
        unsafe extern "system" fn ParseProcedureText<Impl: IActiveScriptParseProcedureOld32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstrcode: super::super::super::Foundation::PWSTR, pstrformalparams: super::super::super::Foundation::PWSTR, pstritemname: super::super::super::Foundation::PWSTR, punkcontext: *mut ::core::ffi::c_void, pstrdelimiter: super::super::super::Foundation::PWSTR, dwsourcecontextcookie: u32, ulstartinglinenumber: u32, dwflags: u32, ppdisp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, ParseProcedureText::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptParseProcedureOld32 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IActiveScriptParseProcedureOld64Impl: Sized {
    fn ParseProcedureText();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl IActiveScriptParseProcedureOld64Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptParseProcedureOld64Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptParseProcedureOld64Vtbl {
        unsafe extern "system" fn ParseProcedureText<Impl: IActiveScriptParseProcedureOld64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstrcode: super::super::super::Foundation::PWSTR, pstrformalparams: super::super::super::Foundation::PWSTR, pstritemname: super::super::super::Foundation::PWSTR, punkcontext: *mut ::core::ffi::c_void, pstrdelimiter: super::super::super::Foundation::PWSTR, dwsourcecontextcookie: u64, ulstartinglinenumber: u32, dwflags: u32, ppdisp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, ParseProcedureText::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptParseProcedureOld64 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IActiveScriptProfilerCallbackImpl: Sized {
    fn Initialize();
    fn Shutdown();
    fn ScriptCompiled();
    fn FunctionCompiled();
    fn OnFunctionEnter();
    fn OnFunctionExit();
}
#[cfg(feature = "Win32_Foundation")]
impl IActiveScriptProfilerCallbackVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptProfilerCallbackImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptProfilerCallbackVtbl {
        unsafe extern "system" fn Initialize<Impl: IActiveScriptProfilerCallbackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwcontext: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Shutdown<Impl: IActiveScriptProfilerCallbackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hrreason: ::windows::core::HRESULT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ScriptCompiled<Impl: IActiveScriptProfilerCallbackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, scriptid: i32, r#type: PROFILER_SCRIPT_TYPE, pidebugdocumentcontext: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FunctionCompiled<Impl: IActiveScriptProfilerCallbackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, functionid: i32, scriptid: i32, pwszfunctionname: super::super::super::Foundation::PWSTR, pwszfunctionnamehint: super::super::super::Foundation::PWSTR, pidebugdocumentcontext: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OnFunctionEnter<Impl: IActiveScriptProfilerCallbackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, scriptid: i32, functionid: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OnFunctionExit<Impl: IActiveScriptProfilerCallbackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, scriptid: i32, functionid: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Initialize::<Impl, IMPL_OFFSET>, Shutdown::<Impl, IMPL_OFFSET>, ScriptCompiled::<Impl, IMPL_OFFSET>, FunctionCompiled::<Impl, IMPL_OFFSET>, OnFunctionEnter::<Impl, IMPL_OFFSET>, OnFunctionExit::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptProfilerCallback as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IActiveScriptProfilerCallback2Impl: Sized + IActiveScriptProfilerCallbackImpl {
    fn OnFunctionEnterByName();
    fn OnFunctionExitByName();
}
#[cfg(feature = "Win32_Foundation")]
impl IActiveScriptProfilerCallback2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptProfilerCallback2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptProfilerCallback2Vtbl {
        unsafe extern "system" fn OnFunctionEnterByName<Impl: IActiveScriptProfilerCallback2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwszfunctionname: super::super::super::Foundation::PWSTR, r#type: PROFILER_SCRIPT_TYPE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OnFunctionExitByName<Impl: IActiveScriptProfilerCallback2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwszfunctionname: super::super::super::Foundation::PWSTR, r#type: PROFILER_SCRIPT_TYPE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Initialize::<Impl, IMPL_OFFSET>, Shutdown::<Impl, IMPL_OFFSET>, ScriptCompiled::<Impl, IMPL_OFFSET>, FunctionCompiled::<Impl, IMPL_OFFSET>, OnFunctionEnter::<Impl, IMPL_OFFSET>, OnFunctionExit::<Impl, IMPL_OFFSET>, OnFunctionEnterByName::<Impl, IMPL_OFFSET>, OnFunctionExitByName::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptProfilerCallback2 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IActiveScriptProfilerCallback3Impl: Sized + IActiveScriptProfilerCallback2Impl + IActiveScriptProfilerCallbackImpl {
    fn SetWebWorkerId();
}
#[cfg(feature = "Win32_Foundation")]
impl IActiveScriptProfilerCallback3Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptProfilerCallback3Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptProfilerCallback3Vtbl {
        unsafe extern "system" fn SetWebWorkerId<Impl: IActiveScriptProfilerCallback3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, webworkerid: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            Initialize::<Impl, IMPL_OFFSET>,
            Shutdown::<Impl, IMPL_OFFSET>,
            ScriptCompiled::<Impl, IMPL_OFFSET>,
            FunctionCompiled::<Impl, IMPL_OFFSET>,
            OnFunctionEnter::<Impl, IMPL_OFFSET>,
            OnFunctionExit::<Impl, IMPL_OFFSET>,
            OnFunctionEnterByName::<Impl, IMPL_OFFSET>,
            OnFunctionExitByName::<Impl, IMPL_OFFSET>,
            SetWebWorkerId::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptProfilerCallback3 as ::windows::core::Interface>::IID
    }
}
pub trait IActiveScriptProfilerControlImpl: Sized {
    fn StartProfiling();
    fn SetProfilerEventMask();
    fn StopProfiling();
}
impl IActiveScriptProfilerControlVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptProfilerControlImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptProfilerControlVtbl {
        unsafe extern "system" fn StartProfiling<Impl: IActiveScriptProfilerControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, clsidprofilerobject: *const ::windows::core::GUID, dweventmask: u32, dwcontext: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetProfilerEventMask<Impl: IActiveScriptProfilerControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dweventmask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StopProfiling<Impl: IActiveScriptProfilerControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hrshutdownreason: ::windows::core::HRESULT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, StartProfiling::<Impl, IMPL_OFFSET>, SetProfilerEventMask::<Impl, IMPL_OFFSET>, StopProfiling::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptProfilerControl as ::windows::core::Interface>::IID
    }
}
pub trait IActiveScriptProfilerControl2Impl: Sized + IActiveScriptProfilerControlImpl {
    fn CompleteProfilerStart();
    fn PrepareProfilerStop();
}
impl IActiveScriptProfilerControl2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptProfilerControl2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptProfilerControl2Vtbl {
        unsafe extern "system" fn CompleteProfilerStart<Impl: IActiveScriptProfilerControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PrepareProfilerStop<Impl: IActiveScriptProfilerControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, StartProfiling::<Impl, IMPL_OFFSET>, SetProfilerEventMask::<Impl, IMPL_OFFSET>, StopProfiling::<Impl, IMPL_OFFSET>, CompleteProfilerStart::<Impl, IMPL_OFFSET>, PrepareProfilerStop::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptProfilerControl2 as ::windows::core::Interface>::IID
    }
}
pub trait IActiveScriptProfilerControl3Impl: Sized + IActiveScriptProfilerControl2Impl + IActiveScriptProfilerControlImpl {
    fn EnumHeap();
}
impl IActiveScriptProfilerControl3Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptProfilerControl3Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptProfilerControl3Vtbl {
        unsafe extern "system" fn EnumHeap<Impl: IActiveScriptProfilerControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, StartProfiling::<Impl, IMPL_OFFSET>, SetProfilerEventMask::<Impl, IMPL_OFFSET>, StopProfiling::<Impl, IMPL_OFFSET>, CompleteProfilerStart::<Impl, IMPL_OFFSET>, PrepareProfilerStop::<Impl, IMPL_OFFSET>, EnumHeap::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptProfilerControl3 as ::windows::core::Interface>::IID
    }
}
pub trait IActiveScriptProfilerControl4Impl: Sized + IActiveScriptProfilerControl3Impl + IActiveScriptProfilerControl2Impl + IActiveScriptProfilerControlImpl {
    fn SummarizeHeap();
}
impl IActiveScriptProfilerControl4Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptProfilerControl4Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptProfilerControl4Vtbl {
        unsafe extern "system" fn SummarizeHeap<Impl: IActiveScriptProfilerControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, heapsummary: *mut PROFILER_HEAP_SUMMARY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, StartProfiling::<Impl, IMPL_OFFSET>, SetProfilerEventMask::<Impl, IMPL_OFFSET>, StopProfiling::<Impl, IMPL_OFFSET>, CompleteProfilerStart::<Impl, IMPL_OFFSET>, PrepareProfilerStop::<Impl, IMPL_OFFSET>, EnumHeap::<Impl, IMPL_OFFSET>, SummarizeHeap::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptProfilerControl4 as ::windows::core::Interface>::IID
    }
}
pub trait IActiveScriptProfilerControl5Impl: Sized + IActiveScriptProfilerControl4Impl + IActiveScriptProfilerControl3Impl + IActiveScriptProfilerControl2Impl + IActiveScriptProfilerControlImpl {
    fn EnumHeap2();
}
impl IActiveScriptProfilerControl5Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptProfilerControl5Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptProfilerControl5Vtbl {
        unsafe extern "system" fn EnumHeap2<Impl: IActiveScriptProfilerControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, enumflags: PROFILER_HEAP_ENUM_FLAGS, ppenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, StartProfiling::<Impl, IMPL_OFFSET>, SetProfilerEventMask::<Impl, IMPL_OFFSET>, StopProfiling::<Impl, IMPL_OFFSET>, CompleteProfilerStart::<Impl, IMPL_OFFSET>, PrepareProfilerStop::<Impl, IMPL_OFFSET>, EnumHeap::<Impl, IMPL_OFFSET>, SummarizeHeap::<Impl, IMPL_OFFSET>, EnumHeap2::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptProfilerControl5 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IActiveScriptProfilerHeapEnumImpl: Sized {
    fn Next();
    fn GetOptionalInfo();
    fn FreeObjectAndOptionalInfo();
    fn GetNameIdMap();
}
#[cfg(feature = "Win32_Foundation")]
impl IActiveScriptProfilerHeapEnumVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptProfilerHeapEnumImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptProfilerHeapEnumVtbl {
        unsafe extern "system" fn Next<Impl: IActiveScriptProfilerHeapEnumImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32, heapobjects: *mut *mut PROFILER_HEAP_OBJECT, pceltfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOptionalInfo<Impl: IActiveScriptProfilerHeapEnumImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, heapobject: *const PROFILER_HEAP_OBJECT, celt: u32, optionalinfo: *mut PROFILER_HEAP_OBJECT_OPTIONAL_INFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FreeObjectAndOptionalInfo<Impl: IActiveScriptProfilerHeapEnumImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32, heapobjects: *const *const PROFILER_HEAP_OBJECT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNameIdMap<Impl: IActiveScriptProfilerHeapEnumImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pnamelist: *mut *mut *mut super::super::super::Foundation::PWSTR, pcelt: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Next::<Impl, IMPL_OFFSET>, GetOptionalInfo::<Impl, IMPL_OFFSET>, FreeObjectAndOptionalInfo::<Impl, IMPL_OFFSET>, GetNameIdMap::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptProfilerHeapEnum as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IActiveScriptPropertyImpl: Sized {
    fn GetProperty();
    fn SetProperty();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IActiveScriptPropertyVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptPropertyImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptPropertyVtbl {
        unsafe extern "system" fn GetProperty<Impl: IActiveScriptPropertyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwproperty: u32, pvarindex: *const super::super::Com::VARIANT, pvarvalue: *mut super::super::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetProperty<Impl: IActiveScriptPropertyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwproperty: u32, pvarindex: *const super::super::Com::VARIANT, pvarvalue: *const super::super::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetProperty::<Impl, IMPL_OFFSET>, SetProperty::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptProperty as ::windows::core::Interface>::IID
    }
}
pub trait IActiveScriptSIPInfoImpl: Sized {
    fn GetSIPOID();
}
impl IActiveScriptSIPInfoVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptSIPInfoImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptSIPInfoVtbl {
        unsafe extern "system" fn GetSIPOID<Impl: IActiveScriptSIPInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, poid_sip: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetSIPOID::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptSIPInfo as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IActiveScriptSiteImpl: Sized {
    fn GetLCID();
    fn GetItemInfo();
    fn GetDocVersionString();
    fn OnScriptTerminate();
    fn OnStateChange();
    fn OnScriptError();
    fn OnEnterScript();
    fn OnLeaveScript();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IActiveScriptSiteVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptSiteImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptSiteVtbl {
        unsafe extern "system" fn GetLCID<Impl: IActiveScriptSiteImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, plcid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetItemInfo<Impl: IActiveScriptSiteImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstrname: super::super::super::Foundation::PWSTR, dwreturnmask: u32, ppiunkitem: *mut *mut ::core::ffi::c_void, ppti: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDocVersionString<Impl: IActiveScriptSiteImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrversion: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OnScriptTerminate<Impl: IActiveScriptSiteImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvarresult: *const super::super::Com::VARIANT, pexcepinfo: *const super::super::Com::EXCEPINFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OnStateChange<Impl: IActiveScriptSiteImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ssscriptstate: SCRIPTSTATE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OnScriptError<Impl: IActiveScriptSiteImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pscripterror: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OnEnterScript<Impl: IActiveScriptSiteImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OnLeaveScript<Impl: IActiveScriptSiteImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetLCID::<Impl, IMPL_OFFSET>, GetItemInfo::<Impl, IMPL_OFFSET>, GetDocVersionString::<Impl, IMPL_OFFSET>, OnScriptTerminate::<Impl, IMPL_OFFSET>, OnStateChange::<Impl, IMPL_OFFSET>, OnScriptError::<Impl, IMPL_OFFSET>, OnEnterScript::<Impl, IMPL_OFFSET>, OnLeaveScript::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptSite as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IActiveScriptSiteDebug32Impl: Sized {
    fn GetDocumentContextFromPosition();
    fn GetApplication();
    fn GetRootApplicationNode();
    fn OnScriptErrorDebug();
}
#[cfg(feature = "Win32_Foundation")]
impl IActiveScriptSiteDebug32Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptSiteDebug32Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptSiteDebug32Vtbl {
        unsafe extern "system" fn GetDocumentContextFromPosition<Impl: IActiveScriptSiteDebug32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwsourcecontext: u32, ucharacteroffset: u32, unumchars: u32, ppsc: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetApplication<Impl: IActiveScriptSiteDebug32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppda: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRootApplicationNode<Impl: IActiveScriptSiteDebug32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppdanroot: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OnScriptErrorDebug<Impl: IActiveScriptSiteDebug32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, perrordebug: ::windows::core::RawPtr, pfenterdebugger: *mut super::super::super::Foundation::BOOL, pfcallonscripterrorwhencontinuing: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetDocumentContextFromPosition::<Impl, IMPL_OFFSET>, GetApplication::<Impl, IMPL_OFFSET>, GetRootApplicationNode::<Impl, IMPL_OFFSET>, OnScriptErrorDebug::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptSiteDebug32 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IActiveScriptSiteDebug64Impl: Sized {
    fn GetDocumentContextFromPosition();
    fn GetApplication();
    fn GetRootApplicationNode();
    fn OnScriptErrorDebug();
}
#[cfg(feature = "Win32_Foundation")]
impl IActiveScriptSiteDebug64Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptSiteDebug64Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptSiteDebug64Vtbl {
        unsafe extern "system" fn GetDocumentContextFromPosition<Impl: IActiveScriptSiteDebug64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwsourcecontext: u64, ucharacteroffset: u32, unumchars: u32, ppsc: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetApplication<Impl: IActiveScriptSiteDebug64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppda: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRootApplicationNode<Impl: IActiveScriptSiteDebug64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppdanroot: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OnScriptErrorDebug<Impl: IActiveScriptSiteDebug64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, perrordebug: ::windows::core::RawPtr, pfenterdebugger: *mut super::super::super::Foundation::BOOL, pfcallonscripterrorwhencontinuing: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetDocumentContextFromPosition::<Impl, IMPL_OFFSET>, GetApplication::<Impl, IMPL_OFFSET>, GetRootApplicationNode::<Impl, IMPL_OFFSET>, OnScriptErrorDebug::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptSiteDebug64 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IActiveScriptSiteDebugExImpl: Sized {
    fn OnCanNotJITScriptErrorDebug();
}
#[cfg(feature = "Win32_Foundation")]
impl IActiveScriptSiteDebugExVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptSiteDebugExImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptSiteDebugExVtbl {
        unsafe extern "system" fn OnCanNotJITScriptErrorDebug<Impl: IActiveScriptSiteDebugExImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, perrordebug: ::windows::core::RawPtr, pfcallonscripterrorwhencontinuing: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, OnCanNotJITScriptErrorDebug::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptSiteDebugEx as ::windows::core::Interface>::IID
    }
}
pub trait IActiveScriptSiteInterruptPollImpl: Sized {
    fn QueryContinue();
}
impl IActiveScriptSiteInterruptPollVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptSiteInterruptPollImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptSiteInterruptPollVtbl {
        unsafe extern "system" fn QueryContinue<Impl: IActiveScriptSiteInterruptPollImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, QueryContinue::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptSiteInterruptPoll as ::windows::core::Interface>::IID
    }
}
pub trait IActiveScriptSiteTraceInfoImpl: Sized {
    fn SendScriptTraceInfo();
}
impl IActiveScriptSiteTraceInfoVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptSiteTraceInfoImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptSiteTraceInfoVtbl {
        unsafe extern "system" fn SendScriptTraceInfo<Impl: IActiveScriptSiteTraceInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, stieventtype: SCRIPTTRACEINFO, guidcontextid: ::windows::core::GUID, dwscriptcontextcookie: u32, lscriptstatementstart: i32, lscriptstatementend: i32, dwreserved: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SendScriptTraceInfo::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptSiteTraceInfo as ::windows::core::Interface>::IID
    }
}
pub trait IActiveScriptSiteUIControlImpl: Sized {
    fn GetUIBehavior();
}
impl IActiveScriptSiteUIControlVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptSiteUIControlImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptSiteUIControlVtbl {
        unsafe extern "system" fn GetUIBehavior<Impl: IActiveScriptSiteUIControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, uicitem: SCRIPTUICITEM, puichandling: *mut SCRIPTUICHANDLING) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetUIBehavior::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptSiteUIControl as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IActiveScriptSiteWindowImpl: Sized {
    fn GetWindow();
    fn EnableModeless();
}
#[cfg(feature = "Win32_Foundation")]
impl IActiveScriptSiteWindowVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptSiteWindowImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptSiteWindowVtbl {
        unsafe extern "system" fn GetWindow<Impl: IActiveScriptSiteWindowImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, phwnd: *mut super::super::super::Foundation::HWND) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnableModeless<Impl: IActiveScriptSiteWindowImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fenable: super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetWindow::<Impl, IMPL_OFFSET>, EnableModeless::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptSiteWindow as ::windows::core::Interface>::IID
    }
}
pub trait IActiveScriptStatsImpl: Sized {
    fn GetStat();
    fn GetStatEx();
    fn ResetStats();
}
impl IActiveScriptStatsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptStatsImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptStatsVtbl {
        unsafe extern "system" fn GetStat<Impl: IActiveScriptStatsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, stid: u32, pluhi: *mut u32, plulo: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetStatEx<Impl: IActiveScriptStatsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, guid: *const ::windows::core::GUID, pluhi: *mut u32, plulo: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ResetStats<Impl: IActiveScriptStatsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetStat::<Impl, IMPL_OFFSET>, GetStatEx::<Impl, IMPL_OFFSET>, ResetStats::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptStats as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IActiveScriptStringCompareImpl: Sized {
    fn StrComp();
}
#[cfg(feature = "Win32_Foundation")]
impl IActiveScriptStringCompareVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptStringCompareImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptStringCompareVtbl {
        unsafe extern "system" fn StrComp<Impl: IActiveScriptStringCompareImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bszstr1: ::core::mem::ManuallyDrop<super::super::super::Foundation::BSTR>, bszstr2: ::core::mem::ManuallyDrop<super::super::super::Foundation::BSTR>, iret: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, StrComp::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptStringCompare as ::windows::core::Interface>::IID
    }
}
pub trait IActiveScriptTraceInfoImpl: Sized {
    fn StartScriptTracing();
    fn StopScriptTracing();
}
impl IActiveScriptTraceInfoVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptTraceInfoImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptTraceInfoVtbl {
        unsafe extern "system" fn StartScriptTracing<Impl: IActiveScriptTraceInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psitetraceinfo: ::windows::core::RawPtr, guidcontextid: ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StopScriptTracing<Impl: IActiveScriptTraceInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, StartScriptTracing::<Impl, IMPL_OFFSET>, StopScriptTracing::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptTraceInfo as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IActiveScriptWinRTErrorDebugImpl: Sized + IActiveScriptErrorImpl {
    fn GetRestrictedErrorString();
    fn GetRestrictedErrorReference();
    fn GetCapabilitySid();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl IActiveScriptWinRTErrorDebugVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IActiveScriptWinRTErrorDebugImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IActiveScriptWinRTErrorDebugVtbl {
        unsafe extern "system" fn GetRestrictedErrorString<Impl: IActiveScriptWinRTErrorDebugImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, errorstring: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRestrictedErrorReference<Impl: IActiveScriptWinRTErrorDebugImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, referencestring: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCapabilitySid<Impl: IActiveScriptWinRTErrorDebugImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, capabilitysid: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetExceptionInfo::<Impl, IMPL_OFFSET>, GetSourcePosition::<Impl, IMPL_OFFSET>, GetSourceLineText::<Impl, IMPL_OFFSET>, GetRestrictedErrorString::<Impl, IMPL_OFFSET>, GetRestrictedErrorReference::<Impl, IMPL_OFFSET>, GetCapabilitySid::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IActiveScriptWinRTErrorDebug as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IApplicationDebuggerImpl: Sized {
    fn QueryAlive();
    fn CreateInstanceAtDebugger();
    fn onDebugOutput();
    fn onHandleBreakPoint();
    fn onClose();
    fn onDebuggerEvent();
}
#[cfg(feature = "Win32_Foundation")]
impl IApplicationDebuggerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IApplicationDebuggerImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IApplicationDebuggerVtbl {
        unsafe extern "system" fn QueryAlive<Impl: IApplicationDebuggerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateInstanceAtDebugger<Impl: IApplicationDebuggerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rclsid: *const ::windows::core::GUID, punkouter: *mut ::core::ffi::c_void, dwclscontext: u32, riid: *const ::windows::core::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn onDebugOutput<Impl: IApplicationDebuggerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstr: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn onHandleBreakPoint<Impl: IApplicationDebuggerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prpt: ::windows::core::RawPtr, br: BREAKREASON, perror: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn onClose<Impl: IApplicationDebuggerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn onDebuggerEvent<Impl: IApplicationDebuggerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, riid: *const ::windows::core::GUID, punk: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, QueryAlive::<Impl, IMPL_OFFSET>, CreateInstanceAtDebugger::<Impl, IMPL_OFFSET>, onDebugOutput::<Impl, IMPL_OFFSET>, onHandleBreakPoint::<Impl, IMPL_OFFSET>, onClose::<Impl, IMPL_OFFSET>, onDebuggerEvent::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IApplicationDebugger as ::windows::core::Interface>::IID
    }
}
pub trait IApplicationDebuggerUIImpl: Sized {
    fn BringDocumentToTop();
    fn BringDocumentContextToTop();
}
impl IApplicationDebuggerUIVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IApplicationDebuggerUIImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IApplicationDebuggerUIVtbl {
        unsafe extern "system" fn BringDocumentToTop<Impl: IApplicationDebuggerUIImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pddt: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn BringDocumentContextToTop<Impl: IApplicationDebuggerUIImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pddc: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, BringDocumentToTop::<Impl, IMPL_OFFSET>, BringDocumentContextToTop::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IApplicationDebuggerUI as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IBindEventHandlerImpl: Sized {
    fn BindHandler();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl IBindEventHandlerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IBindEventHandlerImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IBindEventHandlerVtbl {
        unsafe extern "system" fn BindHandler<Impl: IBindEventHandlerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstrevent: super::super::super::Foundation::PWSTR, pdisp: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, BindHandler::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IBindEventHandler as ::windows::core::Interface>::IID
    }
}
pub trait ICodeAddressConceptImpl: Sized {
    fn GetContainingSymbol();
}
impl ICodeAddressConceptVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ICodeAddressConceptImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> ICodeAddressConceptVtbl {
        unsafe extern "system" fn GetContainingSymbol<Impl: ICodeAddressConceptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcontextobject: ::windows::core::RawPtr, ppsymbol: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetContainingSymbol::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICodeAddressConcept as ::windows::core::Interface>::IID
    }
}
pub trait IComparableConceptImpl: Sized {
    fn CompareObjects();
}
impl IComparableConceptVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IComparableConceptImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IComparableConceptVtbl {
        unsafe extern "system" fn CompareObjects<Impl: IComparableConceptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, contextobject: ::windows::core::RawPtr, otherobject: ::windows::core::RawPtr, comparisonresult: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, CompareObjects::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IComparableConcept as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDataModelConceptImpl: Sized {
    fn InitializeObject();
    fn GetName();
}
#[cfg(feature = "Win32_Foundation")]
impl IDataModelConceptVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDataModelConceptImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDataModelConceptVtbl {
        unsafe extern "system" fn InitializeObject<Impl: IDataModelConceptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, modelobject: ::windows::core::RawPtr, matchingtypesignature: ::windows::core::RawPtr, wildcardmatches: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetName<Impl: IDataModelConceptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, modelname: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, InitializeObject::<Impl, IMPL_OFFSET>, GetName::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDataModelConcept as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IDataModelManagerImpl: Sized {
    fn Close();
    fn CreateNoValue();
    fn CreateErrorObject();
    fn CreateTypedObject();
    fn CreateTypedObjectReference();
    fn CreateSyntheticObject();
    fn CreateDataModelObject();
    fn CreateIntrinsicObject();
    fn CreateTypedIntrinsicObject();
    fn GetModelForTypeSignature();
    fn GetModelForType();
    fn RegisterModelForTypeSignature();
    fn UnregisterModelForTypeSignature();
    fn RegisterExtensionForTypeSignature();
    fn UnregisterExtensionForTypeSignature();
    fn CreateMetadataStore();
    fn GetRootNamespace();
    fn RegisterNamedModel();
    fn UnregisterNamedModel();
    fn AcquireNamedModel();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IDataModelManagerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDataModelManagerImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDataModelManagerVtbl {
        unsafe extern "system" fn Close<Impl: IDataModelManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateNoValue<Impl: IDataModelManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, object: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateErrorObject<Impl: IDataModelManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hrerror: ::windows::core::HRESULT, pwszmessage: super::super::super::Foundation::PWSTR, object: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateTypedObject<Impl: IDataModelManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: ::windows::core::RawPtr, objectlocation: Location, objecttype: ::windows::core::RawPtr, object: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateTypedObjectReference<Impl: IDataModelManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: ::windows::core::RawPtr, objectlocation: Location, objecttype: ::windows::core::RawPtr, object: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateSyntheticObject<Impl: IDataModelManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: ::windows::core::RawPtr, object: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateDataModelObject<Impl: IDataModelManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, datamodel: ::windows::core::RawPtr, object: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateIntrinsicObject<Impl: IDataModelManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, objectkind: ModelObjectKind, intrinsicdata: *const super::super::Com::VARIANT, object: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateTypedIntrinsicObject<Impl: IDataModelManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, intrinsicdata: *const super::super::Com::VARIANT, r#type: ::windows::core::RawPtr, object: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModelForTypeSignature<Impl: IDataModelManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, typesignature: ::windows::core::RawPtr, datamodel: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModelForType<Impl: IDataModelManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: ::windows::core::RawPtr, datamodel: *mut ::windows::core::RawPtr, typesignature: *mut ::windows::core::RawPtr, wildcardmatches: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RegisterModelForTypeSignature<Impl: IDataModelManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, typesignature: ::windows::core::RawPtr, datamodel: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn UnregisterModelForTypeSignature<Impl: IDataModelManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, datamodel: ::windows::core::RawPtr, typesignature: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RegisterExtensionForTypeSignature<Impl: IDataModelManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, typesignature: ::windows::core::RawPtr, datamodel: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn UnregisterExtensionForTypeSignature<Impl: IDataModelManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, datamodel: ::windows::core::RawPtr, typesignature: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateMetadataStore<Impl: IDataModelManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, parentstore: ::windows::core::RawPtr, metadatastore: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRootNamespace<Impl: IDataModelManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rootnamespace: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RegisterNamedModel<Impl: IDataModelManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, modelname: super::super::super::Foundation::PWSTR, modeobject: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn UnregisterNamedModel<Impl: IDataModelManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, modelname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AcquireNamedModel<Impl: IDataModelManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, modelname: super::super::super::Foundation::PWSTR, modelobject: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            Close::<Impl, IMPL_OFFSET>,
            CreateNoValue::<Impl, IMPL_OFFSET>,
            CreateErrorObject::<Impl, IMPL_OFFSET>,
            CreateTypedObject::<Impl, IMPL_OFFSET>,
            CreateTypedObjectReference::<Impl, IMPL_OFFSET>,
            CreateSyntheticObject::<Impl, IMPL_OFFSET>,
            CreateDataModelObject::<Impl, IMPL_OFFSET>,
            CreateIntrinsicObject::<Impl, IMPL_OFFSET>,
            CreateTypedIntrinsicObject::<Impl, IMPL_OFFSET>,
            GetModelForTypeSignature::<Impl, IMPL_OFFSET>,
            GetModelForType::<Impl, IMPL_OFFSET>,
            RegisterModelForTypeSignature::<Impl, IMPL_OFFSET>,
            UnregisterModelForTypeSignature::<Impl, IMPL_OFFSET>,
            RegisterExtensionForTypeSignature::<Impl, IMPL_OFFSET>,
            UnregisterExtensionForTypeSignature::<Impl, IMPL_OFFSET>,
            CreateMetadataStore::<Impl, IMPL_OFFSET>,
            GetRootNamespace::<Impl, IMPL_OFFSET>,
            RegisterNamedModel::<Impl, IMPL_OFFSET>,
            UnregisterNamedModel::<Impl, IMPL_OFFSET>,
            AcquireNamedModel::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDataModelManager as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IDataModelManager2Impl: Sized + IDataModelManagerImpl {
    fn AcquireSubNamespace();
    fn CreateTypedIntrinsicObjectEx();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IDataModelManager2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDataModelManager2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDataModelManager2Vtbl {
        unsafe extern "system" fn AcquireSubNamespace<Impl: IDataModelManager2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, modelname: super::super::super::Foundation::PWSTR, subnamespacemodelname: super::super::super::Foundation::PWSTR, accessname: super::super::super::Foundation::PWSTR, metadata: ::windows::core::RawPtr, namespacemodelobject: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateTypedIntrinsicObjectEx<Impl: IDataModelManager2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: ::windows::core::RawPtr, intrinsicdata: *const super::super::Com::VARIANT, r#type: ::windows::core::RawPtr, object: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            Close::<Impl, IMPL_OFFSET>,
            CreateNoValue::<Impl, IMPL_OFFSET>,
            CreateErrorObject::<Impl, IMPL_OFFSET>,
            CreateTypedObject::<Impl, IMPL_OFFSET>,
            CreateTypedObjectReference::<Impl, IMPL_OFFSET>,
            CreateSyntheticObject::<Impl, IMPL_OFFSET>,
            CreateDataModelObject::<Impl, IMPL_OFFSET>,
            CreateIntrinsicObject::<Impl, IMPL_OFFSET>,
            CreateTypedIntrinsicObject::<Impl, IMPL_OFFSET>,
            GetModelForTypeSignature::<Impl, IMPL_OFFSET>,
            GetModelForType::<Impl, IMPL_OFFSET>,
            RegisterModelForTypeSignature::<Impl, IMPL_OFFSET>,
            UnregisterModelForTypeSignature::<Impl, IMPL_OFFSET>,
            RegisterExtensionForTypeSignature::<Impl, IMPL_OFFSET>,
            UnregisterExtensionForTypeSignature::<Impl, IMPL_OFFSET>,
            CreateMetadataStore::<Impl, IMPL_OFFSET>,
            GetRootNamespace::<Impl, IMPL_OFFSET>,
            RegisterNamedModel::<Impl, IMPL_OFFSET>,
            UnregisterNamedModel::<Impl, IMPL_OFFSET>,
            AcquireNamedModel::<Impl, IMPL_OFFSET>,
            AcquireSubNamespace::<Impl, IMPL_OFFSET>,
            CreateTypedIntrinsicObjectEx::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDataModelManager2 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDataModelNameBinderImpl: Sized {
    fn BindValue();
    fn BindReference();
    fn EnumerateValues();
    fn EnumerateReferences();
}
#[cfg(feature = "Win32_Foundation")]
impl IDataModelNameBinderVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDataModelNameBinderImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDataModelNameBinderVtbl {
        unsafe extern "system" fn BindValue<Impl: IDataModelNameBinderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, contextobject: ::windows::core::RawPtr, name: super::super::super::Foundation::PWSTR, value: *mut ::windows::core::RawPtr, metadata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn BindReference<Impl: IDataModelNameBinderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, contextobject: ::windows::core::RawPtr, name: super::super::super::Foundation::PWSTR, reference: *mut ::windows::core::RawPtr, metadata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnumerateValues<Impl: IDataModelNameBinderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, contextobject: ::windows::core::RawPtr, enumerator: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnumerateReferences<Impl: IDataModelNameBinderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, contextobject: ::windows::core::RawPtr, enumerator: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, BindValue::<Impl, IMPL_OFFSET>, BindReference::<Impl, IMPL_OFFSET>, EnumerateValues::<Impl, IMPL_OFFSET>, EnumerateReferences::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDataModelNameBinder as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IDataModelScriptImpl: Sized {
    fn GetName();
    fn Rename();
    fn Populate();
    fn Execute();
    fn Unlink();
    fn IsInvocable();
    fn InvokeMain();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl IDataModelScriptVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDataModelScriptImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDataModelScriptVtbl {
        unsafe extern "system" fn GetName<Impl: IDataModelScriptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, scriptname: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Rename<Impl: IDataModelScriptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, scriptname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Populate<Impl: IDataModelScriptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, contentstream: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Execute<Impl: IDataModelScriptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Unlink<Impl: IDataModelScriptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsInvocable<Impl: IDataModelScriptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, isinvocable: *mut bool) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn InvokeMain<Impl: IDataModelScriptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetName::<Impl, IMPL_OFFSET>, Rename::<Impl, IMPL_OFFSET>, Populate::<Impl, IMPL_OFFSET>, Execute::<Impl, IMPL_OFFSET>, Unlink::<Impl, IMPL_OFFSET>, IsInvocable::<Impl, IMPL_OFFSET>, InvokeMain::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDataModelScript as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDataModelScriptClientImpl: Sized {
    fn ReportError();
}
#[cfg(feature = "Win32_Foundation")]
impl IDataModelScriptClientVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDataModelScriptClientImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDataModelScriptClientVtbl {
        unsafe extern "system" fn ReportError<Impl: IDataModelScriptClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, errclass: ErrorClass, hrfail: ::windows::core::HRESULT, message: super::super::super::Foundation::PWSTR, line: u32, position: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, ReportError::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDataModelScriptClient as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDataModelScriptDebugImpl: Sized {
    fn GetDebugState();
    fn GetCurrentPosition();
    fn GetStack();
    fn SetBreakpoint();
    fn FindBreakpointById();
    fn EnumerateBreakpoints();
    fn GetEventFilter();
    fn SetEventFilter();
    fn StartDebugging();
    fn StopDebugging();
}
#[cfg(feature = "Win32_Foundation")]
impl IDataModelScriptDebugVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDataModelScriptDebugImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDataModelScriptDebugVtbl {
        unsafe extern "system" fn GetDebugState<Impl: IDataModelScriptDebugImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ScriptDebugState {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentPosition<Impl: IDataModelScriptDebugImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, currentposition: *mut ScriptDebugPosition, positionspanend: *mut ScriptDebugPosition, linetext: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetStack<Impl: IDataModelScriptDebugImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, stack: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetBreakpoint<Impl: IDataModelScriptDebugImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lineposition: u32, columnposition: u32, breakpoint: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FindBreakpointById<Impl: IDataModelScriptDebugImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, breakpointid: u64, breakpoint: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnumerateBreakpoints<Impl: IDataModelScriptDebugImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, breakpointenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEventFilter<Impl: IDataModelScriptDebugImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, eventfilter: ScriptDebugEventFilter, isbreakenabled: *mut bool) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetEventFilter<Impl: IDataModelScriptDebugImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, eventfilter: ScriptDebugEventFilter, isbreakenabled: u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StartDebugging<Impl: IDataModelScriptDebugImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, debugclient: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StopDebugging<Impl: IDataModelScriptDebugImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, debugclient: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetDebugState::<Impl, IMPL_OFFSET>,
            GetCurrentPosition::<Impl, IMPL_OFFSET>,
            GetStack::<Impl, IMPL_OFFSET>,
            SetBreakpoint::<Impl, IMPL_OFFSET>,
            FindBreakpointById::<Impl, IMPL_OFFSET>,
            EnumerateBreakpoints::<Impl, IMPL_OFFSET>,
            GetEventFilter::<Impl, IMPL_OFFSET>,
            SetEventFilter::<Impl, IMPL_OFFSET>,
            StartDebugging::<Impl, IMPL_OFFSET>,
            StopDebugging::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDataModelScriptDebug as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDataModelScriptDebug2Impl: Sized + IDataModelScriptDebugImpl {
    fn SetBreakpointAtFunction();
}
#[cfg(feature = "Win32_Foundation")]
impl IDataModelScriptDebug2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDataModelScriptDebug2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDataModelScriptDebug2Vtbl {
        unsafe extern "system" fn SetBreakpointAtFunction<Impl: IDataModelScriptDebug2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, functionname: super::super::super::Foundation::PWSTR, breakpoint: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetDebugState::<Impl, IMPL_OFFSET>,
            GetCurrentPosition::<Impl, IMPL_OFFSET>,
            GetStack::<Impl, IMPL_OFFSET>,
            SetBreakpoint::<Impl, IMPL_OFFSET>,
            FindBreakpointById::<Impl, IMPL_OFFSET>,
            EnumerateBreakpoints::<Impl, IMPL_OFFSET>,
            GetEventFilter::<Impl, IMPL_OFFSET>,
            SetEventFilter::<Impl, IMPL_OFFSET>,
            StartDebugging::<Impl, IMPL_OFFSET>,
            StopDebugging::<Impl, IMPL_OFFSET>,
            SetBreakpointAtFunction::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDataModelScriptDebug2 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDataModelScriptDebugBreakpointImpl: Sized {
    fn GetId();
    fn IsEnabled();
    fn Enable();
    fn Disable();
    fn Remove();
    fn GetPosition();
}
#[cfg(feature = "Win32_Foundation")]
impl IDataModelScriptDebugBreakpointVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDataModelScriptDebugBreakpointImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDataModelScriptDebugBreakpointVtbl {
        unsafe extern "system" fn GetId<Impl: IDataModelScriptDebugBreakpointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> u64 {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsEnabled<Impl: IDataModelScriptDebugBreakpointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> bool {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Enable<Impl: IDataModelScriptDebugBreakpointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Disable<Impl: IDataModelScriptDebugBreakpointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Remove<Impl: IDataModelScriptDebugBreakpointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPosition<Impl: IDataModelScriptDebugBreakpointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, position: *mut ScriptDebugPosition, positionspanend: *mut ScriptDebugPosition, linetext: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetId::<Impl, IMPL_OFFSET>, IsEnabled::<Impl, IMPL_OFFSET>, Enable::<Impl, IMPL_OFFSET>, Disable::<Impl, IMPL_OFFSET>, Remove::<Impl, IMPL_OFFSET>, GetPosition::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDataModelScriptDebugBreakpoint as ::windows::core::Interface>::IID
    }
}
pub trait IDataModelScriptDebugBreakpointEnumeratorImpl: Sized {
    fn Reset();
    fn GetNext();
}
impl IDataModelScriptDebugBreakpointEnumeratorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDataModelScriptDebugBreakpointEnumeratorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDataModelScriptDebugBreakpointEnumeratorVtbl {
        unsafe extern "system" fn Reset<Impl: IDataModelScriptDebugBreakpointEnumeratorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNext<Impl: IDataModelScriptDebugBreakpointEnumeratorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, breakpoint: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Reset::<Impl, IMPL_OFFSET>, GetNext::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDataModelScriptDebugBreakpointEnumerator as ::windows::core::Interface>::IID
    }
}
pub trait IDataModelScriptDebugClientImpl: Sized {
    fn NotifyDebugEvent();
}
impl IDataModelScriptDebugClientVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDataModelScriptDebugClientImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDataModelScriptDebugClientVtbl {
        unsafe extern "system" fn NotifyDebugEvent<Impl: IDataModelScriptDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, peventinfo: *const ScriptDebugEventInformation, pscript: ::windows::core::RawPtr, peventdataobject: ::windows::core::RawPtr, resumeeventkind: *mut ScriptExecutionKind) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, NotifyDebugEvent::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDataModelScriptDebugClient as ::windows::core::Interface>::IID
    }
}
pub trait IDataModelScriptDebugStackImpl: Sized {
    fn GetFrameCount();
    fn GetStackFrame();
}
impl IDataModelScriptDebugStackVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDataModelScriptDebugStackImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDataModelScriptDebugStackVtbl {
        unsafe extern "system" fn GetFrameCount<Impl: IDataModelScriptDebugStackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> u64 {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetStackFrame<Impl: IDataModelScriptDebugStackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, framenumber: u64, stackframe: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetFrameCount::<Impl, IMPL_OFFSET>, GetStackFrame::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDataModelScriptDebugStack as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDataModelScriptDebugStackFrameImpl: Sized {
    fn GetName();
    fn GetPosition();
    fn IsTransitionPoint();
    fn GetTransition();
    fn Evaluate();
    fn EnumerateLocals();
    fn EnumerateArguments();
}
#[cfg(feature = "Win32_Foundation")]
impl IDataModelScriptDebugStackFrameVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDataModelScriptDebugStackFrameImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDataModelScriptDebugStackFrameVtbl {
        unsafe extern "system" fn GetName<Impl: IDataModelScriptDebugStackFrameImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPosition<Impl: IDataModelScriptDebugStackFrameImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, position: *mut ScriptDebugPosition, positionspanend: *mut ScriptDebugPosition, linetext: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsTransitionPoint<Impl: IDataModelScriptDebugStackFrameImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, istransitionpoint: *mut bool) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTransition<Impl: IDataModelScriptDebugStackFrameImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, transitionscript: *mut ::windows::core::RawPtr, istransitioncontiguous: *mut bool) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Evaluate<Impl: IDataModelScriptDebugStackFrameImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwszexpression: super::super::super::Foundation::PWSTR, ppresult: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnumerateLocals<Impl: IDataModelScriptDebugStackFrameImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, variablesenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnumerateArguments<Impl: IDataModelScriptDebugStackFrameImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, variablesenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetName::<Impl, IMPL_OFFSET>, GetPosition::<Impl, IMPL_OFFSET>, IsTransitionPoint::<Impl, IMPL_OFFSET>, GetTransition::<Impl, IMPL_OFFSET>, Evaluate::<Impl, IMPL_OFFSET>, EnumerateLocals::<Impl, IMPL_OFFSET>, EnumerateArguments::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDataModelScriptDebugStackFrame as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDataModelScriptDebugVariableSetEnumeratorImpl: Sized {
    fn Reset();
    fn GetNext();
}
#[cfg(feature = "Win32_Foundation")]
impl IDataModelScriptDebugVariableSetEnumeratorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDataModelScriptDebugVariableSetEnumeratorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDataModelScriptDebugVariableSetEnumeratorVtbl {
        unsafe extern "system" fn Reset<Impl: IDataModelScriptDebugVariableSetEnumeratorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNext<Impl: IDataModelScriptDebugVariableSetEnumeratorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, variablename: *mut super::super::super::Foundation::BSTR, variablevalue: *mut ::windows::core::RawPtr, variablemetadata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Reset::<Impl, IMPL_OFFSET>, GetNext::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDataModelScriptDebugVariableSetEnumerator as ::windows::core::Interface>::IID
    }
}
pub trait IDataModelScriptHostContextImpl: Sized {
    fn NotifyScriptChange();
    fn GetNamespaceObject();
}
impl IDataModelScriptHostContextVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDataModelScriptHostContextImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDataModelScriptHostContextVtbl {
        unsafe extern "system" fn NotifyScriptChange<Impl: IDataModelScriptHostContextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, script: ::windows::core::RawPtr, changekind: ScriptChangeKind) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNamespaceObject<Impl: IDataModelScriptHostContextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, namespaceobject: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, NotifyScriptChange::<Impl, IMPL_OFFSET>, GetNamespaceObject::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDataModelScriptHostContext as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDataModelScriptManagerImpl: Sized {
    fn GetDefaultNameBinder();
    fn RegisterScriptProvider();
    fn UnregisterScriptProvider();
    fn FindProviderForScriptType();
    fn FindProviderForScriptExtension();
    fn EnumerateScriptProviders();
}
#[cfg(feature = "Win32_Foundation")]
impl IDataModelScriptManagerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDataModelScriptManagerImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDataModelScriptManagerVtbl {
        unsafe extern "system" fn GetDefaultNameBinder<Impl: IDataModelScriptManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppnamebinder: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RegisterScriptProvider<Impl: IDataModelScriptManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, provider: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn UnregisterScriptProvider<Impl: IDataModelScriptManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, provider: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FindProviderForScriptType<Impl: IDataModelScriptManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, scripttype: super::super::super::Foundation::PWSTR, provider: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FindProviderForScriptExtension<Impl: IDataModelScriptManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, scriptextension: super::super::super::Foundation::PWSTR, provider: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnumerateScriptProviders<Impl: IDataModelScriptManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, enumerator: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetDefaultNameBinder::<Impl, IMPL_OFFSET>, RegisterScriptProvider::<Impl, IMPL_OFFSET>, UnregisterScriptProvider::<Impl, IMPL_OFFSET>, FindProviderForScriptType::<Impl, IMPL_OFFSET>, FindProviderForScriptExtension::<Impl, IMPL_OFFSET>, EnumerateScriptProviders::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDataModelScriptManager as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDataModelScriptProviderImpl: Sized {
    fn GetName();
    fn GetExtension();
    fn CreateScript();
    fn GetDefaultTemplateContent();
    fn EnumerateTemplates();
}
#[cfg(feature = "Win32_Foundation")]
impl IDataModelScriptProviderVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDataModelScriptProviderImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDataModelScriptProviderVtbl {
        unsafe extern "system" fn GetName<Impl: IDataModelScriptProviderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExtension<Impl: IDataModelScriptProviderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, extension: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateScript<Impl: IDataModelScriptProviderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, script: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDefaultTemplateContent<Impl: IDataModelScriptProviderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, templatecontent: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnumerateTemplates<Impl: IDataModelScriptProviderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, enumerator: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetName::<Impl, IMPL_OFFSET>, GetExtension::<Impl, IMPL_OFFSET>, CreateScript::<Impl, IMPL_OFFSET>, GetDefaultTemplateContent::<Impl, IMPL_OFFSET>, EnumerateTemplates::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDataModelScriptProvider as ::windows::core::Interface>::IID
    }
}
pub trait IDataModelScriptProviderEnumeratorImpl: Sized {
    fn Reset();
    fn GetNext();
}
impl IDataModelScriptProviderEnumeratorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDataModelScriptProviderEnumeratorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDataModelScriptProviderEnumeratorVtbl {
        unsafe extern "system" fn Reset<Impl: IDataModelScriptProviderEnumeratorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNext<Impl: IDataModelScriptProviderEnumeratorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, provider: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Reset::<Impl, IMPL_OFFSET>, GetNext::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDataModelScriptProviderEnumerator as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IDataModelScriptTemplateImpl: Sized {
    fn GetName();
    fn GetDescription();
    fn GetContent();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl IDataModelScriptTemplateVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDataModelScriptTemplateImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDataModelScriptTemplateVtbl {
        unsafe extern "system" fn GetName<Impl: IDataModelScriptTemplateImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, templatename: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDescription<Impl: IDataModelScriptTemplateImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, templatedescription: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetContent<Impl: IDataModelScriptTemplateImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, contentstream: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetName::<Impl, IMPL_OFFSET>, GetDescription::<Impl, IMPL_OFFSET>, GetContent::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDataModelScriptTemplate as ::windows::core::Interface>::IID
    }
}
pub trait IDataModelScriptTemplateEnumeratorImpl: Sized {
    fn Reset();
    fn GetNext();
}
impl IDataModelScriptTemplateEnumeratorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDataModelScriptTemplateEnumeratorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDataModelScriptTemplateEnumeratorVtbl {
        unsafe extern "system" fn Reset<Impl: IDataModelScriptTemplateEnumeratorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNext<Impl: IDataModelScriptTemplateEnumeratorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, templatecontent: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Reset::<Impl, IMPL_OFFSET>, GetNext::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDataModelScriptTemplateEnumerator as ::windows::core::Interface>::IID
    }
}
pub trait IDebugAdvancedImpl: Sized {
    fn GetThreadContext();
    fn SetThreadContext();
}
impl IDebugAdvancedVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugAdvancedImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugAdvancedVtbl {
        unsafe extern "system" fn GetThreadContext<Impl: IDebugAdvancedImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: *mut ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetThreadContext<Impl: IDebugAdvancedImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetThreadContext::<Impl, IMPL_OFFSET>, SetThreadContext::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugAdvanced as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugAdvanced2Impl: Sized {
    fn GetThreadContext();
    fn SetThreadContext();
    fn Request();
    fn GetSourceFileInformation();
    fn FindSourceFileAndToken();
    fn GetSymbolInformation();
    fn GetSystemObjectInformation();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugAdvanced2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugAdvanced2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugAdvanced2Vtbl {
        unsafe extern "system" fn GetThreadContext<Impl: IDebugAdvanced2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: *mut ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetThreadContext<Impl: IDebugAdvanced2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Request<Impl: IDebugAdvanced2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, request: u32, inbuffer: *const ::core::ffi::c_void, inbuffersize: u32, outbuffer: *mut ::core::ffi::c_void, outbuffersize: u32, outsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourceFileInformation<Impl: IDebugAdvanced2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, sourcefile: super::super::super::Foundation::PSTR, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FindSourceFileAndToken<Impl: IDebugAdvanced2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, startelement: u32, modaddr: u64, file: super::super::super::Foundation::PSTR, flags: u32, filetoken: *const ::core::ffi::c_void, filetokensize: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolInformation<Impl: IDebugAdvanced2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32, stringbuffer: super::super::super::Foundation::PSTR, stringbuffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSystemObjectInformation<Impl: IDebugAdvanced2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetThreadContext::<Impl, IMPL_OFFSET>, SetThreadContext::<Impl, IMPL_OFFSET>, Request::<Impl, IMPL_OFFSET>, GetSourceFileInformation::<Impl, IMPL_OFFSET>, FindSourceFileAndToken::<Impl, IMPL_OFFSET>, GetSymbolInformation::<Impl, IMPL_OFFSET>, GetSystemObjectInformation::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugAdvanced2 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugAdvanced3Impl: Sized {
    fn GetThreadContext();
    fn SetThreadContext();
    fn Request();
    fn GetSourceFileInformation();
    fn FindSourceFileAndToken();
    fn GetSymbolInformation();
    fn GetSystemObjectInformation();
    fn GetSourceFileInformationWide();
    fn FindSourceFileAndTokenWide();
    fn GetSymbolInformationWide();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugAdvanced3Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugAdvanced3Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugAdvanced3Vtbl {
        unsafe extern "system" fn GetThreadContext<Impl: IDebugAdvanced3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: *mut ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetThreadContext<Impl: IDebugAdvanced3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Request<Impl: IDebugAdvanced3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, request: u32, inbuffer: *const ::core::ffi::c_void, inbuffersize: u32, outbuffer: *mut ::core::ffi::c_void, outbuffersize: u32, outsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourceFileInformation<Impl: IDebugAdvanced3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, sourcefile: super::super::super::Foundation::PSTR, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FindSourceFileAndToken<Impl: IDebugAdvanced3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, startelement: u32, modaddr: u64, file: super::super::super::Foundation::PSTR, flags: u32, filetoken: *const ::core::ffi::c_void, filetokensize: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolInformation<Impl: IDebugAdvanced3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32, stringbuffer: super::super::super::Foundation::PSTR, stringbuffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSystemObjectInformation<Impl: IDebugAdvanced3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourceFileInformationWide<Impl: IDebugAdvanced3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, sourcefile: super::super::super::Foundation::PWSTR, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FindSourceFileAndTokenWide<Impl: IDebugAdvanced3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, startelement: u32, modaddr: u64, file: super::super::super::Foundation::PWSTR, flags: u32, filetoken: *const ::core::ffi::c_void, filetokensize: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolInformationWide<Impl: IDebugAdvanced3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32, stringbuffer: super::super::super::Foundation::PWSTR, stringbuffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetThreadContext::<Impl, IMPL_OFFSET>,
            SetThreadContext::<Impl, IMPL_OFFSET>,
            Request::<Impl, IMPL_OFFSET>,
            GetSourceFileInformation::<Impl, IMPL_OFFSET>,
            FindSourceFileAndToken::<Impl, IMPL_OFFSET>,
            GetSymbolInformation::<Impl, IMPL_OFFSET>,
            GetSystemObjectInformation::<Impl, IMPL_OFFSET>,
            GetSourceFileInformationWide::<Impl, IMPL_OFFSET>,
            FindSourceFileAndTokenWide::<Impl, IMPL_OFFSET>,
            GetSymbolInformationWide::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugAdvanced3 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugAdvanced4Impl: Sized {
    fn GetThreadContext();
    fn SetThreadContext();
    fn Request();
    fn GetSourceFileInformation();
    fn FindSourceFileAndToken();
    fn GetSymbolInformation();
    fn GetSystemObjectInformation();
    fn GetSourceFileInformationWide();
    fn FindSourceFileAndTokenWide();
    fn GetSymbolInformationWide();
    fn GetSymbolInformationWideEx();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugAdvanced4Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugAdvanced4Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugAdvanced4Vtbl {
        unsafe extern "system" fn GetThreadContext<Impl: IDebugAdvanced4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: *mut ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetThreadContext<Impl: IDebugAdvanced4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Request<Impl: IDebugAdvanced4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, request: u32, inbuffer: *const ::core::ffi::c_void, inbuffersize: u32, outbuffer: *mut ::core::ffi::c_void, outbuffersize: u32, outsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourceFileInformation<Impl: IDebugAdvanced4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, sourcefile: super::super::super::Foundation::PSTR, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FindSourceFileAndToken<Impl: IDebugAdvanced4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, startelement: u32, modaddr: u64, file: super::super::super::Foundation::PSTR, flags: u32, filetoken: *const ::core::ffi::c_void, filetokensize: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolInformation<Impl: IDebugAdvanced4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32, stringbuffer: super::super::super::Foundation::PSTR, stringbuffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSystemObjectInformation<Impl: IDebugAdvanced4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourceFileInformationWide<Impl: IDebugAdvanced4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, sourcefile: super::super::super::Foundation::PWSTR, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FindSourceFileAndTokenWide<Impl: IDebugAdvanced4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, startelement: u32, modaddr: u64, file: super::super::super::Foundation::PWSTR, flags: u32, filetoken: *const ::core::ffi::c_void, filetokensize: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolInformationWide<Impl: IDebugAdvanced4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32, stringbuffer: super::super::super::Foundation::PWSTR, stringbuffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolInformationWideEx<Impl: IDebugAdvanced4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32, stringbuffer: super::super::super::Foundation::PWSTR, stringbuffersize: u32, stringsize: *mut u32, pinfoex: *mut SYMBOL_INFO_EX) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetThreadContext::<Impl, IMPL_OFFSET>,
            SetThreadContext::<Impl, IMPL_OFFSET>,
            Request::<Impl, IMPL_OFFSET>,
            GetSourceFileInformation::<Impl, IMPL_OFFSET>,
            FindSourceFileAndToken::<Impl, IMPL_OFFSET>,
            GetSymbolInformation::<Impl, IMPL_OFFSET>,
            GetSystemObjectInformation::<Impl, IMPL_OFFSET>,
            GetSourceFileInformationWide::<Impl, IMPL_OFFSET>,
            FindSourceFileAndTokenWide::<Impl, IMPL_OFFSET>,
            GetSymbolInformationWide::<Impl, IMPL_OFFSET>,
            GetSymbolInformationWideEx::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugAdvanced4 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugApplication11032Impl: Sized + IRemoteDebugApplication110Impl {
    fn SynchronousCallInMainThread();
    fn AsynchronousCallInMainThread();
    fn CallableWaitForHandles();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugApplication11032Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugApplication11032Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugApplication11032Vtbl {
        unsafe extern "system" fn SynchronousCallInMainThread<Impl: IDebugApplication11032Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pptc: ::windows::core::RawPtr, dwparam1: usize, dwparam2: usize, dwparam3: usize) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AsynchronousCallInMainThread<Impl: IDebugApplication11032Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pptc: ::windows::core::RawPtr, dwparam1: usize, dwparam2: usize, dwparam3: usize) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CallableWaitForHandles<Impl: IDebugApplication11032Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handlecount: u32, phandles: *const super::super::super::Foundation::HANDLE, pindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SetDebuggerOptions::<Impl, IMPL_OFFSET>, GetCurrentDebuggerOptions::<Impl, IMPL_OFFSET>, GetMainThread::<Impl, IMPL_OFFSET>, SynchronousCallInMainThread::<Impl, IMPL_OFFSET>, AsynchronousCallInMainThread::<Impl, IMPL_OFFSET>, CallableWaitForHandles::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugApplication11032 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugApplication11064Impl: Sized + IRemoteDebugApplication110Impl {
    fn SynchronousCallInMainThread();
    fn AsynchronousCallInMainThread();
    fn CallableWaitForHandles();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugApplication11064Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugApplication11064Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugApplication11064Vtbl {
        unsafe extern "system" fn SynchronousCallInMainThread<Impl: IDebugApplication11064Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pptc: ::windows::core::RawPtr, dwparam1: usize, dwparam2: usize, dwparam3: usize) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AsynchronousCallInMainThread<Impl: IDebugApplication11064Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pptc: ::windows::core::RawPtr, dwparam1: usize, dwparam2: usize, dwparam3: usize) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CallableWaitForHandles<Impl: IDebugApplication11064Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handlecount: u32, phandles: *const super::super::super::Foundation::HANDLE, pindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SetDebuggerOptions::<Impl, IMPL_OFFSET>, GetCurrentDebuggerOptions::<Impl, IMPL_OFFSET>, GetMainThread::<Impl, IMPL_OFFSET>, SynchronousCallInMainThread::<Impl, IMPL_OFFSET>, AsynchronousCallInMainThread::<Impl, IMPL_OFFSET>, CallableWaitForHandles::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugApplication11064 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugApplication32Impl: Sized + IRemoteDebugApplicationImpl {
    fn SetName();
    fn StepOutComplete();
    fn DebugOutput();
    fn StartDebugSession();
    fn HandleBreakPoint();
    fn Close();
    fn GetBreakFlags();
    fn GetCurrentThread();
    fn CreateAsyncDebugOperation();
    fn AddStackFrameSniffer();
    fn RemoveStackFrameSniffer();
    fn QueryCurrentThreadIsDebuggerThread();
    fn SynchronousCallInDebuggerThread();
    fn CreateApplicationNode();
    fn FireDebuggerEvent();
    fn HandleRuntimeError();
    fn FCanJitDebug();
    fn FIsAutoJitDebugEnabled();
    fn AddGlobalExpressionContextProvider();
    fn RemoveGlobalExpressionContextProvider();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugApplication32Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugApplication32Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugApplication32Vtbl {
        unsafe extern "system" fn SetName<Impl: IDebugApplication32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstrname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StepOutComplete<Impl: IDebugApplication32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DebugOutput<Impl: IDebugApplication32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstr: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StartDebugSession<Impl: IDebugApplication32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn HandleBreakPoint<Impl: IDebugApplication32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, br: BREAKREASON, pbra: *mut BREAKRESUME_ACTION) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Close<Impl: IDebugApplication32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBreakFlags<Impl: IDebugApplication32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pabf: *mut u32, pprdatsteppingthread: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentThread<Impl: IDebugApplication32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pat: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateAsyncDebugOperation<Impl: IDebugApplication32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psdo: ::windows::core::RawPtr, ppado: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddStackFrameSniffer<Impl: IDebugApplication32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdsfs: ::windows::core::RawPtr, pdwcookie: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveStackFrameSniffer<Impl: IDebugApplication32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwcookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn QueryCurrentThreadIsDebuggerThread<Impl: IDebugApplication32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SynchronousCallInDebuggerThread<Impl: IDebugApplication32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pptc: ::windows::core::RawPtr, dwparam1: u32, dwparam2: u32, dwparam3: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateApplicationNode<Impl: IDebugApplication32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppdannew: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FireDebuggerEvent<Impl: IDebugApplication32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, riid: *const ::windows::core::GUID, punk: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn HandleRuntimeError<Impl: IDebugApplication32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, perrordebug: ::windows::core::RawPtr, pscriptsite: ::windows::core::RawPtr, pbra: *mut BREAKRESUME_ACTION, perra: *mut ERRORRESUMEACTION, pfcallonscripterror: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FCanJitDebug<Impl: IDebugApplication32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> super::super::super::Foundation::BOOL {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FIsAutoJitDebugEnabled<Impl: IDebugApplication32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> super::super::super::Foundation::BOOL {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddGlobalExpressionContextProvider<Impl: IDebugApplication32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdsfs: ::windows::core::RawPtr, pdwcookie: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveGlobalExpressionContextProvider<Impl: IDebugApplication32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwcookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            ResumeFromBreakPoint::<Impl, IMPL_OFFSET>,
            CauseBreak::<Impl, IMPL_OFFSET>,
            ConnectDebugger::<Impl, IMPL_OFFSET>,
            DisconnectDebugger::<Impl, IMPL_OFFSET>,
            GetDebugger::<Impl, IMPL_OFFSET>,
            CreateInstanceAtApplication::<Impl, IMPL_OFFSET>,
            QueryAlive::<Impl, IMPL_OFFSET>,
            EnumThreads::<Impl, IMPL_OFFSET>,
            GetName::<Impl, IMPL_OFFSET>,
            GetRootNode::<Impl, IMPL_OFFSET>,
            EnumGlobalExpressionContexts::<Impl, IMPL_OFFSET>,
            SetName::<Impl, IMPL_OFFSET>,
            StepOutComplete::<Impl, IMPL_OFFSET>,
            DebugOutput::<Impl, IMPL_OFFSET>,
            StartDebugSession::<Impl, IMPL_OFFSET>,
            HandleBreakPoint::<Impl, IMPL_OFFSET>,
            Close::<Impl, IMPL_OFFSET>,
            GetBreakFlags::<Impl, IMPL_OFFSET>,
            GetCurrentThread::<Impl, IMPL_OFFSET>,
            CreateAsyncDebugOperation::<Impl, IMPL_OFFSET>,
            AddStackFrameSniffer::<Impl, IMPL_OFFSET>,
            RemoveStackFrameSniffer::<Impl, IMPL_OFFSET>,
            QueryCurrentThreadIsDebuggerThread::<Impl, IMPL_OFFSET>,
            SynchronousCallInDebuggerThread::<Impl, IMPL_OFFSET>,
            CreateApplicationNode::<Impl, IMPL_OFFSET>,
            FireDebuggerEvent::<Impl, IMPL_OFFSET>,
            HandleRuntimeError::<Impl, IMPL_OFFSET>,
            FCanJitDebug::<Impl, IMPL_OFFSET>,
            FIsAutoJitDebugEnabled::<Impl, IMPL_OFFSET>,
            AddGlobalExpressionContextProvider::<Impl, IMPL_OFFSET>,
            RemoveGlobalExpressionContextProvider::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugApplication32 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugApplication64Impl: Sized + IRemoteDebugApplicationImpl {
    fn SetName();
    fn StepOutComplete();
    fn DebugOutput();
    fn StartDebugSession();
    fn HandleBreakPoint();
    fn Close();
    fn GetBreakFlags();
    fn GetCurrentThread();
    fn CreateAsyncDebugOperation();
    fn AddStackFrameSniffer();
    fn RemoveStackFrameSniffer();
    fn QueryCurrentThreadIsDebuggerThread();
    fn SynchronousCallInDebuggerThread();
    fn CreateApplicationNode();
    fn FireDebuggerEvent();
    fn HandleRuntimeError();
    fn FCanJitDebug();
    fn FIsAutoJitDebugEnabled();
    fn AddGlobalExpressionContextProvider();
    fn RemoveGlobalExpressionContextProvider();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugApplication64Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugApplication64Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugApplication64Vtbl {
        unsafe extern "system" fn SetName<Impl: IDebugApplication64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstrname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StepOutComplete<Impl: IDebugApplication64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DebugOutput<Impl: IDebugApplication64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstr: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StartDebugSession<Impl: IDebugApplication64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn HandleBreakPoint<Impl: IDebugApplication64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, br: BREAKREASON, pbra: *mut BREAKRESUME_ACTION) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Close<Impl: IDebugApplication64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBreakFlags<Impl: IDebugApplication64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pabf: *mut u32, pprdatsteppingthread: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentThread<Impl: IDebugApplication64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pat: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateAsyncDebugOperation<Impl: IDebugApplication64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psdo: ::windows::core::RawPtr, ppado: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddStackFrameSniffer<Impl: IDebugApplication64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdsfs: ::windows::core::RawPtr, pdwcookie: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveStackFrameSniffer<Impl: IDebugApplication64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwcookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn QueryCurrentThreadIsDebuggerThread<Impl: IDebugApplication64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SynchronousCallInDebuggerThread<Impl: IDebugApplication64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pptc: ::windows::core::RawPtr, dwparam1: u64, dwparam2: u64, dwparam3: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateApplicationNode<Impl: IDebugApplication64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppdannew: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FireDebuggerEvent<Impl: IDebugApplication64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, riid: *const ::windows::core::GUID, punk: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn HandleRuntimeError<Impl: IDebugApplication64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, perrordebug: ::windows::core::RawPtr, pscriptsite: ::windows::core::RawPtr, pbra: *mut BREAKRESUME_ACTION, perra: *mut ERRORRESUMEACTION, pfcallonscripterror: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FCanJitDebug<Impl: IDebugApplication64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> super::super::super::Foundation::BOOL {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FIsAutoJitDebugEnabled<Impl: IDebugApplication64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> super::super::super::Foundation::BOOL {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddGlobalExpressionContextProvider<Impl: IDebugApplication64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdsfs: ::windows::core::RawPtr, pdwcookie: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveGlobalExpressionContextProvider<Impl: IDebugApplication64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwcookie: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            ResumeFromBreakPoint::<Impl, IMPL_OFFSET>,
            CauseBreak::<Impl, IMPL_OFFSET>,
            ConnectDebugger::<Impl, IMPL_OFFSET>,
            DisconnectDebugger::<Impl, IMPL_OFFSET>,
            GetDebugger::<Impl, IMPL_OFFSET>,
            CreateInstanceAtApplication::<Impl, IMPL_OFFSET>,
            QueryAlive::<Impl, IMPL_OFFSET>,
            EnumThreads::<Impl, IMPL_OFFSET>,
            GetName::<Impl, IMPL_OFFSET>,
            GetRootNode::<Impl, IMPL_OFFSET>,
            EnumGlobalExpressionContexts::<Impl, IMPL_OFFSET>,
            SetName::<Impl, IMPL_OFFSET>,
            StepOutComplete::<Impl, IMPL_OFFSET>,
            DebugOutput::<Impl, IMPL_OFFSET>,
            StartDebugSession::<Impl, IMPL_OFFSET>,
            HandleBreakPoint::<Impl, IMPL_OFFSET>,
            Close::<Impl, IMPL_OFFSET>,
            GetBreakFlags::<Impl, IMPL_OFFSET>,
            GetCurrentThread::<Impl, IMPL_OFFSET>,
            CreateAsyncDebugOperation::<Impl, IMPL_OFFSET>,
            AddStackFrameSniffer::<Impl, IMPL_OFFSET>,
            RemoveStackFrameSniffer::<Impl, IMPL_OFFSET>,
            QueryCurrentThreadIsDebuggerThread::<Impl, IMPL_OFFSET>,
            SynchronousCallInDebuggerThread::<Impl, IMPL_OFFSET>,
            CreateApplicationNode::<Impl, IMPL_OFFSET>,
            FireDebuggerEvent::<Impl, IMPL_OFFSET>,
            HandleRuntimeError::<Impl, IMPL_OFFSET>,
            FCanJitDebug::<Impl, IMPL_OFFSET>,
            FIsAutoJitDebugEnabled::<Impl, IMPL_OFFSET>,
            AddGlobalExpressionContextProvider::<Impl, IMPL_OFFSET>,
            RemoveGlobalExpressionContextProvider::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugApplication64 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugApplicationNodeImpl: Sized + IDebugDocumentProviderImpl + IDebugDocumentInfoImpl {
    fn EnumChildren();
    fn GetParent();
    fn SetDocumentProvider();
    fn Close();
    fn Attach();
    fn Detach();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugApplicationNodeVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugApplicationNodeImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugApplicationNodeVtbl {
        unsafe extern "system" fn EnumChildren<Impl: IDebugApplicationNodeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pperddp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetParent<Impl: IDebugApplicationNodeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pprddp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDocumentProvider<Impl: IDebugApplicationNodeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pddp: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Close<Impl: IDebugApplicationNodeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Attach<Impl: IDebugApplicationNodeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdanparent: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Detach<Impl: IDebugApplicationNodeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetName::<Impl, IMPL_OFFSET>, GetDocumentClassId::<Impl, IMPL_OFFSET>, GetDocument::<Impl, IMPL_OFFSET>, EnumChildren::<Impl, IMPL_OFFSET>, GetParent::<Impl, IMPL_OFFSET>, SetDocumentProvider::<Impl, IMPL_OFFSET>, Close::<Impl, IMPL_OFFSET>, Attach::<Impl, IMPL_OFFSET>, Detach::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugApplicationNode as ::windows::core::Interface>::IID
    }
}
pub trait IDebugApplicationNode100Impl: Sized {
    fn SetFilterForEventSink();
    fn GetExcludedDocuments();
    fn QueryIsChildNode();
}
impl IDebugApplicationNode100Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugApplicationNode100Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugApplicationNode100Vtbl {
        unsafe extern "system" fn SetFilterForEventSink<Impl: IDebugApplicationNode100Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwcookie: u32, filter: APPLICATION_NODE_EVENT_FILTER) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExcludedDocuments<Impl: IDebugApplicationNode100Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, filter: APPLICATION_NODE_EVENT_FILTER, pdocuments: *mut TEXT_DOCUMENT_ARRAY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn QueryIsChildNode<Impl: IDebugApplicationNode100Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psearchkey: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SetFilterForEventSink::<Impl, IMPL_OFFSET>, GetExcludedDocuments::<Impl, IMPL_OFFSET>, QueryIsChildNode::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugApplicationNode100 as ::windows::core::Interface>::IID
    }
}
pub trait IDebugApplicationNodeEventsImpl: Sized {
    fn onAddChild();
    fn onRemoveChild();
    fn onDetach();
    fn onAttach();
}
impl IDebugApplicationNodeEventsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugApplicationNodeEventsImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugApplicationNodeEventsVtbl {
        unsafe extern "system" fn onAddChild<Impl: IDebugApplicationNodeEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prddpchild: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn onRemoveChild<Impl: IDebugApplicationNodeEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prddpchild: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn onDetach<Impl: IDebugApplicationNodeEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn onAttach<Impl: IDebugApplicationNodeEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prddpparent: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, onAddChild::<Impl, IMPL_OFFSET>, onRemoveChild::<Impl, IMPL_OFFSET>, onDetach::<Impl, IMPL_OFFSET>, onAttach::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugApplicationNodeEvents as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugApplicationThreadImpl: Sized + IRemoteDebugApplicationThreadImpl {
    fn SynchronousCallIntoThread32();
    fn QueryIsCurrentThread();
    fn QueryIsDebuggerThread();
    fn SetDescription();
    fn SetStateString();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugApplicationThreadVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugApplicationThreadImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugApplicationThreadVtbl {
        unsafe extern "system" fn SynchronousCallIntoThread32<Impl: IDebugApplicationThreadImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstcb: ::windows::core::RawPtr, dwparam1: u32, dwparam2: u32, dwparam3: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn QueryIsCurrentThread<Impl: IDebugApplicationThreadImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn QueryIsDebuggerThread<Impl: IDebugApplicationThreadImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDescription<Impl: IDebugApplicationThreadImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstrdescription: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetStateString<Impl: IDebugApplicationThreadImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstrstate: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetSystemThreadId::<Impl, IMPL_OFFSET>,
            GetApplication::<Impl, IMPL_OFFSET>,
            EnumStackFrames::<Impl, IMPL_OFFSET>,
            GetDescription::<Impl, IMPL_OFFSET>,
            SetNextStatement::<Impl, IMPL_OFFSET>,
            GetState::<Impl, IMPL_OFFSET>,
            Suspend::<Impl, IMPL_OFFSET>,
            Resume::<Impl, IMPL_OFFSET>,
            GetSuspendCount::<Impl, IMPL_OFFSET>,
            SynchronousCallIntoThread32::<Impl, IMPL_OFFSET>,
            QueryIsCurrentThread::<Impl, IMPL_OFFSET>,
            QueryIsDebuggerThread::<Impl, IMPL_OFFSET>,
            SetDescription::<Impl, IMPL_OFFSET>,
            SetStateString::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugApplicationThread as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugApplicationThread11032Impl: Sized {
    fn GetActiveThreadRequestCount();
    fn IsSuspendedForBreakPoint();
    fn IsThreadCallable();
    fn AsynchronousCallIntoThread();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugApplicationThread11032Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugApplicationThread11032Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugApplicationThread11032Vtbl {
        unsafe extern "system" fn GetActiveThreadRequestCount<Impl: IDebugApplicationThread11032Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, puithreadrequests: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsSuspendedForBreakPoint<Impl: IDebugApplicationThread11032Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfissuspended: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsThreadCallable<Impl: IDebugApplicationThread11032Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfiscallable: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AsynchronousCallIntoThread<Impl: IDebugApplicationThread11032Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pptc: ::windows::core::RawPtr, dwparam1: usize, dwparam2: usize, dwparam3: usize) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetActiveThreadRequestCount::<Impl, IMPL_OFFSET>, IsSuspendedForBreakPoint::<Impl, IMPL_OFFSET>, IsThreadCallable::<Impl, IMPL_OFFSET>, AsynchronousCallIntoThread::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugApplicationThread11032 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugApplicationThread11064Impl: Sized {
    fn GetActiveThreadRequestCount();
    fn IsSuspendedForBreakPoint();
    fn IsThreadCallable();
    fn AsynchronousCallIntoThread();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugApplicationThread11064Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugApplicationThread11064Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugApplicationThread11064Vtbl {
        unsafe extern "system" fn GetActiveThreadRequestCount<Impl: IDebugApplicationThread11064Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, puithreadrequests: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsSuspendedForBreakPoint<Impl: IDebugApplicationThread11064Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfissuspended: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsThreadCallable<Impl: IDebugApplicationThread11064Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pfiscallable: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AsynchronousCallIntoThread<Impl: IDebugApplicationThread11064Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pptc: ::windows::core::RawPtr, dwparam1: usize, dwparam2: usize, dwparam3: usize) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetActiveThreadRequestCount::<Impl, IMPL_OFFSET>, IsSuspendedForBreakPoint::<Impl, IMPL_OFFSET>, IsThreadCallable::<Impl, IMPL_OFFSET>, AsynchronousCallIntoThread::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugApplicationThread11064 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugApplicationThread64Impl: Sized + IDebugApplicationThreadImpl + IRemoteDebugApplicationThreadImpl {
    fn SynchronousCallIntoThread64();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugApplicationThread64Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugApplicationThread64Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugApplicationThread64Vtbl {
        unsafe extern "system" fn SynchronousCallIntoThread64<Impl: IDebugApplicationThread64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstcb: ::windows::core::RawPtr, dwparam1: u64, dwparam2: u64, dwparam3: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetSystemThreadId::<Impl, IMPL_OFFSET>,
            GetApplication::<Impl, IMPL_OFFSET>,
            EnumStackFrames::<Impl, IMPL_OFFSET>,
            GetDescription::<Impl, IMPL_OFFSET>,
            SetNextStatement::<Impl, IMPL_OFFSET>,
            GetState::<Impl, IMPL_OFFSET>,
            Suspend::<Impl, IMPL_OFFSET>,
            Resume::<Impl, IMPL_OFFSET>,
            GetSuspendCount::<Impl, IMPL_OFFSET>,
            SynchronousCallIntoThread32::<Impl, IMPL_OFFSET>,
            QueryIsCurrentThread::<Impl, IMPL_OFFSET>,
            QueryIsDebuggerThread::<Impl, IMPL_OFFSET>,
            SetDescription::<Impl, IMPL_OFFSET>,
            SetStateString::<Impl, IMPL_OFFSET>,
            SynchronousCallIntoThread64::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugApplicationThread64 as ::windows::core::Interface>::IID
    }
}
pub trait IDebugApplicationThreadEvents110Impl: Sized {
    fn OnSuspendForBreakPoint();
    fn OnResumeFromBreakPoint();
    fn OnThreadRequestComplete();
    fn OnBeginThreadRequest();
}
impl IDebugApplicationThreadEvents110Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugApplicationThreadEvents110Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugApplicationThreadEvents110Vtbl {
        unsafe extern "system" fn OnSuspendForBreakPoint<Impl: IDebugApplicationThreadEvents110Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OnResumeFromBreakPoint<Impl: IDebugApplicationThreadEvents110Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OnThreadRequestComplete<Impl: IDebugApplicationThreadEvents110Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OnBeginThreadRequest<Impl: IDebugApplicationThreadEvents110Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, OnSuspendForBreakPoint::<Impl, IMPL_OFFSET>, OnResumeFromBreakPoint::<Impl, IMPL_OFFSET>, OnThreadRequestComplete::<Impl, IMPL_OFFSET>, OnBeginThreadRequest::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugApplicationThreadEvents110 as ::windows::core::Interface>::IID
    }
}
pub trait IDebugAsyncOperationImpl: Sized {
    fn GetSyncDebugOperation();
    fn Start();
    fn Abort();
    fn QueryIsComplete();
    fn GetResult();
}
impl IDebugAsyncOperationVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugAsyncOperationImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugAsyncOperationVtbl {
        unsafe extern "system" fn GetSyncDebugOperation<Impl: IDebugAsyncOperationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppsdo: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Start<Impl: IDebugAsyncOperationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, padocb: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Abort<Impl: IDebugAsyncOperationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn QueryIsComplete<Impl: IDebugAsyncOperationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetResult<Impl: IDebugAsyncOperationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, phrresult: *mut ::windows::core::HRESULT, ppunkresult: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetSyncDebugOperation::<Impl, IMPL_OFFSET>, Start::<Impl, IMPL_OFFSET>, Abort::<Impl, IMPL_OFFSET>, QueryIsComplete::<Impl, IMPL_OFFSET>, GetResult::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugAsyncOperation as ::windows::core::Interface>::IID
    }
}
pub trait IDebugAsyncOperationCallBackImpl: Sized {
    fn onComplete();
}
impl IDebugAsyncOperationCallBackVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugAsyncOperationCallBackImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugAsyncOperationCallBackVtbl {
        unsafe extern "system" fn onComplete<Impl: IDebugAsyncOperationCallBackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, onComplete::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugAsyncOperationCallBack as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugBreakpointImpl: Sized {
    fn GetId();
    fn GetType();
    fn GetAdder();
    fn GetFlags();
    fn AddFlags();
    fn RemoveFlags();
    fn SetFlags();
    fn GetOffset();
    fn SetOffset();
    fn GetDataParameters();
    fn SetDataParameters();
    fn GetPassCount();
    fn SetPassCount();
    fn GetCurrentPassCount();
    fn GetMatchThreadId();
    fn SetMatchThreadId();
    fn GetCommand();
    fn SetCommand();
    fn GetOffsetExpression();
    fn SetOffsetExpression();
    fn GetParameters();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugBreakpointVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugBreakpointImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugBreakpointVtbl {
        unsafe extern "system" fn GetId<Impl: IDebugBreakpointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetType<Impl: IDebugBreakpointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, breaktype: *mut u32, proctype: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetAdder<Impl: IDebugBreakpointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, adder: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFlags<Impl: IDebugBreakpointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddFlags<Impl: IDebugBreakpointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveFlags<Impl: IDebugBreakpointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetFlags<Impl: IDebugBreakpointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOffset<Impl: IDebugBreakpointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOffset<Impl: IDebugBreakpointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDataParameters<Impl: IDebugBreakpointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, size: *mut u32, accesstype: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDataParameters<Impl: IDebugBreakpointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, size: u32, accesstype: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPassCount<Impl: IDebugBreakpointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetPassCount<Impl: IDebugBreakpointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentPassCount<Impl: IDebugBreakpointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetMatchThreadId<Impl: IDebugBreakpointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetMatchThreadId<Impl: IDebugBreakpointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, thread: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCommand<Impl: IDebugBreakpointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetCommand<Impl: IDebugBreakpointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, command: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOffsetExpression<Impl: IDebugBreakpointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, expressionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOffsetExpression<Impl: IDebugBreakpointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, expression: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetParameters<Impl: IDebugBreakpointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetId::<Impl, IMPL_OFFSET>,
            GetType::<Impl, IMPL_OFFSET>,
            GetAdder::<Impl, IMPL_OFFSET>,
            GetFlags::<Impl, IMPL_OFFSET>,
            AddFlags::<Impl, IMPL_OFFSET>,
            RemoveFlags::<Impl, IMPL_OFFSET>,
            SetFlags::<Impl, IMPL_OFFSET>,
            GetOffset::<Impl, IMPL_OFFSET>,
            SetOffset::<Impl, IMPL_OFFSET>,
            GetDataParameters::<Impl, IMPL_OFFSET>,
            SetDataParameters::<Impl, IMPL_OFFSET>,
            GetPassCount::<Impl, IMPL_OFFSET>,
            SetPassCount::<Impl, IMPL_OFFSET>,
            GetCurrentPassCount::<Impl, IMPL_OFFSET>,
            GetMatchThreadId::<Impl, IMPL_OFFSET>,
            SetMatchThreadId::<Impl, IMPL_OFFSET>,
            GetCommand::<Impl, IMPL_OFFSET>,
            SetCommand::<Impl, IMPL_OFFSET>,
            GetOffsetExpression::<Impl, IMPL_OFFSET>,
            SetOffsetExpression::<Impl, IMPL_OFFSET>,
            GetParameters::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugBreakpoint as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugBreakpoint2Impl: Sized {
    fn GetId();
    fn GetType();
    fn GetAdder();
    fn GetFlags();
    fn AddFlags();
    fn RemoveFlags();
    fn SetFlags();
    fn GetOffset();
    fn SetOffset();
    fn GetDataParameters();
    fn SetDataParameters();
    fn GetPassCount();
    fn SetPassCount();
    fn GetCurrentPassCount();
    fn GetMatchThreadId();
    fn SetMatchThreadId();
    fn GetCommand();
    fn SetCommand();
    fn GetOffsetExpression();
    fn SetOffsetExpression();
    fn GetParameters();
    fn GetCommandWide();
    fn SetCommandWide();
    fn GetOffsetExpressionWide();
    fn SetOffsetExpressionWide();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugBreakpoint2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugBreakpoint2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugBreakpoint2Vtbl {
        unsafe extern "system" fn GetId<Impl: IDebugBreakpoint2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetType<Impl: IDebugBreakpoint2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, breaktype: *mut u32, proctype: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetAdder<Impl: IDebugBreakpoint2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, adder: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFlags<Impl: IDebugBreakpoint2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddFlags<Impl: IDebugBreakpoint2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveFlags<Impl: IDebugBreakpoint2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetFlags<Impl: IDebugBreakpoint2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOffset<Impl: IDebugBreakpoint2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOffset<Impl: IDebugBreakpoint2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDataParameters<Impl: IDebugBreakpoint2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, size: *mut u32, accesstype: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDataParameters<Impl: IDebugBreakpoint2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, size: u32, accesstype: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPassCount<Impl: IDebugBreakpoint2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetPassCount<Impl: IDebugBreakpoint2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentPassCount<Impl: IDebugBreakpoint2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetMatchThreadId<Impl: IDebugBreakpoint2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetMatchThreadId<Impl: IDebugBreakpoint2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, thread: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCommand<Impl: IDebugBreakpoint2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetCommand<Impl: IDebugBreakpoint2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, command: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOffsetExpression<Impl: IDebugBreakpoint2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, expressionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOffsetExpression<Impl: IDebugBreakpoint2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, expression: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetParameters<Impl: IDebugBreakpoint2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCommandWide<Impl: IDebugBreakpoint2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetCommandWide<Impl: IDebugBreakpoint2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, command: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOffsetExpressionWide<Impl: IDebugBreakpoint2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, expressionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOffsetExpressionWide<Impl: IDebugBreakpoint2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, expression: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetId::<Impl, IMPL_OFFSET>,
            GetType::<Impl, IMPL_OFFSET>,
            GetAdder::<Impl, IMPL_OFFSET>,
            GetFlags::<Impl, IMPL_OFFSET>,
            AddFlags::<Impl, IMPL_OFFSET>,
            RemoveFlags::<Impl, IMPL_OFFSET>,
            SetFlags::<Impl, IMPL_OFFSET>,
            GetOffset::<Impl, IMPL_OFFSET>,
            SetOffset::<Impl, IMPL_OFFSET>,
            GetDataParameters::<Impl, IMPL_OFFSET>,
            SetDataParameters::<Impl, IMPL_OFFSET>,
            GetPassCount::<Impl, IMPL_OFFSET>,
            SetPassCount::<Impl, IMPL_OFFSET>,
            GetCurrentPassCount::<Impl, IMPL_OFFSET>,
            GetMatchThreadId::<Impl, IMPL_OFFSET>,
            SetMatchThreadId::<Impl, IMPL_OFFSET>,
            GetCommand::<Impl, IMPL_OFFSET>,
            SetCommand::<Impl, IMPL_OFFSET>,
            GetOffsetExpression::<Impl, IMPL_OFFSET>,
            SetOffsetExpression::<Impl, IMPL_OFFSET>,
            GetParameters::<Impl, IMPL_OFFSET>,
            GetCommandWide::<Impl, IMPL_OFFSET>,
            SetCommandWide::<Impl, IMPL_OFFSET>,
            GetOffsetExpressionWide::<Impl, IMPL_OFFSET>,
            SetOffsetExpressionWide::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugBreakpoint2 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugBreakpoint3Impl: Sized {
    fn GetId();
    fn GetType();
    fn GetAdder();
    fn GetFlags();
    fn AddFlags();
    fn RemoveFlags();
    fn SetFlags();
    fn GetOffset();
    fn SetOffset();
    fn GetDataParameters();
    fn SetDataParameters();
    fn GetPassCount();
    fn SetPassCount();
    fn GetCurrentPassCount();
    fn GetMatchThreadId();
    fn SetMatchThreadId();
    fn GetCommand();
    fn SetCommand();
    fn GetOffsetExpression();
    fn SetOffsetExpression();
    fn GetParameters();
    fn GetCommandWide();
    fn SetCommandWide();
    fn GetOffsetExpressionWide();
    fn SetOffsetExpressionWide();
    fn GetGuid();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugBreakpoint3Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugBreakpoint3Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugBreakpoint3Vtbl {
        unsafe extern "system" fn GetId<Impl: IDebugBreakpoint3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetType<Impl: IDebugBreakpoint3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, breaktype: *mut u32, proctype: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetAdder<Impl: IDebugBreakpoint3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, adder: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFlags<Impl: IDebugBreakpoint3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddFlags<Impl: IDebugBreakpoint3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveFlags<Impl: IDebugBreakpoint3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetFlags<Impl: IDebugBreakpoint3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOffset<Impl: IDebugBreakpoint3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOffset<Impl: IDebugBreakpoint3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDataParameters<Impl: IDebugBreakpoint3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, size: *mut u32, accesstype: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDataParameters<Impl: IDebugBreakpoint3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, size: u32, accesstype: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPassCount<Impl: IDebugBreakpoint3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetPassCount<Impl: IDebugBreakpoint3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentPassCount<Impl: IDebugBreakpoint3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetMatchThreadId<Impl: IDebugBreakpoint3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetMatchThreadId<Impl: IDebugBreakpoint3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, thread: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCommand<Impl: IDebugBreakpoint3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetCommand<Impl: IDebugBreakpoint3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, command: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOffsetExpression<Impl: IDebugBreakpoint3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, expressionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOffsetExpression<Impl: IDebugBreakpoint3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, expression: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetParameters<Impl: IDebugBreakpoint3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCommandWide<Impl: IDebugBreakpoint3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetCommandWide<Impl: IDebugBreakpoint3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, command: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOffsetExpressionWide<Impl: IDebugBreakpoint3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, expressionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOffsetExpressionWide<Impl: IDebugBreakpoint3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, expression: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetGuid<Impl: IDebugBreakpoint3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, guid: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetId::<Impl, IMPL_OFFSET>,
            GetType::<Impl, IMPL_OFFSET>,
            GetAdder::<Impl, IMPL_OFFSET>,
            GetFlags::<Impl, IMPL_OFFSET>,
            AddFlags::<Impl, IMPL_OFFSET>,
            RemoveFlags::<Impl, IMPL_OFFSET>,
            SetFlags::<Impl, IMPL_OFFSET>,
            GetOffset::<Impl, IMPL_OFFSET>,
            SetOffset::<Impl, IMPL_OFFSET>,
            GetDataParameters::<Impl, IMPL_OFFSET>,
            SetDataParameters::<Impl, IMPL_OFFSET>,
            GetPassCount::<Impl, IMPL_OFFSET>,
            SetPassCount::<Impl, IMPL_OFFSET>,
            GetCurrentPassCount::<Impl, IMPL_OFFSET>,
            GetMatchThreadId::<Impl, IMPL_OFFSET>,
            SetMatchThreadId::<Impl, IMPL_OFFSET>,
            GetCommand::<Impl, IMPL_OFFSET>,
            SetCommand::<Impl, IMPL_OFFSET>,
            GetOffsetExpression::<Impl, IMPL_OFFSET>,
            SetOffsetExpression::<Impl, IMPL_OFFSET>,
            GetParameters::<Impl, IMPL_OFFSET>,
            GetCommandWide::<Impl, IMPL_OFFSET>,
            SetCommandWide::<Impl, IMPL_OFFSET>,
            GetOffsetExpressionWide::<Impl, IMPL_OFFSET>,
            SetOffsetExpressionWide::<Impl, IMPL_OFFSET>,
            GetGuid::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugBreakpoint3 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugClientImpl: Sized {
    fn AttachKernel();
    fn GetKernelConnectionOptions();
    fn SetKernelConnectionOptions();
    fn StartProcessServer();
    fn ConnectProcessServer();
    fn DisconnectProcessServer();
    fn GetRunningProcessSystemIds();
    fn GetRunningProcessSystemIdByExecutableName();
    fn GetRunningProcessDescription();
    fn AttachProcess();
    fn CreateProcessA();
    fn CreateProcessAndAttach();
    fn GetProcessOptions();
    fn AddProcessOptions();
    fn RemoveProcessOptions();
    fn SetProcessOptions();
    fn OpenDumpFile();
    fn WriteDumpFile();
    fn ConnectSession();
    fn StartServer();
    fn OutputServers();
    fn TerminateProcesses();
    fn DetachProcesses();
    fn EndSession();
    fn GetExitCode();
    fn DispatchCallbacks();
    fn ExitDispatch();
    fn CreateClient();
    fn GetInputCallbacks();
    fn SetInputCallbacks();
    fn GetOutputCallbacks();
    fn SetOutputCallbacks();
    fn GetOutputMask();
    fn SetOutputMask();
    fn GetOtherOutputMask();
    fn SetOtherOutputMask();
    fn GetOutputWidth();
    fn SetOutputWidth();
    fn GetOutputLinePrefix();
    fn SetOutputLinePrefix();
    fn GetIdentity();
    fn OutputIdentity();
    fn GetEventCallbacks();
    fn SetEventCallbacks();
    fn FlushCallbacks();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugClientVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugClientImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugClientVtbl {
        unsafe extern "system" fn AttachKernel<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, connectoptions: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetKernelConnectionOptions<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetKernelConnectionOptions<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StartProcessServer<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, options: super::super::super::Foundation::PSTR, reserved: *const ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ConnectProcessServer<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, remoteoptions: super::super::super::Foundation::PSTR, server: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DisconnectProcessServer<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRunningProcessSystemIds<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableName<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, exename: super::super::super::Foundation::PSTR, flags: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRunningProcessDescription<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AttachProcess<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateProcessA<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateProcessAndAttach<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetProcessOptions<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddProcessOptions<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveProcessOptions<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetProcessOptions<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OpenDumpFile<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteDumpFile<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ConnectSession<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, historylimit: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StartServer<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputServers<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, machine: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn TerminateProcesses<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DetachProcesses<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EndSession<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExitCode<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, code: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DispatchCallbacks<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ExitDispatch<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateClient<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetInputCallbacks<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetInputCallbacks<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOutputCallbacks<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOutputCallbacks<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOutputMask<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOutputMask<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOtherOutputMask<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOtherOutputMask<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOutputWidth<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, columns: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOutputWidth<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, columns: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOutputLinePrefix<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOutputLinePrefix<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prefix: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetIdentity<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputIdentity<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEventCallbacks<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetEventCallbacks<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FlushCallbacks<Impl: IDebugClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            AttachKernel::<Impl, IMPL_OFFSET>,
            GetKernelConnectionOptions::<Impl, IMPL_OFFSET>,
            SetKernelConnectionOptions::<Impl, IMPL_OFFSET>,
            StartProcessServer::<Impl, IMPL_OFFSET>,
            ConnectProcessServer::<Impl, IMPL_OFFSET>,
            DisconnectProcessServer::<Impl, IMPL_OFFSET>,
            GetRunningProcessSystemIds::<Impl, IMPL_OFFSET>,
            GetRunningProcessSystemIdByExecutableName::<Impl, IMPL_OFFSET>,
            GetRunningProcessDescription::<Impl, IMPL_OFFSET>,
            AttachProcess::<Impl, IMPL_OFFSET>,
            CreateProcessA::<Impl, IMPL_OFFSET>,
            CreateProcessAndAttach::<Impl, IMPL_OFFSET>,
            GetProcessOptions::<Impl, IMPL_OFFSET>,
            AddProcessOptions::<Impl, IMPL_OFFSET>,
            RemoveProcessOptions::<Impl, IMPL_OFFSET>,
            SetProcessOptions::<Impl, IMPL_OFFSET>,
            OpenDumpFile::<Impl, IMPL_OFFSET>,
            WriteDumpFile::<Impl, IMPL_OFFSET>,
            ConnectSession::<Impl, IMPL_OFFSET>,
            StartServer::<Impl, IMPL_OFFSET>,
            OutputServers::<Impl, IMPL_OFFSET>,
            TerminateProcesses::<Impl, IMPL_OFFSET>,
            DetachProcesses::<Impl, IMPL_OFFSET>,
            EndSession::<Impl, IMPL_OFFSET>,
            GetExitCode::<Impl, IMPL_OFFSET>,
            DispatchCallbacks::<Impl, IMPL_OFFSET>,
            ExitDispatch::<Impl, IMPL_OFFSET>,
            CreateClient::<Impl, IMPL_OFFSET>,
            GetInputCallbacks::<Impl, IMPL_OFFSET>,
            SetInputCallbacks::<Impl, IMPL_OFFSET>,
            GetOutputCallbacks::<Impl, IMPL_OFFSET>,
            SetOutputCallbacks::<Impl, IMPL_OFFSET>,
            GetOutputMask::<Impl, IMPL_OFFSET>,
            SetOutputMask::<Impl, IMPL_OFFSET>,
            GetOtherOutputMask::<Impl, IMPL_OFFSET>,
            SetOtherOutputMask::<Impl, IMPL_OFFSET>,
            GetOutputWidth::<Impl, IMPL_OFFSET>,
            SetOutputWidth::<Impl, IMPL_OFFSET>,
            GetOutputLinePrefix::<Impl, IMPL_OFFSET>,
            SetOutputLinePrefix::<Impl, IMPL_OFFSET>,
            GetIdentity::<Impl, IMPL_OFFSET>,
            OutputIdentity::<Impl, IMPL_OFFSET>,
            GetEventCallbacks::<Impl, IMPL_OFFSET>,
            SetEventCallbacks::<Impl, IMPL_OFFSET>,
            FlushCallbacks::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugClient as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugClient2Impl: Sized {
    fn AttachKernel();
    fn GetKernelConnectionOptions();
    fn SetKernelConnectionOptions();
    fn StartProcessServer();
    fn ConnectProcessServer();
    fn DisconnectProcessServer();
    fn GetRunningProcessSystemIds();
    fn GetRunningProcessSystemIdByExecutableName();
    fn GetRunningProcessDescription();
    fn AttachProcess();
    fn CreateProcessA();
    fn CreateProcessAndAttach();
    fn GetProcessOptions();
    fn AddProcessOptions();
    fn RemoveProcessOptions();
    fn SetProcessOptions();
    fn OpenDumpFile();
    fn WriteDumpFile();
    fn ConnectSession();
    fn StartServer();
    fn OutputServers();
    fn TerminateProcesses();
    fn DetachProcesses();
    fn EndSession();
    fn GetExitCode();
    fn DispatchCallbacks();
    fn ExitDispatch();
    fn CreateClient();
    fn GetInputCallbacks();
    fn SetInputCallbacks();
    fn GetOutputCallbacks();
    fn SetOutputCallbacks();
    fn GetOutputMask();
    fn SetOutputMask();
    fn GetOtherOutputMask();
    fn SetOtherOutputMask();
    fn GetOutputWidth();
    fn SetOutputWidth();
    fn GetOutputLinePrefix();
    fn SetOutputLinePrefix();
    fn GetIdentity();
    fn OutputIdentity();
    fn GetEventCallbacks();
    fn SetEventCallbacks();
    fn FlushCallbacks();
    fn WriteDumpFile2();
    fn AddDumpInformationFile();
    fn EndProcessServer();
    fn WaitForProcessServerEnd();
    fn IsKernelDebuggerEnabled();
    fn TerminateCurrentProcess();
    fn DetachCurrentProcess();
    fn AbandonCurrentProcess();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugClient2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugClient2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugClient2Vtbl {
        unsafe extern "system" fn AttachKernel<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, connectoptions: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetKernelConnectionOptions<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetKernelConnectionOptions<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StartProcessServer<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, options: super::super::super::Foundation::PSTR, reserved: *const ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ConnectProcessServer<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, remoteoptions: super::super::super::Foundation::PSTR, server: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DisconnectProcessServer<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRunningProcessSystemIds<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableName<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, exename: super::super::super::Foundation::PSTR, flags: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRunningProcessDescription<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AttachProcess<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateProcessA<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateProcessAndAttach<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetProcessOptions<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddProcessOptions<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveProcessOptions<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetProcessOptions<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OpenDumpFile<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteDumpFile<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ConnectSession<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, historylimit: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StartServer<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputServers<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, machine: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn TerminateProcesses<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DetachProcesses<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EndSession<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExitCode<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, code: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DispatchCallbacks<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ExitDispatch<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateClient<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetInputCallbacks<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetInputCallbacks<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOutputCallbacks<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOutputCallbacks<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOutputMask<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOutputMask<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOtherOutputMask<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOtherOutputMask<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOutputWidth<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, columns: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOutputWidth<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, columns: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOutputLinePrefix<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOutputLinePrefix<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prefix: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetIdentity<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputIdentity<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEventCallbacks<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetEventCallbacks<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FlushCallbacks<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteDumpFile2<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddDumpInformationFile<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, infofile: super::super::super::Foundation::PSTR, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EndProcessServer<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WaitForProcessServerEnd<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsKernelDebuggerEnabled<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn TerminateCurrentProcess<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DetachCurrentProcess<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AbandonCurrentProcess<Impl: IDebugClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            AttachKernel::<Impl, IMPL_OFFSET>,
            GetKernelConnectionOptions::<Impl, IMPL_OFFSET>,
            SetKernelConnectionOptions::<Impl, IMPL_OFFSET>,
            StartProcessServer::<Impl, IMPL_OFFSET>,
            ConnectProcessServer::<Impl, IMPL_OFFSET>,
            DisconnectProcessServer::<Impl, IMPL_OFFSET>,
            GetRunningProcessSystemIds::<Impl, IMPL_OFFSET>,
            GetRunningProcessSystemIdByExecutableName::<Impl, IMPL_OFFSET>,
            GetRunningProcessDescription::<Impl, IMPL_OFFSET>,
            AttachProcess::<Impl, IMPL_OFFSET>,
            CreateProcessA::<Impl, IMPL_OFFSET>,
            CreateProcessAndAttach::<Impl, IMPL_OFFSET>,
            GetProcessOptions::<Impl, IMPL_OFFSET>,
            AddProcessOptions::<Impl, IMPL_OFFSET>,
            RemoveProcessOptions::<Impl, IMPL_OFFSET>,
            SetProcessOptions::<Impl, IMPL_OFFSET>,
            OpenDumpFile::<Impl, IMPL_OFFSET>,
            WriteDumpFile::<Impl, IMPL_OFFSET>,
            ConnectSession::<Impl, IMPL_OFFSET>,
            StartServer::<Impl, IMPL_OFFSET>,
            OutputServers::<Impl, IMPL_OFFSET>,
            TerminateProcesses::<Impl, IMPL_OFFSET>,
            DetachProcesses::<Impl, IMPL_OFFSET>,
            EndSession::<Impl, IMPL_OFFSET>,
            GetExitCode::<Impl, IMPL_OFFSET>,
            DispatchCallbacks::<Impl, IMPL_OFFSET>,
            ExitDispatch::<Impl, IMPL_OFFSET>,
            CreateClient::<Impl, IMPL_OFFSET>,
            GetInputCallbacks::<Impl, IMPL_OFFSET>,
            SetInputCallbacks::<Impl, IMPL_OFFSET>,
            GetOutputCallbacks::<Impl, IMPL_OFFSET>,
            SetOutputCallbacks::<Impl, IMPL_OFFSET>,
            GetOutputMask::<Impl, IMPL_OFFSET>,
            SetOutputMask::<Impl, IMPL_OFFSET>,
            GetOtherOutputMask::<Impl, IMPL_OFFSET>,
            SetOtherOutputMask::<Impl, IMPL_OFFSET>,
            GetOutputWidth::<Impl, IMPL_OFFSET>,
            SetOutputWidth::<Impl, IMPL_OFFSET>,
            GetOutputLinePrefix::<Impl, IMPL_OFFSET>,
            SetOutputLinePrefix::<Impl, IMPL_OFFSET>,
            GetIdentity::<Impl, IMPL_OFFSET>,
            OutputIdentity::<Impl, IMPL_OFFSET>,
            GetEventCallbacks::<Impl, IMPL_OFFSET>,
            SetEventCallbacks::<Impl, IMPL_OFFSET>,
            FlushCallbacks::<Impl, IMPL_OFFSET>,
            WriteDumpFile2::<Impl, IMPL_OFFSET>,
            AddDumpInformationFile::<Impl, IMPL_OFFSET>,
            EndProcessServer::<Impl, IMPL_OFFSET>,
            WaitForProcessServerEnd::<Impl, IMPL_OFFSET>,
            IsKernelDebuggerEnabled::<Impl, IMPL_OFFSET>,
            TerminateCurrentProcess::<Impl, IMPL_OFFSET>,
            DetachCurrentProcess::<Impl, IMPL_OFFSET>,
            AbandonCurrentProcess::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugClient2 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugClient3Impl: Sized {
    fn AttachKernel();
    fn GetKernelConnectionOptions();
    fn SetKernelConnectionOptions();
    fn StartProcessServer();
    fn ConnectProcessServer();
    fn DisconnectProcessServer();
    fn GetRunningProcessSystemIds();
    fn GetRunningProcessSystemIdByExecutableName();
    fn GetRunningProcessDescription();
    fn AttachProcess();
    fn CreateProcessA();
    fn CreateProcessAndAttach();
    fn GetProcessOptions();
    fn AddProcessOptions();
    fn RemoveProcessOptions();
    fn SetProcessOptions();
    fn OpenDumpFile();
    fn WriteDumpFile();
    fn ConnectSession();
    fn StartServer();
    fn OutputServers();
    fn TerminateProcesses();
    fn DetachProcesses();
    fn EndSession();
    fn GetExitCode();
    fn DispatchCallbacks();
    fn ExitDispatch();
    fn CreateClient();
    fn GetInputCallbacks();
    fn SetInputCallbacks();
    fn GetOutputCallbacks();
    fn SetOutputCallbacks();
    fn GetOutputMask();
    fn SetOutputMask();
    fn GetOtherOutputMask();
    fn SetOtherOutputMask();
    fn GetOutputWidth();
    fn SetOutputWidth();
    fn GetOutputLinePrefix();
    fn SetOutputLinePrefix();
    fn GetIdentity();
    fn OutputIdentity();
    fn GetEventCallbacks();
    fn SetEventCallbacks();
    fn FlushCallbacks();
    fn WriteDumpFile2();
    fn AddDumpInformationFile();
    fn EndProcessServer();
    fn WaitForProcessServerEnd();
    fn IsKernelDebuggerEnabled();
    fn TerminateCurrentProcess();
    fn DetachCurrentProcess();
    fn AbandonCurrentProcess();
    fn GetRunningProcessSystemIdByExecutableNameWide();
    fn GetRunningProcessDescriptionWide();
    fn CreateProcessWide();
    fn CreateProcessAndAttachWide();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugClient3Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugClient3Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugClient3Vtbl {
        unsafe extern "system" fn AttachKernel<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, connectoptions: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetKernelConnectionOptions<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetKernelConnectionOptions<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StartProcessServer<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, options: super::super::super::Foundation::PSTR, reserved: *const ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ConnectProcessServer<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, remoteoptions: super::super::super::Foundation::PSTR, server: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DisconnectProcessServer<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRunningProcessSystemIds<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableName<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, exename: super::super::super::Foundation::PSTR, flags: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRunningProcessDescription<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AttachProcess<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateProcessA<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateProcessAndAttach<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetProcessOptions<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddProcessOptions<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveProcessOptions<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetProcessOptions<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OpenDumpFile<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteDumpFile<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ConnectSession<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, historylimit: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StartServer<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputServers<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, machine: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn TerminateProcesses<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DetachProcesses<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EndSession<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExitCode<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, code: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DispatchCallbacks<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ExitDispatch<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateClient<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetInputCallbacks<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetInputCallbacks<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOutputCallbacks<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOutputCallbacks<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOutputMask<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOutputMask<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOtherOutputMask<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOtherOutputMask<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOutputWidth<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, columns: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOutputWidth<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, columns: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOutputLinePrefix<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOutputLinePrefix<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prefix: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetIdentity<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputIdentity<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEventCallbacks<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetEventCallbacks<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FlushCallbacks<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteDumpFile2<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddDumpInformationFile<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, infofile: super::super::super::Foundation::PSTR, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EndProcessServer<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WaitForProcessServerEnd<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsKernelDebuggerEnabled<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn TerminateCurrentProcess<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DetachCurrentProcess<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AbandonCurrentProcess<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableNameWide<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, exename: super::super::super::Foundation::PWSTR, flags: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRunningProcessDescriptionWide<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PWSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateProcessWide<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateProcessAndAttachWide<Impl: IDebugClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            AttachKernel::<Impl, IMPL_OFFSET>,
            GetKernelConnectionOptions::<Impl, IMPL_OFFSET>,
            SetKernelConnectionOptions::<Impl, IMPL_OFFSET>,
            StartProcessServer::<Impl, IMPL_OFFSET>,
            ConnectProcessServer::<Impl, IMPL_OFFSET>,
            DisconnectProcessServer::<Impl, IMPL_OFFSET>,
            GetRunningProcessSystemIds::<Impl, IMPL_OFFSET>,
            GetRunningProcessSystemIdByExecutableName::<Impl, IMPL_OFFSET>,
            GetRunningProcessDescription::<Impl, IMPL_OFFSET>,
            AttachProcess::<Impl, IMPL_OFFSET>,
            CreateProcessA::<Impl, IMPL_OFFSET>,
            CreateProcessAndAttach::<Impl, IMPL_OFFSET>,
            GetProcessOptions::<Impl, IMPL_OFFSET>,
            AddProcessOptions::<Impl, IMPL_OFFSET>,
            RemoveProcessOptions::<Impl, IMPL_OFFSET>,
            SetProcessOptions::<Impl, IMPL_OFFSET>,
            OpenDumpFile::<Impl, IMPL_OFFSET>,
            WriteDumpFile::<Impl, IMPL_OFFSET>,
            ConnectSession::<Impl, IMPL_OFFSET>,
            StartServer::<Impl, IMPL_OFFSET>,
            OutputServers::<Impl, IMPL_OFFSET>,
            TerminateProcesses::<Impl, IMPL_OFFSET>,
            DetachProcesses::<Impl, IMPL_OFFSET>,
            EndSession::<Impl, IMPL_OFFSET>,
            GetExitCode::<Impl, IMPL_OFFSET>,
            DispatchCallbacks::<Impl, IMPL_OFFSET>,
            ExitDispatch::<Impl, IMPL_OFFSET>,
            CreateClient::<Impl, IMPL_OFFSET>,
            GetInputCallbacks::<Impl, IMPL_OFFSET>,
            SetInputCallbacks::<Impl, IMPL_OFFSET>,
            GetOutputCallbacks::<Impl, IMPL_OFFSET>,
            SetOutputCallbacks::<Impl, IMPL_OFFSET>,
            GetOutputMask::<Impl, IMPL_OFFSET>,
            SetOutputMask::<Impl, IMPL_OFFSET>,
            GetOtherOutputMask::<Impl, IMPL_OFFSET>,
            SetOtherOutputMask::<Impl, IMPL_OFFSET>,
            GetOutputWidth::<Impl, IMPL_OFFSET>,
            SetOutputWidth::<Impl, IMPL_OFFSET>,
            GetOutputLinePrefix::<Impl, IMPL_OFFSET>,
            SetOutputLinePrefix::<Impl, IMPL_OFFSET>,
            GetIdentity::<Impl, IMPL_OFFSET>,
            OutputIdentity::<Impl, IMPL_OFFSET>,
            GetEventCallbacks::<Impl, IMPL_OFFSET>,
            SetEventCallbacks::<Impl, IMPL_OFFSET>,
            FlushCallbacks::<Impl, IMPL_OFFSET>,
            WriteDumpFile2::<Impl, IMPL_OFFSET>,
            AddDumpInformationFile::<Impl, IMPL_OFFSET>,
            EndProcessServer::<Impl, IMPL_OFFSET>,
            WaitForProcessServerEnd::<Impl, IMPL_OFFSET>,
            IsKernelDebuggerEnabled::<Impl, IMPL_OFFSET>,
            TerminateCurrentProcess::<Impl, IMPL_OFFSET>,
            DetachCurrentProcess::<Impl, IMPL_OFFSET>,
            AbandonCurrentProcess::<Impl, IMPL_OFFSET>,
            GetRunningProcessSystemIdByExecutableNameWide::<Impl, IMPL_OFFSET>,
            GetRunningProcessDescriptionWide::<Impl, IMPL_OFFSET>,
            CreateProcessWide::<Impl, IMPL_OFFSET>,
            CreateProcessAndAttachWide::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugClient3 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugClient4Impl: Sized {
    fn AttachKernel();
    fn GetKernelConnectionOptions();
    fn SetKernelConnectionOptions();
    fn StartProcessServer();
    fn ConnectProcessServer();
    fn DisconnectProcessServer();
    fn GetRunningProcessSystemIds();
    fn GetRunningProcessSystemIdByExecutableName();
    fn GetRunningProcessDescription();
    fn AttachProcess();
    fn CreateProcessA();
    fn CreateProcessAndAttach();
    fn GetProcessOptions();
    fn AddProcessOptions();
    fn RemoveProcessOptions();
    fn SetProcessOptions();
    fn OpenDumpFile();
    fn WriteDumpFile();
    fn ConnectSession();
    fn StartServer();
    fn OutputServers();
    fn TerminateProcesses();
    fn DetachProcesses();
    fn EndSession();
    fn GetExitCode();
    fn DispatchCallbacks();
    fn ExitDispatch();
    fn CreateClient();
    fn GetInputCallbacks();
    fn SetInputCallbacks();
    fn GetOutputCallbacks();
    fn SetOutputCallbacks();
    fn GetOutputMask();
    fn SetOutputMask();
    fn GetOtherOutputMask();
    fn SetOtherOutputMask();
    fn GetOutputWidth();
    fn SetOutputWidth();
    fn GetOutputLinePrefix();
    fn SetOutputLinePrefix();
    fn GetIdentity();
    fn OutputIdentity();
    fn GetEventCallbacks();
    fn SetEventCallbacks();
    fn FlushCallbacks();
    fn WriteDumpFile2();
    fn AddDumpInformationFile();
    fn EndProcessServer();
    fn WaitForProcessServerEnd();
    fn IsKernelDebuggerEnabled();
    fn TerminateCurrentProcess();
    fn DetachCurrentProcess();
    fn AbandonCurrentProcess();
    fn GetRunningProcessSystemIdByExecutableNameWide();
    fn GetRunningProcessDescriptionWide();
    fn CreateProcessWide();
    fn CreateProcessAndAttachWide();
    fn OpenDumpFileWide();
    fn WriteDumpFileWide();
    fn AddDumpInformationFileWide();
    fn GetNumberDumpFiles();
    fn GetDumpFile();
    fn GetDumpFileWide();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugClient4Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugClient4Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugClient4Vtbl {
        unsafe extern "system" fn AttachKernel<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, connectoptions: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetKernelConnectionOptions<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetKernelConnectionOptions<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StartProcessServer<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, options: super::super::super::Foundation::PSTR, reserved: *const ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ConnectProcessServer<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, remoteoptions: super::super::super::Foundation::PSTR, server: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DisconnectProcessServer<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRunningProcessSystemIds<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableName<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, exename: super::super::super::Foundation::PSTR, flags: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRunningProcessDescription<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AttachProcess<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateProcessA<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateProcessAndAttach<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetProcessOptions<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddProcessOptions<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveProcessOptions<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetProcessOptions<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OpenDumpFile<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteDumpFile<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ConnectSession<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, historylimit: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StartServer<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputServers<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, machine: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn TerminateProcesses<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DetachProcesses<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EndSession<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExitCode<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, code: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DispatchCallbacks<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ExitDispatch<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateClient<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetInputCallbacks<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetInputCallbacks<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOutputCallbacks<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOutputCallbacks<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOutputMask<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOutputMask<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOtherOutputMask<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOtherOutputMask<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOutputWidth<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, columns: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOutputWidth<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, columns: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOutputLinePrefix<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOutputLinePrefix<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prefix: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetIdentity<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputIdentity<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEventCallbacks<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetEventCallbacks<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FlushCallbacks<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteDumpFile2<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddDumpInformationFile<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, infofile: super::super::super::Foundation::PSTR, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EndProcessServer<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WaitForProcessServerEnd<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsKernelDebuggerEnabled<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn TerminateCurrentProcess<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DetachCurrentProcess<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AbandonCurrentProcess<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableNameWide<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, exename: super::super::super::Foundation::PWSTR, flags: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRunningProcessDescriptionWide<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PWSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateProcessWide<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateProcessAndAttachWide<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OpenDumpFileWide<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, filename: super::super::super::Foundation::PWSTR, filehandle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteDumpFileWide<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, filename: super::super::super::Foundation::PWSTR, filehandle: u64, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddDumpInformationFileWide<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, filename: super::super::super::Foundation::PWSTR, filehandle: u64, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberDumpFiles<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDumpFile<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDumpFileWide<Impl: IDebugClient4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            AttachKernel::<Impl, IMPL_OFFSET>,
            GetKernelConnectionOptions::<Impl, IMPL_OFFSET>,
            SetKernelConnectionOptions::<Impl, IMPL_OFFSET>,
            StartProcessServer::<Impl, IMPL_OFFSET>,
            ConnectProcessServer::<Impl, IMPL_OFFSET>,
            DisconnectProcessServer::<Impl, IMPL_OFFSET>,
            GetRunningProcessSystemIds::<Impl, IMPL_OFFSET>,
            GetRunningProcessSystemIdByExecutableName::<Impl, IMPL_OFFSET>,
            GetRunningProcessDescription::<Impl, IMPL_OFFSET>,
            AttachProcess::<Impl, IMPL_OFFSET>,
            CreateProcessA::<Impl, IMPL_OFFSET>,
            CreateProcessAndAttach::<Impl, IMPL_OFFSET>,
            GetProcessOptions::<Impl, IMPL_OFFSET>,
            AddProcessOptions::<Impl, IMPL_OFFSET>,
            RemoveProcessOptions::<Impl, IMPL_OFFSET>,
            SetProcessOptions::<Impl, IMPL_OFFSET>,
            OpenDumpFile::<Impl, IMPL_OFFSET>,
            WriteDumpFile::<Impl, IMPL_OFFSET>,
            ConnectSession::<Impl, IMPL_OFFSET>,
            StartServer::<Impl, IMPL_OFFSET>,
            OutputServers::<Impl, IMPL_OFFSET>,
            TerminateProcesses::<Impl, IMPL_OFFSET>,
            DetachProcesses::<Impl, IMPL_OFFSET>,
            EndSession::<Impl, IMPL_OFFSET>,
            GetExitCode::<Impl, IMPL_OFFSET>,
            DispatchCallbacks::<Impl, IMPL_OFFSET>,
            ExitDispatch::<Impl, IMPL_OFFSET>,
            CreateClient::<Impl, IMPL_OFFSET>,
            GetInputCallbacks::<Impl, IMPL_OFFSET>,
            SetInputCallbacks::<Impl, IMPL_OFFSET>,
            GetOutputCallbacks::<Impl, IMPL_OFFSET>,
            SetOutputCallbacks::<Impl, IMPL_OFFSET>,
            GetOutputMask::<Impl, IMPL_OFFSET>,
            SetOutputMask::<Impl, IMPL_OFFSET>,
            GetOtherOutputMask::<Impl, IMPL_OFFSET>,
            SetOtherOutputMask::<Impl, IMPL_OFFSET>,
            GetOutputWidth::<Impl, IMPL_OFFSET>,
            SetOutputWidth::<Impl, IMPL_OFFSET>,
            GetOutputLinePrefix::<Impl, IMPL_OFFSET>,
            SetOutputLinePrefix::<Impl, IMPL_OFFSET>,
            GetIdentity::<Impl, IMPL_OFFSET>,
            OutputIdentity::<Impl, IMPL_OFFSET>,
            GetEventCallbacks::<Impl, IMPL_OFFSET>,
            SetEventCallbacks::<Impl, IMPL_OFFSET>,
            FlushCallbacks::<Impl, IMPL_OFFSET>,
            WriteDumpFile2::<Impl, IMPL_OFFSET>,
            AddDumpInformationFile::<Impl, IMPL_OFFSET>,
            EndProcessServer::<Impl, IMPL_OFFSET>,
            WaitForProcessServerEnd::<Impl, IMPL_OFFSET>,
            IsKernelDebuggerEnabled::<Impl, IMPL_OFFSET>,
            TerminateCurrentProcess::<Impl, IMPL_OFFSET>,
            DetachCurrentProcess::<Impl, IMPL_OFFSET>,
            AbandonCurrentProcess::<Impl, IMPL_OFFSET>,
            GetRunningProcessSystemIdByExecutableNameWide::<Impl, IMPL_OFFSET>,
            GetRunningProcessDescriptionWide::<Impl, IMPL_OFFSET>,
            CreateProcessWide::<Impl, IMPL_OFFSET>,
            CreateProcessAndAttachWide::<Impl, IMPL_OFFSET>,
            OpenDumpFileWide::<Impl, IMPL_OFFSET>,
            WriteDumpFileWide::<Impl, IMPL_OFFSET>,
            AddDumpInformationFileWide::<Impl, IMPL_OFFSET>,
            GetNumberDumpFiles::<Impl, IMPL_OFFSET>,
            GetDumpFile::<Impl, IMPL_OFFSET>,
            GetDumpFileWide::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugClient4 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugClient5Impl: Sized {
    fn AttachKernel();
    fn GetKernelConnectionOptions();
    fn SetKernelConnectionOptions();
    fn StartProcessServer();
    fn ConnectProcessServer();
    fn DisconnectProcessServer();
    fn GetRunningProcessSystemIds();
    fn GetRunningProcessSystemIdByExecutableName();
    fn GetRunningProcessDescription();
    fn AttachProcess();
    fn CreateProcessA();
    fn CreateProcessAndAttach();
    fn GetProcessOptions();
    fn AddProcessOptions();
    fn RemoveProcessOptions();
    fn SetProcessOptions();
    fn OpenDumpFile();
    fn WriteDumpFile();
    fn ConnectSession();
    fn StartServer();
    fn OutputServers();
    fn TerminateProcesses();
    fn DetachProcesses();
    fn EndSession();
    fn GetExitCode();
    fn DispatchCallbacks();
    fn ExitDispatch();
    fn CreateClient();
    fn GetInputCallbacks();
    fn SetInputCallbacks();
    fn GetOutputCallbacks();
    fn SetOutputCallbacks();
    fn GetOutputMask();
    fn SetOutputMask();
    fn GetOtherOutputMask();
    fn SetOtherOutputMask();
    fn GetOutputWidth();
    fn SetOutputWidth();
    fn GetOutputLinePrefix();
    fn SetOutputLinePrefix();
    fn GetIdentity();
    fn OutputIdentity();
    fn GetEventCallbacks();
    fn SetEventCallbacks();
    fn FlushCallbacks();
    fn WriteDumpFile2();
    fn AddDumpInformationFile();
    fn EndProcessServer();
    fn WaitForProcessServerEnd();
    fn IsKernelDebuggerEnabled();
    fn TerminateCurrentProcess();
    fn DetachCurrentProcess();
    fn AbandonCurrentProcess();
    fn GetRunningProcessSystemIdByExecutableNameWide();
    fn GetRunningProcessDescriptionWide();
    fn CreateProcessWide();
    fn CreateProcessAndAttachWide();
    fn OpenDumpFileWide();
    fn WriteDumpFileWide();
    fn AddDumpInformationFileWide();
    fn GetNumberDumpFiles();
    fn GetDumpFile();
    fn GetDumpFileWide();
    fn AttachKernelWide();
    fn GetKernelConnectionOptionsWide();
    fn SetKernelConnectionOptionsWide();
    fn StartProcessServerWide();
    fn ConnectProcessServerWide();
    fn StartServerWide();
    fn OutputServersWide();
    fn GetOutputCallbacksWide();
    fn SetOutputCallbacksWide();
    fn GetOutputLinePrefixWide();
    fn SetOutputLinePrefixWide();
    fn GetIdentityWide();
    fn OutputIdentityWide();
    fn GetEventCallbacksWide();
    fn SetEventCallbacksWide();
    fn CreateProcess2();
    fn CreateProcess2Wide();
    fn CreateProcessAndAttach2();
    fn CreateProcessAndAttach2Wide();
    fn PushOutputLinePrefix();
    fn PushOutputLinePrefixWide();
    fn PopOutputLinePrefix();
    fn GetNumberInputCallbacks();
    fn GetNumberOutputCallbacks();
    fn GetNumberEventCallbacks();
    fn GetQuitLockString();
    fn SetQuitLockString();
    fn GetQuitLockStringWide();
    fn SetQuitLockStringWide();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugClient5Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugClient5Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugClient5Vtbl {
        unsafe extern "system" fn AttachKernel<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, connectoptions: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetKernelConnectionOptions<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetKernelConnectionOptions<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StartProcessServer<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, options: super::super::super::Foundation::PSTR, reserved: *const ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ConnectProcessServer<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, remoteoptions: super::super::super::Foundation::PSTR, server: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DisconnectProcessServer<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRunningProcessSystemIds<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableName<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, exename: super::super::super::Foundation::PSTR, flags: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRunningProcessDescription<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AttachProcess<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateProcessA<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateProcessAndAttach<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetProcessOptions<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddProcessOptions<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveProcessOptions<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetProcessOptions<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OpenDumpFile<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteDumpFile<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ConnectSession<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, historylimit: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StartServer<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputServers<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, machine: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn TerminateProcesses<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DetachProcesses<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EndSession<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExitCode<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, code: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DispatchCallbacks<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ExitDispatch<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateClient<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetInputCallbacks<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetInputCallbacks<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOutputCallbacks<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOutputCallbacks<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOutputMask<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOutputMask<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOtherOutputMask<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOtherOutputMask<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOutputWidth<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, columns: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOutputWidth<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, columns: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOutputLinePrefix<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOutputLinePrefix<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prefix: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetIdentity<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputIdentity<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEventCallbacks<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetEventCallbacks<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FlushCallbacks<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteDumpFile2<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddDumpInformationFile<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, infofile: super::super::super::Foundation::PSTR, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EndProcessServer<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WaitForProcessServerEnd<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsKernelDebuggerEnabled<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn TerminateCurrentProcess<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DetachCurrentProcess<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AbandonCurrentProcess<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableNameWide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, exename: super::super::super::Foundation::PWSTR, flags: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRunningProcessDescriptionWide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PWSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateProcessWide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateProcessAndAttachWide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OpenDumpFileWide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, filename: super::super::super::Foundation::PWSTR, filehandle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteDumpFileWide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, filename: super::super::super::Foundation::PWSTR, filehandle: u64, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddDumpInformationFileWide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, filename: super::super::super::Foundation::PWSTR, filehandle: u64, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberDumpFiles<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDumpFile<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDumpFileWide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AttachKernelWide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, connectoptions: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetKernelConnectionOptionsWide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetKernelConnectionOptionsWide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StartProcessServerWide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, options: super::super::super::Foundation::PWSTR, reserved: *const ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ConnectProcessServerWide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, remoteoptions: super::super::super::Foundation::PWSTR, server: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StartServerWide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputServersWide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, machine: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOutputCallbacksWide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOutputCallbacksWide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOutputLinePrefixWide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOutputLinePrefixWide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prefix: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetIdentityWide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputIdentityWide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEventCallbacksWide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetEventCallbacksWide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateProcess2<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PSTR, environment: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateProcess2Wide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PWSTR, environment: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateProcessAndAttach2<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PSTR, environment: super::super::super::Foundation::PSTR, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateProcessAndAttach2Wide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PWSTR, environment: super::super::super::Foundation::PWSTR, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PushOutputLinePrefix<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newprefix: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PushOutputLinePrefixWide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newprefix: super::super::super::Foundation::PWSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PopOutputLinePrefix<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberInputCallbacks<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberOutputCallbacks<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberEventCallbacks<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, eventflags: u32, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetQuitLockString<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetQuitLockString<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, string: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetQuitLockStringWide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetQuitLockStringWide<Impl: IDebugClient5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, string: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            AttachKernel::<Impl, IMPL_OFFSET>,
            GetKernelConnectionOptions::<Impl, IMPL_OFFSET>,
            SetKernelConnectionOptions::<Impl, IMPL_OFFSET>,
            StartProcessServer::<Impl, IMPL_OFFSET>,
            ConnectProcessServer::<Impl, IMPL_OFFSET>,
            DisconnectProcessServer::<Impl, IMPL_OFFSET>,
            GetRunningProcessSystemIds::<Impl, IMPL_OFFSET>,
            GetRunningProcessSystemIdByExecutableName::<Impl, IMPL_OFFSET>,
            GetRunningProcessDescription::<Impl, IMPL_OFFSET>,
            AttachProcess::<Impl, IMPL_OFFSET>,
            CreateProcessA::<Impl, IMPL_OFFSET>,
            CreateProcessAndAttach::<Impl, IMPL_OFFSET>,
            GetProcessOptions::<Impl, IMPL_OFFSET>,
            AddProcessOptions::<Impl, IMPL_OFFSET>,
            RemoveProcessOptions::<Impl, IMPL_OFFSET>,
            SetProcessOptions::<Impl, IMPL_OFFSET>,
            OpenDumpFile::<Impl, IMPL_OFFSET>,
            WriteDumpFile::<Impl, IMPL_OFFSET>,
            ConnectSession::<Impl, IMPL_OFFSET>,
            StartServer::<Impl, IMPL_OFFSET>,
            OutputServers::<Impl, IMPL_OFFSET>,
            TerminateProcesses::<Impl, IMPL_OFFSET>,
            DetachProcesses::<Impl, IMPL_OFFSET>,
            EndSession::<Impl, IMPL_OFFSET>,
            GetExitCode::<Impl, IMPL_OFFSET>,
            DispatchCallbacks::<Impl, IMPL_OFFSET>,
            ExitDispatch::<Impl, IMPL_OFFSET>,
            CreateClient::<Impl, IMPL_OFFSET>,
            GetInputCallbacks::<Impl, IMPL_OFFSET>,
            SetInputCallbacks::<Impl, IMPL_OFFSET>,
            GetOutputCallbacks::<Impl, IMPL_OFFSET>,
            SetOutputCallbacks::<Impl, IMPL_OFFSET>,
            GetOutputMask::<Impl, IMPL_OFFSET>,
            SetOutputMask::<Impl, IMPL_OFFSET>,
            GetOtherOutputMask::<Impl, IMPL_OFFSET>,
            SetOtherOutputMask::<Impl, IMPL_OFFSET>,
            GetOutputWidth::<Impl, IMPL_OFFSET>,
            SetOutputWidth::<Impl, IMPL_OFFSET>,
            GetOutputLinePrefix::<Impl, IMPL_OFFSET>,
            SetOutputLinePrefix::<Impl, IMPL_OFFSET>,
            GetIdentity::<Impl, IMPL_OFFSET>,
            OutputIdentity::<Impl, IMPL_OFFSET>,
            GetEventCallbacks::<Impl, IMPL_OFFSET>,
            SetEventCallbacks::<Impl, IMPL_OFFSET>,
            FlushCallbacks::<Impl, IMPL_OFFSET>,
            WriteDumpFile2::<Impl, IMPL_OFFSET>,
            AddDumpInformationFile::<Impl, IMPL_OFFSET>,
            EndProcessServer::<Impl, IMPL_OFFSET>,
            WaitForProcessServerEnd::<Impl, IMPL_OFFSET>,
            IsKernelDebuggerEnabled::<Impl, IMPL_OFFSET>,
            TerminateCurrentProcess::<Impl, IMPL_OFFSET>,
            DetachCurrentProcess::<Impl, IMPL_OFFSET>,
            AbandonCurrentProcess::<Impl, IMPL_OFFSET>,
            GetRunningProcessSystemIdByExecutableNameWide::<Impl, IMPL_OFFSET>,
            GetRunningProcessDescriptionWide::<Impl, IMPL_OFFSET>,
            CreateProcessWide::<Impl, IMPL_OFFSET>,
            CreateProcessAndAttachWide::<Impl, IMPL_OFFSET>,
            OpenDumpFileWide::<Impl, IMPL_OFFSET>,
            WriteDumpFileWide::<Impl, IMPL_OFFSET>,
            AddDumpInformationFileWide::<Impl, IMPL_OFFSET>,
            GetNumberDumpFiles::<Impl, IMPL_OFFSET>,
            GetDumpFile::<Impl, IMPL_OFFSET>,
            GetDumpFileWide::<Impl, IMPL_OFFSET>,
            AttachKernelWide::<Impl, IMPL_OFFSET>,
            GetKernelConnectionOptionsWide::<Impl, IMPL_OFFSET>,
            SetKernelConnectionOptionsWide::<Impl, IMPL_OFFSET>,
            StartProcessServerWide::<Impl, IMPL_OFFSET>,
            ConnectProcessServerWide::<Impl, IMPL_OFFSET>,
            StartServerWide::<Impl, IMPL_OFFSET>,
            OutputServersWide::<Impl, IMPL_OFFSET>,
            GetOutputCallbacksWide::<Impl, IMPL_OFFSET>,
            SetOutputCallbacksWide::<Impl, IMPL_OFFSET>,
            GetOutputLinePrefixWide::<Impl, IMPL_OFFSET>,
            SetOutputLinePrefixWide::<Impl, IMPL_OFFSET>,
            GetIdentityWide::<Impl, IMPL_OFFSET>,
            OutputIdentityWide::<Impl, IMPL_OFFSET>,
            GetEventCallbacksWide::<Impl, IMPL_OFFSET>,
            SetEventCallbacksWide::<Impl, IMPL_OFFSET>,
            CreateProcess2::<Impl, IMPL_OFFSET>,
            CreateProcess2Wide::<Impl, IMPL_OFFSET>,
            CreateProcessAndAttach2::<Impl, IMPL_OFFSET>,
            CreateProcessAndAttach2Wide::<Impl, IMPL_OFFSET>,
            PushOutputLinePrefix::<Impl, IMPL_OFFSET>,
            PushOutputLinePrefixWide::<Impl, IMPL_OFFSET>,
            PopOutputLinePrefix::<Impl, IMPL_OFFSET>,
            GetNumberInputCallbacks::<Impl, IMPL_OFFSET>,
            GetNumberOutputCallbacks::<Impl, IMPL_OFFSET>,
            GetNumberEventCallbacks::<Impl, IMPL_OFFSET>,
            GetQuitLockString::<Impl, IMPL_OFFSET>,
            SetQuitLockString::<Impl, IMPL_OFFSET>,
            GetQuitLockStringWide::<Impl, IMPL_OFFSET>,
            SetQuitLockStringWide::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugClient5 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugClient6Impl: Sized {
    fn AttachKernel();
    fn GetKernelConnectionOptions();
    fn SetKernelConnectionOptions();
    fn StartProcessServer();
    fn ConnectProcessServer();
    fn DisconnectProcessServer();
    fn GetRunningProcessSystemIds();
    fn GetRunningProcessSystemIdByExecutableName();
    fn GetRunningProcessDescription();
    fn AttachProcess();
    fn CreateProcessA();
    fn CreateProcessAndAttach();
    fn GetProcessOptions();
    fn AddProcessOptions();
    fn RemoveProcessOptions();
    fn SetProcessOptions();
    fn OpenDumpFile();
    fn WriteDumpFile();
    fn ConnectSession();
    fn StartServer();
    fn OutputServers();
    fn TerminateProcesses();
    fn DetachProcesses();
    fn EndSession();
    fn GetExitCode();
    fn DispatchCallbacks();
    fn ExitDispatch();
    fn CreateClient();
    fn GetInputCallbacks();
    fn SetInputCallbacks();
    fn GetOutputCallbacks();
    fn SetOutputCallbacks();
    fn GetOutputMask();
    fn SetOutputMask();
    fn GetOtherOutputMask();
    fn SetOtherOutputMask();
    fn GetOutputWidth();
    fn SetOutputWidth();
    fn GetOutputLinePrefix();
    fn SetOutputLinePrefix();
    fn GetIdentity();
    fn OutputIdentity();
    fn GetEventCallbacks();
    fn SetEventCallbacks();
    fn FlushCallbacks();
    fn WriteDumpFile2();
    fn AddDumpInformationFile();
    fn EndProcessServer();
    fn WaitForProcessServerEnd();
    fn IsKernelDebuggerEnabled();
    fn TerminateCurrentProcess();
    fn DetachCurrentProcess();
    fn AbandonCurrentProcess();
    fn GetRunningProcessSystemIdByExecutableNameWide();
    fn GetRunningProcessDescriptionWide();
    fn CreateProcessWide();
    fn CreateProcessAndAttachWide();
    fn OpenDumpFileWide();
    fn WriteDumpFileWide();
    fn AddDumpInformationFileWide();
    fn GetNumberDumpFiles();
    fn GetDumpFile();
    fn GetDumpFileWide();
    fn AttachKernelWide();
    fn GetKernelConnectionOptionsWide();
    fn SetKernelConnectionOptionsWide();
    fn StartProcessServerWide();
    fn ConnectProcessServerWide();
    fn StartServerWide();
    fn OutputServersWide();
    fn GetOutputCallbacksWide();
    fn SetOutputCallbacksWide();
    fn GetOutputLinePrefixWide();
    fn SetOutputLinePrefixWide();
    fn GetIdentityWide();
    fn OutputIdentityWide();
    fn GetEventCallbacksWide();
    fn SetEventCallbacksWide();
    fn CreateProcess2();
    fn CreateProcess2Wide();
    fn CreateProcessAndAttach2();
    fn CreateProcessAndAttach2Wide();
    fn PushOutputLinePrefix();
    fn PushOutputLinePrefixWide();
    fn PopOutputLinePrefix();
    fn GetNumberInputCallbacks();
    fn GetNumberOutputCallbacks();
    fn GetNumberEventCallbacks();
    fn GetQuitLockString();
    fn SetQuitLockString();
    fn GetQuitLockStringWide();
    fn SetQuitLockStringWide();
    fn SetEventContextCallbacks();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugClient6Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugClient6Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugClient6Vtbl {
        unsafe extern "system" fn AttachKernel<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, connectoptions: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetKernelConnectionOptions<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetKernelConnectionOptions<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StartProcessServer<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, options: super::super::super::Foundation::PSTR, reserved: *const ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ConnectProcessServer<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, remoteoptions: super::super::super::Foundation::PSTR, server: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DisconnectProcessServer<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRunningProcessSystemIds<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableName<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, exename: super::super::super::Foundation::PSTR, flags: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRunningProcessDescription<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AttachProcess<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateProcessA<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateProcessAndAttach<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetProcessOptions<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddProcessOptions<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveProcessOptions<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetProcessOptions<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OpenDumpFile<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteDumpFile<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ConnectSession<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, historylimit: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StartServer<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputServers<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, machine: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn TerminateProcesses<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DetachProcesses<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EndSession<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExitCode<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, code: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DispatchCallbacks<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ExitDispatch<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateClient<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetInputCallbacks<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetInputCallbacks<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOutputCallbacks<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOutputCallbacks<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOutputMask<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOutputMask<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOtherOutputMask<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOtherOutputMask<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOutputWidth<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, columns: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOutputWidth<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, columns: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOutputLinePrefix<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOutputLinePrefix<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prefix: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetIdentity<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputIdentity<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEventCallbacks<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetEventCallbacks<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FlushCallbacks<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteDumpFile2<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddDumpInformationFile<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, infofile: super::super::super::Foundation::PSTR, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EndProcessServer<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WaitForProcessServerEnd<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsKernelDebuggerEnabled<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn TerminateCurrentProcess<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DetachCurrentProcess<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AbandonCurrentProcess<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableNameWide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, exename: super::super::super::Foundation::PWSTR, flags: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRunningProcessDescriptionWide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PWSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateProcessWide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateProcessAndAttachWide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OpenDumpFileWide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, filename: super::super::super::Foundation::PWSTR, filehandle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteDumpFileWide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, filename: super::super::super::Foundation::PWSTR, filehandle: u64, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddDumpInformationFileWide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, filename: super::super::super::Foundation::PWSTR, filehandle: u64, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberDumpFiles<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDumpFile<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDumpFileWide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AttachKernelWide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, connectoptions: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetKernelConnectionOptionsWide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetKernelConnectionOptionsWide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StartProcessServerWide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, options: super::super::super::Foundation::PWSTR, reserved: *const ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ConnectProcessServerWide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, remoteoptions: super::super::super::Foundation::PWSTR, server: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StartServerWide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputServersWide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, machine: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOutputCallbacksWide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOutputCallbacksWide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOutputLinePrefixWide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOutputLinePrefixWide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prefix: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetIdentityWide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputIdentityWide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEventCallbacksWide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetEventCallbacksWide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateProcess2<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PSTR, environment: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateProcess2Wide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PWSTR, environment: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateProcessAndAttach2<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PSTR, environment: super::super::super::Foundation::PSTR, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateProcessAndAttach2Wide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PWSTR, environment: super::super::super::Foundation::PWSTR, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PushOutputLinePrefix<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newprefix: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PushOutputLinePrefixWide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newprefix: super::super::super::Foundation::PWSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PopOutputLinePrefix<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberInputCallbacks<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberOutputCallbacks<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberEventCallbacks<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, eventflags: u32, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetQuitLockString<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetQuitLockString<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, string: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetQuitLockStringWide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetQuitLockStringWide<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, string: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetEventContextCallbacks<Impl: IDebugClient6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            AttachKernel::<Impl, IMPL_OFFSET>,
            GetKernelConnectionOptions::<Impl, IMPL_OFFSET>,
            SetKernelConnectionOptions::<Impl, IMPL_OFFSET>,
            StartProcessServer::<Impl, IMPL_OFFSET>,
            ConnectProcessServer::<Impl, IMPL_OFFSET>,
            DisconnectProcessServer::<Impl, IMPL_OFFSET>,
            GetRunningProcessSystemIds::<Impl, IMPL_OFFSET>,
            GetRunningProcessSystemIdByExecutableName::<Impl, IMPL_OFFSET>,
            GetRunningProcessDescription::<Impl, IMPL_OFFSET>,
            AttachProcess::<Impl, IMPL_OFFSET>,
            CreateProcessA::<Impl, IMPL_OFFSET>,
            CreateProcessAndAttach::<Impl, IMPL_OFFSET>,
            GetProcessOptions::<Impl, IMPL_OFFSET>,
            AddProcessOptions::<Impl, IMPL_OFFSET>,
            RemoveProcessOptions::<Impl, IMPL_OFFSET>,
            SetProcessOptions::<Impl, IMPL_OFFSET>,
            OpenDumpFile::<Impl, IMPL_OFFSET>,
            WriteDumpFile::<Impl, IMPL_OFFSET>,
            ConnectSession::<Impl, IMPL_OFFSET>,
            StartServer::<Impl, IMPL_OFFSET>,
            OutputServers::<Impl, IMPL_OFFSET>,
            TerminateProcesses::<Impl, IMPL_OFFSET>,
            DetachProcesses::<Impl, IMPL_OFFSET>,
            EndSession::<Impl, IMPL_OFFSET>,
            GetExitCode::<Impl, IMPL_OFFSET>,
            DispatchCallbacks::<Impl, IMPL_OFFSET>,
            ExitDispatch::<Impl, IMPL_OFFSET>,
            CreateClient::<Impl, IMPL_OFFSET>,
            GetInputCallbacks::<Impl, IMPL_OFFSET>,
            SetInputCallbacks::<Impl, IMPL_OFFSET>,
            GetOutputCallbacks::<Impl, IMPL_OFFSET>,
            SetOutputCallbacks::<Impl, IMPL_OFFSET>,
            GetOutputMask::<Impl, IMPL_OFFSET>,
            SetOutputMask::<Impl, IMPL_OFFSET>,
            GetOtherOutputMask::<Impl, IMPL_OFFSET>,
            SetOtherOutputMask::<Impl, IMPL_OFFSET>,
            GetOutputWidth::<Impl, IMPL_OFFSET>,
            SetOutputWidth::<Impl, IMPL_OFFSET>,
            GetOutputLinePrefix::<Impl, IMPL_OFFSET>,
            SetOutputLinePrefix::<Impl, IMPL_OFFSET>,
            GetIdentity::<Impl, IMPL_OFFSET>,
            OutputIdentity::<Impl, IMPL_OFFSET>,
            GetEventCallbacks::<Impl, IMPL_OFFSET>,
            SetEventCallbacks::<Impl, IMPL_OFFSET>,
            FlushCallbacks::<Impl, IMPL_OFFSET>,
            WriteDumpFile2::<Impl, IMPL_OFFSET>,
            AddDumpInformationFile::<Impl, IMPL_OFFSET>,
            EndProcessServer::<Impl, IMPL_OFFSET>,
            WaitForProcessServerEnd::<Impl, IMPL_OFFSET>,
            IsKernelDebuggerEnabled::<Impl, IMPL_OFFSET>,
            TerminateCurrentProcess::<Impl, IMPL_OFFSET>,
            DetachCurrentProcess::<Impl, IMPL_OFFSET>,
            AbandonCurrentProcess::<Impl, IMPL_OFFSET>,
            GetRunningProcessSystemIdByExecutableNameWide::<Impl, IMPL_OFFSET>,
            GetRunningProcessDescriptionWide::<Impl, IMPL_OFFSET>,
            CreateProcessWide::<Impl, IMPL_OFFSET>,
            CreateProcessAndAttachWide::<Impl, IMPL_OFFSET>,
            OpenDumpFileWide::<Impl, IMPL_OFFSET>,
            WriteDumpFileWide::<Impl, IMPL_OFFSET>,
            AddDumpInformationFileWide::<Impl, IMPL_OFFSET>,
            GetNumberDumpFiles::<Impl, IMPL_OFFSET>,
            GetDumpFile::<Impl, IMPL_OFFSET>,
            GetDumpFileWide::<Impl, IMPL_OFFSET>,
            AttachKernelWide::<Impl, IMPL_OFFSET>,
            GetKernelConnectionOptionsWide::<Impl, IMPL_OFFSET>,
            SetKernelConnectionOptionsWide::<Impl, IMPL_OFFSET>,
            StartProcessServerWide::<Impl, IMPL_OFFSET>,
            ConnectProcessServerWide::<Impl, IMPL_OFFSET>,
            StartServerWide::<Impl, IMPL_OFFSET>,
            OutputServersWide::<Impl, IMPL_OFFSET>,
            GetOutputCallbacksWide::<Impl, IMPL_OFFSET>,
            SetOutputCallbacksWide::<Impl, IMPL_OFFSET>,
            GetOutputLinePrefixWide::<Impl, IMPL_OFFSET>,
            SetOutputLinePrefixWide::<Impl, IMPL_OFFSET>,
            GetIdentityWide::<Impl, IMPL_OFFSET>,
            OutputIdentityWide::<Impl, IMPL_OFFSET>,
            GetEventCallbacksWide::<Impl, IMPL_OFFSET>,
            SetEventCallbacksWide::<Impl, IMPL_OFFSET>,
            CreateProcess2::<Impl, IMPL_OFFSET>,
            CreateProcess2Wide::<Impl, IMPL_OFFSET>,
            CreateProcessAndAttach2::<Impl, IMPL_OFFSET>,
            CreateProcessAndAttach2Wide::<Impl, IMPL_OFFSET>,
            PushOutputLinePrefix::<Impl, IMPL_OFFSET>,
            PushOutputLinePrefixWide::<Impl, IMPL_OFFSET>,
            PopOutputLinePrefix::<Impl, IMPL_OFFSET>,
            GetNumberInputCallbacks::<Impl, IMPL_OFFSET>,
            GetNumberOutputCallbacks::<Impl, IMPL_OFFSET>,
            GetNumberEventCallbacks::<Impl, IMPL_OFFSET>,
            GetQuitLockString::<Impl, IMPL_OFFSET>,
            SetQuitLockString::<Impl, IMPL_OFFSET>,
            GetQuitLockStringWide::<Impl, IMPL_OFFSET>,
            SetQuitLockStringWide::<Impl, IMPL_OFFSET>,
            SetEventContextCallbacks::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugClient6 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugClient7Impl: Sized {
    fn AttachKernel();
    fn GetKernelConnectionOptions();
    fn SetKernelConnectionOptions();
    fn StartProcessServer();
    fn ConnectProcessServer();
    fn DisconnectProcessServer();
    fn GetRunningProcessSystemIds();
    fn GetRunningProcessSystemIdByExecutableName();
    fn GetRunningProcessDescription();
    fn AttachProcess();
    fn CreateProcessA();
    fn CreateProcessAndAttach();
    fn GetProcessOptions();
    fn AddProcessOptions();
    fn RemoveProcessOptions();
    fn SetProcessOptions();
    fn OpenDumpFile();
    fn WriteDumpFile();
    fn ConnectSession();
    fn StartServer();
    fn OutputServers();
    fn TerminateProcesses();
    fn DetachProcesses();
    fn EndSession();
    fn GetExitCode();
    fn DispatchCallbacks();
    fn ExitDispatch();
    fn CreateClient();
    fn GetInputCallbacks();
    fn SetInputCallbacks();
    fn GetOutputCallbacks();
    fn SetOutputCallbacks();
    fn GetOutputMask();
    fn SetOutputMask();
    fn GetOtherOutputMask();
    fn SetOtherOutputMask();
    fn GetOutputWidth();
    fn SetOutputWidth();
    fn GetOutputLinePrefix();
    fn SetOutputLinePrefix();
    fn GetIdentity();
    fn OutputIdentity();
    fn GetEventCallbacks();
    fn SetEventCallbacks();
    fn FlushCallbacks();
    fn WriteDumpFile2();
    fn AddDumpInformationFile();
    fn EndProcessServer();
    fn WaitForProcessServerEnd();
    fn IsKernelDebuggerEnabled();
    fn TerminateCurrentProcess();
    fn DetachCurrentProcess();
    fn AbandonCurrentProcess();
    fn GetRunningProcessSystemIdByExecutableNameWide();
    fn GetRunningProcessDescriptionWide();
    fn CreateProcessWide();
    fn CreateProcessAndAttachWide();
    fn OpenDumpFileWide();
    fn WriteDumpFileWide();
    fn AddDumpInformationFileWide();
    fn GetNumberDumpFiles();
    fn GetDumpFile();
    fn GetDumpFileWide();
    fn AttachKernelWide();
    fn GetKernelConnectionOptionsWide();
    fn SetKernelConnectionOptionsWide();
    fn StartProcessServerWide();
    fn ConnectProcessServerWide();
    fn StartServerWide();
    fn OutputServersWide();
    fn GetOutputCallbacksWide();
    fn SetOutputCallbacksWide();
    fn GetOutputLinePrefixWide();
    fn SetOutputLinePrefixWide();
    fn GetIdentityWide();
    fn OutputIdentityWide();
    fn GetEventCallbacksWide();
    fn SetEventCallbacksWide();
    fn CreateProcess2();
    fn CreateProcess2Wide();
    fn CreateProcessAndAttach2();
    fn CreateProcessAndAttach2Wide();
    fn PushOutputLinePrefix();
    fn PushOutputLinePrefixWide();
    fn PopOutputLinePrefix();
    fn GetNumberInputCallbacks();
    fn GetNumberOutputCallbacks();
    fn GetNumberEventCallbacks();
    fn GetQuitLockString();
    fn SetQuitLockString();
    fn GetQuitLockStringWide();
    fn SetQuitLockStringWide();
    fn SetEventContextCallbacks();
    fn SetClientContext();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugClient7Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugClient7Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugClient7Vtbl {
        unsafe extern "system" fn AttachKernel<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, connectoptions: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetKernelConnectionOptions<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetKernelConnectionOptions<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StartProcessServer<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, options: super::super::super::Foundation::PSTR, reserved: *const ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ConnectProcessServer<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, remoteoptions: super::super::super::Foundation::PSTR, server: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DisconnectProcessServer<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRunningProcessSystemIds<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableName<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, exename: super::super::super::Foundation::PSTR, flags: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRunningProcessDescription<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AttachProcess<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateProcessA<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateProcessAndAttach<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetProcessOptions<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddProcessOptions<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveProcessOptions<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetProcessOptions<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OpenDumpFile<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteDumpFile<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ConnectSession<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, historylimit: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StartServer<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputServers<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, machine: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn TerminateProcesses<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DetachProcesses<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EndSession<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExitCode<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, code: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DispatchCallbacks<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ExitDispatch<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateClient<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetInputCallbacks<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetInputCallbacks<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOutputCallbacks<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOutputCallbacks<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOutputMask<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOutputMask<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOtherOutputMask<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOtherOutputMask<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOutputWidth<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, columns: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOutputWidth<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, columns: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOutputLinePrefix<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOutputLinePrefix<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prefix: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetIdentity<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputIdentity<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEventCallbacks<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetEventCallbacks<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FlushCallbacks<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteDumpFile2<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddDumpInformationFile<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, infofile: super::super::super::Foundation::PSTR, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EndProcessServer<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WaitForProcessServerEnd<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsKernelDebuggerEnabled<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn TerminateCurrentProcess<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DetachCurrentProcess<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AbandonCurrentProcess<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableNameWide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, exename: super::super::super::Foundation::PWSTR, flags: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRunningProcessDescriptionWide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PWSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateProcessWide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateProcessAndAttachWide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OpenDumpFileWide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, filename: super::super::super::Foundation::PWSTR, filehandle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteDumpFileWide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, filename: super::super::super::Foundation::PWSTR, filehandle: u64, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddDumpInformationFileWide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, filename: super::super::super::Foundation::PWSTR, filehandle: u64, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberDumpFiles<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDumpFile<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDumpFileWide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AttachKernelWide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, connectoptions: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetKernelConnectionOptionsWide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetKernelConnectionOptionsWide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StartProcessServerWide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, options: super::super::super::Foundation::PWSTR, reserved: *const ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ConnectProcessServerWide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, remoteoptions: super::super::super::Foundation::PWSTR, server: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StartServerWide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputServersWide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, machine: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOutputCallbacksWide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOutputCallbacksWide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOutputLinePrefixWide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOutputLinePrefixWide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prefix: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetIdentityWide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputIdentityWide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEventCallbacksWide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetEventCallbacksWide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateProcess2<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PSTR, environment: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateProcess2Wide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PWSTR, environment: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateProcessAndAttach2<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PSTR, environment: super::super::super::Foundation::PSTR, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateProcessAndAttach2Wide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PWSTR, environment: super::super::super::Foundation::PWSTR, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PushOutputLinePrefix<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newprefix: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PushOutputLinePrefixWide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newprefix: super::super::super::Foundation::PWSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PopOutputLinePrefix<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberInputCallbacks<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberOutputCallbacks<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberEventCallbacks<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, eventflags: u32, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetQuitLockString<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetQuitLockString<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, string: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetQuitLockStringWide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetQuitLockStringWide<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, string: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetEventContextCallbacks<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetClientContext<Impl: IDebugClient7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            AttachKernel::<Impl, IMPL_OFFSET>,
            GetKernelConnectionOptions::<Impl, IMPL_OFFSET>,
            SetKernelConnectionOptions::<Impl, IMPL_OFFSET>,
            StartProcessServer::<Impl, IMPL_OFFSET>,
            ConnectProcessServer::<Impl, IMPL_OFFSET>,
            DisconnectProcessServer::<Impl, IMPL_OFFSET>,
            GetRunningProcessSystemIds::<Impl, IMPL_OFFSET>,
            GetRunningProcessSystemIdByExecutableName::<Impl, IMPL_OFFSET>,
            GetRunningProcessDescription::<Impl, IMPL_OFFSET>,
            AttachProcess::<Impl, IMPL_OFFSET>,
            CreateProcessA::<Impl, IMPL_OFFSET>,
            CreateProcessAndAttach::<Impl, IMPL_OFFSET>,
            GetProcessOptions::<Impl, IMPL_OFFSET>,
            AddProcessOptions::<Impl, IMPL_OFFSET>,
            RemoveProcessOptions::<Impl, IMPL_OFFSET>,
            SetProcessOptions::<Impl, IMPL_OFFSET>,
            OpenDumpFile::<Impl, IMPL_OFFSET>,
            WriteDumpFile::<Impl, IMPL_OFFSET>,
            ConnectSession::<Impl, IMPL_OFFSET>,
            StartServer::<Impl, IMPL_OFFSET>,
            OutputServers::<Impl, IMPL_OFFSET>,
            TerminateProcesses::<Impl, IMPL_OFFSET>,
            DetachProcesses::<Impl, IMPL_OFFSET>,
            EndSession::<Impl, IMPL_OFFSET>,
            GetExitCode::<Impl, IMPL_OFFSET>,
            DispatchCallbacks::<Impl, IMPL_OFFSET>,
            ExitDispatch::<Impl, IMPL_OFFSET>,
            CreateClient::<Impl, IMPL_OFFSET>,
            GetInputCallbacks::<Impl, IMPL_OFFSET>,
            SetInputCallbacks::<Impl, IMPL_OFFSET>,
            GetOutputCallbacks::<Impl, IMPL_OFFSET>,
            SetOutputCallbacks::<Impl, IMPL_OFFSET>,
            GetOutputMask::<Impl, IMPL_OFFSET>,
            SetOutputMask::<Impl, IMPL_OFFSET>,
            GetOtherOutputMask::<Impl, IMPL_OFFSET>,
            SetOtherOutputMask::<Impl, IMPL_OFFSET>,
            GetOutputWidth::<Impl, IMPL_OFFSET>,
            SetOutputWidth::<Impl, IMPL_OFFSET>,
            GetOutputLinePrefix::<Impl, IMPL_OFFSET>,
            SetOutputLinePrefix::<Impl, IMPL_OFFSET>,
            GetIdentity::<Impl, IMPL_OFFSET>,
            OutputIdentity::<Impl, IMPL_OFFSET>,
            GetEventCallbacks::<Impl, IMPL_OFFSET>,
            SetEventCallbacks::<Impl, IMPL_OFFSET>,
            FlushCallbacks::<Impl, IMPL_OFFSET>,
            WriteDumpFile2::<Impl, IMPL_OFFSET>,
            AddDumpInformationFile::<Impl, IMPL_OFFSET>,
            EndProcessServer::<Impl, IMPL_OFFSET>,
            WaitForProcessServerEnd::<Impl, IMPL_OFFSET>,
            IsKernelDebuggerEnabled::<Impl, IMPL_OFFSET>,
            TerminateCurrentProcess::<Impl, IMPL_OFFSET>,
            DetachCurrentProcess::<Impl, IMPL_OFFSET>,
            AbandonCurrentProcess::<Impl, IMPL_OFFSET>,
            GetRunningProcessSystemIdByExecutableNameWide::<Impl, IMPL_OFFSET>,
            GetRunningProcessDescriptionWide::<Impl, IMPL_OFFSET>,
            CreateProcessWide::<Impl, IMPL_OFFSET>,
            CreateProcessAndAttachWide::<Impl, IMPL_OFFSET>,
            OpenDumpFileWide::<Impl, IMPL_OFFSET>,
            WriteDumpFileWide::<Impl, IMPL_OFFSET>,
            AddDumpInformationFileWide::<Impl, IMPL_OFFSET>,
            GetNumberDumpFiles::<Impl, IMPL_OFFSET>,
            GetDumpFile::<Impl, IMPL_OFFSET>,
            GetDumpFileWide::<Impl, IMPL_OFFSET>,
            AttachKernelWide::<Impl, IMPL_OFFSET>,
            GetKernelConnectionOptionsWide::<Impl, IMPL_OFFSET>,
            SetKernelConnectionOptionsWide::<Impl, IMPL_OFFSET>,
            StartProcessServerWide::<Impl, IMPL_OFFSET>,
            ConnectProcessServerWide::<Impl, IMPL_OFFSET>,
            StartServerWide::<Impl, IMPL_OFFSET>,
            OutputServersWide::<Impl, IMPL_OFFSET>,
            GetOutputCallbacksWide::<Impl, IMPL_OFFSET>,
            SetOutputCallbacksWide::<Impl, IMPL_OFFSET>,
            GetOutputLinePrefixWide::<Impl, IMPL_OFFSET>,
            SetOutputLinePrefixWide::<Impl, IMPL_OFFSET>,
            GetIdentityWide::<Impl, IMPL_OFFSET>,
            OutputIdentityWide::<Impl, IMPL_OFFSET>,
            GetEventCallbacksWide::<Impl, IMPL_OFFSET>,
            SetEventCallbacksWide::<Impl, IMPL_OFFSET>,
            CreateProcess2::<Impl, IMPL_OFFSET>,
            CreateProcess2Wide::<Impl, IMPL_OFFSET>,
            CreateProcessAndAttach2::<Impl, IMPL_OFFSET>,
            CreateProcessAndAttach2Wide::<Impl, IMPL_OFFSET>,
            PushOutputLinePrefix::<Impl, IMPL_OFFSET>,
            PushOutputLinePrefixWide::<Impl, IMPL_OFFSET>,
            PopOutputLinePrefix::<Impl, IMPL_OFFSET>,
            GetNumberInputCallbacks::<Impl, IMPL_OFFSET>,
            GetNumberOutputCallbacks::<Impl, IMPL_OFFSET>,
            GetNumberEventCallbacks::<Impl, IMPL_OFFSET>,
            GetQuitLockString::<Impl, IMPL_OFFSET>,
            SetQuitLockString::<Impl, IMPL_OFFSET>,
            GetQuitLockStringWide::<Impl, IMPL_OFFSET>,
            SetQuitLockStringWide::<Impl, IMPL_OFFSET>,
            SetEventContextCallbacks::<Impl, IMPL_OFFSET>,
            SetClientContext::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugClient7 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugClient8Impl: Sized {
    fn AttachKernel();
    fn GetKernelConnectionOptions();
    fn SetKernelConnectionOptions();
    fn StartProcessServer();
    fn ConnectProcessServer();
    fn DisconnectProcessServer();
    fn GetRunningProcessSystemIds();
    fn GetRunningProcessSystemIdByExecutableName();
    fn GetRunningProcessDescription();
    fn AttachProcess();
    fn CreateProcessA();
    fn CreateProcessAndAttach();
    fn GetProcessOptions();
    fn AddProcessOptions();
    fn RemoveProcessOptions();
    fn SetProcessOptions();
    fn OpenDumpFile();
    fn WriteDumpFile();
    fn ConnectSession();
    fn StartServer();
    fn OutputServers();
    fn TerminateProcesses();
    fn DetachProcesses();
    fn EndSession();
    fn GetExitCode();
    fn DispatchCallbacks();
    fn ExitDispatch();
    fn CreateClient();
    fn GetInputCallbacks();
    fn SetInputCallbacks();
    fn GetOutputCallbacks();
    fn SetOutputCallbacks();
    fn GetOutputMask();
    fn SetOutputMask();
    fn GetOtherOutputMask();
    fn SetOtherOutputMask();
    fn GetOutputWidth();
    fn SetOutputWidth();
    fn GetOutputLinePrefix();
    fn SetOutputLinePrefix();
    fn GetIdentity();
    fn OutputIdentity();
    fn GetEventCallbacks();
    fn SetEventCallbacks();
    fn FlushCallbacks();
    fn WriteDumpFile2();
    fn AddDumpInformationFile();
    fn EndProcessServer();
    fn WaitForProcessServerEnd();
    fn IsKernelDebuggerEnabled();
    fn TerminateCurrentProcess();
    fn DetachCurrentProcess();
    fn AbandonCurrentProcess();
    fn GetRunningProcessSystemIdByExecutableNameWide();
    fn GetRunningProcessDescriptionWide();
    fn CreateProcessWide();
    fn CreateProcessAndAttachWide();
    fn OpenDumpFileWide();
    fn WriteDumpFileWide();
    fn AddDumpInformationFileWide();
    fn GetNumberDumpFiles();
    fn GetDumpFile();
    fn GetDumpFileWide();
    fn AttachKernelWide();
    fn GetKernelConnectionOptionsWide();
    fn SetKernelConnectionOptionsWide();
    fn StartProcessServerWide();
    fn ConnectProcessServerWide();
    fn StartServerWide();
    fn OutputServersWide();
    fn GetOutputCallbacksWide();
    fn SetOutputCallbacksWide();
    fn GetOutputLinePrefixWide();
    fn SetOutputLinePrefixWide();
    fn GetIdentityWide();
    fn OutputIdentityWide();
    fn GetEventCallbacksWide();
    fn SetEventCallbacksWide();
    fn CreateProcess2();
    fn CreateProcess2Wide();
    fn CreateProcessAndAttach2();
    fn CreateProcessAndAttach2Wide();
    fn PushOutputLinePrefix();
    fn PushOutputLinePrefixWide();
    fn PopOutputLinePrefix();
    fn GetNumberInputCallbacks();
    fn GetNumberOutputCallbacks();
    fn GetNumberEventCallbacks();
    fn GetQuitLockString();
    fn SetQuitLockString();
    fn GetQuitLockStringWide();
    fn SetQuitLockStringWide();
    fn SetEventContextCallbacks();
    fn SetClientContext();
    fn OpenDumpFileWide2();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugClient8Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugClient8Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugClient8Vtbl {
        unsafe extern "system" fn AttachKernel<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, connectoptions: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetKernelConnectionOptions<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetKernelConnectionOptions<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StartProcessServer<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, options: super::super::super::Foundation::PSTR, reserved: *const ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ConnectProcessServer<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, remoteoptions: super::super::super::Foundation::PSTR, server: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DisconnectProcessServer<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRunningProcessSystemIds<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableName<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, exename: super::super::super::Foundation::PSTR, flags: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRunningProcessDescription<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AttachProcess<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateProcessA<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateProcessAndAttach<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetProcessOptions<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddProcessOptions<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveProcessOptions<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetProcessOptions<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OpenDumpFile<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteDumpFile<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ConnectSession<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, historylimit: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StartServer<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputServers<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, machine: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn TerminateProcesses<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DetachProcesses<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EndSession<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExitCode<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, code: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DispatchCallbacks<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ExitDispatch<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateClient<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetInputCallbacks<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetInputCallbacks<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOutputCallbacks<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOutputCallbacks<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOutputMask<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOutputMask<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOtherOutputMask<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOtherOutputMask<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOutputWidth<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, columns: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOutputWidth<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, columns: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOutputLinePrefix<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOutputLinePrefix<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prefix: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetIdentity<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputIdentity<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEventCallbacks<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetEventCallbacks<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FlushCallbacks<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteDumpFile2<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddDumpInformationFile<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, infofile: super::super::super::Foundation::PSTR, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EndProcessServer<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WaitForProcessServerEnd<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsKernelDebuggerEnabled<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn TerminateCurrentProcess<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DetachCurrentProcess<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AbandonCurrentProcess<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableNameWide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, exename: super::super::super::Foundation::PWSTR, flags: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRunningProcessDescriptionWide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PWSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateProcessWide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateProcessAndAttachWide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OpenDumpFileWide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, filename: super::super::super::Foundation::PWSTR, filehandle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteDumpFileWide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, filename: super::super::super::Foundation::PWSTR, filehandle: u64, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddDumpInformationFileWide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, filename: super::super::super::Foundation::PWSTR, filehandle: u64, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberDumpFiles<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDumpFile<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDumpFileWide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AttachKernelWide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, connectoptions: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetKernelConnectionOptionsWide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetKernelConnectionOptionsWide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StartProcessServerWide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, options: super::super::super::Foundation::PWSTR, reserved: *const ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ConnectProcessServerWide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, remoteoptions: super::super::super::Foundation::PWSTR, server: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StartServerWide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputServersWide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, machine: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOutputCallbacksWide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOutputCallbacksWide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOutputLinePrefixWide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetOutputLinePrefixWide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prefix: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetIdentityWide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputIdentityWide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEventCallbacksWide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetEventCallbacksWide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateProcess2<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PSTR, environment: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateProcess2Wide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PWSTR, environment: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateProcessAndAttach2<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PSTR, environment: super::super::super::Foundation::PSTR, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateProcessAndAttach2Wide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PWSTR, environment: super::super::super::Foundation::PWSTR, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PushOutputLinePrefix<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newprefix: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PushOutputLinePrefixWide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newprefix: super::super::super::Foundation::PWSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PopOutputLinePrefix<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberInputCallbacks<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberOutputCallbacks<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberEventCallbacks<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, eventflags: u32, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetQuitLockString<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetQuitLockString<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, string: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetQuitLockStringWide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetQuitLockStringWide<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, string: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetEventContextCallbacks<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetClientContext<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OpenDumpFileWide2<Impl: IDebugClient8Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, filename: super::super::super::Foundation::PWSTR, filehandle: u64, alternatearch: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            AttachKernel::<Impl, IMPL_OFFSET>,
            GetKernelConnectionOptions::<Impl, IMPL_OFFSET>,
            SetKernelConnectionOptions::<Impl, IMPL_OFFSET>,
            StartProcessServer::<Impl, IMPL_OFFSET>,
            ConnectProcessServer::<Impl, IMPL_OFFSET>,
            DisconnectProcessServer::<Impl, IMPL_OFFSET>,
            GetRunningProcessSystemIds::<Impl, IMPL_OFFSET>,
            GetRunningProcessSystemIdByExecutableName::<Impl, IMPL_OFFSET>,
            GetRunningProcessDescription::<Impl, IMPL_OFFSET>,
            AttachProcess::<Impl, IMPL_OFFSET>,
            CreateProcessA::<Impl, IMPL_OFFSET>,
            CreateProcessAndAttach::<Impl, IMPL_OFFSET>,
            GetProcessOptions::<Impl, IMPL_OFFSET>,
            AddProcessOptions::<Impl, IMPL_OFFSET>,
            RemoveProcessOptions::<Impl, IMPL_OFFSET>,
            SetProcessOptions::<Impl, IMPL_OFFSET>,
            OpenDumpFile::<Impl, IMPL_OFFSET>,
            WriteDumpFile::<Impl, IMPL_OFFSET>,
            ConnectSession::<Impl, IMPL_OFFSET>,
            StartServer::<Impl, IMPL_OFFSET>,
            OutputServers::<Impl, IMPL_OFFSET>,
            TerminateProcesses::<Impl, IMPL_OFFSET>,
            DetachProcesses::<Impl, IMPL_OFFSET>,
            EndSession::<Impl, IMPL_OFFSET>,
            GetExitCode::<Impl, IMPL_OFFSET>,
            DispatchCallbacks::<Impl, IMPL_OFFSET>,
            ExitDispatch::<Impl, IMPL_OFFSET>,
            CreateClient::<Impl, IMPL_OFFSET>,
            GetInputCallbacks::<Impl, IMPL_OFFSET>,
            SetInputCallbacks::<Impl, IMPL_OFFSET>,
            GetOutputCallbacks::<Impl, IMPL_OFFSET>,
            SetOutputCallbacks::<Impl, IMPL_OFFSET>,
            GetOutputMask::<Impl, IMPL_OFFSET>,
            SetOutputMask::<Impl, IMPL_OFFSET>,
            GetOtherOutputMask::<Impl, IMPL_OFFSET>,
            SetOtherOutputMask::<Impl, IMPL_OFFSET>,
            GetOutputWidth::<Impl, IMPL_OFFSET>,
            SetOutputWidth::<Impl, IMPL_OFFSET>,
            GetOutputLinePrefix::<Impl, IMPL_OFFSET>,
            SetOutputLinePrefix::<Impl, IMPL_OFFSET>,
            GetIdentity::<Impl, IMPL_OFFSET>,
            OutputIdentity::<Impl, IMPL_OFFSET>,
            GetEventCallbacks::<Impl, IMPL_OFFSET>,
            SetEventCallbacks::<Impl, IMPL_OFFSET>,
            FlushCallbacks::<Impl, IMPL_OFFSET>,
            WriteDumpFile2::<Impl, IMPL_OFFSET>,
            AddDumpInformationFile::<Impl, IMPL_OFFSET>,
            EndProcessServer::<Impl, IMPL_OFFSET>,
            WaitForProcessServerEnd::<Impl, IMPL_OFFSET>,
            IsKernelDebuggerEnabled::<Impl, IMPL_OFFSET>,
            TerminateCurrentProcess::<Impl, IMPL_OFFSET>,
            DetachCurrentProcess::<Impl, IMPL_OFFSET>,
            AbandonCurrentProcess::<Impl, IMPL_OFFSET>,
            GetRunningProcessSystemIdByExecutableNameWide::<Impl, IMPL_OFFSET>,
            GetRunningProcessDescriptionWide::<Impl, IMPL_OFFSET>,
            CreateProcessWide::<Impl, IMPL_OFFSET>,
            CreateProcessAndAttachWide::<Impl, IMPL_OFFSET>,
            OpenDumpFileWide::<Impl, IMPL_OFFSET>,
            WriteDumpFileWide::<Impl, IMPL_OFFSET>,
            AddDumpInformationFileWide::<Impl, IMPL_OFFSET>,
            GetNumberDumpFiles::<Impl, IMPL_OFFSET>,
            GetDumpFile::<Impl, IMPL_OFFSET>,
            GetDumpFileWide::<Impl, IMPL_OFFSET>,
            AttachKernelWide::<Impl, IMPL_OFFSET>,
            GetKernelConnectionOptionsWide::<Impl, IMPL_OFFSET>,
            SetKernelConnectionOptionsWide::<Impl, IMPL_OFFSET>,
            StartProcessServerWide::<Impl, IMPL_OFFSET>,
            ConnectProcessServerWide::<Impl, IMPL_OFFSET>,
            StartServerWide::<Impl, IMPL_OFFSET>,
            OutputServersWide::<Impl, IMPL_OFFSET>,
            GetOutputCallbacksWide::<Impl, IMPL_OFFSET>,
            SetOutputCallbacksWide::<Impl, IMPL_OFFSET>,
            GetOutputLinePrefixWide::<Impl, IMPL_OFFSET>,
            SetOutputLinePrefixWide::<Impl, IMPL_OFFSET>,
            GetIdentityWide::<Impl, IMPL_OFFSET>,
            OutputIdentityWide::<Impl, IMPL_OFFSET>,
            GetEventCallbacksWide::<Impl, IMPL_OFFSET>,
            SetEventCallbacksWide::<Impl, IMPL_OFFSET>,
            CreateProcess2::<Impl, IMPL_OFFSET>,
            CreateProcess2Wide::<Impl, IMPL_OFFSET>,
            CreateProcessAndAttach2::<Impl, IMPL_OFFSET>,
            CreateProcessAndAttach2Wide::<Impl, IMPL_OFFSET>,
            PushOutputLinePrefix::<Impl, IMPL_OFFSET>,
            PushOutputLinePrefixWide::<Impl, IMPL_OFFSET>,
            PopOutputLinePrefix::<Impl, IMPL_OFFSET>,
            GetNumberInputCallbacks::<Impl, IMPL_OFFSET>,
            GetNumberOutputCallbacks::<Impl, IMPL_OFFSET>,
            GetNumberEventCallbacks::<Impl, IMPL_OFFSET>,
            GetQuitLockString::<Impl, IMPL_OFFSET>,
            SetQuitLockString::<Impl, IMPL_OFFSET>,
            GetQuitLockStringWide::<Impl, IMPL_OFFSET>,
            SetQuitLockStringWide::<Impl, IMPL_OFFSET>,
            SetEventContextCallbacks::<Impl, IMPL_OFFSET>,
            SetClientContext::<Impl, IMPL_OFFSET>,
            OpenDumpFileWide2::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugClient8 as ::windows::core::Interface>::IID
    }
}
pub trait IDebugCodeContextImpl: Sized {
    fn GetDocumentContext();
    fn SetBreakPoint();
}
impl IDebugCodeContextVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugCodeContextImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugCodeContextVtbl {
        unsafe extern "system" fn GetDocumentContext<Impl: IDebugCodeContextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppsc: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetBreakPoint<Impl: IDebugCodeContextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bps: BREAKPOINT_STATE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetDocumentContext::<Impl, IMPL_OFFSET>, SetBreakPoint::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugCodeContext as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
pub trait IDebugControlImpl: Sized {
    fn GetInterrupt();
    fn SetInterrupt();
    fn GetInterruptTimeout();
    fn SetInterruptTimeout();
    fn GetLogFile();
    fn OpenLogFile();
    fn CloseLogFile();
    fn GetLogMask();
    fn SetLogMask();
    fn Input();
    fn ReturnInput();
    fn Output();
    fn OutputVaList();
    fn ControlledOutput();
    fn ControlledOutputVaList();
    fn OutputPrompt();
    fn OutputPromptVaList();
    fn GetPromptText();
    fn OutputCurrentState();
    fn OutputVersionInformation();
    fn GetNotifyEventHandle();
    fn SetNotifyEventHandle();
    fn Assemble();
    fn Disassemble();
    fn GetDisassembleEffectiveOffset();
    fn OutputDisassembly();
    fn OutputDisassemblyLines();
    fn GetNearInstruction();
    fn GetStackTrace();
    fn GetReturnOffset();
    fn OutputStackTrace();
    fn GetDebuggeeType();
    fn GetActualProcessorType();
    fn GetExecutingProcessorType();
    fn GetNumberPossibleExecutingProcessorTypes();
    fn GetPossibleExecutingProcessorTypes();
    fn GetNumberProcessors();
    fn GetSystemVersion();
    fn GetPageSize();
    fn IsPointer64Bit();
    fn ReadBugCheckData();
    fn GetNumberSupportedProcessorTypes();
    fn GetSupportedProcessorTypes();
    fn GetProcessorTypeNames();
    fn GetEffectiveProcessorType();
    fn SetEffectiveProcessorType();
    fn GetExecutionStatus();
    fn SetExecutionStatus();
    fn GetCodeLevel();
    fn SetCodeLevel();
    fn GetEngineOptions();
    fn AddEngineOptions();
    fn RemoveEngineOptions();
    fn SetEngineOptions();
    fn GetSystemErrorControl();
    fn SetSystemErrorControl();
    fn GetTextMacro();
    fn SetTextMacro();
    fn GetRadix();
    fn SetRadix();
    fn Evaluate();
    fn CoerceValue();
    fn CoerceValues();
    fn Execute();
    fn ExecuteCommandFile();
    fn GetNumberBreakpoints();
    fn GetBreakpointByIndex();
    fn GetBreakpointById();
    fn GetBreakpointParameters();
    fn AddBreakpoint();
    fn RemoveBreakpoint();
    fn AddExtension();
    fn RemoveExtension();
    fn GetExtensionByPath();
    fn CallExtension();
    fn GetExtensionFunction();
    fn GetWindbgExtensionApis32();
    fn GetWindbgExtensionApis64();
    fn GetNumberEventFilters();
    fn GetEventFilterText();
    fn GetEventFilterCommand();
    fn SetEventFilterCommand();
    fn GetSpecificFilterParameters();
    fn SetSpecificFilterParameters();
    fn GetSpecificFilterArgument();
    fn SetSpecificFilterArgument();
    fn GetExceptionFilterParameters();
    fn SetExceptionFilterParameters();
    fn GetExceptionFilterSecondCommand();
    fn SetExceptionFilterSecondCommand();
    fn WaitForEvent();
    fn GetLastEventInformation();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
impl IDebugControlVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugControlImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugControlVtbl {
        unsafe extern "system" fn GetInterrupt<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetInterrupt<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetInterruptTimeout<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, seconds: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetInterruptTimeout<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, seconds: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLogFile<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OpenLogFile<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PSTR, append: super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CloseLogFile<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLogMask<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetLogMask<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Input<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReturnInput<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Output<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputVaList<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ControlledOutput<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ControlledOutputVaList<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputPrompt<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputPromptVaList<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPromptText<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputCurrentState<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputVersionInformation<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNotifyEventHandle<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetNotifyEventHandle<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Assemble<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, instr: super::super::super::Foundation::PSTR, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Disassemble<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDisassembleEffectiveOffset<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputDisassembly<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, flags: u32, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputDisassemblyLines<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNearInstruction<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, nearoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetStackTrace<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetReturnOffset<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputStackTrace<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDebuggeeType<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, class: *mut u32, qualifier: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetActualProcessorType<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExecutingProcessorType<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberPossibleExecutingProcessorTypes<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPossibleExecutingProcessorTypes<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberProcessors<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSystemVersion<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: super::super::super::Foundation::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: super::super::super::Foundation::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPageSize<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, size: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsPointer64Bit<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadBugCheckData<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberSupportedProcessorTypes<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSupportedProcessorTypes<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetProcessorTypeNames<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEffectiveProcessorType<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetEffectiveProcessorType<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExecutionStatus<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, status: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetExecutionStatus<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, status: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCodeLevel<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, level: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetCodeLevel<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, level: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEngineOptions<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddEngineOptions<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveEngineOptions<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetEngineOptions<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSystemErrorControl<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSystemErrorControl<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputlevel: u32, breaklevel: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTextMacro<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, slot: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTextMacro<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, slot: u32, r#macro: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRadix<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, radix: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetRadix<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, radix: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Evaluate<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, expression: super::super::super::Foundation::PSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CoerceValue<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#in: *const DEBUG_VALUE, outtype: u32, out: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CoerceValues<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Execute<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, command: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ExecuteCommandFile<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, commandfile: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberBreakpoints<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBreakpointByIndex<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBreakpointById<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBreakpointParameters<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddBreakpoint<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32, desiredid: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveBreakpoint<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bp: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddExtension<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR, flags: u32, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveExtension<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExtensionByPath<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CallExtension<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, function: super::super::super::Foundation::PSTR, arguments: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExtensionFunction<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, funcname: super::super::super::Foundation::PSTR, function: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetWindbgExtensionApis32<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetWindbgExtensionApis64<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberEventFilters<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEventFilterText<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEventFilterCommand<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetEventFilterCommand<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSpecificFilterParameters<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSpecificFilterParameters<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSpecificFilterArgument<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSpecificFilterArgument<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, argument: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExceptionFilterParameters<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetExceptionFilterParameters<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExceptionFilterSecondCommand<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetExceptionFilterSecondCommand<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WaitForEvent<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLastEventInformation<Impl: IDebugControlImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetInterrupt::<Impl, IMPL_OFFSET>,
            SetInterrupt::<Impl, IMPL_OFFSET>,
            GetInterruptTimeout::<Impl, IMPL_OFFSET>,
            SetInterruptTimeout::<Impl, IMPL_OFFSET>,
            GetLogFile::<Impl, IMPL_OFFSET>,
            OpenLogFile::<Impl, IMPL_OFFSET>,
            CloseLogFile::<Impl, IMPL_OFFSET>,
            GetLogMask::<Impl, IMPL_OFFSET>,
            SetLogMask::<Impl, IMPL_OFFSET>,
            Input::<Impl, IMPL_OFFSET>,
            ReturnInput::<Impl, IMPL_OFFSET>,
            Output::<Impl, IMPL_OFFSET>,
            OutputVaList::<Impl, IMPL_OFFSET>,
            ControlledOutput::<Impl, IMPL_OFFSET>,
            ControlledOutputVaList::<Impl, IMPL_OFFSET>,
            OutputPrompt::<Impl, IMPL_OFFSET>,
            OutputPromptVaList::<Impl, IMPL_OFFSET>,
            GetPromptText::<Impl, IMPL_OFFSET>,
            OutputCurrentState::<Impl, IMPL_OFFSET>,
            OutputVersionInformation::<Impl, IMPL_OFFSET>,
            GetNotifyEventHandle::<Impl, IMPL_OFFSET>,
            SetNotifyEventHandle::<Impl, IMPL_OFFSET>,
            Assemble::<Impl, IMPL_OFFSET>,
            Disassemble::<Impl, IMPL_OFFSET>,
            GetDisassembleEffectiveOffset::<Impl, IMPL_OFFSET>,
            OutputDisassembly::<Impl, IMPL_OFFSET>,
            OutputDisassemblyLines::<Impl, IMPL_OFFSET>,
            GetNearInstruction::<Impl, IMPL_OFFSET>,
            GetStackTrace::<Impl, IMPL_OFFSET>,
            GetReturnOffset::<Impl, IMPL_OFFSET>,
            OutputStackTrace::<Impl, IMPL_OFFSET>,
            GetDebuggeeType::<Impl, IMPL_OFFSET>,
            GetActualProcessorType::<Impl, IMPL_OFFSET>,
            GetExecutingProcessorType::<Impl, IMPL_OFFSET>,
            GetNumberPossibleExecutingProcessorTypes::<Impl, IMPL_OFFSET>,
            GetPossibleExecutingProcessorTypes::<Impl, IMPL_OFFSET>,
            GetNumberProcessors::<Impl, IMPL_OFFSET>,
            GetSystemVersion::<Impl, IMPL_OFFSET>,
            GetPageSize::<Impl, IMPL_OFFSET>,
            IsPointer64Bit::<Impl, IMPL_OFFSET>,
            ReadBugCheckData::<Impl, IMPL_OFFSET>,
            GetNumberSupportedProcessorTypes::<Impl, IMPL_OFFSET>,
            GetSupportedProcessorTypes::<Impl, IMPL_OFFSET>,
            GetProcessorTypeNames::<Impl, IMPL_OFFSET>,
            GetEffectiveProcessorType::<Impl, IMPL_OFFSET>,
            SetEffectiveProcessorType::<Impl, IMPL_OFFSET>,
            GetExecutionStatus::<Impl, IMPL_OFFSET>,
            SetExecutionStatus::<Impl, IMPL_OFFSET>,
            GetCodeLevel::<Impl, IMPL_OFFSET>,
            SetCodeLevel::<Impl, IMPL_OFFSET>,
            GetEngineOptions::<Impl, IMPL_OFFSET>,
            AddEngineOptions::<Impl, IMPL_OFFSET>,
            RemoveEngineOptions::<Impl, IMPL_OFFSET>,
            SetEngineOptions::<Impl, IMPL_OFFSET>,
            GetSystemErrorControl::<Impl, IMPL_OFFSET>,
            SetSystemErrorControl::<Impl, IMPL_OFFSET>,
            GetTextMacro::<Impl, IMPL_OFFSET>,
            SetTextMacro::<Impl, IMPL_OFFSET>,
            GetRadix::<Impl, IMPL_OFFSET>,
            SetRadix::<Impl, IMPL_OFFSET>,
            Evaluate::<Impl, IMPL_OFFSET>,
            CoerceValue::<Impl, IMPL_OFFSET>,
            CoerceValues::<Impl, IMPL_OFFSET>,
            Execute::<Impl, IMPL_OFFSET>,
            ExecuteCommandFile::<Impl, IMPL_OFFSET>,
            GetNumberBreakpoints::<Impl, IMPL_OFFSET>,
            GetBreakpointByIndex::<Impl, IMPL_OFFSET>,
            GetBreakpointById::<Impl, IMPL_OFFSET>,
            GetBreakpointParameters::<Impl, IMPL_OFFSET>,
            AddBreakpoint::<Impl, IMPL_OFFSET>,
            RemoveBreakpoint::<Impl, IMPL_OFFSET>,
            AddExtension::<Impl, IMPL_OFFSET>,
            RemoveExtension::<Impl, IMPL_OFFSET>,
            GetExtensionByPath::<Impl, IMPL_OFFSET>,
            CallExtension::<Impl, IMPL_OFFSET>,
            GetExtensionFunction::<Impl, IMPL_OFFSET>,
            GetWindbgExtensionApis32::<Impl, IMPL_OFFSET>,
            GetWindbgExtensionApis64::<Impl, IMPL_OFFSET>,
            GetNumberEventFilters::<Impl, IMPL_OFFSET>,
            GetEventFilterText::<Impl, IMPL_OFFSET>,
            GetEventFilterCommand::<Impl, IMPL_OFFSET>,
            SetEventFilterCommand::<Impl, IMPL_OFFSET>,
            GetSpecificFilterParameters::<Impl, IMPL_OFFSET>,
            SetSpecificFilterParameters::<Impl, IMPL_OFFSET>,
            GetSpecificFilterArgument::<Impl, IMPL_OFFSET>,
            SetSpecificFilterArgument::<Impl, IMPL_OFFSET>,
            GetExceptionFilterParameters::<Impl, IMPL_OFFSET>,
            SetExceptionFilterParameters::<Impl, IMPL_OFFSET>,
            GetExceptionFilterSecondCommand::<Impl, IMPL_OFFSET>,
            SetExceptionFilterSecondCommand::<Impl, IMPL_OFFSET>,
            WaitForEvent::<Impl, IMPL_OFFSET>,
            GetLastEventInformation::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugControl as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
pub trait IDebugControl2Impl: Sized {
    fn GetInterrupt();
    fn SetInterrupt();
    fn GetInterruptTimeout();
    fn SetInterruptTimeout();
    fn GetLogFile();
    fn OpenLogFile();
    fn CloseLogFile();
    fn GetLogMask();
    fn SetLogMask();
    fn Input();
    fn ReturnInput();
    fn Output();
    fn OutputVaList();
    fn ControlledOutput();
    fn ControlledOutputVaList();
    fn OutputPrompt();
    fn OutputPromptVaList();
    fn GetPromptText();
    fn OutputCurrentState();
    fn OutputVersionInformation();
    fn GetNotifyEventHandle();
    fn SetNotifyEventHandle();
    fn Assemble();
    fn Disassemble();
    fn GetDisassembleEffectiveOffset();
    fn OutputDisassembly();
    fn OutputDisassemblyLines();
    fn GetNearInstruction();
    fn GetStackTrace();
    fn GetReturnOffset();
    fn OutputStackTrace();
    fn GetDebuggeeType();
    fn GetActualProcessorType();
    fn GetExecutingProcessorType();
    fn GetNumberPossibleExecutingProcessorTypes();
    fn GetPossibleExecutingProcessorTypes();
    fn GetNumberProcessors();
    fn GetSystemVersion();
    fn GetPageSize();
    fn IsPointer64Bit();
    fn ReadBugCheckData();
    fn GetNumberSupportedProcessorTypes();
    fn GetSupportedProcessorTypes();
    fn GetProcessorTypeNames();
    fn GetEffectiveProcessorType();
    fn SetEffectiveProcessorType();
    fn GetExecutionStatus();
    fn SetExecutionStatus();
    fn GetCodeLevel();
    fn SetCodeLevel();
    fn GetEngineOptions();
    fn AddEngineOptions();
    fn RemoveEngineOptions();
    fn SetEngineOptions();
    fn GetSystemErrorControl();
    fn SetSystemErrorControl();
    fn GetTextMacro();
    fn SetTextMacro();
    fn GetRadix();
    fn SetRadix();
    fn Evaluate();
    fn CoerceValue();
    fn CoerceValues();
    fn Execute();
    fn ExecuteCommandFile();
    fn GetNumberBreakpoints();
    fn GetBreakpointByIndex();
    fn GetBreakpointById();
    fn GetBreakpointParameters();
    fn AddBreakpoint();
    fn RemoveBreakpoint();
    fn AddExtension();
    fn RemoveExtension();
    fn GetExtensionByPath();
    fn CallExtension();
    fn GetExtensionFunction();
    fn GetWindbgExtensionApis32();
    fn GetWindbgExtensionApis64();
    fn GetNumberEventFilters();
    fn GetEventFilterText();
    fn GetEventFilterCommand();
    fn SetEventFilterCommand();
    fn GetSpecificFilterParameters();
    fn SetSpecificFilterParameters();
    fn GetSpecificFilterArgument();
    fn SetSpecificFilterArgument();
    fn GetExceptionFilterParameters();
    fn SetExceptionFilterParameters();
    fn GetExceptionFilterSecondCommand();
    fn SetExceptionFilterSecondCommand();
    fn WaitForEvent();
    fn GetLastEventInformation();
    fn GetCurrentTimeDate();
    fn GetCurrentSystemUpTime();
    fn GetDumpFormatFlags();
    fn GetNumberTextReplacements();
    fn GetTextReplacement();
    fn SetTextReplacement();
    fn RemoveTextReplacements();
    fn OutputTextReplacements();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
impl IDebugControl2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugControl2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugControl2Vtbl {
        unsafe extern "system" fn GetInterrupt<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetInterrupt<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetInterruptTimeout<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, seconds: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetInterruptTimeout<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, seconds: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLogFile<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OpenLogFile<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PSTR, append: super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CloseLogFile<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLogMask<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetLogMask<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Input<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReturnInput<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Output<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputVaList<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ControlledOutput<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ControlledOutputVaList<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputPrompt<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputPromptVaList<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPromptText<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputCurrentState<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputVersionInformation<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNotifyEventHandle<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetNotifyEventHandle<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Assemble<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, instr: super::super::super::Foundation::PSTR, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Disassemble<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDisassembleEffectiveOffset<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputDisassembly<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, flags: u32, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputDisassemblyLines<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNearInstruction<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, nearoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetStackTrace<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetReturnOffset<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputStackTrace<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDebuggeeType<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, class: *mut u32, qualifier: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetActualProcessorType<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExecutingProcessorType<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberPossibleExecutingProcessorTypes<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPossibleExecutingProcessorTypes<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberProcessors<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSystemVersion<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: super::super::super::Foundation::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: super::super::super::Foundation::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPageSize<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, size: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsPointer64Bit<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadBugCheckData<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberSupportedProcessorTypes<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSupportedProcessorTypes<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetProcessorTypeNames<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEffectiveProcessorType<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetEffectiveProcessorType<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExecutionStatus<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, status: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetExecutionStatus<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, status: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCodeLevel<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, level: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetCodeLevel<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, level: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEngineOptions<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddEngineOptions<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveEngineOptions<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetEngineOptions<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSystemErrorControl<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSystemErrorControl<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputlevel: u32, breaklevel: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTextMacro<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, slot: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTextMacro<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, slot: u32, r#macro: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRadix<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, radix: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetRadix<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, radix: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Evaluate<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, expression: super::super::super::Foundation::PSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CoerceValue<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#in: *const DEBUG_VALUE, outtype: u32, out: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CoerceValues<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Execute<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, command: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ExecuteCommandFile<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, commandfile: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberBreakpoints<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBreakpointByIndex<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBreakpointById<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBreakpointParameters<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddBreakpoint<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32, desiredid: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveBreakpoint<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bp: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddExtension<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR, flags: u32, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveExtension<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExtensionByPath<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CallExtension<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, function: super::super::super::Foundation::PSTR, arguments: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExtensionFunction<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, funcname: super::super::super::Foundation::PSTR, function: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetWindbgExtensionApis32<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetWindbgExtensionApis64<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberEventFilters<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEventFilterText<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEventFilterCommand<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetEventFilterCommand<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSpecificFilterParameters<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSpecificFilterParameters<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSpecificFilterArgument<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSpecificFilterArgument<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, argument: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExceptionFilterParameters<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetExceptionFilterParameters<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExceptionFilterSecondCommand<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetExceptionFilterSecondCommand<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WaitForEvent<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLastEventInformation<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentTimeDate<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, timedate: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentSystemUpTime<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, uptime: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDumpFormatFlags<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, formatflags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberTextReplacements<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, numrepl: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTextReplacement<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PSTR, index: u32, srcbuffer: super::super::super::Foundation::PSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTextReplacement<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PSTR, dsttext: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveTextReplacements<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputTextReplacements<Impl: IDebugControl2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetInterrupt::<Impl, IMPL_OFFSET>,
            SetInterrupt::<Impl, IMPL_OFFSET>,
            GetInterruptTimeout::<Impl, IMPL_OFFSET>,
            SetInterruptTimeout::<Impl, IMPL_OFFSET>,
            GetLogFile::<Impl, IMPL_OFFSET>,
            OpenLogFile::<Impl, IMPL_OFFSET>,
            CloseLogFile::<Impl, IMPL_OFFSET>,
            GetLogMask::<Impl, IMPL_OFFSET>,
            SetLogMask::<Impl, IMPL_OFFSET>,
            Input::<Impl, IMPL_OFFSET>,
            ReturnInput::<Impl, IMPL_OFFSET>,
            Output::<Impl, IMPL_OFFSET>,
            OutputVaList::<Impl, IMPL_OFFSET>,
            ControlledOutput::<Impl, IMPL_OFFSET>,
            ControlledOutputVaList::<Impl, IMPL_OFFSET>,
            OutputPrompt::<Impl, IMPL_OFFSET>,
            OutputPromptVaList::<Impl, IMPL_OFFSET>,
            GetPromptText::<Impl, IMPL_OFFSET>,
            OutputCurrentState::<Impl, IMPL_OFFSET>,
            OutputVersionInformation::<Impl, IMPL_OFFSET>,
            GetNotifyEventHandle::<Impl, IMPL_OFFSET>,
            SetNotifyEventHandle::<Impl, IMPL_OFFSET>,
            Assemble::<Impl, IMPL_OFFSET>,
            Disassemble::<Impl, IMPL_OFFSET>,
            GetDisassembleEffectiveOffset::<Impl, IMPL_OFFSET>,
            OutputDisassembly::<Impl, IMPL_OFFSET>,
            OutputDisassemblyLines::<Impl, IMPL_OFFSET>,
            GetNearInstruction::<Impl, IMPL_OFFSET>,
            GetStackTrace::<Impl, IMPL_OFFSET>,
            GetReturnOffset::<Impl, IMPL_OFFSET>,
            OutputStackTrace::<Impl, IMPL_OFFSET>,
            GetDebuggeeType::<Impl, IMPL_OFFSET>,
            GetActualProcessorType::<Impl, IMPL_OFFSET>,
            GetExecutingProcessorType::<Impl, IMPL_OFFSET>,
            GetNumberPossibleExecutingProcessorTypes::<Impl, IMPL_OFFSET>,
            GetPossibleExecutingProcessorTypes::<Impl, IMPL_OFFSET>,
            GetNumberProcessors::<Impl, IMPL_OFFSET>,
            GetSystemVersion::<Impl, IMPL_OFFSET>,
            GetPageSize::<Impl, IMPL_OFFSET>,
            IsPointer64Bit::<Impl, IMPL_OFFSET>,
            ReadBugCheckData::<Impl, IMPL_OFFSET>,
            GetNumberSupportedProcessorTypes::<Impl, IMPL_OFFSET>,
            GetSupportedProcessorTypes::<Impl, IMPL_OFFSET>,
            GetProcessorTypeNames::<Impl, IMPL_OFFSET>,
            GetEffectiveProcessorType::<Impl, IMPL_OFFSET>,
            SetEffectiveProcessorType::<Impl, IMPL_OFFSET>,
            GetExecutionStatus::<Impl, IMPL_OFFSET>,
            SetExecutionStatus::<Impl, IMPL_OFFSET>,
            GetCodeLevel::<Impl, IMPL_OFFSET>,
            SetCodeLevel::<Impl, IMPL_OFFSET>,
            GetEngineOptions::<Impl, IMPL_OFFSET>,
            AddEngineOptions::<Impl, IMPL_OFFSET>,
            RemoveEngineOptions::<Impl, IMPL_OFFSET>,
            SetEngineOptions::<Impl, IMPL_OFFSET>,
            GetSystemErrorControl::<Impl, IMPL_OFFSET>,
            SetSystemErrorControl::<Impl, IMPL_OFFSET>,
            GetTextMacro::<Impl, IMPL_OFFSET>,
            SetTextMacro::<Impl, IMPL_OFFSET>,
            GetRadix::<Impl, IMPL_OFFSET>,
            SetRadix::<Impl, IMPL_OFFSET>,
            Evaluate::<Impl, IMPL_OFFSET>,
            CoerceValue::<Impl, IMPL_OFFSET>,
            CoerceValues::<Impl, IMPL_OFFSET>,
            Execute::<Impl, IMPL_OFFSET>,
            ExecuteCommandFile::<Impl, IMPL_OFFSET>,
            GetNumberBreakpoints::<Impl, IMPL_OFFSET>,
            GetBreakpointByIndex::<Impl, IMPL_OFFSET>,
            GetBreakpointById::<Impl, IMPL_OFFSET>,
            GetBreakpointParameters::<Impl, IMPL_OFFSET>,
            AddBreakpoint::<Impl, IMPL_OFFSET>,
            RemoveBreakpoint::<Impl, IMPL_OFFSET>,
            AddExtension::<Impl, IMPL_OFFSET>,
            RemoveExtension::<Impl, IMPL_OFFSET>,
            GetExtensionByPath::<Impl, IMPL_OFFSET>,
            CallExtension::<Impl, IMPL_OFFSET>,
            GetExtensionFunction::<Impl, IMPL_OFFSET>,
            GetWindbgExtensionApis32::<Impl, IMPL_OFFSET>,
            GetWindbgExtensionApis64::<Impl, IMPL_OFFSET>,
            GetNumberEventFilters::<Impl, IMPL_OFFSET>,
            GetEventFilterText::<Impl, IMPL_OFFSET>,
            GetEventFilterCommand::<Impl, IMPL_OFFSET>,
            SetEventFilterCommand::<Impl, IMPL_OFFSET>,
            GetSpecificFilterParameters::<Impl, IMPL_OFFSET>,
            SetSpecificFilterParameters::<Impl, IMPL_OFFSET>,
            GetSpecificFilterArgument::<Impl, IMPL_OFFSET>,
            SetSpecificFilterArgument::<Impl, IMPL_OFFSET>,
            GetExceptionFilterParameters::<Impl, IMPL_OFFSET>,
            SetExceptionFilterParameters::<Impl, IMPL_OFFSET>,
            GetExceptionFilterSecondCommand::<Impl, IMPL_OFFSET>,
            SetExceptionFilterSecondCommand::<Impl, IMPL_OFFSET>,
            WaitForEvent::<Impl, IMPL_OFFSET>,
            GetLastEventInformation::<Impl, IMPL_OFFSET>,
            GetCurrentTimeDate::<Impl, IMPL_OFFSET>,
            GetCurrentSystemUpTime::<Impl, IMPL_OFFSET>,
            GetDumpFormatFlags::<Impl, IMPL_OFFSET>,
            GetNumberTextReplacements::<Impl, IMPL_OFFSET>,
            GetTextReplacement::<Impl, IMPL_OFFSET>,
            SetTextReplacement::<Impl, IMPL_OFFSET>,
            RemoveTextReplacements::<Impl, IMPL_OFFSET>,
            OutputTextReplacements::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugControl2 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
pub trait IDebugControl3Impl: Sized {
    fn GetInterrupt();
    fn SetInterrupt();
    fn GetInterruptTimeout();
    fn SetInterruptTimeout();
    fn GetLogFile();
    fn OpenLogFile();
    fn CloseLogFile();
    fn GetLogMask();
    fn SetLogMask();
    fn Input();
    fn ReturnInput();
    fn Output();
    fn OutputVaList();
    fn ControlledOutput();
    fn ControlledOutputVaList();
    fn OutputPrompt();
    fn OutputPromptVaList();
    fn GetPromptText();
    fn OutputCurrentState();
    fn OutputVersionInformation();
    fn GetNotifyEventHandle();
    fn SetNotifyEventHandle();
    fn Assemble();
    fn Disassemble();
    fn GetDisassembleEffectiveOffset();
    fn OutputDisassembly();
    fn OutputDisassemblyLines();
    fn GetNearInstruction();
    fn GetStackTrace();
    fn GetReturnOffset();
    fn OutputStackTrace();
    fn GetDebuggeeType();
    fn GetActualProcessorType();
    fn GetExecutingProcessorType();
    fn GetNumberPossibleExecutingProcessorTypes();
    fn GetPossibleExecutingProcessorTypes();
    fn GetNumberProcessors();
    fn GetSystemVersion();
    fn GetPageSize();
    fn IsPointer64Bit();
    fn ReadBugCheckData();
    fn GetNumberSupportedProcessorTypes();
    fn GetSupportedProcessorTypes();
    fn GetProcessorTypeNames();
    fn GetEffectiveProcessorType();
    fn SetEffectiveProcessorType();
    fn GetExecutionStatus();
    fn SetExecutionStatus();
    fn GetCodeLevel();
    fn SetCodeLevel();
    fn GetEngineOptions();
    fn AddEngineOptions();
    fn RemoveEngineOptions();
    fn SetEngineOptions();
    fn GetSystemErrorControl();
    fn SetSystemErrorControl();
    fn GetTextMacro();
    fn SetTextMacro();
    fn GetRadix();
    fn SetRadix();
    fn Evaluate();
    fn CoerceValue();
    fn CoerceValues();
    fn Execute();
    fn ExecuteCommandFile();
    fn GetNumberBreakpoints();
    fn GetBreakpointByIndex();
    fn GetBreakpointById();
    fn GetBreakpointParameters();
    fn AddBreakpoint();
    fn RemoveBreakpoint();
    fn AddExtension();
    fn RemoveExtension();
    fn GetExtensionByPath();
    fn CallExtension();
    fn GetExtensionFunction();
    fn GetWindbgExtensionApis32();
    fn GetWindbgExtensionApis64();
    fn GetNumberEventFilters();
    fn GetEventFilterText();
    fn GetEventFilterCommand();
    fn SetEventFilterCommand();
    fn GetSpecificFilterParameters();
    fn SetSpecificFilterParameters();
    fn GetSpecificFilterArgument();
    fn SetSpecificFilterArgument();
    fn GetExceptionFilterParameters();
    fn SetExceptionFilterParameters();
    fn GetExceptionFilterSecondCommand();
    fn SetExceptionFilterSecondCommand();
    fn WaitForEvent();
    fn GetLastEventInformation();
    fn GetCurrentTimeDate();
    fn GetCurrentSystemUpTime();
    fn GetDumpFormatFlags();
    fn GetNumberTextReplacements();
    fn GetTextReplacement();
    fn SetTextReplacement();
    fn RemoveTextReplacements();
    fn OutputTextReplacements();
    fn GetAssemblyOptions();
    fn AddAssemblyOptions();
    fn RemoveAssemblyOptions();
    fn SetAssemblyOptions();
    fn GetExpressionSyntax();
    fn SetExpressionSyntax();
    fn SetExpressionSyntaxByName();
    fn GetNumberExpressionSyntaxes();
    fn GetExpressionSyntaxNames();
    fn GetNumberEvents();
    fn GetEventIndexDescription();
    fn GetCurrentEventIndex();
    fn SetNextEventIndex();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
impl IDebugControl3Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugControl3Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugControl3Vtbl {
        unsafe extern "system" fn GetInterrupt<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetInterrupt<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetInterruptTimeout<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, seconds: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetInterruptTimeout<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, seconds: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLogFile<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OpenLogFile<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PSTR, append: super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CloseLogFile<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLogMask<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetLogMask<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Input<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReturnInput<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Output<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputVaList<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ControlledOutput<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ControlledOutputVaList<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputPrompt<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputPromptVaList<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPromptText<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputCurrentState<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputVersionInformation<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNotifyEventHandle<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetNotifyEventHandle<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Assemble<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, instr: super::super::super::Foundation::PSTR, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Disassemble<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDisassembleEffectiveOffset<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputDisassembly<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, flags: u32, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputDisassemblyLines<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNearInstruction<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, nearoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetStackTrace<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetReturnOffset<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputStackTrace<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDebuggeeType<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, class: *mut u32, qualifier: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetActualProcessorType<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExecutingProcessorType<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberPossibleExecutingProcessorTypes<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPossibleExecutingProcessorTypes<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberProcessors<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSystemVersion<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: super::super::super::Foundation::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: super::super::super::Foundation::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPageSize<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, size: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsPointer64Bit<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadBugCheckData<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberSupportedProcessorTypes<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSupportedProcessorTypes<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetProcessorTypeNames<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEffectiveProcessorType<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetEffectiveProcessorType<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExecutionStatus<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, status: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetExecutionStatus<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, status: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCodeLevel<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, level: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetCodeLevel<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, level: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEngineOptions<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddEngineOptions<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveEngineOptions<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetEngineOptions<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSystemErrorControl<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSystemErrorControl<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputlevel: u32, breaklevel: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTextMacro<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, slot: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTextMacro<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, slot: u32, r#macro: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRadix<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, radix: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetRadix<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, radix: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Evaluate<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, expression: super::super::super::Foundation::PSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CoerceValue<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#in: *const DEBUG_VALUE, outtype: u32, out: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CoerceValues<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Execute<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, command: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ExecuteCommandFile<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, commandfile: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberBreakpoints<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBreakpointByIndex<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBreakpointById<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBreakpointParameters<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddBreakpoint<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32, desiredid: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveBreakpoint<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bp: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddExtension<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR, flags: u32, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveExtension<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExtensionByPath<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CallExtension<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, function: super::super::super::Foundation::PSTR, arguments: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExtensionFunction<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, funcname: super::super::super::Foundation::PSTR, function: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetWindbgExtensionApis32<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetWindbgExtensionApis64<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberEventFilters<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEventFilterText<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEventFilterCommand<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetEventFilterCommand<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSpecificFilterParameters<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSpecificFilterParameters<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSpecificFilterArgument<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSpecificFilterArgument<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, argument: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExceptionFilterParameters<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetExceptionFilterParameters<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExceptionFilterSecondCommand<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetExceptionFilterSecondCommand<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WaitForEvent<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLastEventInformation<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentTimeDate<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, timedate: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentSystemUpTime<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, uptime: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDumpFormatFlags<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, formatflags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberTextReplacements<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, numrepl: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTextReplacement<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PSTR, index: u32, srcbuffer: super::super::super::Foundation::PSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTextReplacement<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PSTR, dsttext: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveTextReplacements<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputTextReplacements<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetAssemblyOptions<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddAssemblyOptions<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveAssemblyOptions<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetAssemblyOptions<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExpressionSyntax<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetExpressionSyntax<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetExpressionSyntaxByName<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, abbrevname: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberExpressionSyntaxes<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExpressionSyntaxNames<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberEvents<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, events: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEventIndexDescription<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, descsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentEventIndex<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetNextEventIndex<Impl: IDebugControl3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, relation: u32, value: u32, nextindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetInterrupt::<Impl, IMPL_OFFSET>,
            SetInterrupt::<Impl, IMPL_OFFSET>,
            GetInterruptTimeout::<Impl, IMPL_OFFSET>,
            SetInterruptTimeout::<Impl, IMPL_OFFSET>,
            GetLogFile::<Impl, IMPL_OFFSET>,
            OpenLogFile::<Impl, IMPL_OFFSET>,
            CloseLogFile::<Impl, IMPL_OFFSET>,
            GetLogMask::<Impl, IMPL_OFFSET>,
            SetLogMask::<Impl, IMPL_OFFSET>,
            Input::<Impl, IMPL_OFFSET>,
            ReturnInput::<Impl, IMPL_OFFSET>,
            Output::<Impl, IMPL_OFFSET>,
            OutputVaList::<Impl, IMPL_OFFSET>,
            ControlledOutput::<Impl, IMPL_OFFSET>,
            ControlledOutputVaList::<Impl, IMPL_OFFSET>,
            OutputPrompt::<Impl, IMPL_OFFSET>,
            OutputPromptVaList::<Impl, IMPL_OFFSET>,
            GetPromptText::<Impl, IMPL_OFFSET>,
            OutputCurrentState::<Impl, IMPL_OFFSET>,
            OutputVersionInformation::<Impl, IMPL_OFFSET>,
            GetNotifyEventHandle::<Impl, IMPL_OFFSET>,
            SetNotifyEventHandle::<Impl, IMPL_OFFSET>,
            Assemble::<Impl, IMPL_OFFSET>,
            Disassemble::<Impl, IMPL_OFFSET>,
            GetDisassembleEffectiveOffset::<Impl, IMPL_OFFSET>,
            OutputDisassembly::<Impl, IMPL_OFFSET>,
            OutputDisassemblyLines::<Impl, IMPL_OFFSET>,
            GetNearInstruction::<Impl, IMPL_OFFSET>,
            GetStackTrace::<Impl, IMPL_OFFSET>,
            GetReturnOffset::<Impl, IMPL_OFFSET>,
            OutputStackTrace::<Impl, IMPL_OFFSET>,
            GetDebuggeeType::<Impl, IMPL_OFFSET>,
            GetActualProcessorType::<Impl, IMPL_OFFSET>,
            GetExecutingProcessorType::<Impl, IMPL_OFFSET>,
            GetNumberPossibleExecutingProcessorTypes::<Impl, IMPL_OFFSET>,
            GetPossibleExecutingProcessorTypes::<Impl, IMPL_OFFSET>,
            GetNumberProcessors::<Impl, IMPL_OFFSET>,
            GetSystemVersion::<Impl, IMPL_OFFSET>,
            GetPageSize::<Impl, IMPL_OFFSET>,
            IsPointer64Bit::<Impl, IMPL_OFFSET>,
            ReadBugCheckData::<Impl, IMPL_OFFSET>,
            GetNumberSupportedProcessorTypes::<Impl, IMPL_OFFSET>,
            GetSupportedProcessorTypes::<Impl, IMPL_OFFSET>,
            GetProcessorTypeNames::<Impl, IMPL_OFFSET>,
            GetEffectiveProcessorType::<Impl, IMPL_OFFSET>,
            SetEffectiveProcessorType::<Impl, IMPL_OFFSET>,
            GetExecutionStatus::<Impl, IMPL_OFFSET>,
            SetExecutionStatus::<Impl, IMPL_OFFSET>,
            GetCodeLevel::<Impl, IMPL_OFFSET>,
            SetCodeLevel::<Impl, IMPL_OFFSET>,
            GetEngineOptions::<Impl, IMPL_OFFSET>,
            AddEngineOptions::<Impl, IMPL_OFFSET>,
            RemoveEngineOptions::<Impl, IMPL_OFFSET>,
            SetEngineOptions::<Impl, IMPL_OFFSET>,
            GetSystemErrorControl::<Impl, IMPL_OFFSET>,
            SetSystemErrorControl::<Impl, IMPL_OFFSET>,
            GetTextMacro::<Impl, IMPL_OFFSET>,
            SetTextMacro::<Impl, IMPL_OFFSET>,
            GetRadix::<Impl, IMPL_OFFSET>,
            SetRadix::<Impl, IMPL_OFFSET>,
            Evaluate::<Impl, IMPL_OFFSET>,
            CoerceValue::<Impl, IMPL_OFFSET>,
            CoerceValues::<Impl, IMPL_OFFSET>,
            Execute::<Impl, IMPL_OFFSET>,
            ExecuteCommandFile::<Impl, IMPL_OFFSET>,
            GetNumberBreakpoints::<Impl, IMPL_OFFSET>,
            GetBreakpointByIndex::<Impl, IMPL_OFFSET>,
            GetBreakpointById::<Impl, IMPL_OFFSET>,
            GetBreakpointParameters::<Impl, IMPL_OFFSET>,
            AddBreakpoint::<Impl, IMPL_OFFSET>,
            RemoveBreakpoint::<Impl, IMPL_OFFSET>,
            AddExtension::<Impl, IMPL_OFFSET>,
            RemoveExtension::<Impl, IMPL_OFFSET>,
            GetExtensionByPath::<Impl, IMPL_OFFSET>,
            CallExtension::<Impl, IMPL_OFFSET>,
            GetExtensionFunction::<Impl, IMPL_OFFSET>,
            GetWindbgExtensionApis32::<Impl, IMPL_OFFSET>,
            GetWindbgExtensionApis64::<Impl, IMPL_OFFSET>,
            GetNumberEventFilters::<Impl, IMPL_OFFSET>,
            GetEventFilterText::<Impl, IMPL_OFFSET>,
            GetEventFilterCommand::<Impl, IMPL_OFFSET>,
            SetEventFilterCommand::<Impl, IMPL_OFFSET>,
            GetSpecificFilterParameters::<Impl, IMPL_OFFSET>,
            SetSpecificFilterParameters::<Impl, IMPL_OFFSET>,
            GetSpecificFilterArgument::<Impl, IMPL_OFFSET>,
            SetSpecificFilterArgument::<Impl, IMPL_OFFSET>,
            GetExceptionFilterParameters::<Impl, IMPL_OFFSET>,
            SetExceptionFilterParameters::<Impl, IMPL_OFFSET>,
            GetExceptionFilterSecondCommand::<Impl, IMPL_OFFSET>,
            SetExceptionFilterSecondCommand::<Impl, IMPL_OFFSET>,
            WaitForEvent::<Impl, IMPL_OFFSET>,
            GetLastEventInformation::<Impl, IMPL_OFFSET>,
            GetCurrentTimeDate::<Impl, IMPL_OFFSET>,
            GetCurrentSystemUpTime::<Impl, IMPL_OFFSET>,
            GetDumpFormatFlags::<Impl, IMPL_OFFSET>,
            GetNumberTextReplacements::<Impl, IMPL_OFFSET>,
            GetTextReplacement::<Impl, IMPL_OFFSET>,
            SetTextReplacement::<Impl, IMPL_OFFSET>,
            RemoveTextReplacements::<Impl, IMPL_OFFSET>,
            OutputTextReplacements::<Impl, IMPL_OFFSET>,
            GetAssemblyOptions::<Impl, IMPL_OFFSET>,
            AddAssemblyOptions::<Impl, IMPL_OFFSET>,
            RemoveAssemblyOptions::<Impl, IMPL_OFFSET>,
            SetAssemblyOptions::<Impl, IMPL_OFFSET>,
            GetExpressionSyntax::<Impl, IMPL_OFFSET>,
            SetExpressionSyntax::<Impl, IMPL_OFFSET>,
            SetExpressionSyntaxByName::<Impl, IMPL_OFFSET>,
            GetNumberExpressionSyntaxes::<Impl, IMPL_OFFSET>,
            GetExpressionSyntaxNames::<Impl, IMPL_OFFSET>,
            GetNumberEvents::<Impl, IMPL_OFFSET>,
            GetEventIndexDescription::<Impl, IMPL_OFFSET>,
            GetCurrentEventIndex::<Impl, IMPL_OFFSET>,
            SetNextEventIndex::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugControl3 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
pub trait IDebugControl4Impl: Sized {
    fn GetInterrupt();
    fn SetInterrupt();
    fn GetInterruptTimeout();
    fn SetInterruptTimeout();
    fn GetLogFile();
    fn OpenLogFile();
    fn CloseLogFile();
    fn GetLogMask();
    fn SetLogMask();
    fn Input();
    fn ReturnInput();
    fn Output();
    fn OutputVaList();
    fn ControlledOutput();
    fn ControlledOutputVaList();
    fn OutputPrompt();
    fn OutputPromptVaList();
    fn GetPromptText();
    fn OutputCurrentState();
    fn OutputVersionInformation();
    fn GetNotifyEventHandle();
    fn SetNotifyEventHandle();
    fn Assemble();
    fn Disassemble();
    fn GetDisassembleEffectiveOffset();
    fn OutputDisassembly();
    fn OutputDisassemblyLines();
    fn GetNearInstruction();
    fn GetStackTrace();
    fn GetReturnOffset();
    fn OutputStackTrace();
    fn GetDebuggeeType();
    fn GetActualProcessorType();
    fn GetExecutingProcessorType();
    fn GetNumberPossibleExecutingProcessorTypes();
    fn GetPossibleExecutingProcessorTypes();
    fn GetNumberProcessors();
    fn GetSystemVersion();
    fn GetPageSize();
    fn IsPointer64Bit();
    fn ReadBugCheckData();
    fn GetNumberSupportedProcessorTypes();
    fn GetSupportedProcessorTypes();
    fn GetProcessorTypeNames();
    fn GetEffectiveProcessorType();
    fn SetEffectiveProcessorType();
    fn GetExecutionStatus();
    fn SetExecutionStatus();
    fn GetCodeLevel();
    fn SetCodeLevel();
    fn GetEngineOptions();
    fn AddEngineOptions();
    fn RemoveEngineOptions();
    fn SetEngineOptions();
    fn GetSystemErrorControl();
    fn SetSystemErrorControl();
    fn GetTextMacro();
    fn SetTextMacro();
    fn GetRadix();
    fn SetRadix();
    fn Evaluate();
    fn CoerceValue();
    fn CoerceValues();
    fn Execute();
    fn ExecuteCommandFile();
    fn GetNumberBreakpoints();
    fn GetBreakpointByIndex();
    fn GetBreakpointById();
    fn GetBreakpointParameters();
    fn AddBreakpoint();
    fn RemoveBreakpoint();
    fn AddExtension();
    fn RemoveExtension();
    fn GetExtensionByPath();
    fn CallExtension();
    fn GetExtensionFunction();
    fn GetWindbgExtensionApis32();
    fn GetWindbgExtensionApis64();
    fn GetNumberEventFilters();
    fn GetEventFilterText();
    fn GetEventFilterCommand();
    fn SetEventFilterCommand();
    fn GetSpecificFilterParameters();
    fn SetSpecificFilterParameters();
    fn GetSpecificFilterArgument();
    fn SetSpecificFilterArgument();
    fn GetExceptionFilterParameters();
    fn SetExceptionFilterParameters();
    fn GetExceptionFilterSecondCommand();
    fn SetExceptionFilterSecondCommand();
    fn WaitForEvent();
    fn GetLastEventInformation();
    fn GetCurrentTimeDate();
    fn GetCurrentSystemUpTime();
    fn GetDumpFormatFlags();
    fn GetNumberTextReplacements();
    fn GetTextReplacement();
    fn SetTextReplacement();
    fn RemoveTextReplacements();
    fn OutputTextReplacements();
    fn GetAssemblyOptions();
    fn AddAssemblyOptions();
    fn RemoveAssemblyOptions();
    fn SetAssemblyOptions();
    fn GetExpressionSyntax();
    fn SetExpressionSyntax();
    fn SetExpressionSyntaxByName();
    fn GetNumberExpressionSyntaxes();
    fn GetExpressionSyntaxNames();
    fn GetNumberEvents();
    fn GetEventIndexDescription();
    fn GetCurrentEventIndex();
    fn SetNextEventIndex();
    fn GetLogFileWide();
    fn OpenLogFileWide();
    fn InputWide();
    fn ReturnInputWide();
    fn OutputWide();
    fn OutputVaListWide();
    fn ControlledOutputWide();
    fn ControlledOutputVaListWide();
    fn OutputPromptWide();
    fn OutputPromptVaListWide();
    fn GetPromptTextWide();
    fn AssembleWide();
    fn DisassembleWide();
    fn GetProcessorTypeNamesWide();
    fn GetTextMacroWide();
    fn SetTextMacroWide();
    fn EvaluateWide();
    fn ExecuteWide();
    fn ExecuteCommandFileWide();
    fn GetBreakpointByIndex2();
    fn GetBreakpointById2();
    fn AddBreakpoint2();
    fn RemoveBreakpoint2();
    fn AddExtensionWide();
    fn GetExtensionByPathWide();
    fn CallExtensionWide();
    fn GetExtensionFunctionWide();
    fn GetEventFilterTextWide();
    fn GetEventFilterCommandWide();
    fn SetEventFilterCommandWide();
    fn GetSpecificFilterArgumentWide();
    fn SetSpecificFilterArgumentWide();
    fn GetExceptionFilterSecondCommandWide();
    fn SetExceptionFilterSecondCommandWide();
    fn GetLastEventInformationWide();
    fn GetTextReplacementWide();
    fn SetTextReplacementWide();
    fn SetExpressionSyntaxByNameWide();
    fn GetExpressionSyntaxNamesWide();
    fn GetEventIndexDescriptionWide();
    fn GetLogFile2();
    fn OpenLogFile2();
    fn GetLogFile2Wide();
    fn OpenLogFile2Wide();
    fn GetSystemVersionValues();
    fn GetSystemVersionString();
    fn GetSystemVersionStringWide();
    fn GetContextStackTrace();
    fn OutputContextStackTrace();
    fn GetStoredEventInformation();
    fn GetManagedStatus();
    fn GetManagedStatusWide();
    fn ResetManagedStatus();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
impl IDebugControl4Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugControl4Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugControl4Vtbl {
        unsafe extern "system" fn GetInterrupt<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetInterrupt<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetInterruptTimeout<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, seconds: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetInterruptTimeout<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, seconds: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLogFile<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OpenLogFile<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PSTR, append: super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CloseLogFile<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLogMask<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetLogMask<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Input<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReturnInput<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Output<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputVaList<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ControlledOutput<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ControlledOutputVaList<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputPrompt<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputPromptVaList<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPromptText<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputCurrentState<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputVersionInformation<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNotifyEventHandle<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetNotifyEventHandle<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Assemble<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, instr: super::super::super::Foundation::PSTR, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Disassemble<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDisassembleEffectiveOffset<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputDisassembly<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, flags: u32, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputDisassemblyLines<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNearInstruction<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, nearoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetStackTrace<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetReturnOffset<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputStackTrace<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDebuggeeType<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, class: *mut u32, qualifier: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetActualProcessorType<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExecutingProcessorType<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberPossibleExecutingProcessorTypes<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPossibleExecutingProcessorTypes<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberProcessors<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSystemVersion<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: super::super::super::Foundation::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: super::super::super::Foundation::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPageSize<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, size: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsPointer64Bit<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadBugCheckData<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberSupportedProcessorTypes<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSupportedProcessorTypes<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetProcessorTypeNames<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEffectiveProcessorType<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetEffectiveProcessorType<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExecutionStatus<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, status: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetExecutionStatus<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, status: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCodeLevel<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, level: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetCodeLevel<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, level: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEngineOptions<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddEngineOptions<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveEngineOptions<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetEngineOptions<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSystemErrorControl<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSystemErrorControl<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputlevel: u32, breaklevel: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTextMacro<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, slot: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTextMacro<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, slot: u32, r#macro: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRadix<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, radix: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetRadix<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, radix: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Evaluate<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, expression: super::super::super::Foundation::PSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CoerceValue<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#in: *const DEBUG_VALUE, outtype: u32, out: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CoerceValues<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Execute<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, command: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ExecuteCommandFile<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, commandfile: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberBreakpoints<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBreakpointByIndex<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBreakpointById<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBreakpointParameters<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddBreakpoint<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32, desiredid: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveBreakpoint<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bp: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddExtension<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR, flags: u32, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveExtension<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExtensionByPath<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CallExtension<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, function: super::super::super::Foundation::PSTR, arguments: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExtensionFunction<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, funcname: super::super::super::Foundation::PSTR, function: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetWindbgExtensionApis32<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetWindbgExtensionApis64<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberEventFilters<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEventFilterText<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEventFilterCommand<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetEventFilterCommand<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSpecificFilterParameters<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSpecificFilterParameters<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSpecificFilterArgument<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSpecificFilterArgument<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, argument: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExceptionFilterParameters<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetExceptionFilterParameters<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExceptionFilterSecondCommand<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetExceptionFilterSecondCommand<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WaitForEvent<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLastEventInformation<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentTimeDate<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, timedate: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentSystemUpTime<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, uptime: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDumpFormatFlags<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, formatflags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberTextReplacements<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, numrepl: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTextReplacement<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PSTR, index: u32, srcbuffer: super::super::super::Foundation::PSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTextReplacement<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PSTR, dsttext: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveTextReplacements<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputTextReplacements<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetAssemblyOptions<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddAssemblyOptions<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveAssemblyOptions<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetAssemblyOptions<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExpressionSyntax<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetExpressionSyntax<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetExpressionSyntaxByName<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, abbrevname: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberExpressionSyntaxes<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExpressionSyntaxNames<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberEvents<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, events: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEventIndexDescription<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, descsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentEventIndex<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetNextEventIndex<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, relation: u32, value: u32, nextindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLogFileWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OpenLogFileWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PWSTR, append: super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn InputWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReturnInputWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputVaListWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ControlledOutputWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ControlledOutputVaListWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputPromptWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputPromptVaListWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPromptTextWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AssembleWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, instr: super::super::super::Foundation::PWSTR, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DisassembleWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetProcessorTypeNamesWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32, fullnamebuffer: super::super::super::Foundation::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTextMacroWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, slot: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTextMacroWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, slot: u32, r#macro: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EvaluateWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, expression: super::super::super::Foundation::PWSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ExecuteWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, command: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ExecuteCommandFileWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, commandfile: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBreakpointByIndex2<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBreakpointById2<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddBreakpoint2<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32, desiredid: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveBreakpoint2<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bp: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddExtensionWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PWSTR, flags: u32, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExtensionByPathWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PWSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CallExtensionWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, function: super::super::super::Foundation::PWSTR, arguments: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExtensionFunctionWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, funcname: super::super::super::Foundation::PWSTR, function: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEventFilterTextWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEventFilterCommandWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetEventFilterCommandWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSpecificFilterArgumentWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSpecificFilterArgumentWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, argument: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExceptionFilterSecondCommandWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetExceptionFilterSecondCommandWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLastEventInformationWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTextReplacementWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PWSTR, index: u32, srcbuffer: super::super::super::Foundation::PWSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PWSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTextReplacementWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PWSTR, dsttext: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetExpressionSyntaxByNameWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, abbrevname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExpressionSyntaxNamesWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, fullnamebuffer: super::super::super::Foundation::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEventIndexDescriptionWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, descsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLogFile2<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OpenLogFile2<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLogFile2Wide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OpenLogFile2Wide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSystemVersionValues<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, platformid: *mut u32, win32major: *mut u32, win32minor: *mut u32, kdmajor: *mut u32, kdminor: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSystemVersionString<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSystemVersionStringWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetContextStackTrace<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, startcontext: *const ::core::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framecontexts: *mut ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputContextStackTrace<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, framecontexts: *const ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetStoredEventInformation<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, context: *mut ::core::ffi::c_void, contextsize: u32, contextused: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetManagedStatus<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: *mut u32, whichstring: u32, string: super::super::super::Foundation::PSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetManagedStatusWide<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: *mut u32, whichstring: u32, string: super::super::super::Foundation::PWSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ResetManagedStatus<Impl: IDebugControl4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetInterrupt::<Impl, IMPL_OFFSET>,
            SetInterrupt::<Impl, IMPL_OFFSET>,
            GetInterruptTimeout::<Impl, IMPL_OFFSET>,
            SetInterruptTimeout::<Impl, IMPL_OFFSET>,
            GetLogFile::<Impl, IMPL_OFFSET>,
            OpenLogFile::<Impl, IMPL_OFFSET>,
            CloseLogFile::<Impl, IMPL_OFFSET>,
            GetLogMask::<Impl, IMPL_OFFSET>,
            SetLogMask::<Impl, IMPL_OFFSET>,
            Input::<Impl, IMPL_OFFSET>,
            ReturnInput::<Impl, IMPL_OFFSET>,
            Output::<Impl, IMPL_OFFSET>,
            OutputVaList::<Impl, IMPL_OFFSET>,
            ControlledOutput::<Impl, IMPL_OFFSET>,
            ControlledOutputVaList::<Impl, IMPL_OFFSET>,
            OutputPrompt::<Impl, IMPL_OFFSET>,
            OutputPromptVaList::<Impl, IMPL_OFFSET>,
            GetPromptText::<Impl, IMPL_OFFSET>,
            OutputCurrentState::<Impl, IMPL_OFFSET>,
            OutputVersionInformation::<Impl, IMPL_OFFSET>,
            GetNotifyEventHandle::<Impl, IMPL_OFFSET>,
            SetNotifyEventHandle::<Impl, IMPL_OFFSET>,
            Assemble::<Impl, IMPL_OFFSET>,
            Disassemble::<Impl, IMPL_OFFSET>,
            GetDisassembleEffectiveOffset::<Impl, IMPL_OFFSET>,
            OutputDisassembly::<Impl, IMPL_OFFSET>,
            OutputDisassemblyLines::<Impl, IMPL_OFFSET>,
            GetNearInstruction::<Impl, IMPL_OFFSET>,
            GetStackTrace::<Impl, IMPL_OFFSET>,
            GetReturnOffset::<Impl, IMPL_OFFSET>,
            OutputStackTrace::<Impl, IMPL_OFFSET>,
            GetDebuggeeType::<Impl, IMPL_OFFSET>,
            GetActualProcessorType::<Impl, IMPL_OFFSET>,
            GetExecutingProcessorType::<Impl, IMPL_OFFSET>,
            GetNumberPossibleExecutingProcessorTypes::<Impl, IMPL_OFFSET>,
            GetPossibleExecutingProcessorTypes::<Impl, IMPL_OFFSET>,
            GetNumberProcessors::<Impl, IMPL_OFFSET>,
            GetSystemVersion::<Impl, IMPL_OFFSET>,
            GetPageSize::<Impl, IMPL_OFFSET>,
            IsPointer64Bit::<Impl, IMPL_OFFSET>,
            ReadBugCheckData::<Impl, IMPL_OFFSET>,
            GetNumberSupportedProcessorTypes::<Impl, IMPL_OFFSET>,
            GetSupportedProcessorTypes::<Impl, IMPL_OFFSET>,
            GetProcessorTypeNames::<Impl, IMPL_OFFSET>,
            GetEffectiveProcessorType::<Impl, IMPL_OFFSET>,
            SetEffectiveProcessorType::<Impl, IMPL_OFFSET>,
            GetExecutionStatus::<Impl, IMPL_OFFSET>,
            SetExecutionStatus::<Impl, IMPL_OFFSET>,
            GetCodeLevel::<Impl, IMPL_OFFSET>,
            SetCodeLevel::<Impl, IMPL_OFFSET>,
            GetEngineOptions::<Impl, IMPL_OFFSET>,
            AddEngineOptions::<Impl, IMPL_OFFSET>,
            RemoveEngineOptions::<Impl, IMPL_OFFSET>,
            SetEngineOptions::<Impl, IMPL_OFFSET>,
            GetSystemErrorControl::<Impl, IMPL_OFFSET>,
            SetSystemErrorControl::<Impl, IMPL_OFFSET>,
            GetTextMacro::<Impl, IMPL_OFFSET>,
            SetTextMacro::<Impl, IMPL_OFFSET>,
            GetRadix::<Impl, IMPL_OFFSET>,
            SetRadix::<Impl, IMPL_OFFSET>,
            Evaluate::<Impl, IMPL_OFFSET>,
            CoerceValue::<Impl, IMPL_OFFSET>,
            CoerceValues::<Impl, IMPL_OFFSET>,
            Execute::<Impl, IMPL_OFFSET>,
            ExecuteCommandFile::<Impl, IMPL_OFFSET>,
            GetNumberBreakpoints::<Impl, IMPL_OFFSET>,
            GetBreakpointByIndex::<Impl, IMPL_OFFSET>,
            GetBreakpointById::<Impl, IMPL_OFFSET>,
            GetBreakpointParameters::<Impl, IMPL_OFFSET>,
            AddBreakpoint::<Impl, IMPL_OFFSET>,
            RemoveBreakpoint::<Impl, IMPL_OFFSET>,
            AddExtension::<Impl, IMPL_OFFSET>,
            RemoveExtension::<Impl, IMPL_OFFSET>,
            GetExtensionByPath::<Impl, IMPL_OFFSET>,
            CallExtension::<Impl, IMPL_OFFSET>,
            GetExtensionFunction::<Impl, IMPL_OFFSET>,
            GetWindbgExtensionApis32::<Impl, IMPL_OFFSET>,
            GetWindbgExtensionApis64::<Impl, IMPL_OFFSET>,
            GetNumberEventFilters::<Impl, IMPL_OFFSET>,
            GetEventFilterText::<Impl, IMPL_OFFSET>,
            GetEventFilterCommand::<Impl, IMPL_OFFSET>,
            SetEventFilterCommand::<Impl, IMPL_OFFSET>,
            GetSpecificFilterParameters::<Impl, IMPL_OFFSET>,
            SetSpecificFilterParameters::<Impl, IMPL_OFFSET>,
            GetSpecificFilterArgument::<Impl, IMPL_OFFSET>,
            SetSpecificFilterArgument::<Impl, IMPL_OFFSET>,
            GetExceptionFilterParameters::<Impl, IMPL_OFFSET>,
            SetExceptionFilterParameters::<Impl, IMPL_OFFSET>,
            GetExceptionFilterSecondCommand::<Impl, IMPL_OFFSET>,
            SetExceptionFilterSecondCommand::<Impl, IMPL_OFFSET>,
            WaitForEvent::<Impl, IMPL_OFFSET>,
            GetLastEventInformation::<Impl, IMPL_OFFSET>,
            GetCurrentTimeDate::<Impl, IMPL_OFFSET>,
            GetCurrentSystemUpTime::<Impl, IMPL_OFFSET>,
            GetDumpFormatFlags::<Impl, IMPL_OFFSET>,
            GetNumberTextReplacements::<Impl, IMPL_OFFSET>,
            GetTextReplacement::<Impl, IMPL_OFFSET>,
            SetTextReplacement::<Impl, IMPL_OFFSET>,
            RemoveTextReplacements::<Impl, IMPL_OFFSET>,
            OutputTextReplacements::<Impl, IMPL_OFFSET>,
            GetAssemblyOptions::<Impl, IMPL_OFFSET>,
            AddAssemblyOptions::<Impl, IMPL_OFFSET>,
            RemoveAssemblyOptions::<Impl, IMPL_OFFSET>,
            SetAssemblyOptions::<Impl, IMPL_OFFSET>,
            GetExpressionSyntax::<Impl, IMPL_OFFSET>,
            SetExpressionSyntax::<Impl, IMPL_OFFSET>,
            SetExpressionSyntaxByName::<Impl, IMPL_OFFSET>,
            GetNumberExpressionSyntaxes::<Impl, IMPL_OFFSET>,
            GetExpressionSyntaxNames::<Impl, IMPL_OFFSET>,
            GetNumberEvents::<Impl, IMPL_OFFSET>,
            GetEventIndexDescription::<Impl, IMPL_OFFSET>,
            GetCurrentEventIndex::<Impl, IMPL_OFFSET>,
            SetNextEventIndex::<Impl, IMPL_OFFSET>,
            GetLogFileWide::<Impl, IMPL_OFFSET>,
            OpenLogFileWide::<Impl, IMPL_OFFSET>,
            InputWide::<Impl, IMPL_OFFSET>,
            ReturnInputWide::<Impl, IMPL_OFFSET>,
            OutputWide::<Impl, IMPL_OFFSET>,
            OutputVaListWide::<Impl, IMPL_OFFSET>,
            ControlledOutputWide::<Impl, IMPL_OFFSET>,
            ControlledOutputVaListWide::<Impl, IMPL_OFFSET>,
            OutputPromptWide::<Impl, IMPL_OFFSET>,
            OutputPromptVaListWide::<Impl, IMPL_OFFSET>,
            GetPromptTextWide::<Impl, IMPL_OFFSET>,
            AssembleWide::<Impl, IMPL_OFFSET>,
            DisassembleWide::<Impl, IMPL_OFFSET>,
            GetProcessorTypeNamesWide::<Impl, IMPL_OFFSET>,
            GetTextMacroWide::<Impl, IMPL_OFFSET>,
            SetTextMacroWide::<Impl, IMPL_OFFSET>,
            EvaluateWide::<Impl, IMPL_OFFSET>,
            ExecuteWide::<Impl, IMPL_OFFSET>,
            ExecuteCommandFileWide::<Impl, IMPL_OFFSET>,
            GetBreakpointByIndex2::<Impl, IMPL_OFFSET>,
            GetBreakpointById2::<Impl, IMPL_OFFSET>,
            AddBreakpoint2::<Impl, IMPL_OFFSET>,
            RemoveBreakpoint2::<Impl, IMPL_OFFSET>,
            AddExtensionWide::<Impl, IMPL_OFFSET>,
            GetExtensionByPathWide::<Impl, IMPL_OFFSET>,
            CallExtensionWide::<Impl, IMPL_OFFSET>,
            GetExtensionFunctionWide::<Impl, IMPL_OFFSET>,
            GetEventFilterTextWide::<Impl, IMPL_OFFSET>,
            GetEventFilterCommandWide::<Impl, IMPL_OFFSET>,
            SetEventFilterCommandWide::<Impl, IMPL_OFFSET>,
            GetSpecificFilterArgumentWide::<Impl, IMPL_OFFSET>,
            SetSpecificFilterArgumentWide::<Impl, IMPL_OFFSET>,
            GetExceptionFilterSecondCommandWide::<Impl, IMPL_OFFSET>,
            SetExceptionFilterSecondCommandWide::<Impl, IMPL_OFFSET>,
            GetLastEventInformationWide::<Impl, IMPL_OFFSET>,
            GetTextReplacementWide::<Impl, IMPL_OFFSET>,
            SetTextReplacementWide::<Impl, IMPL_OFFSET>,
            SetExpressionSyntaxByNameWide::<Impl, IMPL_OFFSET>,
            GetExpressionSyntaxNamesWide::<Impl, IMPL_OFFSET>,
            GetEventIndexDescriptionWide::<Impl, IMPL_OFFSET>,
            GetLogFile2::<Impl, IMPL_OFFSET>,
            OpenLogFile2::<Impl, IMPL_OFFSET>,
            GetLogFile2Wide::<Impl, IMPL_OFFSET>,
            OpenLogFile2Wide::<Impl, IMPL_OFFSET>,
            GetSystemVersionValues::<Impl, IMPL_OFFSET>,
            GetSystemVersionString::<Impl, IMPL_OFFSET>,
            GetSystemVersionStringWide::<Impl, IMPL_OFFSET>,
            GetContextStackTrace::<Impl, IMPL_OFFSET>,
            OutputContextStackTrace::<Impl, IMPL_OFFSET>,
            GetStoredEventInformation::<Impl, IMPL_OFFSET>,
            GetManagedStatus::<Impl, IMPL_OFFSET>,
            GetManagedStatusWide::<Impl, IMPL_OFFSET>,
            ResetManagedStatus::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugControl4 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
pub trait IDebugControl5Impl: Sized {
    fn GetInterrupt();
    fn SetInterrupt();
    fn GetInterruptTimeout();
    fn SetInterruptTimeout();
    fn GetLogFile();
    fn OpenLogFile();
    fn CloseLogFile();
    fn GetLogMask();
    fn SetLogMask();
    fn Input();
    fn ReturnInput();
    fn Output();
    fn OutputVaList();
    fn ControlledOutput();
    fn ControlledOutputVaList();
    fn OutputPrompt();
    fn OutputPromptVaList();
    fn GetPromptText();
    fn OutputCurrentState();
    fn OutputVersionInformation();
    fn GetNotifyEventHandle();
    fn SetNotifyEventHandle();
    fn Assemble();
    fn Disassemble();
    fn GetDisassembleEffectiveOffset();
    fn OutputDisassembly();
    fn OutputDisassemblyLines();
    fn GetNearInstruction();
    fn GetStackTrace();
    fn GetReturnOffset();
    fn OutputStackTrace();
    fn GetDebuggeeType();
    fn GetActualProcessorType();
    fn GetExecutingProcessorType();
    fn GetNumberPossibleExecutingProcessorTypes();
    fn GetPossibleExecutingProcessorTypes();
    fn GetNumberProcessors();
    fn GetSystemVersion();
    fn GetPageSize();
    fn IsPointer64Bit();
    fn ReadBugCheckData();
    fn GetNumberSupportedProcessorTypes();
    fn GetSupportedProcessorTypes();
    fn GetProcessorTypeNames();
    fn GetEffectiveProcessorType();
    fn SetEffectiveProcessorType();
    fn GetExecutionStatus();
    fn SetExecutionStatus();
    fn GetCodeLevel();
    fn SetCodeLevel();
    fn GetEngineOptions();
    fn AddEngineOptions();
    fn RemoveEngineOptions();
    fn SetEngineOptions();
    fn GetSystemErrorControl();
    fn SetSystemErrorControl();
    fn GetTextMacro();
    fn SetTextMacro();
    fn GetRadix();
    fn SetRadix();
    fn Evaluate();
    fn CoerceValue();
    fn CoerceValues();
    fn Execute();
    fn ExecuteCommandFile();
    fn GetNumberBreakpoints();
    fn GetBreakpointByIndex();
    fn GetBreakpointById();
    fn GetBreakpointParameters();
    fn AddBreakpoint();
    fn RemoveBreakpoint();
    fn AddExtension();
    fn RemoveExtension();
    fn GetExtensionByPath();
    fn CallExtension();
    fn GetExtensionFunction();
    fn GetWindbgExtensionApis32();
    fn GetWindbgExtensionApis64();
    fn GetNumberEventFilters();
    fn GetEventFilterText();
    fn GetEventFilterCommand();
    fn SetEventFilterCommand();
    fn GetSpecificFilterParameters();
    fn SetSpecificFilterParameters();
    fn GetSpecificFilterArgument();
    fn SetSpecificFilterArgument();
    fn GetExceptionFilterParameters();
    fn SetExceptionFilterParameters();
    fn GetExceptionFilterSecondCommand();
    fn SetExceptionFilterSecondCommand();
    fn WaitForEvent();
    fn GetLastEventInformation();
    fn GetCurrentTimeDate();
    fn GetCurrentSystemUpTime();
    fn GetDumpFormatFlags();
    fn GetNumberTextReplacements();
    fn GetTextReplacement();
    fn SetTextReplacement();
    fn RemoveTextReplacements();
    fn OutputTextReplacements();
    fn GetAssemblyOptions();
    fn AddAssemblyOptions();
    fn RemoveAssemblyOptions();
    fn SetAssemblyOptions();
    fn GetExpressionSyntax();
    fn SetExpressionSyntax();
    fn SetExpressionSyntaxByName();
    fn GetNumberExpressionSyntaxes();
    fn GetExpressionSyntaxNames();
    fn GetNumberEvents();
    fn GetEventIndexDescription();
    fn GetCurrentEventIndex();
    fn SetNextEventIndex();
    fn GetLogFileWide();
    fn OpenLogFileWide();
    fn InputWide();
    fn ReturnInputWide();
    fn OutputWide();
    fn OutputVaListWide();
    fn ControlledOutputWide();
    fn ControlledOutputVaListWide();
    fn OutputPromptWide();
    fn OutputPromptVaListWide();
    fn GetPromptTextWide();
    fn AssembleWide();
    fn DisassembleWide();
    fn GetProcessorTypeNamesWide();
    fn GetTextMacroWide();
    fn SetTextMacroWide();
    fn EvaluateWide();
    fn ExecuteWide();
    fn ExecuteCommandFileWide();
    fn GetBreakpointByIndex2();
    fn GetBreakpointById2();
    fn AddBreakpoint2();
    fn RemoveBreakpoint2();
    fn AddExtensionWide();
    fn GetExtensionByPathWide();
    fn CallExtensionWide();
    fn GetExtensionFunctionWide();
    fn GetEventFilterTextWide();
    fn GetEventFilterCommandWide();
    fn SetEventFilterCommandWide();
    fn GetSpecificFilterArgumentWide();
    fn SetSpecificFilterArgumentWide();
    fn GetExceptionFilterSecondCommandWide();
    fn SetExceptionFilterSecondCommandWide();
    fn GetLastEventInformationWide();
    fn GetTextReplacementWide();
    fn SetTextReplacementWide();
    fn SetExpressionSyntaxByNameWide();
    fn GetExpressionSyntaxNamesWide();
    fn GetEventIndexDescriptionWide();
    fn GetLogFile2();
    fn OpenLogFile2();
    fn GetLogFile2Wide();
    fn OpenLogFile2Wide();
    fn GetSystemVersionValues();
    fn GetSystemVersionString();
    fn GetSystemVersionStringWide();
    fn GetContextStackTrace();
    fn OutputContextStackTrace();
    fn GetStoredEventInformation();
    fn GetManagedStatus();
    fn GetManagedStatusWide();
    fn ResetManagedStatus();
    fn GetStackTraceEx();
    fn OutputStackTraceEx();
    fn GetContextStackTraceEx();
    fn OutputContextStackTraceEx();
    fn GetBreakpointByGuid();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
impl IDebugControl5Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugControl5Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugControl5Vtbl {
        unsafe extern "system" fn GetInterrupt<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetInterrupt<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetInterruptTimeout<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, seconds: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetInterruptTimeout<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, seconds: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLogFile<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OpenLogFile<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PSTR, append: super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CloseLogFile<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLogMask<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetLogMask<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Input<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReturnInput<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Output<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputVaList<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ControlledOutput<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ControlledOutputVaList<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputPrompt<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputPromptVaList<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPromptText<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputCurrentState<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputVersionInformation<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNotifyEventHandle<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetNotifyEventHandle<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Assemble<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, instr: super::super::super::Foundation::PSTR, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Disassemble<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDisassembleEffectiveOffset<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputDisassembly<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, flags: u32, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputDisassemblyLines<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNearInstruction<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, nearoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetStackTrace<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetReturnOffset<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputStackTrace<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDebuggeeType<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, class: *mut u32, qualifier: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetActualProcessorType<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExecutingProcessorType<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberPossibleExecutingProcessorTypes<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPossibleExecutingProcessorTypes<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberProcessors<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSystemVersion<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: super::super::super::Foundation::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: super::super::super::Foundation::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPageSize<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, size: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsPointer64Bit<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadBugCheckData<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberSupportedProcessorTypes<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSupportedProcessorTypes<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetProcessorTypeNames<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEffectiveProcessorType<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetEffectiveProcessorType<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExecutionStatus<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, status: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetExecutionStatus<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, status: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCodeLevel<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, level: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetCodeLevel<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, level: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEngineOptions<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddEngineOptions<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveEngineOptions<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetEngineOptions<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSystemErrorControl<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSystemErrorControl<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputlevel: u32, breaklevel: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTextMacro<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, slot: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTextMacro<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, slot: u32, r#macro: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRadix<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, radix: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetRadix<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, radix: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Evaluate<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, expression: super::super::super::Foundation::PSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CoerceValue<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#in: *const DEBUG_VALUE, outtype: u32, out: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CoerceValues<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Execute<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, command: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ExecuteCommandFile<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, commandfile: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberBreakpoints<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBreakpointByIndex<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBreakpointById<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBreakpointParameters<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddBreakpoint<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32, desiredid: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveBreakpoint<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bp: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddExtension<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR, flags: u32, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveExtension<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExtensionByPath<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CallExtension<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, function: super::super::super::Foundation::PSTR, arguments: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExtensionFunction<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, funcname: super::super::super::Foundation::PSTR, function: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetWindbgExtensionApis32<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetWindbgExtensionApis64<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberEventFilters<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEventFilterText<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEventFilterCommand<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetEventFilterCommand<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSpecificFilterParameters<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSpecificFilterParameters<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSpecificFilterArgument<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSpecificFilterArgument<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, argument: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExceptionFilterParameters<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetExceptionFilterParameters<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExceptionFilterSecondCommand<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetExceptionFilterSecondCommand<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WaitForEvent<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLastEventInformation<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentTimeDate<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, timedate: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentSystemUpTime<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, uptime: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDumpFormatFlags<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, formatflags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberTextReplacements<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, numrepl: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTextReplacement<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PSTR, index: u32, srcbuffer: super::super::super::Foundation::PSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTextReplacement<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PSTR, dsttext: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveTextReplacements<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputTextReplacements<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetAssemblyOptions<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddAssemblyOptions<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveAssemblyOptions<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetAssemblyOptions<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExpressionSyntax<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetExpressionSyntax<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetExpressionSyntaxByName<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, abbrevname: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberExpressionSyntaxes<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExpressionSyntaxNames<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberEvents<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, events: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEventIndexDescription<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, descsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentEventIndex<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetNextEventIndex<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, relation: u32, value: u32, nextindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLogFileWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OpenLogFileWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PWSTR, append: super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn InputWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReturnInputWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputVaListWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ControlledOutputWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ControlledOutputVaListWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputPromptWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputPromptVaListWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPromptTextWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AssembleWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, instr: super::super::super::Foundation::PWSTR, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DisassembleWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetProcessorTypeNamesWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32, fullnamebuffer: super::super::super::Foundation::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTextMacroWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, slot: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTextMacroWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, slot: u32, r#macro: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EvaluateWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, expression: super::super::super::Foundation::PWSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ExecuteWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, command: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ExecuteCommandFileWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, commandfile: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBreakpointByIndex2<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBreakpointById2<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddBreakpoint2<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32, desiredid: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveBreakpoint2<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bp: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddExtensionWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PWSTR, flags: u32, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExtensionByPathWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PWSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CallExtensionWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, function: super::super::super::Foundation::PWSTR, arguments: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExtensionFunctionWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, funcname: super::super::super::Foundation::PWSTR, function: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEventFilterTextWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEventFilterCommandWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetEventFilterCommandWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSpecificFilterArgumentWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSpecificFilterArgumentWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, argument: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExceptionFilterSecondCommandWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetExceptionFilterSecondCommandWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLastEventInformationWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTextReplacementWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PWSTR, index: u32, srcbuffer: super::super::super::Foundation::PWSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PWSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTextReplacementWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PWSTR, dsttext: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetExpressionSyntaxByNameWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, abbrevname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExpressionSyntaxNamesWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, fullnamebuffer: super::super::super::Foundation::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEventIndexDescriptionWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, descsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLogFile2<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OpenLogFile2<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLogFile2Wide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OpenLogFile2Wide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSystemVersionValues<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, platformid: *mut u32, win32major: *mut u32, win32minor: *mut u32, kdmajor: *mut u32, kdminor: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSystemVersionString<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSystemVersionStringWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetContextStackTrace<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, startcontext: *const ::core::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framecontexts: *mut ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputContextStackTrace<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, framecontexts: *const ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetStoredEventInformation<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, context: *mut ::core::ffi::c_void, contextsize: u32, contextused: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetManagedStatus<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: *mut u32, whichstring: u32, string: super::super::super::Foundation::PSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetManagedStatusWide<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: *mut u32, whichstring: u32, string: super::super::super::Foundation::PWSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ResetManagedStatus<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetStackTraceEx<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME_EX, framessize: u32, framesfilled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputStackTraceEx<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME_EX, framessize: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetContextStackTraceEx<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, startcontext: *const ::core::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME_EX, framessize: u32, framecontexts: *mut ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputContextStackTraceEx<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME_EX, framessize: u32, framecontexts: *const ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBreakpointByGuid<Impl: IDebugControl5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, guid: *const ::windows::core::GUID, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetInterrupt::<Impl, IMPL_OFFSET>,
            SetInterrupt::<Impl, IMPL_OFFSET>,
            GetInterruptTimeout::<Impl, IMPL_OFFSET>,
            SetInterruptTimeout::<Impl, IMPL_OFFSET>,
            GetLogFile::<Impl, IMPL_OFFSET>,
            OpenLogFile::<Impl, IMPL_OFFSET>,
            CloseLogFile::<Impl, IMPL_OFFSET>,
            GetLogMask::<Impl, IMPL_OFFSET>,
            SetLogMask::<Impl, IMPL_OFFSET>,
            Input::<Impl, IMPL_OFFSET>,
            ReturnInput::<Impl, IMPL_OFFSET>,
            Output::<Impl, IMPL_OFFSET>,
            OutputVaList::<Impl, IMPL_OFFSET>,
            ControlledOutput::<Impl, IMPL_OFFSET>,
            ControlledOutputVaList::<Impl, IMPL_OFFSET>,
            OutputPrompt::<Impl, IMPL_OFFSET>,
            OutputPromptVaList::<Impl, IMPL_OFFSET>,
            GetPromptText::<Impl, IMPL_OFFSET>,
            OutputCurrentState::<Impl, IMPL_OFFSET>,
            OutputVersionInformation::<Impl, IMPL_OFFSET>,
            GetNotifyEventHandle::<Impl, IMPL_OFFSET>,
            SetNotifyEventHandle::<Impl, IMPL_OFFSET>,
            Assemble::<Impl, IMPL_OFFSET>,
            Disassemble::<Impl, IMPL_OFFSET>,
            GetDisassembleEffectiveOffset::<Impl, IMPL_OFFSET>,
            OutputDisassembly::<Impl, IMPL_OFFSET>,
            OutputDisassemblyLines::<Impl, IMPL_OFFSET>,
            GetNearInstruction::<Impl, IMPL_OFFSET>,
            GetStackTrace::<Impl, IMPL_OFFSET>,
            GetReturnOffset::<Impl, IMPL_OFFSET>,
            OutputStackTrace::<Impl, IMPL_OFFSET>,
            GetDebuggeeType::<Impl, IMPL_OFFSET>,
            GetActualProcessorType::<Impl, IMPL_OFFSET>,
            GetExecutingProcessorType::<Impl, IMPL_OFFSET>,
            GetNumberPossibleExecutingProcessorTypes::<Impl, IMPL_OFFSET>,
            GetPossibleExecutingProcessorTypes::<Impl, IMPL_OFFSET>,
            GetNumberProcessors::<Impl, IMPL_OFFSET>,
            GetSystemVersion::<Impl, IMPL_OFFSET>,
            GetPageSize::<Impl, IMPL_OFFSET>,
            IsPointer64Bit::<Impl, IMPL_OFFSET>,
            ReadBugCheckData::<Impl, IMPL_OFFSET>,
            GetNumberSupportedProcessorTypes::<Impl, IMPL_OFFSET>,
            GetSupportedProcessorTypes::<Impl, IMPL_OFFSET>,
            GetProcessorTypeNames::<Impl, IMPL_OFFSET>,
            GetEffectiveProcessorType::<Impl, IMPL_OFFSET>,
            SetEffectiveProcessorType::<Impl, IMPL_OFFSET>,
            GetExecutionStatus::<Impl, IMPL_OFFSET>,
            SetExecutionStatus::<Impl, IMPL_OFFSET>,
            GetCodeLevel::<Impl, IMPL_OFFSET>,
            SetCodeLevel::<Impl, IMPL_OFFSET>,
            GetEngineOptions::<Impl, IMPL_OFFSET>,
            AddEngineOptions::<Impl, IMPL_OFFSET>,
            RemoveEngineOptions::<Impl, IMPL_OFFSET>,
            SetEngineOptions::<Impl, IMPL_OFFSET>,
            GetSystemErrorControl::<Impl, IMPL_OFFSET>,
            SetSystemErrorControl::<Impl, IMPL_OFFSET>,
            GetTextMacro::<Impl, IMPL_OFFSET>,
            SetTextMacro::<Impl, IMPL_OFFSET>,
            GetRadix::<Impl, IMPL_OFFSET>,
            SetRadix::<Impl, IMPL_OFFSET>,
            Evaluate::<Impl, IMPL_OFFSET>,
            CoerceValue::<Impl, IMPL_OFFSET>,
            CoerceValues::<Impl, IMPL_OFFSET>,
            Execute::<Impl, IMPL_OFFSET>,
            ExecuteCommandFile::<Impl, IMPL_OFFSET>,
            GetNumberBreakpoints::<Impl, IMPL_OFFSET>,
            GetBreakpointByIndex::<Impl, IMPL_OFFSET>,
            GetBreakpointById::<Impl, IMPL_OFFSET>,
            GetBreakpointParameters::<Impl, IMPL_OFFSET>,
            AddBreakpoint::<Impl, IMPL_OFFSET>,
            RemoveBreakpoint::<Impl, IMPL_OFFSET>,
            AddExtension::<Impl, IMPL_OFFSET>,
            RemoveExtension::<Impl, IMPL_OFFSET>,
            GetExtensionByPath::<Impl, IMPL_OFFSET>,
            CallExtension::<Impl, IMPL_OFFSET>,
            GetExtensionFunction::<Impl, IMPL_OFFSET>,
            GetWindbgExtensionApis32::<Impl, IMPL_OFFSET>,
            GetWindbgExtensionApis64::<Impl, IMPL_OFFSET>,
            GetNumberEventFilters::<Impl, IMPL_OFFSET>,
            GetEventFilterText::<Impl, IMPL_OFFSET>,
            GetEventFilterCommand::<Impl, IMPL_OFFSET>,
            SetEventFilterCommand::<Impl, IMPL_OFFSET>,
            GetSpecificFilterParameters::<Impl, IMPL_OFFSET>,
            SetSpecificFilterParameters::<Impl, IMPL_OFFSET>,
            GetSpecificFilterArgument::<Impl, IMPL_OFFSET>,
            SetSpecificFilterArgument::<Impl, IMPL_OFFSET>,
            GetExceptionFilterParameters::<Impl, IMPL_OFFSET>,
            SetExceptionFilterParameters::<Impl, IMPL_OFFSET>,
            GetExceptionFilterSecondCommand::<Impl, IMPL_OFFSET>,
            SetExceptionFilterSecondCommand::<Impl, IMPL_OFFSET>,
            WaitForEvent::<Impl, IMPL_OFFSET>,
            GetLastEventInformation::<Impl, IMPL_OFFSET>,
            GetCurrentTimeDate::<Impl, IMPL_OFFSET>,
            GetCurrentSystemUpTime::<Impl, IMPL_OFFSET>,
            GetDumpFormatFlags::<Impl, IMPL_OFFSET>,
            GetNumberTextReplacements::<Impl, IMPL_OFFSET>,
            GetTextReplacement::<Impl, IMPL_OFFSET>,
            SetTextReplacement::<Impl, IMPL_OFFSET>,
            RemoveTextReplacements::<Impl, IMPL_OFFSET>,
            OutputTextReplacements::<Impl, IMPL_OFFSET>,
            GetAssemblyOptions::<Impl, IMPL_OFFSET>,
            AddAssemblyOptions::<Impl, IMPL_OFFSET>,
            RemoveAssemblyOptions::<Impl, IMPL_OFFSET>,
            SetAssemblyOptions::<Impl, IMPL_OFFSET>,
            GetExpressionSyntax::<Impl, IMPL_OFFSET>,
            SetExpressionSyntax::<Impl, IMPL_OFFSET>,
            SetExpressionSyntaxByName::<Impl, IMPL_OFFSET>,
            GetNumberExpressionSyntaxes::<Impl, IMPL_OFFSET>,
            GetExpressionSyntaxNames::<Impl, IMPL_OFFSET>,
            GetNumberEvents::<Impl, IMPL_OFFSET>,
            GetEventIndexDescription::<Impl, IMPL_OFFSET>,
            GetCurrentEventIndex::<Impl, IMPL_OFFSET>,
            SetNextEventIndex::<Impl, IMPL_OFFSET>,
            GetLogFileWide::<Impl, IMPL_OFFSET>,
            OpenLogFileWide::<Impl, IMPL_OFFSET>,
            InputWide::<Impl, IMPL_OFFSET>,
            ReturnInputWide::<Impl, IMPL_OFFSET>,
            OutputWide::<Impl, IMPL_OFFSET>,
            OutputVaListWide::<Impl, IMPL_OFFSET>,
            ControlledOutputWide::<Impl, IMPL_OFFSET>,
            ControlledOutputVaListWide::<Impl, IMPL_OFFSET>,
            OutputPromptWide::<Impl, IMPL_OFFSET>,
            OutputPromptVaListWide::<Impl, IMPL_OFFSET>,
            GetPromptTextWide::<Impl, IMPL_OFFSET>,
            AssembleWide::<Impl, IMPL_OFFSET>,
            DisassembleWide::<Impl, IMPL_OFFSET>,
            GetProcessorTypeNamesWide::<Impl, IMPL_OFFSET>,
            GetTextMacroWide::<Impl, IMPL_OFFSET>,
            SetTextMacroWide::<Impl, IMPL_OFFSET>,
            EvaluateWide::<Impl, IMPL_OFFSET>,
            ExecuteWide::<Impl, IMPL_OFFSET>,
            ExecuteCommandFileWide::<Impl, IMPL_OFFSET>,
            GetBreakpointByIndex2::<Impl, IMPL_OFFSET>,
            GetBreakpointById2::<Impl, IMPL_OFFSET>,
            AddBreakpoint2::<Impl, IMPL_OFFSET>,
            RemoveBreakpoint2::<Impl, IMPL_OFFSET>,
            AddExtensionWide::<Impl, IMPL_OFFSET>,
            GetExtensionByPathWide::<Impl, IMPL_OFFSET>,
            CallExtensionWide::<Impl, IMPL_OFFSET>,
            GetExtensionFunctionWide::<Impl, IMPL_OFFSET>,
            GetEventFilterTextWide::<Impl, IMPL_OFFSET>,
            GetEventFilterCommandWide::<Impl, IMPL_OFFSET>,
            SetEventFilterCommandWide::<Impl, IMPL_OFFSET>,
            GetSpecificFilterArgumentWide::<Impl, IMPL_OFFSET>,
            SetSpecificFilterArgumentWide::<Impl, IMPL_OFFSET>,
            GetExceptionFilterSecondCommandWide::<Impl, IMPL_OFFSET>,
            SetExceptionFilterSecondCommandWide::<Impl, IMPL_OFFSET>,
            GetLastEventInformationWide::<Impl, IMPL_OFFSET>,
            GetTextReplacementWide::<Impl, IMPL_OFFSET>,
            SetTextReplacementWide::<Impl, IMPL_OFFSET>,
            SetExpressionSyntaxByNameWide::<Impl, IMPL_OFFSET>,
            GetExpressionSyntaxNamesWide::<Impl, IMPL_OFFSET>,
            GetEventIndexDescriptionWide::<Impl, IMPL_OFFSET>,
            GetLogFile2::<Impl, IMPL_OFFSET>,
            OpenLogFile2::<Impl, IMPL_OFFSET>,
            GetLogFile2Wide::<Impl, IMPL_OFFSET>,
            OpenLogFile2Wide::<Impl, IMPL_OFFSET>,
            GetSystemVersionValues::<Impl, IMPL_OFFSET>,
            GetSystemVersionString::<Impl, IMPL_OFFSET>,
            GetSystemVersionStringWide::<Impl, IMPL_OFFSET>,
            GetContextStackTrace::<Impl, IMPL_OFFSET>,
            OutputContextStackTrace::<Impl, IMPL_OFFSET>,
            GetStoredEventInformation::<Impl, IMPL_OFFSET>,
            GetManagedStatus::<Impl, IMPL_OFFSET>,
            GetManagedStatusWide::<Impl, IMPL_OFFSET>,
            ResetManagedStatus::<Impl, IMPL_OFFSET>,
            GetStackTraceEx::<Impl, IMPL_OFFSET>,
            OutputStackTraceEx::<Impl, IMPL_OFFSET>,
            GetContextStackTraceEx::<Impl, IMPL_OFFSET>,
            OutputContextStackTraceEx::<Impl, IMPL_OFFSET>,
            GetBreakpointByGuid::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugControl5 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
pub trait IDebugControl6Impl: Sized {
    fn GetInterrupt();
    fn SetInterrupt();
    fn GetInterruptTimeout();
    fn SetInterruptTimeout();
    fn GetLogFile();
    fn OpenLogFile();
    fn CloseLogFile();
    fn GetLogMask();
    fn SetLogMask();
    fn Input();
    fn ReturnInput();
    fn Output();
    fn OutputVaList();
    fn ControlledOutput();
    fn ControlledOutputVaList();
    fn OutputPrompt();
    fn OutputPromptVaList();
    fn GetPromptText();
    fn OutputCurrentState();
    fn OutputVersionInformation();
    fn GetNotifyEventHandle();
    fn SetNotifyEventHandle();
    fn Assemble();
    fn Disassemble();
    fn GetDisassembleEffectiveOffset();
    fn OutputDisassembly();
    fn OutputDisassemblyLines();
    fn GetNearInstruction();
    fn GetStackTrace();
    fn GetReturnOffset();
    fn OutputStackTrace();
    fn GetDebuggeeType();
    fn GetActualProcessorType();
    fn GetExecutingProcessorType();
    fn GetNumberPossibleExecutingProcessorTypes();
    fn GetPossibleExecutingProcessorTypes();
    fn GetNumberProcessors();
    fn GetSystemVersion();
    fn GetPageSize();
    fn IsPointer64Bit();
    fn ReadBugCheckData();
    fn GetNumberSupportedProcessorTypes();
    fn GetSupportedProcessorTypes();
    fn GetProcessorTypeNames();
    fn GetEffectiveProcessorType();
    fn SetEffectiveProcessorType();
    fn GetExecutionStatus();
    fn SetExecutionStatus();
    fn GetCodeLevel();
    fn SetCodeLevel();
    fn GetEngineOptions();
    fn AddEngineOptions();
    fn RemoveEngineOptions();
    fn SetEngineOptions();
    fn GetSystemErrorControl();
    fn SetSystemErrorControl();
    fn GetTextMacro();
    fn SetTextMacro();
    fn GetRadix();
    fn SetRadix();
    fn Evaluate();
    fn CoerceValue();
    fn CoerceValues();
    fn Execute();
    fn ExecuteCommandFile();
    fn GetNumberBreakpoints();
    fn GetBreakpointByIndex();
    fn GetBreakpointById();
    fn GetBreakpointParameters();
    fn AddBreakpoint();
    fn RemoveBreakpoint();
    fn AddExtension();
    fn RemoveExtension();
    fn GetExtensionByPath();
    fn CallExtension();
    fn GetExtensionFunction();
    fn GetWindbgExtensionApis32();
    fn GetWindbgExtensionApis64();
    fn GetNumberEventFilters();
    fn GetEventFilterText();
    fn GetEventFilterCommand();
    fn SetEventFilterCommand();
    fn GetSpecificFilterParameters();
    fn SetSpecificFilterParameters();
    fn GetSpecificFilterArgument();
    fn SetSpecificFilterArgument();
    fn GetExceptionFilterParameters();
    fn SetExceptionFilterParameters();
    fn GetExceptionFilterSecondCommand();
    fn SetExceptionFilterSecondCommand();
    fn WaitForEvent();
    fn GetLastEventInformation();
    fn GetCurrentTimeDate();
    fn GetCurrentSystemUpTime();
    fn GetDumpFormatFlags();
    fn GetNumberTextReplacements();
    fn GetTextReplacement();
    fn SetTextReplacement();
    fn RemoveTextReplacements();
    fn OutputTextReplacements();
    fn GetAssemblyOptions();
    fn AddAssemblyOptions();
    fn RemoveAssemblyOptions();
    fn SetAssemblyOptions();
    fn GetExpressionSyntax();
    fn SetExpressionSyntax();
    fn SetExpressionSyntaxByName();
    fn GetNumberExpressionSyntaxes();
    fn GetExpressionSyntaxNames();
    fn GetNumberEvents();
    fn GetEventIndexDescription();
    fn GetCurrentEventIndex();
    fn SetNextEventIndex();
    fn GetLogFileWide();
    fn OpenLogFileWide();
    fn InputWide();
    fn ReturnInputWide();
    fn OutputWide();
    fn OutputVaListWide();
    fn ControlledOutputWide();
    fn ControlledOutputVaListWide();
    fn OutputPromptWide();
    fn OutputPromptVaListWide();
    fn GetPromptTextWide();
    fn AssembleWide();
    fn DisassembleWide();
    fn GetProcessorTypeNamesWide();
    fn GetTextMacroWide();
    fn SetTextMacroWide();
    fn EvaluateWide();
    fn ExecuteWide();
    fn ExecuteCommandFileWide();
    fn GetBreakpointByIndex2();
    fn GetBreakpointById2();
    fn AddBreakpoint2();
    fn RemoveBreakpoint2();
    fn AddExtensionWide();
    fn GetExtensionByPathWide();
    fn CallExtensionWide();
    fn GetExtensionFunctionWide();
    fn GetEventFilterTextWide();
    fn GetEventFilterCommandWide();
    fn SetEventFilterCommandWide();
    fn GetSpecificFilterArgumentWide();
    fn SetSpecificFilterArgumentWide();
    fn GetExceptionFilterSecondCommandWide();
    fn SetExceptionFilterSecondCommandWide();
    fn GetLastEventInformationWide();
    fn GetTextReplacementWide();
    fn SetTextReplacementWide();
    fn SetExpressionSyntaxByNameWide();
    fn GetExpressionSyntaxNamesWide();
    fn GetEventIndexDescriptionWide();
    fn GetLogFile2();
    fn OpenLogFile2();
    fn GetLogFile2Wide();
    fn OpenLogFile2Wide();
    fn GetSystemVersionValues();
    fn GetSystemVersionString();
    fn GetSystemVersionStringWide();
    fn GetContextStackTrace();
    fn OutputContextStackTrace();
    fn GetStoredEventInformation();
    fn GetManagedStatus();
    fn GetManagedStatusWide();
    fn ResetManagedStatus();
    fn GetStackTraceEx();
    fn OutputStackTraceEx();
    fn GetContextStackTraceEx();
    fn OutputContextStackTraceEx();
    fn GetBreakpointByGuid();
    fn GetExecutionStatusEx();
    fn GetSynchronizationStatus();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
impl IDebugControl6Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugControl6Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugControl6Vtbl {
        unsafe extern "system" fn GetInterrupt<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetInterrupt<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetInterruptTimeout<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, seconds: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetInterruptTimeout<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, seconds: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLogFile<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OpenLogFile<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PSTR, append: super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CloseLogFile<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLogMask<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetLogMask<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Input<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReturnInput<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Output<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputVaList<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ControlledOutput<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ControlledOutputVaList<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputPrompt<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputPromptVaList<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPromptText<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputCurrentState<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputVersionInformation<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNotifyEventHandle<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetNotifyEventHandle<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Assemble<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, instr: super::super::super::Foundation::PSTR, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Disassemble<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDisassembleEffectiveOffset<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputDisassembly<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, flags: u32, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputDisassemblyLines<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNearInstruction<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, nearoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetStackTrace<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetReturnOffset<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputStackTrace<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDebuggeeType<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, class: *mut u32, qualifier: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetActualProcessorType<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExecutingProcessorType<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberPossibleExecutingProcessorTypes<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPossibleExecutingProcessorTypes<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberProcessors<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSystemVersion<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: super::super::super::Foundation::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: super::super::super::Foundation::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPageSize<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, size: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsPointer64Bit<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadBugCheckData<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberSupportedProcessorTypes<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSupportedProcessorTypes<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetProcessorTypeNames<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEffectiveProcessorType<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetEffectiveProcessorType<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExecutionStatus<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, status: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetExecutionStatus<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, status: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCodeLevel<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, level: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetCodeLevel<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, level: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEngineOptions<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddEngineOptions<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveEngineOptions<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetEngineOptions<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSystemErrorControl<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSystemErrorControl<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputlevel: u32, breaklevel: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTextMacro<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, slot: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTextMacro<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, slot: u32, r#macro: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRadix<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, radix: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetRadix<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, radix: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Evaluate<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, expression: super::super::super::Foundation::PSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CoerceValue<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#in: *const DEBUG_VALUE, outtype: u32, out: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CoerceValues<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Execute<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, command: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ExecuteCommandFile<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, commandfile: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberBreakpoints<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBreakpointByIndex<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBreakpointById<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBreakpointParameters<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddBreakpoint<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32, desiredid: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveBreakpoint<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bp: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddExtension<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR, flags: u32, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveExtension<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExtensionByPath<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CallExtension<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, function: super::super::super::Foundation::PSTR, arguments: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExtensionFunction<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, funcname: super::super::super::Foundation::PSTR, function: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetWindbgExtensionApis32<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetWindbgExtensionApis64<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberEventFilters<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEventFilterText<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEventFilterCommand<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetEventFilterCommand<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSpecificFilterParameters<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSpecificFilterParameters<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSpecificFilterArgument<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSpecificFilterArgument<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, argument: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExceptionFilterParameters<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetExceptionFilterParameters<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExceptionFilterSecondCommand<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetExceptionFilterSecondCommand<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WaitForEvent<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLastEventInformation<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentTimeDate<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, timedate: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentSystemUpTime<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, uptime: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDumpFormatFlags<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, formatflags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberTextReplacements<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, numrepl: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTextReplacement<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PSTR, index: u32, srcbuffer: super::super::super::Foundation::PSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTextReplacement<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PSTR, dsttext: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveTextReplacements<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputTextReplacements<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetAssemblyOptions<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddAssemblyOptions<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveAssemblyOptions<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetAssemblyOptions<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExpressionSyntax<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetExpressionSyntax<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetExpressionSyntaxByName<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, abbrevname: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberExpressionSyntaxes<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExpressionSyntaxNames<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberEvents<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, events: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEventIndexDescription<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, descsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentEventIndex<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetNextEventIndex<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, relation: u32, value: u32, nextindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLogFileWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OpenLogFileWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PWSTR, append: super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn InputWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReturnInputWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputVaListWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ControlledOutputWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ControlledOutputVaListWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputPromptWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputPromptVaListWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPromptTextWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AssembleWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, instr: super::super::super::Foundation::PWSTR, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DisassembleWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetProcessorTypeNamesWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32, fullnamebuffer: super::super::super::Foundation::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTextMacroWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, slot: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTextMacroWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, slot: u32, r#macro: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EvaluateWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, expression: super::super::super::Foundation::PWSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ExecuteWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, command: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ExecuteCommandFileWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, commandfile: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBreakpointByIndex2<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBreakpointById2<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddBreakpoint2<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32, desiredid: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveBreakpoint2<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bp: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddExtensionWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PWSTR, flags: u32, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExtensionByPathWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PWSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CallExtensionWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, function: super::super::super::Foundation::PWSTR, arguments: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExtensionFunctionWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, funcname: super::super::super::Foundation::PWSTR, function: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEventFilterTextWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEventFilterCommandWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetEventFilterCommandWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSpecificFilterArgumentWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSpecificFilterArgumentWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, argument: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExceptionFilterSecondCommandWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetExceptionFilterSecondCommandWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLastEventInformationWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTextReplacementWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PWSTR, index: u32, srcbuffer: super::super::super::Foundation::PWSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PWSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTextReplacementWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PWSTR, dsttext: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetExpressionSyntaxByNameWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, abbrevname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExpressionSyntaxNamesWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, fullnamebuffer: super::super::super::Foundation::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEventIndexDescriptionWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, descsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLogFile2<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OpenLogFile2<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLogFile2Wide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OpenLogFile2Wide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSystemVersionValues<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, platformid: *mut u32, win32major: *mut u32, win32minor: *mut u32, kdmajor: *mut u32, kdminor: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSystemVersionString<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSystemVersionStringWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetContextStackTrace<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, startcontext: *const ::core::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framecontexts: *mut ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputContextStackTrace<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, framecontexts: *const ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetStoredEventInformation<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, context: *mut ::core::ffi::c_void, contextsize: u32, contextused: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetManagedStatus<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: *mut u32, whichstring: u32, string: super::super::super::Foundation::PSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetManagedStatusWide<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: *mut u32, whichstring: u32, string: super::super::super::Foundation::PWSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ResetManagedStatus<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetStackTraceEx<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME_EX, framessize: u32, framesfilled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputStackTraceEx<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME_EX, framessize: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetContextStackTraceEx<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, startcontext: *const ::core::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME_EX, framessize: u32, framecontexts: *mut ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputContextStackTraceEx<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME_EX, framessize: u32, framecontexts: *const ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBreakpointByGuid<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, guid: *const ::windows::core::GUID, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExecutionStatusEx<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, status: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSynchronizationStatus<Impl: IDebugControl6Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, sendsattempted: *mut u32, secondssincelastresponse: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetInterrupt::<Impl, IMPL_OFFSET>,
            SetInterrupt::<Impl, IMPL_OFFSET>,
            GetInterruptTimeout::<Impl, IMPL_OFFSET>,
            SetInterruptTimeout::<Impl, IMPL_OFFSET>,
            GetLogFile::<Impl, IMPL_OFFSET>,
            OpenLogFile::<Impl, IMPL_OFFSET>,
            CloseLogFile::<Impl, IMPL_OFFSET>,
            GetLogMask::<Impl, IMPL_OFFSET>,
            SetLogMask::<Impl, IMPL_OFFSET>,
            Input::<Impl, IMPL_OFFSET>,
            ReturnInput::<Impl, IMPL_OFFSET>,
            Output::<Impl, IMPL_OFFSET>,
            OutputVaList::<Impl, IMPL_OFFSET>,
            ControlledOutput::<Impl, IMPL_OFFSET>,
            ControlledOutputVaList::<Impl, IMPL_OFFSET>,
            OutputPrompt::<Impl, IMPL_OFFSET>,
            OutputPromptVaList::<Impl, IMPL_OFFSET>,
            GetPromptText::<Impl, IMPL_OFFSET>,
            OutputCurrentState::<Impl, IMPL_OFFSET>,
            OutputVersionInformation::<Impl, IMPL_OFFSET>,
            GetNotifyEventHandle::<Impl, IMPL_OFFSET>,
            SetNotifyEventHandle::<Impl, IMPL_OFFSET>,
            Assemble::<Impl, IMPL_OFFSET>,
            Disassemble::<Impl, IMPL_OFFSET>,
            GetDisassembleEffectiveOffset::<Impl, IMPL_OFFSET>,
            OutputDisassembly::<Impl, IMPL_OFFSET>,
            OutputDisassemblyLines::<Impl, IMPL_OFFSET>,
            GetNearInstruction::<Impl, IMPL_OFFSET>,
            GetStackTrace::<Impl, IMPL_OFFSET>,
            GetReturnOffset::<Impl, IMPL_OFFSET>,
            OutputStackTrace::<Impl, IMPL_OFFSET>,
            GetDebuggeeType::<Impl, IMPL_OFFSET>,
            GetActualProcessorType::<Impl, IMPL_OFFSET>,
            GetExecutingProcessorType::<Impl, IMPL_OFFSET>,
            GetNumberPossibleExecutingProcessorTypes::<Impl, IMPL_OFFSET>,
            GetPossibleExecutingProcessorTypes::<Impl, IMPL_OFFSET>,
            GetNumberProcessors::<Impl, IMPL_OFFSET>,
            GetSystemVersion::<Impl, IMPL_OFFSET>,
            GetPageSize::<Impl, IMPL_OFFSET>,
            IsPointer64Bit::<Impl, IMPL_OFFSET>,
            ReadBugCheckData::<Impl, IMPL_OFFSET>,
            GetNumberSupportedProcessorTypes::<Impl, IMPL_OFFSET>,
            GetSupportedProcessorTypes::<Impl, IMPL_OFFSET>,
            GetProcessorTypeNames::<Impl, IMPL_OFFSET>,
            GetEffectiveProcessorType::<Impl, IMPL_OFFSET>,
            SetEffectiveProcessorType::<Impl, IMPL_OFFSET>,
            GetExecutionStatus::<Impl, IMPL_OFFSET>,
            SetExecutionStatus::<Impl, IMPL_OFFSET>,
            GetCodeLevel::<Impl, IMPL_OFFSET>,
            SetCodeLevel::<Impl, IMPL_OFFSET>,
            GetEngineOptions::<Impl, IMPL_OFFSET>,
            AddEngineOptions::<Impl, IMPL_OFFSET>,
            RemoveEngineOptions::<Impl, IMPL_OFFSET>,
            SetEngineOptions::<Impl, IMPL_OFFSET>,
            GetSystemErrorControl::<Impl, IMPL_OFFSET>,
            SetSystemErrorControl::<Impl, IMPL_OFFSET>,
            GetTextMacro::<Impl, IMPL_OFFSET>,
            SetTextMacro::<Impl, IMPL_OFFSET>,
            GetRadix::<Impl, IMPL_OFFSET>,
            SetRadix::<Impl, IMPL_OFFSET>,
            Evaluate::<Impl, IMPL_OFFSET>,
            CoerceValue::<Impl, IMPL_OFFSET>,
            CoerceValues::<Impl, IMPL_OFFSET>,
            Execute::<Impl, IMPL_OFFSET>,
            ExecuteCommandFile::<Impl, IMPL_OFFSET>,
            GetNumberBreakpoints::<Impl, IMPL_OFFSET>,
            GetBreakpointByIndex::<Impl, IMPL_OFFSET>,
            GetBreakpointById::<Impl, IMPL_OFFSET>,
            GetBreakpointParameters::<Impl, IMPL_OFFSET>,
            AddBreakpoint::<Impl, IMPL_OFFSET>,
            RemoveBreakpoint::<Impl, IMPL_OFFSET>,
            AddExtension::<Impl, IMPL_OFFSET>,
            RemoveExtension::<Impl, IMPL_OFFSET>,
            GetExtensionByPath::<Impl, IMPL_OFFSET>,
            CallExtension::<Impl, IMPL_OFFSET>,
            GetExtensionFunction::<Impl, IMPL_OFFSET>,
            GetWindbgExtensionApis32::<Impl, IMPL_OFFSET>,
            GetWindbgExtensionApis64::<Impl, IMPL_OFFSET>,
            GetNumberEventFilters::<Impl, IMPL_OFFSET>,
            GetEventFilterText::<Impl, IMPL_OFFSET>,
            GetEventFilterCommand::<Impl, IMPL_OFFSET>,
            SetEventFilterCommand::<Impl, IMPL_OFFSET>,
            GetSpecificFilterParameters::<Impl, IMPL_OFFSET>,
            SetSpecificFilterParameters::<Impl, IMPL_OFFSET>,
            GetSpecificFilterArgument::<Impl, IMPL_OFFSET>,
            SetSpecificFilterArgument::<Impl, IMPL_OFFSET>,
            GetExceptionFilterParameters::<Impl, IMPL_OFFSET>,
            SetExceptionFilterParameters::<Impl, IMPL_OFFSET>,
            GetExceptionFilterSecondCommand::<Impl, IMPL_OFFSET>,
            SetExceptionFilterSecondCommand::<Impl, IMPL_OFFSET>,
            WaitForEvent::<Impl, IMPL_OFFSET>,
            GetLastEventInformation::<Impl, IMPL_OFFSET>,
            GetCurrentTimeDate::<Impl, IMPL_OFFSET>,
            GetCurrentSystemUpTime::<Impl, IMPL_OFFSET>,
            GetDumpFormatFlags::<Impl, IMPL_OFFSET>,
            GetNumberTextReplacements::<Impl, IMPL_OFFSET>,
            GetTextReplacement::<Impl, IMPL_OFFSET>,
            SetTextReplacement::<Impl, IMPL_OFFSET>,
            RemoveTextReplacements::<Impl, IMPL_OFFSET>,
            OutputTextReplacements::<Impl, IMPL_OFFSET>,
            GetAssemblyOptions::<Impl, IMPL_OFFSET>,
            AddAssemblyOptions::<Impl, IMPL_OFFSET>,
            RemoveAssemblyOptions::<Impl, IMPL_OFFSET>,
            SetAssemblyOptions::<Impl, IMPL_OFFSET>,
            GetExpressionSyntax::<Impl, IMPL_OFFSET>,
            SetExpressionSyntax::<Impl, IMPL_OFFSET>,
            SetExpressionSyntaxByName::<Impl, IMPL_OFFSET>,
            GetNumberExpressionSyntaxes::<Impl, IMPL_OFFSET>,
            GetExpressionSyntaxNames::<Impl, IMPL_OFFSET>,
            GetNumberEvents::<Impl, IMPL_OFFSET>,
            GetEventIndexDescription::<Impl, IMPL_OFFSET>,
            GetCurrentEventIndex::<Impl, IMPL_OFFSET>,
            SetNextEventIndex::<Impl, IMPL_OFFSET>,
            GetLogFileWide::<Impl, IMPL_OFFSET>,
            OpenLogFileWide::<Impl, IMPL_OFFSET>,
            InputWide::<Impl, IMPL_OFFSET>,
            ReturnInputWide::<Impl, IMPL_OFFSET>,
            OutputWide::<Impl, IMPL_OFFSET>,
            OutputVaListWide::<Impl, IMPL_OFFSET>,
            ControlledOutputWide::<Impl, IMPL_OFFSET>,
            ControlledOutputVaListWide::<Impl, IMPL_OFFSET>,
            OutputPromptWide::<Impl, IMPL_OFFSET>,
            OutputPromptVaListWide::<Impl, IMPL_OFFSET>,
            GetPromptTextWide::<Impl, IMPL_OFFSET>,
            AssembleWide::<Impl, IMPL_OFFSET>,
            DisassembleWide::<Impl, IMPL_OFFSET>,
            GetProcessorTypeNamesWide::<Impl, IMPL_OFFSET>,
            GetTextMacroWide::<Impl, IMPL_OFFSET>,
            SetTextMacroWide::<Impl, IMPL_OFFSET>,
            EvaluateWide::<Impl, IMPL_OFFSET>,
            ExecuteWide::<Impl, IMPL_OFFSET>,
            ExecuteCommandFileWide::<Impl, IMPL_OFFSET>,
            GetBreakpointByIndex2::<Impl, IMPL_OFFSET>,
            GetBreakpointById2::<Impl, IMPL_OFFSET>,
            AddBreakpoint2::<Impl, IMPL_OFFSET>,
            RemoveBreakpoint2::<Impl, IMPL_OFFSET>,
            AddExtensionWide::<Impl, IMPL_OFFSET>,
            GetExtensionByPathWide::<Impl, IMPL_OFFSET>,
            CallExtensionWide::<Impl, IMPL_OFFSET>,
            GetExtensionFunctionWide::<Impl, IMPL_OFFSET>,
            GetEventFilterTextWide::<Impl, IMPL_OFFSET>,
            GetEventFilterCommandWide::<Impl, IMPL_OFFSET>,
            SetEventFilterCommandWide::<Impl, IMPL_OFFSET>,
            GetSpecificFilterArgumentWide::<Impl, IMPL_OFFSET>,
            SetSpecificFilterArgumentWide::<Impl, IMPL_OFFSET>,
            GetExceptionFilterSecondCommandWide::<Impl, IMPL_OFFSET>,
            SetExceptionFilterSecondCommandWide::<Impl, IMPL_OFFSET>,
            GetLastEventInformationWide::<Impl, IMPL_OFFSET>,
            GetTextReplacementWide::<Impl, IMPL_OFFSET>,
            SetTextReplacementWide::<Impl, IMPL_OFFSET>,
            SetExpressionSyntaxByNameWide::<Impl, IMPL_OFFSET>,
            GetExpressionSyntaxNamesWide::<Impl, IMPL_OFFSET>,
            GetEventIndexDescriptionWide::<Impl, IMPL_OFFSET>,
            GetLogFile2::<Impl, IMPL_OFFSET>,
            OpenLogFile2::<Impl, IMPL_OFFSET>,
            GetLogFile2Wide::<Impl, IMPL_OFFSET>,
            OpenLogFile2Wide::<Impl, IMPL_OFFSET>,
            GetSystemVersionValues::<Impl, IMPL_OFFSET>,
            GetSystemVersionString::<Impl, IMPL_OFFSET>,
            GetSystemVersionStringWide::<Impl, IMPL_OFFSET>,
            GetContextStackTrace::<Impl, IMPL_OFFSET>,
            OutputContextStackTrace::<Impl, IMPL_OFFSET>,
            GetStoredEventInformation::<Impl, IMPL_OFFSET>,
            GetManagedStatus::<Impl, IMPL_OFFSET>,
            GetManagedStatusWide::<Impl, IMPL_OFFSET>,
            ResetManagedStatus::<Impl, IMPL_OFFSET>,
            GetStackTraceEx::<Impl, IMPL_OFFSET>,
            OutputStackTraceEx::<Impl, IMPL_OFFSET>,
            GetContextStackTraceEx::<Impl, IMPL_OFFSET>,
            OutputContextStackTraceEx::<Impl, IMPL_OFFSET>,
            GetBreakpointByGuid::<Impl, IMPL_OFFSET>,
            GetExecutionStatusEx::<Impl, IMPL_OFFSET>,
            GetSynchronizationStatus::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugControl6 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
pub trait IDebugControl7Impl: Sized {
    fn GetInterrupt();
    fn SetInterrupt();
    fn GetInterruptTimeout();
    fn SetInterruptTimeout();
    fn GetLogFile();
    fn OpenLogFile();
    fn CloseLogFile();
    fn GetLogMask();
    fn SetLogMask();
    fn Input();
    fn ReturnInput();
    fn Output();
    fn OutputVaList();
    fn ControlledOutput();
    fn ControlledOutputVaList();
    fn OutputPrompt();
    fn OutputPromptVaList();
    fn GetPromptText();
    fn OutputCurrentState();
    fn OutputVersionInformation();
    fn GetNotifyEventHandle();
    fn SetNotifyEventHandle();
    fn Assemble();
    fn Disassemble();
    fn GetDisassembleEffectiveOffset();
    fn OutputDisassembly();
    fn OutputDisassemblyLines();
    fn GetNearInstruction();
    fn GetStackTrace();
    fn GetReturnOffset();
    fn OutputStackTrace();
    fn GetDebuggeeType();
    fn GetActualProcessorType();
    fn GetExecutingProcessorType();
    fn GetNumberPossibleExecutingProcessorTypes();
    fn GetPossibleExecutingProcessorTypes();
    fn GetNumberProcessors();
    fn GetSystemVersion();
    fn GetPageSize();
    fn IsPointer64Bit();
    fn ReadBugCheckData();
    fn GetNumberSupportedProcessorTypes();
    fn GetSupportedProcessorTypes();
    fn GetProcessorTypeNames();
    fn GetEffectiveProcessorType();
    fn SetEffectiveProcessorType();
    fn GetExecutionStatus();
    fn SetExecutionStatus();
    fn GetCodeLevel();
    fn SetCodeLevel();
    fn GetEngineOptions();
    fn AddEngineOptions();
    fn RemoveEngineOptions();
    fn SetEngineOptions();
    fn GetSystemErrorControl();
    fn SetSystemErrorControl();
    fn GetTextMacro();
    fn SetTextMacro();
    fn GetRadix();
    fn SetRadix();
    fn Evaluate();
    fn CoerceValue();
    fn CoerceValues();
    fn Execute();
    fn ExecuteCommandFile();
    fn GetNumberBreakpoints();
    fn GetBreakpointByIndex();
    fn GetBreakpointById();
    fn GetBreakpointParameters();
    fn AddBreakpoint();
    fn RemoveBreakpoint();
    fn AddExtension();
    fn RemoveExtension();
    fn GetExtensionByPath();
    fn CallExtension();
    fn GetExtensionFunction();
    fn GetWindbgExtensionApis32();
    fn GetWindbgExtensionApis64();
    fn GetNumberEventFilters();
    fn GetEventFilterText();
    fn GetEventFilterCommand();
    fn SetEventFilterCommand();
    fn GetSpecificFilterParameters();
    fn SetSpecificFilterParameters();
    fn GetSpecificFilterArgument();
    fn SetSpecificFilterArgument();
    fn GetExceptionFilterParameters();
    fn SetExceptionFilterParameters();
    fn GetExceptionFilterSecondCommand();
    fn SetExceptionFilterSecondCommand();
    fn WaitForEvent();
    fn GetLastEventInformation();
    fn GetCurrentTimeDate();
    fn GetCurrentSystemUpTime();
    fn GetDumpFormatFlags();
    fn GetNumberTextReplacements();
    fn GetTextReplacement();
    fn SetTextReplacement();
    fn RemoveTextReplacements();
    fn OutputTextReplacements();
    fn GetAssemblyOptions();
    fn AddAssemblyOptions();
    fn RemoveAssemblyOptions();
    fn SetAssemblyOptions();
    fn GetExpressionSyntax();
    fn SetExpressionSyntax();
    fn SetExpressionSyntaxByName();
    fn GetNumberExpressionSyntaxes();
    fn GetExpressionSyntaxNames();
    fn GetNumberEvents();
    fn GetEventIndexDescription();
    fn GetCurrentEventIndex();
    fn SetNextEventIndex();
    fn GetLogFileWide();
    fn OpenLogFileWide();
    fn InputWide();
    fn ReturnInputWide();
    fn OutputWide();
    fn OutputVaListWide();
    fn ControlledOutputWide();
    fn ControlledOutputVaListWide();
    fn OutputPromptWide();
    fn OutputPromptVaListWide();
    fn GetPromptTextWide();
    fn AssembleWide();
    fn DisassembleWide();
    fn GetProcessorTypeNamesWide();
    fn GetTextMacroWide();
    fn SetTextMacroWide();
    fn EvaluateWide();
    fn ExecuteWide();
    fn ExecuteCommandFileWide();
    fn GetBreakpointByIndex2();
    fn GetBreakpointById2();
    fn AddBreakpoint2();
    fn RemoveBreakpoint2();
    fn AddExtensionWide();
    fn GetExtensionByPathWide();
    fn CallExtensionWide();
    fn GetExtensionFunctionWide();
    fn GetEventFilterTextWide();
    fn GetEventFilterCommandWide();
    fn SetEventFilterCommandWide();
    fn GetSpecificFilterArgumentWide();
    fn SetSpecificFilterArgumentWide();
    fn GetExceptionFilterSecondCommandWide();
    fn SetExceptionFilterSecondCommandWide();
    fn GetLastEventInformationWide();
    fn GetTextReplacementWide();
    fn SetTextReplacementWide();
    fn SetExpressionSyntaxByNameWide();
    fn GetExpressionSyntaxNamesWide();
    fn GetEventIndexDescriptionWide();
    fn GetLogFile2();
    fn OpenLogFile2();
    fn GetLogFile2Wide();
    fn OpenLogFile2Wide();
    fn GetSystemVersionValues();
    fn GetSystemVersionString();
    fn GetSystemVersionStringWide();
    fn GetContextStackTrace();
    fn OutputContextStackTrace();
    fn GetStoredEventInformation();
    fn GetManagedStatus();
    fn GetManagedStatusWide();
    fn ResetManagedStatus();
    fn GetStackTraceEx();
    fn OutputStackTraceEx();
    fn GetContextStackTraceEx();
    fn OutputContextStackTraceEx();
    fn GetBreakpointByGuid();
    fn GetExecutionStatusEx();
    fn GetSynchronizationStatus();
    fn GetDebuggeeType2();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
impl IDebugControl7Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugControl7Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugControl7Vtbl {
        unsafe extern "system" fn GetInterrupt<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetInterrupt<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetInterruptTimeout<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, seconds: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetInterruptTimeout<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, seconds: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLogFile<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OpenLogFile<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PSTR, append: super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CloseLogFile<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLogMask<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetLogMask<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Input<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReturnInput<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Output<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputVaList<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ControlledOutput<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ControlledOutputVaList<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputPrompt<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputPromptVaList<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPromptText<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputCurrentState<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputVersionInformation<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNotifyEventHandle<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetNotifyEventHandle<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Assemble<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, instr: super::super::super::Foundation::PSTR, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Disassemble<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDisassembleEffectiveOffset<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputDisassembly<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, flags: u32, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputDisassemblyLines<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNearInstruction<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, nearoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetStackTrace<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetReturnOffset<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputStackTrace<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDebuggeeType<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, class: *mut u32, qualifier: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetActualProcessorType<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExecutingProcessorType<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberPossibleExecutingProcessorTypes<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPossibleExecutingProcessorTypes<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberProcessors<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSystemVersion<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: super::super::super::Foundation::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: super::super::super::Foundation::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPageSize<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, size: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsPointer64Bit<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadBugCheckData<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberSupportedProcessorTypes<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSupportedProcessorTypes<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetProcessorTypeNames<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEffectiveProcessorType<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetEffectiveProcessorType<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExecutionStatus<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, status: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetExecutionStatus<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, status: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCodeLevel<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, level: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetCodeLevel<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, level: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEngineOptions<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddEngineOptions<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveEngineOptions<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetEngineOptions<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSystemErrorControl<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSystemErrorControl<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputlevel: u32, breaklevel: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTextMacro<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, slot: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTextMacro<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, slot: u32, r#macro: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRadix<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, radix: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetRadix<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, radix: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Evaluate<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, expression: super::super::super::Foundation::PSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CoerceValue<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#in: *const DEBUG_VALUE, outtype: u32, out: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CoerceValues<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Execute<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, command: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ExecuteCommandFile<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, commandfile: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberBreakpoints<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBreakpointByIndex<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBreakpointById<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBreakpointParameters<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddBreakpoint<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32, desiredid: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveBreakpoint<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bp: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddExtension<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR, flags: u32, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveExtension<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExtensionByPath<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CallExtension<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, function: super::super::super::Foundation::PSTR, arguments: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExtensionFunction<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, funcname: super::super::super::Foundation::PSTR, function: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetWindbgExtensionApis32<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetWindbgExtensionApis64<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberEventFilters<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEventFilterText<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEventFilterCommand<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetEventFilterCommand<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSpecificFilterParameters<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSpecificFilterParameters<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSpecificFilterArgument<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSpecificFilterArgument<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, argument: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExceptionFilterParameters<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetExceptionFilterParameters<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExceptionFilterSecondCommand<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetExceptionFilterSecondCommand<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WaitForEvent<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLastEventInformation<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentTimeDate<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, timedate: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentSystemUpTime<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, uptime: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDumpFormatFlags<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, formatflags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberTextReplacements<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, numrepl: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTextReplacement<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PSTR, index: u32, srcbuffer: super::super::super::Foundation::PSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTextReplacement<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PSTR, dsttext: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveTextReplacements<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputTextReplacements<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetAssemblyOptions<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddAssemblyOptions<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveAssemblyOptions<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetAssemblyOptions<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExpressionSyntax<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetExpressionSyntax<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetExpressionSyntaxByName<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, abbrevname: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberExpressionSyntaxes<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExpressionSyntaxNames<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberEvents<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, events: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEventIndexDescription<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, descsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentEventIndex<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetNextEventIndex<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, relation: u32, value: u32, nextindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLogFileWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OpenLogFileWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PWSTR, append: super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn InputWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReturnInputWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputVaListWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ControlledOutputWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ControlledOutputVaListWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputPromptWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputPromptVaListWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPromptTextWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AssembleWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, instr: super::super::super::Foundation::PWSTR, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DisassembleWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetProcessorTypeNamesWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32, fullnamebuffer: super::super::super::Foundation::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTextMacroWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, slot: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTextMacroWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, slot: u32, r#macro: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EvaluateWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, expression: super::super::super::Foundation::PWSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ExecuteWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, command: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ExecuteCommandFileWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, commandfile: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBreakpointByIndex2<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBreakpointById2<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddBreakpoint2<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: u32, desiredid: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveBreakpoint2<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bp: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddExtensionWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PWSTR, flags: u32, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExtensionByPathWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PWSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CallExtensionWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, function: super::super::super::Foundation::PWSTR, arguments: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExtensionFunctionWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, funcname: super::super::super::Foundation::PWSTR, function: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEventFilterTextWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEventFilterCommandWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetEventFilterCommandWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSpecificFilterArgumentWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSpecificFilterArgumentWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, argument: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExceptionFilterSecondCommandWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetExceptionFilterSecondCommandWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLastEventInformationWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTextReplacementWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PWSTR, index: u32, srcbuffer: super::super::super::Foundation::PWSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PWSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTextReplacementWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PWSTR, dsttext: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetExpressionSyntaxByNameWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, abbrevname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExpressionSyntaxNamesWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, fullnamebuffer: super::super::super::Foundation::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEventIndexDescriptionWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, descsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLogFile2<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OpenLogFile2<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLogFile2Wide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OpenLogFile2Wide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSystemVersionValues<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, platformid: *mut u32, win32major: *mut u32, win32minor: *mut u32, kdmajor: *mut u32, kdminor: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSystemVersionString<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSystemVersionStringWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetContextStackTrace<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, startcontext: *const ::core::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framecontexts: *mut ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputContextStackTrace<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, framecontexts: *const ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetStoredEventInformation<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, context: *mut ::core::ffi::c_void, contextsize: u32, contextused: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetManagedStatus<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: *mut u32, whichstring: u32, string: super::super::super::Foundation::PSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetManagedStatusWide<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: *mut u32, whichstring: u32, string: super::super::super::Foundation::PWSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ResetManagedStatus<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetStackTraceEx<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME_EX, framessize: u32, framesfilled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputStackTraceEx<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME_EX, framessize: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetContextStackTraceEx<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, startcontext: *const ::core::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME_EX, framessize: u32, framecontexts: *mut ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputContextStackTraceEx<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME_EX, framessize: u32, framecontexts: *const ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBreakpointByGuid<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, guid: *const ::windows::core::GUID, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExecutionStatusEx<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, status: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSynchronizationStatus<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, sendsattempted: *mut u32, secondssincelastresponse: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDebuggeeType2<Impl: IDebugControl7Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, class: *mut u32, qualifier: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetInterrupt::<Impl, IMPL_OFFSET>,
            SetInterrupt::<Impl, IMPL_OFFSET>,
            GetInterruptTimeout::<Impl, IMPL_OFFSET>,
            SetInterruptTimeout::<Impl, IMPL_OFFSET>,
            GetLogFile::<Impl, IMPL_OFFSET>,
            OpenLogFile::<Impl, IMPL_OFFSET>,
            CloseLogFile::<Impl, IMPL_OFFSET>,
            GetLogMask::<Impl, IMPL_OFFSET>,
            SetLogMask::<Impl, IMPL_OFFSET>,
            Input::<Impl, IMPL_OFFSET>,
            ReturnInput::<Impl, IMPL_OFFSET>,
            Output::<Impl, IMPL_OFFSET>,
            OutputVaList::<Impl, IMPL_OFFSET>,
            ControlledOutput::<Impl, IMPL_OFFSET>,
            ControlledOutputVaList::<Impl, IMPL_OFFSET>,
            OutputPrompt::<Impl, IMPL_OFFSET>,
            OutputPromptVaList::<Impl, IMPL_OFFSET>,
            GetPromptText::<Impl, IMPL_OFFSET>,
            OutputCurrentState::<Impl, IMPL_OFFSET>,
            OutputVersionInformation::<Impl, IMPL_OFFSET>,
            GetNotifyEventHandle::<Impl, IMPL_OFFSET>,
            SetNotifyEventHandle::<Impl, IMPL_OFFSET>,
            Assemble::<Impl, IMPL_OFFSET>,
            Disassemble::<Impl, IMPL_OFFSET>,
            GetDisassembleEffectiveOffset::<Impl, IMPL_OFFSET>,
            OutputDisassembly::<Impl, IMPL_OFFSET>,
            OutputDisassemblyLines::<Impl, IMPL_OFFSET>,
            GetNearInstruction::<Impl, IMPL_OFFSET>,
            GetStackTrace::<Impl, IMPL_OFFSET>,
            GetReturnOffset::<Impl, IMPL_OFFSET>,
            OutputStackTrace::<Impl, IMPL_OFFSET>,
            GetDebuggeeType::<Impl, IMPL_OFFSET>,
            GetActualProcessorType::<Impl, IMPL_OFFSET>,
            GetExecutingProcessorType::<Impl, IMPL_OFFSET>,
            GetNumberPossibleExecutingProcessorTypes::<Impl, IMPL_OFFSET>,
            GetPossibleExecutingProcessorTypes::<Impl, IMPL_OFFSET>,
            GetNumberProcessors::<Impl, IMPL_OFFSET>,
            GetSystemVersion::<Impl, IMPL_OFFSET>,
            GetPageSize::<Impl, IMPL_OFFSET>,
            IsPointer64Bit::<Impl, IMPL_OFFSET>,
            ReadBugCheckData::<Impl, IMPL_OFFSET>,
            GetNumberSupportedProcessorTypes::<Impl, IMPL_OFFSET>,
            GetSupportedProcessorTypes::<Impl, IMPL_OFFSET>,
            GetProcessorTypeNames::<Impl, IMPL_OFFSET>,
            GetEffectiveProcessorType::<Impl, IMPL_OFFSET>,
            SetEffectiveProcessorType::<Impl, IMPL_OFFSET>,
            GetExecutionStatus::<Impl, IMPL_OFFSET>,
            SetExecutionStatus::<Impl, IMPL_OFFSET>,
            GetCodeLevel::<Impl, IMPL_OFFSET>,
            SetCodeLevel::<Impl, IMPL_OFFSET>,
            GetEngineOptions::<Impl, IMPL_OFFSET>,
            AddEngineOptions::<Impl, IMPL_OFFSET>,
            RemoveEngineOptions::<Impl, IMPL_OFFSET>,
            SetEngineOptions::<Impl, IMPL_OFFSET>,
            GetSystemErrorControl::<Impl, IMPL_OFFSET>,
            SetSystemErrorControl::<Impl, IMPL_OFFSET>,
            GetTextMacro::<Impl, IMPL_OFFSET>,
            SetTextMacro::<Impl, IMPL_OFFSET>,
            GetRadix::<Impl, IMPL_OFFSET>,
            SetRadix::<Impl, IMPL_OFFSET>,
            Evaluate::<Impl, IMPL_OFFSET>,
            CoerceValue::<Impl, IMPL_OFFSET>,
            CoerceValues::<Impl, IMPL_OFFSET>,
            Execute::<Impl, IMPL_OFFSET>,
            ExecuteCommandFile::<Impl, IMPL_OFFSET>,
            GetNumberBreakpoints::<Impl, IMPL_OFFSET>,
            GetBreakpointByIndex::<Impl, IMPL_OFFSET>,
            GetBreakpointById::<Impl, IMPL_OFFSET>,
            GetBreakpointParameters::<Impl, IMPL_OFFSET>,
            AddBreakpoint::<Impl, IMPL_OFFSET>,
            RemoveBreakpoint::<Impl, IMPL_OFFSET>,
            AddExtension::<Impl, IMPL_OFFSET>,
            RemoveExtension::<Impl, IMPL_OFFSET>,
            GetExtensionByPath::<Impl, IMPL_OFFSET>,
            CallExtension::<Impl, IMPL_OFFSET>,
            GetExtensionFunction::<Impl, IMPL_OFFSET>,
            GetWindbgExtensionApis32::<Impl, IMPL_OFFSET>,
            GetWindbgExtensionApis64::<Impl, IMPL_OFFSET>,
            GetNumberEventFilters::<Impl, IMPL_OFFSET>,
            GetEventFilterText::<Impl, IMPL_OFFSET>,
            GetEventFilterCommand::<Impl, IMPL_OFFSET>,
            SetEventFilterCommand::<Impl, IMPL_OFFSET>,
            GetSpecificFilterParameters::<Impl, IMPL_OFFSET>,
            SetSpecificFilterParameters::<Impl, IMPL_OFFSET>,
            GetSpecificFilterArgument::<Impl, IMPL_OFFSET>,
            SetSpecificFilterArgument::<Impl, IMPL_OFFSET>,
            GetExceptionFilterParameters::<Impl, IMPL_OFFSET>,
            SetExceptionFilterParameters::<Impl, IMPL_OFFSET>,
            GetExceptionFilterSecondCommand::<Impl, IMPL_OFFSET>,
            SetExceptionFilterSecondCommand::<Impl, IMPL_OFFSET>,
            WaitForEvent::<Impl, IMPL_OFFSET>,
            GetLastEventInformation::<Impl, IMPL_OFFSET>,
            GetCurrentTimeDate::<Impl, IMPL_OFFSET>,
            GetCurrentSystemUpTime::<Impl, IMPL_OFFSET>,
            GetDumpFormatFlags::<Impl, IMPL_OFFSET>,
            GetNumberTextReplacements::<Impl, IMPL_OFFSET>,
            GetTextReplacement::<Impl, IMPL_OFFSET>,
            SetTextReplacement::<Impl, IMPL_OFFSET>,
            RemoveTextReplacements::<Impl, IMPL_OFFSET>,
            OutputTextReplacements::<Impl, IMPL_OFFSET>,
            GetAssemblyOptions::<Impl, IMPL_OFFSET>,
            AddAssemblyOptions::<Impl, IMPL_OFFSET>,
            RemoveAssemblyOptions::<Impl, IMPL_OFFSET>,
            SetAssemblyOptions::<Impl, IMPL_OFFSET>,
            GetExpressionSyntax::<Impl, IMPL_OFFSET>,
            SetExpressionSyntax::<Impl, IMPL_OFFSET>,
            SetExpressionSyntaxByName::<Impl, IMPL_OFFSET>,
            GetNumberExpressionSyntaxes::<Impl, IMPL_OFFSET>,
            GetExpressionSyntaxNames::<Impl, IMPL_OFFSET>,
            GetNumberEvents::<Impl, IMPL_OFFSET>,
            GetEventIndexDescription::<Impl, IMPL_OFFSET>,
            GetCurrentEventIndex::<Impl, IMPL_OFFSET>,
            SetNextEventIndex::<Impl, IMPL_OFFSET>,
            GetLogFileWide::<Impl, IMPL_OFFSET>,
            OpenLogFileWide::<Impl, IMPL_OFFSET>,
            InputWide::<Impl, IMPL_OFFSET>,
            ReturnInputWide::<Impl, IMPL_OFFSET>,
            OutputWide::<Impl, IMPL_OFFSET>,
            OutputVaListWide::<Impl, IMPL_OFFSET>,
            ControlledOutputWide::<Impl, IMPL_OFFSET>,
            ControlledOutputVaListWide::<Impl, IMPL_OFFSET>,
            OutputPromptWide::<Impl, IMPL_OFFSET>,
            OutputPromptVaListWide::<Impl, IMPL_OFFSET>,
            GetPromptTextWide::<Impl, IMPL_OFFSET>,
            AssembleWide::<Impl, IMPL_OFFSET>,
            DisassembleWide::<Impl, IMPL_OFFSET>,
            GetProcessorTypeNamesWide::<Impl, IMPL_OFFSET>,
            GetTextMacroWide::<Impl, IMPL_OFFSET>,
            SetTextMacroWide::<Impl, IMPL_OFFSET>,
            EvaluateWide::<Impl, IMPL_OFFSET>,
            ExecuteWide::<Impl, IMPL_OFFSET>,
            ExecuteCommandFileWide::<Impl, IMPL_OFFSET>,
            GetBreakpointByIndex2::<Impl, IMPL_OFFSET>,
            GetBreakpointById2::<Impl, IMPL_OFFSET>,
            AddBreakpoint2::<Impl, IMPL_OFFSET>,
            RemoveBreakpoint2::<Impl, IMPL_OFFSET>,
            AddExtensionWide::<Impl, IMPL_OFFSET>,
            GetExtensionByPathWide::<Impl, IMPL_OFFSET>,
            CallExtensionWide::<Impl, IMPL_OFFSET>,
            GetExtensionFunctionWide::<Impl, IMPL_OFFSET>,
            GetEventFilterTextWide::<Impl, IMPL_OFFSET>,
            GetEventFilterCommandWide::<Impl, IMPL_OFFSET>,
            SetEventFilterCommandWide::<Impl, IMPL_OFFSET>,
            GetSpecificFilterArgumentWide::<Impl, IMPL_OFFSET>,
            SetSpecificFilterArgumentWide::<Impl, IMPL_OFFSET>,
            GetExceptionFilterSecondCommandWide::<Impl, IMPL_OFFSET>,
            SetExceptionFilterSecondCommandWide::<Impl, IMPL_OFFSET>,
            GetLastEventInformationWide::<Impl, IMPL_OFFSET>,
            GetTextReplacementWide::<Impl, IMPL_OFFSET>,
            SetTextReplacementWide::<Impl, IMPL_OFFSET>,
            SetExpressionSyntaxByNameWide::<Impl, IMPL_OFFSET>,
            GetExpressionSyntaxNamesWide::<Impl, IMPL_OFFSET>,
            GetEventIndexDescriptionWide::<Impl, IMPL_OFFSET>,
            GetLogFile2::<Impl, IMPL_OFFSET>,
            OpenLogFile2::<Impl, IMPL_OFFSET>,
            GetLogFile2Wide::<Impl, IMPL_OFFSET>,
            OpenLogFile2Wide::<Impl, IMPL_OFFSET>,
            GetSystemVersionValues::<Impl, IMPL_OFFSET>,
            GetSystemVersionString::<Impl, IMPL_OFFSET>,
            GetSystemVersionStringWide::<Impl, IMPL_OFFSET>,
            GetContextStackTrace::<Impl, IMPL_OFFSET>,
            OutputContextStackTrace::<Impl, IMPL_OFFSET>,
            GetStoredEventInformation::<Impl, IMPL_OFFSET>,
            GetManagedStatus::<Impl, IMPL_OFFSET>,
            GetManagedStatusWide::<Impl, IMPL_OFFSET>,
            ResetManagedStatus::<Impl, IMPL_OFFSET>,
            GetStackTraceEx::<Impl, IMPL_OFFSET>,
            OutputStackTraceEx::<Impl, IMPL_OFFSET>,
            GetContextStackTraceEx::<Impl, IMPL_OFFSET>,
            OutputContextStackTraceEx::<Impl, IMPL_OFFSET>,
            GetBreakpointByGuid::<Impl, IMPL_OFFSET>,
            GetExecutionStatusEx::<Impl, IMPL_OFFSET>,
            GetSynchronizationStatus::<Impl, IMPL_OFFSET>,
            GetDebuggeeType2::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugControl7 as ::windows::core::Interface>::IID
    }
}
pub trait IDebugCookieImpl: Sized {
    fn SetDebugCookie();
}
impl IDebugCookieVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugCookieImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugCookieVtbl {
        unsafe extern "system" fn SetDebugCookie<Impl: IDebugCookieImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwdebugappcookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SetDebugCookie::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugCookie as ::windows::core::Interface>::IID
    }
}
pub trait IDebugDataSpacesImpl: Sized {
    fn ReadVirtual();
    fn WriteVirtual();
    fn SearchVirtual();
    fn ReadVirtualUncached();
    fn WriteVirtualUncached();
    fn ReadPointersVirtual();
    fn WritePointersVirtual();
    fn ReadPhysical();
    fn WritePhysical();
    fn ReadControl();
    fn WriteControl();
    fn ReadIo();
    fn WriteIo();
    fn ReadMsr();
    fn WriteMsr();
    fn ReadBusData();
    fn WriteBusData();
    fn CheckLowMemory();
    fn ReadDebuggerData();
    fn ReadProcessorSystemData();
}
impl IDebugDataSpacesVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugDataSpacesImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugDataSpacesVtbl {
        unsafe extern "system" fn ReadVirtual<Impl: IDebugDataSpacesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteVirtual<Impl: IDebugDataSpacesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SearchVirtual<Impl: IDebugDataSpacesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, length: u64, pattern: *const ::core::ffi::c_void, patternsize: u32, patterngranularity: u32, matchoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadVirtualUncached<Impl: IDebugDataSpacesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteVirtualUncached<Impl: IDebugDataSpacesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadPointersVirtual<Impl: IDebugDataSpacesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, offset: u64, ptrs: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WritePointersVirtual<Impl: IDebugDataSpacesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, offset: u64, ptrs: *const u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadPhysical<Impl: IDebugDataSpacesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WritePhysical<Impl: IDebugDataSpacesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadControl<Impl: IDebugDataSpacesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, processor: u32, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteControl<Impl: IDebugDataSpacesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, processor: u32, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadIo<Impl: IDebugDataSpacesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteIo<Impl: IDebugDataSpacesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadMsr<Impl: IDebugDataSpacesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, msr: u32, value: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteMsr<Impl: IDebugDataSpacesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, msr: u32, value: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadBusData<Impl: IDebugDataSpacesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteBusData<Impl: IDebugDataSpacesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CheckLowMemory<Impl: IDebugDataSpacesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadDebuggerData<Impl: IDebugDataSpacesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadProcessorSystemData<Impl: IDebugDataSpacesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, processor: u32, index: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            ReadVirtual::<Impl, IMPL_OFFSET>,
            WriteVirtual::<Impl, IMPL_OFFSET>,
            SearchVirtual::<Impl, IMPL_OFFSET>,
            ReadVirtualUncached::<Impl, IMPL_OFFSET>,
            WriteVirtualUncached::<Impl, IMPL_OFFSET>,
            ReadPointersVirtual::<Impl, IMPL_OFFSET>,
            WritePointersVirtual::<Impl, IMPL_OFFSET>,
            ReadPhysical::<Impl, IMPL_OFFSET>,
            WritePhysical::<Impl, IMPL_OFFSET>,
            ReadControl::<Impl, IMPL_OFFSET>,
            WriteControl::<Impl, IMPL_OFFSET>,
            ReadIo::<Impl, IMPL_OFFSET>,
            WriteIo::<Impl, IMPL_OFFSET>,
            ReadMsr::<Impl, IMPL_OFFSET>,
            WriteMsr::<Impl, IMPL_OFFSET>,
            ReadBusData::<Impl, IMPL_OFFSET>,
            WriteBusData::<Impl, IMPL_OFFSET>,
            CheckLowMemory::<Impl, IMPL_OFFSET>,
            ReadDebuggerData::<Impl, IMPL_OFFSET>,
            ReadProcessorSystemData::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugDataSpaces as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_System_Memory")]
pub trait IDebugDataSpaces2Impl: Sized {
    fn ReadVirtual();
    fn WriteVirtual();
    fn SearchVirtual();
    fn ReadVirtualUncached();
    fn WriteVirtualUncached();
    fn ReadPointersVirtual();
    fn WritePointersVirtual();
    fn ReadPhysical();
    fn WritePhysical();
    fn ReadControl();
    fn WriteControl();
    fn ReadIo();
    fn WriteIo();
    fn ReadMsr();
    fn WriteMsr();
    fn ReadBusData();
    fn WriteBusData();
    fn CheckLowMemory();
    fn ReadDebuggerData();
    fn ReadProcessorSystemData();
    fn VirtualToPhysical();
    fn GetVirtualTranslationPhysicalOffsets();
    fn ReadHandleData();
    fn FillVirtual();
    fn FillPhysical();
    fn QueryVirtual();
}
#[cfg(feature = "Win32_System_Memory")]
impl IDebugDataSpaces2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugDataSpaces2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugDataSpaces2Vtbl {
        unsafe extern "system" fn ReadVirtual<Impl: IDebugDataSpaces2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteVirtual<Impl: IDebugDataSpaces2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SearchVirtual<Impl: IDebugDataSpaces2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, length: u64, pattern: *const ::core::ffi::c_void, patternsize: u32, patterngranularity: u32, matchoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadVirtualUncached<Impl: IDebugDataSpaces2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteVirtualUncached<Impl: IDebugDataSpaces2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadPointersVirtual<Impl: IDebugDataSpaces2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, offset: u64, ptrs: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WritePointersVirtual<Impl: IDebugDataSpaces2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, offset: u64, ptrs: *const u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadPhysical<Impl: IDebugDataSpaces2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WritePhysical<Impl: IDebugDataSpaces2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadControl<Impl: IDebugDataSpaces2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, processor: u32, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteControl<Impl: IDebugDataSpaces2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, processor: u32, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadIo<Impl: IDebugDataSpaces2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteIo<Impl: IDebugDataSpaces2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadMsr<Impl: IDebugDataSpaces2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, msr: u32, value: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteMsr<Impl: IDebugDataSpaces2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, msr: u32, value: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadBusData<Impl: IDebugDataSpaces2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteBusData<Impl: IDebugDataSpaces2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CheckLowMemory<Impl: IDebugDataSpaces2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadDebuggerData<Impl: IDebugDataSpaces2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadProcessorSystemData<Impl: IDebugDataSpaces2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, processor: u32, index: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn VirtualToPhysical<Impl: IDebugDataSpaces2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#virtual: u64, physical: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetVirtualTranslationPhysicalOffsets<Impl: IDebugDataSpaces2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#virtual: u64, offsets: *mut u64, offsetssize: u32, levels: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadHandleData<Impl: IDebugDataSpaces2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, datatype: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FillVirtual<Impl: IDebugDataSpaces2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u64, size: u32, pattern: *const ::core::ffi::c_void, patternsize: u32, filled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FillPhysical<Impl: IDebugDataSpaces2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u64, size: u32, pattern: *const ::core::ffi::c_void, patternsize: u32, filled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn QueryVirtual<Impl: IDebugDataSpaces2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, info: *mut super::super::Memory::MEMORY_BASIC_INFORMATION64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            ReadVirtual::<Impl, IMPL_OFFSET>,
            WriteVirtual::<Impl, IMPL_OFFSET>,
            SearchVirtual::<Impl, IMPL_OFFSET>,
            ReadVirtualUncached::<Impl, IMPL_OFFSET>,
            WriteVirtualUncached::<Impl, IMPL_OFFSET>,
            ReadPointersVirtual::<Impl, IMPL_OFFSET>,
            WritePointersVirtual::<Impl, IMPL_OFFSET>,
            ReadPhysical::<Impl, IMPL_OFFSET>,
            WritePhysical::<Impl, IMPL_OFFSET>,
            ReadControl::<Impl, IMPL_OFFSET>,
            WriteControl::<Impl, IMPL_OFFSET>,
            ReadIo::<Impl, IMPL_OFFSET>,
            WriteIo::<Impl, IMPL_OFFSET>,
            ReadMsr::<Impl, IMPL_OFFSET>,
            WriteMsr::<Impl, IMPL_OFFSET>,
            ReadBusData::<Impl, IMPL_OFFSET>,
            WriteBusData::<Impl, IMPL_OFFSET>,
            CheckLowMemory::<Impl, IMPL_OFFSET>,
            ReadDebuggerData::<Impl, IMPL_OFFSET>,
            ReadProcessorSystemData::<Impl, IMPL_OFFSET>,
            VirtualToPhysical::<Impl, IMPL_OFFSET>,
            GetVirtualTranslationPhysicalOffsets::<Impl, IMPL_OFFSET>,
            ReadHandleData::<Impl, IMPL_OFFSET>,
            FillVirtual::<Impl, IMPL_OFFSET>,
            FillPhysical::<Impl, IMPL_OFFSET>,
            QueryVirtual::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugDataSpaces2 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_System_Memory")]
pub trait IDebugDataSpaces3Impl: Sized {
    fn ReadVirtual();
    fn WriteVirtual();
    fn SearchVirtual();
    fn ReadVirtualUncached();
    fn WriteVirtualUncached();
    fn ReadPointersVirtual();
    fn WritePointersVirtual();
    fn ReadPhysical();
    fn WritePhysical();
    fn ReadControl();
    fn WriteControl();
    fn ReadIo();
    fn WriteIo();
    fn ReadMsr();
    fn WriteMsr();
    fn ReadBusData();
    fn WriteBusData();
    fn CheckLowMemory();
    fn ReadDebuggerData();
    fn ReadProcessorSystemData();
    fn VirtualToPhysical();
    fn GetVirtualTranslationPhysicalOffsets();
    fn ReadHandleData();
    fn FillVirtual();
    fn FillPhysical();
    fn QueryVirtual();
    fn ReadImageNtHeaders();
    fn ReadTagged();
    fn StartEnumTagged();
    fn GetNextTagged();
    fn EndEnumTagged();
}
#[cfg(feature = "Win32_System_Memory")]
impl IDebugDataSpaces3Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugDataSpaces3Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugDataSpaces3Vtbl {
        unsafe extern "system" fn ReadVirtual<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteVirtual<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SearchVirtual<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, length: u64, pattern: *const ::core::ffi::c_void, patternsize: u32, patterngranularity: u32, matchoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadVirtualUncached<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteVirtualUncached<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadPointersVirtual<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, offset: u64, ptrs: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WritePointersVirtual<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, offset: u64, ptrs: *const u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadPhysical<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WritePhysical<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadControl<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, processor: u32, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteControl<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, processor: u32, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadIo<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteIo<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadMsr<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, msr: u32, value: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteMsr<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, msr: u32, value: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadBusData<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteBusData<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CheckLowMemory<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadDebuggerData<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadProcessorSystemData<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, processor: u32, index: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn VirtualToPhysical<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#virtual: u64, physical: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetVirtualTranslationPhysicalOffsets<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#virtual: u64, offsets: *mut u64, offsetssize: u32, levels: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadHandleData<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, datatype: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FillVirtual<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u64, size: u32, pattern: *const ::core::ffi::c_void, patternsize: u32, filled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FillPhysical<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u64, size: u32, pattern: *const ::core::ffi::c_void, patternsize: u32, filled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn QueryVirtual<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, info: *mut super::super::Memory::MEMORY_BASIC_INFORMATION64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadImageNtHeaders<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, imagebase: u64, headers: *mut IMAGE_NT_HEADERS64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadTagged<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, tag: *const ::windows::core::GUID, offset: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, totalsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StartEnumTagged<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNextTagged<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, tag: *mut ::windows::core::GUID, size: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EndEnumTagged<Impl: IDebugDataSpaces3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            ReadVirtual::<Impl, IMPL_OFFSET>,
            WriteVirtual::<Impl, IMPL_OFFSET>,
            SearchVirtual::<Impl, IMPL_OFFSET>,
            ReadVirtualUncached::<Impl, IMPL_OFFSET>,
            WriteVirtualUncached::<Impl, IMPL_OFFSET>,
            ReadPointersVirtual::<Impl, IMPL_OFFSET>,
            WritePointersVirtual::<Impl, IMPL_OFFSET>,
            ReadPhysical::<Impl, IMPL_OFFSET>,
            WritePhysical::<Impl, IMPL_OFFSET>,
            ReadControl::<Impl, IMPL_OFFSET>,
            WriteControl::<Impl, IMPL_OFFSET>,
            ReadIo::<Impl, IMPL_OFFSET>,
            WriteIo::<Impl, IMPL_OFFSET>,
            ReadMsr::<Impl, IMPL_OFFSET>,
            WriteMsr::<Impl, IMPL_OFFSET>,
            ReadBusData::<Impl, IMPL_OFFSET>,
            WriteBusData::<Impl, IMPL_OFFSET>,
            CheckLowMemory::<Impl, IMPL_OFFSET>,
            ReadDebuggerData::<Impl, IMPL_OFFSET>,
            ReadProcessorSystemData::<Impl, IMPL_OFFSET>,
            VirtualToPhysical::<Impl, IMPL_OFFSET>,
            GetVirtualTranslationPhysicalOffsets::<Impl, IMPL_OFFSET>,
            ReadHandleData::<Impl, IMPL_OFFSET>,
            FillVirtual::<Impl, IMPL_OFFSET>,
            FillPhysical::<Impl, IMPL_OFFSET>,
            QueryVirtual::<Impl, IMPL_OFFSET>,
            ReadImageNtHeaders::<Impl, IMPL_OFFSET>,
            ReadTagged::<Impl, IMPL_OFFSET>,
            StartEnumTagged::<Impl, IMPL_OFFSET>,
            GetNextTagged::<Impl, IMPL_OFFSET>,
            EndEnumTagged::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugDataSpaces3 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Memory"))]
pub trait IDebugDataSpaces4Impl: Sized {
    fn ReadVirtual();
    fn WriteVirtual();
    fn SearchVirtual();
    fn ReadVirtualUncached();
    fn WriteVirtualUncached();
    fn ReadPointersVirtual();
    fn WritePointersVirtual();
    fn ReadPhysical();
    fn WritePhysical();
    fn ReadControl();
    fn WriteControl();
    fn ReadIo();
    fn WriteIo();
    fn ReadMsr();
    fn WriteMsr();
    fn ReadBusData();
    fn WriteBusData();
    fn CheckLowMemory();
    fn ReadDebuggerData();
    fn ReadProcessorSystemData();
    fn VirtualToPhysical();
    fn GetVirtualTranslationPhysicalOffsets();
    fn ReadHandleData();
    fn FillVirtual();
    fn FillPhysical();
    fn QueryVirtual();
    fn ReadImageNtHeaders();
    fn ReadTagged();
    fn StartEnumTagged();
    fn GetNextTagged();
    fn EndEnumTagged();
    fn GetOffsetInformation();
    fn GetNextDifferentlyValidOffsetVirtual();
    fn GetValidRegionVirtual();
    fn SearchVirtual2();
    fn ReadMultiByteStringVirtual();
    fn ReadMultiByteStringVirtualWide();
    fn ReadUnicodeStringVirtual();
    fn ReadUnicodeStringVirtualWide();
    fn ReadPhysical2();
    fn WritePhysical2();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Memory"))]
impl IDebugDataSpaces4Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugDataSpaces4Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugDataSpaces4Vtbl {
        unsafe extern "system" fn ReadVirtual<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteVirtual<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SearchVirtual<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, length: u64, pattern: *const ::core::ffi::c_void, patternsize: u32, patterngranularity: u32, matchoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadVirtualUncached<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteVirtualUncached<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadPointersVirtual<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, offset: u64, ptrs: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WritePointersVirtual<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, offset: u64, ptrs: *const u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadPhysical<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WritePhysical<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadControl<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, processor: u32, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteControl<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, processor: u32, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadIo<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteIo<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadMsr<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, msr: u32, value: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteMsr<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, msr: u32, value: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadBusData<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteBusData<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CheckLowMemory<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadDebuggerData<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadProcessorSystemData<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, processor: u32, index: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn VirtualToPhysical<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#virtual: u64, physical: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetVirtualTranslationPhysicalOffsets<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#virtual: u64, offsets: *mut u64, offsetssize: u32, levels: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadHandleData<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, datatype: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FillVirtual<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u64, size: u32, pattern: *const ::core::ffi::c_void, patternsize: u32, filled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FillPhysical<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u64, size: u32, pattern: *const ::core::ffi::c_void, patternsize: u32, filled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn QueryVirtual<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, info: *mut super::super::Memory::MEMORY_BASIC_INFORMATION64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadImageNtHeaders<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, imagebase: u64, headers: *mut IMAGE_NT_HEADERS64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadTagged<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, tag: *const ::windows::core::GUID, offset: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, totalsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StartEnumTagged<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNextTagged<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, tag: *mut ::windows::core::GUID, size: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EndEnumTagged<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOffsetInformation<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, space: u32, which: u32, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNextDifferentlyValidOffsetVirtual<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, nextoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetValidRegionVirtual<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, base: u64, size: u32, validbase: *mut u64, validsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SearchVirtual2<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, length: u64, flags: u32, pattern: *const ::core::ffi::c_void, patternsize: u32, patterngranularity: u32, matchoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadMultiByteStringVirtual<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, maxbytes: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringbytes: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadMultiByteStringVirtualWide<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, maxbytes: u32, codepage: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringbytes: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadUnicodeStringVirtual<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, maxbytes: u32, codepage: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringbytes: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadUnicodeStringVirtualWide<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, maxbytes: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringbytes: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadPhysical2<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WritePhysical2<Impl: IDebugDataSpaces4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            ReadVirtual::<Impl, IMPL_OFFSET>,
            WriteVirtual::<Impl, IMPL_OFFSET>,
            SearchVirtual::<Impl, IMPL_OFFSET>,
            ReadVirtualUncached::<Impl, IMPL_OFFSET>,
            WriteVirtualUncached::<Impl, IMPL_OFFSET>,
            ReadPointersVirtual::<Impl, IMPL_OFFSET>,
            WritePointersVirtual::<Impl, IMPL_OFFSET>,
            ReadPhysical::<Impl, IMPL_OFFSET>,
            WritePhysical::<Impl, IMPL_OFFSET>,
            ReadControl::<Impl, IMPL_OFFSET>,
            WriteControl::<Impl, IMPL_OFFSET>,
            ReadIo::<Impl, IMPL_OFFSET>,
            WriteIo::<Impl, IMPL_OFFSET>,
            ReadMsr::<Impl, IMPL_OFFSET>,
            WriteMsr::<Impl, IMPL_OFFSET>,
            ReadBusData::<Impl, IMPL_OFFSET>,
            WriteBusData::<Impl, IMPL_OFFSET>,
            CheckLowMemory::<Impl, IMPL_OFFSET>,
            ReadDebuggerData::<Impl, IMPL_OFFSET>,
            ReadProcessorSystemData::<Impl, IMPL_OFFSET>,
            VirtualToPhysical::<Impl, IMPL_OFFSET>,
            GetVirtualTranslationPhysicalOffsets::<Impl, IMPL_OFFSET>,
            ReadHandleData::<Impl, IMPL_OFFSET>,
            FillVirtual::<Impl, IMPL_OFFSET>,
            FillPhysical::<Impl, IMPL_OFFSET>,
            QueryVirtual::<Impl, IMPL_OFFSET>,
            ReadImageNtHeaders::<Impl, IMPL_OFFSET>,
            ReadTagged::<Impl, IMPL_OFFSET>,
            StartEnumTagged::<Impl, IMPL_OFFSET>,
            GetNextTagged::<Impl, IMPL_OFFSET>,
            EndEnumTagged::<Impl, IMPL_OFFSET>,
            GetOffsetInformation::<Impl, IMPL_OFFSET>,
            GetNextDifferentlyValidOffsetVirtual::<Impl, IMPL_OFFSET>,
            GetValidRegionVirtual::<Impl, IMPL_OFFSET>,
            SearchVirtual2::<Impl, IMPL_OFFSET>,
            ReadMultiByteStringVirtual::<Impl, IMPL_OFFSET>,
            ReadMultiByteStringVirtualWide::<Impl, IMPL_OFFSET>,
            ReadUnicodeStringVirtual::<Impl, IMPL_OFFSET>,
            ReadUnicodeStringVirtualWide::<Impl, IMPL_OFFSET>,
            ReadPhysical2::<Impl, IMPL_OFFSET>,
            WritePhysical2::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugDataSpaces4 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugDocumentImpl: Sized + IDebugDocumentInfoImpl {}
#[cfg(feature = "Win32_Foundation")]
impl IDebugDocumentVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugDocumentImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugDocumentVtbl {
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetName::<Impl, IMPL_OFFSET>, GetDocumentClassId::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugDocument as ::windows::core::Interface>::IID
    }
}
pub trait IDebugDocumentContextImpl: Sized {
    fn GetDocument();
    fn EnumCodeContexts();
}
impl IDebugDocumentContextVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugDocumentContextImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugDocumentContextVtbl {
        unsafe extern "system" fn GetDocument<Impl: IDebugDocumentContextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppsd: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnumCodeContexts<Impl: IDebugDocumentContextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppescc: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetDocument::<Impl, IMPL_OFFSET>, EnumCodeContexts::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugDocumentContext as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugDocumentHelper32Impl: Sized {
    fn Init();
    fn Attach();
    fn Detach();
    fn AddUnicodeText();
    fn AddDBCSText();
    fn SetDebugDocumentHost();
    fn AddDeferredText();
    fn DefineScriptBlock();
    fn SetDefaultTextAttr();
    fn SetTextAttributes();
    fn SetLongName();
    fn SetShortName();
    fn SetDocumentAttr();
    fn GetDebugApplicationNode();
    fn GetScriptBlockInfo();
    fn CreateDebugDocumentContext();
    fn BringDocumentToTop();
    fn BringDocumentContextToTop();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugDocumentHelper32Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugDocumentHelper32Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugDocumentHelper32Vtbl {
        unsafe extern "system" fn Init<Impl: IDebugDocumentHelper32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pda: ::windows::core::RawPtr, pszshortname: super::super::super::Foundation::PWSTR, pszlongname: super::super::super::Foundation::PWSTR, docattr: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Attach<Impl: IDebugDocumentHelper32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pddhparent: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Detach<Impl: IDebugDocumentHelper32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddUnicodeText<Impl: IDebugDocumentHelper32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psztext: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddDBCSText<Impl: IDebugDocumentHelper32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psztext: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDebugDocumentHost<Impl: IDebugDocumentHelper32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pddh: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddDeferredText<Impl: IDebugDocumentHelper32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, cchars: u32, dwtextstartcookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DefineScriptBlock<Impl: IDebugDocumentHelper32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulcharoffset: u32, cchars: u32, pas: ::windows::core::RawPtr, fscriptlet: super::super::super::Foundation::BOOL, pdwsourcecontext: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDefaultTextAttr<Impl: IDebugDocumentHelper32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, statextattr: u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTextAttributes<Impl: IDebugDocumentHelper32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulcharoffset: u32, cchars: u32, pstatextattr: *const u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetLongName<Impl: IDebugDocumentHelper32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszlongname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetShortName<Impl: IDebugDocumentHelper32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszshortname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDocumentAttr<Impl: IDebugDocumentHelper32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszattributes: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDebugApplicationNode<Impl: IDebugDocumentHelper32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppdan: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetScriptBlockInfo<Impl: IDebugDocumentHelper32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwsourcecontext: u32, ppasd: *mut ::windows::core::RawPtr, picharpos: *mut u32, pcchars: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateDebugDocumentContext<Impl: IDebugDocumentHelper32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, icharpos: u32, cchars: u32, ppddc: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn BringDocumentToTop<Impl: IDebugDocumentHelper32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn BringDocumentContextToTop<Impl: IDebugDocumentHelper32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pddc: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            Init::<Impl, IMPL_OFFSET>,
            Attach::<Impl, IMPL_OFFSET>,
            Detach::<Impl, IMPL_OFFSET>,
            AddUnicodeText::<Impl, IMPL_OFFSET>,
            AddDBCSText::<Impl, IMPL_OFFSET>,
            SetDebugDocumentHost::<Impl, IMPL_OFFSET>,
            AddDeferredText::<Impl, IMPL_OFFSET>,
            DefineScriptBlock::<Impl, IMPL_OFFSET>,
            SetDefaultTextAttr::<Impl, IMPL_OFFSET>,
            SetTextAttributes::<Impl, IMPL_OFFSET>,
            SetLongName::<Impl, IMPL_OFFSET>,
            SetShortName::<Impl, IMPL_OFFSET>,
            SetDocumentAttr::<Impl, IMPL_OFFSET>,
            GetDebugApplicationNode::<Impl, IMPL_OFFSET>,
            GetScriptBlockInfo::<Impl, IMPL_OFFSET>,
            CreateDebugDocumentContext::<Impl, IMPL_OFFSET>,
            BringDocumentToTop::<Impl, IMPL_OFFSET>,
            BringDocumentContextToTop::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugDocumentHelper32 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugDocumentHelper64Impl: Sized {
    fn Init();
    fn Attach();
    fn Detach();
    fn AddUnicodeText();
    fn AddDBCSText();
    fn SetDebugDocumentHost();
    fn AddDeferredText();
    fn DefineScriptBlock();
    fn SetDefaultTextAttr();
    fn SetTextAttributes();
    fn SetLongName();
    fn SetShortName();
    fn SetDocumentAttr();
    fn GetDebugApplicationNode();
    fn GetScriptBlockInfo();
    fn CreateDebugDocumentContext();
    fn BringDocumentToTop();
    fn BringDocumentContextToTop();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugDocumentHelper64Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugDocumentHelper64Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugDocumentHelper64Vtbl {
        unsafe extern "system" fn Init<Impl: IDebugDocumentHelper64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pda: ::windows::core::RawPtr, pszshortname: super::super::super::Foundation::PWSTR, pszlongname: super::super::super::Foundation::PWSTR, docattr: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Attach<Impl: IDebugDocumentHelper64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pddhparent: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Detach<Impl: IDebugDocumentHelper64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddUnicodeText<Impl: IDebugDocumentHelper64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psztext: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddDBCSText<Impl: IDebugDocumentHelper64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psztext: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDebugDocumentHost<Impl: IDebugDocumentHelper64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pddh: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddDeferredText<Impl: IDebugDocumentHelper64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, cchars: u32, dwtextstartcookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DefineScriptBlock<Impl: IDebugDocumentHelper64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulcharoffset: u32, cchars: u32, pas: ::windows::core::RawPtr, fscriptlet: super::super::super::Foundation::BOOL, pdwsourcecontext: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDefaultTextAttr<Impl: IDebugDocumentHelper64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, statextattr: u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTextAttributes<Impl: IDebugDocumentHelper64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ulcharoffset: u32, cchars: u32, pstatextattr: *const u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetLongName<Impl: IDebugDocumentHelper64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszlongname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetShortName<Impl: IDebugDocumentHelper64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszshortname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetDocumentAttr<Impl: IDebugDocumentHelper64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszattributes: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDebugApplicationNode<Impl: IDebugDocumentHelper64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppdan: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetScriptBlockInfo<Impl: IDebugDocumentHelper64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwsourcecontext: u64, ppasd: *mut ::windows::core::RawPtr, picharpos: *mut u32, pcchars: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateDebugDocumentContext<Impl: IDebugDocumentHelper64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, icharpos: u32, cchars: u32, ppddc: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn BringDocumentToTop<Impl: IDebugDocumentHelper64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn BringDocumentContextToTop<Impl: IDebugDocumentHelper64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pddc: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            Init::<Impl, IMPL_OFFSET>,
            Attach::<Impl, IMPL_OFFSET>,
            Detach::<Impl, IMPL_OFFSET>,
            AddUnicodeText::<Impl, IMPL_OFFSET>,
            AddDBCSText::<Impl, IMPL_OFFSET>,
            SetDebugDocumentHost::<Impl, IMPL_OFFSET>,
            AddDeferredText::<Impl, IMPL_OFFSET>,
            DefineScriptBlock::<Impl, IMPL_OFFSET>,
            SetDefaultTextAttr::<Impl, IMPL_OFFSET>,
            SetTextAttributes::<Impl, IMPL_OFFSET>,
            SetLongName::<Impl, IMPL_OFFSET>,
            SetShortName::<Impl, IMPL_OFFSET>,
            SetDocumentAttr::<Impl, IMPL_OFFSET>,
            GetDebugApplicationNode::<Impl, IMPL_OFFSET>,
            GetScriptBlockInfo::<Impl, IMPL_OFFSET>,
            CreateDebugDocumentContext::<Impl, IMPL_OFFSET>,
            BringDocumentToTop::<Impl, IMPL_OFFSET>,
            BringDocumentContextToTop::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugDocumentHelper64 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugDocumentHostImpl: Sized {
    fn GetDeferredText();
    fn GetScriptTextAttributes();
    fn OnCreateDocumentContext();
    fn GetPathName();
    fn GetFileName();
    fn NotifyChanged();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugDocumentHostVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugDocumentHostImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugDocumentHostVtbl {
        unsafe extern "system" fn GetDeferredText<Impl: IDebugDocumentHostImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwtextstartcookie: u32, pchartext: super::super::super::Foundation::PWSTR, pstatextattr: *mut u16, pcnumchars: *mut u32, cmaxchars: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetScriptTextAttributes<Impl: IDebugDocumentHostImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstrcode: super::super::super::Foundation::PWSTR, unumcodechars: u32, pstrdelimiter: super::super::super::Foundation::PWSTR, dwflags: u32, pattr: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OnCreateDocumentContext<Impl: IDebugDocumentHostImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppunkouter: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPathName<Impl: IDebugDocumentHostImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrlongname: *mut super::super::super::Foundation::BSTR, pfisoriginalfile: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFileName<Impl: IDebugDocumentHostImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrshortname: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn NotifyChanged<Impl: IDebugDocumentHostImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetDeferredText::<Impl, IMPL_OFFSET>, GetScriptTextAttributes::<Impl, IMPL_OFFSET>, OnCreateDocumentContext::<Impl, IMPL_OFFSET>, GetPathName::<Impl, IMPL_OFFSET>, GetFileName::<Impl, IMPL_OFFSET>, NotifyChanged::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugDocumentHost as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugDocumentInfoImpl: Sized {
    fn GetName();
    fn GetDocumentClassId();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugDocumentInfoVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugDocumentInfoImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugDocumentInfoVtbl {
        unsafe extern "system" fn GetName<Impl: IDebugDocumentInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dnt: DOCUMENTNAMETYPE, pbstrname: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDocumentClassId<Impl: IDebugDocumentInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pclsiddocument: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetName::<Impl, IMPL_OFFSET>, GetDocumentClassId::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugDocumentInfo as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugDocumentProviderImpl: Sized + IDebugDocumentInfoImpl {
    fn GetDocument();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugDocumentProviderVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugDocumentProviderImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugDocumentProviderVtbl {
        unsafe extern "system" fn GetDocument<Impl: IDebugDocumentProviderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppssd: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetName::<Impl, IMPL_OFFSET>, GetDocumentClassId::<Impl, IMPL_OFFSET>, GetDocument::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugDocumentProvider as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugDocumentTextImpl: Sized + IDebugDocumentImpl + IDebugDocumentInfoImpl {
    fn GetDocumentAttributes();
    fn GetSize();
    fn GetPositionOfLine();
    fn GetLineOfPosition();
    fn GetText();
    fn GetPositionOfContext();
    fn GetContextOfPosition();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugDocumentTextVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugDocumentTextImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugDocumentTextVtbl {
        unsafe extern "system" fn GetDocumentAttributes<Impl: IDebugDocumentTextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ptextdocattr: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSize<Impl: IDebugDocumentTextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcnumlines: *mut u32, pcnumchars: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPositionOfLine<Impl: IDebugDocumentTextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, clinenumber: u32, pccharacterposition: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLineOfPosition<Impl: IDebugDocumentTextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ccharacterposition: u32, pclinenumber: *mut u32, pccharacteroffsetinline: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetText<Impl: IDebugDocumentTextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ccharacterposition: u32, pchartext: super::super::super::Foundation::PWSTR, pstatextattr: *mut u16, pcnumchars: *mut u32, cmaxchars: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPositionOfContext<Impl: IDebugDocumentTextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psc: ::windows::core::RawPtr, pccharacterposition: *mut u32, cnumchars: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetContextOfPosition<Impl: IDebugDocumentTextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ccharacterposition: u32, cnumchars: u32, ppsc: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetName::<Impl, IMPL_OFFSET>,
            GetDocumentClassId::<Impl, IMPL_OFFSET>,
            GetDocumentAttributes::<Impl, IMPL_OFFSET>,
            GetSize::<Impl, IMPL_OFFSET>,
            GetPositionOfLine::<Impl, IMPL_OFFSET>,
            GetLineOfPosition::<Impl, IMPL_OFFSET>,
            GetText::<Impl, IMPL_OFFSET>,
            GetPositionOfContext::<Impl, IMPL_OFFSET>,
            GetContextOfPosition::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugDocumentText as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugDocumentTextAuthorImpl: Sized + IDebugDocumentTextImpl + IDebugDocumentImpl + IDebugDocumentInfoImpl {
    fn InsertText();
    fn RemoveText();
    fn ReplaceText();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugDocumentTextAuthorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugDocumentTextAuthorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugDocumentTextAuthorVtbl {
        unsafe extern "system" fn InsertText<Impl: IDebugDocumentTextAuthorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ccharacterposition: u32, cnumtoinsert: u32, pchartext: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveText<Impl: IDebugDocumentTextAuthorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ccharacterposition: u32, cnumtoremove: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReplaceText<Impl: IDebugDocumentTextAuthorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ccharacterposition: u32, cnumtoreplace: u32, pchartext: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetName::<Impl, IMPL_OFFSET>,
            GetDocumentClassId::<Impl, IMPL_OFFSET>,
            GetDocumentAttributes::<Impl, IMPL_OFFSET>,
            GetSize::<Impl, IMPL_OFFSET>,
            GetPositionOfLine::<Impl, IMPL_OFFSET>,
            GetLineOfPosition::<Impl, IMPL_OFFSET>,
            GetText::<Impl, IMPL_OFFSET>,
            GetPositionOfContext::<Impl, IMPL_OFFSET>,
            GetContextOfPosition::<Impl, IMPL_OFFSET>,
            InsertText::<Impl, IMPL_OFFSET>,
            RemoveText::<Impl, IMPL_OFFSET>,
            ReplaceText::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugDocumentTextAuthor as ::windows::core::Interface>::IID
    }
}
pub trait IDebugDocumentTextEventsImpl: Sized {
    fn onDestroy();
    fn onInsertText();
    fn onRemoveText();
    fn onReplaceText();
    fn onUpdateTextAttributes();
    fn onUpdateDocumentAttributes();
}
impl IDebugDocumentTextEventsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugDocumentTextEventsImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugDocumentTextEventsVtbl {
        unsafe extern "system" fn onDestroy<Impl: IDebugDocumentTextEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn onInsertText<Impl: IDebugDocumentTextEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ccharacterposition: u32, cnumtoinsert: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn onRemoveText<Impl: IDebugDocumentTextEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ccharacterposition: u32, cnumtoremove: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn onReplaceText<Impl: IDebugDocumentTextEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ccharacterposition: u32, cnumtoreplace: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn onUpdateTextAttributes<Impl: IDebugDocumentTextEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ccharacterposition: u32, cnumtoupdate: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn onUpdateDocumentAttributes<Impl: IDebugDocumentTextEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, textdocattr: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, onDestroy::<Impl, IMPL_OFFSET>, onInsertText::<Impl, IMPL_OFFSET>, onRemoveText::<Impl, IMPL_OFFSET>, onReplaceText::<Impl, IMPL_OFFSET>, onUpdateTextAttributes::<Impl, IMPL_OFFSET>, onUpdateDocumentAttributes::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugDocumentTextEvents as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugDocumentTextExternalAuthorImpl: Sized {
    fn GetPathName();
    fn GetFileName();
    fn NotifyChanged();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugDocumentTextExternalAuthorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugDocumentTextExternalAuthorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugDocumentTextExternalAuthorVtbl {
        unsafe extern "system" fn GetPathName<Impl: IDebugDocumentTextExternalAuthorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrlongname: *mut super::super::super::Foundation::BSTR, pfisoriginalfile: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFileName<Impl: IDebugDocumentTextExternalAuthorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrshortname: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn NotifyChanged<Impl: IDebugDocumentTextExternalAuthorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetPathName::<Impl, IMPL_OFFSET>, GetFileName::<Impl, IMPL_OFFSET>, NotifyChanged::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugDocumentTextExternalAuthor as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugEventCallbacksImpl: Sized {
    fn GetInterestMask();
    fn Breakpoint();
    fn Exception();
    fn CreateThread();
    fn ExitThread();
    fn CreateProcessA();
    fn ExitProcess();
    fn LoadModule();
    fn UnloadModule();
    fn SystemError();
    fn SessionStatus();
    fn ChangeDebuggeeState();
    fn ChangeEngineState();
    fn ChangeSymbolState();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugEventCallbacksVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugEventCallbacksImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugEventCallbacksVtbl {
        unsafe extern "system" fn GetInterestMask<Impl: IDebugEventCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Breakpoint<Impl: IDebugEventCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bp: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Exception<Impl: IDebugEventCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, exception: *const EXCEPTION_RECORD64, firstchance: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateThread<Impl: IDebugEventCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, dataoffset: u64, startoffset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ExitThread<Impl: IDebugEventCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, exitcode: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateProcessA<Impl: IDebugEventCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, imagefilehandle: u64, handle: u64, baseoffset: u64, modulesize: u32, modulename: super::super::super::Foundation::PSTR, imagename: super::super::super::Foundation::PSTR, checksum: u32, timedatestamp: u32, initialthreadhandle: u64, threaddataoffset: u64, startoffset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ExitProcess<Impl: IDebugEventCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, exitcode: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn LoadModule<Impl: IDebugEventCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, imagefilehandle: u64, baseoffset: u64, modulesize: u32, modulename: super::super::super::Foundation::PSTR, imagename: super::super::super::Foundation::PSTR, checksum: u32, timedatestamp: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn UnloadModule<Impl: IDebugEventCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, imagebasename: super::super::super::Foundation::PSTR, baseoffset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SystemError<Impl: IDebugEventCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, error: u32, level: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SessionStatus<Impl: IDebugEventCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, status: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ChangeDebuggeeState<Impl: IDebugEventCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, argument: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ChangeEngineState<Impl: IDebugEventCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, argument: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ChangeSymbolState<Impl: IDebugEventCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, argument: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetInterestMask::<Impl, IMPL_OFFSET>,
            Breakpoint::<Impl, IMPL_OFFSET>,
            Exception::<Impl, IMPL_OFFSET>,
            CreateThread::<Impl, IMPL_OFFSET>,
            ExitThread::<Impl, IMPL_OFFSET>,
            CreateProcessA::<Impl, IMPL_OFFSET>,
            ExitProcess::<Impl, IMPL_OFFSET>,
            LoadModule::<Impl, IMPL_OFFSET>,
            UnloadModule::<Impl, IMPL_OFFSET>,
            SystemError::<Impl, IMPL_OFFSET>,
            SessionStatus::<Impl, IMPL_OFFSET>,
            ChangeDebuggeeState::<Impl, IMPL_OFFSET>,
            ChangeEngineState::<Impl, IMPL_OFFSET>,
            ChangeSymbolState::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugEventCallbacks as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugEventCallbacksWideImpl: Sized {
    fn GetInterestMask();
    fn Breakpoint();
    fn Exception();
    fn CreateThread();
    fn ExitThread();
    fn CreateProcessA();
    fn ExitProcess();
    fn LoadModule();
    fn UnloadModule();
    fn SystemError();
    fn SessionStatus();
    fn ChangeDebuggeeState();
    fn ChangeEngineState();
    fn ChangeSymbolState();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugEventCallbacksWideVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugEventCallbacksWideImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugEventCallbacksWideVtbl {
        unsafe extern "system" fn GetInterestMask<Impl: IDebugEventCallbacksWideImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Breakpoint<Impl: IDebugEventCallbacksWideImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bp: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Exception<Impl: IDebugEventCallbacksWideImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, exception: *const EXCEPTION_RECORD64, firstchance: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateThread<Impl: IDebugEventCallbacksWideImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, dataoffset: u64, startoffset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ExitThread<Impl: IDebugEventCallbacksWideImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, exitcode: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateProcessA<Impl: IDebugEventCallbacksWideImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, imagefilehandle: u64, handle: u64, baseoffset: u64, modulesize: u32, modulename: super::super::super::Foundation::PWSTR, imagename: super::super::super::Foundation::PWSTR, checksum: u32, timedatestamp: u32, initialthreadhandle: u64, threaddataoffset: u64, startoffset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ExitProcess<Impl: IDebugEventCallbacksWideImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, exitcode: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn LoadModule<Impl: IDebugEventCallbacksWideImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, imagefilehandle: u64, baseoffset: u64, modulesize: u32, modulename: super::super::super::Foundation::PWSTR, imagename: super::super::super::Foundation::PWSTR, checksum: u32, timedatestamp: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn UnloadModule<Impl: IDebugEventCallbacksWideImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, imagebasename: super::super::super::Foundation::PWSTR, baseoffset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SystemError<Impl: IDebugEventCallbacksWideImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, error: u32, level: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SessionStatus<Impl: IDebugEventCallbacksWideImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, status: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ChangeDebuggeeState<Impl: IDebugEventCallbacksWideImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, argument: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ChangeEngineState<Impl: IDebugEventCallbacksWideImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, argument: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ChangeSymbolState<Impl: IDebugEventCallbacksWideImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, argument: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetInterestMask::<Impl, IMPL_OFFSET>,
            Breakpoint::<Impl, IMPL_OFFSET>,
            Exception::<Impl, IMPL_OFFSET>,
            CreateThread::<Impl, IMPL_OFFSET>,
            ExitThread::<Impl, IMPL_OFFSET>,
            CreateProcessA::<Impl, IMPL_OFFSET>,
            ExitProcess::<Impl, IMPL_OFFSET>,
            LoadModule::<Impl, IMPL_OFFSET>,
            UnloadModule::<Impl, IMPL_OFFSET>,
            SystemError::<Impl, IMPL_OFFSET>,
            SessionStatus::<Impl, IMPL_OFFSET>,
            ChangeDebuggeeState::<Impl, IMPL_OFFSET>,
            ChangeEngineState::<Impl, IMPL_OFFSET>,
            ChangeSymbolState::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugEventCallbacksWide as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugEventContextCallbacksImpl: Sized {
    fn GetInterestMask();
    fn Breakpoint();
    fn Exception();
    fn CreateThread();
    fn ExitThread();
    fn CreateProcessA();
    fn ExitProcess();
    fn LoadModule();
    fn UnloadModule();
    fn SystemError();
    fn SessionStatus();
    fn ChangeDebuggeeState();
    fn ChangeEngineState();
    fn ChangeSymbolState();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugEventContextCallbacksVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugEventContextCallbacksImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugEventContextCallbacksVtbl {
        unsafe extern "system" fn GetInterestMask<Impl: IDebugEventContextCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Breakpoint<Impl: IDebugEventContextCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, bp: ::windows::core::RawPtr, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Exception<Impl: IDebugEventContextCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, exception: *const EXCEPTION_RECORD64, firstchance: u32, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateThread<Impl: IDebugEventContextCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, dataoffset: u64, startoffset: u64, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ExitThread<Impl: IDebugEventContextCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, exitcode: u32, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateProcessA<Impl: IDebugEventContextCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, imagefilehandle: u64, handle: u64, baseoffset: u64, modulesize: u32, modulename: super::super::super::Foundation::PWSTR, imagename: super::super::super::Foundation::PWSTR, checksum: u32, timedatestamp: u32, initialthreadhandle: u64, threaddataoffset: u64, startoffset: u64, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ExitProcess<Impl: IDebugEventContextCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, exitcode: u32, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn LoadModule<Impl: IDebugEventContextCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, imagefilehandle: u64, baseoffset: u64, modulesize: u32, modulename: super::super::super::Foundation::PWSTR, imagename: super::super::super::Foundation::PWSTR, checksum: u32, timedatestamp: u32, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn UnloadModule<Impl: IDebugEventContextCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, imagebasename: super::super::super::Foundation::PWSTR, baseoffset: u64, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SystemError<Impl: IDebugEventContextCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, error: u32, level: u32, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SessionStatus<Impl: IDebugEventContextCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, status: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ChangeDebuggeeState<Impl: IDebugEventContextCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, argument: u64, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ChangeEngineState<Impl: IDebugEventContextCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, argument: u64, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ChangeSymbolState<Impl: IDebugEventContextCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, argument: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetInterestMask::<Impl, IMPL_OFFSET>,
            Breakpoint::<Impl, IMPL_OFFSET>,
            Exception::<Impl, IMPL_OFFSET>,
            CreateThread::<Impl, IMPL_OFFSET>,
            ExitThread::<Impl, IMPL_OFFSET>,
            CreateProcessA::<Impl, IMPL_OFFSET>,
            ExitProcess::<Impl, IMPL_OFFSET>,
            LoadModule::<Impl, IMPL_OFFSET>,
            UnloadModule::<Impl, IMPL_OFFSET>,
            SystemError::<Impl, IMPL_OFFSET>,
            SessionStatus::<Impl, IMPL_OFFSET>,
            ChangeDebuggeeState::<Impl, IMPL_OFFSET>,
            ChangeEngineState::<Impl, IMPL_OFFSET>,
            ChangeSymbolState::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugEventContextCallbacks as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugExpressionImpl: Sized {
    fn Start();
    fn Abort();
    fn QueryIsComplete();
    fn GetResultAsString();
    fn GetResultAsDebugProperty();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugExpressionVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugExpressionImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugExpressionVtbl {
        unsafe extern "system" fn Start<Impl: IDebugExpressionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdecb: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Abort<Impl: IDebugExpressionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn QueryIsComplete<Impl: IDebugExpressionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetResultAsString<Impl: IDebugExpressionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, phrresult: *mut ::windows::core::HRESULT, pbstrresult: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetResultAsDebugProperty<Impl: IDebugExpressionImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, phrresult: *mut ::windows::core::HRESULT, ppdp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Start::<Impl, IMPL_OFFSET>, Abort::<Impl, IMPL_OFFSET>, QueryIsComplete::<Impl, IMPL_OFFSET>, GetResultAsString::<Impl, IMPL_OFFSET>, GetResultAsDebugProperty::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugExpression as ::windows::core::Interface>::IID
    }
}
pub trait IDebugExpressionCallBackImpl: Sized {
    fn onComplete();
}
impl IDebugExpressionCallBackVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugExpressionCallBackImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugExpressionCallBackVtbl {
        unsafe extern "system" fn onComplete<Impl: IDebugExpressionCallBackImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, onComplete::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugExpressionCallBack as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugExpressionContextImpl: Sized {
    fn ParseLanguageText();
    fn GetLanguageInfo();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugExpressionContextVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugExpressionContextImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugExpressionContextVtbl {
        unsafe extern "system" fn ParseLanguageText<Impl: IDebugExpressionContextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstrcode: super::super::super::Foundation::PWSTR, nradix: u32, pstrdelimiter: super::super::super::Foundation::PWSTR, dwflags: u32, ppe: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLanguageInfo<Impl: IDebugExpressionContextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrlanguagename: *mut super::super::super::Foundation::BSTR, planguageid: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, ParseLanguageText::<Impl, IMPL_OFFSET>, GetLanguageInfo::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugExpressionContext as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole"))]
pub trait IDebugExtendedPropertyImpl: Sized + IDebugPropertyImpl {
    fn GetExtendedPropertyInfo();
    fn EnumExtendedMembers();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole"))]
impl IDebugExtendedPropertyVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugExtendedPropertyImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugExtendedPropertyVtbl {
        unsafe extern "system" fn GetExtendedPropertyInfo<Impl: IDebugExtendedPropertyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwfieldspec: u32, nradix: u32, pextendedpropertyinfo: *mut ExtendedDebugPropertyInfo) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnumExtendedMembers<Impl: IDebugExtendedPropertyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwfieldspec: u32, nradix: u32, ppeepi: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetPropertyInfo::<Impl, IMPL_OFFSET>, GetExtendedInfo::<Impl, IMPL_OFFSET>, SetValueAsString::<Impl, IMPL_OFFSET>, EnumMembers::<Impl, IMPL_OFFSET>, GetParent::<Impl, IMPL_OFFSET>, GetExtendedPropertyInfo::<Impl, IMPL_OFFSET>, EnumExtendedMembers::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugExtendedProperty as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IDebugFormatterImpl: Sized {
    fn GetStringForVariant();
    fn GetVariantForString();
    fn GetStringForVarType();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IDebugFormatterVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugFormatterImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugFormatterVtbl {
        unsafe extern "system" fn GetStringForVariant<Impl: IDebugFormatterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvar: *const super::super::Com::VARIANT, nradix: u32, pbstrvalue: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetVariantForString<Impl: IDebugFormatterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwstrvalue: super::super::super::Foundation::PWSTR, pvar: *mut super::super::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetStringForVarType<Impl: IDebugFormatterImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, vt: u16, ptdescarraytype: *const super::super::Com::TYPEDESC, pbstr: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetStringForVariant::<Impl, IMPL_OFFSET>, GetVariantForString::<Impl, IMPL_OFFSET>, GetStringForVarType::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugFormatter as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IDebugHelperImpl: Sized {
    fn CreatePropertyBrowser();
    fn CreatePropertyBrowserEx();
    fn CreateSimpleConnectionPoint();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IDebugHelperVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugHelperImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugHelperVtbl {
        unsafe extern "system" fn CreatePropertyBrowser<Impl: IDebugHelperImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvar: *const super::super::Com::VARIANT, bstrname: super::super::super::Foundation::PWSTR, pdat: ::windows::core::RawPtr, ppdob: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreatePropertyBrowserEx<Impl: IDebugHelperImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pvar: *const super::super::Com::VARIANT, bstrname: super::super::super::Foundation::PWSTR, pdat: ::windows::core::RawPtr, pdf: ::windows::core::RawPtr, ppdob: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateSimpleConnectionPoint<Impl: IDebugHelperImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdisp: ::windows::core::RawPtr, ppscp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, CreatePropertyBrowser::<Impl, IMPL_OFFSET>, CreatePropertyBrowserEx::<Impl, IMPL_OFFSET>, CreateSimpleConnectionPoint::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugHelper as ::windows::core::Interface>::IID
    }
}
pub trait IDebugHostImpl: Sized {
    fn GetHostDefinedInterface();
    fn GetCurrentContext();
    fn GetDefaultMetadata();
}
impl IDebugHostVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugHostImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugHostVtbl {
        unsafe extern "system" fn GetHostDefinedInterface<Impl: IDebugHostImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hostunk: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentContext<Impl: IDebugHostImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDefaultMetadata<Impl: IDebugHostImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, defaultmetadatastore: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetHostDefinedInterface::<Impl, IMPL_OFFSET>, GetCurrentContext::<Impl, IMPL_OFFSET>, GetDefaultMetadata::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugHost as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugHostBaseClassImpl: Sized + IDebugHostSymbolImpl {
    fn GetOffset();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugHostBaseClassVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugHostBaseClassImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugHostBaseClassVtbl {
        unsafe extern "system" fn GetOffset<Impl: IDebugHostBaseClassImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetContext::<Impl, IMPL_OFFSET>, EnumerateChildren::<Impl, IMPL_OFFSET>, GetSymbolKind::<Impl, IMPL_OFFSET>, GetName::<Impl, IMPL_OFFSET>, GetType::<Impl, IMPL_OFFSET>, GetContainingModule::<Impl, IMPL_OFFSET>, CompareAgainst::<Impl, IMPL_OFFSET>, GetOffset::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugHostBaseClass as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IDebugHostConstantImpl: Sized + IDebugHostSymbolImpl {
    fn GetValue();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IDebugHostConstantVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugHostConstantImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugHostConstantVtbl {
        unsafe extern "system" fn GetValue<Impl: IDebugHostConstantImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: *mut super::super::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetContext::<Impl, IMPL_OFFSET>, EnumerateChildren::<Impl, IMPL_OFFSET>, GetSymbolKind::<Impl, IMPL_OFFSET>, GetName::<Impl, IMPL_OFFSET>, GetType::<Impl, IMPL_OFFSET>, GetContainingModule::<Impl, IMPL_OFFSET>, CompareAgainst::<Impl, IMPL_OFFSET>, GetValue::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugHostConstant as ::windows::core::Interface>::IID
    }
}
pub trait IDebugHostContextImpl: Sized {
    fn IsEqualTo();
}
impl IDebugHostContextVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugHostContextImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugHostContextVtbl {
        unsafe extern "system" fn IsEqualTo<Impl: IDebugHostContextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcontext: ::windows::core::RawPtr, pisequal: *mut bool) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, IsEqualTo::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugHostContext as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IDebugHostDataImpl: Sized + IDebugHostSymbolImpl {
    fn GetLocationKind();
    fn GetLocation();
    fn GetValue();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IDebugHostDataVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugHostDataImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugHostDataVtbl {
        unsafe extern "system" fn GetLocationKind<Impl: IDebugHostDataImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, locationkind: *mut LocationKind) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLocation<Impl: IDebugHostDataImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, location: *mut Location) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetValue<Impl: IDebugHostDataImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: *mut super::super::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetContext::<Impl, IMPL_OFFSET>,
            EnumerateChildren::<Impl, IMPL_OFFSET>,
            GetSymbolKind::<Impl, IMPL_OFFSET>,
            GetName::<Impl, IMPL_OFFSET>,
            GetType::<Impl, IMPL_OFFSET>,
            GetContainingModule::<Impl, IMPL_OFFSET>,
            CompareAgainst::<Impl, IMPL_OFFSET>,
            GetLocationKind::<Impl, IMPL_OFFSET>,
            GetLocation::<Impl, IMPL_OFFSET>,
            GetValue::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugHostData as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugHostErrorSinkImpl: Sized {
    fn ReportError();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugHostErrorSinkVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugHostErrorSinkImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugHostErrorSinkVtbl {
        unsafe extern "system" fn ReportError<Impl: IDebugHostErrorSinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, errclass: ErrorClass, hrerror: ::windows::core::HRESULT, message: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, ReportError::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugHostErrorSink as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugHostEvaluatorImpl: Sized {
    fn EvaluateExpression();
    fn EvaluateExtendedExpression();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugHostEvaluatorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugHostEvaluatorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugHostEvaluatorVtbl {
        unsafe extern "system" fn EvaluateExpression<Impl: IDebugHostEvaluatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: ::windows::core::RawPtr, expression: super::super::super::Foundation::PWSTR, bindingcontext: ::windows::core::RawPtr, result: *mut ::windows::core::RawPtr, metadata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EvaluateExtendedExpression<Impl: IDebugHostEvaluatorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: ::windows::core::RawPtr, expression: super::super::super::Foundation::PWSTR, bindingcontext: ::windows::core::RawPtr, result: *mut ::windows::core::RawPtr, metadata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, EvaluateExpression::<Impl, IMPL_OFFSET>, EvaluateExtendedExpression::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugHostEvaluator as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugHostEvaluator2Impl: Sized + IDebugHostEvaluatorImpl {
    fn AssignTo();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugHostEvaluator2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugHostEvaluator2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugHostEvaluator2Vtbl {
        unsafe extern "system" fn AssignTo<Impl: IDebugHostEvaluator2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, assignmentreference: ::windows::core::RawPtr, assignmentvalue: ::windows::core::RawPtr, assignmentresult: *mut ::windows::core::RawPtr, assignmentmetadata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, EvaluateExpression::<Impl, IMPL_OFFSET>, EvaluateExtendedExpression::<Impl, IMPL_OFFSET>, AssignTo::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugHostEvaluator2 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugHostExtensibilityImpl: Sized {
    fn CreateFunctionAlias();
    fn DestroyFunctionAlias();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugHostExtensibilityVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugHostExtensibilityImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugHostExtensibilityVtbl {
        unsafe extern "system" fn CreateFunctionAlias<Impl: IDebugHostExtensibilityImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, aliasname: super::super::super::Foundation::PWSTR, functionobject: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DestroyFunctionAlias<Impl: IDebugHostExtensibilityImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, aliasname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, CreateFunctionAlias::<Impl, IMPL_OFFSET>, DestroyFunctionAlias::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugHostExtensibility as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IDebugHostFieldImpl: Sized + IDebugHostSymbolImpl {
    fn GetLocationKind();
    fn GetOffset();
    fn GetLocation();
    fn GetValue();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IDebugHostFieldVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugHostFieldImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugHostFieldVtbl {
        unsafe extern "system" fn GetLocationKind<Impl: IDebugHostFieldImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, locationkind: *mut LocationKind) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOffset<Impl: IDebugHostFieldImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLocation<Impl: IDebugHostFieldImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, location: *mut Location) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetValue<Impl: IDebugHostFieldImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, value: *mut super::super::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetContext::<Impl, IMPL_OFFSET>,
            EnumerateChildren::<Impl, IMPL_OFFSET>,
            GetSymbolKind::<Impl, IMPL_OFFSET>,
            GetName::<Impl, IMPL_OFFSET>,
            GetType::<Impl, IMPL_OFFSET>,
            GetContainingModule::<Impl, IMPL_OFFSET>,
            CompareAgainst::<Impl, IMPL_OFFSET>,
            GetLocationKind::<Impl, IMPL_OFFSET>,
            GetOffset::<Impl, IMPL_OFFSET>,
            GetLocation::<Impl, IMPL_OFFSET>,
            GetValue::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugHostField as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugHostMemoryImpl: Sized {
    fn ReadBytes();
    fn WriteBytes();
    fn ReadPointers();
    fn WritePointers();
    fn GetDisplayStringForLocation();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugHostMemoryVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugHostMemoryImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugHostMemoryVtbl {
        unsafe extern "system" fn ReadBytes<Impl: IDebugHostMemoryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: ::windows::core::RawPtr, location: Location, buffer: *mut ::core::ffi::c_void, buffersize: u64, bytesread: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteBytes<Impl: IDebugHostMemoryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: ::windows::core::RawPtr, location: Location, buffer: *const ::core::ffi::c_void, buffersize: u64, byteswritten: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadPointers<Impl: IDebugHostMemoryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: ::windows::core::RawPtr, location: Location, count: u64, pointers: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WritePointers<Impl: IDebugHostMemoryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: ::windows::core::RawPtr, location: Location, count: u64, pointers: *const u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDisplayStringForLocation<Impl: IDebugHostMemoryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: ::windows::core::RawPtr, location: Location, verbose: u8, locationname: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, ReadBytes::<Impl, IMPL_OFFSET>, WriteBytes::<Impl, IMPL_OFFSET>, ReadPointers::<Impl, IMPL_OFFSET>, WritePointers::<Impl, IMPL_OFFSET>, GetDisplayStringForLocation::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugHostMemory as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugHostMemory2Impl: Sized + IDebugHostMemoryImpl {
    fn LinearizeLocation();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugHostMemory2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugHostMemory2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugHostMemory2Vtbl {
        unsafe extern "system" fn LinearizeLocation<Impl: IDebugHostMemory2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: ::windows::core::RawPtr, location: Location, plinearizedlocation: *mut Location) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, ReadBytes::<Impl, IMPL_OFFSET>, WriteBytes::<Impl, IMPL_OFFSET>, ReadPointers::<Impl, IMPL_OFFSET>, WritePointers::<Impl, IMPL_OFFSET>, GetDisplayStringForLocation::<Impl, IMPL_OFFSET>, LinearizeLocation::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugHostMemory2 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugHostModuleImpl: Sized + IDebugHostSymbolImpl {
    fn GetImageName();
    fn GetBaseLocation();
    fn GetVersion();
    fn FindTypeByName();
    fn FindSymbolByRVA();
    fn FindSymbolByName();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugHostModuleVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugHostModuleImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugHostModuleVtbl {
        unsafe extern "system" fn GetImageName<Impl: IDebugHostModuleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, allowpath: u8, imagename: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBaseLocation<Impl: IDebugHostModuleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, modulebaselocation: *mut Location) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetVersion<Impl: IDebugHostModuleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fileversion: *mut u64, productversion: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FindTypeByName<Impl: IDebugHostModuleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, typename: super::super::super::Foundation::PWSTR, r#type: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FindSymbolByRVA<Impl: IDebugHostModuleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rva: u64, symbol: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FindSymbolByName<Impl: IDebugHostModuleImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbolname: super::super::super::Foundation::PWSTR, symbol: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetContext::<Impl, IMPL_OFFSET>,
            EnumerateChildren::<Impl, IMPL_OFFSET>,
            GetSymbolKind::<Impl, IMPL_OFFSET>,
            GetName::<Impl, IMPL_OFFSET>,
            GetType::<Impl, IMPL_OFFSET>,
            GetContainingModule::<Impl, IMPL_OFFSET>,
            CompareAgainst::<Impl, IMPL_OFFSET>,
            GetImageName::<Impl, IMPL_OFFSET>,
            GetBaseLocation::<Impl, IMPL_OFFSET>,
            GetVersion::<Impl, IMPL_OFFSET>,
            FindTypeByName::<Impl, IMPL_OFFSET>,
            FindSymbolByRVA::<Impl, IMPL_OFFSET>,
            FindSymbolByName::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugHostModule as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugHostModule2Impl: Sized + IDebugHostModuleImpl + IDebugHostSymbolImpl {
    fn FindContainingSymbolByRVA();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugHostModule2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugHostModule2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugHostModule2Vtbl {
        unsafe extern "system" fn FindContainingSymbolByRVA<Impl: IDebugHostModule2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rva: u64, symbol: *mut ::windows::core::RawPtr, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetContext::<Impl, IMPL_OFFSET>,
            EnumerateChildren::<Impl, IMPL_OFFSET>,
            GetSymbolKind::<Impl, IMPL_OFFSET>,
            GetName::<Impl, IMPL_OFFSET>,
            GetType::<Impl, IMPL_OFFSET>,
            GetContainingModule::<Impl, IMPL_OFFSET>,
            CompareAgainst::<Impl, IMPL_OFFSET>,
            GetImageName::<Impl, IMPL_OFFSET>,
            GetBaseLocation::<Impl, IMPL_OFFSET>,
            GetVersion::<Impl, IMPL_OFFSET>,
            FindTypeByName::<Impl, IMPL_OFFSET>,
            FindSymbolByRVA::<Impl, IMPL_OFFSET>,
            FindSymbolByName::<Impl, IMPL_OFFSET>,
            FindContainingSymbolByRVA::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugHostModule2 as ::windows::core::Interface>::IID
    }
}
pub trait IDebugHostModuleSignatureImpl: Sized {
    fn IsMatch();
}
impl IDebugHostModuleSignatureVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugHostModuleSignatureImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugHostModuleSignatureVtbl {
        unsafe extern "system" fn IsMatch<Impl: IDebugHostModuleSignatureImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmodule: ::windows::core::RawPtr, ismatch: *mut bool) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, IsMatch::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugHostModuleSignature as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugHostPublicImpl: Sized + IDebugHostSymbolImpl {
    fn GetLocationKind();
    fn GetLocation();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugHostPublicVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugHostPublicImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugHostPublicVtbl {
        unsafe extern "system" fn GetLocationKind<Impl: IDebugHostPublicImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, locationkind: *mut LocationKind) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLocation<Impl: IDebugHostPublicImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, location: *mut Location) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetContext::<Impl, IMPL_OFFSET>, EnumerateChildren::<Impl, IMPL_OFFSET>, GetSymbolKind::<Impl, IMPL_OFFSET>, GetName::<Impl, IMPL_OFFSET>, GetType::<Impl, IMPL_OFFSET>, GetContainingModule::<Impl, IMPL_OFFSET>, CompareAgainst::<Impl, IMPL_OFFSET>, GetLocationKind::<Impl, IMPL_OFFSET>, GetLocation::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugHostPublic as ::windows::core::Interface>::IID
    }
}
pub trait IDebugHostScriptHostImpl: Sized {
    fn CreateContext();
}
impl IDebugHostScriptHostVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugHostScriptHostImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugHostScriptHostVtbl {
        unsafe extern "system" fn CreateContext<Impl: IDebugHostScriptHostImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, script: ::windows::core::RawPtr, scriptcontext: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, CreateContext::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugHostScriptHost as ::windows::core::Interface>::IID
    }
}
pub trait IDebugHostStatusImpl: Sized {
    fn PollUserInterrupt();
}
impl IDebugHostStatusVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugHostStatusImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugHostStatusVtbl {
        unsafe extern "system" fn PollUserInterrupt<Impl: IDebugHostStatusImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, interruptrequested: *mut bool) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, PollUserInterrupt::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugHostStatus as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugHostSymbolImpl: Sized {
    fn GetContext();
    fn EnumerateChildren();
    fn GetSymbolKind();
    fn GetName();
    fn GetType();
    fn GetContainingModule();
    fn CompareAgainst();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugHostSymbolVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugHostSymbolImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugHostSymbolVtbl {
        unsafe extern "system" fn GetContext<Impl: IDebugHostSymbolImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnumerateChildren<Impl: IDebugHostSymbolImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, kind: SymbolKind, name: super::super::super::Foundation::PWSTR, ppenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolKind<Impl: IDebugHostSymbolImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, kind: *mut SymbolKind) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetName<Impl: IDebugHostSymbolImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbolname: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetType<Impl: IDebugHostSymbolImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetContainingModule<Impl: IDebugHostSymbolImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, containingmodule: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CompareAgainst<Impl: IDebugHostSymbolImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcomparisonsymbol: ::windows::core::RawPtr, comparisonflags: u32, pmatches: *mut bool) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetContext::<Impl, IMPL_OFFSET>, EnumerateChildren::<Impl, IMPL_OFFSET>, GetSymbolKind::<Impl, IMPL_OFFSET>, GetName::<Impl, IMPL_OFFSET>, GetType::<Impl, IMPL_OFFSET>, GetContainingModule::<Impl, IMPL_OFFSET>, CompareAgainst::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugHostSymbol as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugHostSymbol2Impl: Sized + IDebugHostSymbolImpl {
    fn GetLanguage();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugHostSymbol2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugHostSymbol2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugHostSymbol2Vtbl {
        unsafe extern "system" fn GetLanguage<Impl: IDebugHostSymbol2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pkind: *mut LanguageKind) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetContext::<Impl, IMPL_OFFSET>, EnumerateChildren::<Impl, IMPL_OFFSET>, GetSymbolKind::<Impl, IMPL_OFFSET>, GetName::<Impl, IMPL_OFFSET>, GetType::<Impl, IMPL_OFFSET>, GetContainingModule::<Impl, IMPL_OFFSET>, CompareAgainst::<Impl, IMPL_OFFSET>, GetLanguage::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugHostSymbol2 as ::windows::core::Interface>::IID
    }
}
pub trait IDebugHostSymbolEnumeratorImpl: Sized {
    fn Reset();
    fn GetNext();
}
impl IDebugHostSymbolEnumeratorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugHostSymbolEnumeratorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugHostSymbolEnumeratorVtbl {
        unsafe extern "system" fn Reset<Impl: IDebugHostSymbolEnumeratorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNext<Impl: IDebugHostSymbolEnumeratorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Reset::<Impl, IMPL_OFFSET>, GetNext::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugHostSymbolEnumerator as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugHostSymbolsImpl: Sized {
    fn CreateModuleSignature();
    fn CreateTypeSignature();
    fn CreateTypeSignatureForModuleRange();
    fn EnumerateModules();
    fn FindModuleByName();
    fn FindModuleByLocation();
    fn GetMostDerivedObject();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugHostSymbolsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugHostSymbolsImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugHostSymbolsVtbl {
        unsafe extern "system" fn CreateModuleSignature<Impl: IDebugHostSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pwszmodulename: super::super::super::Foundation::PWSTR, pwszminversion: super::super::super::Foundation::PWSTR, pwszmaxversion: super::super::super::Foundation::PWSTR, ppmodulesignature: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateTypeSignature<Impl: IDebugHostSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, signaturespecification: super::super::super::Foundation::PWSTR, module: ::windows::core::RawPtr, typesignature: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateTypeSignatureForModuleRange<Impl: IDebugHostSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, signaturespecification: super::super::super::Foundation::PWSTR, modulename: super::super::super::Foundation::PWSTR, minversion: super::super::super::Foundation::PWSTR, maxversion: super::super::super::Foundation::PWSTR, typesignature: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnumerateModules<Impl: IDebugHostSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: ::windows::core::RawPtr, moduleenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FindModuleByName<Impl: IDebugHostSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: ::windows::core::RawPtr, modulename: super::super::super::Foundation::PWSTR, module: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FindModuleByLocation<Impl: IDebugHostSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: ::windows::core::RawPtr, modulelocation: Location, module: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetMostDerivedObject<Impl: IDebugHostSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcontext: ::windows::core::RawPtr, location: Location, objecttype: ::windows::core::RawPtr, derivedlocation: *mut Location, derivedtype: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, CreateModuleSignature::<Impl, IMPL_OFFSET>, CreateTypeSignature::<Impl, IMPL_OFFSET>, CreateTypeSignatureForModuleRange::<Impl, IMPL_OFFSET>, EnumerateModules::<Impl, IMPL_OFFSET>, FindModuleByName::<Impl, IMPL_OFFSET>, FindModuleByLocation::<Impl, IMPL_OFFSET>, GetMostDerivedObject::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugHostSymbols as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugHostTypeImpl: Sized + IDebugHostSymbolImpl {
    fn GetTypeKind();
    fn GetSize();
    fn GetBaseType();
    fn GetHashCode();
    fn GetIntrinsicType();
    fn GetBitField();
    fn GetPointerKind();
    fn GetMemberType();
    fn CreatePointerTo();
    fn GetArrayDimensionality();
    fn GetArrayDimensions();
    fn CreateArrayOf();
    fn GetFunctionCallingConvention();
    fn GetFunctionReturnType();
    fn GetFunctionParameterTypeCount();
    fn GetFunctionParameterTypeAt();
    fn IsGeneric();
    fn GetGenericArgumentCount();
    fn GetGenericArgumentAt();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugHostTypeVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugHostTypeImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugHostTypeVtbl {
        unsafe extern "system" fn GetTypeKind<Impl: IDebugHostTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, kind: *mut TypeKind) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSize<Impl: IDebugHostTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, size: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBaseType<Impl: IDebugHostTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, basetype: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetHashCode<Impl: IDebugHostTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hashcode: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetIntrinsicType<Impl: IDebugHostTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, intrinsickind: *mut IntrinsicKind, carriertype: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBitField<Impl: IDebugHostTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, lsboffield: *mut u32, lengthoffield: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPointerKind<Impl: IDebugHostTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pointerkind: *mut PointerKind) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetMemberType<Impl: IDebugHostTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, membertype: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreatePointerTo<Impl: IDebugHostTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, kind: PointerKind, newtype: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetArrayDimensionality<Impl: IDebugHostTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, arraydimensionality: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetArrayDimensions<Impl: IDebugHostTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dimensions: u64, pdimensions: *mut ArrayDimension) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateArrayOf<Impl: IDebugHostTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dimensions: u64, pdimensions: *const ArrayDimension, newtype: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFunctionCallingConvention<Impl: IDebugHostTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, conventionkind: *mut CallingConventionKind) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFunctionReturnType<Impl: IDebugHostTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, returntype: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFunctionParameterTypeCount<Impl: IDebugHostTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFunctionParameterTypeAt<Impl: IDebugHostTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, i: u64, parametertype: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsGeneric<Impl: IDebugHostTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, isgeneric: *mut bool) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetGenericArgumentCount<Impl: IDebugHostTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, argcount: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetGenericArgumentAt<Impl: IDebugHostTypeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, i: u64, argument: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetContext::<Impl, IMPL_OFFSET>,
            EnumerateChildren::<Impl, IMPL_OFFSET>,
            GetSymbolKind::<Impl, IMPL_OFFSET>,
            GetName::<Impl, IMPL_OFFSET>,
            GetType::<Impl, IMPL_OFFSET>,
            GetContainingModule::<Impl, IMPL_OFFSET>,
            CompareAgainst::<Impl, IMPL_OFFSET>,
            GetTypeKind::<Impl, IMPL_OFFSET>,
            GetSize::<Impl, IMPL_OFFSET>,
            GetBaseType::<Impl, IMPL_OFFSET>,
            GetHashCode::<Impl, IMPL_OFFSET>,
            GetIntrinsicType::<Impl, IMPL_OFFSET>,
            GetBitField::<Impl, IMPL_OFFSET>,
            GetPointerKind::<Impl, IMPL_OFFSET>,
            GetMemberType::<Impl, IMPL_OFFSET>,
            CreatePointerTo::<Impl, IMPL_OFFSET>,
            GetArrayDimensionality::<Impl, IMPL_OFFSET>,
            GetArrayDimensions::<Impl, IMPL_OFFSET>,
            CreateArrayOf::<Impl, IMPL_OFFSET>,
            GetFunctionCallingConvention::<Impl, IMPL_OFFSET>,
            GetFunctionReturnType::<Impl, IMPL_OFFSET>,
            GetFunctionParameterTypeCount::<Impl, IMPL_OFFSET>,
            GetFunctionParameterTypeAt::<Impl, IMPL_OFFSET>,
            IsGeneric::<Impl, IMPL_OFFSET>,
            GetGenericArgumentCount::<Impl, IMPL_OFFSET>,
            GetGenericArgumentAt::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugHostType as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugHostType2Impl: Sized + IDebugHostTypeImpl + IDebugHostSymbolImpl {
    fn IsTypedef();
    fn GetTypedefBaseType();
    fn GetTypedefFinalBaseType();
    fn GetFunctionVarArgsKind();
    fn GetFunctionInstancePointerType();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugHostType2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugHostType2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugHostType2Vtbl {
        unsafe extern "system" fn IsTypedef<Impl: IDebugHostType2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, istypedef: *mut bool) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTypedefBaseType<Impl: IDebugHostType2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, basetype: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTypedefFinalBaseType<Impl: IDebugHostType2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, finalbasetype: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFunctionVarArgsKind<Impl: IDebugHostType2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, varargskind: *mut VarArgsKind) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFunctionInstancePointerType<Impl: IDebugHostType2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, instancepointertype: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetContext::<Impl, IMPL_OFFSET>,
            EnumerateChildren::<Impl, IMPL_OFFSET>,
            GetSymbolKind::<Impl, IMPL_OFFSET>,
            GetName::<Impl, IMPL_OFFSET>,
            GetType::<Impl, IMPL_OFFSET>,
            GetContainingModule::<Impl, IMPL_OFFSET>,
            CompareAgainst::<Impl, IMPL_OFFSET>,
            GetTypeKind::<Impl, IMPL_OFFSET>,
            GetSize::<Impl, IMPL_OFFSET>,
            GetBaseType::<Impl, IMPL_OFFSET>,
            GetHashCode::<Impl, IMPL_OFFSET>,
            GetIntrinsicType::<Impl, IMPL_OFFSET>,
            GetBitField::<Impl, IMPL_OFFSET>,
            GetPointerKind::<Impl, IMPL_OFFSET>,
            GetMemberType::<Impl, IMPL_OFFSET>,
            CreatePointerTo::<Impl, IMPL_OFFSET>,
            GetArrayDimensionality::<Impl, IMPL_OFFSET>,
            GetArrayDimensions::<Impl, IMPL_OFFSET>,
            CreateArrayOf::<Impl, IMPL_OFFSET>,
            GetFunctionCallingConvention::<Impl, IMPL_OFFSET>,
            GetFunctionReturnType::<Impl, IMPL_OFFSET>,
            GetFunctionParameterTypeCount::<Impl, IMPL_OFFSET>,
            GetFunctionParameterTypeAt::<Impl, IMPL_OFFSET>,
            IsGeneric::<Impl, IMPL_OFFSET>,
            GetGenericArgumentCount::<Impl, IMPL_OFFSET>,
            GetGenericArgumentAt::<Impl, IMPL_OFFSET>,
            IsTypedef::<Impl, IMPL_OFFSET>,
            GetTypedefBaseType::<Impl, IMPL_OFFSET>,
            GetTypedefFinalBaseType::<Impl, IMPL_OFFSET>,
            GetFunctionVarArgsKind::<Impl, IMPL_OFFSET>,
            GetFunctionInstancePointerType::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugHostType2 as ::windows::core::Interface>::IID
    }
}
pub trait IDebugHostTypeSignatureImpl: Sized {
    fn GetHashCode();
    fn IsMatch();
    fn CompareAgainst();
}
impl IDebugHostTypeSignatureVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugHostTypeSignatureImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugHostTypeSignatureVtbl {
        unsafe extern "system" fn GetHashCode<Impl: IDebugHostTypeSignatureImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hashcode: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsMatch<Impl: IDebugHostTypeSignatureImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: ::windows::core::RawPtr, ismatch: *mut bool, wildcardmatches: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CompareAgainst<Impl: IDebugHostTypeSignatureImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, typesignature: ::windows::core::RawPtr, result: *mut SignatureComparison) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetHashCode::<Impl, IMPL_OFFSET>, IsMatch::<Impl, IMPL_OFFSET>, CompareAgainst::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugHostTypeSignature as ::windows::core::Interface>::IID
    }
}
pub trait IDebugInputCallbacksImpl: Sized {
    fn StartInput();
    fn EndInput();
}
impl IDebugInputCallbacksVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugInputCallbacksImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugInputCallbacksVtbl {
        unsafe extern "system" fn StartInput<Impl: IDebugInputCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffersize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EndInput<Impl: IDebugInputCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, StartInput::<Impl, IMPL_OFFSET>, EndInput::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugInputCallbacks as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugOutputCallbacksImpl: Sized {
    fn Output();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugOutputCallbacksVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugOutputCallbacksImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugOutputCallbacksVtbl {
        unsafe extern "system" fn Output<Impl: IDebugOutputCallbacksImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32, text: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Output::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugOutputCallbacks as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugOutputCallbacks2Impl: Sized {
    fn Output();
    fn GetInterestMask();
    fn Output2();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugOutputCallbacks2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugOutputCallbacks2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugOutputCallbacks2Vtbl {
        unsafe extern "system" fn Output<Impl: IDebugOutputCallbacks2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32, text: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetInterestMask<Impl: IDebugOutputCallbacks2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Output2<Impl: IDebugOutputCallbacks2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, flags: u32, arg: u64, text: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Output::<Impl, IMPL_OFFSET>, GetInterestMask::<Impl, IMPL_OFFSET>, Output2::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugOutputCallbacks2 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugOutputCallbacksWideImpl: Sized {
    fn Output();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugOutputCallbacksWideVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugOutputCallbacksWideImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugOutputCallbacksWideVtbl {
        unsafe extern "system" fn Output<Impl: IDebugOutputCallbacksWideImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: u32, text: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Output::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugOutputCallbacksWide as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugOutputStreamImpl: Sized {
    fn Write();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugOutputStreamVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugOutputStreamImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugOutputStreamVtbl {
        unsafe extern "system" fn Write<Impl: IDebugOutputStreamImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psz: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Write::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugOutputStream as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugPlmClientImpl: Sized {
    fn LaunchPlmPackageForDebugWide();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugPlmClientVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugPlmClientImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugPlmClientVtbl {
        unsafe extern "system" fn LaunchPlmPackageForDebugWide<Impl: IDebugPlmClientImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, timeout: u32, packagefullname: super::super::super::Foundation::PWSTR, appname: super::super::super::Foundation::PWSTR, arguments: super::super::super::Foundation::PWSTR, processid: *mut u32, threadid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, LaunchPlmPackageForDebugWide::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugPlmClient as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugPlmClient2Impl: Sized {
    fn LaunchPlmPackageForDebugWide();
    fn LaunchPlmBgTaskForDebugWide();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugPlmClient2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugPlmClient2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugPlmClient2Vtbl {
        unsafe extern "system" fn LaunchPlmPackageForDebugWide<Impl: IDebugPlmClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, timeout: u32, packagefullname: super::super::super::Foundation::PWSTR, appname: super::super::super::Foundation::PWSTR, arguments: super::super::super::Foundation::PWSTR, processid: *mut u32, threadid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn LaunchPlmBgTaskForDebugWide<Impl: IDebugPlmClient2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, timeout: u32, packagefullname: super::super::super::Foundation::PWSTR, backgroundtaskid: super::super::super::Foundation::PWSTR, processid: *mut u32, threadid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, LaunchPlmPackageForDebugWide::<Impl, IMPL_OFFSET>, LaunchPlmBgTaskForDebugWide::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugPlmClient2 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugPlmClient3Impl: Sized {
    fn LaunchPlmPackageForDebugWide();
    fn LaunchPlmBgTaskForDebugWide();
    fn QueryPlmPackageWide();
    fn QueryPlmPackageList();
    fn EnablePlmPackageDebugWide();
    fn DisablePlmPackageDebugWide();
    fn SuspendPlmPackageWide();
    fn ResumePlmPackageWide();
    fn TerminatePlmPackageWide();
    fn LaunchAndDebugPlmAppWide();
    fn ActivateAndDebugPlmBgTaskWide();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugPlmClient3Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugPlmClient3Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugPlmClient3Vtbl {
        unsafe extern "system" fn LaunchPlmPackageForDebugWide<Impl: IDebugPlmClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, timeout: u32, packagefullname: super::super::super::Foundation::PWSTR, appname: super::super::super::Foundation::PWSTR, arguments: super::super::super::Foundation::PWSTR, processid: *mut u32, threadid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn LaunchPlmBgTaskForDebugWide<Impl: IDebugPlmClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, timeout: u32, packagefullname: super::super::super::Foundation::PWSTR, backgroundtaskid: super::super::super::Foundation::PWSTR, processid: *mut u32, threadid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn QueryPlmPackageWide<Impl: IDebugPlmClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, packagefullname: super::super::super::Foundation::PWSTR, stream: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn QueryPlmPackageList<Impl: IDebugPlmClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, stream: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnablePlmPackageDebugWide<Impl: IDebugPlmClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, packagefullname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DisablePlmPackageDebugWide<Impl: IDebugPlmClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, packagefullname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SuspendPlmPackageWide<Impl: IDebugPlmClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, packagefullname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ResumePlmPackageWide<Impl: IDebugPlmClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, packagefullname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn TerminatePlmPackageWide<Impl: IDebugPlmClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, packagefullname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn LaunchAndDebugPlmAppWide<Impl: IDebugPlmClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, packagefullname: super::super::super::Foundation::PWSTR, appname: super::super::super::Foundation::PWSTR, arguments: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ActivateAndDebugPlmBgTaskWide<Impl: IDebugPlmClient3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, packagefullname: super::super::super::Foundation::PWSTR, backgroundtaskid: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            LaunchPlmPackageForDebugWide::<Impl, IMPL_OFFSET>,
            LaunchPlmBgTaskForDebugWide::<Impl, IMPL_OFFSET>,
            QueryPlmPackageWide::<Impl, IMPL_OFFSET>,
            QueryPlmPackageList::<Impl, IMPL_OFFSET>,
            EnablePlmPackageDebugWide::<Impl, IMPL_OFFSET>,
            DisablePlmPackageDebugWide::<Impl, IMPL_OFFSET>,
            SuspendPlmPackageWide::<Impl, IMPL_OFFSET>,
            ResumePlmPackageWide::<Impl, IMPL_OFFSET>,
            TerminatePlmPackageWide::<Impl, IMPL_OFFSET>,
            LaunchAndDebugPlmAppWide::<Impl, IMPL_OFFSET>,
            ActivateAndDebugPlmBgTaskWide::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugPlmClient3 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IDebugPropertyImpl: Sized {
    fn GetPropertyInfo();
    fn GetExtendedInfo();
    fn SetValueAsString();
    fn EnumMembers();
    fn GetParent();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IDebugPropertyVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugPropertyImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugPropertyVtbl {
        unsafe extern "system" fn GetPropertyInfo<Impl: IDebugPropertyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwfieldspec: u32, nradix: u32, ppropertyinfo: *mut DebugPropertyInfo) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExtendedInfo<Impl: IDebugPropertyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, cinfos: u32, rgguidextendedinfo: *const ::windows::core::GUID, rgvar: *mut super::super::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetValueAsString<Impl: IDebugPropertyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszvalue: super::super::super::Foundation::PWSTR, nradix: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnumMembers<Impl: IDebugPropertyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwfieldspec: u32, nradix: u32, refiid: *const ::windows::core::GUID, ppepi: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetParent<Impl: IDebugPropertyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppdebugprop: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetPropertyInfo::<Impl, IMPL_OFFSET>, GetExtendedInfo::<Impl, IMPL_OFFSET>, SetValueAsString::<Impl, IMPL_OFFSET>, EnumMembers::<Impl, IMPL_OFFSET>, GetParent::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugProperty as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugPropertyEnumType_AllImpl: Sized {
    fn GetName();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugPropertyEnumType_AllVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugPropertyEnumType_AllImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugPropertyEnumType_AllVtbl {
        unsafe extern "system" fn GetName<Impl: IDebugPropertyEnumType_AllImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, __midl__idebugpropertyenumtype_all0000: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetName::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugPropertyEnumType_All as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugPropertyEnumType_ArgumentsImpl: Sized + IDebugPropertyEnumType_AllImpl {}
#[cfg(feature = "Win32_Foundation")]
impl IDebugPropertyEnumType_ArgumentsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugPropertyEnumType_ArgumentsImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugPropertyEnumType_ArgumentsVtbl {
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetName::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugPropertyEnumType_Arguments as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugPropertyEnumType_LocalsImpl: Sized + IDebugPropertyEnumType_AllImpl {}
#[cfg(feature = "Win32_Foundation")]
impl IDebugPropertyEnumType_LocalsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugPropertyEnumType_LocalsImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugPropertyEnumType_LocalsVtbl {
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetName::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugPropertyEnumType_Locals as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugPropertyEnumType_LocalsPlusArgsImpl: Sized + IDebugPropertyEnumType_AllImpl {}
#[cfg(feature = "Win32_Foundation")]
impl IDebugPropertyEnumType_LocalsPlusArgsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugPropertyEnumType_LocalsPlusArgsImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugPropertyEnumType_LocalsPlusArgsVtbl {
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetName::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugPropertyEnumType_LocalsPlusArgs as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugPropertyEnumType_RegistersImpl: Sized + IDebugPropertyEnumType_AllImpl {}
#[cfg(feature = "Win32_Foundation")]
impl IDebugPropertyEnumType_RegistersVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugPropertyEnumType_RegistersImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugPropertyEnumType_RegistersVtbl {
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetName::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugPropertyEnumType_Registers as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugRegistersImpl: Sized {
    fn GetNumberRegisters();
    fn GetDescription();
    fn GetIndexByName();
    fn GetValue();
    fn SetValue();
    fn GetValues();
    fn SetValues();
    fn OutputRegisters();
    fn GetInstructionOffset();
    fn GetStackOffset();
    fn GetFrameOffset();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugRegistersVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugRegistersImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugRegistersVtbl {
        unsafe extern "system" fn GetNumberRegisters<Impl: IDebugRegistersImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDescription<Impl: IDebugRegistersImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, register: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, desc: *mut DEBUG_REGISTER_DESCRIPTION) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetIndexByName<Impl: IDebugRegistersImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PSTR, index: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetValue<Impl: IDebugRegistersImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, register: u32, value: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetValue<Impl: IDebugRegistersImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, register: u32, value: *const DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetValues<Impl: IDebugRegistersImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, indices: *const u32, start: u32, values: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetValues<Impl: IDebugRegistersImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, indices: *const u32, start: u32, values: *const DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputRegisters<Impl: IDebugRegistersImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetInstructionOffset<Impl: IDebugRegistersImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetStackOffset<Impl: IDebugRegistersImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFrameOffset<Impl: IDebugRegistersImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetNumberRegisters::<Impl, IMPL_OFFSET>,
            GetDescription::<Impl, IMPL_OFFSET>,
            GetIndexByName::<Impl, IMPL_OFFSET>,
            GetValue::<Impl, IMPL_OFFSET>,
            SetValue::<Impl, IMPL_OFFSET>,
            GetValues::<Impl, IMPL_OFFSET>,
            SetValues::<Impl, IMPL_OFFSET>,
            OutputRegisters::<Impl, IMPL_OFFSET>,
            GetInstructionOffset::<Impl, IMPL_OFFSET>,
            GetStackOffset::<Impl, IMPL_OFFSET>,
            GetFrameOffset::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugRegisters as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugRegisters2Impl: Sized {
    fn GetNumberRegisters();
    fn GetDescription();
    fn GetIndexByName();
    fn GetValue();
    fn SetValue();
    fn GetValues();
    fn SetValues();
    fn OutputRegisters();
    fn GetInstructionOffset();
    fn GetStackOffset();
    fn GetFrameOffset();
    fn GetDescriptionWide();
    fn GetIndexByNameWide();
    fn GetNumberPseudoRegisters();
    fn GetPseudoDescription();
    fn GetPseudoDescriptionWide();
    fn GetPseudoIndexByName();
    fn GetPseudoIndexByNameWide();
    fn GetPseudoValues();
    fn SetPseudoValues();
    fn GetValues2();
    fn SetValues2();
    fn OutputRegisters2();
    fn GetInstructionOffset2();
    fn GetStackOffset2();
    fn GetFrameOffset2();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugRegisters2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugRegisters2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugRegisters2Vtbl {
        unsafe extern "system" fn GetNumberRegisters<Impl: IDebugRegisters2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDescription<Impl: IDebugRegisters2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, register: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, desc: *mut DEBUG_REGISTER_DESCRIPTION) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetIndexByName<Impl: IDebugRegisters2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PSTR, index: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetValue<Impl: IDebugRegisters2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, register: u32, value: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetValue<Impl: IDebugRegisters2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, register: u32, value: *const DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetValues<Impl: IDebugRegisters2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, indices: *const u32, start: u32, values: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetValues<Impl: IDebugRegisters2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, indices: *const u32, start: u32, values: *const DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputRegisters<Impl: IDebugRegisters2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetInstructionOffset<Impl: IDebugRegisters2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetStackOffset<Impl: IDebugRegisters2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFrameOffset<Impl: IDebugRegisters2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDescriptionWide<Impl: IDebugRegisters2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, register: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, desc: *mut DEBUG_REGISTER_DESCRIPTION) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetIndexByNameWide<Impl: IDebugRegisters2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PWSTR, index: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberPseudoRegisters<Impl: IDebugRegisters2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPseudoDescription<Impl: IDebugRegisters2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, register: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, typemodule: *mut u64, typeid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPseudoDescriptionWide<Impl: IDebugRegisters2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, register: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, typemodule: *mut u64, typeid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPseudoIndexByName<Impl: IDebugRegisters2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PSTR, index: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPseudoIndexByNameWide<Impl: IDebugRegisters2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PWSTR, index: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPseudoValues<Impl: IDebugRegisters2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, source: u32, count: u32, indices: *const u32, start: u32, values: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetPseudoValues<Impl: IDebugRegisters2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, source: u32, count: u32, indices: *const u32, start: u32, values: *const DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetValues2<Impl: IDebugRegisters2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, source: u32, count: u32, indices: *const u32, start: u32, values: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetValues2<Impl: IDebugRegisters2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, source: u32, count: u32, indices: *const u32, start: u32, values: *const DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputRegisters2<Impl: IDebugRegisters2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, source: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetInstructionOffset2<Impl: IDebugRegisters2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, source: u32, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetStackOffset2<Impl: IDebugRegisters2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, source: u32, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFrameOffset2<Impl: IDebugRegisters2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, source: u32, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetNumberRegisters::<Impl, IMPL_OFFSET>,
            GetDescription::<Impl, IMPL_OFFSET>,
            GetIndexByName::<Impl, IMPL_OFFSET>,
            GetValue::<Impl, IMPL_OFFSET>,
            SetValue::<Impl, IMPL_OFFSET>,
            GetValues::<Impl, IMPL_OFFSET>,
            SetValues::<Impl, IMPL_OFFSET>,
            OutputRegisters::<Impl, IMPL_OFFSET>,
            GetInstructionOffset::<Impl, IMPL_OFFSET>,
            GetStackOffset::<Impl, IMPL_OFFSET>,
            GetFrameOffset::<Impl, IMPL_OFFSET>,
            GetDescriptionWide::<Impl, IMPL_OFFSET>,
            GetIndexByNameWide::<Impl, IMPL_OFFSET>,
            GetNumberPseudoRegisters::<Impl, IMPL_OFFSET>,
            GetPseudoDescription::<Impl, IMPL_OFFSET>,
            GetPseudoDescriptionWide::<Impl, IMPL_OFFSET>,
            GetPseudoIndexByName::<Impl, IMPL_OFFSET>,
            GetPseudoIndexByNameWide::<Impl, IMPL_OFFSET>,
            GetPseudoValues::<Impl, IMPL_OFFSET>,
            SetPseudoValues::<Impl, IMPL_OFFSET>,
            GetValues2::<Impl, IMPL_OFFSET>,
            SetValues2::<Impl, IMPL_OFFSET>,
            OutputRegisters2::<Impl, IMPL_OFFSET>,
            GetInstructionOffset2::<Impl, IMPL_OFFSET>,
            GetStackOffset2::<Impl, IMPL_OFFSET>,
            GetFrameOffset2::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugRegisters2 as ::windows::core::Interface>::IID
    }
}
pub trait IDebugSessionProviderImpl: Sized {
    fn StartDebugSession();
}
impl IDebugSessionProviderVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugSessionProviderImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugSessionProviderVtbl {
        unsafe extern "system" fn StartDebugSession<Impl: IDebugSessionProviderImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pda: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, StartDebugSession::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugSessionProvider as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugStackFrameImpl: Sized {
    fn GetCodeContext();
    fn GetDescriptionString();
    fn GetLanguageString();
    fn GetThread();
    fn GetDebugProperty();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugStackFrameVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugStackFrameImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugStackFrameVtbl {
        unsafe extern "system" fn GetCodeContext<Impl: IDebugStackFrameImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppcc: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDescriptionString<Impl: IDebugStackFrameImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flong: super::super::super::Foundation::BOOL, pbstrdescription: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLanguageString<Impl: IDebugStackFrameImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flong: super::super::super::Foundation::BOOL, pbstrlanguage: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetThread<Impl: IDebugStackFrameImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppat: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDebugProperty<Impl: IDebugStackFrameImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppdebugprop: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetCodeContext::<Impl, IMPL_OFFSET>, GetDescriptionString::<Impl, IMPL_OFFSET>, GetLanguageString::<Impl, IMPL_OFFSET>, GetThread::<Impl, IMPL_OFFSET>, GetDebugProperty::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugStackFrame as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugStackFrame110Impl: Sized + IDebugStackFrameImpl {
    fn GetStackFrameType();
    fn GetScriptInvocationContext();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugStackFrame110Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugStackFrame110Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugStackFrame110Vtbl {
        unsafe extern "system" fn GetStackFrameType<Impl: IDebugStackFrame110Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstackframekind: *mut DEBUG_STACKFRAME_TYPE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetScriptInvocationContext<Impl: IDebugStackFrame110Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppinvocationcontext: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetCodeContext::<Impl, IMPL_OFFSET>, GetDescriptionString::<Impl, IMPL_OFFSET>, GetLanguageString::<Impl, IMPL_OFFSET>, GetThread::<Impl, IMPL_OFFSET>, GetDebugProperty::<Impl, IMPL_OFFSET>, GetStackFrameType::<Impl, IMPL_OFFSET>, GetScriptInvocationContext::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugStackFrame110 as ::windows::core::Interface>::IID
    }
}
pub trait IDebugStackFrameSnifferImpl: Sized {
    fn EnumStackFrames();
}
impl IDebugStackFrameSnifferVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugStackFrameSnifferImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugStackFrameSnifferVtbl {
        unsafe extern "system" fn EnumStackFrames<Impl: IDebugStackFrameSnifferImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppedsf: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, EnumStackFrames::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugStackFrameSniffer as ::windows::core::Interface>::IID
    }
}
pub trait IDebugStackFrameSnifferEx32Impl: Sized + IDebugStackFrameSnifferImpl {
    fn EnumStackFramesEx32();
}
impl IDebugStackFrameSnifferEx32Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugStackFrameSnifferEx32Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugStackFrameSnifferEx32Vtbl {
        unsafe extern "system" fn EnumStackFramesEx32<Impl: IDebugStackFrameSnifferEx32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwspmin: u32, ppedsf: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, EnumStackFrames::<Impl, IMPL_OFFSET>, EnumStackFramesEx32::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugStackFrameSnifferEx32 as ::windows::core::Interface>::IID
    }
}
pub trait IDebugStackFrameSnifferEx64Impl: Sized + IDebugStackFrameSnifferImpl {
    fn EnumStackFramesEx64();
}
impl IDebugStackFrameSnifferEx64Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugStackFrameSnifferEx64Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugStackFrameSnifferEx64Vtbl {
        unsafe extern "system" fn EnumStackFramesEx64<Impl: IDebugStackFrameSnifferEx64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwspmin: u64, ppedsf: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, EnumStackFrames::<Impl, IMPL_OFFSET>, EnumStackFramesEx64::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugStackFrameSnifferEx64 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugSymbolGroupImpl: Sized {
    fn GetNumberSymbols();
    fn AddSymbol();
    fn RemoveSymbolByName();
    fn RemoveSymbolByIndex();
    fn GetSymbolName();
    fn GetSymbolParameters();
    fn ExpandSymbol();
    fn OutputSymbols();
    fn WriteSymbol();
    fn OutputAsType();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugSymbolGroupVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugSymbolGroupImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugSymbolGroupVtbl {
        unsafe extern "system" fn GetNumberSymbols<Impl: IDebugSymbolGroupImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddSymbol<Impl: IDebugSymbolGroupImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PSTR, index: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveSymbolByName<Impl: IDebugSymbolGroupImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveSymbolByIndex<Impl: IDebugSymbolGroupImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolName<Impl: IDebugSymbolGroupImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolParameters<Impl: IDebugSymbolGroupImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *mut DEBUG_SYMBOL_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ExpandSymbol<Impl: IDebugSymbolGroupImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, expand: super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputSymbols<Impl: IDebugSymbolGroupImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, start: u32, count: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteSymbol<Impl: IDebugSymbolGroupImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, value: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputAsType<Impl: IDebugSymbolGroupImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, r#type: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetNumberSymbols::<Impl, IMPL_OFFSET>,
            AddSymbol::<Impl, IMPL_OFFSET>,
            RemoveSymbolByName::<Impl, IMPL_OFFSET>,
            RemoveSymbolByIndex::<Impl, IMPL_OFFSET>,
            GetSymbolName::<Impl, IMPL_OFFSET>,
            GetSymbolParameters::<Impl, IMPL_OFFSET>,
            ExpandSymbol::<Impl, IMPL_OFFSET>,
            OutputSymbols::<Impl, IMPL_OFFSET>,
            WriteSymbol::<Impl, IMPL_OFFSET>,
            OutputAsType::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugSymbolGroup as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugSymbolGroup2Impl: Sized {
    fn GetNumberSymbols();
    fn AddSymbol();
    fn RemoveSymbolByName();
    fn RemoveSymbolByIndex();
    fn GetSymbolName();
    fn GetSymbolParameters();
    fn ExpandSymbol();
    fn OutputSymbols();
    fn WriteSymbol();
    fn OutputAsType();
    fn AddSymbolWide();
    fn RemoveSymbolByNameWide();
    fn GetSymbolNameWide();
    fn WriteSymbolWide();
    fn OutputAsTypeWide();
    fn GetSymbolTypeName();
    fn GetSymbolTypeNameWide();
    fn GetSymbolSize();
    fn GetSymbolOffset();
    fn GetSymbolRegister();
    fn GetSymbolValueText();
    fn GetSymbolValueTextWide();
    fn GetSymbolEntryInformation();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugSymbolGroup2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugSymbolGroup2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugSymbolGroup2Vtbl {
        unsafe extern "system" fn GetNumberSymbols<Impl: IDebugSymbolGroup2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddSymbol<Impl: IDebugSymbolGroup2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PSTR, index: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveSymbolByName<Impl: IDebugSymbolGroup2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveSymbolByIndex<Impl: IDebugSymbolGroup2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolName<Impl: IDebugSymbolGroup2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolParameters<Impl: IDebugSymbolGroup2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *mut DEBUG_SYMBOL_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ExpandSymbol<Impl: IDebugSymbolGroup2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, expand: super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputSymbols<Impl: IDebugSymbolGroup2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, start: u32, count: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteSymbol<Impl: IDebugSymbolGroup2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, value: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputAsType<Impl: IDebugSymbolGroup2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, r#type: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddSymbolWide<Impl: IDebugSymbolGroup2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PWSTR, index: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveSymbolByNameWide<Impl: IDebugSymbolGroup2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolNameWide<Impl: IDebugSymbolGroup2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteSymbolWide<Impl: IDebugSymbolGroup2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, value: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputAsTypeWide<Impl: IDebugSymbolGroup2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, r#type: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolTypeName<Impl: IDebugSymbolGroup2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolTypeNameWide<Impl: IDebugSymbolGroup2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolSize<Impl: IDebugSymbolGroup2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, size: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolOffset<Impl: IDebugSymbolGroup2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolRegister<Impl: IDebugSymbolGroup2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, register: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolValueText<Impl: IDebugSymbolGroup2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolValueTextWide<Impl: IDebugSymbolGroup2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolEntryInformation<Impl: IDebugSymbolGroup2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, entry: *mut DEBUG_SYMBOL_ENTRY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetNumberSymbols::<Impl, IMPL_OFFSET>,
            AddSymbol::<Impl, IMPL_OFFSET>,
            RemoveSymbolByName::<Impl, IMPL_OFFSET>,
            RemoveSymbolByIndex::<Impl, IMPL_OFFSET>,
            GetSymbolName::<Impl, IMPL_OFFSET>,
            GetSymbolParameters::<Impl, IMPL_OFFSET>,
            ExpandSymbol::<Impl, IMPL_OFFSET>,
            OutputSymbols::<Impl, IMPL_OFFSET>,
            WriteSymbol::<Impl, IMPL_OFFSET>,
            OutputAsType::<Impl, IMPL_OFFSET>,
            AddSymbolWide::<Impl, IMPL_OFFSET>,
            RemoveSymbolByNameWide::<Impl, IMPL_OFFSET>,
            GetSymbolNameWide::<Impl, IMPL_OFFSET>,
            WriteSymbolWide::<Impl, IMPL_OFFSET>,
            OutputAsTypeWide::<Impl, IMPL_OFFSET>,
            GetSymbolTypeName::<Impl, IMPL_OFFSET>,
            GetSymbolTypeNameWide::<Impl, IMPL_OFFSET>,
            GetSymbolSize::<Impl, IMPL_OFFSET>,
            GetSymbolOffset::<Impl, IMPL_OFFSET>,
            GetSymbolRegister::<Impl, IMPL_OFFSET>,
            GetSymbolValueText::<Impl, IMPL_OFFSET>,
            GetSymbolValueTextWide::<Impl, IMPL_OFFSET>,
            GetSymbolEntryInformation::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugSymbolGroup2 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugSymbolsImpl: Sized {
    fn GetSymbolOptions();
    fn AddSymbolOptions();
    fn RemoveSymbolOptions();
    fn SetSymbolOptions();
    fn GetNameByOffset();
    fn GetOffsetByName();
    fn GetNearNameByOffset();
    fn GetLineByOffset();
    fn GetOffsetByLine();
    fn GetNumberModules();
    fn GetModuleByIndex();
    fn GetModuleByModuleName();
    fn GetModuleByOffset();
    fn GetModuleNames();
    fn GetModuleParameters();
    fn GetSymbolModule();
    fn GetTypeName();
    fn GetTypeId();
    fn GetTypeSize();
    fn GetFieldOffset();
    fn GetSymbolTypeId();
    fn GetOffsetTypeId();
    fn ReadTypedDataVirtual();
    fn WriteTypedDataVirtual();
    fn OutputTypedDataVirtual();
    fn ReadTypedDataPhysical();
    fn WriteTypedDataPhysical();
    fn OutputTypedDataPhysical();
    fn GetScope();
    fn SetScope();
    fn ResetScope();
    fn GetScopeSymbolGroup();
    fn CreateSymbolGroup();
    fn StartSymbolMatch();
    fn GetNextSymbolMatch();
    fn EndSymbolMatch();
    fn Reload();
    fn GetSymbolPath();
    fn SetSymbolPath();
    fn AppendSymbolPath();
    fn GetImagePath();
    fn SetImagePath();
    fn AppendImagePath();
    fn GetSourcePath();
    fn GetSourcePathElement();
    fn SetSourcePath();
    fn AppendSourcePath();
    fn FindSourceFile();
    fn GetSourceFileLineOffsets();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugSymbolsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugSymbolsImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugSymbolsVtbl {
        unsafe extern "system" fn GetSymbolOptions<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddSymbolOptions<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveSymbolOptions<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSymbolOptions<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNameByOffset<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOffsetByName<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PSTR, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNearNameByOffset<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLineByOffset<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, line: *mut u32, filebuffer: super::super::super::Foundation::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOffsetByLine<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, line: u32, file: super::super::super::Foundation::PSTR, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberModules<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, loaded: *mut u32, unloaded: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModuleByIndex<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModuleByModuleName<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModuleByOffset<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModuleNames<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, base: u64, imagenamebuffer: super::super::super::Foundation::PSTR, imagenamebuffersize: u32, imagenamesize: *mut u32, modulenamebuffer: super::super::super::Foundation::PSTR, modulenamebuffersize: u32, modulenamesize: *mut u32, loadedimagenamebuffer: super::super::super::Foundation::PSTR, loadedimagenamebuffersize: u32, loadedimagenamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModuleParameters<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, bases: *const u64, start: u32, params: *mut DEBUG_MODULE_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolModule<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PSTR, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTypeName<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTypeId<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, name: super::super::super::Foundation::PSTR, typeid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTypeSize<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, size: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFieldOffset<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, field: super::super::super::Foundation::PSTR, offset: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolTypeId<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PSTR, typeid: *mut u32, module: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOffsetTypeId<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, typeid: *mut u32, module: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadTypedDataVirtual<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteTypedDataVirtual<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputTypedDataVirtual<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadTypedDataPhysical<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteTypedDataPhysical<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputTypedDataPhysical<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetScope<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME, scopecontext: *mut ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetScope<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME, scopecontext: *const ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ResetScope<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetScopeSymbolGroup<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, update: ::windows::core::RawPtr, symbols: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateSymbolGroup<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, group: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StartSymbolMatch<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pattern: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNextSymbolMatch<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, buffer: super::super::super::Foundation::PSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EndSymbolMatch<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Reload<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolPath<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSymbolPath<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AppendSymbolPath<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetImagePath<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetImagePath<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AppendImagePath<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourcePath<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourcePathElement<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, elementsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSourcePath<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AppendSourcePath<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FindSourceFile<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, startelement: u32, file: super::super::super::Foundation::PSTR, flags: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourceFileLineOffsets<Impl: IDebugSymbolsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetSymbolOptions::<Impl, IMPL_OFFSET>,
            AddSymbolOptions::<Impl, IMPL_OFFSET>,
            RemoveSymbolOptions::<Impl, IMPL_OFFSET>,
            SetSymbolOptions::<Impl, IMPL_OFFSET>,
            GetNameByOffset::<Impl, IMPL_OFFSET>,
            GetOffsetByName::<Impl, IMPL_OFFSET>,
            GetNearNameByOffset::<Impl, IMPL_OFFSET>,
            GetLineByOffset::<Impl, IMPL_OFFSET>,
            GetOffsetByLine::<Impl, IMPL_OFFSET>,
            GetNumberModules::<Impl, IMPL_OFFSET>,
            GetModuleByIndex::<Impl, IMPL_OFFSET>,
            GetModuleByModuleName::<Impl, IMPL_OFFSET>,
            GetModuleByOffset::<Impl, IMPL_OFFSET>,
            GetModuleNames::<Impl, IMPL_OFFSET>,
            GetModuleParameters::<Impl, IMPL_OFFSET>,
            GetSymbolModule::<Impl, IMPL_OFFSET>,
            GetTypeName::<Impl, IMPL_OFFSET>,
            GetTypeId::<Impl, IMPL_OFFSET>,
            GetTypeSize::<Impl, IMPL_OFFSET>,
            GetFieldOffset::<Impl, IMPL_OFFSET>,
            GetSymbolTypeId::<Impl, IMPL_OFFSET>,
            GetOffsetTypeId::<Impl, IMPL_OFFSET>,
            ReadTypedDataVirtual::<Impl, IMPL_OFFSET>,
            WriteTypedDataVirtual::<Impl, IMPL_OFFSET>,
            OutputTypedDataVirtual::<Impl, IMPL_OFFSET>,
            ReadTypedDataPhysical::<Impl, IMPL_OFFSET>,
            WriteTypedDataPhysical::<Impl, IMPL_OFFSET>,
            OutputTypedDataPhysical::<Impl, IMPL_OFFSET>,
            GetScope::<Impl, IMPL_OFFSET>,
            SetScope::<Impl, IMPL_OFFSET>,
            ResetScope::<Impl, IMPL_OFFSET>,
            GetScopeSymbolGroup::<Impl, IMPL_OFFSET>,
            CreateSymbolGroup::<Impl, IMPL_OFFSET>,
            StartSymbolMatch::<Impl, IMPL_OFFSET>,
            GetNextSymbolMatch::<Impl, IMPL_OFFSET>,
            EndSymbolMatch::<Impl, IMPL_OFFSET>,
            Reload::<Impl, IMPL_OFFSET>,
            GetSymbolPath::<Impl, IMPL_OFFSET>,
            SetSymbolPath::<Impl, IMPL_OFFSET>,
            AppendSymbolPath::<Impl, IMPL_OFFSET>,
            GetImagePath::<Impl, IMPL_OFFSET>,
            SetImagePath::<Impl, IMPL_OFFSET>,
            AppendImagePath::<Impl, IMPL_OFFSET>,
            GetSourcePath::<Impl, IMPL_OFFSET>,
            GetSourcePathElement::<Impl, IMPL_OFFSET>,
            SetSourcePath::<Impl, IMPL_OFFSET>,
            AppendSourcePath::<Impl, IMPL_OFFSET>,
            FindSourceFile::<Impl, IMPL_OFFSET>,
            GetSourceFileLineOffsets::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugSymbols as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugSymbols2Impl: Sized {
    fn GetSymbolOptions();
    fn AddSymbolOptions();
    fn RemoveSymbolOptions();
    fn SetSymbolOptions();
    fn GetNameByOffset();
    fn GetOffsetByName();
    fn GetNearNameByOffset();
    fn GetLineByOffset();
    fn GetOffsetByLine();
    fn GetNumberModules();
    fn GetModuleByIndex();
    fn GetModuleByModuleName();
    fn GetModuleByOffset();
    fn GetModuleNames();
    fn GetModuleParameters();
    fn GetSymbolModule();
    fn GetTypeName();
    fn GetTypeId();
    fn GetTypeSize();
    fn GetFieldOffset();
    fn GetSymbolTypeId();
    fn GetOffsetTypeId();
    fn ReadTypedDataVirtual();
    fn WriteTypedDataVirtual();
    fn OutputTypedDataVirtual();
    fn ReadTypedDataPhysical();
    fn WriteTypedDataPhysical();
    fn OutputTypedDataPhysical();
    fn GetScope();
    fn SetScope();
    fn ResetScope();
    fn GetScopeSymbolGroup();
    fn CreateSymbolGroup();
    fn StartSymbolMatch();
    fn GetNextSymbolMatch();
    fn EndSymbolMatch();
    fn Reload();
    fn GetSymbolPath();
    fn SetSymbolPath();
    fn AppendSymbolPath();
    fn GetImagePath();
    fn SetImagePath();
    fn AppendImagePath();
    fn GetSourcePath();
    fn GetSourcePathElement();
    fn SetSourcePath();
    fn AppendSourcePath();
    fn FindSourceFile();
    fn GetSourceFileLineOffsets();
    fn GetModuleVersionInformation();
    fn GetModuleNameString();
    fn GetConstantName();
    fn GetFieldName();
    fn GetTypeOptions();
    fn AddTypeOptions();
    fn RemoveTypeOptions();
    fn SetTypeOptions();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugSymbols2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugSymbols2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugSymbols2Vtbl {
        unsafe extern "system" fn GetSymbolOptions<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddSymbolOptions<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveSymbolOptions<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSymbolOptions<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNameByOffset<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOffsetByName<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PSTR, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNearNameByOffset<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLineByOffset<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, line: *mut u32, filebuffer: super::super::super::Foundation::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOffsetByLine<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, line: u32, file: super::super::super::Foundation::PSTR, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberModules<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, loaded: *mut u32, unloaded: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModuleByIndex<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModuleByModuleName<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModuleByOffset<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModuleNames<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, base: u64, imagenamebuffer: super::super::super::Foundation::PSTR, imagenamebuffersize: u32, imagenamesize: *mut u32, modulenamebuffer: super::super::super::Foundation::PSTR, modulenamebuffersize: u32, modulenamesize: *mut u32, loadedimagenamebuffer: super::super::super::Foundation::PSTR, loadedimagenamebuffersize: u32, loadedimagenamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModuleParameters<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, bases: *const u64, start: u32, params: *mut DEBUG_MODULE_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolModule<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PSTR, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTypeName<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTypeId<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, name: super::super::super::Foundation::PSTR, typeid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTypeSize<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, size: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFieldOffset<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, field: super::super::super::Foundation::PSTR, offset: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolTypeId<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PSTR, typeid: *mut u32, module: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOffsetTypeId<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, typeid: *mut u32, module: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadTypedDataVirtual<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteTypedDataVirtual<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputTypedDataVirtual<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadTypedDataPhysical<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteTypedDataPhysical<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputTypedDataPhysical<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetScope<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME, scopecontext: *mut ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetScope<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME, scopecontext: *const ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ResetScope<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetScopeSymbolGroup<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, update: ::windows::core::RawPtr, symbols: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateSymbolGroup<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, group: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StartSymbolMatch<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pattern: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNextSymbolMatch<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, buffer: super::super::super::Foundation::PSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EndSymbolMatch<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Reload<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolPath<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSymbolPath<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AppendSymbolPath<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetImagePath<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetImagePath<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AppendImagePath<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourcePath<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourcePathElement<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, elementsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSourcePath<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AppendSourcePath<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FindSourceFile<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, startelement: u32, file: super::super::super::Foundation::PSTR, flags: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourceFileLineOffsets<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModuleVersionInformation<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, base: u64, item: super::super::super::Foundation::PSTR, buffer: *mut ::core::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModuleNameString<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, index: u32, base: u64, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetConstantName<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, value: u64, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFieldName<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, fieldindex: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTypeOptions<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddTypeOptions<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveTypeOptions<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTypeOptions<Impl: IDebugSymbols2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetSymbolOptions::<Impl, IMPL_OFFSET>,
            AddSymbolOptions::<Impl, IMPL_OFFSET>,
            RemoveSymbolOptions::<Impl, IMPL_OFFSET>,
            SetSymbolOptions::<Impl, IMPL_OFFSET>,
            GetNameByOffset::<Impl, IMPL_OFFSET>,
            GetOffsetByName::<Impl, IMPL_OFFSET>,
            GetNearNameByOffset::<Impl, IMPL_OFFSET>,
            GetLineByOffset::<Impl, IMPL_OFFSET>,
            GetOffsetByLine::<Impl, IMPL_OFFSET>,
            GetNumberModules::<Impl, IMPL_OFFSET>,
            GetModuleByIndex::<Impl, IMPL_OFFSET>,
            GetModuleByModuleName::<Impl, IMPL_OFFSET>,
            GetModuleByOffset::<Impl, IMPL_OFFSET>,
            GetModuleNames::<Impl, IMPL_OFFSET>,
            GetModuleParameters::<Impl, IMPL_OFFSET>,
            GetSymbolModule::<Impl, IMPL_OFFSET>,
            GetTypeName::<Impl, IMPL_OFFSET>,
            GetTypeId::<Impl, IMPL_OFFSET>,
            GetTypeSize::<Impl, IMPL_OFFSET>,
            GetFieldOffset::<Impl, IMPL_OFFSET>,
            GetSymbolTypeId::<Impl, IMPL_OFFSET>,
            GetOffsetTypeId::<Impl, IMPL_OFFSET>,
            ReadTypedDataVirtual::<Impl, IMPL_OFFSET>,
            WriteTypedDataVirtual::<Impl, IMPL_OFFSET>,
            OutputTypedDataVirtual::<Impl, IMPL_OFFSET>,
            ReadTypedDataPhysical::<Impl, IMPL_OFFSET>,
            WriteTypedDataPhysical::<Impl, IMPL_OFFSET>,
            OutputTypedDataPhysical::<Impl, IMPL_OFFSET>,
            GetScope::<Impl, IMPL_OFFSET>,
            SetScope::<Impl, IMPL_OFFSET>,
            ResetScope::<Impl, IMPL_OFFSET>,
            GetScopeSymbolGroup::<Impl, IMPL_OFFSET>,
            CreateSymbolGroup::<Impl, IMPL_OFFSET>,
            StartSymbolMatch::<Impl, IMPL_OFFSET>,
            GetNextSymbolMatch::<Impl, IMPL_OFFSET>,
            EndSymbolMatch::<Impl, IMPL_OFFSET>,
            Reload::<Impl, IMPL_OFFSET>,
            GetSymbolPath::<Impl, IMPL_OFFSET>,
            SetSymbolPath::<Impl, IMPL_OFFSET>,
            AppendSymbolPath::<Impl, IMPL_OFFSET>,
            GetImagePath::<Impl, IMPL_OFFSET>,
            SetImagePath::<Impl, IMPL_OFFSET>,
            AppendImagePath::<Impl, IMPL_OFFSET>,
            GetSourcePath::<Impl, IMPL_OFFSET>,
            GetSourcePathElement::<Impl, IMPL_OFFSET>,
            SetSourcePath::<Impl, IMPL_OFFSET>,
            AppendSourcePath::<Impl, IMPL_OFFSET>,
            FindSourceFile::<Impl, IMPL_OFFSET>,
            GetSourceFileLineOffsets::<Impl, IMPL_OFFSET>,
            GetModuleVersionInformation::<Impl, IMPL_OFFSET>,
            GetModuleNameString::<Impl, IMPL_OFFSET>,
            GetConstantName::<Impl, IMPL_OFFSET>,
            GetFieldName::<Impl, IMPL_OFFSET>,
            GetTypeOptions::<Impl, IMPL_OFFSET>,
            AddTypeOptions::<Impl, IMPL_OFFSET>,
            RemoveTypeOptions::<Impl, IMPL_OFFSET>,
            SetTypeOptions::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugSymbols2 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugSymbols3Impl: Sized {
    fn GetSymbolOptions();
    fn AddSymbolOptions();
    fn RemoveSymbolOptions();
    fn SetSymbolOptions();
    fn GetNameByOffset();
    fn GetOffsetByName();
    fn GetNearNameByOffset();
    fn GetLineByOffset();
    fn GetOffsetByLine();
    fn GetNumberModules();
    fn GetModuleByIndex();
    fn GetModuleByModuleName();
    fn GetModuleByOffset();
    fn GetModuleNames();
    fn GetModuleParameters();
    fn GetSymbolModule();
    fn GetTypeName();
    fn GetTypeId();
    fn GetTypeSize();
    fn GetFieldOffset();
    fn GetSymbolTypeId();
    fn GetOffsetTypeId();
    fn ReadTypedDataVirtual();
    fn WriteTypedDataVirtual();
    fn OutputTypedDataVirtual();
    fn ReadTypedDataPhysical();
    fn WriteTypedDataPhysical();
    fn OutputTypedDataPhysical();
    fn GetScope();
    fn SetScope();
    fn ResetScope();
    fn GetScopeSymbolGroup();
    fn CreateSymbolGroup();
    fn StartSymbolMatch();
    fn GetNextSymbolMatch();
    fn EndSymbolMatch();
    fn Reload();
    fn GetSymbolPath();
    fn SetSymbolPath();
    fn AppendSymbolPath();
    fn GetImagePath();
    fn SetImagePath();
    fn AppendImagePath();
    fn GetSourcePath();
    fn GetSourcePathElement();
    fn SetSourcePath();
    fn AppendSourcePath();
    fn FindSourceFile();
    fn GetSourceFileLineOffsets();
    fn GetModuleVersionInformation();
    fn GetModuleNameString();
    fn GetConstantName();
    fn GetFieldName();
    fn GetTypeOptions();
    fn AddTypeOptions();
    fn RemoveTypeOptions();
    fn SetTypeOptions();
    fn GetNameByOffsetWide();
    fn GetOffsetByNameWide();
    fn GetNearNameByOffsetWide();
    fn GetLineByOffsetWide();
    fn GetOffsetByLineWide();
    fn GetModuleByModuleNameWide();
    fn GetSymbolModuleWide();
    fn GetTypeNameWide();
    fn GetTypeIdWide();
    fn GetFieldOffsetWide();
    fn GetSymbolTypeIdWide();
    fn GetScopeSymbolGroup2();
    fn CreateSymbolGroup2();
    fn StartSymbolMatchWide();
    fn GetNextSymbolMatchWide();
    fn ReloadWide();
    fn GetSymbolPathWide();
    fn SetSymbolPathWide();
    fn AppendSymbolPathWide();
    fn GetImagePathWide();
    fn SetImagePathWide();
    fn AppendImagePathWide();
    fn GetSourcePathWide();
    fn GetSourcePathElementWide();
    fn SetSourcePathWide();
    fn AppendSourcePathWide();
    fn FindSourceFileWide();
    fn GetSourceFileLineOffsetsWide();
    fn GetModuleVersionInformationWide();
    fn GetModuleNameStringWide();
    fn GetConstantNameWide();
    fn GetFieldNameWide();
    fn IsManagedModule();
    fn GetModuleByModuleName2();
    fn GetModuleByModuleName2Wide();
    fn GetModuleByOffset2();
    fn AddSyntheticModule();
    fn AddSyntheticModuleWide();
    fn RemoveSyntheticModule();
    fn GetCurrentScopeFrameIndex();
    fn SetScopeFrameByIndex();
    fn SetScopeFromJitDebugInfo();
    fn SetScopeFromStoredEvent();
    fn OutputSymbolByOffset();
    fn GetFunctionEntryByOffset();
    fn GetFieldTypeAndOffset();
    fn GetFieldTypeAndOffsetWide();
    fn AddSyntheticSymbol();
    fn AddSyntheticSymbolWide();
    fn RemoveSyntheticSymbol();
    fn GetSymbolEntriesByOffset();
    fn GetSymbolEntriesByName();
    fn GetSymbolEntriesByNameWide();
    fn GetSymbolEntryByToken();
    fn GetSymbolEntryInformation();
    fn GetSymbolEntryString();
    fn GetSymbolEntryStringWide();
    fn GetSymbolEntryOffsetRegions();
    fn GetSymbolEntryBySymbolEntry();
    fn GetSourceEntriesByOffset();
    fn GetSourceEntriesByLine();
    fn GetSourceEntriesByLineWide();
    fn GetSourceEntryString();
    fn GetSourceEntryStringWide();
    fn GetSourceEntryOffsetRegions();
    fn GetSourceEntryBySourceEntry();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugSymbols3Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugSymbols3Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugSymbols3Vtbl {
        unsafe extern "system" fn GetSymbolOptions<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddSymbolOptions<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveSymbolOptions<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSymbolOptions<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNameByOffset<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOffsetByName<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PSTR, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNearNameByOffset<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLineByOffset<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, line: *mut u32, filebuffer: super::super::super::Foundation::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOffsetByLine<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, line: u32, file: super::super::super::Foundation::PSTR, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberModules<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, loaded: *mut u32, unloaded: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModuleByIndex<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModuleByModuleName<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModuleByOffset<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModuleNames<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, base: u64, imagenamebuffer: super::super::super::Foundation::PSTR, imagenamebuffersize: u32, imagenamesize: *mut u32, modulenamebuffer: super::super::super::Foundation::PSTR, modulenamebuffersize: u32, modulenamesize: *mut u32, loadedimagenamebuffer: super::super::super::Foundation::PSTR, loadedimagenamebuffersize: u32, loadedimagenamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModuleParameters<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, bases: *const u64, start: u32, params: *mut DEBUG_MODULE_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolModule<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PSTR, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTypeName<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTypeId<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, name: super::super::super::Foundation::PSTR, typeid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTypeSize<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, size: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFieldOffset<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, field: super::super::super::Foundation::PSTR, offset: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolTypeId<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PSTR, typeid: *mut u32, module: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOffsetTypeId<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, typeid: *mut u32, module: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadTypedDataVirtual<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteTypedDataVirtual<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputTypedDataVirtual<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadTypedDataPhysical<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteTypedDataPhysical<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputTypedDataPhysical<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetScope<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME, scopecontext: *mut ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetScope<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME, scopecontext: *const ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ResetScope<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetScopeSymbolGroup<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, update: ::windows::core::RawPtr, symbols: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateSymbolGroup<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, group: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StartSymbolMatch<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pattern: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNextSymbolMatch<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, buffer: super::super::super::Foundation::PSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EndSymbolMatch<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Reload<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolPath<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSymbolPath<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AppendSymbolPath<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetImagePath<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetImagePath<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AppendImagePath<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourcePath<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourcePathElement<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, elementsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSourcePath<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AppendSourcePath<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FindSourceFile<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, startelement: u32, file: super::super::super::Foundation::PSTR, flags: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourceFileLineOffsets<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModuleVersionInformation<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, base: u64, item: super::super::super::Foundation::PSTR, buffer: *mut ::core::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModuleNameString<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, index: u32, base: u64, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetConstantName<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, value: u64, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFieldName<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, fieldindex: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTypeOptions<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddTypeOptions<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveTypeOptions<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTypeOptions<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNameByOffsetWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOffsetByNameWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PWSTR, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNearNameByOffsetWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLineByOffsetWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, line: *mut u32, filebuffer: super::super::super::Foundation::PWSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOffsetByLineWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, line: u32, file: super::super::super::Foundation::PWSTR, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModuleByModuleNameWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PWSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolModuleWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PWSTR, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTypeNameWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTypeIdWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, name: super::super::super::Foundation::PWSTR, typeid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFieldOffsetWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, field: super::super::super::Foundation::PWSTR, offset: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolTypeIdWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PWSTR, typeid: *mut u32, module: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetScopeSymbolGroup2<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, update: ::windows::core::RawPtr, symbols: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateSymbolGroup2<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, group: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StartSymbolMatchWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pattern: super::super::super::Foundation::PWSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNextSymbolMatchWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReloadWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolPathWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSymbolPathWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AppendSymbolPathWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetImagePathWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetImagePathWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AppendImagePathWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourcePathWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourcePathElementWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, elementsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSourcePathWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AppendSourcePathWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FindSourceFileWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, startelement: u32, file: super::super::super::Foundation::PWSTR, flags: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourceFileLineOffsetsWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PWSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModuleVersionInformationWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, base: u64, item: super::super::super::Foundation::PWSTR, buffer: *mut ::core::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModuleNameStringWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, index: u32, base: u64, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetConstantNameWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, value: u64, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFieldNameWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, fieldindex: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsManagedModule<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, base: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModuleByModuleName2<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PSTR, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModuleByModuleName2Wide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PWSTR, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModuleByOffset2<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddSyntheticModule<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, base: u64, size: u32, imagepath: super::super::super::Foundation::PSTR, modulename: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddSyntheticModuleWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, base: u64, size: u32, imagepath: super::super::super::Foundation::PWSTR, modulename: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveSyntheticModule<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, base: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentScopeFrameIndex<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetScopeFrameByIndex<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetScopeFromJitDebugInfo<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, infooffset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetScopeFromStoredEvent<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputSymbolByOffset<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, offset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFunctionEntryByOffset<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bufferneeded: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFieldTypeAndOffset<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, containertypeid: u32, field: super::super::super::Foundation::PSTR, fieldtypeid: *mut u32, offset: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFieldTypeAndOffsetWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, containertypeid: u32, field: super::super::super::Foundation::PWSTR, fieldtypeid: *mut u32, offset: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddSyntheticSymbol<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, size: u32, name: super::super::super::Foundation::PSTR, flags: u32, id: *mut DEBUG_MODULE_AND_ID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddSyntheticSymbolWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, size: u32, name: super::super::super::Foundation::PWSTR, flags: u32, id: *mut DEBUG_MODULE_AND_ID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveSyntheticSymbol<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolEntriesByOffset<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, displacements: *mut u64, idscount: u32, entries: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolEntriesByName<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PSTR, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, idscount: u32, entries: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolEntriesByNameWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PWSTR, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, idscount: u32, entries: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolEntryByToken<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, modulebase: u64, token: u32, id: *mut DEBUG_MODULE_AND_ID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolEntryInformation<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID, info: *mut DEBUG_SYMBOL_ENTRY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolEntryString<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolEntryStringWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolEntryOffsetRegions<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID, flags: u32, regions: *mut DEBUG_OFFSET_REGION, regionscount: u32, regionsavail: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolEntryBySymbolEntry<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fromid: *const DEBUG_MODULE_AND_ID, flags: u32, toid: *mut DEBUG_MODULE_AND_ID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourceEntriesByOffset<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourceEntriesByLine<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, line: u32, file: super::super::super::Foundation::PSTR, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourceEntriesByLineWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, line: u32, file: super::super::super::Foundation::PWSTR, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourceEntryString<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourceEntryStringWide<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourceEntryOffsetRegions<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, flags: u32, regions: *mut DEBUG_OFFSET_REGION, regionscount: u32, regionsavail: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourceEntryBySourceEntry<Impl: IDebugSymbols3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fromentry: *const DEBUG_SYMBOL_SOURCE_ENTRY, flags: u32, toentry: *mut DEBUG_SYMBOL_SOURCE_ENTRY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetSymbolOptions::<Impl, IMPL_OFFSET>,
            AddSymbolOptions::<Impl, IMPL_OFFSET>,
            RemoveSymbolOptions::<Impl, IMPL_OFFSET>,
            SetSymbolOptions::<Impl, IMPL_OFFSET>,
            GetNameByOffset::<Impl, IMPL_OFFSET>,
            GetOffsetByName::<Impl, IMPL_OFFSET>,
            GetNearNameByOffset::<Impl, IMPL_OFFSET>,
            GetLineByOffset::<Impl, IMPL_OFFSET>,
            GetOffsetByLine::<Impl, IMPL_OFFSET>,
            GetNumberModules::<Impl, IMPL_OFFSET>,
            GetModuleByIndex::<Impl, IMPL_OFFSET>,
            GetModuleByModuleName::<Impl, IMPL_OFFSET>,
            GetModuleByOffset::<Impl, IMPL_OFFSET>,
            GetModuleNames::<Impl, IMPL_OFFSET>,
            GetModuleParameters::<Impl, IMPL_OFFSET>,
            GetSymbolModule::<Impl, IMPL_OFFSET>,
            GetTypeName::<Impl, IMPL_OFFSET>,
            GetTypeId::<Impl, IMPL_OFFSET>,
            GetTypeSize::<Impl, IMPL_OFFSET>,
            GetFieldOffset::<Impl, IMPL_OFFSET>,
            GetSymbolTypeId::<Impl, IMPL_OFFSET>,
            GetOffsetTypeId::<Impl, IMPL_OFFSET>,
            ReadTypedDataVirtual::<Impl, IMPL_OFFSET>,
            WriteTypedDataVirtual::<Impl, IMPL_OFFSET>,
            OutputTypedDataVirtual::<Impl, IMPL_OFFSET>,
            ReadTypedDataPhysical::<Impl, IMPL_OFFSET>,
            WriteTypedDataPhysical::<Impl, IMPL_OFFSET>,
            OutputTypedDataPhysical::<Impl, IMPL_OFFSET>,
            GetScope::<Impl, IMPL_OFFSET>,
            SetScope::<Impl, IMPL_OFFSET>,
            ResetScope::<Impl, IMPL_OFFSET>,
            GetScopeSymbolGroup::<Impl, IMPL_OFFSET>,
            CreateSymbolGroup::<Impl, IMPL_OFFSET>,
            StartSymbolMatch::<Impl, IMPL_OFFSET>,
            GetNextSymbolMatch::<Impl, IMPL_OFFSET>,
            EndSymbolMatch::<Impl, IMPL_OFFSET>,
            Reload::<Impl, IMPL_OFFSET>,
            GetSymbolPath::<Impl, IMPL_OFFSET>,
            SetSymbolPath::<Impl, IMPL_OFFSET>,
            AppendSymbolPath::<Impl, IMPL_OFFSET>,
            GetImagePath::<Impl, IMPL_OFFSET>,
            SetImagePath::<Impl, IMPL_OFFSET>,
            AppendImagePath::<Impl, IMPL_OFFSET>,
            GetSourcePath::<Impl, IMPL_OFFSET>,
            GetSourcePathElement::<Impl, IMPL_OFFSET>,
            SetSourcePath::<Impl, IMPL_OFFSET>,
            AppendSourcePath::<Impl, IMPL_OFFSET>,
            FindSourceFile::<Impl, IMPL_OFFSET>,
            GetSourceFileLineOffsets::<Impl, IMPL_OFFSET>,
            GetModuleVersionInformation::<Impl, IMPL_OFFSET>,
            GetModuleNameString::<Impl, IMPL_OFFSET>,
            GetConstantName::<Impl, IMPL_OFFSET>,
            GetFieldName::<Impl, IMPL_OFFSET>,
            GetTypeOptions::<Impl, IMPL_OFFSET>,
            AddTypeOptions::<Impl, IMPL_OFFSET>,
            RemoveTypeOptions::<Impl, IMPL_OFFSET>,
            SetTypeOptions::<Impl, IMPL_OFFSET>,
            GetNameByOffsetWide::<Impl, IMPL_OFFSET>,
            GetOffsetByNameWide::<Impl, IMPL_OFFSET>,
            GetNearNameByOffsetWide::<Impl, IMPL_OFFSET>,
            GetLineByOffsetWide::<Impl, IMPL_OFFSET>,
            GetOffsetByLineWide::<Impl, IMPL_OFFSET>,
            GetModuleByModuleNameWide::<Impl, IMPL_OFFSET>,
            GetSymbolModuleWide::<Impl, IMPL_OFFSET>,
            GetTypeNameWide::<Impl, IMPL_OFFSET>,
            GetTypeIdWide::<Impl, IMPL_OFFSET>,
            GetFieldOffsetWide::<Impl, IMPL_OFFSET>,
            GetSymbolTypeIdWide::<Impl, IMPL_OFFSET>,
            GetScopeSymbolGroup2::<Impl, IMPL_OFFSET>,
            CreateSymbolGroup2::<Impl, IMPL_OFFSET>,
            StartSymbolMatchWide::<Impl, IMPL_OFFSET>,
            GetNextSymbolMatchWide::<Impl, IMPL_OFFSET>,
            ReloadWide::<Impl, IMPL_OFFSET>,
            GetSymbolPathWide::<Impl, IMPL_OFFSET>,
            SetSymbolPathWide::<Impl, IMPL_OFFSET>,
            AppendSymbolPathWide::<Impl, IMPL_OFFSET>,
            GetImagePathWide::<Impl, IMPL_OFFSET>,
            SetImagePathWide::<Impl, IMPL_OFFSET>,
            AppendImagePathWide::<Impl, IMPL_OFFSET>,
            GetSourcePathWide::<Impl, IMPL_OFFSET>,
            GetSourcePathElementWide::<Impl, IMPL_OFFSET>,
            SetSourcePathWide::<Impl, IMPL_OFFSET>,
            AppendSourcePathWide::<Impl, IMPL_OFFSET>,
            FindSourceFileWide::<Impl, IMPL_OFFSET>,
            GetSourceFileLineOffsetsWide::<Impl, IMPL_OFFSET>,
            GetModuleVersionInformationWide::<Impl, IMPL_OFFSET>,
            GetModuleNameStringWide::<Impl, IMPL_OFFSET>,
            GetConstantNameWide::<Impl, IMPL_OFFSET>,
            GetFieldNameWide::<Impl, IMPL_OFFSET>,
            IsManagedModule::<Impl, IMPL_OFFSET>,
            GetModuleByModuleName2::<Impl, IMPL_OFFSET>,
            GetModuleByModuleName2Wide::<Impl, IMPL_OFFSET>,
            GetModuleByOffset2::<Impl, IMPL_OFFSET>,
            AddSyntheticModule::<Impl, IMPL_OFFSET>,
            AddSyntheticModuleWide::<Impl, IMPL_OFFSET>,
            RemoveSyntheticModule::<Impl, IMPL_OFFSET>,
            GetCurrentScopeFrameIndex::<Impl, IMPL_OFFSET>,
            SetScopeFrameByIndex::<Impl, IMPL_OFFSET>,
            SetScopeFromJitDebugInfo::<Impl, IMPL_OFFSET>,
            SetScopeFromStoredEvent::<Impl, IMPL_OFFSET>,
            OutputSymbolByOffset::<Impl, IMPL_OFFSET>,
            GetFunctionEntryByOffset::<Impl, IMPL_OFFSET>,
            GetFieldTypeAndOffset::<Impl, IMPL_OFFSET>,
            GetFieldTypeAndOffsetWide::<Impl, IMPL_OFFSET>,
            AddSyntheticSymbol::<Impl, IMPL_OFFSET>,
            AddSyntheticSymbolWide::<Impl, IMPL_OFFSET>,
            RemoveSyntheticSymbol::<Impl, IMPL_OFFSET>,
            GetSymbolEntriesByOffset::<Impl, IMPL_OFFSET>,
            GetSymbolEntriesByName::<Impl, IMPL_OFFSET>,
            GetSymbolEntriesByNameWide::<Impl, IMPL_OFFSET>,
            GetSymbolEntryByToken::<Impl, IMPL_OFFSET>,
            GetSymbolEntryInformation::<Impl, IMPL_OFFSET>,
            GetSymbolEntryString::<Impl, IMPL_OFFSET>,
            GetSymbolEntryStringWide::<Impl, IMPL_OFFSET>,
            GetSymbolEntryOffsetRegions::<Impl, IMPL_OFFSET>,
            GetSymbolEntryBySymbolEntry::<Impl, IMPL_OFFSET>,
            GetSourceEntriesByOffset::<Impl, IMPL_OFFSET>,
            GetSourceEntriesByLine::<Impl, IMPL_OFFSET>,
            GetSourceEntriesByLineWide::<Impl, IMPL_OFFSET>,
            GetSourceEntryString::<Impl, IMPL_OFFSET>,
            GetSourceEntryStringWide::<Impl, IMPL_OFFSET>,
            GetSourceEntryOffsetRegions::<Impl, IMPL_OFFSET>,
            GetSourceEntryBySourceEntry::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugSymbols3 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugSymbols4Impl: Sized {
    fn GetSymbolOptions();
    fn AddSymbolOptions();
    fn RemoveSymbolOptions();
    fn SetSymbolOptions();
    fn GetNameByOffset();
    fn GetOffsetByName();
    fn GetNearNameByOffset();
    fn GetLineByOffset();
    fn GetOffsetByLine();
    fn GetNumberModules();
    fn GetModuleByIndex();
    fn GetModuleByModuleName();
    fn GetModuleByOffset();
    fn GetModuleNames();
    fn GetModuleParameters();
    fn GetSymbolModule();
    fn GetTypeName();
    fn GetTypeId();
    fn GetTypeSize();
    fn GetFieldOffset();
    fn GetSymbolTypeId();
    fn GetOffsetTypeId();
    fn ReadTypedDataVirtual();
    fn WriteTypedDataVirtual();
    fn OutputTypedDataVirtual();
    fn ReadTypedDataPhysical();
    fn WriteTypedDataPhysical();
    fn OutputTypedDataPhysical();
    fn GetScope();
    fn SetScope();
    fn ResetScope();
    fn GetScopeSymbolGroup();
    fn CreateSymbolGroup();
    fn StartSymbolMatch();
    fn GetNextSymbolMatch();
    fn EndSymbolMatch();
    fn Reload();
    fn GetSymbolPath();
    fn SetSymbolPath();
    fn AppendSymbolPath();
    fn GetImagePath();
    fn SetImagePath();
    fn AppendImagePath();
    fn GetSourcePath();
    fn GetSourcePathElement();
    fn SetSourcePath();
    fn AppendSourcePath();
    fn FindSourceFile();
    fn GetSourceFileLineOffsets();
    fn GetModuleVersionInformation();
    fn GetModuleNameString();
    fn GetConstantName();
    fn GetFieldName();
    fn GetTypeOptions();
    fn AddTypeOptions();
    fn RemoveTypeOptions();
    fn SetTypeOptions();
    fn GetNameByOffsetWide();
    fn GetOffsetByNameWide();
    fn GetNearNameByOffsetWide();
    fn GetLineByOffsetWide();
    fn GetOffsetByLineWide();
    fn GetModuleByModuleNameWide();
    fn GetSymbolModuleWide();
    fn GetTypeNameWide();
    fn GetTypeIdWide();
    fn GetFieldOffsetWide();
    fn GetSymbolTypeIdWide();
    fn GetScopeSymbolGroup2();
    fn CreateSymbolGroup2();
    fn StartSymbolMatchWide();
    fn GetNextSymbolMatchWide();
    fn ReloadWide();
    fn GetSymbolPathWide();
    fn SetSymbolPathWide();
    fn AppendSymbolPathWide();
    fn GetImagePathWide();
    fn SetImagePathWide();
    fn AppendImagePathWide();
    fn GetSourcePathWide();
    fn GetSourcePathElementWide();
    fn SetSourcePathWide();
    fn AppendSourcePathWide();
    fn FindSourceFileWide();
    fn GetSourceFileLineOffsetsWide();
    fn GetModuleVersionInformationWide();
    fn GetModuleNameStringWide();
    fn GetConstantNameWide();
    fn GetFieldNameWide();
    fn IsManagedModule();
    fn GetModuleByModuleName2();
    fn GetModuleByModuleName2Wide();
    fn GetModuleByOffset2();
    fn AddSyntheticModule();
    fn AddSyntheticModuleWide();
    fn RemoveSyntheticModule();
    fn GetCurrentScopeFrameIndex();
    fn SetScopeFrameByIndex();
    fn SetScopeFromJitDebugInfo();
    fn SetScopeFromStoredEvent();
    fn OutputSymbolByOffset();
    fn GetFunctionEntryByOffset();
    fn GetFieldTypeAndOffset();
    fn GetFieldTypeAndOffsetWide();
    fn AddSyntheticSymbol();
    fn AddSyntheticSymbolWide();
    fn RemoveSyntheticSymbol();
    fn GetSymbolEntriesByOffset();
    fn GetSymbolEntriesByName();
    fn GetSymbolEntriesByNameWide();
    fn GetSymbolEntryByToken();
    fn GetSymbolEntryInformation();
    fn GetSymbolEntryString();
    fn GetSymbolEntryStringWide();
    fn GetSymbolEntryOffsetRegions();
    fn GetSymbolEntryBySymbolEntry();
    fn GetSourceEntriesByOffset();
    fn GetSourceEntriesByLine();
    fn GetSourceEntriesByLineWide();
    fn GetSourceEntryString();
    fn GetSourceEntryStringWide();
    fn GetSourceEntryOffsetRegions();
    fn GetSourceEntryBySourceEntry();
    fn GetScopeEx();
    fn SetScopeEx();
    fn GetNameByInlineContext();
    fn GetNameByInlineContextWide();
    fn GetLineByInlineContext();
    fn GetLineByInlineContextWide();
    fn OutputSymbolByInlineContext();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugSymbols4Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugSymbols4Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugSymbols4Vtbl {
        unsafe extern "system" fn GetSymbolOptions<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddSymbolOptions<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveSymbolOptions<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSymbolOptions<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNameByOffset<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOffsetByName<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PSTR, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNearNameByOffset<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLineByOffset<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, line: *mut u32, filebuffer: super::super::super::Foundation::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOffsetByLine<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, line: u32, file: super::super::super::Foundation::PSTR, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberModules<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, loaded: *mut u32, unloaded: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModuleByIndex<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModuleByModuleName<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModuleByOffset<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModuleNames<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, base: u64, imagenamebuffer: super::super::super::Foundation::PSTR, imagenamebuffersize: u32, imagenamesize: *mut u32, modulenamebuffer: super::super::super::Foundation::PSTR, modulenamebuffersize: u32, modulenamesize: *mut u32, loadedimagenamebuffer: super::super::super::Foundation::PSTR, loadedimagenamebuffersize: u32, loadedimagenamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModuleParameters<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, bases: *const u64, start: u32, params: *mut DEBUG_MODULE_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolModule<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PSTR, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTypeName<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTypeId<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, name: super::super::super::Foundation::PSTR, typeid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTypeSize<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, size: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFieldOffset<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, field: super::super::super::Foundation::PSTR, offset: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolTypeId<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PSTR, typeid: *mut u32, module: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOffsetTypeId<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, typeid: *mut u32, module: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadTypedDataVirtual<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteTypedDataVirtual<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputTypedDataVirtual<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadTypedDataPhysical<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteTypedDataPhysical<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputTypedDataPhysical<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetScope<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME, scopecontext: *mut ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetScope<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME, scopecontext: *const ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ResetScope<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetScopeSymbolGroup<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, update: ::windows::core::RawPtr, symbols: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateSymbolGroup<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, group: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StartSymbolMatch<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pattern: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNextSymbolMatch<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, buffer: super::super::super::Foundation::PSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EndSymbolMatch<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Reload<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolPath<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSymbolPath<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AppendSymbolPath<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetImagePath<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetImagePath<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AppendImagePath<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourcePath<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourcePathElement<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, elementsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSourcePath<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AppendSourcePath<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FindSourceFile<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, startelement: u32, file: super::super::super::Foundation::PSTR, flags: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourceFileLineOffsets<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModuleVersionInformation<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, base: u64, item: super::super::super::Foundation::PSTR, buffer: *mut ::core::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModuleNameString<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, index: u32, base: u64, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetConstantName<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, value: u64, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFieldName<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, fieldindex: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTypeOptions<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddTypeOptions<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveTypeOptions<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTypeOptions<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNameByOffsetWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOffsetByNameWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PWSTR, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNearNameByOffsetWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLineByOffsetWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, line: *mut u32, filebuffer: super::super::super::Foundation::PWSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOffsetByLineWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, line: u32, file: super::super::super::Foundation::PWSTR, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModuleByModuleNameWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PWSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolModuleWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PWSTR, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTypeNameWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTypeIdWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, name: super::super::super::Foundation::PWSTR, typeid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFieldOffsetWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, field: super::super::super::Foundation::PWSTR, offset: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolTypeIdWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PWSTR, typeid: *mut u32, module: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetScopeSymbolGroup2<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, update: ::windows::core::RawPtr, symbols: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateSymbolGroup2<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, group: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StartSymbolMatchWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pattern: super::super::super::Foundation::PWSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNextSymbolMatchWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReloadWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolPathWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSymbolPathWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AppendSymbolPathWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetImagePathWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetImagePathWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AppendImagePathWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourcePathWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourcePathElementWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, elementsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSourcePathWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AppendSourcePathWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FindSourceFileWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, startelement: u32, file: super::super::super::Foundation::PWSTR, flags: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourceFileLineOffsetsWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PWSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModuleVersionInformationWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, base: u64, item: super::super::super::Foundation::PWSTR, buffer: *mut ::core::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModuleNameStringWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, index: u32, base: u64, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetConstantNameWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, value: u64, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFieldNameWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, fieldindex: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsManagedModule<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, base: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModuleByModuleName2<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PSTR, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModuleByModuleName2Wide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PWSTR, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModuleByOffset2<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddSyntheticModule<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, base: u64, size: u32, imagepath: super::super::super::Foundation::PSTR, modulename: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddSyntheticModuleWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, base: u64, size: u32, imagepath: super::super::super::Foundation::PWSTR, modulename: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveSyntheticModule<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, base: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentScopeFrameIndex<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetScopeFrameByIndex<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetScopeFromJitDebugInfo<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, infooffset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetScopeFromStoredEvent<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputSymbolByOffset<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, offset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFunctionEntryByOffset<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bufferneeded: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFieldTypeAndOffset<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, containertypeid: u32, field: super::super::super::Foundation::PSTR, fieldtypeid: *mut u32, offset: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFieldTypeAndOffsetWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, containertypeid: u32, field: super::super::super::Foundation::PWSTR, fieldtypeid: *mut u32, offset: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddSyntheticSymbol<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, size: u32, name: super::super::super::Foundation::PSTR, flags: u32, id: *mut DEBUG_MODULE_AND_ID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddSyntheticSymbolWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, size: u32, name: super::super::super::Foundation::PWSTR, flags: u32, id: *mut DEBUG_MODULE_AND_ID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveSyntheticSymbol<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolEntriesByOffset<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, displacements: *mut u64, idscount: u32, entries: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolEntriesByName<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PSTR, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, idscount: u32, entries: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolEntriesByNameWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PWSTR, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, idscount: u32, entries: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolEntryByToken<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, modulebase: u64, token: u32, id: *mut DEBUG_MODULE_AND_ID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolEntryInformation<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID, info: *mut DEBUG_SYMBOL_ENTRY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolEntryString<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolEntryStringWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolEntryOffsetRegions<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID, flags: u32, regions: *mut DEBUG_OFFSET_REGION, regionscount: u32, regionsavail: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolEntryBySymbolEntry<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fromid: *const DEBUG_MODULE_AND_ID, flags: u32, toid: *mut DEBUG_MODULE_AND_ID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourceEntriesByOffset<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourceEntriesByLine<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, line: u32, file: super::super::super::Foundation::PSTR, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourceEntriesByLineWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, line: u32, file: super::super::super::Foundation::PWSTR, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourceEntryString<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourceEntryStringWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourceEntryOffsetRegions<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, flags: u32, regions: *mut DEBUG_OFFSET_REGION, regionscount: u32, regionsavail: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourceEntryBySourceEntry<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fromentry: *const DEBUG_SYMBOL_SOURCE_ENTRY, flags: u32, toentry: *mut DEBUG_SYMBOL_SOURCE_ENTRY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetScopeEx<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME_EX, scopecontext: *mut ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetScopeEx<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME_EX, scopecontext: *const ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNameByInlineContext<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, inlinecontext: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNameByInlineContextWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, inlinecontext: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLineByInlineContext<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, inlinecontext: u32, line: *mut u32, filebuffer: super::super::super::Foundation::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLineByInlineContextWide<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, inlinecontext: u32, line: *mut u32, filebuffer: super::super::super::Foundation::PWSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputSymbolByInlineContext<Impl: IDebugSymbols4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, offset: u64, inlinecontext: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetSymbolOptions::<Impl, IMPL_OFFSET>,
            AddSymbolOptions::<Impl, IMPL_OFFSET>,
            RemoveSymbolOptions::<Impl, IMPL_OFFSET>,
            SetSymbolOptions::<Impl, IMPL_OFFSET>,
            GetNameByOffset::<Impl, IMPL_OFFSET>,
            GetOffsetByName::<Impl, IMPL_OFFSET>,
            GetNearNameByOffset::<Impl, IMPL_OFFSET>,
            GetLineByOffset::<Impl, IMPL_OFFSET>,
            GetOffsetByLine::<Impl, IMPL_OFFSET>,
            GetNumberModules::<Impl, IMPL_OFFSET>,
            GetModuleByIndex::<Impl, IMPL_OFFSET>,
            GetModuleByModuleName::<Impl, IMPL_OFFSET>,
            GetModuleByOffset::<Impl, IMPL_OFFSET>,
            GetModuleNames::<Impl, IMPL_OFFSET>,
            GetModuleParameters::<Impl, IMPL_OFFSET>,
            GetSymbolModule::<Impl, IMPL_OFFSET>,
            GetTypeName::<Impl, IMPL_OFFSET>,
            GetTypeId::<Impl, IMPL_OFFSET>,
            GetTypeSize::<Impl, IMPL_OFFSET>,
            GetFieldOffset::<Impl, IMPL_OFFSET>,
            GetSymbolTypeId::<Impl, IMPL_OFFSET>,
            GetOffsetTypeId::<Impl, IMPL_OFFSET>,
            ReadTypedDataVirtual::<Impl, IMPL_OFFSET>,
            WriteTypedDataVirtual::<Impl, IMPL_OFFSET>,
            OutputTypedDataVirtual::<Impl, IMPL_OFFSET>,
            ReadTypedDataPhysical::<Impl, IMPL_OFFSET>,
            WriteTypedDataPhysical::<Impl, IMPL_OFFSET>,
            OutputTypedDataPhysical::<Impl, IMPL_OFFSET>,
            GetScope::<Impl, IMPL_OFFSET>,
            SetScope::<Impl, IMPL_OFFSET>,
            ResetScope::<Impl, IMPL_OFFSET>,
            GetScopeSymbolGroup::<Impl, IMPL_OFFSET>,
            CreateSymbolGroup::<Impl, IMPL_OFFSET>,
            StartSymbolMatch::<Impl, IMPL_OFFSET>,
            GetNextSymbolMatch::<Impl, IMPL_OFFSET>,
            EndSymbolMatch::<Impl, IMPL_OFFSET>,
            Reload::<Impl, IMPL_OFFSET>,
            GetSymbolPath::<Impl, IMPL_OFFSET>,
            SetSymbolPath::<Impl, IMPL_OFFSET>,
            AppendSymbolPath::<Impl, IMPL_OFFSET>,
            GetImagePath::<Impl, IMPL_OFFSET>,
            SetImagePath::<Impl, IMPL_OFFSET>,
            AppendImagePath::<Impl, IMPL_OFFSET>,
            GetSourcePath::<Impl, IMPL_OFFSET>,
            GetSourcePathElement::<Impl, IMPL_OFFSET>,
            SetSourcePath::<Impl, IMPL_OFFSET>,
            AppendSourcePath::<Impl, IMPL_OFFSET>,
            FindSourceFile::<Impl, IMPL_OFFSET>,
            GetSourceFileLineOffsets::<Impl, IMPL_OFFSET>,
            GetModuleVersionInformation::<Impl, IMPL_OFFSET>,
            GetModuleNameString::<Impl, IMPL_OFFSET>,
            GetConstantName::<Impl, IMPL_OFFSET>,
            GetFieldName::<Impl, IMPL_OFFSET>,
            GetTypeOptions::<Impl, IMPL_OFFSET>,
            AddTypeOptions::<Impl, IMPL_OFFSET>,
            RemoveTypeOptions::<Impl, IMPL_OFFSET>,
            SetTypeOptions::<Impl, IMPL_OFFSET>,
            GetNameByOffsetWide::<Impl, IMPL_OFFSET>,
            GetOffsetByNameWide::<Impl, IMPL_OFFSET>,
            GetNearNameByOffsetWide::<Impl, IMPL_OFFSET>,
            GetLineByOffsetWide::<Impl, IMPL_OFFSET>,
            GetOffsetByLineWide::<Impl, IMPL_OFFSET>,
            GetModuleByModuleNameWide::<Impl, IMPL_OFFSET>,
            GetSymbolModuleWide::<Impl, IMPL_OFFSET>,
            GetTypeNameWide::<Impl, IMPL_OFFSET>,
            GetTypeIdWide::<Impl, IMPL_OFFSET>,
            GetFieldOffsetWide::<Impl, IMPL_OFFSET>,
            GetSymbolTypeIdWide::<Impl, IMPL_OFFSET>,
            GetScopeSymbolGroup2::<Impl, IMPL_OFFSET>,
            CreateSymbolGroup2::<Impl, IMPL_OFFSET>,
            StartSymbolMatchWide::<Impl, IMPL_OFFSET>,
            GetNextSymbolMatchWide::<Impl, IMPL_OFFSET>,
            ReloadWide::<Impl, IMPL_OFFSET>,
            GetSymbolPathWide::<Impl, IMPL_OFFSET>,
            SetSymbolPathWide::<Impl, IMPL_OFFSET>,
            AppendSymbolPathWide::<Impl, IMPL_OFFSET>,
            GetImagePathWide::<Impl, IMPL_OFFSET>,
            SetImagePathWide::<Impl, IMPL_OFFSET>,
            AppendImagePathWide::<Impl, IMPL_OFFSET>,
            GetSourcePathWide::<Impl, IMPL_OFFSET>,
            GetSourcePathElementWide::<Impl, IMPL_OFFSET>,
            SetSourcePathWide::<Impl, IMPL_OFFSET>,
            AppendSourcePathWide::<Impl, IMPL_OFFSET>,
            FindSourceFileWide::<Impl, IMPL_OFFSET>,
            GetSourceFileLineOffsetsWide::<Impl, IMPL_OFFSET>,
            GetModuleVersionInformationWide::<Impl, IMPL_OFFSET>,
            GetModuleNameStringWide::<Impl, IMPL_OFFSET>,
            GetConstantNameWide::<Impl, IMPL_OFFSET>,
            GetFieldNameWide::<Impl, IMPL_OFFSET>,
            IsManagedModule::<Impl, IMPL_OFFSET>,
            GetModuleByModuleName2::<Impl, IMPL_OFFSET>,
            GetModuleByModuleName2Wide::<Impl, IMPL_OFFSET>,
            GetModuleByOffset2::<Impl, IMPL_OFFSET>,
            AddSyntheticModule::<Impl, IMPL_OFFSET>,
            AddSyntheticModuleWide::<Impl, IMPL_OFFSET>,
            RemoveSyntheticModule::<Impl, IMPL_OFFSET>,
            GetCurrentScopeFrameIndex::<Impl, IMPL_OFFSET>,
            SetScopeFrameByIndex::<Impl, IMPL_OFFSET>,
            SetScopeFromJitDebugInfo::<Impl, IMPL_OFFSET>,
            SetScopeFromStoredEvent::<Impl, IMPL_OFFSET>,
            OutputSymbolByOffset::<Impl, IMPL_OFFSET>,
            GetFunctionEntryByOffset::<Impl, IMPL_OFFSET>,
            GetFieldTypeAndOffset::<Impl, IMPL_OFFSET>,
            GetFieldTypeAndOffsetWide::<Impl, IMPL_OFFSET>,
            AddSyntheticSymbol::<Impl, IMPL_OFFSET>,
            AddSyntheticSymbolWide::<Impl, IMPL_OFFSET>,
            RemoveSyntheticSymbol::<Impl, IMPL_OFFSET>,
            GetSymbolEntriesByOffset::<Impl, IMPL_OFFSET>,
            GetSymbolEntriesByName::<Impl, IMPL_OFFSET>,
            GetSymbolEntriesByNameWide::<Impl, IMPL_OFFSET>,
            GetSymbolEntryByToken::<Impl, IMPL_OFFSET>,
            GetSymbolEntryInformation::<Impl, IMPL_OFFSET>,
            GetSymbolEntryString::<Impl, IMPL_OFFSET>,
            GetSymbolEntryStringWide::<Impl, IMPL_OFFSET>,
            GetSymbolEntryOffsetRegions::<Impl, IMPL_OFFSET>,
            GetSymbolEntryBySymbolEntry::<Impl, IMPL_OFFSET>,
            GetSourceEntriesByOffset::<Impl, IMPL_OFFSET>,
            GetSourceEntriesByLine::<Impl, IMPL_OFFSET>,
            GetSourceEntriesByLineWide::<Impl, IMPL_OFFSET>,
            GetSourceEntryString::<Impl, IMPL_OFFSET>,
            GetSourceEntryStringWide::<Impl, IMPL_OFFSET>,
            GetSourceEntryOffsetRegions::<Impl, IMPL_OFFSET>,
            GetSourceEntryBySourceEntry::<Impl, IMPL_OFFSET>,
            GetScopeEx::<Impl, IMPL_OFFSET>,
            SetScopeEx::<Impl, IMPL_OFFSET>,
            GetNameByInlineContext::<Impl, IMPL_OFFSET>,
            GetNameByInlineContextWide::<Impl, IMPL_OFFSET>,
            GetLineByInlineContext::<Impl, IMPL_OFFSET>,
            GetLineByInlineContextWide::<Impl, IMPL_OFFSET>,
            OutputSymbolByInlineContext::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugSymbols4 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugSymbols5Impl: Sized {
    fn GetSymbolOptions();
    fn AddSymbolOptions();
    fn RemoveSymbolOptions();
    fn SetSymbolOptions();
    fn GetNameByOffset();
    fn GetOffsetByName();
    fn GetNearNameByOffset();
    fn GetLineByOffset();
    fn GetOffsetByLine();
    fn GetNumberModules();
    fn GetModuleByIndex();
    fn GetModuleByModuleName();
    fn GetModuleByOffset();
    fn GetModuleNames();
    fn GetModuleParameters();
    fn GetSymbolModule();
    fn GetTypeName();
    fn GetTypeId();
    fn GetTypeSize();
    fn GetFieldOffset();
    fn GetSymbolTypeId();
    fn GetOffsetTypeId();
    fn ReadTypedDataVirtual();
    fn WriteTypedDataVirtual();
    fn OutputTypedDataVirtual();
    fn ReadTypedDataPhysical();
    fn WriteTypedDataPhysical();
    fn OutputTypedDataPhysical();
    fn GetScope();
    fn SetScope();
    fn ResetScope();
    fn GetScopeSymbolGroup();
    fn CreateSymbolGroup();
    fn StartSymbolMatch();
    fn GetNextSymbolMatch();
    fn EndSymbolMatch();
    fn Reload();
    fn GetSymbolPath();
    fn SetSymbolPath();
    fn AppendSymbolPath();
    fn GetImagePath();
    fn SetImagePath();
    fn AppendImagePath();
    fn GetSourcePath();
    fn GetSourcePathElement();
    fn SetSourcePath();
    fn AppendSourcePath();
    fn FindSourceFile();
    fn GetSourceFileLineOffsets();
    fn GetModuleVersionInformation();
    fn GetModuleNameString();
    fn GetConstantName();
    fn GetFieldName();
    fn GetTypeOptions();
    fn AddTypeOptions();
    fn RemoveTypeOptions();
    fn SetTypeOptions();
    fn GetNameByOffsetWide();
    fn GetOffsetByNameWide();
    fn GetNearNameByOffsetWide();
    fn GetLineByOffsetWide();
    fn GetOffsetByLineWide();
    fn GetModuleByModuleNameWide();
    fn GetSymbolModuleWide();
    fn GetTypeNameWide();
    fn GetTypeIdWide();
    fn GetFieldOffsetWide();
    fn GetSymbolTypeIdWide();
    fn GetScopeSymbolGroup2();
    fn CreateSymbolGroup2();
    fn StartSymbolMatchWide();
    fn GetNextSymbolMatchWide();
    fn ReloadWide();
    fn GetSymbolPathWide();
    fn SetSymbolPathWide();
    fn AppendSymbolPathWide();
    fn GetImagePathWide();
    fn SetImagePathWide();
    fn AppendImagePathWide();
    fn GetSourcePathWide();
    fn GetSourcePathElementWide();
    fn SetSourcePathWide();
    fn AppendSourcePathWide();
    fn FindSourceFileWide();
    fn GetSourceFileLineOffsetsWide();
    fn GetModuleVersionInformationWide();
    fn GetModuleNameStringWide();
    fn GetConstantNameWide();
    fn GetFieldNameWide();
    fn IsManagedModule();
    fn GetModuleByModuleName2();
    fn GetModuleByModuleName2Wide();
    fn GetModuleByOffset2();
    fn AddSyntheticModule();
    fn AddSyntheticModuleWide();
    fn RemoveSyntheticModule();
    fn GetCurrentScopeFrameIndex();
    fn SetScopeFrameByIndex();
    fn SetScopeFromJitDebugInfo();
    fn SetScopeFromStoredEvent();
    fn OutputSymbolByOffset();
    fn GetFunctionEntryByOffset();
    fn GetFieldTypeAndOffset();
    fn GetFieldTypeAndOffsetWide();
    fn AddSyntheticSymbol();
    fn AddSyntheticSymbolWide();
    fn RemoveSyntheticSymbol();
    fn GetSymbolEntriesByOffset();
    fn GetSymbolEntriesByName();
    fn GetSymbolEntriesByNameWide();
    fn GetSymbolEntryByToken();
    fn GetSymbolEntryInformation();
    fn GetSymbolEntryString();
    fn GetSymbolEntryStringWide();
    fn GetSymbolEntryOffsetRegions();
    fn GetSymbolEntryBySymbolEntry();
    fn GetSourceEntriesByOffset();
    fn GetSourceEntriesByLine();
    fn GetSourceEntriesByLineWide();
    fn GetSourceEntryString();
    fn GetSourceEntryStringWide();
    fn GetSourceEntryOffsetRegions();
    fn GetSourceEntryBySourceEntry();
    fn GetScopeEx();
    fn SetScopeEx();
    fn GetNameByInlineContext();
    fn GetNameByInlineContextWide();
    fn GetLineByInlineContext();
    fn GetLineByInlineContextWide();
    fn OutputSymbolByInlineContext();
    fn GetCurrentScopeFrameIndexEx();
    fn SetScopeFrameByIndexEx();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugSymbols5Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugSymbols5Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugSymbols5Vtbl {
        unsafe extern "system" fn GetSymbolOptions<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddSymbolOptions<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveSymbolOptions<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSymbolOptions<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNameByOffset<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOffsetByName<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PSTR, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNearNameByOffset<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLineByOffset<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, line: *mut u32, filebuffer: super::super::super::Foundation::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOffsetByLine<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, line: u32, file: super::super::super::Foundation::PSTR, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberModules<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, loaded: *mut u32, unloaded: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModuleByIndex<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModuleByModuleName<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModuleByOffset<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModuleNames<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, base: u64, imagenamebuffer: super::super::super::Foundation::PSTR, imagenamebuffersize: u32, imagenamesize: *mut u32, modulenamebuffer: super::super::super::Foundation::PSTR, modulenamebuffersize: u32, modulenamesize: *mut u32, loadedimagenamebuffer: super::super::super::Foundation::PSTR, loadedimagenamebuffersize: u32, loadedimagenamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModuleParameters<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, bases: *const u64, start: u32, params: *mut DEBUG_MODULE_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolModule<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PSTR, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTypeName<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTypeId<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, name: super::super::super::Foundation::PSTR, typeid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTypeSize<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, size: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFieldOffset<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, field: super::super::super::Foundation::PSTR, offset: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolTypeId<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PSTR, typeid: *mut u32, module: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOffsetTypeId<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, typeid: *mut u32, module: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadTypedDataVirtual<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteTypedDataVirtual<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputTypedDataVirtual<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadTypedDataPhysical<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteTypedDataPhysical<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputTypedDataPhysical<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetScope<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME, scopecontext: *mut ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetScope<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME, scopecontext: *const ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ResetScope<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetScopeSymbolGroup<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, update: ::windows::core::RawPtr, symbols: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateSymbolGroup<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, group: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StartSymbolMatch<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pattern: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNextSymbolMatch<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, buffer: super::super::super::Foundation::PSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EndSymbolMatch<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Reload<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolPath<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSymbolPath<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AppendSymbolPath<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetImagePath<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetImagePath<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AppendImagePath<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourcePath<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourcePathElement<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, elementsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSourcePath<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AppendSourcePath<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FindSourceFile<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, startelement: u32, file: super::super::super::Foundation::PSTR, flags: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourceFileLineOffsets<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModuleVersionInformation<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, base: u64, item: super::super::super::Foundation::PSTR, buffer: *mut ::core::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModuleNameString<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, index: u32, base: u64, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetConstantName<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, value: u64, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFieldName<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, fieldindex: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTypeOptions<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddTypeOptions<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveTypeOptions<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetTypeOptions<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNameByOffsetWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOffsetByNameWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PWSTR, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNearNameByOffsetWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLineByOffsetWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, line: *mut u32, filebuffer: super::super::super::Foundation::PWSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOffsetByLineWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, line: u32, file: super::super::super::Foundation::PWSTR, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModuleByModuleNameWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PWSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolModuleWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PWSTR, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTypeNameWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTypeIdWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, name: super::super::super::Foundation::PWSTR, typeid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFieldOffsetWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, field: super::super::super::Foundation::PWSTR, offset: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolTypeIdWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PWSTR, typeid: *mut u32, module: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetScopeSymbolGroup2<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, update: ::windows::core::RawPtr, symbols: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateSymbolGroup2<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, group: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn StartSymbolMatchWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pattern: super::super::super::Foundation::PWSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNextSymbolMatchWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReloadWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolPathWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSymbolPathWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AppendSymbolPathWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetImagePathWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetImagePathWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AppendImagePathWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourcePathWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourcePathElementWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, elementsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSourcePathWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AppendSourcePathWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FindSourceFileWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, startelement: u32, file: super::super::super::Foundation::PWSTR, flags: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourceFileLineOffsetsWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PWSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModuleVersionInformationWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, base: u64, item: super::super::super::Foundation::PWSTR, buffer: *mut ::core::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModuleNameStringWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, which: u32, index: u32, base: u64, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetConstantNameWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, value: u64, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFieldNameWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, fieldindex: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsManagedModule<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32, base: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModuleByModuleName2<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PSTR, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModuleByModuleName2Wide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PWSTR, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetModuleByOffset2<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddSyntheticModule<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, base: u64, size: u32, imagepath: super::super::super::Foundation::PSTR, modulename: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddSyntheticModuleWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, base: u64, size: u32, imagepath: super::super::super::Foundation::PWSTR, modulename: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveSyntheticModule<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, base: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentScopeFrameIndex<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetScopeFrameByIndex<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, index: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetScopeFromJitDebugInfo<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, infooffset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetScopeFromStoredEvent<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputSymbolByOffset<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, offset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFunctionEntryByOffset<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bufferneeded: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFieldTypeAndOffset<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, containertypeid: u32, field: super::super::super::Foundation::PSTR, fieldtypeid: *mut u32, offset: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetFieldTypeAndOffsetWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, module: u64, containertypeid: u32, field: super::super::super::Foundation::PWSTR, fieldtypeid: *mut u32, offset: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddSyntheticSymbol<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, size: u32, name: super::super::super::Foundation::PSTR, flags: u32, id: *mut DEBUG_MODULE_AND_ID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddSyntheticSymbolWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, size: u32, name: super::super::super::Foundation::PWSTR, flags: u32, id: *mut DEBUG_MODULE_AND_ID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveSyntheticSymbol<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolEntriesByOffset<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, displacements: *mut u64, idscount: u32, entries: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolEntriesByName<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PSTR, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, idscount: u32, entries: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolEntriesByNameWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PWSTR, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, idscount: u32, entries: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolEntryByToken<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, modulebase: u64, token: u32, id: *mut DEBUG_MODULE_AND_ID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolEntryInformation<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID, info: *mut DEBUG_SYMBOL_ENTRY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolEntryString<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolEntryStringWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolEntryOffsetRegions<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID, flags: u32, regions: *mut DEBUG_OFFSET_REGION, regionscount: u32, regionsavail: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSymbolEntryBySymbolEntry<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fromid: *const DEBUG_MODULE_AND_ID, flags: u32, toid: *mut DEBUG_MODULE_AND_ID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourceEntriesByOffset<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourceEntriesByLine<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, line: u32, file: super::super::super::Foundation::PSTR, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourceEntriesByLineWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, line: u32, file: super::super::super::Foundation::PWSTR, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourceEntryString<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourceEntryStringWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourceEntryOffsetRegions<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, flags: u32, regions: *mut DEBUG_OFFSET_REGION, regionscount: u32, regionsavail: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSourceEntryBySourceEntry<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, fromentry: *const DEBUG_SYMBOL_SOURCE_ENTRY, flags: u32, toentry: *mut DEBUG_SYMBOL_SOURCE_ENTRY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetScopeEx<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME_EX, scopecontext: *mut ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetScopeEx<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME_EX, scopecontext: *const ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNameByInlineContext<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, inlinecontext: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNameByInlineContextWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, inlinecontext: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLineByInlineContext<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, inlinecontext: u32, line: *mut u32, filebuffer: super::super::super::Foundation::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLineByInlineContextWide<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, inlinecontext: u32, line: *mut u32, filebuffer: super::super::super::Foundation::PWSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OutputSymbolByInlineContext<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, offset: u64, inlinecontext: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentScopeFrameIndexEx<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, index: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetScopeFrameByIndexEx<Impl: IDebugSymbols5Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, flags: u32, index: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetSymbolOptions::<Impl, IMPL_OFFSET>,
            AddSymbolOptions::<Impl, IMPL_OFFSET>,
            RemoveSymbolOptions::<Impl, IMPL_OFFSET>,
            SetSymbolOptions::<Impl, IMPL_OFFSET>,
            GetNameByOffset::<Impl, IMPL_OFFSET>,
            GetOffsetByName::<Impl, IMPL_OFFSET>,
            GetNearNameByOffset::<Impl, IMPL_OFFSET>,
            GetLineByOffset::<Impl, IMPL_OFFSET>,
            GetOffsetByLine::<Impl, IMPL_OFFSET>,
            GetNumberModules::<Impl, IMPL_OFFSET>,
            GetModuleByIndex::<Impl, IMPL_OFFSET>,
            GetModuleByModuleName::<Impl, IMPL_OFFSET>,
            GetModuleByOffset::<Impl, IMPL_OFFSET>,
            GetModuleNames::<Impl, IMPL_OFFSET>,
            GetModuleParameters::<Impl, IMPL_OFFSET>,
            GetSymbolModule::<Impl, IMPL_OFFSET>,
            GetTypeName::<Impl, IMPL_OFFSET>,
            GetTypeId::<Impl, IMPL_OFFSET>,
            GetTypeSize::<Impl, IMPL_OFFSET>,
            GetFieldOffset::<Impl, IMPL_OFFSET>,
            GetSymbolTypeId::<Impl, IMPL_OFFSET>,
            GetOffsetTypeId::<Impl, IMPL_OFFSET>,
            ReadTypedDataVirtual::<Impl, IMPL_OFFSET>,
            WriteTypedDataVirtual::<Impl, IMPL_OFFSET>,
            OutputTypedDataVirtual::<Impl, IMPL_OFFSET>,
            ReadTypedDataPhysical::<Impl, IMPL_OFFSET>,
            WriteTypedDataPhysical::<Impl, IMPL_OFFSET>,
            OutputTypedDataPhysical::<Impl, IMPL_OFFSET>,
            GetScope::<Impl, IMPL_OFFSET>,
            SetScope::<Impl, IMPL_OFFSET>,
            ResetScope::<Impl, IMPL_OFFSET>,
            GetScopeSymbolGroup::<Impl, IMPL_OFFSET>,
            CreateSymbolGroup::<Impl, IMPL_OFFSET>,
            StartSymbolMatch::<Impl, IMPL_OFFSET>,
            GetNextSymbolMatch::<Impl, IMPL_OFFSET>,
            EndSymbolMatch::<Impl, IMPL_OFFSET>,
            Reload::<Impl, IMPL_OFFSET>,
            GetSymbolPath::<Impl, IMPL_OFFSET>,
            SetSymbolPath::<Impl, IMPL_OFFSET>,
            AppendSymbolPath::<Impl, IMPL_OFFSET>,
            GetImagePath::<Impl, IMPL_OFFSET>,
            SetImagePath::<Impl, IMPL_OFFSET>,
            AppendImagePath::<Impl, IMPL_OFFSET>,
            GetSourcePath::<Impl, IMPL_OFFSET>,
            GetSourcePathElement::<Impl, IMPL_OFFSET>,
            SetSourcePath::<Impl, IMPL_OFFSET>,
            AppendSourcePath::<Impl, IMPL_OFFSET>,
            FindSourceFile::<Impl, IMPL_OFFSET>,
            GetSourceFileLineOffsets::<Impl, IMPL_OFFSET>,
            GetModuleVersionInformation::<Impl, IMPL_OFFSET>,
            GetModuleNameString::<Impl, IMPL_OFFSET>,
            GetConstantName::<Impl, IMPL_OFFSET>,
            GetFieldName::<Impl, IMPL_OFFSET>,
            GetTypeOptions::<Impl, IMPL_OFFSET>,
            AddTypeOptions::<Impl, IMPL_OFFSET>,
            RemoveTypeOptions::<Impl, IMPL_OFFSET>,
            SetTypeOptions::<Impl, IMPL_OFFSET>,
            GetNameByOffsetWide::<Impl, IMPL_OFFSET>,
            GetOffsetByNameWide::<Impl, IMPL_OFFSET>,
            GetNearNameByOffsetWide::<Impl, IMPL_OFFSET>,
            GetLineByOffsetWide::<Impl, IMPL_OFFSET>,
            GetOffsetByLineWide::<Impl, IMPL_OFFSET>,
            GetModuleByModuleNameWide::<Impl, IMPL_OFFSET>,
            GetSymbolModuleWide::<Impl, IMPL_OFFSET>,
            GetTypeNameWide::<Impl, IMPL_OFFSET>,
            GetTypeIdWide::<Impl, IMPL_OFFSET>,
            GetFieldOffsetWide::<Impl, IMPL_OFFSET>,
            GetSymbolTypeIdWide::<Impl, IMPL_OFFSET>,
            GetScopeSymbolGroup2::<Impl, IMPL_OFFSET>,
            CreateSymbolGroup2::<Impl, IMPL_OFFSET>,
            StartSymbolMatchWide::<Impl, IMPL_OFFSET>,
            GetNextSymbolMatchWide::<Impl, IMPL_OFFSET>,
            ReloadWide::<Impl, IMPL_OFFSET>,
            GetSymbolPathWide::<Impl, IMPL_OFFSET>,
            SetSymbolPathWide::<Impl, IMPL_OFFSET>,
            AppendSymbolPathWide::<Impl, IMPL_OFFSET>,
            GetImagePathWide::<Impl, IMPL_OFFSET>,
            SetImagePathWide::<Impl, IMPL_OFFSET>,
            AppendImagePathWide::<Impl, IMPL_OFFSET>,
            GetSourcePathWide::<Impl, IMPL_OFFSET>,
            GetSourcePathElementWide::<Impl, IMPL_OFFSET>,
            SetSourcePathWide::<Impl, IMPL_OFFSET>,
            AppendSourcePathWide::<Impl, IMPL_OFFSET>,
            FindSourceFileWide::<Impl, IMPL_OFFSET>,
            GetSourceFileLineOffsetsWide::<Impl, IMPL_OFFSET>,
            GetModuleVersionInformationWide::<Impl, IMPL_OFFSET>,
            GetModuleNameStringWide::<Impl, IMPL_OFFSET>,
            GetConstantNameWide::<Impl, IMPL_OFFSET>,
            GetFieldNameWide::<Impl, IMPL_OFFSET>,
            IsManagedModule::<Impl, IMPL_OFFSET>,
            GetModuleByModuleName2::<Impl, IMPL_OFFSET>,
            GetModuleByModuleName2Wide::<Impl, IMPL_OFFSET>,
            GetModuleByOffset2::<Impl, IMPL_OFFSET>,
            AddSyntheticModule::<Impl, IMPL_OFFSET>,
            AddSyntheticModuleWide::<Impl, IMPL_OFFSET>,
            RemoveSyntheticModule::<Impl, IMPL_OFFSET>,
            GetCurrentScopeFrameIndex::<Impl, IMPL_OFFSET>,
            SetScopeFrameByIndex::<Impl, IMPL_OFFSET>,
            SetScopeFromJitDebugInfo::<Impl, IMPL_OFFSET>,
            SetScopeFromStoredEvent::<Impl, IMPL_OFFSET>,
            OutputSymbolByOffset::<Impl, IMPL_OFFSET>,
            GetFunctionEntryByOffset::<Impl, IMPL_OFFSET>,
            GetFieldTypeAndOffset::<Impl, IMPL_OFFSET>,
            GetFieldTypeAndOffsetWide::<Impl, IMPL_OFFSET>,
            AddSyntheticSymbol::<Impl, IMPL_OFFSET>,
            AddSyntheticSymbolWide::<Impl, IMPL_OFFSET>,
            RemoveSyntheticSymbol::<Impl, IMPL_OFFSET>,
            GetSymbolEntriesByOffset::<Impl, IMPL_OFFSET>,
            GetSymbolEntriesByName::<Impl, IMPL_OFFSET>,
            GetSymbolEntriesByNameWide::<Impl, IMPL_OFFSET>,
            GetSymbolEntryByToken::<Impl, IMPL_OFFSET>,
            GetSymbolEntryInformation::<Impl, IMPL_OFFSET>,
            GetSymbolEntryString::<Impl, IMPL_OFFSET>,
            GetSymbolEntryStringWide::<Impl, IMPL_OFFSET>,
            GetSymbolEntryOffsetRegions::<Impl, IMPL_OFFSET>,
            GetSymbolEntryBySymbolEntry::<Impl, IMPL_OFFSET>,
            GetSourceEntriesByOffset::<Impl, IMPL_OFFSET>,
            GetSourceEntriesByLine::<Impl, IMPL_OFFSET>,
            GetSourceEntriesByLineWide::<Impl, IMPL_OFFSET>,
            GetSourceEntryString::<Impl, IMPL_OFFSET>,
            GetSourceEntryStringWide::<Impl, IMPL_OFFSET>,
            GetSourceEntryOffsetRegions::<Impl, IMPL_OFFSET>,
            GetSourceEntryBySourceEntry::<Impl, IMPL_OFFSET>,
            GetScopeEx::<Impl, IMPL_OFFSET>,
            SetScopeEx::<Impl, IMPL_OFFSET>,
            GetNameByInlineContext::<Impl, IMPL_OFFSET>,
            GetNameByInlineContextWide::<Impl, IMPL_OFFSET>,
            GetLineByInlineContext::<Impl, IMPL_OFFSET>,
            GetLineByInlineContextWide::<Impl, IMPL_OFFSET>,
            OutputSymbolByInlineContext::<Impl, IMPL_OFFSET>,
            GetCurrentScopeFrameIndexEx::<Impl, IMPL_OFFSET>,
            SetScopeFrameByIndexEx::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugSymbols5 as ::windows::core::Interface>::IID
    }
}
pub trait IDebugSyncOperationImpl: Sized {
    fn GetTargetThread();
    fn Execute();
    fn InProgressAbort();
}
impl IDebugSyncOperationVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugSyncOperationImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugSyncOperationVtbl {
        unsafe extern "system" fn GetTargetThread<Impl: IDebugSyncOperationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppattarget: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Execute<Impl: IDebugSyncOperationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppunkresult: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn InProgressAbort<Impl: IDebugSyncOperationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetTargetThread::<Impl, IMPL_OFFSET>, Execute::<Impl, IMPL_OFFSET>, InProgressAbort::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugSyncOperation as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugSystemObjectsImpl: Sized {
    fn GetEventThread();
    fn GetEventProcess();
    fn GetCurrentThreadId();
    fn SetCurrentThreadId();
    fn GetCurrentProcessId();
    fn SetCurrentProcessId();
    fn GetNumberThreads();
    fn GetTotalNumberThreads();
    fn GetThreadIdsByIndex();
    fn GetThreadIdByProcessor();
    fn GetCurrentThreadDataOffset();
    fn GetThreadIdByDataOffset();
    fn GetCurrentThreadTeb();
    fn GetThreadIdByTeb();
    fn GetCurrentThreadSystemId();
    fn GetThreadIdBySystemId();
    fn GetCurrentThreadHandle();
    fn GetThreadIdByHandle();
    fn GetNumberProcesses();
    fn GetProcessIdsByIndex();
    fn GetCurrentProcessDataOffset();
    fn GetProcessIdByDataOffset();
    fn GetCurrentProcessPeb();
    fn GetProcessIdByPeb();
    fn GetCurrentProcessSystemId();
    fn GetProcessIdBySystemId();
    fn GetCurrentProcessHandle();
    fn GetProcessIdByHandle();
    fn GetCurrentProcessExecutableName();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugSystemObjectsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugSystemObjectsImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugSystemObjectsVtbl {
        unsafe extern "system" fn GetEventThread<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEventProcess<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentThreadId<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetCurrentThreadId<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentProcessId<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetCurrentProcessId<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberThreads<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTotalNumberThreads<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, total: *mut u32, largestprocess: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetThreadIdsByIndex<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetThreadIdByProcessor<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, processor: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentThreadDataOffset<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetThreadIdByDataOffset<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentThreadTeb<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetThreadIdByTeb<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentThreadSystemId<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, sysid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetThreadIdBySystemId<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, sysid: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentThreadHandle<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetThreadIdByHandle<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberProcesses<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetProcessIdsByIndex<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentProcessDataOffset<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetProcessIdByDataOffset<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentProcessPeb<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetProcessIdByPeb<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentProcessSystemId<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, sysid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetProcessIdBySystemId<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, sysid: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentProcessHandle<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetProcessIdByHandle<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentProcessExecutableName<Impl: IDebugSystemObjectsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, exesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetEventThread::<Impl, IMPL_OFFSET>,
            GetEventProcess::<Impl, IMPL_OFFSET>,
            GetCurrentThreadId::<Impl, IMPL_OFFSET>,
            SetCurrentThreadId::<Impl, IMPL_OFFSET>,
            GetCurrentProcessId::<Impl, IMPL_OFFSET>,
            SetCurrentProcessId::<Impl, IMPL_OFFSET>,
            GetNumberThreads::<Impl, IMPL_OFFSET>,
            GetTotalNumberThreads::<Impl, IMPL_OFFSET>,
            GetThreadIdsByIndex::<Impl, IMPL_OFFSET>,
            GetThreadIdByProcessor::<Impl, IMPL_OFFSET>,
            GetCurrentThreadDataOffset::<Impl, IMPL_OFFSET>,
            GetThreadIdByDataOffset::<Impl, IMPL_OFFSET>,
            GetCurrentThreadTeb::<Impl, IMPL_OFFSET>,
            GetThreadIdByTeb::<Impl, IMPL_OFFSET>,
            GetCurrentThreadSystemId::<Impl, IMPL_OFFSET>,
            GetThreadIdBySystemId::<Impl, IMPL_OFFSET>,
            GetCurrentThreadHandle::<Impl, IMPL_OFFSET>,
            GetThreadIdByHandle::<Impl, IMPL_OFFSET>,
            GetNumberProcesses::<Impl, IMPL_OFFSET>,
            GetProcessIdsByIndex::<Impl, IMPL_OFFSET>,
            GetCurrentProcessDataOffset::<Impl, IMPL_OFFSET>,
            GetProcessIdByDataOffset::<Impl, IMPL_OFFSET>,
            GetCurrentProcessPeb::<Impl, IMPL_OFFSET>,
            GetProcessIdByPeb::<Impl, IMPL_OFFSET>,
            GetCurrentProcessSystemId::<Impl, IMPL_OFFSET>,
            GetProcessIdBySystemId::<Impl, IMPL_OFFSET>,
            GetCurrentProcessHandle::<Impl, IMPL_OFFSET>,
            GetProcessIdByHandle::<Impl, IMPL_OFFSET>,
            GetCurrentProcessExecutableName::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugSystemObjects as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugSystemObjects2Impl: Sized {
    fn GetEventThread();
    fn GetEventProcess();
    fn GetCurrentThreadId();
    fn SetCurrentThreadId();
    fn GetCurrentProcessId();
    fn SetCurrentProcessId();
    fn GetNumberThreads();
    fn GetTotalNumberThreads();
    fn GetThreadIdsByIndex();
    fn GetThreadIdByProcessor();
    fn GetCurrentThreadDataOffset();
    fn GetThreadIdByDataOffset();
    fn GetCurrentThreadTeb();
    fn GetThreadIdByTeb();
    fn GetCurrentThreadSystemId();
    fn GetThreadIdBySystemId();
    fn GetCurrentThreadHandle();
    fn GetThreadIdByHandle();
    fn GetNumberProcesses();
    fn GetProcessIdsByIndex();
    fn GetCurrentProcessDataOffset();
    fn GetProcessIdByDataOffset();
    fn GetCurrentProcessPeb();
    fn GetProcessIdByPeb();
    fn GetCurrentProcessSystemId();
    fn GetProcessIdBySystemId();
    fn GetCurrentProcessHandle();
    fn GetProcessIdByHandle();
    fn GetCurrentProcessExecutableName();
    fn GetCurrentProcessUpTime();
    fn GetImplicitThreadDataOffset();
    fn SetImplicitThreadDataOffset();
    fn GetImplicitProcessDataOffset();
    fn SetImplicitProcessDataOffset();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugSystemObjects2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugSystemObjects2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugSystemObjects2Vtbl {
        unsafe extern "system" fn GetEventThread<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEventProcess<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentThreadId<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetCurrentThreadId<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentProcessId<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetCurrentProcessId<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberThreads<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTotalNumberThreads<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, total: *mut u32, largestprocess: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetThreadIdsByIndex<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetThreadIdByProcessor<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, processor: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentThreadDataOffset<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetThreadIdByDataOffset<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentThreadTeb<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetThreadIdByTeb<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentThreadSystemId<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, sysid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetThreadIdBySystemId<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, sysid: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentThreadHandle<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetThreadIdByHandle<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberProcesses<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetProcessIdsByIndex<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentProcessDataOffset<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetProcessIdByDataOffset<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentProcessPeb<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetProcessIdByPeb<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentProcessSystemId<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, sysid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetProcessIdBySystemId<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, sysid: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentProcessHandle<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetProcessIdByHandle<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentProcessExecutableName<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, exesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentProcessUpTime<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, uptime: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetImplicitThreadDataOffset<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetImplicitThreadDataOffset<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetImplicitProcessDataOffset<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetImplicitProcessDataOffset<Impl: IDebugSystemObjects2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetEventThread::<Impl, IMPL_OFFSET>,
            GetEventProcess::<Impl, IMPL_OFFSET>,
            GetCurrentThreadId::<Impl, IMPL_OFFSET>,
            SetCurrentThreadId::<Impl, IMPL_OFFSET>,
            GetCurrentProcessId::<Impl, IMPL_OFFSET>,
            SetCurrentProcessId::<Impl, IMPL_OFFSET>,
            GetNumberThreads::<Impl, IMPL_OFFSET>,
            GetTotalNumberThreads::<Impl, IMPL_OFFSET>,
            GetThreadIdsByIndex::<Impl, IMPL_OFFSET>,
            GetThreadIdByProcessor::<Impl, IMPL_OFFSET>,
            GetCurrentThreadDataOffset::<Impl, IMPL_OFFSET>,
            GetThreadIdByDataOffset::<Impl, IMPL_OFFSET>,
            GetCurrentThreadTeb::<Impl, IMPL_OFFSET>,
            GetThreadIdByTeb::<Impl, IMPL_OFFSET>,
            GetCurrentThreadSystemId::<Impl, IMPL_OFFSET>,
            GetThreadIdBySystemId::<Impl, IMPL_OFFSET>,
            GetCurrentThreadHandle::<Impl, IMPL_OFFSET>,
            GetThreadIdByHandle::<Impl, IMPL_OFFSET>,
            GetNumberProcesses::<Impl, IMPL_OFFSET>,
            GetProcessIdsByIndex::<Impl, IMPL_OFFSET>,
            GetCurrentProcessDataOffset::<Impl, IMPL_OFFSET>,
            GetProcessIdByDataOffset::<Impl, IMPL_OFFSET>,
            GetCurrentProcessPeb::<Impl, IMPL_OFFSET>,
            GetProcessIdByPeb::<Impl, IMPL_OFFSET>,
            GetCurrentProcessSystemId::<Impl, IMPL_OFFSET>,
            GetProcessIdBySystemId::<Impl, IMPL_OFFSET>,
            GetCurrentProcessHandle::<Impl, IMPL_OFFSET>,
            GetProcessIdByHandle::<Impl, IMPL_OFFSET>,
            GetCurrentProcessExecutableName::<Impl, IMPL_OFFSET>,
            GetCurrentProcessUpTime::<Impl, IMPL_OFFSET>,
            GetImplicitThreadDataOffset::<Impl, IMPL_OFFSET>,
            SetImplicitThreadDataOffset::<Impl, IMPL_OFFSET>,
            GetImplicitProcessDataOffset::<Impl, IMPL_OFFSET>,
            SetImplicitProcessDataOffset::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugSystemObjects2 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugSystemObjects3Impl: Sized {
    fn GetEventThread();
    fn GetEventProcess();
    fn GetCurrentThreadId();
    fn SetCurrentThreadId();
    fn GetCurrentProcessId();
    fn SetCurrentProcessId();
    fn GetNumberThreads();
    fn GetTotalNumberThreads();
    fn GetThreadIdsByIndex();
    fn GetThreadIdByProcessor();
    fn GetCurrentThreadDataOffset();
    fn GetThreadIdByDataOffset();
    fn GetCurrentThreadTeb();
    fn GetThreadIdByTeb();
    fn GetCurrentThreadSystemId();
    fn GetThreadIdBySystemId();
    fn GetCurrentThreadHandle();
    fn GetThreadIdByHandle();
    fn GetNumberProcesses();
    fn GetProcessIdsByIndex();
    fn GetCurrentProcessDataOffset();
    fn GetProcessIdByDataOffset();
    fn GetCurrentProcessPeb();
    fn GetProcessIdByPeb();
    fn GetCurrentProcessSystemId();
    fn GetProcessIdBySystemId();
    fn GetCurrentProcessHandle();
    fn GetProcessIdByHandle();
    fn GetCurrentProcessExecutableName();
    fn GetCurrentProcessUpTime();
    fn GetImplicitThreadDataOffset();
    fn SetImplicitThreadDataOffset();
    fn GetImplicitProcessDataOffset();
    fn SetImplicitProcessDataOffset();
    fn GetEventSystem();
    fn GetCurrentSystemId();
    fn SetCurrentSystemId();
    fn GetNumberSystems();
    fn GetSystemIdsByIndex();
    fn GetTotalNumberThreadsAndProcesses();
    fn GetCurrentSystemServer();
    fn GetSystemByServer();
    fn GetCurrentSystemServerName();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugSystemObjects3Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugSystemObjects3Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugSystemObjects3Vtbl {
        unsafe extern "system" fn GetEventThread<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEventProcess<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentThreadId<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetCurrentThreadId<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentProcessId<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetCurrentProcessId<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberThreads<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTotalNumberThreads<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, total: *mut u32, largestprocess: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetThreadIdsByIndex<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetThreadIdByProcessor<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, processor: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentThreadDataOffset<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetThreadIdByDataOffset<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentThreadTeb<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetThreadIdByTeb<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentThreadSystemId<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, sysid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetThreadIdBySystemId<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, sysid: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentThreadHandle<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetThreadIdByHandle<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberProcesses<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetProcessIdsByIndex<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentProcessDataOffset<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetProcessIdByDataOffset<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentProcessPeb<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetProcessIdByPeb<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentProcessSystemId<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, sysid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetProcessIdBySystemId<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, sysid: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentProcessHandle<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetProcessIdByHandle<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentProcessExecutableName<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, exesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentProcessUpTime<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, uptime: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetImplicitThreadDataOffset<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetImplicitThreadDataOffset<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetImplicitProcessDataOffset<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetImplicitProcessDataOffset<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEventSystem<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentSystemId<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetCurrentSystemId<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberSystems<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSystemIdsByIndex<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, ids: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTotalNumberThreadsAndProcesses<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, totalthreads: *mut u32, totalprocesses: *mut u32, largestprocessthreads: *mut u32, largestsystemthreads: *mut u32, largestsystemprocesses: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentSystemServer<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSystemByServer<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentSystemServerName<Impl: IDebugSystemObjects3Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetEventThread::<Impl, IMPL_OFFSET>,
            GetEventProcess::<Impl, IMPL_OFFSET>,
            GetCurrentThreadId::<Impl, IMPL_OFFSET>,
            SetCurrentThreadId::<Impl, IMPL_OFFSET>,
            GetCurrentProcessId::<Impl, IMPL_OFFSET>,
            SetCurrentProcessId::<Impl, IMPL_OFFSET>,
            GetNumberThreads::<Impl, IMPL_OFFSET>,
            GetTotalNumberThreads::<Impl, IMPL_OFFSET>,
            GetThreadIdsByIndex::<Impl, IMPL_OFFSET>,
            GetThreadIdByProcessor::<Impl, IMPL_OFFSET>,
            GetCurrentThreadDataOffset::<Impl, IMPL_OFFSET>,
            GetThreadIdByDataOffset::<Impl, IMPL_OFFSET>,
            GetCurrentThreadTeb::<Impl, IMPL_OFFSET>,
            GetThreadIdByTeb::<Impl, IMPL_OFFSET>,
            GetCurrentThreadSystemId::<Impl, IMPL_OFFSET>,
            GetThreadIdBySystemId::<Impl, IMPL_OFFSET>,
            GetCurrentThreadHandle::<Impl, IMPL_OFFSET>,
            GetThreadIdByHandle::<Impl, IMPL_OFFSET>,
            GetNumberProcesses::<Impl, IMPL_OFFSET>,
            GetProcessIdsByIndex::<Impl, IMPL_OFFSET>,
            GetCurrentProcessDataOffset::<Impl, IMPL_OFFSET>,
            GetProcessIdByDataOffset::<Impl, IMPL_OFFSET>,
            GetCurrentProcessPeb::<Impl, IMPL_OFFSET>,
            GetProcessIdByPeb::<Impl, IMPL_OFFSET>,
            GetCurrentProcessSystemId::<Impl, IMPL_OFFSET>,
            GetProcessIdBySystemId::<Impl, IMPL_OFFSET>,
            GetCurrentProcessHandle::<Impl, IMPL_OFFSET>,
            GetProcessIdByHandle::<Impl, IMPL_OFFSET>,
            GetCurrentProcessExecutableName::<Impl, IMPL_OFFSET>,
            GetCurrentProcessUpTime::<Impl, IMPL_OFFSET>,
            GetImplicitThreadDataOffset::<Impl, IMPL_OFFSET>,
            SetImplicitThreadDataOffset::<Impl, IMPL_OFFSET>,
            GetImplicitProcessDataOffset::<Impl, IMPL_OFFSET>,
            SetImplicitProcessDataOffset::<Impl, IMPL_OFFSET>,
            GetEventSystem::<Impl, IMPL_OFFSET>,
            GetCurrentSystemId::<Impl, IMPL_OFFSET>,
            SetCurrentSystemId::<Impl, IMPL_OFFSET>,
            GetNumberSystems::<Impl, IMPL_OFFSET>,
            GetSystemIdsByIndex::<Impl, IMPL_OFFSET>,
            GetTotalNumberThreadsAndProcesses::<Impl, IMPL_OFFSET>,
            GetCurrentSystemServer::<Impl, IMPL_OFFSET>,
            GetSystemByServer::<Impl, IMPL_OFFSET>,
            GetCurrentSystemServerName::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugSystemObjects3 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugSystemObjects4Impl: Sized {
    fn GetEventThread();
    fn GetEventProcess();
    fn GetCurrentThreadId();
    fn SetCurrentThreadId();
    fn GetCurrentProcessId();
    fn SetCurrentProcessId();
    fn GetNumberThreads();
    fn GetTotalNumberThreads();
    fn GetThreadIdsByIndex();
    fn GetThreadIdByProcessor();
    fn GetCurrentThreadDataOffset();
    fn GetThreadIdByDataOffset();
    fn GetCurrentThreadTeb();
    fn GetThreadIdByTeb();
    fn GetCurrentThreadSystemId();
    fn GetThreadIdBySystemId();
    fn GetCurrentThreadHandle();
    fn GetThreadIdByHandle();
    fn GetNumberProcesses();
    fn GetProcessIdsByIndex();
    fn GetCurrentProcessDataOffset();
    fn GetProcessIdByDataOffset();
    fn GetCurrentProcessPeb();
    fn GetProcessIdByPeb();
    fn GetCurrentProcessSystemId();
    fn GetProcessIdBySystemId();
    fn GetCurrentProcessHandle();
    fn GetProcessIdByHandle();
    fn GetCurrentProcessExecutableName();
    fn GetCurrentProcessUpTime();
    fn GetImplicitThreadDataOffset();
    fn SetImplicitThreadDataOffset();
    fn GetImplicitProcessDataOffset();
    fn SetImplicitProcessDataOffset();
    fn GetEventSystem();
    fn GetCurrentSystemId();
    fn SetCurrentSystemId();
    fn GetNumberSystems();
    fn GetSystemIdsByIndex();
    fn GetTotalNumberThreadsAndProcesses();
    fn GetCurrentSystemServer();
    fn GetSystemByServer();
    fn GetCurrentSystemServerName();
    fn GetCurrentProcessExecutableNameWide();
    fn GetCurrentSystemServerNameWide();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugSystemObjects4Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugSystemObjects4Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugSystemObjects4Vtbl {
        unsafe extern "system" fn GetEventThread<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEventProcess<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentThreadId<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetCurrentThreadId<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentProcessId<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetCurrentProcessId<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberThreads<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTotalNumberThreads<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, total: *mut u32, largestprocess: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetThreadIdsByIndex<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetThreadIdByProcessor<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, processor: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentThreadDataOffset<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetThreadIdByDataOffset<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentThreadTeb<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetThreadIdByTeb<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentThreadSystemId<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, sysid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetThreadIdBySystemId<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, sysid: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentThreadHandle<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetThreadIdByHandle<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberProcesses<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetProcessIdsByIndex<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentProcessDataOffset<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetProcessIdByDataOffset<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentProcessPeb<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetProcessIdByPeb<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentProcessSystemId<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, sysid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetProcessIdBySystemId<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, sysid: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentProcessHandle<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetProcessIdByHandle<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, handle: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentProcessExecutableName<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, exesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentProcessUpTime<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, uptime: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetImplicitThreadDataOffset<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetImplicitThreadDataOffset<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetImplicitProcessDataOffset<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetImplicitProcessDataOffset<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, offset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEventSystem<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentSystemId<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetCurrentSystemId<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, id: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberSystems<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSystemIdsByIndex<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, ids: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTotalNumberThreadsAndProcesses<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, totalthreads: *mut u32, totalprocesses: *mut u32, largestprocessthreads: *mut u32, largestsystemthreads: *mut u32, largestsystemprocesses: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentSystemServer<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSystemByServer<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, server: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentSystemServerName<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentProcessExecutableNameWide<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, exesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentSystemServerNameWide<Impl: IDebugSystemObjects4Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetEventThread::<Impl, IMPL_OFFSET>,
            GetEventProcess::<Impl, IMPL_OFFSET>,
            GetCurrentThreadId::<Impl, IMPL_OFFSET>,
            SetCurrentThreadId::<Impl, IMPL_OFFSET>,
            GetCurrentProcessId::<Impl, IMPL_OFFSET>,
            SetCurrentProcessId::<Impl, IMPL_OFFSET>,
            GetNumberThreads::<Impl, IMPL_OFFSET>,
            GetTotalNumberThreads::<Impl, IMPL_OFFSET>,
            GetThreadIdsByIndex::<Impl, IMPL_OFFSET>,
            GetThreadIdByProcessor::<Impl, IMPL_OFFSET>,
            GetCurrentThreadDataOffset::<Impl, IMPL_OFFSET>,
            GetThreadIdByDataOffset::<Impl, IMPL_OFFSET>,
            GetCurrentThreadTeb::<Impl, IMPL_OFFSET>,
            GetThreadIdByTeb::<Impl, IMPL_OFFSET>,
            GetCurrentThreadSystemId::<Impl, IMPL_OFFSET>,
            GetThreadIdBySystemId::<Impl, IMPL_OFFSET>,
            GetCurrentThreadHandle::<Impl, IMPL_OFFSET>,
            GetThreadIdByHandle::<Impl, IMPL_OFFSET>,
            GetNumberProcesses::<Impl, IMPL_OFFSET>,
            GetProcessIdsByIndex::<Impl, IMPL_OFFSET>,
            GetCurrentProcessDataOffset::<Impl, IMPL_OFFSET>,
            GetProcessIdByDataOffset::<Impl, IMPL_OFFSET>,
            GetCurrentProcessPeb::<Impl, IMPL_OFFSET>,
            GetProcessIdByPeb::<Impl, IMPL_OFFSET>,
            GetCurrentProcessSystemId::<Impl, IMPL_OFFSET>,
            GetProcessIdBySystemId::<Impl, IMPL_OFFSET>,
            GetCurrentProcessHandle::<Impl, IMPL_OFFSET>,
            GetProcessIdByHandle::<Impl, IMPL_OFFSET>,
            GetCurrentProcessExecutableName::<Impl, IMPL_OFFSET>,
            GetCurrentProcessUpTime::<Impl, IMPL_OFFSET>,
            GetImplicitThreadDataOffset::<Impl, IMPL_OFFSET>,
            SetImplicitThreadDataOffset::<Impl, IMPL_OFFSET>,
            GetImplicitProcessDataOffset::<Impl, IMPL_OFFSET>,
            SetImplicitProcessDataOffset::<Impl, IMPL_OFFSET>,
            GetEventSystem::<Impl, IMPL_OFFSET>,
            GetCurrentSystemId::<Impl, IMPL_OFFSET>,
            SetCurrentSystemId::<Impl, IMPL_OFFSET>,
            GetNumberSystems::<Impl, IMPL_OFFSET>,
            GetSystemIdsByIndex::<Impl, IMPL_OFFSET>,
            GetTotalNumberThreadsAndProcesses::<Impl, IMPL_OFFSET>,
            GetCurrentSystemServer::<Impl, IMPL_OFFSET>,
            GetSystemByServer::<Impl, IMPL_OFFSET>,
            GetCurrentSystemServerName::<Impl, IMPL_OFFSET>,
            GetCurrentProcessExecutableNameWide::<Impl, IMPL_OFFSET>,
            GetCurrentSystemServerNameWide::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugSystemObjects4 as ::windows::core::Interface>::IID
    }
}
pub trait IDebugThreadCall32Impl: Sized {
    fn ThreadCallHandler();
}
impl IDebugThreadCall32Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugThreadCall32Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugThreadCall32Vtbl {
        unsafe extern "system" fn ThreadCallHandler<Impl: IDebugThreadCall32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwparam1: u32, dwparam2: u32, dwparam3: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, ThreadCallHandler::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugThreadCall32 as ::windows::core::Interface>::IID
    }
}
pub trait IDebugThreadCall64Impl: Sized {
    fn ThreadCallHandler();
}
impl IDebugThreadCall64Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDebugThreadCall64Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDebugThreadCall64Vtbl {
        unsafe extern "system" fn ThreadCallHandler<Impl: IDebugThreadCall64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwparam1: u64, dwparam2: u64, dwparam3: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, ThreadCallHandler::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDebugThreadCall64 as ::windows::core::Interface>::IID
    }
}
pub trait IDynamicConceptProviderConceptImpl: Sized {
    fn GetConcept();
    fn SetConcept();
    fn NotifyParent();
    fn NotifyParentChange();
    fn NotifyDestruct();
}
impl IDynamicConceptProviderConceptVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDynamicConceptProviderConceptImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDynamicConceptProviderConceptVtbl {
        unsafe extern "system" fn GetConcept<Impl: IDynamicConceptProviderConceptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, contextobject: ::windows::core::RawPtr, conceptid: *const ::windows::core::GUID, conceptinterface: *mut *mut ::core::ffi::c_void, conceptmetadata: *mut ::windows::core::RawPtr, hasconcept: *mut bool) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetConcept<Impl: IDynamicConceptProviderConceptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, contextobject: ::windows::core::RawPtr, conceptid: *const ::windows::core::GUID, conceptinterface: *mut ::core::ffi::c_void, conceptmetadata: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn NotifyParent<Impl: IDynamicConceptProviderConceptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, parentmodel: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn NotifyParentChange<Impl: IDynamicConceptProviderConceptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, parentmodel: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn NotifyDestruct<Impl: IDynamicConceptProviderConceptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetConcept::<Impl, IMPL_OFFSET>, SetConcept::<Impl, IMPL_OFFSET>, NotifyParent::<Impl, IMPL_OFFSET>, NotifyParentChange::<Impl, IMPL_OFFSET>, NotifyDestruct::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDynamicConceptProviderConcept as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IDynamicKeyProviderConceptImpl: Sized {
    fn GetKey();
    fn SetKey();
    fn EnumerateKeys();
}
#[cfg(feature = "Win32_Foundation")]
impl IDynamicKeyProviderConceptVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IDynamicKeyProviderConceptImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IDynamicKeyProviderConceptVtbl {
        unsafe extern "system" fn GetKey<Impl: IDynamicKeyProviderConceptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, contextobject: ::windows::core::RawPtr, key: super::super::super::Foundation::PWSTR, keyvalue: *mut ::windows::core::RawPtr, metadata: *mut ::windows::core::RawPtr, haskey: *mut bool) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetKey<Impl: IDynamicKeyProviderConceptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, contextobject: ::windows::core::RawPtr, key: super::super::super::Foundation::PWSTR, keyvalue: ::windows::core::RawPtr, metadata: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnumerateKeys<Impl: IDynamicKeyProviderConceptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, contextobject: ::windows::core::RawPtr, ppenumerator: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetKey::<Impl, IMPL_OFFSET>, SetKey::<Impl, IMPL_OFFSET>, EnumerateKeys::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IDynamicKeyProviderConcept as ::windows::core::Interface>::IID
    }
}
pub trait IEnumDebugApplicationNodesImpl: Sized {
    fn Next();
    fn Skip();
    fn Reset();
    fn Clone();
}
impl IEnumDebugApplicationNodesVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IEnumDebugApplicationNodesImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IEnumDebugApplicationNodesVtbl {
        unsafe extern "system" fn Next<Impl: IEnumDebugApplicationNodesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32, pprddp: *mut ::windows::core::RawPtr, pceltfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Skip<Impl: IEnumDebugApplicationNodesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Reset<Impl: IEnumDebugApplicationNodesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Clone<Impl: IEnumDebugApplicationNodesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pperddp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Next::<Impl, IMPL_OFFSET>, Skip::<Impl, IMPL_OFFSET>, Reset::<Impl, IMPL_OFFSET>, Clone::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IEnumDebugApplicationNodes as ::windows::core::Interface>::IID
    }
}
pub trait IEnumDebugCodeContextsImpl: Sized {
    fn Next();
    fn Skip();
    fn Reset();
    fn Clone();
}
impl IEnumDebugCodeContextsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IEnumDebugCodeContextsImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IEnumDebugCodeContextsVtbl {
        unsafe extern "system" fn Next<Impl: IEnumDebugCodeContextsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32, pscc: *mut ::windows::core::RawPtr, pceltfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Skip<Impl: IEnumDebugCodeContextsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Reset<Impl: IEnumDebugCodeContextsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Clone<Impl: IEnumDebugCodeContextsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppescc: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Next::<Impl, IMPL_OFFSET>, Skip::<Impl, IMPL_OFFSET>, Reset::<Impl, IMPL_OFFSET>, Clone::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IEnumDebugCodeContexts as ::windows::core::Interface>::IID
    }
}
pub trait IEnumDebugExpressionContextsImpl: Sized {
    fn Next();
    fn Skip();
    fn Reset();
    fn Clone();
}
impl IEnumDebugExpressionContextsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IEnumDebugExpressionContextsImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IEnumDebugExpressionContextsVtbl {
        unsafe extern "system" fn Next<Impl: IEnumDebugExpressionContextsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32, ppdec: *mut ::windows::core::RawPtr, pceltfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Skip<Impl: IEnumDebugExpressionContextsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Reset<Impl: IEnumDebugExpressionContextsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Clone<Impl: IEnumDebugExpressionContextsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppedec: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Next::<Impl, IMPL_OFFSET>, Skip::<Impl, IMPL_OFFSET>, Reset::<Impl, IMPL_OFFSET>, Clone::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IEnumDebugExpressionContexts as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole"))]
pub trait IEnumDebugExtendedPropertyInfoImpl: Sized {
    fn Next();
    fn Skip();
    fn Reset();
    fn Clone();
    fn GetCount();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Ole"))]
impl IEnumDebugExtendedPropertyInfoVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IEnumDebugExtendedPropertyInfoImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IEnumDebugExtendedPropertyInfoVtbl {
        unsafe extern "system" fn Next<Impl: IEnumDebugExtendedPropertyInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32, rgextendedpropertyinfo: *mut ExtendedDebugPropertyInfo, pceltfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Skip<Impl: IEnumDebugExtendedPropertyInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Reset<Impl: IEnumDebugExtendedPropertyInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Clone<Impl: IEnumDebugExtendedPropertyInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pedpe: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCount<Impl: IEnumDebugExtendedPropertyInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcelt: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Next::<Impl, IMPL_OFFSET>, Skip::<Impl, IMPL_OFFSET>, Reset::<Impl, IMPL_OFFSET>, Clone::<Impl, IMPL_OFFSET>, GetCount::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IEnumDebugExtendedPropertyInfo as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IEnumDebugPropertyInfoImpl: Sized {
    fn Next();
    fn Skip();
    fn Reset();
    fn Clone();
    fn GetCount();
}
#[cfg(feature = "Win32_Foundation")]
impl IEnumDebugPropertyInfoVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IEnumDebugPropertyInfoImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IEnumDebugPropertyInfoVtbl {
        unsafe extern "system" fn Next<Impl: IEnumDebugPropertyInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32, pi: *mut DebugPropertyInfo, pceltsfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Skip<Impl: IEnumDebugPropertyInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Reset<Impl: IEnumDebugPropertyInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Clone<Impl: IEnumDebugPropertyInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppepi: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCount<Impl: IEnumDebugPropertyInfoImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcelt: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Next::<Impl, IMPL_OFFSET>, Skip::<Impl, IMPL_OFFSET>, Reset::<Impl, IMPL_OFFSET>, Clone::<Impl, IMPL_OFFSET>, GetCount::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IEnumDebugPropertyInfo as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IEnumDebugStackFramesImpl: Sized {
    fn Next();
    fn Skip();
    fn Reset();
    fn Clone();
}
#[cfg(feature = "Win32_Foundation")]
impl IEnumDebugStackFramesVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IEnumDebugStackFramesImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IEnumDebugStackFramesVtbl {
        unsafe extern "system" fn Next<Impl: IEnumDebugStackFramesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32, prgdsfd: *mut DebugStackFrameDescriptor, pceltfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Skip<Impl: IEnumDebugStackFramesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Reset<Impl: IEnumDebugStackFramesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Clone<Impl: IEnumDebugStackFramesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppedsf: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Next::<Impl, IMPL_OFFSET>, Skip::<Impl, IMPL_OFFSET>, Reset::<Impl, IMPL_OFFSET>, Clone::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IEnumDebugStackFrames as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IEnumDebugStackFrames64Impl: Sized + IEnumDebugStackFramesImpl {
    fn Next64();
}
#[cfg(feature = "Win32_Foundation")]
impl IEnumDebugStackFrames64Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IEnumDebugStackFrames64Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IEnumDebugStackFrames64Vtbl {
        unsafe extern "system" fn Next64<Impl: IEnumDebugStackFrames64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32, prgdsfd: *mut DebugStackFrameDescriptor64, pceltfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Next::<Impl, IMPL_OFFSET>, Skip::<Impl, IMPL_OFFSET>, Reset::<Impl, IMPL_OFFSET>, Clone::<Impl, IMPL_OFFSET>, Next64::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IEnumDebugStackFrames64 as ::windows::core::Interface>::IID
    }
}
pub trait IEnumJsStackFramesImpl: Sized {
    fn Next();
    fn Reset();
}
impl IEnumJsStackFramesVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IEnumJsStackFramesImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IEnumJsStackFramesVtbl {
        unsafe extern "system" fn Next<Impl: IEnumJsStackFramesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, cframecount: u32, pframes: *mut __MIDL___MIDL_itf_jscript9diag_0000_0007_0001, pcfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Reset<Impl: IEnumJsStackFramesImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Next::<Impl, IMPL_OFFSET>, Reset::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IEnumJsStackFrames as ::windows::core::Interface>::IID
    }
}
pub trait IEnumRemoteDebugApplicationThreadsImpl: Sized {
    fn Next();
    fn Skip();
    fn Reset();
    fn Clone();
}
impl IEnumRemoteDebugApplicationThreadsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IEnumRemoteDebugApplicationThreadsImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IEnumRemoteDebugApplicationThreadsVtbl {
        unsafe extern "system" fn Next<Impl: IEnumRemoteDebugApplicationThreadsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32, pprdat: *mut ::windows::core::RawPtr, pceltfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Skip<Impl: IEnumRemoteDebugApplicationThreadsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Reset<Impl: IEnumRemoteDebugApplicationThreadsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Clone<Impl: IEnumRemoteDebugApplicationThreadsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pperdat: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Next::<Impl, IMPL_OFFSET>, Skip::<Impl, IMPL_OFFSET>, Reset::<Impl, IMPL_OFFSET>, Clone::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IEnumRemoteDebugApplicationThreads as ::windows::core::Interface>::IID
    }
}
pub trait IEnumRemoteDebugApplicationsImpl: Sized {
    fn Next();
    fn Skip();
    fn Reset();
    fn Clone();
}
impl IEnumRemoteDebugApplicationsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IEnumRemoteDebugApplicationsImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IEnumRemoteDebugApplicationsVtbl {
        unsafe extern "system" fn Next<Impl: IEnumRemoteDebugApplicationsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32, ppda: *mut ::windows::core::RawPtr, pceltfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Skip<Impl: IEnumRemoteDebugApplicationsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Reset<Impl: IEnumRemoteDebugApplicationsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Clone<Impl: IEnumRemoteDebugApplicationsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppessd: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Next::<Impl, IMPL_OFFSET>, Skip::<Impl, IMPL_OFFSET>, Reset::<Impl, IMPL_OFFSET>, Clone::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IEnumRemoteDebugApplications as ::windows::core::Interface>::IID
    }
}
pub trait IEquatableConceptImpl: Sized {
    fn AreObjectsEqual();
}
impl IEquatableConceptVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IEquatableConceptImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IEquatableConceptVtbl {
        unsafe extern "system" fn AreObjectsEqual<Impl: IEquatableConceptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, contextobject: ::windows::core::RawPtr, otherobject: ::windows::core::RawPtr, isequal: *mut bool) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, AreObjectsEqual::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IEquatableConcept as ::windows::core::Interface>::IID
    }
}
pub trait IHostDataModelAccessImpl: Sized {
    fn GetDataModel();
}
impl IHostDataModelAccessVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IHostDataModelAccessImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IHostDataModelAccessVtbl {
        unsafe extern "system" fn GetDataModel<Impl: IHostDataModelAccessImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, manager: *mut ::windows::core::RawPtr, host: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetDataModel::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IHostDataModelAccess as ::windows::core::Interface>::IID
    }
}
pub trait IIndexableConceptImpl: Sized {
    fn GetDimensionality();
    fn GetAt();
    fn SetAt();
}
impl IIndexableConceptVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IIndexableConceptImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IIndexableConceptVtbl {
        unsafe extern "system" fn GetDimensionality<Impl: IIndexableConceptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, contextobject: ::windows::core::RawPtr, dimensionality: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetAt<Impl: IIndexableConceptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, contextobject: ::windows::core::RawPtr, indexercount: u64, indexers: *const ::windows::core::RawPtr, object: *mut ::windows::core::RawPtr, metadata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetAt<Impl: IIndexableConceptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, contextobject: ::windows::core::RawPtr, indexercount: u64, indexers: *const ::windows::core::RawPtr, value: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetDimensionality::<Impl, IMPL_OFFSET>, GetAt::<Impl, IMPL_OFFSET>, SetAt::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IIndexableConcept as ::windows::core::Interface>::IID
    }
}
pub trait IIterableConceptImpl: Sized {
    fn GetDefaultIndexDimensionality();
    fn GetIterator();
}
impl IIterableConceptVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IIterableConceptImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IIterableConceptVtbl {
        unsafe extern "system" fn GetDefaultIndexDimensionality<Impl: IIterableConceptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, contextobject: ::windows::core::RawPtr, dimensionality: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetIterator<Impl: IIterableConceptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, contextobject: ::windows::core::RawPtr, iterator: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetDefaultIndexDimensionality::<Impl, IMPL_OFFSET>, GetIterator::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IIterableConcept as ::windows::core::Interface>::IID
    }
}
pub trait IJsDebugImpl: Sized {
    fn OpenVirtualProcess();
}
impl IJsDebugVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IJsDebugImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IJsDebugVtbl {
        unsafe extern "system" fn OpenVirtualProcess<Impl: IJsDebugImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, processid: u32, runtimejsbaseaddress: u64, pdatatarget: ::windows::core::RawPtr, ppprocess: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, OpenVirtualProcess::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IJsDebug as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IJsDebugBreakPointImpl: Sized {
    fn IsEnabled();
    fn Enable();
    fn Disable();
    fn Delete();
    fn GetDocumentPosition();
}
#[cfg(feature = "Win32_Foundation")]
impl IJsDebugBreakPointVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IJsDebugBreakPointImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IJsDebugBreakPointVtbl {
        unsafe extern "system" fn IsEnabled<Impl: IJsDebugBreakPointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pisenabled: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Enable<Impl: IJsDebugBreakPointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Disable<Impl: IJsDebugBreakPointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Delete<Impl: IJsDebugBreakPointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDocumentPosition<Impl: IJsDebugBreakPointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdocumentid: *mut u64, pcharacteroffset: *mut u32, pstatementcharcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, IsEnabled::<Impl, IMPL_OFFSET>, Enable::<Impl, IMPL_OFFSET>, Disable::<Impl, IMPL_OFFSET>, Delete::<Impl, IMPL_OFFSET>, GetDocumentPosition::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IJsDebugBreakPoint as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IJsDebugDataTargetImpl: Sized {
    fn ReadMemory();
    fn WriteMemory();
    fn AllocateVirtualMemory();
    fn FreeVirtualMemory();
    fn GetTlsValue();
    fn ReadBSTR();
    fn ReadNullTerminatedString();
    fn CreateStackFrameEnumerator();
    fn GetThreadContext();
}
#[cfg(feature = "Win32_Foundation")]
impl IJsDebugDataTargetVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IJsDebugDataTargetImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IJsDebugDataTargetVtbl {
        unsafe extern "system" fn ReadMemory<Impl: IJsDebugDataTargetImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, address: u64, flags: JsDebugReadMemoryFlags, pbuffer: *mut u8, size: u32, pbytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn WriteMemory<Impl: IJsDebugDataTargetImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, address: u64, pmemory: *const u8, size: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AllocateVirtualMemory<Impl: IJsDebugDataTargetImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, address: u64, size: u32, allocationtype: u32, pageprotection: u32, pallocatedaddress: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn FreeVirtualMemory<Impl: IJsDebugDataTargetImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, address: u64, size: u32, freetype: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTlsValue<Impl: IJsDebugDataTargetImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, threadid: u32, tlsindex: u32, pvalue: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadBSTR<Impl: IJsDebugDataTargetImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, address: u64, pstring: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ReadNullTerminatedString<Impl: IJsDebugDataTargetImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, address: u64, charactersize: u16, maxcharacters: u32, pstring: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateStackFrameEnumerator<Impl: IJsDebugDataTargetImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, threadid: u32, ppenumerator: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetThreadContext<Impl: IJsDebugDataTargetImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, threadid: u32, contextflags: u32, contextsize: u32, pcontext: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            ReadMemory::<Impl, IMPL_OFFSET>,
            WriteMemory::<Impl, IMPL_OFFSET>,
            AllocateVirtualMemory::<Impl, IMPL_OFFSET>,
            FreeVirtualMemory::<Impl, IMPL_OFFSET>,
            GetTlsValue::<Impl, IMPL_OFFSET>,
            ReadBSTR::<Impl, IMPL_OFFSET>,
            ReadNullTerminatedString::<Impl, IMPL_OFFSET>,
            CreateStackFrameEnumerator::<Impl, IMPL_OFFSET>,
            GetThreadContext::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IJsDebugDataTarget as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IJsDebugFrameImpl: Sized {
    fn GetStackRange();
    fn GetName();
    fn GetDocumentPositionWithId();
    fn GetDocumentPositionWithName();
    fn GetDebugProperty();
    fn GetReturnAddress();
    fn Evaluate();
}
#[cfg(feature = "Win32_Foundation")]
impl IJsDebugFrameVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IJsDebugFrameImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IJsDebugFrameVtbl {
        unsafe extern "system" fn GetStackRange<Impl: IJsDebugFrameImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstart: *mut u64, pend: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetName<Impl: IJsDebugFrameImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pname: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDocumentPositionWithId<Impl: IJsDebugFrameImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdocumentid: *mut u64, pcharacteroffset: *mut u32, pstatementcharcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDocumentPositionWithName<Impl: IJsDebugFrameImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdocumentname: *mut super::super::super::Foundation::BSTR, pline: *mut u32, pcolumn: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDebugProperty<Impl: IJsDebugFrameImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppdebugproperty: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetReturnAddress<Impl: IJsDebugFrameImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, preturnaddress: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Evaluate<Impl: IJsDebugFrameImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pexpressiontext: super::super::super::Foundation::PWSTR, ppdebugproperty: *mut ::windows::core::RawPtr, perror: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetStackRange::<Impl, IMPL_OFFSET>, GetName::<Impl, IMPL_OFFSET>, GetDocumentPositionWithId::<Impl, IMPL_OFFSET>, GetDocumentPositionWithName::<Impl, IMPL_OFFSET>, GetDebugProperty::<Impl, IMPL_OFFSET>, GetReturnAddress::<Impl, IMPL_OFFSET>, Evaluate::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IJsDebugFrame as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IJsDebugProcessImpl: Sized {
    fn CreateStackWalker();
    fn CreateBreakPoint();
    fn PerformAsyncBreak();
    fn GetExternalStepAddress();
}
#[cfg(feature = "Win32_Foundation")]
impl IJsDebugProcessVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IJsDebugProcessImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IJsDebugProcessVtbl {
        unsafe extern "system" fn CreateStackWalker<Impl: IJsDebugProcessImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, threadid: u32, ppstackwalker: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateBreakPoint<Impl: IJsDebugProcessImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, documentid: u64, characteroffset: u32, charactercount: u32, isenabled: super::super::super::Foundation::BOOL, ppdebugbreakpoint: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn PerformAsyncBreak<Impl: IJsDebugProcessImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, threadid: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetExternalStepAddress<Impl: IJsDebugProcessImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcodeaddress: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, CreateStackWalker::<Impl, IMPL_OFFSET>, CreateBreakPoint::<Impl, IMPL_OFFSET>, PerformAsyncBreak::<Impl, IMPL_OFFSET>, GetExternalStepAddress::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IJsDebugProcess as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IJsDebugPropertyImpl: Sized {
    fn GetPropertyInfo();
    fn GetMembers();
}
#[cfg(feature = "Win32_Foundation")]
impl IJsDebugPropertyVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IJsDebugPropertyImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IJsDebugPropertyVtbl {
        unsafe extern "system" fn GetPropertyInfo<Impl: IJsDebugPropertyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, nradix: u32, ppropertyinfo: *mut JsDebugPropertyInfo) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetMembers<Impl: IJsDebugPropertyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, members: JS_PROPERTY_MEMBERS, ppenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetPropertyInfo::<Impl, IMPL_OFFSET>, GetMembers::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IJsDebugProperty as ::windows::core::Interface>::IID
    }
}
pub trait IJsDebugStackWalkerImpl: Sized {
    fn GetNext();
}
impl IJsDebugStackWalkerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IJsDebugStackWalkerImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IJsDebugStackWalkerVtbl {
        unsafe extern "system" fn GetNext<Impl: IJsDebugStackWalkerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppframe: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetNext::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IJsDebugStackWalker as ::windows::core::Interface>::IID
    }
}
pub trait IJsEnumDebugPropertyImpl: Sized {
    fn Next();
    fn GetCount();
}
impl IJsEnumDebugPropertyVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IJsEnumDebugPropertyImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IJsEnumDebugPropertyVtbl {
        unsafe extern "system" fn Next<Impl: IJsEnumDebugPropertyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, count: u32, ppdebugproperty: *mut ::windows::core::RawPtr, pactualcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCount<Impl: IJsEnumDebugPropertyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Next::<Impl, IMPL_OFFSET>, GetCount::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IJsEnumDebugProperty as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IKeyEnumeratorImpl: Sized {
    fn Reset();
    fn GetNext();
}
#[cfg(feature = "Win32_Foundation")]
impl IKeyEnumeratorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IKeyEnumeratorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IKeyEnumeratorVtbl {
        unsafe extern "system" fn Reset<Impl: IKeyEnumeratorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNext<Impl: IKeyEnumeratorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, key: *mut super::super::super::Foundation::BSTR, value: *mut ::windows::core::RawPtr, metadata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Reset::<Impl, IMPL_OFFSET>, GetNext::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IKeyEnumerator as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IKeyStoreImpl: Sized {
    fn GetKey();
    fn SetKey();
    fn GetKeyValue();
    fn SetKeyValue();
    fn ClearKeys();
}
#[cfg(feature = "Win32_Foundation")]
impl IKeyStoreVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IKeyStoreImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IKeyStoreVtbl {
        unsafe extern "system" fn GetKey<Impl: IKeyStoreImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, key: super::super::super::Foundation::PWSTR, object: *mut ::windows::core::RawPtr, metadata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetKey<Impl: IKeyStoreImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, key: super::super::super::Foundation::PWSTR, object: ::windows::core::RawPtr, metadata: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetKeyValue<Impl: IKeyStoreImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, key: super::super::super::Foundation::PWSTR, object: *mut ::windows::core::RawPtr, metadata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetKeyValue<Impl: IKeyStoreImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, key: super::super::super::Foundation::PWSTR, object: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ClearKeys<Impl: IKeyStoreImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetKey::<Impl, IMPL_OFFSET>, SetKey::<Impl, IMPL_OFFSET>, GetKeyValue::<Impl, IMPL_OFFSET>, SetKeyValue::<Impl, IMPL_OFFSET>, ClearKeys::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IKeyStore as ::windows::core::Interface>::IID
    }
}
pub trait IMachineDebugManagerImpl: Sized {
    fn AddApplication();
    fn RemoveApplication();
    fn EnumApplications();
}
impl IMachineDebugManagerVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMachineDebugManagerImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMachineDebugManagerVtbl {
        unsafe extern "system" fn AddApplication<Impl: IMachineDebugManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pda: ::windows::core::RawPtr, pdwappcookie: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveApplication<Impl: IMachineDebugManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwappcookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnumApplications<Impl: IMachineDebugManagerImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppeda: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, AddApplication::<Impl, IMPL_OFFSET>, RemoveApplication::<Impl, IMPL_OFFSET>, EnumApplications::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMachineDebugManager as ::windows::core::Interface>::IID
    }
}
pub trait IMachineDebugManagerCookieImpl: Sized {
    fn AddApplication();
    fn RemoveApplication();
    fn EnumApplications();
}
impl IMachineDebugManagerCookieVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMachineDebugManagerCookieImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMachineDebugManagerCookieVtbl {
        unsafe extern "system" fn AddApplication<Impl: IMachineDebugManagerCookieImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pda: ::windows::core::RawPtr, dwdebugappcookie: u32, pdwappcookie: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveApplication<Impl: IMachineDebugManagerCookieImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwdebugappcookie: u32, dwappcookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnumApplications<Impl: IMachineDebugManagerCookieImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppeda: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, AddApplication::<Impl, IMPL_OFFSET>, RemoveApplication::<Impl, IMPL_OFFSET>, EnumApplications::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMachineDebugManagerCookie as ::windows::core::Interface>::IID
    }
}
pub trait IMachineDebugManagerEventsImpl: Sized {
    fn onAddApplication();
    fn onRemoveApplication();
}
impl IMachineDebugManagerEventsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IMachineDebugManagerEventsImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IMachineDebugManagerEventsVtbl {
        unsafe extern "system" fn onAddApplication<Impl: IMachineDebugManagerEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pda: ::windows::core::RawPtr, dwappcookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn onRemoveApplication<Impl: IMachineDebugManagerEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pda: ::windows::core::RawPtr, dwappcookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, onAddApplication::<Impl, IMPL_OFFSET>, onRemoveApplication::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IMachineDebugManagerEvents as ::windows::core::Interface>::IID
    }
}
pub trait IModelIteratorImpl: Sized {
    fn Reset();
    fn GetNext();
}
impl IModelIteratorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IModelIteratorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IModelIteratorVtbl {
        unsafe extern "system" fn Reset<Impl: IModelIteratorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNext<Impl: IModelIteratorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, object: *mut ::windows::core::RawPtr, dimensions: u64, indexers: *mut ::windows::core::RawPtr, metadata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Reset::<Impl, IMPL_OFFSET>, GetNext::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IModelIterator as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IModelKeyReferenceImpl: Sized {
    fn GetKeyName();
    fn GetOriginalObject();
    fn GetContextObject();
    fn GetKey();
    fn GetKeyValue();
    fn SetKey();
    fn SetKeyValue();
}
#[cfg(feature = "Win32_Foundation")]
impl IModelKeyReferenceVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IModelKeyReferenceImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IModelKeyReferenceVtbl {
        unsafe extern "system" fn GetKeyName<Impl: IModelKeyReferenceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, keyname: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetOriginalObject<Impl: IModelKeyReferenceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, originalobject: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetContextObject<Impl: IModelKeyReferenceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, containingobject: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetKey<Impl: IModelKeyReferenceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, object: *mut ::windows::core::RawPtr, metadata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetKeyValue<Impl: IModelKeyReferenceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, object: *mut ::windows::core::RawPtr, metadata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetKey<Impl: IModelKeyReferenceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, object: ::windows::core::RawPtr, metadata: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetKeyValue<Impl: IModelKeyReferenceImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, object: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetKeyName::<Impl, IMPL_OFFSET>, GetOriginalObject::<Impl, IMPL_OFFSET>, GetContextObject::<Impl, IMPL_OFFSET>, GetKey::<Impl, IMPL_OFFSET>, GetKeyValue::<Impl, IMPL_OFFSET>, SetKey::<Impl, IMPL_OFFSET>, SetKeyValue::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IModelKeyReference as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IModelKeyReference2Impl: Sized + IModelKeyReferenceImpl {
    fn OverrideContextObject();
}
#[cfg(feature = "Win32_Foundation")]
impl IModelKeyReference2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IModelKeyReference2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IModelKeyReference2Vtbl {
        unsafe extern "system" fn OverrideContextObject<Impl: IModelKeyReference2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, newcontextobject: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetKeyName::<Impl, IMPL_OFFSET>, GetOriginalObject::<Impl, IMPL_OFFSET>, GetContextObject::<Impl, IMPL_OFFSET>, GetKey::<Impl, IMPL_OFFSET>, GetKeyValue::<Impl, IMPL_OFFSET>, SetKey::<Impl, IMPL_OFFSET>, SetKeyValue::<Impl, IMPL_OFFSET>, OverrideContextObject::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IModelKeyReference2 as ::windows::core::Interface>::IID
    }
}
pub trait IModelMethodImpl: Sized {
    fn Call();
}
impl IModelMethodVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IModelMethodImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IModelMethodVtbl {
        unsafe extern "system" fn Call<Impl: IModelMethodImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcontextobject: ::windows::core::RawPtr, argcount: u64, pparguments: *const ::windows::core::RawPtr, ppresult: *mut ::windows::core::RawPtr, ppmetadata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Call::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IModelMethod as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IModelObjectImpl: Sized {
    fn GetContext();
    fn GetKind();
    fn GetIntrinsicValue();
    fn GetIntrinsicValueAs();
    fn GetKeyValue();
    fn SetKeyValue();
    fn EnumerateKeyValues();
    fn GetRawValue();
    fn EnumerateRawValues();
    fn Dereference();
    fn TryCastToRuntimeType();
    fn GetConcept();
    fn GetLocation();
    fn GetTypeInfo();
    fn GetTargetInfo();
    fn GetNumberOfParentModels();
    fn GetParentModel();
    fn AddParentModel();
    fn RemoveParentModel();
    fn GetKey();
    fn GetKeyReference();
    fn SetKey();
    fn ClearKeys();
    fn EnumerateKeys();
    fn EnumerateKeyReferences();
    fn SetConcept();
    fn ClearConcepts();
    fn GetRawReference();
    fn EnumerateRawReferences();
    fn SetContextForDataModel();
    fn GetContextForDataModel();
    fn Compare();
    fn IsEqualTo();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl IModelObjectVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IModelObjectImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IModelObjectVtbl {
        unsafe extern "system" fn GetContext<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, context: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetKind<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, kind: *mut ModelObjectKind) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetIntrinsicValue<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, intrinsicdata: *mut super::super::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetIntrinsicValueAs<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, vt: u16, intrinsicdata: *mut super::super::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetKeyValue<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, key: super::super::super::Foundation::PWSTR, object: *mut ::windows::core::RawPtr, metadata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetKeyValue<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, key: super::super::super::Foundation::PWSTR, object: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnumerateKeyValues<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, enumerator: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRawValue<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, kind: SymbolKind, name: super::super::super::Foundation::PWSTR, searchflags: u32, object: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnumerateRawValues<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, kind: SymbolKind, searchflags: u32, enumerator: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Dereference<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, object: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn TryCastToRuntimeType<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, runtimetypedobject: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetConcept<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, conceptid: *const ::windows::core::GUID, conceptinterface: *mut *mut ::core::ffi::c_void, conceptmetadata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLocation<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, location: *mut Location) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTypeInfo<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, r#type: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetTargetInfo<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, location: *mut Location, r#type: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberOfParentModels<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, nummodels: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetParentModel<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, i: u64, model: *mut ::windows::core::RawPtr, contextobject: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddParentModel<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, model: ::windows::core::RawPtr, contextobject: ::windows::core::RawPtr, r#override: u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveParentModel<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, model: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetKey<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, key: super::super::super::Foundation::PWSTR, object: *mut ::windows::core::RawPtr, metadata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetKeyReference<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, key: super::super::super::Foundation::PWSTR, objectreference: *mut ::windows::core::RawPtr, metadata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetKey<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, key: super::super::super::Foundation::PWSTR, object: ::windows::core::RawPtr, metadata: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ClearKeys<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnumerateKeys<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, enumerator: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnumerateKeyReferences<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, enumerator: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetConcept<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, conceptid: *const ::windows::core::GUID, conceptinterface: *mut ::core::ffi::c_void, conceptmetadata: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ClearConcepts<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRawReference<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, kind: SymbolKind, name: super::super::super::Foundation::PWSTR, searchflags: u32, object: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnumerateRawReferences<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, kind: SymbolKind, searchflags: u32, enumerator: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetContextForDataModel<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, datamodelobject: ::windows::core::RawPtr, context: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetContextForDataModel<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, datamodelobject: ::windows::core::RawPtr, context: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Compare<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, other: ::windows::core::RawPtr, ppresult: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn IsEqualTo<Impl: IModelObjectImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, other: ::windows::core::RawPtr, equal: *mut bool) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            GetContext::<Impl, IMPL_OFFSET>,
            GetKind::<Impl, IMPL_OFFSET>,
            GetIntrinsicValue::<Impl, IMPL_OFFSET>,
            GetIntrinsicValueAs::<Impl, IMPL_OFFSET>,
            GetKeyValue::<Impl, IMPL_OFFSET>,
            SetKeyValue::<Impl, IMPL_OFFSET>,
            EnumerateKeyValues::<Impl, IMPL_OFFSET>,
            GetRawValue::<Impl, IMPL_OFFSET>,
            EnumerateRawValues::<Impl, IMPL_OFFSET>,
            Dereference::<Impl, IMPL_OFFSET>,
            TryCastToRuntimeType::<Impl, IMPL_OFFSET>,
            GetConcept::<Impl, IMPL_OFFSET>,
            GetLocation::<Impl, IMPL_OFFSET>,
            GetTypeInfo::<Impl, IMPL_OFFSET>,
            GetTargetInfo::<Impl, IMPL_OFFSET>,
            GetNumberOfParentModels::<Impl, IMPL_OFFSET>,
            GetParentModel::<Impl, IMPL_OFFSET>,
            AddParentModel::<Impl, IMPL_OFFSET>,
            RemoveParentModel::<Impl, IMPL_OFFSET>,
            GetKey::<Impl, IMPL_OFFSET>,
            GetKeyReference::<Impl, IMPL_OFFSET>,
            SetKey::<Impl, IMPL_OFFSET>,
            ClearKeys::<Impl, IMPL_OFFSET>,
            EnumerateKeys::<Impl, IMPL_OFFSET>,
            EnumerateKeyReferences::<Impl, IMPL_OFFSET>,
            SetConcept::<Impl, IMPL_OFFSET>,
            ClearConcepts::<Impl, IMPL_OFFSET>,
            GetRawReference::<Impl, IMPL_OFFSET>,
            EnumerateRawReferences::<Impl, IMPL_OFFSET>,
            SetContextForDataModel::<Impl, IMPL_OFFSET>,
            GetContextForDataModel::<Impl, IMPL_OFFSET>,
            Compare::<Impl, IMPL_OFFSET>,
            IsEqualTo::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IModelObject as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IModelPropertyAccessorImpl: Sized {
    fn GetValue();
    fn SetValue();
}
#[cfg(feature = "Win32_Foundation")]
impl IModelPropertyAccessorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IModelPropertyAccessorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IModelPropertyAccessorVtbl {
        unsafe extern "system" fn GetValue<Impl: IModelPropertyAccessorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, key: super::super::super::Foundation::PWSTR, contextobject: ::windows::core::RawPtr, value: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetValue<Impl: IModelPropertyAccessorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, key: super::super::super::Foundation::PWSTR, contextobject: ::windows::core::RawPtr, value: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetValue::<Impl, IMPL_OFFSET>, SetValue::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IModelPropertyAccessor as ::windows::core::Interface>::IID
    }
}
pub trait IObjectSafetyImpl: Sized {
    fn GetInterfaceSafetyOptions();
    fn SetInterfaceSafetyOptions();
}
impl IObjectSafetyVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IObjectSafetyImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IObjectSafetyVtbl {
        unsafe extern "system" fn GetInterfaceSafetyOptions<Impl: IObjectSafetyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, riid: *const ::windows::core::GUID, pdwsupportedoptions: *mut u32, pdwenabledoptions: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetInterfaceSafetyOptions<Impl: IObjectSafetyImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, riid: *const ::windows::core::GUID, dwoptionsetmask: u32, dwenabledoptions: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetInterfaceSafetyOptions::<Impl, IMPL_OFFSET>, SetInterfaceSafetyOptions::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IObjectSafety as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
pub trait IPerPropertyBrowsing2Impl: Sized {
    fn GetDisplayString();
    fn MapPropertyToPage();
    fn GetPredefinedStrings();
    fn SetPredefinedValue();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
impl IPerPropertyBrowsing2Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IPerPropertyBrowsing2Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IPerPropertyBrowsing2Vtbl {
        unsafe extern "system" fn GetDisplayString<Impl: IPerPropertyBrowsing2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dispid: i32, pbstr: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn MapPropertyToPage<Impl: IPerPropertyBrowsing2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dispid: i32, pclsidproppage: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetPredefinedStrings<Impl: IPerPropertyBrowsing2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dispid: i32, pcastrings: *mut super::super::Ole::CALPOLESTR, pcacookies: *mut super::super::Ole::CADWORD) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetPredefinedValue<Impl: IPerPropertyBrowsing2Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dispid: i32, dwcookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetDisplayString::<Impl, IMPL_OFFSET>, MapPropertyToPage::<Impl, IMPL_OFFSET>, GetPredefinedStrings::<Impl, IMPL_OFFSET>, SetPredefinedValue::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IPerPropertyBrowsing2 as ::windows::core::Interface>::IID
    }
}
pub trait IPreferredRuntimeTypeConceptImpl: Sized {
    fn CastToPreferredRuntimeType();
}
impl IPreferredRuntimeTypeConceptVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IPreferredRuntimeTypeConceptImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IPreferredRuntimeTypeConceptVtbl {
        unsafe extern "system" fn CastToPreferredRuntimeType<Impl: IPreferredRuntimeTypeConceptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, contextobject: ::windows::core::RawPtr, object: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, CastToPreferredRuntimeType::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IPreferredRuntimeTypeConcept as ::windows::core::Interface>::IID
    }
}
pub trait IProcessDebugManager32Impl: Sized {
    fn CreateApplication();
    fn GetDefaultApplication();
    fn AddApplication();
    fn RemoveApplication();
    fn CreateDebugDocumentHelper();
}
impl IProcessDebugManager32Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IProcessDebugManager32Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IProcessDebugManager32Vtbl {
        unsafe extern "system" fn CreateApplication<Impl: IProcessDebugManager32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppda: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDefaultApplication<Impl: IProcessDebugManager32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppda: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddApplication<Impl: IProcessDebugManager32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pda: ::windows::core::RawPtr, pdwappcookie: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveApplication<Impl: IProcessDebugManager32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwappcookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateDebugDocumentHelper<Impl: IProcessDebugManager32Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, punkouter: *mut ::core::ffi::c_void, pddh: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, CreateApplication::<Impl, IMPL_OFFSET>, GetDefaultApplication::<Impl, IMPL_OFFSET>, AddApplication::<Impl, IMPL_OFFSET>, RemoveApplication::<Impl, IMPL_OFFSET>, CreateDebugDocumentHelper::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IProcessDebugManager32 as ::windows::core::Interface>::IID
    }
}
pub trait IProcessDebugManager64Impl: Sized {
    fn CreateApplication();
    fn GetDefaultApplication();
    fn AddApplication();
    fn RemoveApplication();
    fn CreateDebugDocumentHelper();
}
impl IProcessDebugManager64Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IProcessDebugManager64Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IProcessDebugManager64Vtbl {
        unsafe extern "system" fn CreateApplication<Impl: IProcessDebugManager64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppda: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDefaultApplication<Impl: IProcessDebugManager64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppda: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn AddApplication<Impl: IProcessDebugManager64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pda: ::windows::core::RawPtr, pdwappcookie: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn RemoveApplication<Impl: IProcessDebugManager64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwappcookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateDebugDocumentHelper<Impl: IProcessDebugManager64Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, punkouter: *mut ::core::ffi::c_void, pddh: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, CreateApplication::<Impl, IMPL_OFFSET>, GetDefaultApplication::<Impl, IMPL_OFFSET>, AddApplication::<Impl, IMPL_OFFSET>, RemoveApplication::<Impl, IMPL_OFFSET>, CreateDebugDocumentHelper::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IProcessDebugManager64 as ::windows::core::Interface>::IID
    }
}
pub trait IProvideExpressionContextsImpl: Sized {
    fn EnumExpressionContexts();
}
impl IProvideExpressionContextsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IProvideExpressionContextsImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IProvideExpressionContextsVtbl {
        unsafe extern "system" fn EnumExpressionContexts<Impl: IProvideExpressionContextsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppedec: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, EnumExpressionContexts::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IProvideExpressionContexts as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IRawEnumeratorImpl: Sized {
    fn Reset();
    fn GetNext();
}
#[cfg(feature = "Win32_Foundation")]
impl IRawEnumeratorVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IRawEnumeratorImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IRawEnumeratorVtbl {
        unsafe extern "system" fn Reset<Impl: IRawEnumeratorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNext<Impl: IRawEnumeratorImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, name: *mut super::super::super::Foundation::BSTR, kind: *mut SymbolKind, value: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Reset::<Impl, IMPL_OFFSET>, GetNext::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IRawEnumerator as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IRemoteDebugApplicationImpl: Sized {
    fn ResumeFromBreakPoint();
    fn CauseBreak();
    fn ConnectDebugger();
    fn DisconnectDebugger();
    fn GetDebugger();
    fn CreateInstanceAtApplication();
    fn QueryAlive();
    fn EnumThreads();
    fn GetName();
    fn GetRootNode();
    fn EnumGlobalExpressionContexts();
}
#[cfg(feature = "Win32_Foundation")]
impl IRemoteDebugApplicationVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IRemoteDebugApplicationImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IRemoteDebugApplicationVtbl {
        unsafe extern "system" fn ResumeFromBreakPoint<Impl: IRemoteDebugApplicationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prptfocus: ::windows::core::RawPtr, bra: BREAKRESUME_ACTION, era: ERRORRESUMEACTION) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CauseBreak<Impl: IRemoteDebugApplicationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn ConnectDebugger<Impl: IRemoteDebugApplicationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pad: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DisconnectDebugger<Impl: IRemoteDebugApplicationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDebugger<Impl: IRemoteDebugApplicationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pad: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateInstanceAtApplication<Impl: IRemoteDebugApplicationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rclsid: *const ::windows::core::GUID, punkouter: *mut ::core::ffi::c_void, dwclscontext: u32, riid: *const ::windows::core::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn QueryAlive<Impl: IRemoteDebugApplicationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnumThreads<Impl: IRemoteDebugApplicationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pperdat: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetName<Impl: IRemoteDebugApplicationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrname: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRootNode<Impl: IRemoteDebugApplicationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppdanroot: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnumGlobalExpressionContexts<Impl: IRemoteDebugApplicationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppedec: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            ResumeFromBreakPoint::<Impl, IMPL_OFFSET>,
            CauseBreak::<Impl, IMPL_OFFSET>,
            ConnectDebugger::<Impl, IMPL_OFFSET>,
            DisconnectDebugger::<Impl, IMPL_OFFSET>,
            GetDebugger::<Impl, IMPL_OFFSET>,
            CreateInstanceAtApplication::<Impl, IMPL_OFFSET>,
            QueryAlive::<Impl, IMPL_OFFSET>,
            EnumThreads::<Impl, IMPL_OFFSET>,
            GetName::<Impl, IMPL_OFFSET>,
            GetRootNode::<Impl, IMPL_OFFSET>,
            EnumGlobalExpressionContexts::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IRemoteDebugApplication as ::windows::core::Interface>::IID
    }
}
pub trait IRemoteDebugApplication110Impl: Sized {
    fn SetDebuggerOptions();
    fn GetCurrentDebuggerOptions();
    fn GetMainThread();
}
impl IRemoteDebugApplication110Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IRemoteDebugApplication110Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IRemoteDebugApplication110Vtbl {
        unsafe extern "system" fn SetDebuggerOptions<Impl: IRemoteDebugApplication110Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, mask: SCRIPT_DEBUGGER_OPTIONS, value: SCRIPT_DEBUGGER_OPTIONS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCurrentDebuggerOptions<Impl: IRemoteDebugApplication110Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcurrentoptions: *mut SCRIPT_DEBUGGER_OPTIONS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetMainThread<Impl: IRemoteDebugApplication110Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppthread: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, SetDebuggerOptions::<Impl, IMPL_OFFSET>, GetCurrentDebuggerOptions::<Impl, IMPL_OFFSET>, GetMainThread::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IRemoteDebugApplication110 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IRemoteDebugApplicationEventsImpl: Sized {
    fn OnConnectDebugger();
    fn OnDisconnectDebugger();
    fn OnSetName();
    fn OnDebugOutput();
    fn OnClose();
    fn OnEnterBreakPoint();
    fn OnLeaveBreakPoint();
    fn OnCreateThread();
    fn OnDestroyThread();
    fn OnBreakFlagChange();
}
#[cfg(feature = "Win32_Foundation")]
impl IRemoteDebugApplicationEventsVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IRemoteDebugApplicationEventsImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IRemoteDebugApplicationEventsVtbl {
        unsafe extern "system" fn OnConnectDebugger<Impl: IRemoteDebugApplicationEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pad: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OnDisconnectDebugger<Impl: IRemoteDebugApplicationEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OnSetName<Impl: IRemoteDebugApplicationEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstrname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OnDebugOutput<Impl: IRemoteDebugApplicationEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstr: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OnClose<Impl: IRemoteDebugApplicationEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OnEnterBreakPoint<Impl: IRemoteDebugApplicationEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prdat: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OnLeaveBreakPoint<Impl: IRemoteDebugApplicationEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prdat: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OnCreateThread<Impl: IRemoteDebugApplicationEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prdat: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OnDestroyThread<Impl: IRemoteDebugApplicationEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, prdat: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn OnBreakFlagChange<Impl: IRemoteDebugApplicationEventsImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, abf: u32, prdatsteppingthread: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            OnConnectDebugger::<Impl, IMPL_OFFSET>,
            OnDisconnectDebugger::<Impl, IMPL_OFFSET>,
            OnSetName::<Impl, IMPL_OFFSET>,
            OnDebugOutput::<Impl, IMPL_OFFSET>,
            OnClose::<Impl, IMPL_OFFSET>,
            OnEnterBreakPoint::<Impl, IMPL_OFFSET>,
            OnLeaveBreakPoint::<Impl, IMPL_OFFSET>,
            OnCreateThread::<Impl, IMPL_OFFSET>,
            OnDestroyThread::<Impl, IMPL_OFFSET>,
            OnBreakFlagChange::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IRemoteDebugApplicationEvents as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IRemoteDebugApplicationThreadImpl: Sized {
    fn GetSystemThreadId();
    fn GetApplication();
    fn EnumStackFrames();
    fn GetDescription();
    fn SetNextStatement();
    fn GetState();
    fn Suspend();
    fn Resume();
    fn GetSuspendCount();
}
#[cfg(feature = "Win32_Foundation")]
impl IRemoteDebugApplicationThreadVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IRemoteDebugApplicationThreadImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IRemoteDebugApplicationThreadVtbl {
        unsafe extern "system" fn GetSystemThreadId<Impl: IRemoteDebugApplicationThreadImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwthreadid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetApplication<Impl: IRemoteDebugApplicationThreadImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pprda: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn EnumStackFrames<Impl: IRemoteDebugApplicationThreadImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppedsf: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetDescription<Impl: IRemoteDebugApplicationThreadImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrdescription: *mut super::super::super::Foundation::BSTR, pbstrstate: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetNextStatement<Impl: IRemoteDebugApplicationThreadImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstackframe: ::windows::core::RawPtr, pcodecontext: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetState<Impl: IRemoteDebugApplicationThreadImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstate: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Suspend<Impl: IRemoteDebugApplicationThreadImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Resume<Impl: IRemoteDebugApplicationThreadImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSuspendCount<Impl: IRemoteDebugApplicationThreadImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetSystemThreadId::<Impl, IMPL_OFFSET>, GetApplication::<Impl, IMPL_OFFSET>, EnumStackFrames::<Impl, IMPL_OFFSET>, GetDescription::<Impl, IMPL_OFFSET>, SetNextStatement::<Impl, IMPL_OFFSET>, GetState::<Impl, IMPL_OFFSET>, Suspend::<Impl, IMPL_OFFSET>, Resume::<Impl, IMPL_OFFSET>, GetSuspendCount::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IRemoteDebugApplicationThread as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IRemoteDebugCriticalErrorEvent110Impl: Sized {
    fn GetErrorInfo();
}
#[cfg(feature = "Win32_Foundation")]
impl IRemoteDebugCriticalErrorEvent110Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IRemoteDebugCriticalErrorEvent110Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IRemoteDebugCriticalErrorEvent110Vtbl {
        unsafe extern "system" fn GetErrorInfo<Impl: IRemoteDebugCriticalErrorEvent110Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstrsource: *mut super::super::super::Foundation::BSTR, pmessageid: *mut i32, pbstrmessage: *mut super::super::super::Foundation::BSTR, pplocation: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetErrorInfo::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IRemoteDebugCriticalErrorEvent110 as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IRemoteDebugInfoEvent110Impl: Sized {
    fn GetEventInfo();
}
#[cfg(feature = "Win32_Foundation")]
impl IRemoteDebugInfoEvent110Vtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IRemoteDebugInfoEvent110Impl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IRemoteDebugInfoEvent110Vtbl {
        unsafe extern "system" fn GetEventInfo<Impl: IRemoteDebugInfoEvent110Impl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pmessagetype: *mut DEBUG_EVENT_INFO_TYPE, pbstrmessage: *mut super::super::super::Foundation::BSTR, pbstrurl: *mut super::super::super::Foundation::BSTR, pplocation: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetEventInfo::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IRemoteDebugInfoEvent110 as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IScriptEntryImpl: Sized + IScriptNodeImpl {
    fn GetText();
    fn SetText();
    fn GetBody();
    fn SetBody();
    fn GetName();
    fn SetName();
    fn GetItemName();
    fn SetItemName();
    fn GetSignature();
    fn SetSignature();
    fn GetRange();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl IScriptEntryVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IScriptEntryImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IScriptEntryVtbl {
        unsafe extern "system" fn GetText<Impl: IScriptEntryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstr: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetText<Impl: IScriptEntryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psz: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetBody<Impl: IScriptEntryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstr: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetBody<Impl: IScriptEntryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psz: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetName<Impl: IScriptEntryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstr: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetName<Impl: IScriptEntryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psz: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetItemName<Impl: IScriptEntryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstr: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetItemName<Impl: IScriptEntryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psz: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSignature<Impl: IScriptEntryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppti: *mut ::windows::core::RawPtr, pimethod: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSignature<Impl: IScriptEntryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pti: ::windows::core::RawPtr, imethod: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetRange<Impl: IScriptEntryImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pichmin: *mut u32, pcch: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            Alive::<Impl, IMPL_OFFSET>,
            Delete::<Impl, IMPL_OFFSET>,
            GetParent::<Impl, IMPL_OFFSET>,
            GetIndexInParent::<Impl, IMPL_OFFSET>,
            GetCookie::<Impl, IMPL_OFFSET>,
            GetNumberOfChildren::<Impl, IMPL_OFFSET>,
            GetChild::<Impl, IMPL_OFFSET>,
            GetLanguage::<Impl, IMPL_OFFSET>,
            CreateChildEntry::<Impl, IMPL_OFFSET>,
            CreateChildHandler::<Impl, IMPL_OFFSET>,
            GetText::<Impl, IMPL_OFFSET>,
            SetText::<Impl, IMPL_OFFSET>,
            GetBody::<Impl, IMPL_OFFSET>,
            SetBody::<Impl, IMPL_OFFSET>,
            GetName::<Impl, IMPL_OFFSET>,
            SetName::<Impl, IMPL_OFFSET>,
            GetItemName::<Impl, IMPL_OFFSET>,
            SetItemName::<Impl, IMPL_OFFSET>,
            GetSignature::<Impl, IMPL_OFFSET>,
            SetSignature::<Impl, IMPL_OFFSET>,
            GetRange::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IScriptEntry as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IScriptInvocationContextImpl: Sized {
    fn GetContextType();
    fn GetContextDescription();
    fn GetContextObject();
}
#[cfg(feature = "Win32_Foundation")]
impl IScriptInvocationContextVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IScriptInvocationContextImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IScriptInvocationContextVtbl {
        unsafe extern "system" fn GetContextType<Impl: IScriptInvocationContextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pinvocationcontexttype: *mut SCRIPT_INVOCATION_CONTEXT_TYPE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetContextDescription<Impl: IScriptInvocationContextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdescription: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetContextObject<Impl: IScriptInvocationContextImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppcontextobject: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetContextType::<Impl, IMPL_OFFSET>, GetContextDescription::<Impl, IMPL_OFFSET>, GetContextObject::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IScriptInvocationContext as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IScriptNodeImpl: Sized {
    fn Alive();
    fn Delete();
    fn GetParent();
    fn GetIndexInParent();
    fn GetCookie();
    fn GetNumberOfChildren();
    fn GetChild();
    fn GetLanguage();
    fn CreateChildEntry();
    fn CreateChildHandler();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl IScriptNodeVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IScriptNodeImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IScriptNodeVtbl {
        unsafe extern "system" fn Alive<Impl: IScriptNodeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Delete<Impl: IScriptNodeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetParent<Impl: IScriptNodeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ppsnparent: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetIndexInParent<Impl: IScriptNodeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pisn: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetCookie<Impl: IScriptNodeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdwcookie: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetNumberOfChildren<Impl: IScriptNodeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pcsn: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetChild<Impl: IScriptNodeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, isn: u32, ppsn: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetLanguage<Impl: IScriptNodeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstr: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateChildEntry<Impl: IScriptNodeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, isn: u32, dwcookie: u32, pszdelimiter: super::super::super::Foundation::PWSTR, ppse: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateChildHandler<Impl: IScriptNodeImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pszdefaultname: super::super::super::Foundation::PWSTR, prgpsznames: *const super::super::super::Foundation::PWSTR, cpsznames: u32, pszevent: super::super::super::Foundation::PWSTR, pszdelimiter: super::super::super::Foundation::PWSTR, ptisignature: ::windows::core::RawPtr, imethodsignature: u32, isn: u32, dwcookie: u32, ppse: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            Alive::<Impl, IMPL_OFFSET>,
            Delete::<Impl, IMPL_OFFSET>,
            GetParent::<Impl, IMPL_OFFSET>,
            GetIndexInParent::<Impl, IMPL_OFFSET>,
            GetCookie::<Impl, IMPL_OFFSET>,
            GetNumberOfChildren::<Impl, IMPL_OFFSET>,
            GetChild::<Impl, IMPL_OFFSET>,
            GetLanguage::<Impl, IMPL_OFFSET>,
            CreateChildEntry::<Impl, IMPL_OFFSET>,
            CreateChildHandler::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IScriptNode as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IScriptScriptletImpl: Sized + IScriptEntryImpl + IScriptNodeImpl {
    fn GetSubItemName();
    fn SetSubItemName();
    fn GetEventName();
    fn SetEventName();
    fn GetSimpleEventName();
    fn SetSimpleEventName();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl IScriptScriptletVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IScriptScriptletImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IScriptScriptletVtbl {
        unsafe extern "system" fn GetSubItemName<Impl: IScriptScriptletImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstr: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSubItemName<Impl: IScriptScriptletImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psz: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetEventName<Impl: IScriptScriptletImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstr: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetEventName<Impl: IScriptScriptletImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psz: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn GetSimpleEventName<Impl: IScriptScriptletImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pbstr: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn SetSimpleEventName<Impl: IScriptScriptletImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, psz: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(
            ::windows::core::QueryInterface::<Identity, BASE_OFFSET>,
            ::windows::core::AddRef::<Identity, BASE_OFFSET>,
            ::windows::core::Release::<Identity, BASE_OFFSET>,
            Alive::<Impl, IMPL_OFFSET>,
            Delete::<Impl, IMPL_OFFSET>,
            GetParent::<Impl, IMPL_OFFSET>,
            GetIndexInParent::<Impl, IMPL_OFFSET>,
            GetCookie::<Impl, IMPL_OFFSET>,
            GetNumberOfChildren::<Impl, IMPL_OFFSET>,
            GetChild::<Impl, IMPL_OFFSET>,
            GetLanguage::<Impl, IMPL_OFFSET>,
            CreateChildEntry::<Impl, IMPL_OFFSET>,
            CreateChildHandler::<Impl, IMPL_OFFSET>,
            GetText::<Impl, IMPL_OFFSET>,
            SetText::<Impl, IMPL_OFFSET>,
            GetBody::<Impl, IMPL_OFFSET>,
            SetBody::<Impl, IMPL_OFFSET>,
            GetName::<Impl, IMPL_OFFSET>,
            SetName::<Impl, IMPL_OFFSET>,
            GetItemName::<Impl, IMPL_OFFSET>,
            SetItemName::<Impl, IMPL_OFFSET>,
            GetSignature::<Impl, IMPL_OFFSET>,
            SetSignature::<Impl, IMPL_OFFSET>,
            GetRange::<Impl, IMPL_OFFSET>,
            GetSubItemName::<Impl, IMPL_OFFSET>,
            SetSubItemName::<Impl, IMPL_OFFSET>,
            GetEventName::<Impl, IMPL_OFFSET>,
            SetEventName::<Impl, IMPL_OFFSET>,
            GetSimpleEventName::<Impl, IMPL_OFFSET>,
            SetSimpleEventName::<Impl, IMPL_OFFSET>,
        )
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IScriptScriptlet as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait ISimpleConnectionPointImpl: Sized {
    fn GetEventCount();
    fn DescribeEvents();
    fn Advise();
    fn Unadvise();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl ISimpleConnectionPointVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ISimpleConnectionPointImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> ISimpleConnectionPointVtbl {
        unsafe extern "system" fn GetEventCount<Impl: ISimpleConnectionPointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pulcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn DescribeEvents<Impl: ISimpleConnectionPointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, ievent: u32, cevents: u32, prgid: *mut i32, prgbstr: *mut super::super::super::Foundation::BSTR, pceventsfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Advise<Impl: ISimpleConnectionPointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pdisp: ::windows::core::RawPtr, pdwcookie: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn Unadvise<Impl: ISimpleConnectionPointImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, dwcookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, GetEventCount::<Impl, IMPL_OFFSET>, DescribeEvents::<Impl, IMPL_OFFSET>, Advise::<Impl, IMPL_OFFSET>, Unadvise::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ISimpleConnectionPoint as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IStringDisplayableConceptImpl: Sized {
    fn ToDisplayString();
}
#[cfg(feature = "Win32_Foundation")]
impl IStringDisplayableConceptVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IStringDisplayableConceptImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IStringDisplayableConceptVtbl {
        unsafe extern "system" fn ToDisplayString<Impl: IStringDisplayableConceptImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, contextobject: ::windows::core::RawPtr, metadata: ::windows::core::RawPtr, displaystring: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, ToDisplayString::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IStringDisplayableConcept as ::windows::core::Interface>::IID
    }
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait ITridentEventSinkImpl: Sized {
    fn FireEvent();
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl ITridentEventSinkVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: ITridentEventSinkImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> ITridentEventSinkVtbl {
        unsafe extern "system" fn FireEvent<Impl: ITridentEventSinkImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pstrevent: super::super::super::Foundation::PWSTR, pdp: *const super::super::Com::DISPPARAMS, pvarres: *mut super::super::Com::VARIANT, pei: *mut super::super::Com::EXCEPINFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, FireEvent::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ITridentEventSink as ::windows::core::Interface>::IID
    }
}
#[cfg(feature = "Win32_Foundation")]
pub trait IWebAppDiagnosticsObjectInitializationImpl: Sized {
    fn Initialize();
}
#[cfg(feature = "Win32_Foundation")]
impl IWebAppDiagnosticsObjectInitializationVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IWebAppDiagnosticsObjectInitializationImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IWebAppDiagnosticsObjectInitializationVtbl {
        unsafe extern "system" fn Initialize<Impl: IWebAppDiagnosticsObjectInitializationImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, hpassedhandle: super::super::super::Foundation::HANDLE_PTR, pdebugapplication: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, Initialize::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IWebAppDiagnosticsObjectInitialization as ::windows::core::Interface>::IID
    }
}
pub trait IWebAppDiagnosticsSetupImpl: Sized {
    fn DiagnosticsSupported();
    fn CreateObjectWithSiteAtWebApp();
}
impl IWebAppDiagnosticsSetupVtbl {
    pub const fn new<Identity: ::windows::core::IUnknownImpl, Impl: IWebAppDiagnosticsSetupImpl, const BASE_OFFSET: isize, const IMPL_OFFSET: isize>() -> IWebAppDiagnosticsSetupVtbl {
        unsafe extern "system" fn DiagnosticsSupported<Impl: IWebAppDiagnosticsSetupImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, pretval: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        unsafe extern "system" fn CreateObjectWithSiteAtWebApp<Impl: IWebAppDiagnosticsSetupImpl, const OFFSET: isize>(this: *mut ::core::ffi::c_void, rclsid: *const ::windows::core::GUID, dwclscontext: u32, riid: *const ::windows::core::GUID, hpasstoobject: usize) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Impl;
            panic!()
        }
        Self(::windows::core::QueryInterface::<Identity, BASE_OFFSET>, ::windows::core::AddRef::<Identity, BASE_OFFSET>, ::windows::core::Release::<Identity, BASE_OFFSET>, DiagnosticsSupported::<Impl, IMPL_OFFSET>, CreateObjectWithSiteAtWebApp::<Impl, IMPL_OFFSET>)
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<IWebAppDiagnosticsSetup as ::windows::core::Interface>::IID
    }
}
