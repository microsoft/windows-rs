pub trait AsyncIDebugApplicationNodeEventsImpl: Sized {
    fn Begin_onAddChild();
    fn Finish_onAddChild();
    fn Begin_onRemoveChild();
    fn Finish_onRemoveChild();
    fn Begin_onDetach();
    fn Finish_onDetach();
    fn Begin_onAttach();
    fn Finish_onAttach();
}
impl ::windows::core::RuntimeName for AsyncIDebugApplicationNodeEvents {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.AsyncIDebugApplicationNodeEvents";
}
impl AsyncIDebugApplicationNodeEventsVtbl {
    pub const fn new<Impl: AsyncIDebugApplicationNodeEventsImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> AsyncIDebugApplicationNodeEventsVtbl {
        unsafe extern "system" fn Begin_onAddChild<Impl: AsyncIDebugApplicationNodeEventsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prddpchild: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Begin_onAddChild(&*(&prddpchild as *const <IDebugApplicationNode as ::windows::core::Abi>::Abi as *const <IDebugApplicationNode as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Finish_onAddChild<Impl: AsyncIDebugApplicationNodeEventsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Finish_onAddChild() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Begin_onRemoveChild<Impl: AsyncIDebugApplicationNodeEventsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prddpchild: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Begin_onRemoveChild(&*(&prddpchild as *const <IDebugApplicationNode as ::windows::core::Abi>::Abi as *const <IDebugApplicationNode as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Finish_onRemoveChild<Impl: AsyncIDebugApplicationNodeEventsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Finish_onRemoveChild() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Begin_onDetach<Impl: AsyncIDebugApplicationNodeEventsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Begin_onDetach() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Finish_onDetach<Impl: AsyncIDebugApplicationNodeEventsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Finish_onDetach() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Begin_onAttach<Impl: AsyncIDebugApplicationNodeEventsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prddpparent: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Begin_onAttach(&*(&prddpparent as *const <IDebugApplicationNode as ::windows::core::Abi>::Abi as *const <IDebugApplicationNode as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Finish_onAttach<Impl: AsyncIDebugApplicationNodeEventsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Finish_onAttach() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<AsyncIDebugApplicationNodeEvents>, base.5, Begin_onAddChild::<Impl, OFFSET>, Finish_onAddChild::<Impl, OFFSET>, Begin_onRemoveChild::<Impl, OFFSET>, Finish_onRemoveChild::<Impl, OFFSET>, Begin_onDetach::<Impl, OFFSET>, Finish_onDetach::<Impl, OFFSET>, Begin_onAttach::<Impl, OFFSET>, Finish_onAttach::<Impl, OFFSET>)
    }
}
pub trait DebugBaseEventCallbacksImpl: Sized + IDebugEventCallbacksImpl {}
impl ::windows::core::RuntimeName for DebugBaseEventCallbacks {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.DebugBaseEventCallbacks";
}
impl DebugBaseEventCallbacksVtbl {
    pub const fn new<Impl: DebugBaseEventCallbacksImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> DebugBaseEventCallbacksVtbl {
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<DebugBaseEventCallbacks>, base.5)
    }
}
pub trait DebugBaseEventCallbacksWideImpl: Sized + IDebugEventCallbacksWideImpl {}
impl ::windows::core::RuntimeName for DebugBaseEventCallbacksWide {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.DebugBaseEventCallbacksWide";
}
impl DebugBaseEventCallbacksWideVtbl {
    pub const fn new<Impl: DebugBaseEventCallbacksWideImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> DebugBaseEventCallbacksWideVtbl {
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<DebugBaseEventCallbacksWide>, base.5)
    }
}
pub trait IActiveScriptImpl: Sized {
    fn SetScriptSite();
    fn GetScriptSite();
    fn SetScriptState();
    fn GetScriptState();
    fn Close();
    fn AddNamedItem();
    fn AddTypeLib();
    fn GetScriptDispatch();
    fn GetCurrentScriptThreadID();
    fn GetScriptThreadID();
    fn GetScriptThreadState();
    fn InterruptScriptThread();
    fn Clone();
}
impl ::windows::core::RuntimeName for IActiveScript {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IActiveScript";
}
impl IActiveScriptVtbl {
    pub const fn new<Impl: IActiveScriptImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IActiveScriptVtbl {
        unsafe extern "system" fn SetScriptSite<Impl: IActiveScriptImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pass: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetScriptSite(&*(&pass as *const <IActiveScriptSite as ::windows::core::Abi>::Abi as *const <IActiveScriptSite as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetScriptSite<Impl: IActiveScriptImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, riid: *const ::windows::core::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetScriptSite(&*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppvobject)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetScriptState<Impl: IActiveScriptImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ss: SCRIPTSTATE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetScriptState(ss) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetScriptState<Impl: IActiveScriptImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pssstate: *mut SCRIPTSTATE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetScriptState(::core::mem::transmute_copy(&pssstate)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Close<Impl: IActiveScriptImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Close() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddNamedItem<Impl: IActiveScriptImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstrname: super::super::super::Foundation::PWSTR, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddNamedItem(&*(&pstrname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), dwflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddTypeLib<Impl: IActiveScriptImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, rguidtypelib: *const ::windows::core::GUID, dwmajor: u32, dwminor: u32, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddTypeLib(&*(&rguidtypelib as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), dwmajor, dwminor, dwflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetScriptDispatch<Impl: IActiveScriptImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstritemname: super::super::super::Foundation::PWSTR, ppdisp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetScriptDispatch(&*(&pstritemname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppdisp)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentScriptThreadID<Impl: IActiveScriptImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstidthread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentScriptThreadID(::core::mem::transmute_copy(&pstidthread)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetScriptThreadID<Impl: IActiveScriptImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwwin32threadid: u32, pstidthread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetScriptThreadID(dwwin32threadid, ::core::mem::transmute_copy(&pstidthread)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetScriptThreadState<Impl: IActiveScriptImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, stidthread: u32, pstsstate: *mut SCRIPTTHREADSTATE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetScriptThreadState(stidthread, ::core::mem::transmute_copy(&pstsstate)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn InterruptScriptThread<Impl: IActiveScriptImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, stidthread: u32, pexcepinfo: *const super::super::Com::EXCEPINFO, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).InterruptScriptThread(stidthread, &*(&pexcepinfo as *const <super::super::Com::EXCEPINFO as ::windows::core::Abi>::Abi as *const <super::super::Com::EXCEPINFO as ::windows::core::DefaultType>::DefaultType), dwflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Clone<Impl: IActiveScriptImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppscript: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Clone(::core::mem::transmute_copy(&ppscript)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            base.0,
            base.1,
            base.2,
            base.3,
            ::windows::core::GetRuntimeClassName::<IActiveScript>,
            base.5,
            SetScriptSite::<Impl, OFFSET>,
            GetScriptSite::<Impl, OFFSET>,
            SetScriptState::<Impl, OFFSET>,
            GetScriptState::<Impl, OFFSET>,
            Close::<Impl, OFFSET>,
            AddNamedItem::<Impl, OFFSET>,
            AddTypeLib::<Impl, OFFSET>,
            GetScriptDispatch::<Impl, OFFSET>,
            GetCurrentScriptThreadID::<Impl, OFFSET>,
            GetScriptThreadID::<Impl, OFFSET>,
            GetScriptThreadState::<Impl, OFFSET>,
            InterruptScriptThread::<Impl, OFFSET>,
            Clone::<Impl, OFFSET>,
        )
    }
}
pub trait IActiveScriptAuthorImpl: Sized {
    fn AddNamedItem();
    fn AddScriptlet();
    fn ParseScriptText();
    fn GetScriptTextAttributes();
    fn GetScriptletTextAttributes();
    fn GetRoot();
    fn GetLanguageFlags();
    fn GetEventHandler();
    fn RemoveNamedItem();
    fn AddTypeLib();
    fn RemoveTypeLib();
    fn GetChars();
    fn GetInfoFromContext();
    fn IsCommitChar();
}
impl ::windows::core::RuntimeName for IActiveScriptAuthor {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IActiveScriptAuthor";
}
impl IActiveScriptAuthorVtbl {
    pub const fn new<Impl: IActiveScriptAuthorImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IActiveScriptAuthorVtbl {
        unsafe extern "system" fn AddNamedItem<Impl: IActiveScriptAuthorImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszname: super::super::super::Foundation::PWSTR, dwflags: u32, pdisp: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddNamedItem(&*(&pszname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), dwflags, &*(&pdisp as *const <super::super::Com::IDispatch as ::windows::core::Abi>::Abi as *const <super::super::Com::IDispatch as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddScriptlet<Impl: IActiveScriptAuthorImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszdefaultname: super::super::super::Foundation::PWSTR, pszcode: super::super::super::Foundation::PWSTR, pszitemname: super::super::super::Foundation::PWSTR, pszsubitemname: super::super::super::Foundation::PWSTR, pszeventname: super::super::super::Foundation::PWSTR, pszdelimiter: super::super::super::Foundation::PWSTR, dwcookie: u32, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddScriptlet(
                &*(&pszdefaultname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pszcode as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pszitemname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pszsubitemname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pszeventname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pszdelimiter as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                dwcookie,
                dwflags,
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ParseScriptText<Impl: IActiveScriptAuthorImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszcode: super::super::super::Foundation::PWSTR, pszitemname: super::super::super::Foundation::PWSTR, pszdelimiter: super::super::super::Foundation::PWSTR, dwcookie: u32, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ParseScriptText(
                &*(&pszcode as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pszitemname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pszdelimiter as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                dwcookie,
                dwflags,
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetScriptTextAttributes<Impl: IActiveScriptAuthorImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszcode: super::super::super::Foundation::PWSTR, cch: u32, pszdelimiter: super::super::super::Foundation::PWSTR, dwflags: u32, pattr: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetScriptTextAttributes(&*(&pszcode as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), cch, &*(&pszdelimiter as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), dwflags, pattr) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetScriptletTextAttributes<Impl: IActiveScriptAuthorImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszcode: super::super::super::Foundation::PWSTR, cch: u32, pszdelimiter: super::super::super::Foundation::PWSTR, dwflags: u32, pattr: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetScriptletTextAttributes(&*(&pszcode as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), cch, &*(&pszdelimiter as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), dwflags, pattr) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRoot<Impl: IActiveScriptAuthorImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppsp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetRoot(::core::mem::transmute_copy(&ppsp)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLanguageFlags<Impl: IActiveScriptAuthorImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pgrfasa: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLanguageFlags(::core::mem::transmute_copy(&pgrfasa)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventHandler<Impl: IActiveScriptAuthorImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdisp: ::windows::core::RawPtr, pszitem: super::super::super::Foundation::PWSTR, pszsubitem: super::super::super::Foundation::PWSTR, pszevent: super::super::super::Foundation::PWSTR, ppse: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventHandler(
                &*(&pdisp as *const <super::super::Com::IDispatch as ::windows::core::Abi>::Abi as *const <super::super::Com::IDispatch as ::windows::core::DefaultType>::DefaultType),
                &*(&pszitem as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pszsubitem as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pszevent as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                ::core::mem::transmute_copy(&ppse),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveNamedItem<Impl: IActiveScriptAuthorImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveNamedItem(&*(&pszname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddTypeLib<Impl: IActiveScriptAuthorImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, rguidtypelib: *const ::windows::core::GUID, dwmajor: u32, dwminor: u32, dwflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddTypeLib(&*(&rguidtypelib as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), dwmajor, dwminor, dwflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveTypeLib<Impl: IActiveScriptAuthorImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, rguidtypelib: *const ::windows::core::GUID, dwmajor: u32, dwminor: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveTypeLib(&*(&rguidtypelib as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), dwmajor, dwminor) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetChars<Impl: IActiveScriptAuthorImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, frequestedlist: u32, pbstrchars: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetChars(frequestedlist, ::core::mem::transmute_copy(&pbstrchars)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetInfoFromContext<Impl: IActiveScriptAuthorImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszcode: super::super::super::Foundation::PWSTR, cchcode: u32, ichcurrentposition: u32, dwlisttypesrequested: u32, pdwlisttypesprovided: *mut u32, pichlistanchorposition: *mut u32, pichfuncanchorposition: *mut u32, pmemid: *mut i32, picurrentparameter: *mut i32, ppunk: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetInfoFromContext(
                &*(&pszcode as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                cchcode,
                ichcurrentposition,
                dwlisttypesrequested,
                ::core::mem::transmute_copy(&pdwlisttypesprovided),
                ::core::mem::transmute_copy(&pichlistanchorposition),
                ::core::mem::transmute_copy(&pichfuncanchorposition),
                ::core::mem::transmute_copy(&pmemid),
                ::core::mem::transmute_copy(&picurrentparameter),
                ::core::mem::transmute_copy(&ppunk),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsCommitChar<Impl: IActiveScriptAuthorImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ch: u16, pfcommit: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).IsCommitChar(ch, ::core::mem::transmute_copy(&pfcommit)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            base.0,
            base.1,
            base.2,
            base.3,
            ::windows::core::GetRuntimeClassName::<IActiveScriptAuthor>,
            base.5,
            AddNamedItem::<Impl, OFFSET>,
            AddScriptlet::<Impl, OFFSET>,
            ParseScriptText::<Impl, OFFSET>,
            GetScriptTextAttributes::<Impl, OFFSET>,
            GetScriptletTextAttributes::<Impl, OFFSET>,
            GetRoot::<Impl, OFFSET>,
            GetLanguageFlags::<Impl, OFFSET>,
            GetEventHandler::<Impl, OFFSET>,
            RemoveNamedItem::<Impl, OFFSET>,
            AddTypeLib::<Impl, OFFSET>,
            RemoveTypeLib::<Impl, OFFSET>,
            GetChars::<Impl, OFFSET>,
            GetInfoFromContext::<Impl, OFFSET>,
            IsCommitChar::<Impl, OFFSET>,
        )
    }
}
pub trait IActiveScriptAuthorProcedureImpl: Sized {
    fn ParseProcedureText();
}
impl ::windows::core::RuntimeName for IActiveScriptAuthorProcedure {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IActiveScriptAuthorProcedure";
}
impl IActiveScriptAuthorProcedureVtbl {
    pub const fn new<Impl: IActiveScriptAuthorProcedureImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IActiveScriptAuthorProcedureVtbl {
        unsafe extern "system" fn ParseProcedureText<Impl: IActiveScriptAuthorProcedureImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszcode: super::super::super::Foundation::PWSTR, pszformalparams: super::super::super::Foundation::PWSTR, pszprocedurename: super::super::super::Foundation::PWSTR, pszitemname: super::super::super::Foundation::PWSTR, pszdelimiter: super::super::super::Foundation::PWSTR, dwcookie: u32, dwflags: u32, pdispfor: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ParseProcedureText(
                &*(&pszcode as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pszformalparams as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pszprocedurename as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pszitemname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pszdelimiter as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                dwcookie,
                dwflags,
                &*(&pdispfor as *const <super::super::Com::IDispatch as ::windows::core::Abi>::Abi as *const <super::super::Com::IDispatch as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IActiveScriptAuthorProcedure>, base.5, ParseProcedureText::<Impl, OFFSET>)
    }
}
pub trait IActiveScriptDebug32Impl: Sized {
    fn GetScriptTextAttributes();
    fn GetScriptletTextAttributes();
    fn EnumCodeContextsOfPosition();
}
impl ::windows::core::RuntimeName for IActiveScriptDebug32 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IActiveScriptDebug32";
}
impl IActiveScriptDebug32Vtbl {
    pub const fn new<Impl: IActiveScriptDebug32Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IActiveScriptDebug32Vtbl {
        unsafe extern "system" fn GetScriptTextAttributes<Impl: IActiveScriptDebug32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstrcode: super::super::super::Foundation::PWSTR, unumcodechars: u32, pstrdelimiter: super::super::super::Foundation::PWSTR, dwflags: u32, pattr: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetScriptTextAttributes(&*(&pstrcode as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), unumcodechars, &*(&pstrdelimiter as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), dwflags, pattr) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetScriptletTextAttributes<Impl: IActiveScriptDebug32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstrcode: super::super::super::Foundation::PWSTR, unumcodechars: u32, pstrdelimiter: super::super::super::Foundation::PWSTR, dwflags: u32, pattr: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetScriptletTextAttributes(&*(&pstrcode as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), unumcodechars, &*(&pstrdelimiter as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), dwflags, pattr) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumCodeContextsOfPosition<Impl: IActiveScriptDebug32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwsourcecontext: u32, ucharacteroffset: u32, unumchars: u32, ppescc: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EnumCodeContextsOfPosition(dwsourcecontext, ucharacteroffset, unumchars, ::core::mem::transmute_copy(&ppescc)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IActiveScriptDebug32>, base.5, GetScriptTextAttributes::<Impl, OFFSET>, GetScriptletTextAttributes::<Impl, OFFSET>, EnumCodeContextsOfPosition::<Impl, OFFSET>)
    }
}
pub trait IActiveScriptDebug64Impl: Sized {
    fn GetScriptTextAttributes();
    fn GetScriptletTextAttributes();
    fn EnumCodeContextsOfPosition();
}
impl ::windows::core::RuntimeName for IActiveScriptDebug64 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IActiveScriptDebug64";
}
impl IActiveScriptDebug64Vtbl {
    pub const fn new<Impl: IActiveScriptDebug64Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IActiveScriptDebug64Vtbl {
        unsafe extern "system" fn GetScriptTextAttributes<Impl: IActiveScriptDebug64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstrcode: super::super::super::Foundation::PWSTR, unumcodechars: u32, pstrdelimiter: super::super::super::Foundation::PWSTR, dwflags: u32, pattr: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetScriptTextAttributes(&*(&pstrcode as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), unumcodechars, &*(&pstrdelimiter as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), dwflags, pattr) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetScriptletTextAttributes<Impl: IActiveScriptDebug64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstrcode: super::super::super::Foundation::PWSTR, unumcodechars: u32, pstrdelimiter: super::super::super::Foundation::PWSTR, dwflags: u32, pattr: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetScriptletTextAttributes(&*(&pstrcode as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), unumcodechars, &*(&pstrdelimiter as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), dwflags, pattr) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumCodeContextsOfPosition<Impl: IActiveScriptDebug64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwsourcecontext: u64, ucharacteroffset: u32, unumchars: u32, ppescc: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EnumCodeContextsOfPosition(dwsourcecontext, ucharacteroffset, unumchars, ::core::mem::transmute_copy(&ppescc)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IActiveScriptDebug64>, base.5, GetScriptTextAttributes::<Impl, OFFSET>, GetScriptletTextAttributes::<Impl, OFFSET>, EnumCodeContextsOfPosition::<Impl, OFFSET>)
    }
}
pub trait IActiveScriptEncodeImpl: Sized {
    fn EncodeSection();
    fn DecodeScript();
    fn GetEncodeProgId();
}
impl ::windows::core::RuntimeName for IActiveScriptEncode {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IActiveScriptEncode";
}
impl IActiveScriptEncodeVtbl {
    pub const fn new<Impl: IActiveScriptEncodeImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IActiveScriptEncodeVtbl {
        unsafe extern "system" fn EncodeSection<Impl: IActiveScriptEncodeImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pchin: super::super::super::Foundation::PWSTR, cchin: u32, pchout: super::super::super::Foundation::PWSTR, cchout: u32, pcchret: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EncodeSection(&*(&pchin as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), cchin, &*(&pchout as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), cchout, pcchret) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DecodeScript<Impl: IActiveScriptEncodeImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pchin: super::super::super::Foundation::PWSTR, cchin: u32, pchout: super::super::super::Foundation::PWSTR, cchout: u32, pcchret: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).DecodeScript(&*(&pchin as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), cchin, &*(&pchout as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), cchout, pcchret) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEncodeProgId<Impl: IActiveScriptEncodeImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstrout: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEncodeProgId(&*(&pbstrout as *const <super::super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IActiveScriptEncode>, base.5, EncodeSection::<Impl, OFFSET>, DecodeScript::<Impl, OFFSET>, GetEncodeProgId::<Impl, OFFSET>)
    }
}
pub trait IActiveScriptErrorImpl: Sized {
    fn GetExceptionInfo();
    fn GetSourcePosition();
    fn GetSourceLineText();
}
impl ::windows::core::RuntimeName for IActiveScriptError {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IActiveScriptError";
}
impl IActiveScriptErrorVtbl {
    pub const fn new<Impl: IActiveScriptErrorImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IActiveScriptErrorVtbl {
        unsafe extern "system" fn GetExceptionInfo<Impl: IActiveScriptErrorImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pexcepinfo: *mut super::super::Com::EXCEPINFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExceptionInfo(::core::mem::transmute_copy(&pexcepinfo)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourcePosition<Impl: IActiveScriptErrorImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwsourcecontext: *mut u32, pullinenumber: *mut u32, plcharacterposition: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSourcePosition(::core::mem::transmute_copy(&pdwsourcecontext), ::core::mem::transmute_copy(&pullinenumber), ::core::mem::transmute_copy(&plcharacterposition)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourceLineText<Impl: IActiveScriptErrorImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstrsourceline: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSourceLineText(::core::mem::transmute_copy(&pbstrsourceline)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IActiveScriptError>, base.5, GetExceptionInfo::<Impl, OFFSET>, GetSourcePosition::<Impl, OFFSET>, GetSourceLineText::<Impl, OFFSET>)
    }
}
pub trait IActiveScriptError64Impl: Sized + IActiveScriptErrorImpl {
    fn GetSourcePosition64();
}
impl ::windows::core::RuntimeName for IActiveScriptError64 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IActiveScriptError64";
}
impl IActiveScriptError64Vtbl {
    pub const fn new<Impl: IActiveScriptError64Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IActiveScriptError64Vtbl {
        unsafe extern "system" fn GetSourcePosition64<Impl: IActiveScriptError64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwsourcecontext: *mut u64, pullinenumber: *mut u32, plcharacterposition: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSourcePosition64(::core::mem::transmute_copy(&pdwsourcecontext), ::core::mem::transmute_copy(&pullinenumber), ::core::mem::transmute_copy(&plcharacterposition)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IActiveScriptError64>, base.5, GetSourcePosition64::<Impl, OFFSET>)
    }
}
pub trait IActiveScriptErrorDebugImpl: Sized + IActiveScriptErrorImpl {
    fn GetDocumentContext();
    fn GetStackFrame();
}
impl ::windows::core::RuntimeName for IActiveScriptErrorDebug {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IActiveScriptErrorDebug";
}
impl IActiveScriptErrorDebugVtbl {
    pub const fn new<Impl: IActiveScriptErrorDebugImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IActiveScriptErrorDebugVtbl {
        unsafe extern "system" fn GetDocumentContext<Impl: IActiveScriptErrorDebugImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppssc: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDocumentContext(::core::mem::transmute_copy(&ppssc)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetStackFrame<Impl: IActiveScriptErrorDebugImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppdsf: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetStackFrame(::core::mem::transmute_copy(&ppdsf)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IActiveScriptErrorDebug>, base.5, GetDocumentContext::<Impl, OFFSET>, GetStackFrame::<Impl, OFFSET>)
    }
}
pub trait IActiveScriptErrorDebug110Impl: Sized {
    fn GetExceptionThrownKind();
}
impl ::windows::core::RuntimeName for IActiveScriptErrorDebug110 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IActiveScriptErrorDebug110";
}
impl IActiveScriptErrorDebug110Vtbl {
    pub const fn new<Impl: IActiveScriptErrorDebug110Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IActiveScriptErrorDebug110Vtbl {
        unsafe extern "system" fn GetExceptionThrownKind<Impl: IActiveScriptErrorDebug110Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pexceptionkind: *mut SCRIPT_ERROR_DEBUG_EXCEPTION_THROWN_KIND) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExceptionThrownKind(::core::mem::transmute_copy(&pexceptionkind)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IActiveScriptErrorDebug110>, base.5, GetExceptionThrownKind::<Impl, OFFSET>)
    }
}
pub trait IActiveScriptGarbageCollectorImpl: Sized {
    fn CollectGarbage();
}
impl ::windows::core::RuntimeName for IActiveScriptGarbageCollector {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IActiveScriptGarbageCollector";
}
impl IActiveScriptGarbageCollectorVtbl {
    pub const fn new<Impl: IActiveScriptGarbageCollectorImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IActiveScriptGarbageCollectorVtbl {
        unsafe extern "system" fn CollectGarbage<Impl: IActiveScriptGarbageCollectorImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, scriptgctype: SCRIPTGCTYPE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CollectGarbage(scriptgctype) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IActiveScriptGarbageCollector>, base.5, CollectGarbage::<Impl, OFFSET>)
    }
}
pub trait IActiveScriptHostEncodeImpl: Sized {
    fn EncodeScriptHostFile();
}
impl ::windows::core::RuntimeName for IActiveScriptHostEncode {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IActiveScriptHostEncode";
}
impl IActiveScriptHostEncodeVtbl {
    pub const fn new<Impl: IActiveScriptHostEncodeImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IActiveScriptHostEncodeVtbl {
        unsafe extern "system" fn EncodeScriptHostFile<Impl: IActiveScriptHostEncodeImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrinfile: ::core::mem::ManuallyDrop<super::super::super::Foundation::BSTR>, pbstroutfile: *mut super::super::super::Foundation::BSTR, cflags: u32, bstrdefaultlang: ::core::mem::ManuallyDrop<super::super::super::Foundation::BSTR>) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EncodeScriptHostFile(
                &*(&bstrinfile as *const <super::super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pbstroutfile as *const <super::super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType),
                cflags,
                &*(&bstrdefaultlang as *const <super::super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IActiveScriptHostEncode>, base.5, EncodeScriptHostFile::<Impl, OFFSET>)
    }
}
pub trait IActiveScriptParse32Impl: Sized {
    fn InitNew();
    fn AddScriptlet();
    fn ParseScriptText();
}
impl ::windows::core::RuntimeName for IActiveScriptParse32 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IActiveScriptParse32";
}
impl IActiveScriptParse32Vtbl {
    pub const fn new<Impl: IActiveScriptParse32Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IActiveScriptParse32Vtbl {
        unsafe extern "system" fn InitNew<Impl: IActiveScriptParse32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).InitNew() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddScriptlet<Impl: IActiveScriptParse32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstrdefaultname: super::super::super::Foundation::PWSTR, pstrcode: super::super::super::Foundation::PWSTR, pstritemname: super::super::super::Foundation::PWSTR, pstrsubitemname: super::super::super::Foundation::PWSTR, pstreventname: super::super::super::Foundation::PWSTR, pstrdelimiter: super::super::super::Foundation::PWSTR, dwsourcecontextcookie: u32, ulstartinglinenumber: u32, dwflags: u32, pbstrname: *mut super::super::super::Foundation::BSTR, pexcepinfo: *mut super::super::Com::EXCEPINFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddScriptlet(
                &*(&pstrdefaultname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pstrcode as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pstritemname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pstrsubitemname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pstreventname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pstrdelimiter as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                dwsourcecontextcookie,
                ulstartinglinenumber,
                dwflags,
                ::core::mem::transmute_copy(&pbstrname),
                ::core::mem::transmute_copy(&pexcepinfo),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ParseScriptText<Impl: IActiveScriptParse32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstrcode: super::super::super::Foundation::PWSTR, pstritemname: super::super::super::Foundation::PWSTR, punkcontext: *mut ::core::ffi::c_void, pstrdelimiter: super::super::super::Foundation::PWSTR, dwsourcecontextcookie: u32, ulstartinglinenumber: u32, dwflags: u32, pvarresult: *mut super::super::Com::VARIANT, pexcepinfo: *mut super::super::Com::EXCEPINFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ParseScriptText(
                &*(&pstrcode as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pstritemname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&punkcontext as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType),
                &*(&pstrdelimiter as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                dwsourcecontextcookie,
                ulstartinglinenumber,
                dwflags,
                ::core::mem::transmute_copy(&pvarresult),
                ::core::mem::transmute_copy(&pexcepinfo),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IActiveScriptParse32>, base.5, InitNew::<Impl, OFFSET>, AddScriptlet::<Impl, OFFSET>, ParseScriptText::<Impl, OFFSET>)
    }
}
pub trait IActiveScriptParse64Impl: Sized {
    fn InitNew();
    fn AddScriptlet();
    fn ParseScriptText();
}
impl ::windows::core::RuntimeName for IActiveScriptParse64 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IActiveScriptParse64";
}
impl IActiveScriptParse64Vtbl {
    pub const fn new<Impl: IActiveScriptParse64Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IActiveScriptParse64Vtbl {
        unsafe extern "system" fn InitNew<Impl: IActiveScriptParse64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).InitNew() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddScriptlet<Impl: IActiveScriptParse64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstrdefaultname: super::super::super::Foundation::PWSTR, pstrcode: super::super::super::Foundation::PWSTR, pstritemname: super::super::super::Foundation::PWSTR, pstrsubitemname: super::super::super::Foundation::PWSTR, pstreventname: super::super::super::Foundation::PWSTR, pstrdelimiter: super::super::super::Foundation::PWSTR, dwsourcecontextcookie: u64, ulstartinglinenumber: u32, dwflags: u32, pbstrname: *mut super::super::super::Foundation::BSTR, pexcepinfo: *mut super::super::Com::EXCEPINFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddScriptlet(
                &*(&pstrdefaultname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pstrcode as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pstritemname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pstrsubitemname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pstreventname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pstrdelimiter as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                dwsourcecontextcookie,
                ulstartinglinenumber,
                dwflags,
                ::core::mem::transmute_copy(&pbstrname),
                ::core::mem::transmute_copy(&pexcepinfo),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ParseScriptText<Impl: IActiveScriptParse64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstrcode: super::super::super::Foundation::PWSTR, pstritemname: super::super::super::Foundation::PWSTR, punkcontext: *mut ::core::ffi::c_void, pstrdelimiter: super::super::super::Foundation::PWSTR, dwsourcecontextcookie: u64, ulstartinglinenumber: u32, dwflags: u32, pvarresult: *mut super::super::Com::VARIANT, pexcepinfo: *mut super::super::Com::EXCEPINFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ParseScriptText(
                &*(&pstrcode as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pstritemname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&punkcontext as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType),
                &*(&pstrdelimiter as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                dwsourcecontextcookie,
                ulstartinglinenumber,
                dwflags,
                ::core::mem::transmute_copy(&pvarresult),
                ::core::mem::transmute_copy(&pexcepinfo),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IActiveScriptParse64>, base.5, InitNew::<Impl, OFFSET>, AddScriptlet::<Impl, OFFSET>, ParseScriptText::<Impl, OFFSET>)
    }
}
pub trait IActiveScriptParseProcedure2_32Impl: Sized + IActiveScriptParseProcedure32Impl {}
impl ::windows::core::RuntimeName for IActiveScriptParseProcedure2_32 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IActiveScriptParseProcedure2_32";
}
impl IActiveScriptParseProcedure2_32Vtbl {
    pub const fn new<Impl: IActiveScriptParseProcedure2_32Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IActiveScriptParseProcedure2_32Vtbl {
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IActiveScriptParseProcedure2_32>, base.5)
    }
}
pub trait IActiveScriptParseProcedure2_64Impl: Sized + IActiveScriptParseProcedure64Impl {}
impl ::windows::core::RuntimeName for IActiveScriptParseProcedure2_64 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IActiveScriptParseProcedure2_64";
}
impl IActiveScriptParseProcedure2_64Vtbl {
    pub const fn new<Impl: IActiveScriptParseProcedure2_64Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IActiveScriptParseProcedure2_64Vtbl {
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IActiveScriptParseProcedure2_64>, base.5)
    }
}
pub trait IActiveScriptParseProcedure32Impl: Sized {
    fn ParseProcedureText();
}
impl ::windows::core::RuntimeName for IActiveScriptParseProcedure32 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IActiveScriptParseProcedure32";
}
impl IActiveScriptParseProcedure32Vtbl {
    pub const fn new<Impl: IActiveScriptParseProcedure32Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IActiveScriptParseProcedure32Vtbl {
        unsafe extern "system" fn ParseProcedureText<Impl: IActiveScriptParseProcedure32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstrcode: super::super::super::Foundation::PWSTR, pstrformalparams: super::super::super::Foundation::PWSTR, pstrprocedurename: super::super::super::Foundation::PWSTR, pstritemname: super::super::super::Foundation::PWSTR, punkcontext: *mut ::core::ffi::c_void, pstrdelimiter: super::super::super::Foundation::PWSTR, dwsourcecontextcookie: u32, ulstartinglinenumber: u32, dwflags: u32, ppdisp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ParseProcedureText(
                &*(&pstrcode as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pstrformalparams as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pstrprocedurename as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pstritemname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&punkcontext as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType),
                &*(&pstrdelimiter as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                dwsourcecontextcookie,
                ulstartinglinenumber,
                dwflags,
                ::core::mem::transmute_copy(&ppdisp),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IActiveScriptParseProcedure32>, base.5, ParseProcedureText::<Impl, OFFSET>)
    }
}
pub trait IActiveScriptParseProcedure64Impl: Sized {
    fn ParseProcedureText();
}
impl ::windows::core::RuntimeName for IActiveScriptParseProcedure64 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IActiveScriptParseProcedure64";
}
impl IActiveScriptParseProcedure64Vtbl {
    pub const fn new<Impl: IActiveScriptParseProcedure64Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IActiveScriptParseProcedure64Vtbl {
        unsafe extern "system" fn ParseProcedureText<Impl: IActiveScriptParseProcedure64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstrcode: super::super::super::Foundation::PWSTR, pstrformalparams: super::super::super::Foundation::PWSTR, pstrprocedurename: super::super::super::Foundation::PWSTR, pstritemname: super::super::super::Foundation::PWSTR, punkcontext: *mut ::core::ffi::c_void, pstrdelimiter: super::super::super::Foundation::PWSTR, dwsourcecontextcookie: u64, ulstartinglinenumber: u32, dwflags: u32, ppdisp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ParseProcedureText(
                &*(&pstrcode as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pstrformalparams as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pstrprocedurename as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pstritemname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&punkcontext as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType),
                &*(&pstrdelimiter as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                dwsourcecontextcookie,
                ulstartinglinenumber,
                dwflags,
                ::core::mem::transmute_copy(&ppdisp),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IActiveScriptParseProcedure64>, base.5, ParseProcedureText::<Impl, OFFSET>)
    }
}
pub trait IActiveScriptParseProcedureOld32Impl: Sized {
    fn ParseProcedureText();
}
impl ::windows::core::RuntimeName for IActiveScriptParseProcedureOld32 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IActiveScriptParseProcedureOld32";
}
impl IActiveScriptParseProcedureOld32Vtbl {
    pub const fn new<Impl: IActiveScriptParseProcedureOld32Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IActiveScriptParseProcedureOld32Vtbl {
        unsafe extern "system" fn ParseProcedureText<Impl: IActiveScriptParseProcedureOld32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstrcode: super::super::super::Foundation::PWSTR, pstrformalparams: super::super::super::Foundation::PWSTR, pstritemname: super::super::super::Foundation::PWSTR, punkcontext: *mut ::core::ffi::c_void, pstrdelimiter: super::super::super::Foundation::PWSTR, dwsourcecontextcookie: u32, ulstartinglinenumber: u32, dwflags: u32, ppdisp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ParseProcedureText(
                &*(&pstrcode as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pstrformalparams as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pstritemname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&punkcontext as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType),
                &*(&pstrdelimiter as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                dwsourcecontextcookie,
                ulstartinglinenumber,
                dwflags,
                ::core::mem::transmute_copy(&ppdisp),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IActiveScriptParseProcedureOld32>, base.5, ParseProcedureText::<Impl, OFFSET>)
    }
}
pub trait IActiveScriptParseProcedureOld64Impl: Sized {
    fn ParseProcedureText();
}
impl ::windows::core::RuntimeName for IActiveScriptParseProcedureOld64 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IActiveScriptParseProcedureOld64";
}
impl IActiveScriptParseProcedureOld64Vtbl {
    pub const fn new<Impl: IActiveScriptParseProcedureOld64Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IActiveScriptParseProcedureOld64Vtbl {
        unsafe extern "system" fn ParseProcedureText<Impl: IActiveScriptParseProcedureOld64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstrcode: super::super::super::Foundation::PWSTR, pstrformalparams: super::super::super::Foundation::PWSTR, pstritemname: super::super::super::Foundation::PWSTR, punkcontext: *mut ::core::ffi::c_void, pstrdelimiter: super::super::super::Foundation::PWSTR, dwsourcecontextcookie: u64, ulstartinglinenumber: u32, dwflags: u32, ppdisp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ParseProcedureText(
                &*(&pstrcode as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pstrformalparams as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pstritemname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&punkcontext as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType),
                &*(&pstrdelimiter as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                dwsourcecontextcookie,
                ulstartinglinenumber,
                dwflags,
                ::core::mem::transmute_copy(&ppdisp),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IActiveScriptParseProcedureOld64>, base.5, ParseProcedureText::<Impl, OFFSET>)
    }
}
pub trait IActiveScriptProfilerCallbackImpl: Sized {
    fn Initialize();
    fn Shutdown();
    fn ScriptCompiled();
    fn FunctionCompiled();
    fn OnFunctionEnter();
    fn OnFunctionExit();
}
impl ::windows::core::RuntimeName for IActiveScriptProfilerCallback {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IActiveScriptProfilerCallback";
}
impl IActiveScriptProfilerCallbackVtbl {
    pub const fn new<Impl: IActiveScriptProfilerCallbackImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IActiveScriptProfilerCallbackVtbl {
        unsafe extern "system" fn Initialize<Impl: IActiveScriptProfilerCallbackImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwcontext: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Initialize(dwcontext) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Shutdown<Impl: IActiveScriptProfilerCallbackImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hrreason: ::windows::core::HRESULT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Shutdown(hrreason) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ScriptCompiled<Impl: IActiveScriptProfilerCallbackImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, scriptid: i32, r#type: PROFILER_SCRIPT_TYPE, pidebugdocumentcontext: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ScriptCompiled(scriptid, r#type, &*(&pidebugdocumentcontext as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FunctionCompiled<Impl: IActiveScriptProfilerCallbackImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, functionid: i32, scriptid: i32, pwszfunctionname: super::super::super::Foundation::PWSTR, pwszfunctionnamehint: super::super::super::Foundation::PWSTR, pidebugdocumentcontext: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).FunctionCompiled(
                functionid,
                scriptid,
                &*(&pwszfunctionname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pwszfunctionnamehint as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pidebugdocumentcontext as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnFunctionEnter<Impl: IActiveScriptProfilerCallbackImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, scriptid: i32, functionid: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OnFunctionEnter(scriptid, functionid) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnFunctionExit<Impl: IActiveScriptProfilerCallbackImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, scriptid: i32, functionid: i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OnFunctionExit(scriptid, functionid) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IActiveScriptProfilerCallback>, base.5, Initialize::<Impl, OFFSET>, Shutdown::<Impl, OFFSET>, ScriptCompiled::<Impl, OFFSET>, FunctionCompiled::<Impl, OFFSET>, OnFunctionEnter::<Impl, OFFSET>, OnFunctionExit::<Impl, OFFSET>)
    }
}
pub trait IActiveScriptProfilerCallback2Impl: Sized + IActiveScriptProfilerCallbackImpl {
    fn OnFunctionEnterByName();
    fn OnFunctionExitByName();
}
impl ::windows::core::RuntimeName for IActiveScriptProfilerCallback2 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IActiveScriptProfilerCallback2";
}
impl IActiveScriptProfilerCallback2Vtbl {
    pub const fn new<Impl: IActiveScriptProfilerCallback2Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IActiveScriptProfilerCallback2Vtbl {
        unsafe extern "system" fn OnFunctionEnterByName<Impl: IActiveScriptProfilerCallback2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwszfunctionname: super::super::super::Foundation::PWSTR, r#type: PROFILER_SCRIPT_TYPE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OnFunctionEnterByName(&*(&pwszfunctionname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), r#type) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnFunctionExitByName<Impl: IActiveScriptProfilerCallback2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwszfunctionname: super::super::super::Foundation::PWSTR, r#type: PROFILER_SCRIPT_TYPE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OnFunctionExitByName(&*(&pwszfunctionname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), r#type) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IActiveScriptProfilerCallback2>, base.5, OnFunctionEnterByName::<Impl, OFFSET>, OnFunctionExitByName::<Impl, OFFSET>)
    }
}
pub trait IActiveScriptProfilerCallback3Impl: Sized + IActiveScriptProfilerCallback2Impl + IActiveScriptProfilerCallbackImpl {
    fn SetWebWorkerId();
}
impl ::windows::core::RuntimeName for IActiveScriptProfilerCallback3 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IActiveScriptProfilerCallback3";
}
impl IActiveScriptProfilerCallback3Vtbl {
    pub const fn new<Impl: IActiveScriptProfilerCallback3Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IActiveScriptProfilerCallback3Vtbl {
        unsafe extern "system" fn SetWebWorkerId<Impl: IActiveScriptProfilerCallback3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, webworkerid: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetWebWorkerId(webworkerid) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IActiveScriptProfilerCallback3>, base.5, SetWebWorkerId::<Impl, OFFSET>)
    }
}
pub trait IActiveScriptProfilerControlImpl: Sized {
    fn StartProfiling();
    fn SetProfilerEventMask();
    fn StopProfiling();
}
impl ::windows::core::RuntimeName for IActiveScriptProfilerControl {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IActiveScriptProfilerControl";
}
impl IActiveScriptProfilerControlVtbl {
    pub const fn new<Impl: IActiveScriptProfilerControlImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IActiveScriptProfilerControlVtbl {
        unsafe extern "system" fn StartProfiling<Impl: IActiveScriptProfilerControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, clsidprofilerobject: *const ::windows::core::GUID, dweventmask: u32, dwcontext: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).StartProfiling(&*(&clsidprofilerobject as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), dweventmask, dwcontext) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetProfilerEventMask<Impl: IActiveScriptProfilerControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dweventmask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetProfilerEventMask(dweventmask) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StopProfiling<Impl: IActiveScriptProfilerControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hrshutdownreason: ::windows::core::HRESULT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).StopProfiling(hrshutdownreason) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IActiveScriptProfilerControl>, base.5, StartProfiling::<Impl, OFFSET>, SetProfilerEventMask::<Impl, OFFSET>, StopProfiling::<Impl, OFFSET>)
    }
}
pub trait IActiveScriptProfilerControl2Impl: Sized + IActiveScriptProfilerControlImpl {
    fn CompleteProfilerStart();
    fn PrepareProfilerStop();
}
impl ::windows::core::RuntimeName for IActiveScriptProfilerControl2 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IActiveScriptProfilerControl2";
}
impl IActiveScriptProfilerControl2Vtbl {
    pub const fn new<Impl: IActiveScriptProfilerControl2Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IActiveScriptProfilerControl2Vtbl {
        unsafe extern "system" fn CompleteProfilerStart<Impl: IActiveScriptProfilerControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CompleteProfilerStart() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn PrepareProfilerStop<Impl: IActiveScriptProfilerControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).PrepareProfilerStop() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IActiveScriptProfilerControl2>, base.5, CompleteProfilerStart::<Impl, OFFSET>, PrepareProfilerStop::<Impl, OFFSET>)
    }
}
pub trait IActiveScriptProfilerControl3Impl: Sized + IActiveScriptProfilerControl2Impl + IActiveScriptProfilerControlImpl {
    fn EnumHeap();
}
impl ::windows::core::RuntimeName for IActiveScriptProfilerControl3 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IActiveScriptProfilerControl3";
}
impl IActiveScriptProfilerControl3Vtbl {
    pub const fn new<Impl: IActiveScriptProfilerControl3Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IActiveScriptProfilerControl3Vtbl {
        unsafe extern "system" fn EnumHeap<Impl: IActiveScriptProfilerControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EnumHeap(::core::mem::transmute_copy(&ppenum)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IActiveScriptProfilerControl3>, base.5, EnumHeap::<Impl, OFFSET>)
    }
}
pub trait IActiveScriptProfilerControl4Impl: Sized + IActiveScriptProfilerControl3Impl + IActiveScriptProfilerControl2Impl + IActiveScriptProfilerControlImpl {
    fn SummarizeHeap();
}
impl ::windows::core::RuntimeName for IActiveScriptProfilerControl4 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IActiveScriptProfilerControl4";
}
impl IActiveScriptProfilerControl4Vtbl {
    pub const fn new<Impl: IActiveScriptProfilerControl4Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IActiveScriptProfilerControl4Vtbl {
        unsafe extern "system" fn SummarizeHeap<Impl: IActiveScriptProfilerControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, heapsummary: *mut PROFILER_HEAP_SUMMARY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SummarizeHeap(&*(&heapsummary as *const <PROFILER_HEAP_SUMMARY as ::windows::core::Abi>::Abi as *const <PROFILER_HEAP_SUMMARY as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IActiveScriptProfilerControl4>, base.5, SummarizeHeap::<Impl, OFFSET>)
    }
}
pub trait IActiveScriptProfilerControl5Impl: Sized + IActiveScriptProfilerControl4Impl + IActiveScriptProfilerControl3Impl + IActiveScriptProfilerControl2Impl + IActiveScriptProfilerControlImpl {
    fn EnumHeap2();
}
impl ::windows::core::RuntimeName for IActiveScriptProfilerControl5 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IActiveScriptProfilerControl5";
}
impl IActiveScriptProfilerControl5Vtbl {
    pub const fn new<Impl: IActiveScriptProfilerControl5Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IActiveScriptProfilerControl5Vtbl {
        unsafe extern "system" fn EnumHeap2<Impl: IActiveScriptProfilerControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, enumflags: PROFILER_HEAP_ENUM_FLAGS, ppenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EnumHeap2(enumflags, ::core::mem::transmute_copy(&ppenum)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IActiveScriptProfilerControl5>, base.5, EnumHeap2::<Impl, OFFSET>)
    }
}
pub trait IActiveScriptProfilerHeapEnumImpl: Sized {
    fn Next();
    fn GetOptionalInfo();
    fn FreeObjectAndOptionalInfo();
    fn GetNameIdMap();
}
impl ::windows::core::RuntimeName for IActiveScriptProfilerHeapEnum {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IActiveScriptProfilerHeapEnum";
}
impl IActiveScriptProfilerHeapEnumVtbl {
    pub const fn new<Impl: IActiveScriptProfilerHeapEnumImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IActiveScriptProfilerHeapEnumVtbl {
        unsafe extern "system" fn Next<Impl: IActiveScriptProfilerHeapEnumImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32, heapobjects: *mut *mut PROFILER_HEAP_OBJECT, pceltfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Next(celt, ::core::mem::transmute_copy(&heapobjects), ::core::mem::transmute_copy(&pceltfetched)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOptionalInfo<Impl: IActiveScriptProfilerHeapEnumImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, heapobject: *const PROFILER_HEAP_OBJECT, celt: u32, optionalinfo: *mut PROFILER_HEAP_OBJECT_OPTIONAL_INFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOptionalInfo(&*(&heapobject as *const <PROFILER_HEAP_OBJECT as ::windows::core::Abi>::Abi as *const <PROFILER_HEAP_OBJECT as ::windows::core::DefaultType>::DefaultType), celt, ::core::mem::transmute_copy(&optionalinfo)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FreeObjectAndOptionalInfo<Impl: IActiveScriptProfilerHeapEnumImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32, heapobjects: *const *const PROFILER_HEAP_OBJECT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).FreeObjectAndOptionalInfo(celt, &*(&heapobjects as *const <PROFILER_HEAP_OBJECT as ::windows::core::Abi>::Abi as *const <PROFILER_HEAP_OBJECT as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNameIdMap<Impl: IActiveScriptProfilerHeapEnumImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pnamelist: *mut *mut *mut super::super::super::Foundation::PWSTR, pcelt: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNameIdMap(::core::mem::transmute_copy(&pnamelist), ::core::mem::transmute_copy(&pcelt)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IActiveScriptProfilerHeapEnum>, base.5, Next::<Impl, OFFSET>, GetOptionalInfo::<Impl, OFFSET>, FreeObjectAndOptionalInfo::<Impl, OFFSET>, GetNameIdMap::<Impl, OFFSET>)
    }
}
pub trait IActiveScriptPropertyImpl: Sized {
    fn GetProperty();
    fn SetProperty();
}
impl ::windows::core::RuntimeName for IActiveScriptProperty {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IActiveScriptProperty";
}
impl IActiveScriptPropertyVtbl {
    pub const fn new<Impl: IActiveScriptPropertyImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IActiveScriptPropertyVtbl {
        unsafe extern "system" fn GetProperty<Impl: IActiveScriptPropertyImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwproperty: u32, pvarindex: *const super::super::Com::VARIANT, pvarvalue: *mut super::super::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetProperty(dwproperty, &*(&pvarindex as *const <super::super::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::Com::VARIANT as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pvarvalue)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetProperty<Impl: IActiveScriptPropertyImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwproperty: u32, pvarindex: *const super::super::Com::VARIANT, pvarvalue: *const super::super::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetProperty(dwproperty, &*(&pvarindex as *const <super::super::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::Com::VARIANT as ::windows::core::DefaultType>::DefaultType), &*(&pvarvalue as *const <super::super::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::Com::VARIANT as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IActiveScriptProperty>, base.5, GetProperty::<Impl, OFFSET>, SetProperty::<Impl, OFFSET>)
    }
}
pub trait IActiveScriptSIPInfoImpl: Sized {
    fn GetSIPOID();
}
impl ::windows::core::RuntimeName for IActiveScriptSIPInfo {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IActiveScriptSIPInfo";
}
impl IActiveScriptSIPInfoVtbl {
    pub const fn new<Impl: IActiveScriptSIPInfoImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IActiveScriptSIPInfoVtbl {
        unsafe extern "system" fn GetSIPOID<Impl: IActiveScriptSIPInfoImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, poid_sip: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSIPOID(::core::mem::transmute_copy(&poid_sip)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IActiveScriptSIPInfo>, base.5, GetSIPOID::<Impl, OFFSET>)
    }
}
pub trait IActiveScriptSiteImpl: Sized {
    fn GetLCID();
    fn GetItemInfo();
    fn GetDocVersionString();
    fn OnScriptTerminate();
    fn OnStateChange();
    fn OnScriptError();
    fn OnEnterScript();
    fn OnLeaveScript();
}
impl ::windows::core::RuntimeName for IActiveScriptSite {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IActiveScriptSite";
}
impl IActiveScriptSiteVtbl {
    pub const fn new<Impl: IActiveScriptSiteImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IActiveScriptSiteVtbl {
        unsafe extern "system" fn GetLCID<Impl: IActiveScriptSiteImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, plcid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLCID(::core::mem::transmute_copy(&plcid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetItemInfo<Impl: IActiveScriptSiteImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstrname: super::super::super::Foundation::PWSTR, dwreturnmask: u32, ppiunkitem: *mut *mut ::core::ffi::c_void, ppti: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetItemInfo(&*(&pstrname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), dwreturnmask, ::core::mem::transmute_copy(&ppiunkitem), ::core::mem::transmute_copy(&ppti)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDocVersionString<Impl: IActiveScriptSiteImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstrversion: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDocVersionString(::core::mem::transmute_copy(&pbstrversion)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnScriptTerminate<Impl: IActiveScriptSiteImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvarresult: *const super::super::Com::VARIANT, pexcepinfo: *const super::super::Com::EXCEPINFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OnScriptTerminate(&*(&pvarresult as *const <super::super::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::Com::VARIANT as ::windows::core::DefaultType>::DefaultType), &*(&pexcepinfo as *const <super::super::Com::EXCEPINFO as ::windows::core::Abi>::Abi as *const <super::super::Com::EXCEPINFO as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnStateChange<Impl: IActiveScriptSiteImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ssscriptstate: SCRIPTSTATE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OnStateChange(ssscriptstate) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnScriptError<Impl: IActiveScriptSiteImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pscripterror: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OnScriptError(&*(&pscripterror as *const <IActiveScriptError as ::windows::core::Abi>::Abi as *const <IActiveScriptError as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnEnterScript<Impl: IActiveScriptSiteImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OnEnterScript() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnLeaveScript<Impl: IActiveScriptSiteImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OnLeaveScript() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IActiveScriptSite>, base.5, GetLCID::<Impl, OFFSET>, GetItemInfo::<Impl, OFFSET>, GetDocVersionString::<Impl, OFFSET>, OnScriptTerminate::<Impl, OFFSET>, OnStateChange::<Impl, OFFSET>, OnScriptError::<Impl, OFFSET>, OnEnterScript::<Impl, OFFSET>, OnLeaveScript::<Impl, OFFSET>)
    }
}
pub trait IActiveScriptSiteDebug32Impl: Sized {
    fn GetDocumentContextFromPosition();
    fn GetApplication();
    fn GetRootApplicationNode();
    fn OnScriptErrorDebug();
}
impl ::windows::core::RuntimeName for IActiveScriptSiteDebug32 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IActiveScriptSiteDebug32";
}
impl IActiveScriptSiteDebug32Vtbl {
    pub const fn new<Impl: IActiveScriptSiteDebug32Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IActiveScriptSiteDebug32Vtbl {
        unsafe extern "system" fn GetDocumentContextFromPosition<Impl: IActiveScriptSiteDebug32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwsourcecontext: u32, ucharacteroffset: u32, unumchars: u32, ppsc: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDocumentContextFromPosition(dwsourcecontext, ucharacteroffset, unumchars, ::core::mem::transmute_copy(&ppsc)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetApplication<Impl: IActiveScriptSiteDebug32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppda: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetApplication(::core::mem::transmute_copy(&ppda)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRootApplicationNode<Impl: IActiveScriptSiteDebug32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppdanroot: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetRootApplicationNode(::core::mem::transmute_copy(&ppdanroot)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnScriptErrorDebug<Impl: IActiveScriptSiteDebug32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, perrordebug: ::windows::core::RawPtr, pfenterdebugger: *mut super::super::super::Foundation::BOOL, pfcallonscripterrorwhencontinuing: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OnScriptErrorDebug(&*(&perrordebug as *const <IActiveScriptErrorDebug as ::windows::core::Abi>::Abi as *const <IActiveScriptErrorDebug as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pfenterdebugger), ::core::mem::transmute_copy(&pfcallonscripterrorwhencontinuing)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IActiveScriptSiteDebug32>, base.5, GetDocumentContextFromPosition::<Impl, OFFSET>, GetApplication::<Impl, OFFSET>, GetRootApplicationNode::<Impl, OFFSET>, OnScriptErrorDebug::<Impl, OFFSET>)
    }
}
pub trait IActiveScriptSiteDebug64Impl: Sized {
    fn GetDocumentContextFromPosition();
    fn GetApplication();
    fn GetRootApplicationNode();
    fn OnScriptErrorDebug();
}
impl ::windows::core::RuntimeName for IActiveScriptSiteDebug64 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IActiveScriptSiteDebug64";
}
impl IActiveScriptSiteDebug64Vtbl {
    pub const fn new<Impl: IActiveScriptSiteDebug64Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IActiveScriptSiteDebug64Vtbl {
        unsafe extern "system" fn GetDocumentContextFromPosition<Impl: IActiveScriptSiteDebug64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwsourcecontext: u64, ucharacteroffset: u32, unumchars: u32, ppsc: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDocumentContextFromPosition(dwsourcecontext, ucharacteroffset, unumchars, ::core::mem::transmute_copy(&ppsc)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetApplication<Impl: IActiveScriptSiteDebug64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppda: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetApplication(::core::mem::transmute_copy(&ppda)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRootApplicationNode<Impl: IActiveScriptSiteDebug64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppdanroot: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetRootApplicationNode(::core::mem::transmute_copy(&ppdanroot)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnScriptErrorDebug<Impl: IActiveScriptSiteDebug64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, perrordebug: ::windows::core::RawPtr, pfenterdebugger: *mut super::super::super::Foundation::BOOL, pfcallonscripterrorwhencontinuing: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OnScriptErrorDebug(&*(&perrordebug as *const <IActiveScriptErrorDebug as ::windows::core::Abi>::Abi as *const <IActiveScriptErrorDebug as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pfenterdebugger), ::core::mem::transmute_copy(&pfcallonscripterrorwhencontinuing)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IActiveScriptSiteDebug64>, base.5, GetDocumentContextFromPosition::<Impl, OFFSET>, GetApplication::<Impl, OFFSET>, GetRootApplicationNode::<Impl, OFFSET>, OnScriptErrorDebug::<Impl, OFFSET>)
    }
}
pub trait IActiveScriptSiteDebugExImpl: Sized {
    fn OnCanNotJITScriptErrorDebug();
}
impl ::windows::core::RuntimeName for IActiveScriptSiteDebugEx {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IActiveScriptSiteDebugEx";
}
impl IActiveScriptSiteDebugExVtbl {
    pub const fn new<Impl: IActiveScriptSiteDebugExImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IActiveScriptSiteDebugExVtbl {
        unsafe extern "system" fn OnCanNotJITScriptErrorDebug<Impl: IActiveScriptSiteDebugExImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, perrordebug: ::windows::core::RawPtr, pfcallonscripterrorwhencontinuing: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OnCanNotJITScriptErrorDebug(&*(&perrordebug as *const <IActiveScriptErrorDebug as ::windows::core::Abi>::Abi as *const <IActiveScriptErrorDebug as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pfcallonscripterrorwhencontinuing)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IActiveScriptSiteDebugEx>, base.5, OnCanNotJITScriptErrorDebug::<Impl, OFFSET>)
    }
}
pub trait IActiveScriptSiteInterruptPollImpl: Sized {
    fn QueryContinue();
}
impl ::windows::core::RuntimeName for IActiveScriptSiteInterruptPoll {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IActiveScriptSiteInterruptPoll";
}
impl IActiveScriptSiteInterruptPollVtbl {
    pub const fn new<Impl: IActiveScriptSiteInterruptPollImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IActiveScriptSiteInterruptPollVtbl {
        unsafe extern "system" fn QueryContinue<Impl: IActiveScriptSiteInterruptPollImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).QueryContinue() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IActiveScriptSiteInterruptPoll>, base.5, QueryContinue::<Impl, OFFSET>)
    }
}
pub trait IActiveScriptSiteTraceInfoImpl: Sized {
    fn SendScriptTraceInfo();
}
impl ::windows::core::RuntimeName for IActiveScriptSiteTraceInfo {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IActiveScriptSiteTraceInfo";
}
impl IActiveScriptSiteTraceInfoVtbl {
    pub const fn new<Impl: IActiveScriptSiteTraceInfoImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IActiveScriptSiteTraceInfoVtbl {
        unsafe extern "system" fn SendScriptTraceInfo<Impl: IActiveScriptSiteTraceInfoImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, stieventtype: SCRIPTTRACEINFO, guidcontextid: ::windows::core::GUID, dwscriptcontextcookie: u32, lscriptstatementstart: i32, lscriptstatementend: i32, dwreserved: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SendScriptTraceInfo(stieventtype, &*(&guidcontextid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), dwscriptcontextcookie, lscriptstatementstart, lscriptstatementend, dwreserved) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IActiveScriptSiteTraceInfo>, base.5, SendScriptTraceInfo::<Impl, OFFSET>)
    }
}
pub trait IActiveScriptSiteUIControlImpl: Sized {
    fn GetUIBehavior();
}
impl ::windows::core::RuntimeName for IActiveScriptSiteUIControl {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IActiveScriptSiteUIControl";
}
impl IActiveScriptSiteUIControlVtbl {
    pub const fn new<Impl: IActiveScriptSiteUIControlImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IActiveScriptSiteUIControlVtbl {
        unsafe extern "system" fn GetUIBehavior<Impl: IActiveScriptSiteUIControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, uicitem: SCRIPTUICITEM, puichandling: *mut SCRIPTUICHANDLING) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetUIBehavior(uicitem, ::core::mem::transmute_copy(&puichandling)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IActiveScriptSiteUIControl>, base.5, GetUIBehavior::<Impl, OFFSET>)
    }
}
pub trait IActiveScriptSiteWindowImpl: Sized {
    fn GetWindow();
    fn EnableModeless();
}
impl ::windows::core::RuntimeName for IActiveScriptSiteWindow {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IActiveScriptSiteWindow";
}
impl IActiveScriptSiteWindowVtbl {
    pub const fn new<Impl: IActiveScriptSiteWindowImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IActiveScriptSiteWindowVtbl {
        unsafe extern "system" fn GetWindow<Impl: IActiveScriptSiteWindowImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, phwnd: *mut super::super::super::Foundation::HWND) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetWindow(::core::mem::transmute_copy(&phwnd)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnableModeless<Impl: IActiveScriptSiteWindowImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fenable: super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EnableModeless(&*(&fenable as *const <super::super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IActiveScriptSiteWindow>, base.5, GetWindow::<Impl, OFFSET>, EnableModeless::<Impl, OFFSET>)
    }
}
pub trait IActiveScriptStatsImpl: Sized {
    fn GetStat();
    fn GetStatEx();
    fn ResetStats();
}
impl ::windows::core::RuntimeName for IActiveScriptStats {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IActiveScriptStats";
}
impl IActiveScriptStatsVtbl {
    pub const fn new<Impl: IActiveScriptStatsImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IActiveScriptStatsVtbl {
        unsafe extern "system" fn GetStat<Impl: IActiveScriptStatsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, stid: u32, pluhi: *mut u32, plulo: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetStat(stid, ::core::mem::transmute_copy(&pluhi), ::core::mem::transmute_copy(&plulo)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetStatEx<Impl: IActiveScriptStatsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guid: *const ::windows::core::GUID, pluhi: *mut u32, plulo: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetStatEx(&*(&guid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pluhi), ::core::mem::transmute_copy(&plulo)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ResetStats<Impl: IActiveScriptStatsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ResetStats() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IActiveScriptStats>, base.5, GetStat::<Impl, OFFSET>, GetStatEx::<Impl, OFFSET>, ResetStats::<Impl, OFFSET>)
    }
}
pub trait IActiveScriptStringCompareImpl: Sized {
    fn StrComp();
}
impl ::windows::core::RuntimeName for IActiveScriptStringCompare {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IActiveScriptStringCompare";
}
impl IActiveScriptStringCompareVtbl {
    pub const fn new<Impl: IActiveScriptStringCompareImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IActiveScriptStringCompareVtbl {
        unsafe extern "system" fn StrComp<Impl: IActiveScriptStringCompareImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bszstr1: ::core::mem::ManuallyDrop<super::super::super::Foundation::BSTR>, bszstr2: ::core::mem::ManuallyDrop<super::super::super::Foundation::BSTR>, iret: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).StrComp(&*(&bszstr1 as *const <super::super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType), &*(&bszstr2 as *const <super::super::super::Foundation::BSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::BSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&iret)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IActiveScriptStringCompare>, base.5, StrComp::<Impl, OFFSET>)
    }
}
pub trait IActiveScriptTraceInfoImpl: Sized {
    fn StartScriptTracing();
    fn StopScriptTracing();
}
impl ::windows::core::RuntimeName for IActiveScriptTraceInfo {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IActiveScriptTraceInfo";
}
impl IActiveScriptTraceInfoVtbl {
    pub const fn new<Impl: IActiveScriptTraceInfoImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IActiveScriptTraceInfoVtbl {
        unsafe extern "system" fn StartScriptTracing<Impl: IActiveScriptTraceInfoImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psitetraceinfo: ::windows::core::RawPtr, guidcontextid: ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).StartScriptTracing(&*(&psitetraceinfo as *const <IActiveScriptSiteTraceInfo as ::windows::core::Abi>::Abi as *const <IActiveScriptSiteTraceInfo as ::windows::core::DefaultType>::DefaultType), &*(&guidcontextid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StopScriptTracing<Impl: IActiveScriptTraceInfoImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).StopScriptTracing() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IActiveScriptTraceInfo>, base.5, StartScriptTracing::<Impl, OFFSET>, StopScriptTracing::<Impl, OFFSET>)
    }
}
pub trait IActiveScriptWinRTErrorDebugImpl: Sized + IActiveScriptErrorImpl {
    fn GetRestrictedErrorString();
    fn GetRestrictedErrorReference();
    fn GetCapabilitySid();
}
impl ::windows::core::RuntimeName for IActiveScriptWinRTErrorDebug {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IActiveScriptWinRTErrorDebug";
}
impl IActiveScriptWinRTErrorDebugVtbl {
    pub const fn new<Impl: IActiveScriptWinRTErrorDebugImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IActiveScriptWinRTErrorDebugVtbl {
        unsafe extern "system" fn GetRestrictedErrorString<Impl: IActiveScriptWinRTErrorDebugImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, errorstring: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetRestrictedErrorString(::core::mem::transmute_copy(&errorstring)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRestrictedErrorReference<Impl: IActiveScriptWinRTErrorDebugImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, referencestring: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetRestrictedErrorReference(::core::mem::transmute_copy(&referencestring)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCapabilitySid<Impl: IActiveScriptWinRTErrorDebugImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, capabilitysid: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCapabilitySid(::core::mem::transmute_copy(&capabilitysid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IActiveScriptWinRTErrorDebug>, base.5, GetRestrictedErrorString::<Impl, OFFSET>, GetRestrictedErrorReference::<Impl, OFFSET>, GetCapabilitySid::<Impl, OFFSET>)
    }
}
pub trait IApplicationDebuggerImpl: Sized {
    fn QueryAlive();
    fn CreateInstanceAtDebugger();
    fn onDebugOutput();
    fn onHandleBreakPoint();
    fn onClose();
    fn onDebuggerEvent();
}
impl ::windows::core::RuntimeName for IApplicationDebugger {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IApplicationDebugger";
}
impl IApplicationDebuggerVtbl {
    pub const fn new<Impl: IApplicationDebuggerImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IApplicationDebuggerVtbl {
        unsafe extern "system" fn QueryAlive<Impl: IApplicationDebuggerImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).QueryAlive() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateInstanceAtDebugger<Impl: IApplicationDebuggerImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, rclsid: *const ::windows::core::GUID, punkouter: *mut ::core::ffi::c_void, dwclscontext: u32, riid: *const ::windows::core::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateInstanceAtDebugger(
                &*(&rclsid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType),
                &*(&punkouter as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType),
                dwclscontext,
                &*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType),
                ::core::mem::transmute_copy(&ppvobject),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn onDebugOutput<Impl: IApplicationDebuggerImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstr: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).onDebugOutput(&*(&pstr as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn onHandleBreakPoint<Impl: IApplicationDebuggerImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prpt: ::windows::core::RawPtr, br: BREAKREASON, perror: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).onHandleBreakPoint(&*(&prpt as *const <IRemoteDebugApplicationThread as ::windows::core::Abi>::Abi as *const <IRemoteDebugApplicationThread as ::windows::core::DefaultType>::DefaultType), br, &*(&perror as *const <IActiveScriptErrorDebug as ::windows::core::Abi>::Abi as *const <IActiveScriptErrorDebug as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn onClose<Impl: IApplicationDebuggerImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).onClose() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn onDebuggerEvent<Impl: IApplicationDebuggerImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, riid: *const ::windows::core::GUID, punk: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).onDebuggerEvent(&*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), &*(&punk as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IApplicationDebugger>, base.5, QueryAlive::<Impl, OFFSET>, CreateInstanceAtDebugger::<Impl, OFFSET>, onDebugOutput::<Impl, OFFSET>, onHandleBreakPoint::<Impl, OFFSET>, onClose::<Impl, OFFSET>, onDebuggerEvent::<Impl, OFFSET>)
    }
}
pub trait IApplicationDebuggerUIImpl: Sized {
    fn BringDocumentToTop();
    fn BringDocumentContextToTop();
}
impl ::windows::core::RuntimeName for IApplicationDebuggerUI {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IApplicationDebuggerUI";
}
impl IApplicationDebuggerUIVtbl {
    pub const fn new<Impl: IApplicationDebuggerUIImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IApplicationDebuggerUIVtbl {
        unsafe extern "system" fn BringDocumentToTop<Impl: IApplicationDebuggerUIImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pddt: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).BringDocumentToTop(&*(&pddt as *const <IDebugDocumentText as ::windows::core::Abi>::Abi as *const <IDebugDocumentText as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BringDocumentContextToTop<Impl: IApplicationDebuggerUIImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pddc: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).BringDocumentContextToTop(&*(&pddc as *const <IDebugDocumentContext as ::windows::core::Abi>::Abi as *const <IDebugDocumentContext as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IApplicationDebuggerUI>, base.5, BringDocumentToTop::<Impl, OFFSET>, BringDocumentContextToTop::<Impl, OFFSET>)
    }
}
pub trait IBindEventHandlerImpl: Sized {
    fn BindHandler();
}
impl ::windows::core::RuntimeName for IBindEventHandler {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IBindEventHandler";
}
impl IBindEventHandlerVtbl {
    pub const fn new<Impl: IBindEventHandlerImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IBindEventHandlerVtbl {
        unsafe extern "system" fn BindHandler<Impl: IBindEventHandlerImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstrevent: super::super::super::Foundation::PWSTR, pdisp: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).BindHandler(&*(&pstrevent as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&pdisp as *const <super::super::Com::IDispatch as ::windows::core::Abi>::Abi as *const <super::super::Com::IDispatch as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IBindEventHandler>, base.5, BindHandler::<Impl, OFFSET>)
    }
}
pub trait ICodeAddressConceptImpl: Sized {
    fn GetContainingSymbol();
}
impl ::windows::core::RuntimeName for ICodeAddressConcept {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.ICodeAddressConcept";
}
impl ICodeAddressConceptVtbl {
    pub const fn new<Impl: ICodeAddressConceptImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> ICodeAddressConceptVtbl {
        unsafe extern "system" fn GetContainingSymbol<Impl: ICodeAddressConceptImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcontextobject: ::windows::core::RawPtr, ppsymbol: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetContainingSymbol(&*(&pcontextobject as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppsymbol)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<ICodeAddressConcept>, base.5, GetContainingSymbol::<Impl, OFFSET>)
    }
}
pub trait IComparableConceptImpl: Sized {
    fn CompareObjects();
}
impl ::windows::core::RuntimeName for IComparableConcept {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IComparableConcept";
}
impl IComparableConceptVtbl {
    pub const fn new<Impl: IComparableConceptImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IComparableConceptVtbl {
        unsafe extern "system" fn CompareObjects<Impl: IComparableConceptImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, contextobject: ::windows::core::RawPtr, otherobject: ::windows::core::RawPtr, comparisonresult: *mut i32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CompareObjects(&*(&contextobject as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType), &*(&otherobject as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&comparisonresult)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IComparableConcept>, base.5, CompareObjects::<Impl, OFFSET>)
    }
}
pub trait IDataModelConceptImpl: Sized {
    fn InitializeObject();
    fn GetName();
}
impl ::windows::core::RuntimeName for IDataModelConcept {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDataModelConcept";
}
impl IDataModelConceptVtbl {
    pub const fn new<Impl: IDataModelConceptImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDataModelConceptVtbl {
        unsafe extern "system" fn InitializeObject<Impl: IDataModelConceptImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, modelobject: ::windows::core::RawPtr, matchingtypesignature: ::windows::core::RawPtr, wildcardmatches: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).InitializeObject(
                &*(&modelobject as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType),
                &*(&matchingtypesignature as *const <IDebugHostTypeSignature as ::windows::core::Abi>::Abi as *const <IDebugHostTypeSignature as ::windows::core::DefaultType>::DefaultType),
                &*(&wildcardmatches as *const <IDebugHostSymbolEnumerator as ::windows::core::Abi>::Abi as *const <IDebugHostSymbolEnumerator as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetName<Impl: IDataModelConceptImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, modelname: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetName(::core::mem::transmute_copy(&modelname)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDataModelConcept>, base.5, InitializeObject::<Impl, OFFSET>, GetName::<Impl, OFFSET>)
    }
}
pub trait IDataModelManagerImpl: Sized {
    fn Close();
    fn CreateNoValue();
    fn CreateErrorObject();
    fn CreateTypedObject();
    fn CreateTypedObjectReference();
    fn CreateSyntheticObject();
    fn CreateDataModelObject();
    fn CreateIntrinsicObject();
    fn CreateTypedIntrinsicObject();
    fn GetModelForTypeSignature();
    fn GetModelForType();
    fn RegisterModelForTypeSignature();
    fn UnregisterModelForTypeSignature();
    fn RegisterExtensionForTypeSignature();
    fn UnregisterExtensionForTypeSignature();
    fn CreateMetadataStore();
    fn GetRootNamespace();
    fn RegisterNamedModel();
    fn UnregisterNamedModel();
    fn AcquireNamedModel();
}
impl ::windows::core::RuntimeName for IDataModelManager {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDataModelManager";
}
impl IDataModelManagerVtbl {
    pub const fn new<Impl: IDataModelManagerImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDataModelManagerVtbl {
        unsafe extern "system" fn Close<Impl: IDataModelManagerImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Close() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateNoValue<Impl: IDataModelManagerImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, object: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateNoValue(::core::mem::transmute_copy(&object)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateErrorObject<Impl: IDataModelManagerImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hrerror: ::windows::core::HRESULT, pwszmessage: super::super::super::Foundation::PWSTR, object: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateErrorObject(hrerror, &*(&pwszmessage as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&object)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateTypedObject<Impl: IDataModelManagerImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: ::windows::core::RawPtr, objectlocation: Location, objecttype: ::windows::core::RawPtr, object: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateTypedObject(&*(&context as *const <IDebugHostContext as ::windows::core::Abi>::Abi as *const <IDebugHostContext as ::windows::core::DefaultType>::DefaultType), &*(&objectlocation as *const <Location as ::windows::core::Abi>::Abi as *const <Location as ::windows::core::DefaultType>::DefaultType), &*(&objecttype as *const <IDebugHostType as ::windows::core::Abi>::Abi as *const <IDebugHostType as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&object)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateTypedObjectReference<Impl: IDataModelManagerImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: ::windows::core::RawPtr, objectlocation: Location, objecttype: ::windows::core::RawPtr, object: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateTypedObjectReference(&*(&context as *const <IDebugHostContext as ::windows::core::Abi>::Abi as *const <IDebugHostContext as ::windows::core::DefaultType>::DefaultType), &*(&objectlocation as *const <Location as ::windows::core::Abi>::Abi as *const <Location as ::windows::core::DefaultType>::DefaultType), &*(&objecttype as *const <IDebugHostType as ::windows::core::Abi>::Abi as *const <IDebugHostType as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&object)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateSyntheticObject<Impl: IDataModelManagerImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: ::windows::core::RawPtr, object: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateSyntheticObject(&*(&context as *const <IDebugHostContext as ::windows::core::Abi>::Abi as *const <IDebugHostContext as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&object)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateDataModelObject<Impl: IDataModelManagerImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, datamodel: ::windows::core::RawPtr, object: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateDataModelObject(&*(&datamodel as *const <IDataModelConcept as ::windows::core::Abi>::Abi as *const <IDataModelConcept as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&object)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateIntrinsicObject<Impl: IDataModelManagerImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, objectkind: ModelObjectKind, intrinsicdata: *const super::super::Com::VARIANT, object: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateIntrinsicObject(objectkind, &*(&intrinsicdata as *const <super::super::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::Com::VARIANT as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&object)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateTypedIntrinsicObject<Impl: IDataModelManagerImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, intrinsicdata: *const super::super::Com::VARIANT, r#type: ::windows::core::RawPtr, object: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateTypedIntrinsicObject(&*(&intrinsicdata as *const <super::super::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::Com::VARIANT as ::windows::core::DefaultType>::DefaultType), &*(&r#type as *const <IDebugHostType as ::windows::core::Abi>::Abi as *const <IDebugHostType as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&object)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModelForTypeSignature<Impl: IDataModelManagerImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, typesignature: ::windows::core::RawPtr, datamodel: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetModelForTypeSignature(&*(&typesignature as *const <IDebugHostTypeSignature as ::windows::core::Abi>::Abi as *const <IDebugHostTypeSignature as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&datamodel)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModelForType<Impl: IDataModelManagerImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: ::windows::core::RawPtr, datamodel: *mut ::windows::core::RawPtr, typesignature: *mut ::windows::core::RawPtr, wildcardmatches: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetModelForType(&*(&r#type as *const <IDebugHostType as ::windows::core::Abi>::Abi as *const <IDebugHostType as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&datamodel), ::core::mem::transmute_copy(&typesignature), ::core::mem::transmute_copy(&wildcardmatches)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RegisterModelForTypeSignature<Impl: IDataModelManagerImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, typesignature: ::windows::core::RawPtr, datamodel: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RegisterModelForTypeSignature(&*(&typesignature as *const <IDebugHostTypeSignature as ::windows::core::Abi>::Abi as *const <IDebugHostTypeSignature as ::windows::core::DefaultType>::DefaultType), &*(&datamodel as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn UnregisterModelForTypeSignature<Impl: IDataModelManagerImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, datamodel: ::windows::core::RawPtr, typesignature: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).UnregisterModelForTypeSignature(&*(&datamodel as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType), &*(&typesignature as *const <IDebugHostTypeSignature as ::windows::core::Abi>::Abi as *const <IDebugHostTypeSignature as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RegisterExtensionForTypeSignature<Impl: IDataModelManagerImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, typesignature: ::windows::core::RawPtr, datamodel: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RegisterExtensionForTypeSignature(&*(&typesignature as *const <IDebugHostTypeSignature as ::windows::core::Abi>::Abi as *const <IDebugHostTypeSignature as ::windows::core::DefaultType>::DefaultType), &*(&datamodel as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn UnregisterExtensionForTypeSignature<Impl: IDataModelManagerImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, datamodel: ::windows::core::RawPtr, typesignature: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).UnregisterExtensionForTypeSignature(&*(&datamodel as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType), &*(&typesignature as *const <IDebugHostTypeSignature as ::windows::core::Abi>::Abi as *const <IDebugHostTypeSignature as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateMetadataStore<Impl: IDataModelManagerImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, parentstore: ::windows::core::RawPtr, metadatastore: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateMetadataStore(&*(&parentstore as *const <IKeyStore as ::windows::core::Abi>::Abi as *const <IKeyStore as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&metadatastore)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRootNamespace<Impl: IDataModelManagerImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, rootnamespace: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetRootNamespace(::core::mem::transmute_copy(&rootnamespace)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RegisterNamedModel<Impl: IDataModelManagerImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, modelname: super::super::super::Foundation::PWSTR, modeobject: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RegisterNamedModel(&*(&modelname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&modeobject as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn UnregisterNamedModel<Impl: IDataModelManagerImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, modelname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).UnregisterNamedModel(&*(&modelname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AcquireNamedModel<Impl: IDataModelManagerImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, modelname: super::super::super::Foundation::PWSTR, modelobject: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AcquireNamedModel(&*(&modelname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&modelobject)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            base.0,
            base.1,
            base.2,
            base.3,
            ::windows::core::GetRuntimeClassName::<IDataModelManager>,
            base.5,
            Close::<Impl, OFFSET>,
            CreateNoValue::<Impl, OFFSET>,
            CreateErrorObject::<Impl, OFFSET>,
            CreateTypedObject::<Impl, OFFSET>,
            CreateTypedObjectReference::<Impl, OFFSET>,
            CreateSyntheticObject::<Impl, OFFSET>,
            CreateDataModelObject::<Impl, OFFSET>,
            CreateIntrinsicObject::<Impl, OFFSET>,
            CreateTypedIntrinsicObject::<Impl, OFFSET>,
            GetModelForTypeSignature::<Impl, OFFSET>,
            GetModelForType::<Impl, OFFSET>,
            RegisterModelForTypeSignature::<Impl, OFFSET>,
            UnregisterModelForTypeSignature::<Impl, OFFSET>,
            RegisterExtensionForTypeSignature::<Impl, OFFSET>,
            UnregisterExtensionForTypeSignature::<Impl, OFFSET>,
            CreateMetadataStore::<Impl, OFFSET>,
            GetRootNamespace::<Impl, OFFSET>,
            RegisterNamedModel::<Impl, OFFSET>,
            UnregisterNamedModel::<Impl, OFFSET>,
            AcquireNamedModel::<Impl, OFFSET>,
        )
    }
}
pub trait IDataModelManager2Impl: Sized + IDataModelManagerImpl {
    fn AcquireSubNamespace();
    fn CreateTypedIntrinsicObjectEx();
}
impl ::windows::core::RuntimeName for IDataModelManager2 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDataModelManager2";
}
impl IDataModelManager2Vtbl {
    pub const fn new<Impl: IDataModelManager2Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDataModelManager2Vtbl {
        unsafe extern "system" fn AcquireSubNamespace<Impl: IDataModelManager2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, modelname: super::super::super::Foundation::PWSTR, subnamespacemodelname: super::super::super::Foundation::PWSTR, accessname: super::super::super::Foundation::PWSTR, metadata: ::windows::core::RawPtr, namespacemodelobject: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AcquireSubNamespace(
                &*(&modelname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&subnamespacemodelname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&accessname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&metadata as *const <IKeyStore as ::windows::core::Abi>::Abi as *const <IKeyStore as ::windows::core::DefaultType>::DefaultType),
                ::core::mem::transmute_copy(&namespacemodelobject),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateTypedIntrinsicObjectEx<Impl: IDataModelManager2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: ::windows::core::RawPtr, intrinsicdata: *const super::super::Com::VARIANT, r#type: ::windows::core::RawPtr, object: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateTypedIntrinsicObjectEx(
                &*(&context as *const <IDebugHostContext as ::windows::core::Abi>::Abi as *const <IDebugHostContext as ::windows::core::DefaultType>::DefaultType),
                &*(&intrinsicdata as *const <super::super::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::Com::VARIANT as ::windows::core::DefaultType>::DefaultType),
                &*(&r#type as *const <IDebugHostType as ::windows::core::Abi>::Abi as *const <IDebugHostType as ::windows::core::DefaultType>::DefaultType),
                ::core::mem::transmute_copy(&object),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDataModelManager2>, base.5, AcquireSubNamespace::<Impl, OFFSET>, CreateTypedIntrinsicObjectEx::<Impl, OFFSET>)
    }
}
pub trait IDataModelNameBinderImpl: Sized {
    fn BindValue();
    fn BindReference();
    fn EnumerateValues();
    fn EnumerateReferences();
}
impl ::windows::core::RuntimeName for IDataModelNameBinder {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDataModelNameBinder";
}
impl IDataModelNameBinderVtbl {
    pub const fn new<Impl: IDataModelNameBinderImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDataModelNameBinderVtbl {
        unsafe extern "system" fn BindValue<Impl: IDataModelNameBinderImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, contextobject: ::windows::core::RawPtr, name: super::super::super::Foundation::PWSTR, value: *mut ::windows::core::RawPtr, metadata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).BindValue(&*(&contextobject as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType), &*(&name as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&metadata)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BindReference<Impl: IDataModelNameBinderImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, contextobject: ::windows::core::RawPtr, name: super::super::super::Foundation::PWSTR, reference: *mut ::windows::core::RawPtr, metadata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).BindReference(&*(&contextobject as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType), &*(&name as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&reference), ::core::mem::transmute_copy(&metadata)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumerateValues<Impl: IDataModelNameBinderImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, contextobject: ::windows::core::RawPtr, enumerator: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EnumerateValues(&*(&contextobject as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&enumerator)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumerateReferences<Impl: IDataModelNameBinderImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, contextobject: ::windows::core::RawPtr, enumerator: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EnumerateReferences(&*(&contextobject as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&enumerator)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDataModelNameBinder>, base.5, BindValue::<Impl, OFFSET>, BindReference::<Impl, OFFSET>, EnumerateValues::<Impl, OFFSET>, EnumerateReferences::<Impl, OFFSET>)
    }
}
pub trait IDataModelScriptImpl: Sized {
    fn GetName();
    fn Rename();
    fn Populate();
    fn Execute();
    fn Unlink();
    fn IsInvocable();
    fn InvokeMain();
}
impl ::windows::core::RuntimeName for IDataModelScript {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDataModelScript";
}
impl IDataModelScriptVtbl {
    pub const fn new<Impl: IDataModelScriptImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDataModelScriptVtbl {
        unsafe extern "system" fn GetName<Impl: IDataModelScriptImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, scriptname: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetName(::core::mem::transmute_copy(&scriptname)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Rename<Impl: IDataModelScriptImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, scriptname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Rename(&*(&scriptname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Populate<Impl: IDataModelScriptImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, contentstream: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Populate(&*(&contentstream as *const <super::super::Com::IStream as ::windows::core::Abi>::Abi as *const <super::super::Com::IStream as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Execute<Impl: IDataModelScriptImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Execute(&*(&client as *const <IDataModelScriptClient as ::windows::core::Abi>::Abi as *const <IDataModelScriptClient as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Unlink<Impl: IDataModelScriptImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Unlink() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsInvocable<Impl: IDataModelScriptImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, isinvocable: *mut bool) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).IsInvocable(::core::mem::transmute_copy(&isinvocable)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn InvokeMain<Impl: IDataModelScriptImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).InvokeMain(&*(&client as *const <IDataModelScriptClient as ::windows::core::Abi>::Abi as *const <IDataModelScriptClient as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDataModelScript>, base.5, GetName::<Impl, OFFSET>, Rename::<Impl, OFFSET>, Populate::<Impl, OFFSET>, Execute::<Impl, OFFSET>, Unlink::<Impl, OFFSET>, IsInvocable::<Impl, OFFSET>, InvokeMain::<Impl, OFFSET>)
    }
}
pub trait IDataModelScriptClientImpl: Sized {
    fn ReportError();
}
impl ::windows::core::RuntimeName for IDataModelScriptClient {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDataModelScriptClient";
}
impl IDataModelScriptClientVtbl {
    pub const fn new<Impl: IDataModelScriptClientImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDataModelScriptClientVtbl {
        unsafe extern "system" fn ReportError<Impl: IDataModelScriptClientImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, errclass: ErrorClass, hrfail: ::windows::core::HRESULT, message: super::super::super::Foundation::PWSTR, line: u32, position: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReportError(errclass, hrfail, &*(&message as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), line, position) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDataModelScriptClient>, base.5, ReportError::<Impl, OFFSET>)
    }
}
pub trait IDataModelScriptDebugImpl: Sized {
    fn GetDebugState();
    fn GetCurrentPosition();
    fn GetStack();
    fn SetBreakpoint();
    fn FindBreakpointById();
    fn EnumerateBreakpoints();
    fn GetEventFilter();
    fn SetEventFilter();
    fn StartDebugging();
    fn StopDebugging();
}
impl ::windows::core::RuntimeName for IDataModelScriptDebug {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDataModelScriptDebug";
}
impl IDataModelScriptDebugVtbl {
    pub const fn new<Impl: IDataModelScriptDebugImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDataModelScriptDebugVtbl {
        unsafe extern "system" fn GetDebugState<Impl: IDataModelScriptDebugImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ScriptDebugState {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDebugState() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentPosition<Impl: IDataModelScriptDebugImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, currentposition: *mut ScriptDebugPosition, positionspanend: *mut ScriptDebugPosition, linetext: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentPosition(::core::mem::transmute_copy(&currentposition), ::core::mem::transmute_copy(&positionspanend), ::core::mem::transmute_copy(&linetext)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetStack<Impl: IDataModelScriptDebugImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, stack: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetStack(::core::mem::transmute_copy(&stack)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetBreakpoint<Impl: IDataModelScriptDebugImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lineposition: u32, columnposition: u32, breakpoint: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetBreakpoint(lineposition, columnposition, ::core::mem::transmute_copy(&breakpoint)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FindBreakpointById<Impl: IDataModelScriptDebugImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, breakpointid: u64, breakpoint: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).FindBreakpointById(breakpointid, ::core::mem::transmute_copy(&breakpoint)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumerateBreakpoints<Impl: IDataModelScriptDebugImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, breakpointenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EnumerateBreakpoints(::core::mem::transmute_copy(&breakpointenum)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventFilter<Impl: IDataModelScriptDebugImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, eventfilter: ScriptDebugEventFilter, isbreakenabled: *mut bool) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventFilter(eventfilter, ::core::mem::transmute_copy(&isbreakenabled)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEventFilter<Impl: IDataModelScriptDebugImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, eventfilter: ScriptDebugEventFilter, isbreakenabled: u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetEventFilter(eventfilter, isbreakenabled) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartDebugging<Impl: IDataModelScriptDebugImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, debugclient: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).StartDebugging(&*(&debugclient as *const <IDataModelScriptDebugClient as ::windows::core::Abi>::Abi as *const <IDataModelScriptDebugClient as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StopDebugging<Impl: IDataModelScriptDebugImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, debugclient: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).StopDebugging(&*(&debugclient as *const <IDataModelScriptDebugClient as ::windows::core::Abi>::Abi as *const <IDataModelScriptDebugClient as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDataModelScriptDebug>, base.5, GetDebugState::<Impl, OFFSET>, GetCurrentPosition::<Impl, OFFSET>, GetStack::<Impl, OFFSET>, SetBreakpoint::<Impl, OFFSET>, FindBreakpointById::<Impl, OFFSET>, EnumerateBreakpoints::<Impl, OFFSET>, GetEventFilter::<Impl, OFFSET>, SetEventFilter::<Impl, OFFSET>, StartDebugging::<Impl, OFFSET>, StopDebugging::<Impl, OFFSET>)
    }
}
pub trait IDataModelScriptDebug2Impl: Sized + IDataModelScriptDebugImpl {
    fn SetBreakpointAtFunction();
}
impl ::windows::core::RuntimeName for IDataModelScriptDebug2 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDataModelScriptDebug2";
}
impl IDataModelScriptDebug2Vtbl {
    pub const fn new<Impl: IDataModelScriptDebug2Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDataModelScriptDebug2Vtbl {
        unsafe extern "system" fn SetBreakpointAtFunction<Impl: IDataModelScriptDebug2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, functionname: super::super::super::Foundation::PWSTR, breakpoint: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetBreakpointAtFunction(&*(&functionname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&breakpoint)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDataModelScriptDebug2>, base.5, SetBreakpointAtFunction::<Impl, OFFSET>)
    }
}
pub trait IDataModelScriptDebugBreakpointImpl: Sized {
    fn GetId();
    fn IsEnabled();
    fn Enable();
    fn Disable();
    fn Remove();
    fn GetPosition();
}
impl ::windows::core::RuntimeName for IDataModelScriptDebugBreakpoint {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDataModelScriptDebugBreakpoint";
}
impl IDataModelScriptDebugBreakpointVtbl {
    pub const fn new<Impl: IDataModelScriptDebugBreakpointImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDataModelScriptDebugBreakpointVtbl {
        unsafe extern "system" fn GetId<Impl: IDataModelScriptDebugBreakpointImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> u64 {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetId() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsEnabled<Impl: IDataModelScriptDebugBreakpointImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> bool {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).IsEnabled() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Enable<Impl: IDataModelScriptDebugBreakpointImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            (*this).Enable().into()
        }
        unsafe extern "system" fn Disable<Impl: IDataModelScriptDebugBreakpointImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            (*this).Disable().into()
        }
        unsafe extern "system" fn Remove<Impl: IDataModelScriptDebugBreakpointImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            (*this).Remove().into()
        }
        unsafe extern "system" fn GetPosition<Impl: IDataModelScriptDebugBreakpointImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, position: *mut ScriptDebugPosition, positionspanend: *mut ScriptDebugPosition, linetext: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetPosition(::core::mem::transmute_copy(&position), ::core::mem::transmute_copy(&positionspanend), ::core::mem::transmute_copy(&linetext)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDataModelScriptDebugBreakpoint>, base.5, GetId::<Impl, OFFSET>, IsEnabled::<Impl, OFFSET>, Enable::<Impl, OFFSET>, Disable::<Impl, OFFSET>, Remove::<Impl, OFFSET>, GetPosition::<Impl, OFFSET>)
    }
}
pub trait IDataModelScriptDebugBreakpointEnumeratorImpl: Sized {
    fn Reset();
    fn GetNext();
}
impl ::windows::core::RuntimeName for IDataModelScriptDebugBreakpointEnumerator {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDataModelScriptDebugBreakpointEnumerator";
}
impl IDataModelScriptDebugBreakpointEnumeratorVtbl {
    pub const fn new<Impl: IDataModelScriptDebugBreakpointEnumeratorImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDataModelScriptDebugBreakpointEnumeratorVtbl {
        unsafe extern "system" fn Reset<Impl: IDataModelScriptDebugBreakpointEnumeratorImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Reset() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNext<Impl: IDataModelScriptDebugBreakpointEnumeratorImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, breakpoint: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNext(::core::mem::transmute_copy(&breakpoint)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDataModelScriptDebugBreakpointEnumerator>, base.5, Reset::<Impl, OFFSET>, GetNext::<Impl, OFFSET>)
    }
}
pub trait IDataModelScriptDebugClientImpl: Sized {
    fn NotifyDebugEvent();
}
impl ::windows::core::RuntimeName for IDataModelScriptDebugClient {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDataModelScriptDebugClient";
}
impl IDataModelScriptDebugClientVtbl {
    pub const fn new<Impl: IDataModelScriptDebugClientImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDataModelScriptDebugClientVtbl {
        unsafe extern "system" fn NotifyDebugEvent<Impl: IDataModelScriptDebugClientImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, peventinfo: *const ScriptDebugEventInformation, pscript: ::windows::core::RawPtr, peventdataobject: ::windows::core::RawPtr, resumeeventkind: *mut ScriptExecutionKind) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).NotifyDebugEvent(&*(&peventinfo as *const <ScriptDebugEventInformation as ::windows::core::Abi>::Abi as *const <ScriptDebugEventInformation as ::windows::core::DefaultType>::DefaultType), &*(&pscript as *const <IDataModelScript as ::windows::core::Abi>::Abi as *const <IDataModelScript as ::windows::core::DefaultType>::DefaultType), &*(&peventdataobject as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType), resumeeventkind) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDataModelScriptDebugClient>, base.5, NotifyDebugEvent::<Impl, OFFSET>)
    }
}
pub trait IDataModelScriptDebugStackImpl: Sized {
    fn GetFrameCount();
    fn GetStackFrame();
}
impl ::windows::core::RuntimeName for IDataModelScriptDebugStack {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDataModelScriptDebugStack";
}
impl IDataModelScriptDebugStackVtbl {
    pub const fn new<Impl: IDataModelScriptDebugStackImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDataModelScriptDebugStackVtbl {
        unsafe extern "system" fn GetFrameCount<Impl: IDataModelScriptDebugStackImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> u64 {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetFrameCount() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetStackFrame<Impl: IDataModelScriptDebugStackImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, framenumber: u64, stackframe: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetStackFrame(framenumber, ::core::mem::transmute_copy(&stackframe)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDataModelScriptDebugStack>, base.5, GetFrameCount::<Impl, OFFSET>, GetStackFrame::<Impl, OFFSET>)
    }
}
pub trait IDataModelScriptDebugStackFrameImpl: Sized {
    fn GetName();
    fn GetPosition();
    fn IsTransitionPoint();
    fn GetTransition();
    fn Evaluate();
    fn EnumerateLocals();
    fn EnumerateArguments();
}
impl ::windows::core::RuntimeName for IDataModelScriptDebugStackFrame {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDataModelScriptDebugStackFrame";
}
impl IDataModelScriptDebugStackFrameVtbl {
    pub const fn new<Impl: IDataModelScriptDebugStackFrameImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDataModelScriptDebugStackFrameVtbl {
        unsafe extern "system" fn GetName<Impl: IDataModelScriptDebugStackFrameImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetName(::core::mem::transmute_copy(&name)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPosition<Impl: IDataModelScriptDebugStackFrameImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, position: *mut ScriptDebugPosition, positionspanend: *mut ScriptDebugPosition, linetext: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetPosition(::core::mem::transmute_copy(&position), ::core::mem::transmute_copy(&positionspanend), ::core::mem::transmute_copy(&linetext)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsTransitionPoint<Impl: IDataModelScriptDebugStackFrameImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, istransitionpoint: *mut bool) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).IsTransitionPoint(::core::mem::transmute_copy(&istransitionpoint)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTransition<Impl: IDataModelScriptDebugStackFrameImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, transitionscript: *mut ::windows::core::RawPtr, istransitioncontiguous: *mut bool) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTransition(::core::mem::transmute_copy(&transitionscript), ::core::mem::transmute_copy(&istransitioncontiguous)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Evaluate<Impl: IDataModelScriptDebugStackFrameImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwszexpression: super::super::super::Foundation::PWSTR, ppresult: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Evaluate(&*(&pwszexpression as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppresult)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumerateLocals<Impl: IDataModelScriptDebugStackFrameImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, variablesenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EnumerateLocals(::core::mem::transmute_copy(&variablesenum)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumerateArguments<Impl: IDataModelScriptDebugStackFrameImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, variablesenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EnumerateArguments(::core::mem::transmute_copy(&variablesenum)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDataModelScriptDebugStackFrame>, base.5, GetName::<Impl, OFFSET>, GetPosition::<Impl, OFFSET>, IsTransitionPoint::<Impl, OFFSET>, GetTransition::<Impl, OFFSET>, Evaluate::<Impl, OFFSET>, EnumerateLocals::<Impl, OFFSET>, EnumerateArguments::<Impl, OFFSET>)
    }
}
pub trait IDataModelScriptDebugVariableSetEnumeratorImpl: Sized {
    fn Reset();
    fn GetNext();
}
impl ::windows::core::RuntimeName for IDataModelScriptDebugVariableSetEnumerator {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDataModelScriptDebugVariableSetEnumerator";
}
impl IDataModelScriptDebugVariableSetEnumeratorVtbl {
    pub const fn new<Impl: IDataModelScriptDebugVariableSetEnumeratorImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDataModelScriptDebugVariableSetEnumeratorVtbl {
        unsafe extern "system" fn Reset<Impl: IDataModelScriptDebugVariableSetEnumeratorImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Reset() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNext<Impl: IDataModelScriptDebugVariableSetEnumeratorImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, variablename: *mut super::super::super::Foundation::BSTR, variablevalue: *mut ::windows::core::RawPtr, variablemetadata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNext(::core::mem::transmute_copy(&variablename), ::core::mem::transmute_copy(&variablevalue), ::core::mem::transmute_copy(&variablemetadata)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDataModelScriptDebugVariableSetEnumerator>, base.5, Reset::<Impl, OFFSET>, GetNext::<Impl, OFFSET>)
    }
}
pub trait IDataModelScriptHostContextImpl: Sized {
    fn NotifyScriptChange();
    fn GetNamespaceObject();
}
impl ::windows::core::RuntimeName for IDataModelScriptHostContext {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDataModelScriptHostContext";
}
impl IDataModelScriptHostContextVtbl {
    pub const fn new<Impl: IDataModelScriptHostContextImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDataModelScriptHostContextVtbl {
        unsafe extern "system" fn NotifyScriptChange<Impl: IDataModelScriptHostContextImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, script: ::windows::core::RawPtr, changekind: ScriptChangeKind) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).NotifyScriptChange(&*(&script as *const <IDataModelScript as ::windows::core::Abi>::Abi as *const <IDataModelScript as ::windows::core::DefaultType>::DefaultType), changekind) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNamespaceObject<Impl: IDataModelScriptHostContextImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, namespaceobject: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNamespaceObject(::core::mem::transmute_copy(&namespaceobject)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDataModelScriptHostContext>, base.5, NotifyScriptChange::<Impl, OFFSET>, GetNamespaceObject::<Impl, OFFSET>)
    }
}
pub trait IDataModelScriptManagerImpl: Sized {
    fn GetDefaultNameBinder();
    fn RegisterScriptProvider();
    fn UnregisterScriptProvider();
    fn FindProviderForScriptType();
    fn FindProviderForScriptExtension();
    fn EnumerateScriptProviders();
}
impl ::windows::core::RuntimeName for IDataModelScriptManager {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDataModelScriptManager";
}
impl IDataModelScriptManagerVtbl {
    pub const fn new<Impl: IDataModelScriptManagerImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDataModelScriptManagerVtbl {
        unsafe extern "system" fn GetDefaultNameBinder<Impl: IDataModelScriptManagerImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppnamebinder: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDefaultNameBinder(::core::mem::transmute_copy(&ppnamebinder)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RegisterScriptProvider<Impl: IDataModelScriptManagerImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, provider: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RegisterScriptProvider(&*(&provider as *const <IDataModelScriptProvider as ::windows::core::Abi>::Abi as *const <IDataModelScriptProvider as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn UnregisterScriptProvider<Impl: IDataModelScriptManagerImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, provider: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).UnregisterScriptProvider(&*(&provider as *const <IDataModelScriptProvider as ::windows::core::Abi>::Abi as *const <IDataModelScriptProvider as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FindProviderForScriptType<Impl: IDataModelScriptManagerImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, scripttype: super::super::super::Foundation::PWSTR, provider: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).FindProviderForScriptType(&*(&scripttype as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&provider)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FindProviderForScriptExtension<Impl: IDataModelScriptManagerImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, scriptextension: super::super::super::Foundation::PWSTR, provider: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).FindProviderForScriptExtension(&*(&scriptextension as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&provider)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumerateScriptProviders<Impl: IDataModelScriptManagerImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, enumerator: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EnumerateScriptProviders(::core::mem::transmute_copy(&enumerator)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDataModelScriptManager>, base.5, GetDefaultNameBinder::<Impl, OFFSET>, RegisterScriptProvider::<Impl, OFFSET>, UnregisterScriptProvider::<Impl, OFFSET>, FindProviderForScriptType::<Impl, OFFSET>, FindProviderForScriptExtension::<Impl, OFFSET>, EnumerateScriptProviders::<Impl, OFFSET>)
    }
}
pub trait IDataModelScriptProviderImpl: Sized {
    fn GetName();
    fn GetExtension();
    fn CreateScript();
    fn GetDefaultTemplateContent();
    fn EnumerateTemplates();
}
impl ::windows::core::RuntimeName for IDataModelScriptProvider {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDataModelScriptProvider";
}
impl IDataModelScriptProviderVtbl {
    pub const fn new<Impl: IDataModelScriptProviderImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDataModelScriptProviderVtbl {
        unsafe extern "system" fn GetName<Impl: IDataModelScriptProviderImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetName(::core::mem::transmute_copy(&name)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExtension<Impl: IDataModelScriptProviderImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, extension: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExtension(::core::mem::transmute_copy(&extension)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateScript<Impl: IDataModelScriptProviderImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, script: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateScript(::core::mem::transmute_copy(&script)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDefaultTemplateContent<Impl: IDataModelScriptProviderImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, templatecontent: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDefaultTemplateContent(::core::mem::transmute_copy(&templatecontent)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumerateTemplates<Impl: IDataModelScriptProviderImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, enumerator: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EnumerateTemplates(::core::mem::transmute_copy(&enumerator)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDataModelScriptProvider>, base.5, GetName::<Impl, OFFSET>, GetExtension::<Impl, OFFSET>, CreateScript::<Impl, OFFSET>, GetDefaultTemplateContent::<Impl, OFFSET>, EnumerateTemplates::<Impl, OFFSET>)
    }
}
pub trait IDataModelScriptProviderEnumeratorImpl: Sized {
    fn Reset();
    fn GetNext();
}
impl ::windows::core::RuntimeName for IDataModelScriptProviderEnumerator {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDataModelScriptProviderEnumerator";
}
impl IDataModelScriptProviderEnumeratorVtbl {
    pub const fn new<Impl: IDataModelScriptProviderEnumeratorImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDataModelScriptProviderEnumeratorVtbl {
        unsafe extern "system" fn Reset<Impl: IDataModelScriptProviderEnumeratorImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Reset() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNext<Impl: IDataModelScriptProviderEnumeratorImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, provider: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNext(::core::mem::transmute_copy(&provider)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDataModelScriptProviderEnumerator>, base.5, Reset::<Impl, OFFSET>, GetNext::<Impl, OFFSET>)
    }
}
pub trait IDataModelScriptTemplateImpl: Sized {
    fn GetName();
    fn GetDescription();
    fn GetContent();
}
impl ::windows::core::RuntimeName for IDataModelScriptTemplate {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDataModelScriptTemplate";
}
impl IDataModelScriptTemplateVtbl {
    pub const fn new<Impl: IDataModelScriptTemplateImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDataModelScriptTemplateVtbl {
        unsafe extern "system" fn GetName<Impl: IDataModelScriptTemplateImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, templatename: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetName(::core::mem::transmute_copy(&templatename)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDescription<Impl: IDataModelScriptTemplateImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, templatedescription: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDescription(::core::mem::transmute_copy(&templatedescription)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetContent<Impl: IDataModelScriptTemplateImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, contentstream: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetContent(::core::mem::transmute_copy(&contentstream)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDataModelScriptTemplate>, base.5, GetName::<Impl, OFFSET>, GetDescription::<Impl, OFFSET>, GetContent::<Impl, OFFSET>)
    }
}
pub trait IDataModelScriptTemplateEnumeratorImpl: Sized {
    fn Reset();
    fn GetNext();
}
impl ::windows::core::RuntimeName for IDataModelScriptTemplateEnumerator {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDataModelScriptTemplateEnumerator";
}
impl IDataModelScriptTemplateEnumeratorVtbl {
    pub const fn new<Impl: IDataModelScriptTemplateEnumeratorImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDataModelScriptTemplateEnumeratorVtbl {
        unsafe extern "system" fn Reset<Impl: IDataModelScriptTemplateEnumeratorImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Reset() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNext<Impl: IDataModelScriptTemplateEnumeratorImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, templatecontent: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNext(::core::mem::transmute_copy(&templatecontent)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDataModelScriptTemplateEnumerator>, base.5, Reset::<Impl, OFFSET>, GetNext::<Impl, OFFSET>)
    }
}
pub trait IDebugAdvancedImpl: Sized {
    fn GetThreadContext();
    fn SetThreadContext();
}
impl ::windows::core::RuntimeName for IDebugAdvanced {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugAdvanced";
}
impl IDebugAdvancedVtbl {
    pub const fn new<Impl: IDebugAdvancedImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugAdvancedVtbl {
        unsafe extern "system" fn GetThreadContext<Impl: IDebugAdvancedImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: *mut ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetThreadContext(::core::mem::transmute_copy(&context), contextsize) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetThreadContext<Impl: IDebugAdvancedImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetThreadContext(&*(&context as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), contextsize) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugAdvanced>, base.5, GetThreadContext::<Impl, OFFSET>, SetThreadContext::<Impl, OFFSET>)
    }
}
pub trait IDebugAdvanced2Impl: Sized {
    fn GetThreadContext();
    fn SetThreadContext();
    fn Request();
    fn GetSourceFileInformation();
    fn FindSourceFileAndToken();
    fn GetSymbolInformation();
    fn GetSystemObjectInformation();
}
impl ::windows::core::RuntimeName for IDebugAdvanced2 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugAdvanced2";
}
impl IDebugAdvanced2Vtbl {
    pub const fn new<Impl: IDebugAdvanced2Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugAdvanced2Vtbl {
        unsafe extern "system" fn GetThreadContext<Impl: IDebugAdvanced2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: *mut ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetThreadContext(::core::mem::transmute_copy(&context), contextsize) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetThreadContext<Impl: IDebugAdvanced2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetThreadContext(&*(&context as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), contextsize) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Request<Impl: IDebugAdvanced2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, request: u32, inbuffer: *const ::core::ffi::c_void, inbuffersize: u32, outbuffer: *mut ::core::ffi::c_void, outbuffersize: u32, outsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Request(request, &*(&inbuffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), inbuffersize, ::core::mem::transmute_copy(&outbuffer), outbuffersize, ::core::mem::transmute_copy(&outsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourceFileInformation<Impl: IDebugAdvanced2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, sourcefile: super::super::super::Foundation::PSTR, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSourceFileInformation(which, &*(&sourcefile as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), arg64, arg32, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&infosize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FindSourceFileAndToken<Impl: IDebugAdvanced2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, startelement: u32, modaddr: u64, file: super::super::super::Foundation::PSTR, flags: u32, filetoken: *const ::core::ffi::c_void, filetokensize: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).FindSourceFileAndToken(
                startelement,
                modaddr,
                &*(&file as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType),
                flags,
                &*(&filetoken as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType),
                filetokensize,
                ::core::mem::transmute_copy(&foundelement),
                ::core::mem::transmute_copy(&buffer),
                buffersize,
                ::core::mem::transmute_copy(&foundsize),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolInformation<Impl: IDebugAdvanced2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32, stringbuffer: super::super::super::Foundation::PSTR, stringbuffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolInformation(which, arg64, arg32, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&infosize), ::core::mem::transmute_copy(&stringbuffer), stringbuffersize, ::core::mem::transmute_copy(&stringsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSystemObjectInformation<Impl: IDebugAdvanced2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSystemObjectInformation(which, arg64, arg32, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&infosize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugAdvanced2>, base.5, GetThreadContext::<Impl, OFFSET>, SetThreadContext::<Impl, OFFSET>, Request::<Impl, OFFSET>, GetSourceFileInformation::<Impl, OFFSET>, FindSourceFileAndToken::<Impl, OFFSET>, GetSymbolInformation::<Impl, OFFSET>, GetSystemObjectInformation::<Impl, OFFSET>)
    }
}
pub trait IDebugAdvanced3Impl: Sized {
    fn GetThreadContext();
    fn SetThreadContext();
    fn Request();
    fn GetSourceFileInformation();
    fn FindSourceFileAndToken();
    fn GetSymbolInformation();
    fn GetSystemObjectInformation();
    fn GetSourceFileInformationWide();
    fn FindSourceFileAndTokenWide();
    fn GetSymbolInformationWide();
}
impl ::windows::core::RuntimeName for IDebugAdvanced3 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugAdvanced3";
}
impl IDebugAdvanced3Vtbl {
    pub const fn new<Impl: IDebugAdvanced3Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugAdvanced3Vtbl {
        unsafe extern "system" fn GetThreadContext<Impl: IDebugAdvanced3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: *mut ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetThreadContext(::core::mem::transmute_copy(&context), contextsize) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetThreadContext<Impl: IDebugAdvanced3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetThreadContext(&*(&context as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), contextsize) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Request<Impl: IDebugAdvanced3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, request: u32, inbuffer: *const ::core::ffi::c_void, inbuffersize: u32, outbuffer: *mut ::core::ffi::c_void, outbuffersize: u32, outsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Request(request, &*(&inbuffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), inbuffersize, ::core::mem::transmute_copy(&outbuffer), outbuffersize, ::core::mem::transmute_copy(&outsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourceFileInformation<Impl: IDebugAdvanced3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, sourcefile: super::super::super::Foundation::PSTR, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSourceFileInformation(which, &*(&sourcefile as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), arg64, arg32, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&infosize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FindSourceFileAndToken<Impl: IDebugAdvanced3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, startelement: u32, modaddr: u64, file: super::super::super::Foundation::PSTR, flags: u32, filetoken: *const ::core::ffi::c_void, filetokensize: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).FindSourceFileAndToken(
                startelement,
                modaddr,
                &*(&file as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType),
                flags,
                &*(&filetoken as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType),
                filetokensize,
                ::core::mem::transmute_copy(&foundelement),
                ::core::mem::transmute_copy(&buffer),
                buffersize,
                ::core::mem::transmute_copy(&foundsize),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolInformation<Impl: IDebugAdvanced3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32, stringbuffer: super::super::super::Foundation::PSTR, stringbuffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolInformation(which, arg64, arg32, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&infosize), ::core::mem::transmute_copy(&stringbuffer), stringbuffersize, ::core::mem::transmute_copy(&stringsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSystemObjectInformation<Impl: IDebugAdvanced3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSystemObjectInformation(which, arg64, arg32, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&infosize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourceFileInformationWide<Impl: IDebugAdvanced3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, sourcefile: super::super::super::Foundation::PWSTR, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSourceFileInformationWide(which, &*(&sourcefile as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), arg64, arg32, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&infosize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FindSourceFileAndTokenWide<Impl: IDebugAdvanced3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, startelement: u32, modaddr: u64, file: super::super::super::Foundation::PWSTR, flags: u32, filetoken: *const ::core::ffi::c_void, filetokensize: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).FindSourceFileAndTokenWide(
                startelement,
                modaddr,
                &*(&file as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                flags,
                &*(&filetoken as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType),
                filetokensize,
                ::core::mem::transmute_copy(&foundelement),
                ::core::mem::transmute_copy(&buffer),
                buffersize,
                ::core::mem::transmute_copy(&foundsize),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolInformationWide<Impl: IDebugAdvanced3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32, stringbuffer: super::super::super::Foundation::PWSTR, stringbuffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolInformationWide(which, arg64, arg32, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&infosize), ::core::mem::transmute_copy(&stringbuffer), stringbuffersize, ::core::mem::transmute_copy(&stringsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            base.0,
            base.1,
            base.2,
            base.3,
            ::windows::core::GetRuntimeClassName::<IDebugAdvanced3>,
            base.5,
            GetThreadContext::<Impl, OFFSET>,
            SetThreadContext::<Impl, OFFSET>,
            Request::<Impl, OFFSET>,
            GetSourceFileInformation::<Impl, OFFSET>,
            FindSourceFileAndToken::<Impl, OFFSET>,
            GetSymbolInformation::<Impl, OFFSET>,
            GetSystemObjectInformation::<Impl, OFFSET>,
            GetSourceFileInformationWide::<Impl, OFFSET>,
            FindSourceFileAndTokenWide::<Impl, OFFSET>,
            GetSymbolInformationWide::<Impl, OFFSET>,
        )
    }
}
pub trait IDebugAdvanced4Impl: Sized {
    fn GetThreadContext();
    fn SetThreadContext();
    fn Request();
    fn GetSourceFileInformation();
    fn FindSourceFileAndToken();
    fn GetSymbolInformation();
    fn GetSystemObjectInformation();
    fn GetSourceFileInformationWide();
    fn FindSourceFileAndTokenWide();
    fn GetSymbolInformationWide();
    fn GetSymbolInformationWideEx();
}
impl ::windows::core::RuntimeName for IDebugAdvanced4 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugAdvanced4";
}
impl IDebugAdvanced4Vtbl {
    pub const fn new<Impl: IDebugAdvanced4Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugAdvanced4Vtbl {
        unsafe extern "system" fn GetThreadContext<Impl: IDebugAdvanced4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: *mut ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetThreadContext(::core::mem::transmute_copy(&context), contextsize) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetThreadContext<Impl: IDebugAdvanced4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetThreadContext(&*(&context as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), contextsize) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Request<Impl: IDebugAdvanced4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, request: u32, inbuffer: *const ::core::ffi::c_void, inbuffersize: u32, outbuffer: *mut ::core::ffi::c_void, outbuffersize: u32, outsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Request(request, &*(&inbuffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), inbuffersize, ::core::mem::transmute_copy(&outbuffer), outbuffersize, ::core::mem::transmute_copy(&outsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourceFileInformation<Impl: IDebugAdvanced4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, sourcefile: super::super::super::Foundation::PSTR, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSourceFileInformation(which, &*(&sourcefile as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), arg64, arg32, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&infosize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FindSourceFileAndToken<Impl: IDebugAdvanced4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, startelement: u32, modaddr: u64, file: super::super::super::Foundation::PSTR, flags: u32, filetoken: *const ::core::ffi::c_void, filetokensize: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).FindSourceFileAndToken(
                startelement,
                modaddr,
                &*(&file as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType),
                flags,
                &*(&filetoken as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType),
                filetokensize,
                ::core::mem::transmute_copy(&foundelement),
                ::core::mem::transmute_copy(&buffer),
                buffersize,
                ::core::mem::transmute_copy(&foundsize),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolInformation<Impl: IDebugAdvanced4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32, stringbuffer: super::super::super::Foundation::PSTR, stringbuffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolInformation(which, arg64, arg32, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&infosize), ::core::mem::transmute_copy(&stringbuffer), stringbuffersize, ::core::mem::transmute_copy(&stringsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSystemObjectInformation<Impl: IDebugAdvanced4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSystemObjectInformation(which, arg64, arg32, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&infosize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourceFileInformationWide<Impl: IDebugAdvanced4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, sourcefile: super::super::super::Foundation::PWSTR, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSourceFileInformationWide(which, &*(&sourcefile as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), arg64, arg32, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&infosize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FindSourceFileAndTokenWide<Impl: IDebugAdvanced4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, startelement: u32, modaddr: u64, file: super::super::super::Foundation::PWSTR, flags: u32, filetoken: *const ::core::ffi::c_void, filetokensize: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).FindSourceFileAndTokenWide(
                startelement,
                modaddr,
                &*(&file as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                flags,
                &*(&filetoken as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType),
                filetokensize,
                ::core::mem::transmute_copy(&foundelement),
                ::core::mem::transmute_copy(&buffer),
                buffersize,
                ::core::mem::transmute_copy(&foundsize),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolInformationWide<Impl: IDebugAdvanced4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32, stringbuffer: super::super::super::Foundation::PWSTR, stringbuffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolInformationWide(which, arg64, arg32, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&infosize), ::core::mem::transmute_copy(&stringbuffer), stringbuffersize, ::core::mem::transmute_copy(&stringsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolInformationWideEx<Impl: IDebugAdvanced4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32, stringbuffer: super::super::super::Foundation::PWSTR, stringbuffersize: u32, stringsize: *mut u32, pinfoex: *mut SYMBOL_INFO_EX) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolInformationWideEx(which, arg64, arg32, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&infosize), ::core::mem::transmute_copy(&stringbuffer), stringbuffersize, ::core::mem::transmute_copy(&stringsize), ::core::mem::transmute_copy(&pinfoex)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            base.0,
            base.1,
            base.2,
            base.3,
            ::windows::core::GetRuntimeClassName::<IDebugAdvanced4>,
            base.5,
            GetThreadContext::<Impl, OFFSET>,
            SetThreadContext::<Impl, OFFSET>,
            Request::<Impl, OFFSET>,
            GetSourceFileInformation::<Impl, OFFSET>,
            FindSourceFileAndToken::<Impl, OFFSET>,
            GetSymbolInformation::<Impl, OFFSET>,
            GetSystemObjectInformation::<Impl, OFFSET>,
            GetSourceFileInformationWide::<Impl, OFFSET>,
            FindSourceFileAndTokenWide::<Impl, OFFSET>,
            GetSymbolInformationWide::<Impl, OFFSET>,
            GetSymbolInformationWideEx::<Impl, OFFSET>,
        )
    }
}
pub trait IDebugApplication11032Impl: Sized + IRemoteDebugApplication110Impl {
    fn SynchronousCallInMainThread();
    fn AsynchronousCallInMainThread();
    fn CallableWaitForHandles();
}
impl ::windows::core::RuntimeName for IDebugApplication11032 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugApplication11032";
}
impl IDebugApplication11032Vtbl {
    pub const fn new<Impl: IDebugApplication11032Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugApplication11032Vtbl {
        unsafe extern "system" fn SynchronousCallInMainThread<Impl: IDebugApplication11032Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pptc: ::windows::core::RawPtr, dwparam1: usize, dwparam2: usize, dwparam3: usize) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SynchronousCallInMainThread(&*(&pptc as *const <IDebugThreadCall32 as ::windows::core::Abi>::Abi as *const <IDebugThreadCall32 as ::windows::core::DefaultType>::DefaultType), dwparam1, dwparam2, dwparam3) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AsynchronousCallInMainThread<Impl: IDebugApplication11032Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pptc: ::windows::core::RawPtr, dwparam1: usize, dwparam2: usize, dwparam3: usize) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AsynchronousCallInMainThread(&*(&pptc as *const <IDebugThreadCall32 as ::windows::core::Abi>::Abi as *const <IDebugThreadCall32 as ::windows::core::DefaultType>::DefaultType), dwparam1, dwparam2, dwparam3) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CallableWaitForHandles<Impl: IDebugApplication11032Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handlecount: u32, phandles: *const super::super::super::Foundation::HANDLE, pindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CallableWaitForHandles(handlecount, &*(&phandles as *const <super::super::super::Foundation::HANDLE as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::HANDLE as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pindex)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugApplication11032>, base.5, SynchronousCallInMainThread::<Impl, OFFSET>, AsynchronousCallInMainThread::<Impl, OFFSET>, CallableWaitForHandles::<Impl, OFFSET>)
    }
}
pub trait IDebugApplication11064Impl: Sized + IRemoteDebugApplication110Impl {
    fn SynchronousCallInMainThread();
    fn AsynchronousCallInMainThread();
    fn CallableWaitForHandles();
}
impl ::windows::core::RuntimeName for IDebugApplication11064 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugApplication11064";
}
impl IDebugApplication11064Vtbl {
    pub const fn new<Impl: IDebugApplication11064Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugApplication11064Vtbl {
        unsafe extern "system" fn SynchronousCallInMainThread<Impl: IDebugApplication11064Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pptc: ::windows::core::RawPtr, dwparam1: usize, dwparam2: usize, dwparam3: usize) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SynchronousCallInMainThread(&*(&pptc as *const <IDebugThreadCall64 as ::windows::core::Abi>::Abi as *const <IDebugThreadCall64 as ::windows::core::DefaultType>::DefaultType), dwparam1, dwparam2, dwparam3) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AsynchronousCallInMainThread<Impl: IDebugApplication11064Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pptc: ::windows::core::RawPtr, dwparam1: usize, dwparam2: usize, dwparam3: usize) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AsynchronousCallInMainThread(&*(&pptc as *const <IDebugThreadCall64 as ::windows::core::Abi>::Abi as *const <IDebugThreadCall64 as ::windows::core::DefaultType>::DefaultType), dwparam1, dwparam2, dwparam3) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CallableWaitForHandles<Impl: IDebugApplication11064Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handlecount: u32, phandles: *const super::super::super::Foundation::HANDLE, pindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CallableWaitForHandles(handlecount, &*(&phandles as *const <super::super::super::Foundation::HANDLE as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::HANDLE as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pindex)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugApplication11064>, base.5, SynchronousCallInMainThread::<Impl, OFFSET>, AsynchronousCallInMainThread::<Impl, OFFSET>, CallableWaitForHandles::<Impl, OFFSET>)
    }
}
pub trait IDebugApplication32Impl: Sized + IRemoteDebugApplicationImpl {
    fn SetName();
    fn StepOutComplete();
    fn DebugOutput();
    fn StartDebugSession();
    fn HandleBreakPoint();
    fn Close();
    fn GetBreakFlags();
    fn GetCurrentThread();
    fn CreateAsyncDebugOperation();
    fn AddStackFrameSniffer();
    fn RemoveStackFrameSniffer();
    fn QueryCurrentThreadIsDebuggerThread();
    fn SynchronousCallInDebuggerThread();
    fn CreateApplicationNode();
    fn FireDebuggerEvent();
    fn HandleRuntimeError();
    fn FCanJitDebug();
    fn FIsAutoJitDebugEnabled();
    fn AddGlobalExpressionContextProvider();
    fn RemoveGlobalExpressionContextProvider();
}
impl ::windows::core::RuntimeName for IDebugApplication32 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugApplication32";
}
impl IDebugApplication32Vtbl {
    pub const fn new<Impl: IDebugApplication32Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugApplication32Vtbl {
        unsafe extern "system" fn SetName<Impl: IDebugApplication32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstrname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetName(&*(&pstrname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StepOutComplete<Impl: IDebugApplication32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).StepOutComplete() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DebugOutput<Impl: IDebugApplication32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstr: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).DebugOutput(&*(&pstr as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartDebugSession<Impl: IDebugApplication32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).StartDebugSession() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn HandleBreakPoint<Impl: IDebugApplication32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, br: BREAKREASON, pbra: *mut BREAKRESUME_ACTION) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).HandleBreakPoint(br, ::core::mem::transmute_copy(&pbra)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Close<Impl: IDebugApplication32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Close() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakFlags<Impl: IDebugApplication32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pabf: *mut u32, pprdatsteppingthread: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetBreakFlags(::core::mem::transmute_copy(&pabf), ::core::mem::transmute_copy(&pprdatsteppingthread)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentThread<Impl: IDebugApplication32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pat: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentThread(::core::mem::transmute_copy(&pat)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateAsyncDebugOperation<Impl: IDebugApplication32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psdo: ::windows::core::RawPtr, ppado: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateAsyncDebugOperation(&*(&psdo as *const <IDebugSyncOperation as ::windows::core::Abi>::Abi as *const <IDebugSyncOperation as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppado)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddStackFrameSniffer<Impl: IDebugApplication32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdsfs: ::windows::core::RawPtr, pdwcookie: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddStackFrameSniffer(&*(&pdsfs as *const <IDebugStackFrameSniffer as ::windows::core::Abi>::Abi as *const <IDebugStackFrameSniffer as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pdwcookie)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveStackFrameSniffer<Impl: IDebugApplication32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwcookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveStackFrameSniffer(dwcookie) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn QueryCurrentThreadIsDebuggerThread<Impl: IDebugApplication32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).QueryCurrentThreadIsDebuggerThread() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SynchronousCallInDebuggerThread<Impl: IDebugApplication32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pptc: ::windows::core::RawPtr, dwparam1: u32, dwparam2: u32, dwparam3: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SynchronousCallInDebuggerThread(&*(&pptc as *const <IDebugThreadCall32 as ::windows::core::Abi>::Abi as *const <IDebugThreadCall32 as ::windows::core::DefaultType>::DefaultType), dwparam1, dwparam2, dwparam3) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateApplicationNode<Impl: IDebugApplication32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppdannew: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateApplicationNode(::core::mem::transmute_copy(&ppdannew)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FireDebuggerEvent<Impl: IDebugApplication32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, riid: *const ::windows::core::GUID, punk: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).FireDebuggerEvent(&*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), &*(&punk as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn HandleRuntimeError<Impl: IDebugApplication32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, perrordebug: ::windows::core::RawPtr, pscriptsite: ::windows::core::RawPtr, pbra: *mut BREAKRESUME_ACTION, perra: *mut ERRORRESUMEACTION, pfcallonscripterror: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).HandleRuntimeError(&*(&perrordebug as *const <IActiveScriptErrorDebug as ::windows::core::Abi>::Abi as *const <IActiveScriptErrorDebug as ::windows::core::DefaultType>::DefaultType), &*(&pscriptsite as *const <IActiveScriptSite as ::windows::core::Abi>::Abi as *const <IActiveScriptSite as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pbra), ::core::mem::transmute_copy(&perra), ::core::mem::transmute_copy(&pfcallonscripterror)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FCanJitDebug<Impl: IDebugApplication32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> super::super::super::Foundation::BOOL {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).FCanJitDebug() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FIsAutoJitDebugEnabled<Impl: IDebugApplication32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> super::super::super::Foundation::BOOL {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).FIsAutoJitDebugEnabled() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddGlobalExpressionContextProvider<Impl: IDebugApplication32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdsfs: ::windows::core::RawPtr, pdwcookie: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddGlobalExpressionContextProvider(&*(&pdsfs as *const <IProvideExpressionContexts as ::windows::core::Abi>::Abi as *const <IProvideExpressionContexts as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pdwcookie)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveGlobalExpressionContextProvider<Impl: IDebugApplication32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwcookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveGlobalExpressionContextProvider(dwcookie) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            base.0,
            base.1,
            base.2,
            base.3,
            ::windows::core::GetRuntimeClassName::<IDebugApplication32>,
            base.5,
            SetName::<Impl, OFFSET>,
            StepOutComplete::<Impl, OFFSET>,
            DebugOutput::<Impl, OFFSET>,
            StartDebugSession::<Impl, OFFSET>,
            HandleBreakPoint::<Impl, OFFSET>,
            Close::<Impl, OFFSET>,
            GetBreakFlags::<Impl, OFFSET>,
            GetCurrentThread::<Impl, OFFSET>,
            CreateAsyncDebugOperation::<Impl, OFFSET>,
            AddStackFrameSniffer::<Impl, OFFSET>,
            RemoveStackFrameSniffer::<Impl, OFFSET>,
            QueryCurrentThreadIsDebuggerThread::<Impl, OFFSET>,
            SynchronousCallInDebuggerThread::<Impl, OFFSET>,
            CreateApplicationNode::<Impl, OFFSET>,
            FireDebuggerEvent::<Impl, OFFSET>,
            HandleRuntimeError::<Impl, OFFSET>,
            FCanJitDebug::<Impl, OFFSET>,
            FIsAutoJitDebugEnabled::<Impl, OFFSET>,
            AddGlobalExpressionContextProvider::<Impl, OFFSET>,
            RemoveGlobalExpressionContextProvider::<Impl, OFFSET>,
        )
    }
}
pub trait IDebugApplication64Impl: Sized + IRemoteDebugApplicationImpl {
    fn SetName();
    fn StepOutComplete();
    fn DebugOutput();
    fn StartDebugSession();
    fn HandleBreakPoint();
    fn Close();
    fn GetBreakFlags();
    fn GetCurrentThread();
    fn CreateAsyncDebugOperation();
    fn AddStackFrameSniffer();
    fn RemoveStackFrameSniffer();
    fn QueryCurrentThreadIsDebuggerThread();
    fn SynchronousCallInDebuggerThread();
    fn CreateApplicationNode();
    fn FireDebuggerEvent();
    fn HandleRuntimeError();
    fn FCanJitDebug();
    fn FIsAutoJitDebugEnabled();
    fn AddGlobalExpressionContextProvider();
    fn RemoveGlobalExpressionContextProvider();
}
impl ::windows::core::RuntimeName for IDebugApplication64 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugApplication64";
}
impl IDebugApplication64Vtbl {
    pub const fn new<Impl: IDebugApplication64Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugApplication64Vtbl {
        unsafe extern "system" fn SetName<Impl: IDebugApplication64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstrname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetName(&*(&pstrname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StepOutComplete<Impl: IDebugApplication64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).StepOutComplete() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DebugOutput<Impl: IDebugApplication64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstr: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).DebugOutput(&*(&pstr as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartDebugSession<Impl: IDebugApplication64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).StartDebugSession() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn HandleBreakPoint<Impl: IDebugApplication64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, br: BREAKREASON, pbra: *mut BREAKRESUME_ACTION) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).HandleBreakPoint(br, ::core::mem::transmute_copy(&pbra)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Close<Impl: IDebugApplication64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Close() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakFlags<Impl: IDebugApplication64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pabf: *mut u32, pprdatsteppingthread: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetBreakFlags(::core::mem::transmute_copy(&pabf), ::core::mem::transmute_copy(&pprdatsteppingthread)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentThread<Impl: IDebugApplication64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pat: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentThread(::core::mem::transmute_copy(&pat)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateAsyncDebugOperation<Impl: IDebugApplication64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psdo: ::windows::core::RawPtr, ppado: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateAsyncDebugOperation(&*(&psdo as *const <IDebugSyncOperation as ::windows::core::Abi>::Abi as *const <IDebugSyncOperation as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppado)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddStackFrameSniffer<Impl: IDebugApplication64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdsfs: ::windows::core::RawPtr, pdwcookie: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddStackFrameSniffer(&*(&pdsfs as *const <IDebugStackFrameSniffer as ::windows::core::Abi>::Abi as *const <IDebugStackFrameSniffer as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pdwcookie)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveStackFrameSniffer<Impl: IDebugApplication64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwcookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveStackFrameSniffer(dwcookie) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn QueryCurrentThreadIsDebuggerThread<Impl: IDebugApplication64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).QueryCurrentThreadIsDebuggerThread() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SynchronousCallInDebuggerThread<Impl: IDebugApplication64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pptc: ::windows::core::RawPtr, dwparam1: u64, dwparam2: u64, dwparam3: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SynchronousCallInDebuggerThread(&*(&pptc as *const <IDebugThreadCall64 as ::windows::core::Abi>::Abi as *const <IDebugThreadCall64 as ::windows::core::DefaultType>::DefaultType), dwparam1, dwparam2, dwparam3) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateApplicationNode<Impl: IDebugApplication64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppdannew: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateApplicationNode(::core::mem::transmute_copy(&ppdannew)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FireDebuggerEvent<Impl: IDebugApplication64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, riid: *const ::windows::core::GUID, punk: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).FireDebuggerEvent(&*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), &*(&punk as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn HandleRuntimeError<Impl: IDebugApplication64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, perrordebug: ::windows::core::RawPtr, pscriptsite: ::windows::core::RawPtr, pbra: *mut BREAKRESUME_ACTION, perra: *mut ERRORRESUMEACTION, pfcallonscripterror: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).HandleRuntimeError(&*(&perrordebug as *const <IActiveScriptErrorDebug as ::windows::core::Abi>::Abi as *const <IActiveScriptErrorDebug as ::windows::core::DefaultType>::DefaultType), &*(&pscriptsite as *const <IActiveScriptSite as ::windows::core::Abi>::Abi as *const <IActiveScriptSite as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pbra), ::core::mem::transmute_copy(&perra), ::core::mem::transmute_copy(&pfcallonscripterror)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FCanJitDebug<Impl: IDebugApplication64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> super::super::super::Foundation::BOOL {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).FCanJitDebug() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FIsAutoJitDebugEnabled<Impl: IDebugApplication64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> super::super::super::Foundation::BOOL {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).FIsAutoJitDebugEnabled() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddGlobalExpressionContextProvider<Impl: IDebugApplication64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdsfs: ::windows::core::RawPtr, pdwcookie: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddGlobalExpressionContextProvider(&*(&pdsfs as *const <IProvideExpressionContexts as ::windows::core::Abi>::Abi as *const <IProvideExpressionContexts as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pdwcookie)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveGlobalExpressionContextProvider<Impl: IDebugApplication64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwcookie: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveGlobalExpressionContextProvider(dwcookie) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            base.0,
            base.1,
            base.2,
            base.3,
            ::windows::core::GetRuntimeClassName::<IDebugApplication64>,
            base.5,
            SetName::<Impl, OFFSET>,
            StepOutComplete::<Impl, OFFSET>,
            DebugOutput::<Impl, OFFSET>,
            StartDebugSession::<Impl, OFFSET>,
            HandleBreakPoint::<Impl, OFFSET>,
            Close::<Impl, OFFSET>,
            GetBreakFlags::<Impl, OFFSET>,
            GetCurrentThread::<Impl, OFFSET>,
            CreateAsyncDebugOperation::<Impl, OFFSET>,
            AddStackFrameSniffer::<Impl, OFFSET>,
            RemoveStackFrameSniffer::<Impl, OFFSET>,
            QueryCurrentThreadIsDebuggerThread::<Impl, OFFSET>,
            SynchronousCallInDebuggerThread::<Impl, OFFSET>,
            CreateApplicationNode::<Impl, OFFSET>,
            FireDebuggerEvent::<Impl, OFFSET>,
            HandleRuntimeError::<Impl, OFFSET>,
            FCanJitDebug::<Impl, OFFSET>,
            FIsAutoJitDebugEnabled::<Impl, OFFSET>,
            AddGlobalExpressionContextProvider::<Impl, OFFSET>,
            RemoveGlobalExpressionContextProvider::<Impl, OFFSET>,
        )
    }
}
pub trait IDebugApplicationNodeImpl: Sized + IDebugDocumentProviderImpl + IDebugDocumentInfoImpl {
    fn EnumChildren();
    fn GetParent();
    fn SetDocumentProvider();
    fn Close();
    fn Attach();
    fn Detach();
}
impl ::windows::core::RuntimeName for IDebugApplicationNode {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugApplicationNode";
}
impl IDebugApplicationNodeVtbl {
    pub const fn new<Impl: IDebugApplicationNodeImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugApplicationNodeVtbl {
        unsafe extern "system" fn EnumChildren<Impl: IDebugApplicationNodeImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pperddp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EnumChildren(::core::mem::transmute_copy(&pperddp)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetParent<Impl: IDebugApplicationNodeImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pprddp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetParent(::core::mem::transmute_copy(&pprddp)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetDocumentProvider<Impl: IDebugApplicationNodeImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pddp: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetDocumentProvider(&*(&pddp as *const <IDebugDocumentProvider as ::windows::core::Abi>::Abi as *const <IDebugDocumentProvider as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Close<Impl: IDebugApplicationNodeImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Close() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Attach<Impl: IDebugApplicationNodeImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdanparent: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Attach(&*(&pdanparent as *const <IDebugApplicationNode as ::windows::core::Abi>::Abi as *const <IDebugApplicationNode as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Detach<Impl: IDebugApplicationNodeImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Detach() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugApplicationNode>, base.5, EnumChildren::<Impl, OFFSET>, GetParent::<Impl, OFFSET>, SetDocumentProvider::<Impl, OFFSET>, Close::<Impl, OFFSET>, Attach::<Impl, OFFSET>, Detach::<Impl, OFFSET>)
    }
}
pub trait IDebugApplicationNode100Impl: Sized {
    fn SetFilterForEventSink();
    fn GetExcludedDocuments();
    fn QueryIsChildNode();
}
impl ::windows::core::RuntimeName for IDebugApplicationNode100 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugApplicationNode100";
}
impl IDebugApplicationNode100Vtbl {
    pub const fn new<Impl: IDebugApplicationNode100Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugApplicationNode100Vtbl {
        unsafe extern "system" fn SetFilterForEventSink<Impl: IDebugApplicationNode100Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwcookie: u32, filter: APPLICATION_NODE_EVENT_FILTER) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetFilterForEventSink(dwcookie, filter) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExcludedDocuments<Impl: IDebugApplicationNode100Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, filter: APPLICATION_NODE_EVENT_FILTER, pdocuments: *mut TEXT_DOCUMENT_ARRAY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExcludedDocuments(filter, ::core::mem::transmute_copy(&pdocuments)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn QueryIsChildNode<Impl: IDebugApplicationNode100Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psearchkey: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).QueryIsChildNode(&*(&psearchkey as *const <IDebugDocument as ::windows::core::Abi>::Abi as *const <IDebugDocument as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugApplicationNode100>, base.5, SetFilterForEventSink::<Impl, OFFSET>, GetExcludedDocuments::<Impl, OFFSET>, QueryIsChildNode::<Impl, OFFSET>)
    }
}
pub trait IDebugApplicationNodeEventsImpl: Sized {
    fn onAddChild();
    fn onRemoveChild();
    fn onDetach();
    fn onAttach();
}
impl ::windows::core::RuntimeName for IDebugApplicationNodeEvents {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugApplicationNodeEvents";
}
impl IDebugApplicationNodeEventsVtbl {
    pub const fn new<Impl: IDebugApplicationNodeEventsImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugApplicationNodeEventsVtbl {
        unsafe extern "system" fn onAddChild<Impl: IDebugApplicationNodeEventsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prddpchild: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).onAddChild(&*(&prddpchild as *const <IDebugApplicationNode as ::windows::core::Abi>::Abi as *const <IDebugApplicationNode as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn onRemoveChild<Impl: IDebugApplicationNodeEventsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prddpchild: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).onRemoveChild(&*(&prddpchild as *const <IDebugApplicationNode as ::windows::core::Abi>::Abi as *const <IDebugApplicationNode as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn onDetach<Impl: IDebugApplicationNodeEventsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).onDetach() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn onAttach<Impl: IDebugApplicationNodeEventsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prddpparent: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).onAttach(&*(&prddpparent as *const <IDebugApplicationNode as ::windows::core::Abi>::Abi as *const <IDebugApplicationNode as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugApplicationNodeEvents>, base.5, onAddChild::<Impl, OFFSET>, onRemoveChild::<Impl, OFFSET>, onDetach::<Impl, OFFSET>, onAttach::<Impl, OFFSET>)
    }
}
pub trait IDebugApplicationThreadImpl: Sized + IRemoteDebugApplicationThreadImpl {
    fn SynchronousCallIntoThread32();
    fn QueryIsCurrentThread();
    fn QueryIsDebuggerThread();
    fn SetDescription();
    fn SetStateString();
}
impl ::windows::core::RuntimeName for IDebugApplicationThread {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugApplicationThread";
}
impl IDebugApplicationThreadVtbl {
    pub const fn new<Impl: IDebugApplicationThreadImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugApplicationThreadVtbl {
        unsafe extern "system" fn SynchronousCallIntoThread32<Impl: IDebugApplicationThreadImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstcb: ::windows::core::RawPtr, dwparam1: u32, dwparam2: u32, dwparam3: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SynchronousCallIntoThread32(&*(&pstcb as *const <IDebugThreadCall32 as ::windows::core::Abi>::Abi as *const <IDebugThreadCall32 as ::windows::core::DefaultType>::DefaultType), dwparam1, dwparam2, dwparam3) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn QueryIsCurrentThread<Impl: IDebugApplicationThreadImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).QueryIsCurrentThread() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn QueryIsDebuggerThread<Impl: IDebugApplicationThreadImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).QueryIsDebuggerThread() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetDescription<Impl: IDebugApplicationThreadImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstrdescription: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetDescription(&*(&pstrdescription as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetStateString<Impl: IDebugApplicationThreadImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstrstate: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetStateString(&*(&pstrstate as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugApplicationThread>, base.5, SynchronousCallIntoThread32::<Impl, OFFSET>, QueryIsCurrentThread::<Impl, OFFSET>, QueryIsDebuggerThread::<Impl, OFFSET>, SetDescription::<Impl, OFFSET>, SetStateString::<Impl, OFFSET>)
    }
}
pub trait IDebugApplicationThread11032Impl: Sized {
    fn GetActiveThreadRequestCount();
    fn IsSuspendedForBreakPoint();
    fn IsThreadCallable();
    fn AsynchronousCallIntoThread();
}
impl ::windows::core::RuntimeName for IDebugApplicationThread11032 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugApplicationThread11032";
}
impl IDebugApplicationThread11032Vtbl {
    pub const fn new<Impl: IDebugApplicationThread11032Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugApplicationThread11032Vtbl {
        unsafe extern "system" fn GetActiveThreadRequestCount<Impl: IDebugApplicationThread11032Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, puithreadrequests: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetActiveThreadRequestCount(::core::mem::transmute_copy(&puithreadrequests)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsSuspendedForBreakPoint<Impl: IDebugApplicationThread11032Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfissuspended: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).IsSuspendedForBreakPoint(::core::mem::transmute_copy(&pfissuspended)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsThreadCallable<Impl: IDebugApplicationThread11032Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfiscallable: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).IsThreadCallable(::core::mem::transmute_copy(&pfiscallable)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AsynchronousCallIntoThread<Impl: IDebugApplicationThread11032Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pptc: ::windows::core::RawPtr, dwparam1: usize, dwparam2: usize, dwparam3: usize) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AsynchronousCallIntoThread(&*(&pptc as *const <IDebugThreadCall32 as ::windows::core::Abi>::Abi as *const <IDebugThreadCall32 as ::windows::core::DefaultType>::DefaultType), dwparam1, dwparam2, dwparam3) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugApplicationThread11032>, base.5, GetActiveThreadRequestCount::<Impl, OFFSET>, IsSuspendedForBreakPoint::<Impl, OFFSET>, IsThreadCallable::<Impl, OFFSET>, AsynchronousCallIntoThread::<Impl, OFFSET>)
    }
}
pub trait IDebugApplicationThread11064Impl: Sized {
    fn GetActiveThreadRequestCount();
    fn IsSuspendedForBreakPoint();
    fn IsThreadCallable();
    fn AsynchronousCallIntoThread();
}
impl ::windows::core::RuntimeName for IDebugApplicationThread11064 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugApplicationThread11064";
}
impl IDebugApplicationThread11064Vtbl {
    pub const fn new<Impl: IDebugApplicationThread11064Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugApplicationThread11064Vtbl {
        unsafe extern "system" fn GetActiveThreadRequestCount<Impl: IDebugApplicationThread11064Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, puithreadrequests: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetActiveThreadRequestCount(::core::mem::transmute_copy(&puithreadrequests)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsSuspendedForBreakPoint<Impl: IDebugApplicationThread11064Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfissuspended: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).IsSuspendedForBreakPoint(::core::mem::transmute_copy(&pfissuspended)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsThreadCallable<Impl: IDebugApplicationThread11064Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfiscallable: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).IsThreadCallable(::core::mem::transmute_copy(&pfiscallable)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AsynchronousCallIntoThread<Impl: IDebugApplicationThread11064Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pptc: ::windows::core::RawPtr, dwparam1: usize, dwparam2: usize, dwparam3: usize) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AsynchronousCallIntoThread(&*(&pptc as *const <IDebugThreadCall64 as ::windows::core::Abi>::Abi as *const <IDebugThreadCall64 as ::windows::core::DefaultType>::DefaultType), dwparam1, dwparam2, dwparam3) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugApplicationThread11064>, base.5, GetActiveThreadRequestCount::<Impl, OFFSET>, IsSuspendedForBreakPoint::<Impl, OFFSET>, IsThreadCallable::<Impl, OFFSET>, AsynchronousCallIntoThread::<Impl, OFFSET>)
    }
}
pub trait IDebugApplicationThread64Impl: Sized + IDebugApplicationThreadImpl + IRemoteDebugApplicationThreadImpl {
    fn SynchronousCallIntoThread64();
}
impl ::windows::core::RuntimeName for IDebugApplicationThread64 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugApplicationThread64";
}
impl IDebugApplicationThread64Vtbl {
    pub const fn new<Impl: IDebugApplicationThread64Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugApplicationThread64Vtbl {
        unsafe extern "system" fn SynchronousCallIntoThread64<Impl: IDebugApplicationThread64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstcb: ::windows::core::RawPtr, dwparam1: u64, dwparam2: u64, dwparam3: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SynchronousCallIntoThread64(&*(&pstcb as *const <IDebugThreadCall64 as ::windows::core::Abi>::Abi as *const <IDebugThreadCall64 as ::windows::core::DefaultType>::DefaultType), dwparam1, dwparam2, dwparam3) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugApplicationThread64>, base.5, SynchronousCallIntoThread64::<Impl, OFFSET>)
    }
}
pub trait IDebugApplicationThreadEvents110Impl: Sized {
    fn OnSuspendForBreakPoint();
    fn OnResumeFromBreakPoint();
    fn OnThreadRequestComplete();
    fn OnBeginThreadRequest();
}
impl ::windows::core::RuntimeName for IDebugApplicationThreadEvents110 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugApplicationThreadEvents110";
}
impl IDebugApplicationThreadEvents110Vtbl {
    pub const fn new<Impl: IDebugApplicationThreadEvents110Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugApplicationThreadEvents110Vtbl {
        unsafe extern "system" fn OnSuspendForBreakPoint<Impl: IDebugApplicationThreadEvents110Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OnSuspendForBreakPoint() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnResumeFromBreakPoint<Impl: IDebugApplicationThreadEvents110Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OnResumeFromBreakPoint() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnThreadRequestComplete<Impl: IDebugApplicationThreadEvents110Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OnThreadRequestComplete() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnBeginThreadRequest<Impl: IDebugApplicationThreadEvents110Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OnBeginThreadRequest() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugApplicationThreadEvents110>, base.5, OnSuspendForBreakPoint::<Impl, OFFSET>, OnResumeFromBreakPoint::<Impl, OFFSET>, OnThreadRequestComplete::<Impl, OFFSET>, OnBeginThreadRequest::<Impl, OFFSET>)
    }
}
pub trait IDebugAsyncOperationImpl: Sized {
    fn GetSyncDebugOperation();
    fn Start();
    fn Abort();
    fn QueryIsComplete();
    fn GetResult();
}
impl ::windows::core::RuntimeName for IDebugAsyncOperation {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugAsyncOperation";
}
impl IDebugAsyncOperationVtbl {
    pub const fn new<Impl: IDebugAsyncOperationImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugAsyncOperationVtbl {
        unsafe extern "system" fn GetSyncDebugOperation<Impl: IDebugAsyncOperationImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppsdo: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSyncDebugOperation(::core::mem::transmute_copy(&ppsdo)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Start<Impl: IDebugAsyncOperationImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, padocb: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Start(&*(&padocb as *const <IDebugAsyncOperationCallBack as ::windows::core::Abi>::Abi as *const <IDebugAsyncOperationCallBack as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Abort<Impl: IDebugAsyncOperationImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Abort() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn QueryIsComplete<Impl: IDebugAsyncOperationImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).QueryIsComplete() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetResult<Impl: IDebugAsyncOperationImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, phrresult: *mut ::windows::core::HRESULT, ppunkresult: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetResult(::core::mem::transmute_copy(&phrresult), ::core::mem::transmute_copy(&ppunkresult)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugAsyncOperation>, base.5, GetSyncDebugOperation::<Impl, OFFSET>, Start::<Impl, OFFSET>, Abort::<Impl, OFFSET>, QueryIsComplete::<Impl, OFFSET>, GetResult::<Impl, OFFSET>)
    }
}
pub trait IDebugAsyncOperationCallBackImpl: Sized {
    fn onComplete();
}
impl ::windows::core::RuntimeName for IDebugAsyncOperationCallBack {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugAsyncOperationCallBack";
}
impl IDebugAsyncOperationCallBackVtbl {
    pub const fn new<Impl: IDebugAsyncOperationCallBackImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugAsyncOperationCallBackVtbl {
        unsafe extern "system" fn onComplete<Impl: IDebugAsyncOperationCallBackImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).onComplete() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugAsyncOperationCallBack>, base.5, onComplete::<Impl, OFFSET>)
    }
}
pub trait IDebugBreakpointImpl: Sized {
    fn GetId();
    fn GetType();
    fn GetAdder();
    fn GetFlags();
    fn AddFlags();
    fn RemoveFlags();
    fn SetFlags();
    fn GetOffset();
    fn SetOffset();
    fn GetDataParameters();
    fn SetDataParameters();
    fn GetPassCount();
    fn SetPassCount();
    fn GetCurrentPassCount();
    fn GetMatchThreadId();
    fn SetMatchThreadId();
    fn GetCommand();
    fn SetCommand();
    fn GetOffsetExpression();
    fn SetOffsetExpression();
    fn GetParameters();
}
impl ::windows::core::RuntimeName for IDebugBreakpoint {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugBreakpoint";
}
impl IDebugBreakpointVtbl {
    pub const fn new<Impl: IDebugBreakpointImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugBreakpointVtbl {
        unsafe extern "system" fn GetId<Impl: IDebugBreakpointImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetId(::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetType<Impl: IDebugBreakpointImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, breaktype: *mut u32, proctype: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetType(::core::mem::transmute_copy(&breaktype), ::core::mem::transmute_copy(&proctype)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetAdder<Impl: IDebugBreakpointImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, adder: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetAdder(::core::mem::transmute_copy(&adder)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFlags<Impl: IDebugBreakpointImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetFlags(::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddFlags<Impl: IDebugBreakpointImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddFlags(flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveFlags<Impl: IDebugBreakpointImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveFlags(flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetFlags<Impl: IDebugBreakpointImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetFlags(flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOffset<Impl: IDebugBreakpointImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOffset(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOffset<Impl: IDebugBreakpointImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOffset(offset) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDataParameters<Impl: IDebugBreakpointImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, size: *mut u32, accesstype: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDataParameters(::core::mem::transmute_copy(&size), ::core::mem::transmute_copy(&accesstype)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetDataParameters<Impl: IDebugBreakpointImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, size: u32, accesstype: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetDataParameters(size, accesstype) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPassCount<Impl: IDebugBreakpointImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetPassCount(::core::mem::transmute_copy(&count)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetPassCount<Impl: IDebugBreakpointImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetPassCount(count) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentPassCount<Impl: IDebugBreakpointImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentPassCount(::core::mem::transmute_copy(&count)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetMatchThreadId<Impl: IDebugBreakpointImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetMatchThreadId(::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetMatchThreadId<Impl: IDebugBreakpointImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, thread: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetMatchThreadId(thread) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCommand<Impl: IDebugBreakpointImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCommand(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&commandsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetCommand<Impl: IDebugBreakpointImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, command: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetCommand(&*(&command as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOffsetExpression<Impl: IDebugBreakpointImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, expressionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOffsetExpression(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&expressionsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOffsetExpression<Impl: IDebugBreakpointImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, expression: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOffsetExpression(&*(&expression as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetParameters<Impl: IDebugBreakpointImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetParameters(::core::mem::transmute_copy(&params)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            base.0,
            base.1,
            base.2,
            base.3,
            ::windows::core::GetRuntimeClassName::<IDebugBreakpoint>,
            base.5,
            GetId::<Impl, OFFSET>,
            GetType::<Impl, OFFSET>,
            GetAdder::<Impl, OFFSET>,
            GetFlags::<Impl, OFFSET>,
            AddFlags::<Impl, OFFSET>,
            RemoveFlags::<Impl, OFFSET>,
            SetFlags::<Impl, OFFSET>,
            GetOffset::<Impl, OFFSET>,
            SetOffset::<Impl, OFFSET>,
            GetDataParameters::<Impl, OFFSET>,
            SetDataParameters::<Impl, OFFSET>,
            GetPassCount::<Impl, OFFSET>,
            SetPassCount::<Impl, OFFSET>,
            GetCurrentPassCount::<Impl, OFFSET>,
            GetMatchThreadId::<Impl, OFFSET>,
            SetMatchThreadId::<Impl, OFFSET>,
            GetCommand::<Impl, OFFSET>,
            SetCommand::<Impl, OFFSET>,
            GetOffsetExpression::<Impl, OFFSET>,
            SetOffsetExpression::<Impl, OFFSET>,
            GetParameters::<Impl, OFFSET>,
        )
    }
}
pub trait IDebugBreakpoint2Impl: Sized {
    fn GetId();
    fn GetType();
    fn GetAdder();
    fn GetFlags();
    fn AddFlags();
    fn RemoveFlags();
    fn SetFlags();
    fn GetOffset();
    fn SetOffset();
    fn GetDataParameters();
    fn SetDataParameters();
    fn GetPassCount();
    fn SetPassCount();
    fn GetCurrentPassCount();
    fn GetMatchThreadId();
    fn SetMatchThreadId();
    fn GetCommand();
    fn SetCommand();
    fn GetOffsetExpression();
    fn SetOffsetExpression();
    fn GetParameters();
    fn GetCommandWide();
    fn SetCommandWide();
    fn GetOffsetExpressionWide();
    fn SetOffsetExpressionWide();
}
impl ::windows::core::RuntimeName for IDebugBreakpoint2 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugBreakpoint2";
}
impl IDebugBreakpoint2Vtbl {
    pub const fn new<Impl: IDebugBreakpoint2Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugBreakpoint2Vtbl {
        unsafe extern "system" fn GetId<Impl: IDebugBreakpoint2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetId(::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetType<Impl: IDebugBreakpoint2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, breaktype: *mut u32, proctype: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetType(::core::mem::transmute_copy(&breaktype), ::core::mem::transmute_copy(&proctype)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetAdder<Impl: IDebugBreakpoint2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, adder: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetAdder(::core::mem::transmute_copy(&adder)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFlags<Impl: IDebugBreakpoint2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetFlags(::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddFlags<Impl: IDebugBreakpoint2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddFlags(flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveFlags<Impl: IDebugBreakpoint2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveFlags(flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetFlags<Impl: IDebugBreakpoint2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetFlags(flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOffset<Impl: IDebugBreakpoint2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOffset(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOffset<Impl: IDebugBreakpoint2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOffset(offset) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDataParameters<Impl: IDebugBreakpoint2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, size: *mut u32, accesstype: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDataParameters(::core::mem::transmute_copy(&size), ::core::mem::transmute_copy(&accesstype)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetDataParameters<Impl: IDebugBreakpoint2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, size: u32, accesstype: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetDataParameters(size, accesstype) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPassCount<Impl: IDebugBreakpoint2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetPassCount(::core::mem::transmute_copy(&count)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetPassCount<Impl: IDebugBreakpoint2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetPassCount(count) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentPassCount<Impl: IDebugBreakpoint2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentPassCount(::core::mem::transmute_copy(&count)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetMatchThreadId<Impl: IDebugBreakpoint2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetMatchThreadId(::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetMatchThreadId<Impl: IDebugBreakpoint2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, thread: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetMatchThreadId(thread) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCommand<Impl: IDebugBreakpoint2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCommand(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&commandsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetCommand<Impl: IDebugBreakpoint2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, command: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetCommand(&*(&command as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOffsetExpression<Impl: IDebugBreakpoint2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, expressionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOffsetExpression(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&expressionsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOffsetExpression<Impl: IDebugBreakpoint2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, expression: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOffsetExpression(&*(&expression as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetParameters<Impl: IDebugBreakpoint2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetParameters(::core::mem::transmute_copy(&params)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCommandWide<Impl: IDebugBreakpoint2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCommandWide(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&commandsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetCommandWide<Impl: IDebugBreakpoint2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, command: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetCommandWide(&*(&command as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOffsetExpressionWide<Impl: IDebugBreakpoint2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, expressionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOffsetExpressionWide(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&expressionsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOffsetExpressionWide<Impl: IDebugBreakpoint2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, expression: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOffsetExpressionWide(&*(&expression as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            base.0,
            base.1,
            base.2,
            base.3,
            ::windows::core::GetRuntimeClassName::<IDebugBreakpoint2>,
            base.5,
            GetId::<Impl, OFFSET>,
            GetType::<Impl, OFFSET>,
            GetAdder::<Impl, OFFSET>,
            GetFlags::<Impl, OFFSET>,
            AddFlags::<Impl, OFFSET>,
            RemoveFlags::<Impl, OFFSET>,
            SetFlags::<Impl, OFFSET>,
            GetOffset::<Impl, OFFSET>,
            SetOffset::<Impl, OFFSET>,
            GetDataParameters::<Impl, OFFSET>,
            SetDataParameters::<Impl, OFFSET>,
            GetPassCount::<Impl, OFFSET>,
            SetPassCount::<Impl, OFFSET>,
            GetCurrentPassCount::<Impl, OFFSET>,
            GetMatchThreadId::<Impl, OFFSET>,
            SetMatchThreadId::<Impl, OFFSET>,
            GetCommand::<Impl, OFFSET>,
            SetCommand::<Impl, OFFSET>,
            GetOffsetExpression::<Impl, OFFSET>,
            SetOffsetExpression::<Impl, OFFSET>,
            GetParameters::<Impl, OFFSET>,
            GetCommandWide::<Impl, OFFSET>,
            SetCommandWide::<Impl, OFFSET>,
            GetOffsetExpressionWide::<Impl, OFFSET>,
            SetOffsetExpressionWide::<Impl, OFFSET>,
        )
    }
}
pub trait IDebugBreakpoint3Impl: Sized {
    fn GetId();
    fn GetType();
    fn GetAdder();
    fn GetFlags();
    fn AddFlags();
    fn RemoveFlags();
    fn SetFlags();
    fn GetOffset();
    fn SetOffset();
    fn GetDataParameters();
    fn SetDataParameters();
    fn GetPassCount();
    fn SetPassCount();
    fn GetCurrentPassCount();
    fn GetMatchThreadId();
    fn SetMatchThreadId();
    fn GetCommand();
    fn SetCommand();
    fn GetOffsetExpression();
    fn SetOffsetExpression();
    fn GetParameters();
    fn GetCommandWide();
    fn SetCommandWide();
    fn GetOffsetExpressionWide();
    fn SetOffsetExpressionWide();
    fn GetGuid();
}
impl ::windows::core::RuntimeName for IDebugBreakpoint3 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugBreakpoint3";
}
impl IDebugBreakpoint3Vtbl {
    pub const fn new<Impl: IDebugBreakpoint3Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugBreakpoint3Vtbl {
        unsafe extern "system" fn GetId<Impl: IDebugBreakpoint3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetId(::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetType<Impl: IDebugBreakpoint3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, breaktype: *mut u32, proctype: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetType(::core::mem::transmute_copy(&breaktype), ::core::mem::transmute_copy(&proctype)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetAdder<Impl: IDebugBreakpoint3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, adder: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetAdder(::core::mem::transmute_copy(&adder)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFlags<Impl: IDebugBreakpoint3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetFlags(::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddFlags<Impl: IDebugBreakpoint3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddFlags(flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveFlags<Impl: IDebugBreakpoint3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveFlags(flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetFlags<Impl: IDebugBreakpoint3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetFlags(flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOffset<Impl: IDebugBreakpoint3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOffset(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOffset<Impl: IDebugBreakpoint3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOffset(offset) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDataParameters<Impl: IDebugBreakpoint3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, size: *mut u32, accesstype: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDataParameters(::core::mem::transmute_copy(&size), ::core::mem::transmute_copy(&accesstype)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetDataParameters<Impl: IDebugBreakpoint3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, size: u32, accesstype: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetDataParameters(size, accesstype) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPassCount<Impl: IDebugBreakpoint3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetPassCount(::core::mem::transmute_copy(&count)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetPassCount<Impl: IDebugBreakpoint3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetPassCount(count) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentPassCount<Impl: IDebugBreakpoint3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentPassCount(::core::mem::transmute_copy(&count)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetMatchThreadId<Impl: IDebugBreakpoint3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetMatchThreadId(::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetMatchThreadId<Impl: IDebugBreakpoint3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, thread: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetMatchThreadId(thread) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCommand<Impl: IDebugBreakpoint3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCommand(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&commandsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetCommand<Impl: IDebugBreakpoint3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, command: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetCommand(&*(&command as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOffsetExpression<Impl: IDebugBreakpoint3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, expressionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOffsetExpression(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&expressionsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOffsetExpression<Impl: IDebugBreakpoint3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, expression: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOffsetExpression(&*(&expression as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetParameters<Impl: IDebugBreakpoint3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetParameters(::core::mem::transmute_copy(&params)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCommandWide<Impl: IDebugBreakpoint3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCommandWide(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&commandsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetCommandWide<Impl: IDebugBreakpoint3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, command: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetCommandWide(&*(&command as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOffsetExpressionWide<Impl: IDebugBreakpoint3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, expressionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOffsetExpressionWide(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&expressionsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOffsetExpressionWide<Impl: IDebugBreakpoint3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, expression: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOffsetExpressionWide(&*(&expression as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetGuid<Impl: IDebugBreakpoint3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guid: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetGuid(::core::mem::transmute_copy(&guid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            base.0,
            base.1,
            base.2,
            base.3,
            ::windows::core::GetRuntimeClassName::<IDebugBreakpoint3>,
            base.5,
            GetId::<Impl, OFFSET>,
            GetType::<Impl, OFFSET>,
            GetAdder::<Impl, OFFSET>,
            GetFlags::<Impl, OFFSET>,
            AddFlags::<Impl, OFFSET>,
            RemoveFlags::<Impl, OFFSET>,
            SetFlags::<Impl, OFFSET>,
            GetOffset::<Impl, OFFSET>,
            SetOffset::<Impl, OFFSET>,
            GetDataParameters::<Impl, OFFSET>,
            SetDataParameters::<Impl, OFFSET>,
            GetPassCount::<Impl, OFFSET>,
            SetPassCount::<Impl, OFFSET>,
            GetCurrentPassCount::<Impl, OFFSET>,
            GetMatchThreadId::<Impl, OFFSET>,
            SetMatchThreadId::<Impl, OFFSET>,
            GetCommand::<Impl, OFFSET>,
            SetCommand::<Impl, OFFSET>,
            GetOffsetExpression::<Impl, OFFSET>,
            SetOffsetExpression::<Impl, OFFSET>,
            GetParameters::<Impl, OFFSET>,
            GetCommandWide::<Impl, OFFSET>,
            SetCommandWide::<Impl, OFFSET>,
            GetOffsetExpressionWide::<Impl, OFFSET>,
            SetOffsetExpressionWide::<Impl, OFFSET>,
            GetGuid::<Impl, OFFSET>,
        )
    }
}
pub trait IDebugClientImpl: Sized {
    fn AttachKernel();
    fn GetKernelConnectionOptions();
    fn SetKernelConnectionOptions();
    fn StartProcessServer();
    fn ConnectProcessServer();
    fn DisconnectProcessServer();
    fn GetRunningProcessSystemIds();
    fn GetRunningProcessSystemIdByExecutableName();
    fn GetRunningProcessDescription();
    fn AttachProcess();
    fn CreateProcessA();
    fn CreateProcessAndAttach();
    fn GetProcessOptions();
    fn AddProcessOptions();
    fn RemoveProcessOptions();
    fn SetProcessOptions();
    fn OpenDumpFile();
    fn WriteDumpFile();
    fn ConnectSession();
    fn StartServer();
    fn OutputServers();
    fn TerminateProcesses();
    fn DetachProcesses();
    fn EndSession();
    fn GetExitCode();
    fn DispatchCallbacks();
    fn ExitDispatch();
    fn CreateClient();
    fn GetInputCallbacks();
    fn SetInputCallbacks();
    fn GetOutputCallbacks();
    fn SetOutputCallbacks();
    fn GetOutputMask();
    fn SetOutputMask();
    fn GetOtherOutputMask();
    fn SetOtherOutputMask();
    fn GetOutputWidth();
    fn SetOutputWidth();
    fn GetOutputLinePrefix();
    fn SetOutputLinePrefix();
    fn GetIdentity();
    fn OutputIdentity();
    fn GetEventCallbacks();
    fn SetEventCallbacks();
    fn FlushCallbacks();
}
impl ::windows::core::RuntimeName for IDebugClient {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugClient";
}
impl IDebugClientVtbl {
    pub const fn new<Impl: IDebugClientImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugClientVtbl {
        unsafe extern "system" fn AttachKernel<Impl: IDebugClientImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, connectoptions: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AttachKernel(flags, &*(&connectoptions as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetKernelConnectionOptions<Impl: IDebugClientImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetKernelConnectionOptions(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&optionssize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetKernelConnectionOptions<Impl: IDebugClientImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetKernelConnectionOptions(&*(&options as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartProcessServer<Impl: IDebugClientImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, options: super::super::super::Foundation::PSTR, reserved: *const ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).StartProcessServer(flags, &*(&options as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), &*(&reserved as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ConnectProcessServer<Impl: IDebugClientImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, remoteoptions: super::super::super::Foundation::PSTR, server: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ConnectProcessServer(&*(&remoteoptions as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&server)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DisconnectProcessServer<Impl: IDebugClientImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).DisconnectProcessServer(server) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRunningProcessSystemIds<Impl: IDebugClientImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetRunningProcessSystemIds(server, ::core::mem::transmute_copy(&ids), count, ::core::mem::transmute_copy(&actualcount)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableName<Impl: IDebugClientImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, exename: super::super::super::Foundation::PSTR, flags: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetRunningProcessSystemIdByExecutableName(server, &*(&exename as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRunningProcessDescription<Impl: IDebugClientImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetRunningProcessDescription(server, systemid, flags, ::core::mem::transmute_copy(&exename), exenamesize, ::core::mem::transmute_copy(&actualexenamesize), ::core::mem::transmute_copy(&description), descriptionsize, ::core::mem::transmute_copy(&actualdescriptionsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AttachProcess<Impl: IDebugClientImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AttachProcess(server, processid, attachflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateProcessA<Impl: IDebugClientImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateProcessA(server, &*(&commandline as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), createflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateProcessAndAttach<Impl: IDebugClientImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateProcessAndAttach(server, &*(&commandline as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), createflags, processid, attachflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessOptions<Impl: IDebugClientImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetProcessOptions(::core::mem::transmute_copy(&options)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddProcessOptions<Impl: IDebugClientImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddProcessOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveProcessOptions<Impl: IDebugClientImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveProcessOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetProcessOptions<Impl: IDebugClientImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetProcessOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OpenDumpFile<Impl: IDebugClientImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OpenDumpFile(&*(&dumpfile as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteDumpFile<Impl: IDebugClientImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteDumpFile(&*(&dumpfile as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), qualifier) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ConnectSession<Impl: IDebugClientImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, historylimit: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ConnectSession(flags, historylimit) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartServer<Impl: IDebugClientImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).StartServer(&*(&options as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputServers<Impl: IDebugClientImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, machine: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputServers(outputcontrol, &*(&machine as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn TerminateProcesses<Impl: IDebugClientImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).TerminateProcesses() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DetachProcesses<Impl: IDebugClientImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).DetachProcesses() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndSession<Impl: IDebugClientImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EndSession(flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExitCode<Impl: IDebugClientImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, code: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExitCode(::core::mem::transmute_copy(&code)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DispatchCallbacks<Impl: IDebugClientImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).DispatchCallbacks(timeout) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ExitDispatch<Impl: IDebugClientImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ExitDispatch(&*(&client as *const <IDebugClient as ::windows::core::Abi>::Abi as *const <IDebugClient as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateClient<Impl: IDebugClientImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateClient(::core::mem::transmute_copy(&client)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetInputCallbacks<Impl: IDebugClientImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetInputCallbacks(::core::mem::transmute_copy(&callbacks)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetInputCallbacks<Impl: IDebugClientImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetInputCallbacks(&*(&callbacks as *const <IDebugInputCallbacks as ::windows::core::Abi>::Abi as *const <IDebugInputCallbacks as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOutputCallbacks<Impl: IDebugClientImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOutputCallbacks(::core::mem::transmute_copy(&callbacks)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputCallbacks<Impl: IDebugClientImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOutputCallbacks(&*(&callbacks as *const <IDebugOutputCallbacks as ::windows::core::Abi>::Abi as *const <IDebugOutputCallbacks as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOutputMask<Impl: IDebugClientImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOutputMask(::core::mem::transmute_copy(&mask)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputMask<Impl: IDebugClientImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOutputMask(mask) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOtherOutputMask<Impl: IDebugClientImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOtherOutputMask(&*(&client as *const <IDebugClient as ::windows::core::Abi>::Abi as *const <IDebugClient as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&mask)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOtherOutputMask<Impl: IDebugClientImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOtherOutputMask(&*(&client as *const <IDebugClient as ::windows::core::Abi>::Abi as *const <IDebugClient as ::windows::core::DefaultType>::DefaultType), mask) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOutputWidth<Impl: IDebugClientImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, columns: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOutputWidth(::core::mem::transmute_copy(&columns)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputWidth<Impl: IDebugClientImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, columns: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOutputWidth(columns) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOutputLinePrefix<Impl: IDebugClientImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOutputLinePrefix(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&prefixsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputLinePrefix<Impl: IDebugClientImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prefix: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOutputLinePrefix(&*(&prefix as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetIdentity<Impl: IDebugClientImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetIdentity(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&identitysize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputIdentity<Impl: IDebugClientImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputIdentity(outputcontrol, flags, &*(&format as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventCallbacks<Impl: IDebugClientImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventCallbacks(::core::mem::transmute_copy(&callbacks)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEventCallbacks<Impl: IDebugClientImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetEventCallbacks(&*(&callbacks as *const <IDebugEventCallbacks as ::windows::core::Abi>::Abi as *const <IDebugEventCallbacks as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FlushCallbacks<Impl: IDebugClientImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).FlushCallbacks() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            base.0,
            base.1,
            base.2,
            base.3,
            ::windows::core::GetRuntimeClassName::<IDebugClient>,
            base.5,
            AttachKernel::<Impl, OFFSET>,
            GetKernelConnectionOptions::<Impl, OFFSET>,
            SetKernelConnectionOptions::<Impl, OFFSET>,
            StartProcessServer::<Impl, OFFSET>,
            ConnectProcessServer::<Impl, OFFSET>,
            DisconnectProcessServer::<Impl, OFFSET>,
            GetRunningProcessSystemIds::<Impl, OFFSET>,
            GetRunningProcessSystemIdByExecutableName::<Impl, OFFSET>,
            GetRunningProcessDescription::<Impl, OFFSET>,
            AttachProcess::<Impl, OFFSET>,
            CreateProcessA::<Impl, OFFSET>,
            CreateProcessAndAttach::<Impl, OFFSET>,
            GetProcessOptions::<Impl, OFFSET>,
            AddProcessOptions::<Impl, OFFSET>,
            RemoveProcessOptions::<Impl, OFFSET>,
            SetProcessOptions::<Impl, OFFSET>,
            OpenDumpFile::<Impl, OFFSET>,
            WriteDumpFile::<Impl, OFFSET>,
            ConnectSession::<Impl, OFFSET>,
            StartServer::<Impl, OFFSET>,
            OutputServers::<Impl, OFFSET>,
            TerminateProcesses::<Impl, OFFSET>,
            DetachProcesses::<Impl, OFFSET>,
            EndSession::<Impl, OFFSET>,
            GetExitCode::<Impl, OFFSET>,
            DispatchCallbacks::<Impl, OFFSET>,
            ExitDispatch::<Impl, OFFSET>,
            CreateClient::<Impl, OFFSET>,
            GetInputCallbacks::<Impl, OFFSET>,
            SetInputCallbacks::<Impl, OFFSET>,
            GetOutputCallbacks::<Impl, OFFSET>,
            SetOutputCallbacks::<Impl, OFFSET>,
            GetOutputMask::<Impl, OFFSET>,
            SetOutputMask::<Impl, OFFSET>,
            GetOtherOutputMask::<Impl, OFFSET>,
            SetOtherOutputMask::<Impl, OFFSET>,
            GetOutputWidth::<Impl, OFFSET>,
            SetOutputWidth::<Impl, OFFSET>,
            GetOutputLinePrefix::<Impl, OFFSET>,
            SetOutputLinePrefix::<Impl, OFFSET>,
            GetIdentity::<Impl, OFFSET>,
            OutputIdentity::<Impl, OFFSET>,
            GetEventCallbacks::<Impl, OFFSET>,
            SetEventCallbacks::<Impl, OFFSET>,
            FlushCallbacks::<Impl, OFFSET>,
        )
    }
}
pub trait IDebugClient2Impl: Sized {
    fn AttachKernel();
    fn GetKernelConnectionOptions();
    fn SetKernelConnectionOptions();
    fn StartProcessServer();
    fn ConnectProcessServer();
    fn DisconnectProcessServer();
    fn GetRunningProcessSystemIds();
    fn GetRunningProcessSystemIdByExecutableName();
    fn GetRunningProcessDescription();
    fn AttachProcess();
    fn CreateProcessA();
    fn CreateProcessAndAttach();
    fn GetProcessOptions();
    fn AddProcessOptions();
    fn RemoveProcessOptions();
    fn SetProcessOptions();
    fn OpenDumpFile();
    fn WriteDumpFile();
    fn ConnectSession();
    fn StartServer();
    fn OutputServers();
    fn TerminateProcesses();
    fn DetachProcesses();
    fn EndSession();
    fn GetExitCode();
    fn DispatchCallbacks();
    fn ExitDispatch();
    fn CreateClient();
    fn GetInputCallbacks();
    fn SetInputCallbacks();
    fn GetOutputCallbacks();
    fn SetOutputCallbacks();
    fn GetOutputMask();
    fn SetOutputMask();
    fn GetOtherOutputMask();
    fn SetOtherOutputMask();
    fn GetOutputWidth();
    fn SetOutputWidth();
    fn GetOutputLinePrefix();
    fn SetOutputLinePrefix();
    fn GetIdentity();
    fn OutputIdentity();
    fn GetEventCallbacks();
    fn SetEventCallbacks();
    fn FlushCallbacks();
    fn WriteDumpFile2();
    fn AddDumpInformationFile();
    fn EndProcessServer();
    fn WaitForProcessServerEnd();
    fn IsKernelDebuggerEnabled();
    fn TerminateCurrentProcess();
    fn DetachCurrentProcess();
    fn AbandonCurrentProcess();
}
impl ::windows::core::RuntimeName for IDebugClient2 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugClient2";
}
impl IDebugClient2Vtbl {
    pub const fn new<Impl: IDebugClient2Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugClient2Vtbl {
        unsafe extern "system" fn AttachKernel<Impl: IDebugClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, connectoptions: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AttachKernel(flags, &*(&connectoptions as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetKernelConnectionOptions<Impl: IDebugClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetKernelConnectionOptions(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&optionssize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetKernelConnectionOptions<Impl: IDebugClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetKernelConnectionOptions(&*(&options as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartProcessServer<Impl: IDebugClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, options: super::super::super::Foundation::PSTR, reserved: *const ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).StartProcessServer(flags, &*(&options as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), &*(&reserved as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ConnectProcessServer<Impl: IDebugClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, remoteoptions: super::super::super::Foundation::PSTR, server: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ConnectProcessServer(&*(&remoteoptions as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&server)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DisconnectProcessServer<Impl: IDebugClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).DisconnectProcessServer(server) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRunningProcessSystemIds<Impl: IDebugClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetRunningProcessSystemIds(server, ::core::mem::transmute_copy(&ids), count, ::core::mem::transmute_copy(&actualcount)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableName<Impl: IDebugClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, exename: super::super::super::Foundation::PSTR, flags: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetRunningProcessSystemIdByExecutableName(server, &*(&exename as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRunningProcessDescription<Impl: IDebugClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetRunningProcessDescription(server, systemid, flags, ::core::mem::transmute_copy(&exename), exenamesize, ::core::mem::transmute_copy(&actualexenamesize), ::core::mem::transmute_copy(&description), descriptionsize, ::core::mem::transmute_copy(&actualdescriptionsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AttachProcess<Impl: IDebugClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AttachProcess(server, processid, attachflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateProcessA<Impl: IDebugClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateProcessA(server, &*(&commandline as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), createflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateProcessAndAttach<Impl: IDebugClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateProcessAndAttach(server, &*(&commandline as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), createflags, processid, attachflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessOptions<Impl: IDebugClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetProcessOptions(::core::mem::transmute_copy(&options)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddProcessOptions<Impl: IDebugClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddProcessOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveProcessOptions<Impl: IDebugClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveProcessOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetProcessOptions<Impl: IDebugClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetProcessOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OpenDumpFile<Impl: IDebugClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OpenDumpFile(&*(&dumpfile as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteDumpFile<Impl: IDebugClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteDumpFile(&*(&dumpfile as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), qualifier) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ConnectSession<Impl: IDebugClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, historylimit: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ConnectSession(flags, historylimit) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartServer<Impl: IDebugClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).StartServer(&*(&options as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputServers<Impl: IDebugClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, machine: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputServers(outputcontrol, &*(&machine as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn TerminateProcesses<Impl: IDebugClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).TerminateProcesses() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DetachProcesses<Impl: IDebugClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).DetachProcesses() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndSession<Impl: IDebugClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EndSession(flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExitCode<Impl: IDebugClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, code: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExitCode(::core::mem::transmute_copy(&code)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DispatchCallbacks<Impl: IDebugClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).DispatchCallbacks(timeout) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ExitDispatch<Impl: IDebugClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ExitDispatch(&*(&client as *const <IDebugClient as ::windows::core::Abi>::Abi as *const <IDebugClient as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateClient<Impl: IDebugClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateClient(::core::mem::transmute_copy(&client)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetInputCallbacks<Impl: IDebugClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetInputCallbacks(::core::mem::transmute_copy(&callbacks)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetInputCallbacks<Impl: IDebugClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetInputCallbacks(&*(&callbacks as *const <IDebugInputCallbacks as ::windows::core::Abi>::Abi as *const <IDebugInputCallbacks as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOutputCallbacks<Impl: IDebugClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOutputCallbacks(::core::mem::transmute_copy(&callbacks)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputCallbacks<Impl: IDebugClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOutputCallbacks(&*(&callbacks as *const <IDebugOutputCallbacks as ::windows::core::Abi>::Abi as *const <IDebugOutputCallbacks as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOutputMask<Impl: IDebugClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOutputMask(::core::mem::transmute_copy(&mask)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputMask<Impl: IDebugClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOutputMask(mask) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOtherOutputMask<Impl: IDebugClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOtherOutputMask(&*(&client as *const <IDebugClient as ::windows::core::Abi>::Abi as *const <IDebugClient as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&mask)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOtherOutputMask<Impl: IDebugClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOtherOutputMask(&*(&client as *const <IDebugClient as ::windows::core::Abi>::Abi as *const <IDebugClient as ::windows::core::DefaultType>::DefaultType), mask) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOutputWidth<Impl: IDebugClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, columns: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOutputWidth(::core::mem::transmute_copy(&columns)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputWidth<Impl: IDebugClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, columns: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOutputWidth(columns) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOutputLinePrefix<Impl: IDebugClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOutputLinePrefix(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&prefixsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputLinePrefix<Impl: IDebugClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prefix: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOutputLinePrefix(&*(&prefix as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetIdentity<Impl: IDebugClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetIdentity(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&identitysize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputIdentity<Impl: IDebugClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputIdentity(outputcontrol, flags, &*(&format as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventCallbacks<Impl: IDebugClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventCallbacks(::core::mem::transmute_copy(&callbacks)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEventCallbacks<Impl: IDebugClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetEventCallbacks(&*(&callbacks as *const <IDebugEventCallbacks as ::windows::core::Abi>::Abi as *const <IDebugEventCallbacks as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FlushCallbacks<Impl: IDebugClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).FlushCallbacks() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteDumpFile2<Impl: IDebugClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteDumpFile2(&*(&dumpfile as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), qualifier, formatflags, &*(&comment as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddDumpInformationFile<Impl: IDebugClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, infofile: super::super::super::Foundation::PSTR, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddDumpInformationFile(&*(&infofile as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), r#type) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndProcessServer<Impl: IDebugClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EndProcessServer(server) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WaitForProcessServerEnd<Impl: IDebugClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WaitForProcessServerEnd(timeout) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsKernelDebuggerEnabled<Impl: IDebugClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).IsKernelDebuggerEnabled() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn TerminateCurrentProcess<Impl: IDebugClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).TerminateCurrentProcess() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DetachCurrentProcess<Impl: IDebugClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).DetachCurrentProcess() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AbandonCurrentProcess<Impl: IDebugClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AbandonCurrentProcess() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            base.0,
            base.1,
            base.2,
            base.3,
            ::windows::core::GetRuntimeClassName::<IDebugClient2>,
            base.5,
            AttachKernel::<Impl, OFFSET>,
            GetKernelConnectionOptions::<Impl, OFFSET>,
            SetKernelConnectionOptions::<Impl, OFFSET>,
            StartProcessServer::<Impl, OFFSET>,
            ConnectProcessServer::<Impl, OFFSET>,
            DisconnectProcessServer::<Impl, OFFSET>,
            GetRunningProcessSystemIds::<Impl, OFFSET>,
            GetRunningProcessSystemIdByExecutableName::<Impl, OFFSET>,
            GetRunningProcessDescription::<Impl, OFFSET>,
            AttachProcess::<Impl, OFFSET>,
            CreateProcessA::<Impl, OFFSET>,
            CreateProcessAndAttach::<Impl, OFFSET>,
            GetProcessOptions::<Impl, OFFSET>,
            AddProcessOptions::<Impl, OFFSET>,
            RemoveProcessOptions::<Impl, OFFSET>,
            SetProcessOptions::<Impl, OFFSET>,
            OpenDumpFile::<Impl, OFFSET>,
            WriteDumpFile::<Impl, OFFSET>,
            ConnectSession::<Impl, OFFSET>,
            StartServer::<Impl, OFFSET>,
            OutputServers::<Impl, OFFSET>,
            TerminateProcesses::<Impl, OFFSET>,
            DetachProcesses::<Impl, OFFSET>,
            EndSession::<Impl, OFFSET>,
            GetExitCode::<Impl, OFFSET>,
            DispatchCallbacks::<Impl, OFFSET>,
            ExitDispatch::<Impl, OFFSET>,
            CreateClient::<Impl, OFFSET>,
            GetInputCallbacks::<Impl, OFFSET>,
            SetInputCallbacks::<Impl, OFFSET>,
            GetOutputCallbacks::<Impl, OFFSET>,
            SetOutputCallbacks::<Impl, OFFSET>,
            GetOutputMask::<Impl, OFFSET>,
            SetOutputMask::<Impl, OFFSET>,
            GetOtherOutputMask::<Impl, OFFSET>,
            SetOtherOutputMask::<Impl, OFFSET>,
            GetOutputWidth::<Impl, OFFSET>,
            SetOutputWidth::<Impl, OFFSET>,
            GetOutputLinePrefix::<Impl, OFFSET>,
            SetOutputLinePrefix::<Impl, OFFSET>,
            GetIdentity::<Impl, OFFSET>,
            OutputIdentity::<Impl, OFFSET>,
            GetEventCallbacks::<Impl, OFFSET>,
            SetEventCallbacks::<Impl, OFFSET>,
            FlushCallbacks::<Impl, OFFSET>,
            WriteDumpFile2::<Impl, OFFSET>,
            AddDumpInformationFile::<Impl, OFFSET>,
            EndProcessServer::<Impl, OFFSET>,
            WaitForProcessServerEnd::<Impl, OFFSET>,
            IsKernelDebuggerEnabled::<Impl, OFFSET>,
            TerminateCurrentProcess::<Impl, OFFSET>,
            DetachCurrentProcess::<Impl, OFFSET>,
            AbandonCurrentProcess::<Impl, OFFSET>,
        )
    }
}
pub trait IDebugClient3Impl: Sized {
    fn AttachKernel();
    fn GetKernelConnectionOptions();
    fn SetKernelConnectionOptions();
    fn StartProcessServer();
    fn ConnectProcessServer();
    fn DisconnectProcessServer();
    fn GetRunningProcessSystemIds();
    fn GetRunningProcessSystemIdByExecutableName();
    fn GetRunningProcessDescription();
    fn AttachProcess();
    fn CreateProcessA();
    fn CreateProcessAndAttach();
    fn GetProcessOptions();
    fn AddProcessOptions();
    fn RemoveProcessOptions();
    fn SetProcessOptions();
    fn OpenDumpFile();
    fn WriteDumpFile();
    fn ConnectSession();
    fn StartServer();
    fn OutputServers();
    fn TerminateProcesses();
    fn DetachProcesses();
    fn EndSession();
    fn GetExitCode();
    fn DispatchCallbacks();
    fn ExitDispatch();
    fn CreateClient();
    fn GetInputCallbacks();
    fn SetInputCallbacks();
    fn GetOutputCallbacks();
    fn SetOutputCallbacks();
    fn GetOutputMask();
    fn SetOutputMask();
    fn GetOtherOutputMask();
    fn SetOtherOutputMask();
    fn GetOutputWidth();
    fn SetOutputWidth();
    fn GetOutputLinePrefix();
    fn SetOutputLinePrefix();
    fn GetIdentity();
    fn OutputIdentity();
    fn GetEventCallbacks();
    fn SetEventCallbacks();
    fn FlushCallbacks();
    fn WriteDumpFile2();
    fn AddDumpInformationFile();
    fn EndProcessServer();
    fn WaitForProcessServerEnd();
    fn IsKernelDebuggerEnabled();
    fn TerminateCurrentProcess();
    fn DetachCurrentProcess();
    fn AbandonCurrentProcess();
    fn GetRunningProcessSystemIdByExecutableNameWide();
    fn GetRunningProcessDescriptionWide();
    fn CreateProcessWide();
    fn CreateProcessAndAttachWide();
}
impl ::windows::core::RuntimeName for IDebugClient3 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugClient3";
}
impl IDebugClient3Vtbl {
    pub const fn new<Impl: IDebugClient3Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugClient3Vtbl {
        unsafe extern "system" fn AttachKernel<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, connectoptions: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AttachKernel(flags, &*(&connectoptions as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetKernelConnectionOptions<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetKernelConnectionOptions(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&optionssize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetKernelConnectionOptions<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetKernelConnectionOptions(&*(&options as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartProcessServer<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, options: super::super::super::Foundation::PSTR, reserved: *const ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).StartProcessServer(flags, &*(&options as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), &*(&reserved as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ConnectProcessServer<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, remoteoptions: super::super::super::Foundation::PSTR, server: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ConnectProcessServer(&*(&remoteoptions as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&server)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DisconnectProcessServer<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).DisconnectProcessServer(server) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRunningProcessSystemIds<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetRunningProcessSystemIds(server, ::core::mem::transmute_copy(&ids), count, ::core::mem::transmute_copy(&actualcount)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableName<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, exename: super::super::super::Foundation::PSTR, flags: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetRunningProcessSystemIdByExecutableName(server, &*(&exename as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRunningProcessDescription<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetRunningProcessDescription(server, systemid, flags, ::core::mem::transmute_copy(&exename), exenamesize, ::core::mem::transmute_copy(&actualexenamesize), ::core::mem::transmute_copy(&description), descriptionsize, ::core::mem::transmute_copy(&actualdescriptionsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AttachProcess<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AttachProcess(server, processid, attachflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateProcessA<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateProcessA(server, &*(&commandline as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), createflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateProcessAndAttach<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateProcessAndAttach(server, &*(&commandline as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), createflags, processid, attachflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessOptions<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetProcessOptions(::core::mem::transmute_copy(&options)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddProcessOptions<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddProcessOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveProcessOptions<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveProcessOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetProcessOptions<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetProcessOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OpenDumpFile<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OpenDumpFile(&*(&dumpfile as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteDumpFile<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteDumpFile(&*(&dumpfile as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), qualifier) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ConnectSession<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, historylimit: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ConnectSession(flags, historylimit) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartServer<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).StartServer(&*(&options as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputServers<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, machine: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputServers(outputcontrol, &*(&machine as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn TerminateProcesses<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).TerminateProcesses() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DetachProcesses<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).DetachProcesses() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndSession<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EndSession(flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExitCode<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, code: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExitCode(::core::mem::transmute_copy(&code)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DispatchCallbacks<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).DispatchCallbacks(timeout) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ExitDispatch<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ExitDispatch(&*(&client as *const <IDebugClient as ::windows::core::Abi>::Abi as *const <IDebugClient as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateClient<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateClient(::core::mem::transmute_copy(&client)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetInputCallbacks<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetInputCallbacks(::core::mem::transmute_copy(&callbacks)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetInputCallbacks<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetInputCallbacks(&*(&callbacks as *const <IDebugInputCallbacks as ::windows::core::Abi>::Abi as *const <IDebugInputCallbacks as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOutputCallbacks<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOutputCallbacks(::core::mem::transmute_copy(&callbacks)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputCallbacks<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOutputCallbacks(&*(&callbacks as *const <IDebugOutputCallbacks as ::windows::core::Abi>::Abi as *const <IDebugOutputCallbacks as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOutputMask<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOutputMask(::core::mem::transmute_copy(&mask)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputMask<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOutputMask(mask) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOtherOutputMask<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOtherOutputMask(&*(&client as *const <IDebugClient as ::windows::core::Abi>::Abi as *const <IDebugClient as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&mask)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOtherOutputMask<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOtherOutputMask(&*(&client as *const <IDebugClient as ::windows::core::Abi>::Abi as *const <IDebugClient as ::windows::core::DefaultType>::DefaultType), mask) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOutputWidth<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, columns: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOutputWidth(::core::mem::transmute_copy(&columns)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputWidth<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, columns: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOutputWidth(columns) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOutputLinePrefix<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOutputLinePrefix(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&prefixsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputLinePrefix<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prefix: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOutputLinePrefix(&*(&prefix as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetIdentity<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetIdentity(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&identitysize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputIdentity<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputIdentity(outputcontrol, flags, &*(&format as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventCallbacks<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventCallbacks(::core::mem::transmute_copy(&callbacks)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEventCallbacks<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetEventCallbacks(&*(&callbacks as *const <IDebugEventCallbacks as ::windows::core::Abi>::Abi as *const <IDebugEventCallbacks as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FlushCallbacks<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).FlushCallbacks() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteDumpFile2<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteDumpFile2(&*(&dumpfile as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), qualifier, formatflags, &*(&comment as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddDumpInformationFile<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, infofile: super::super::super::Foundation::PSTR, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddDumpInformationFile(&*(&infofile as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), r#type) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndProcessServer<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EndProcessServer(server) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WaitForProcessServerEnd<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WaitForProcessServerEnd(timeout) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsKernelDebuggerEnabled<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).IsKernelDebuggerEnabled() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn TerminateCurrentProcess<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).TerminateCurrentProcess() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DetachCurrentProcess<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).DetachCurrentProcess() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AbandonCurrentProcess<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AbandonCurrentProcess() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableNameWide<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, exename: super::super::super::Foundation::PWSTR, flags: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetRunningProcessSystemIdByExecutableNameWide(server, &*(&exename as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRunningProcessDescriptionWide<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PWSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetRunningProcessDescriptionWide(server, systemid, flags, ::core::mem::transmute_copy(&exename), exenamesize, ::core::mem::transmute_copy(&actualexenamesize), ::core::mem::transmute_copy(&description), descriptionsize, ::core::mem::transmute_copy(&actualdescriptionsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateProcessWide<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateProcessWide(server, &*(&commandline as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), createflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateProcessAndAttachWide<Impl: IDebugClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateProcessAndAttachWide(server, &*(&commandline as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), createflags, processid, attachflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            base.0,
            base.1,
            base.2,
            base.3,
            ::windows::core::GetRuntimeClassName::<IDebugClient3>,
            base.5,
            AttachKernel::<Impl, OFFSET>,
            GetKernelConnectionOptions::<Impl, OFFSET>,
            SetKernelConnectionOptions::<Impl, OFFSET>,
            StartProcessServer::<Impl, OFFSET>,
            ConnectProcessServer::<Impl, OFFSET>,
            DisconnectProcessServer::<Impl, OFFSET>,
            GetRunningProcessSystemIds::<Impl, OFFSET>,
            GetRunningProcessSystemIdByExecutableName::<Impl, OFFSET>,
            GetRunningProcessDescription::<Impl, OFFSET>,
            AttachProcess::<Impl, OFFSET>,
            CreateProcessA::<Impl, OFFSET>,
            CreateProcessAndAttach::<Impl, OFFSET>,
            GetProcessOptions::<Impl, OFFSET>,
            AddProcessOptions::<Impl, OFFSET>,
            RemoveProcessOptions::<Impl, OFFSET>,
            SetProcessOptions::<Impl, OFFSET>,
            OpenDumpFile::<Impl, OFFSET>,
            WriteDumpFile::<Impl, OFFSET>,
            ConnectSession::<Impl, OFFSET>,
            StartServer::<Impl, OFFSET>,
            OutputServers::<Impl, OFFSET>,
            TerminateProcesses::<Impl, OFFSET>,
            DetachProcesses::<Impl, OFFSET>,
            EndSession::<Impl, OFFSET>,
            GetExitCode::<Impl, OFFSET>,
            DispatchCallbacks::<Impl, OFFSET>,
            ExitDispatch::<Impl, OFFSET>,
            CreateClient::<Impl, OFFSET>,
            GetInputCallbacks::<Impl, OFFSET>,
            SetInputCallbacks::<Impl, OFFSET>,
            GetOutputCallbacks::<Impl, OFFSET>,
            SetOutputCallbacks::<Impl, OFFSET>,
            GetOutputMask::<Impl, OFFSET>,
            SetOutputMask::<Impl, OFFSET>,
            GetOtherOutputMask::<Impl, OFFSET>,
            SetOtherOutputMask::<Impl, OFFSET>,
            GetOutputWidth::<Impl, OFFSET>,
            SetOutputWidth::<Impl, OFFSET>,
            GetOutputLinePrefix::<Impl, OFFSET>,
            SetOutputLinePrefix::<Impl, OFFSET>,
            GetIdentity::<Impl, OFFSET>,
            OutputIdentity::<Impl, OFFSET>,
            GetEventCallbacks::<Impl, OFFSET>,
            SetEventCallbacks::<Impl, OFFSET>,
            FlushCallbacks::<Impl, OFFSET>,
            WriteDumpFile2::<Impl, OFFSET>,
            AddDumpInformationFile::<Impl, OFFSET>,
            EndProcessServer::<Impl, OFFSET>,
            WaitForProcessServerEnd::<Impl, OFFSET>,
            IsKernelDebuggerEnabled::<Impl, OFFSET>,
            TerminateCurrentProcess::<Impl, OFFSET>,
            DetachCurrentProcess::<Impl, OFFSET>,
            AbandonCurrentProcess::<Impl, OFFSET>,
            GetRunningProcessSystemIdByExecutableNameWide::<Impl, OFFSET>,
            GetRunningProcessDescriptionWide::<Impl, OFFSET>,
            CreateProcessWide::<Impl, OFFSET>,
            CreateProcessAndAttachWide::<Impl, OFFSET>,
        )
    }
}
pub trait IDebugClient4Impl: Sized {
    fn AttachKernel();
    fn GetKernelConnectionOptions();
    fn SetKernelConnectionOptions();
    fn StartProcessServer();
    fn ConnectProcessServer();
    fn DisconnectProcessServer();
    fn GetRunningProcessSystemIds();
    fn GetRunningProcessSystemIdByExecutableName();
    fn GetRunningProcessDescription();
    fn AttachProcess();
    fn CreateProcessA();
    fn CreateProcessAndAttach();
    fn GetProcessOptions();
    fn AddProcessOptions();
    fn RemoveProcessOptions();
    fn SetProcessOptions();
    fn OpenDumpFile();
    fn WriteDumpFile();
    fn ConnectSession();
    fn StartServer();
    fn OutputServers();
    fn TerminateProcesses();
    fn DetachProcesses();
    fn EndSession();
    fn GetExitCode();
    fn DispatchCallbacks();
    fn ExitDispatch();
    fn CreateClient();
    fn GetInputCallbacks();
    fn SetInputCallbacks();
    fn GetOutputCallbacks();
    fn SetOutputCallbacks();
    fn GetOutputMask();
    fn SetOutputMask();
    fn GetOtherOutputMask();
    fn SetOtherOutputMask();
    fn GetOutputWidth();
    fn SetOutputWidth();
    fn GetOutputLinePrefix();
    fn SetOutputLinePrefix();
    fn GetIdentity();
    fn OutputIdentity();
    fn GetEventCallbacks();
    fn SetEventCallbacks();
    fn FlushCallbacks();
    fn WriteDumpFile2();
    fn AddDumpInformationFile();
    fn EndProcessServer();
    fn WaitForProcessServerEnd();
    fn IsKernelDebuggerEnabled();
    fn TerminateCurrentProcess();
    fn DetachCurrentProcess();
    fn AbandonCurrentProcess();
    fn GetRunningProcessSystemIdByExecutableNameWide();
    fn GetRunningProcessDescriptionWide();
    fn CreateProcessWide();
    fn CreateProcessAndAttachWide();
    fn OpenDumpFileWide();
    fn WriteDumpFileWide();
    fn AddDumpInformationFileWide();
    fn GetNumberDumpFiles();
    fn GetDumpFile();
    fn GetDumpFileWide();
}
impl ::windows::core::RuntimeName for IDebugClient4 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugClient4";
}
impl IDebugClient4Vtbl {
    pub const fn new<Impl: IDebugClient4Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugClient4Vtbl {
        unsafe extern "system" fn AttachKernel<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, connectoptions: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AttachKernel(flags, &*(&connectoptions as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetKernelConnectionOptions<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetKernelConnectionOptions(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&optionssize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetKernelConnectionOptions<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetKernelConnectionOptions(&*(&options as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartProcessServer<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, options: super::super::super::Foundation::PSTR, reserved: *const ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).StartProcessServer(flags, &*(&options as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), &*(&reserved as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ConnectProcessServer<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, remoteoptions: super::super::super::Foundation::PSTR, server: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ConnectProcessServer(&*(&remoteoptions as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&server)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DisconnectProcessServer<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).DisconnectProcessServer(server) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRunningProcessSystemIds<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetRunningProcessSystemIds(server, ::core::mem::transmute_copy(&ids), count, ::core::mem::transmute_copy(&actualcount)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableName<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, exename: super::super::super::Foundation::PSTR, flags: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetRunningProcessSystemIdByExecutableName(server, &*(&exename as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRunningProcessDescription<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetRunningProcessDescription(server, systemid, flags, ::core::mem::transmute_copy(&exename), exenamesize, ::core::mem::transmute_copy(&actualexenamesize), ::core::mem::transmute_copy(&description), descriptionsize, ::core::mem::transmute_copy(&actualdescriptionsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AttachProcess<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AttachProcess(server, processid, attachflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateProcessA<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateProcessA(server, &*(&commandline as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), createflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateProcessAndAttach<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateProcessAndAttach(server, &*(&commandline as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), createflags, processid, attachflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessOptions<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetProcessOptions(::core::mem::transmute_copy(&options)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddProcessOptions<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddProcessOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveProcessOptions<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveProcessOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetProcessOptions<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetProcessOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OpenDumpFile<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OpenDumpFile(&*(&dumpfile as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteDumpFile<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteDumpFile(&*(&dumpfile as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), qualifier) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ConnectSession<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, historylimit: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ConnectSession(flags, historylimit) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartServer<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).StartServer(&*(&options as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputServers<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, machine: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputServers(outputcontrol, &*(&machine as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn TerminateProcesses<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).TerminateProcesses() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DetachProcesses<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).DetachProcesses() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndSession<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EndSession(flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExitCode<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, code: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExitCode(::core::mem::transmute_copy(&code)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DispatchCallbacks<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).DispatchCallbacks(timeout) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ExitDispatch<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ExitDispatch(&*(&client as *const <IDebugClient as ::windows::core::Abi>::Abi as *const <IDebugClient as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateClient<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateClient(::core::mem::transmute_copy(&client)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetInputCallbacks<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetInputCallbacks(::core::mem::transmute_copy(&callbacks)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetInputCallbacks<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetInputCallbacks(&*(&callbacks as *const <IDebugInputCallbacks as ::windows::core::Abi>::Abi as *const <IDebugInputCallbacks as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOutputCallbacks<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOutputCallbacks(::core::mem::transmute_copy(&callbacks)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputCallbacks<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOutputCallbacks(&*(&callbacks as *const <IDebugOutputCallbacks as ::windows::core::Abi>::Abi as *const <IDebugOutputCallbacks as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOutputMask<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOutputMask(::core::mem::transmute_copy(&mask)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputMask<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOutputMask(mask) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOtherOutputMask<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOtherOutputMask(&*(&client as *const <IDebugClient as ::windows::core::Abi>::Abi as *const <IDebugClient as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&mask)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOtherOutputMask<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOtherOutputMask(&*(&client as *const <IDebugClient as ::windows::core::Abi>::Abi as *const <IDebugClient as ::windows::core::DefaultType>::DefaultType), mask) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOutputWidth<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, columns: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOutputWidth(::core::mem::transmute_copy(&columns)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputWidth<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, columns: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOutputWidth(columns) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOutputLinePrefix<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOutputLinePrefix(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&prefixsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputLinePrefix<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prefix: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOutputLinePrefix(&*(&prefix as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetIdentity<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetIdentity(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&identitysize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputIdentity<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputIdentity(outputcontrol, flags, &*(&format as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventCallbacks<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventCallbacks(::core::mem::transmute_copy(&callbacks)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEventCallbacks<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetEventCallbacks(&*(&callbacks as *const <IDebugEventCallbacks as ::windows::core::Abi>::Abi as *const <IDebugEventCallbacks as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FlushCallbacks<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).FlushCallbacks() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteDumpFile2<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteDumpFile2(&*(&dumpfile as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), qualifier, formatflags, &*(&comment as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddDumpInformationFile<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, infofile: super::super::super::Foundation::PSTR, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddDumpInformationFile(&*(&infofile as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), r#type) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndProcessServer<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EndProcessServer(server) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WaitForProcessServerEnd<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WaitForProcessServerEnd(timeout) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsKernelDebuggerEnabled<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).IsKernelDebuggerEnabled() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn TerminateCurrentProcess<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).TerminateCurrentProcess() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DetachCurrentProcess<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).DetachCurrentProcess() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AbandonCurrentProcess<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AbandonCurrentProcess() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableNameWide<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, exename: super::super::super::Foundation::PWSTR, flags: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetRunningProcessSystemIdByExecutableNameWide(server, &*(&exename as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRunningProcessDescriptionWide<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PWSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetRunningProcessDescriptionWide(server, systemid, flags, ::core::mem::transmute_copy(&exename), exenamesize, ::core::mem::transmute_copy(&actualexenamesize), ::core::mem::transmute_copy(&description), descriptionsize, ::core::mem::transmute_copy(&actualdescriptionsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateProcessWide<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateProcessWide(server, &*(&commandline as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), createflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateProcessAndAttachWide<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateProcessAndAttachWide(server, &*(&commandline as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), createflags, processid, attachflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OpenDumpFileWide<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, filename: super::super::super::Foundation::PWSTR, filehandle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OpenDumpFileWide(&*(&filename as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), filehandle) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteDumpFileWide<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, filename: super::super::super::Foundation::PWSTR, filehandle: u64, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteDumpFileWide(&*(&filename as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), filehandle, qualifier, formatflags, &*(&comment as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddDumpInformationFileWide<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, filename: super::super::super::Foundation::PWSTR, filehandle: u64, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddDumpInformationFileWide(&*(&filename as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), filehandle, r#type) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberDumpFiles<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberDumpFiles(::core::mem::transmute_copy(&number)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDumpFile<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDumpFile(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&r#type)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDumpFileWide<Impl: IDebugClient4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDumpFileWide(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&r#type)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            base.0,
            base.1,
            base.2,
            base.3,
            ::windows::core::GetRuntimeClassName::<IDebugClient4>,
            base.5,
            AttachKernel::<Impl, OFFSET>,
            GetKernelConnectionOptions::<Impl, OFFSET>,
            SetKernelConnectionOptions::<Impl, OFFSET>,
            StartProcessServer::<Impl, OFFSET>,
            ConnectProcessServer::<Impl, OFFSET>,
            DisconnectProcessServer::<Impl, OFFSET>,
            GetRunningProcessSystemIds::<Impl, OFFSET>,
            GetRunningProcessSystemIdByExecutableName::<Impl, OFFSET>,
            GetRunningProcessDescription::<Impl, OFFSET>,
            AttachProcess::<Impl, OFFSET>,
            CreateProcessA::<Impl, OFFSET>,
            CreateProcessAndAttach::<Impl, OFFSET>,
            GetProcessOptions::<Impl, OFFSET>,
            AddProcessOptions::<Impl, OFFSET>,
            RemoveProcessOptions::<Impl, OFFSET>,
            SetProcessOptions::<Impl, OFFSET>,
            OpenDumpFile::<Impl, OFFSET>,
            WriteDumpFile::<Impl, OFFSET>,
            ConnectSession::<Impl, OFFSET>,
            StartServer::<Impl, OFFSET>,
            OutputServers::<Impl, OFFSET>,
            TerminateProcesses::<Impl, OFFSET>,
            DetachProcesses::<Impl, OFFSET>,
            EndSession::<Impl, OFFSET>,
            GetExitCode::<Impl, OFFSET>,
            DispatchCallbacks::<Impl, OFFSET>,
            ExitDispatch::<Impl, OFFSET>,
            CreateClient::<Impl, OFFSET>,
            GetInputCallbacks::<Impl, OFFSET>,
            SetInputCallbacks::<Impl, OFFSET>,
            GetOutputCallbacks::<Impl, OFFSET>,
            SetOutputCallbacks::<Impl, OFFSET>,
            GetOutputMask::<Impl, OFFSET>,
            SetOutputMask::<Impl, OFFSET>,
            GetOtherOutputMask::<Impl, OFFSET>,
            SetOtherOutputMask::<Impl, OFFSET>,
            GetOutputWidth::<Impl, OFFSET>,
            SetOutputWidth::<Impl, OFFSET>,
            GetOutputLinePrefix::<Impl, OFFSET>,
            SetOutputLinePrefix::<Impl, OFFSET>,
            GetIdentity::<Impl, OFFSET>,
            OutputIdentity::<Impl, OFFSET>,
            GetEventCallbacks::<Impl, OFFSET>,
            SetEventCallbacks::<Impl, OFFSET>,
            FlushCallbacks::<Impl, OFFSET>,
            WriteDumpFile2::<Impl, OFFSET>,
            AddDumpInformationFile::<Impl, OFFSET>,
            EndProcessServer::<Impl, OFFSET>,
            WaitForProcessServerEnd::<Impl, OFFSET>,
            IsKernelDebuggerEnabled::<Impl, OFFSET>,
            TerminateCurrentProcess::<Impl, OFFSET>,
            DetachCurrentProcess::<Impl, OFFSET>,
            AbandonCurrentProcess::<Impl, OFFSET>,
            GetRunningProcessSystemIdByExecutableNameWide::<Impl, OFFSET>,
            GetRunningProcessDescriptionWide::<Impl, OFFSET>,
            CreateProcessWide::<Impl, OFFSET>,
            CreateProcessAndAttachWide::<Impl, OFFSET>,
            OpenDumpFileWide::<Impl, OFFSET>,
            WriteDumpFileWide::<Impl, OFFSET>,
            AddDumpInformationFileWide::<Impl, OFFSET>,
            GetNumberDumpFiles::<Impl, OFFSET>,
            GetDumpFile::<Impl, OFFSET>,
            GetDumpFileWide::<Impl, OFFSET>,
        )
    }
}
pub trait IDebugClient5Impl: Sized {
    fn AttachKernel();
    fn GetKernelConnectionOptions();
    fn SetKernelConnectionOptions();
    fn StartProcessServer();
    fn ConnectProcessServer();
    fn DisconnectProcessServer();
    fn GetRunningProcessSystemIds();
    fn GetRunningProcessSystemIdByExecutableName();
    fn GetRunningProcessDescription();
    fn AttachProcess();
    fn CreateProcessA();
    fn CreateProcessAndAttach();
    fn GetProcessOptions();
    fn AddProcessOptions();
    fn RemoveProcessOptions();
    fn SetProcessOptions();
    fn OpenDumpFile();
    fn WriteDumpFile();
    fn ConnectSession();
    fn StartServer();
    fn OutputServers();
    fn TerminateProcesses();
    fn DetachProcesses();
    fn EndSession();
    fn GetExitCode();
    fn DispatchCallbacks();
    fn ExitDispatch();
    fn CreateClient();
    fn GetInputCallbacks();
    fn SetInputCallbacks();
    fn GetOutputCallbacks();
    fn SetOutputCallbacks();
    fn GetOutputMask();
    fn SetOutputMask();
    fn GetOtherOutputMask();
    fn SetOtherOutputMask();
    fn GetOutputWidth();
    fn SetOutputWidth();
    fn GetOutputLinePrefix();
    fn SetOutputLinePrefix();
    fn GetIdentity();
    fn OutputIdentity();
    fn GetEventCallbacks();
    fn SetEventCallbacks();
    fn FlushCallbacks();
    fn WriteDumpFile2();
    fn AddDumpInformationFile();
    fn EndProcessServer();
    fn WaitForProcessServerEnd();
    fn IsKernelDebuggerEnabled();
    fn TerminateCurrentProcess();
    fn DetachCurrentProcess();
    fn AbandonCurrentProcess();
    fn GetRunningProcessSystemIdByExecutableNameWide();
    fn GetRunningProcessDescriptionWide();
    fn CreateProcessWide();
    fn CreateProcessAndAttachWide();
    fn OpenDumpFileWide();
    fn WriteDumpFileWide();
    fn AddDumpInformationFileWide();
    fn GetNumberDumpFiles();
    fn GetDumpFile();
    fn GetDumpFileWide();
    fn AttachKernelWide();
    fn GetKernelConnectionOptionsWide();
    fn SetKernelConnectionOptionsWide();
    fn StartProcessServerWide();
    fn ConnectProcessServerWide();
    fn StartServerWide();
    fn OutputServersWide();
    fn GetOutputCallbacksWide();
    fn SetOutputCallbacksWide();
    fn GetOutputLinePrefixWide();
    fn SetOutputLinePrefixWide();
    fn GetIdentityWide();
    fn OutputIdentityWide();
    fn GetEventCallbacksWide();
    fn SetEventCallbacksWide();
    fn CreateProcess2();
    fn CreateProcess2Wide();
    fn CreateProcessAndAttach2();
    fn CreateProcessAndAttach2Wide();
    fn PushOutputLinePrefix();
    fn PushOutputLinePrefixWide();
    fn PopOutputLinePrefix();
    fn GetNumberInputCallbacks();
    fn GetNumberOutputCallbacks();
    fn GetNumberEventCallbacks();
    fn GetQuitLockString();
    fn SetQuitLockString();
    fn GetQuitLockStringWide();
    fn SetQuitLockStringWide();
}
impl ::windows::core::RuntimeName for IDebugClient5 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugClient5";
}
impl IDebugClient5Vtbl {
    pub const fn new<Impl: IDebugClient5Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugClient5Vtbl {
        unsafe extern "system" fn AttachKernel<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, connectoptions: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AttachKernel(flags, &*(&connectoptions as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetKernelConnectionOptions<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetKernelConnectionOptions(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&optionssize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetKernelConnectionOptions<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetKernelConnectionOptions(&*(&options as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartProcessServer<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, options: super::super::super::Foundation::PSTR, reserved: *const ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).StartProcessServer(flags, &*(&options as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), &*(&reserved as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ConnectProcessServer<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, remoteoptions: super::super::super::Foundation::PSTR, server: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ConnectProcessServer(&*(&remoteoptions as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&server)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DisconnectProcessServer<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).DisconnectProcessServer(server) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRunningProcessSystemIds<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetRunningProcessSystemIds(server, ::core::mem::transmute_copy(&ids), count, ::core::mem::transmute_copy(&actualcount)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableName<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, exename: super::super::super::Foundation::PSTR, flags: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetRunningProcessSystemIdByExecutableName(server, &*(&exename as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRunningProcessDescription<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetRunningProcessDescription(server, systemid, flags, ::core::mem::transmute_copy(&exename), exenamesize, ::core::mem::transmute_copy(&actualexenamesize), ::core::mem::transmute_copy(&description), descriptionsize, ::core::mem::transmute_copy(&actualdescriptionsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AttachProcess<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AttachProcess(server, processid, attachflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateProcessA<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateProcessA(server, &*(&commandline as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), createflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateProcessAndAttach<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateProcessAndAttach(server, &*(&commandline as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), createflags, processid, attachflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessOptions<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetProcessOptions(::core::mem::transmute_copy(&options)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddProcessOptions<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddProcessOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveProcessOptions<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveProcessOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetProcessOptions<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetProcessOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OpenDumpFile<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OpenDumpFile(&*(&dumpfile as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteDumpFile<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteDumpFile(&*(&dumpfile as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), qualifier) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ConnectSession<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, historylimit: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ConnectSession(flags, historylimit) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartServer<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).StartServer(&*(&options as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputServers<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, machine: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputServers(outputcontrol, &*(&machine as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn TerminateProcesses<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).TerminateProcesses() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DetachProcesses<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).DetachProcesses() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndSession<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EndSession(flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExitCode<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, code: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExitCode(::core::mem::transmute_copy(&code)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DispatchCallbacks<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).DispatchCallbacks(timeout) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ExitDispatch<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ExitDispatch(&*(&client as *const <IDebugClient as ::windows::core::Abi>::Abi as *const <IDebugClient as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateClient<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateClient(::core::mem::transmute_copy(&client)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetInputCallbacks<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetInputCallbacks(::core::mem::transmute_copy(&callbacks)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetInputCallbacks<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetInputCallbacks(&*(&callbacks as *const <IDebugInputCallbacks as ::windows::core::Abi>::Abi as *const <IDebugInputCallbacks as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOutputCallbacks<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOutputCallbacks(::core::mem::transmute_copy(&callbacks)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputCallbacks<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOutputCallbacks(&*(&callbacks as *const <IDebugOutputCallbacks as ::windows::core::Abi>::Abi as *const <IDebugOutputCallbacks as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOutputMask<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOutputMask(::core::mem::transmute_copy(&mask)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputMask<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOutputMask(mask) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOtherOutputMask<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOtherOutputMask(&*(&client as *const <IDebugClient as ::windows::core::Abi>::Abi as *const <IDebugClient as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&mask)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOtherOutputMask<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOtherOutputMask(&*(&client as *const <IDebugClient as ::windows::core::Abi>::Abi as *const <IDebugClient as ::windows::core::DefaultType>::DefaultType), mask) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOutputWidth<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, columns: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOutputWidth(::core::mem::transmute_copy(&columns)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputWidth<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, columns: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOutputWidth(columns) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOutputLinePrefix<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOutputLinePrefix(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&prefixsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputLinePrefix<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prefix: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOutputLinePrefix(&*(&prefix as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetIdentity<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetIdentity(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&identitysize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputIdentity<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputIdentity(outputcontrol, flags, &*(&format as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventCallbacks<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventCallbacks(::core::mem::transmute_copy(&callbacks)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEventCallbacks<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetEventCallbacks(&*(&callbacks as *const <IDebugEventCallbacks as ::windows::core::Abi>::Abi as *const <IDebugEventCallbacks as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FlushCallbacks<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).FlushCallbacks() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteDumpFile2<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteDumpFile2(&*(&dumpfile as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), qualifier, formatflags, &*(&comment as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddDumpInformationFile<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, infofile: super::super::super::Foundation::PSTR, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddDumpInformationFile(&*(&infofile as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), r#type) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndProcessServer<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EndProcessServer(server) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WaitForProcessServerEnd<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WaitForProcessServerEnd(timeout) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsKernelDebuggerEnabled<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).IsKernelDebuggerEnabled() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn TerminateCurrentProcess<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).TerminateCurrentProcess() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DetachCurrentProcess<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).DetachCurrentProcess() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AbandonCurrentProcess<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AbandonCurrentProcess() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableNameWide<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, exename: super::super::super::Foundation::PWSTR, flags: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetRunningProcessSystemIdByExecutableNameWide(server, &*(&exename as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRunningProcessDescriptionWide<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PWSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetRunningProcessDescriptionWide(server, systemid, flags, ::core::mem::transmute_copy(&exename), exenamesize, ::core::mem::transmute_copy(&actualexenamesize), ::core::mem::transmute_copy(&description), descriptionsize, ::core::mem::transmute_copy(&actualdescriptionsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateProcessWide<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateProcessWide(server, &*(&commandline as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), createflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateProcessAndAttachWide<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateProcessAndAttachWide(server, &*(&commandline as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), createflags, processid, attachflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OpenDumpFileWide<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, filename: super::super::super::Foundation::PWSTR, filehandle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OpenDumpFileWide(&*(&filename as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), filehandle) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteDumpFileWide<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, filename: super::super::super::Foundation::PWSTR, filehandle: u64, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteDumpFileWide(&*(&filename as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), filehandle, qualifier, formatflags, &*(&comment as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddDumpInformationFileWide<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, filename: super::super::super::Foundation::PWSTR, filehandle: u64, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddDumpInformationFileWide(&*(&filename as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), filehandle, r#type) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberDumpFiles<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberDumpFiles(::core::mem::transmute_copy(&number)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDumpFile<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDumpFile(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&r#type)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDumpFileWide<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDumpFileWide(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&r#type)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AttachKernelWide<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, connectoptions: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AttachKernelWide(flags, &*(&connectoptions as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetKernelConnectionOptionsWide<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetKernelConnectionOptionsWide(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&optionssize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetKernelConnectionOptionsWide<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetKernelConnectionOptionsWide(&*(&options as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartProcessServerWide<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, options: super::super::super::Foundation::PWSTR, reserved: *const ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).StartProcessServerWide(flags, &*(&options as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&reserved as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ConnectProcessServerWide<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, remoteoptions: super::super::super::Foundation::PWSTR, server: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ConnectProcessServerWide(&*(&remoteoptions as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&server)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartServerWide<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).StartServerWide(&*(&options as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputServersWide<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, machine: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputServersWide(outputcontrol, &*(&machine as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOutputCallbacksWide<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOutputCallbacksWide(::core::mem::transmute_copy(&callbacks)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputCallbacksWide<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOutputCallbacksWide(&*(&callbacks as *const <IDebugOutputCallbacksWide as ::windows::core::Abi>::Abi as *const <IDebugOutputCallbacksWide as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOutputLinePrefixWide<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOutputLinePrefixWide(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&prefixsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputLinePrefixWide<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prefix: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOutputLinePrefixWide(&*(&prefix as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetIdentityWide<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetIdentityWide(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&identitysize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputIdentityWide<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputIdentityWide(outputcontrol, flags, &*(&format as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventCallbacksWide<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventCallbacksWide(::core::mem::transmute_copy(&callbacks)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEventCallbacksWide<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetEventCallbacksWide(&*(&callbacks as *const <IDebugEventCallbacksWide as ::windows::core::Abi>::Abi as *const <IDebugEventCallbacksWide as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateProcess2<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PSTR, environment: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateProcess2(
                server,
                &*(&commandline as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&optionsbuffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType),
                optionsbuffersize,
                &*(&initialdirectory as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&environment as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateProcess2Wide<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PWSTR, environment: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateProcess2Wide(
                server,
                &*(&commandline as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&optionsbuffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType),
                optionsbuffersize,
                &*(&initialdirectory as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&environment as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateProcessAndAttach2<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PSTR, environment: super::super::super::Foundation::PSTR, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateProcessAndAttach2(
                server,
                &*(&commandline as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&optionsbuffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType),
                optionsbuffersize,
                &*(&initialdirectory as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&environment as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType),
                processid,
                attachflags,
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateProcessAndAttach2Wide<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PWSTR, environment: super::super::super::Foundation::PWSTR, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateProcessAndAttach2Wide(
                server,
                &*(&commandline as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&optionsbuffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType),
                optionsbuffersize,
                &*(&initialdirectory as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&environment as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                processid,
                attachflags,
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn PushOutputLinePrefix<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newprefix: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).PushOutputLinePrefix(&*(&newprefix as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn PushOutputLinePrefixWide<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newprefix: super::super::super::Foundation::PWSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).PushOutputLinePrefixWide(&*(&newprefix as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn PopOutputLinePrefix<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).PopOutputLinePrefix(handle) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberInputCallbacks<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberInputCallbacks(::core::mem::transmute_copy(&count)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberOutputCallbacks<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberOutputCallbacks(::core::mem::transmute_copy(&count)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberEventCallbacks<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, eventflags: u32, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberEventCallbacks(eventflags, ::core::mem::transmute_copy(&count)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetQuitLockString<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetQuitLockString(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&stringsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetQuitLockString<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, string: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetQuitLockString(&*(&string as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetQuitLockStringWide<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetQuitLockStringWide(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&stringsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetQuitLockStringWide<Impl: IDebugClient5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, string: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetQuitLockStringWide(&*(&string as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            base.0,
            base.1,
            base.2,
            base.3,
            ::windows::core::GetRuntimeClassName::<IDebugClient5>,
            base.5,
            AttachKernel::<Impl, OFFSET>,
            GetKernelConnectionOptions::<Impl, OFFSET>,
            SetKernelConnectionOptions::<Impl, OFFSET>,
            StartProcessServer::<Impl, OFFSET>,
            ConnectProcessServer::<Impl, OFFSET>,
            DisconnectProcessServer::<Impl, OFFSET>,
            GetRunningProcessSystemIds::<Impl, OFFSET>,
            GetRunningProcessSystemIdByExecutableName::<Impl, OFFSET>,
            GetRunningProcessDescription::<Impl, OFFSET>,
            AttachProcess::<Impl, OFFSET>,
            CreateProcessA::<Impl, OFFSET>,
            CreateProcessAndAttach::<Impl, OFFSET>,
            GetProcessOptions::<Impl, OFFSET>,
            AddProcessOptions::<Impl, OFFSET>,
            RemoveProcessOptions::<Impl, OFFSET>,
            SetProcessOptions::<Impl, OFFSET>,
            OpenDumpFile::<Impl, OFFSET>,
            WriteDumpFile::<Impl, OFFSET>,
            ConnectSession::<Impl, OFFSET>,
            StartServer::<Impl, OFFSET>,
            OutputServers::<Impl, OFFSET>,
            TerminateProcesses::<Impl, OFFSET>,
            DetachProcesses::<Impl, OFFSET>,
            EndSession::<Impl, OFFSET>,
            GetExitCode::<Impl, OFFSET>,
            DispatchCallbacks::<Impl, OFFSET>,
            ExitDispatch::<Impl, OFFSET>,
            CreateClient::<Impl, OFFSET>,
            GetInputCallbacks::<Impl, OFFSET>,
            SetInputCallbacks::<Impl, OFFSET>,
            GetOutputCallbacks::<Impl, OFFSET>,
            SetOutputCallbacks::<Impl, OFFSET>,
            GetOutputMask::<Impl, OFFSET>,
            SetOutputMask::<Impl, OFFSET>,
            GetOtherOutputMask::<Impl, OFFSET>,
            SetOtherOutputMask::<Impl, OFFSET>,
            GetOutputWidth::<Impl, OFFSET>,
            SetOutputWidth::<Impl, OFFSET>,
            GetOutputLinePrefix::<Impl, OFFSET>,
            SetOutputLinePrefix::<Impl, OFFSET>,
            GetIdentity::<Impl, OFFSET>,
            OutputIdentity::<Impl, OFFSET>,
            GetEventCallbacks::<Impl, OFFSET>,
            SetEventCallbacks::<Impl, OFFSET>,
            FlushCallbacks::<Impl, OFFSET>,
            WriteDumpFile2::<Impl, OFFSET>,
            AddDumpInformationFile::<Impl, OFFSET>,
            EndProcessServer::<Impl, OFFSET>,
            WaitForProcessServerEnd::<Impl, OFFSET>,
            IsKernelDebuggerEnabled::<Impl, OFFSET>,
            TerminateCurrentProcess::<Impl, OFFSET>,
            DetachCurrentProcess::<Impl, OFFSET>,
            AbandonCurrentProcess::<Impl, OFFSET>,
            GetRunningProcessSystemIdByExecutableNameWide::<Impl, OFFSET>,
            GetRunningProcessDescriptionWide::<Impl, OFFSET>,
            CreateProcessWide::<Impl, OFFSET>,
            CreateProcessAndAttachWide::<Impl, OFFSET>,
            OpenDumpFileWide::<Impl, OFFSET>,
            WriteDumpFileWide::<Impl, OFFSET>,
            AddDumpInformationFileWide::<Impl, OFFSET>,
            GetNumberDumpFiles::<Impl, OFFSET>,
            GetDumpFile::<Impl, OFFSET>,
            GetDumpFileWide::<Impl, OFFSET>,
            AttachKernelWide::<Impl, OFFSET>,
            GetKernelConnectionOptionsWide::<Impl, OFFSET>,
            SetKernelConnectionOptionsWide::<Impl, OFFSET>,
            StartProcessServerWide::<Impl, OFFSET>,
            ConnectProcessServerWide::<Impl, OFFSET>,
            StartServerWide::<Impl, OFFSET>,
            OutputServersWide::<Impl, OFFSET>,
            GetOutputCallbacksWide::<Impl, OFFSET>,
            SetOutputCallbacksWide::<Impl, OFFSET>,
            GetOutputLinePrefixWide::<Impl, OFFSET>,
            SetOutputLinePrefixWide::<Impl, OFFSET>,
            GetIdentityWide::<Impl, OFFSET>,
            OutputIdentityWide::<Impl, OFFSET>,
            GetEventCallbacksWide::<Impl, OFFSET>,
            SetEventCallbacksWide::<Impl, OFFSET>,
            CreateProcess2::<Impl, OFFSET>,
            CreateProcess2Wide::<Impl, OFFSET>,
            CreateProcessAndAttach2::<Impl, OFFSET>,
            CreateProcessAndAttach2Wide::<Impl, OFFSET>,
            PushOutputLinePrefix::<Impl, OFFSET>,
            PushOutputLinePrefixWide::<Impl, OFFSET>,
            PopOutputLinePrefix::<Impl, OFFSET>,
            GetNumberInputCallbacks::<Impl, OFFSET>,
            GetNumberOutputCallbacks::<Impl, OFFSET>,
            GetNumberEventCallbacks::<Impl, OFFSET>,
            GetQuitLockString::<Impl, OFFSET>,
            SetQuitLockString::<Impl, OFFSET>,
            GetQuitLockStringWide::<Impl, OFFSET>,
            SetQuitLockStringWide::<Impl, OFFSET>,
        )
    }
}
pub trait IDebugClient6Impl: Sized {
    fn AttachKernel();
    fn GetKernelConnectionOptions();
    fn SetKernelConnectionOptions();
    fn StartProcessServer();
    fn ConnectProcessServer();
    fn DisconnectProcessServer();
    fn GetRunningProcessSystemIds();
    fn GetRunningProcessSystemIdByExecutableName();
    fn GetRunningProcessDescription();
    fn AttachProcess();
    fn CreateProcessA();
    fn CreateProcessAndAttach();
    fn GetProcessOptions();
    fn AddProcessOptions();
    fn RemoveProcessOptions();
    fn SetProcessOptions();
    fn OpenDumpFile();
    fn WriteDumpFile();
    fn ConnectSession();
    fn StartServer();
    fn OutputServers();
    fn TerminateProcesses();
    fn DetachProcesses();
    fn EndSession();
    fn GetExitCode();
    fn DispatchCallbacks();
    fn ExitDispatch();
    fn CreateClient();
    fn GetInputCallbacks();
    fn SetInputCallbacks();
    fn GetOutputCallbacks();
    fn SetOutputCallbacks();
    fn GetOutputMask();
    fn SetOutputMask();
    fn GetOtherOutputMask();
    fn SetOtherOutputMask();
    fn GetOutputWidth();
    fn SetOutputWidth();
    fn GetOutputLinePrefix();
    fn SetOutputLinePrefix();
    fn GetIdentity();
    fn OutputIdentity();
    fn GetEventCallbacks();
    fn SetEventCallbacks();
    fn FlushCallbacks();
    fn WriteDumpFile2();
    fn AddDumpInformationFile();
    fn EndProcessServer();
    fn WaitForProcessServerEnd();
    fn IsKernelDebuggerEnabled();
    fn TerminateCurrentProcess();
    fn DetachCurrentProcess();
    fn AbandonCurrentProcess();
    fn GetRunningProcessSystemIdByExecutableNameWide();
    fn GetRunningProcessDescriptionWide();
    fn CreateProcessWide();
    fn CreateProcessAndAttachWide();
    fn OpenDumpFileWide();
    fn WriteDumpFileWide();
    fn AddDumpInformationFileWide();
    fn GetNumberDumpFiles();
    fn GetDumpFile();
    fn GetDumpFileWide();
    fn AttachKernelWide();
    fn GetKernelConnectionOptionsWide();
    fn SetKernelConnectionOptionsWide();
    fn StartProcessServerWide();
    fn ConnectProcessServerWide();
    fn StartServerWide();
    fn OutputServersWide();
    fn GetOutputCallbacksWide();
    fn SetOutputCallbacksWide();
    fn GetOutputLinePrefixWide();
    fn SetOutputLinePrefixWide();
    fn GetIdentityWide();
    fn OutputIdentityWide();
    fn GetEventCallbacksWide();
    fn SetEventCallbacksWide();
    fn CreateProcess2();
    fn CreateProcess2Wide();
    fn CreateProcessAndAttach2();
    fn CreateProcessAndAttach2Wide();
    fn PushOutputLinePrefix();
    fn PushOutputLinePrefixWide();
    fn PopOutputLinePrefix();
    fn GetNumberInputCallbacks();
    fn GetNumberOutputCallbacks();
    fn GetNumberEventCallbacks();
    fn GetQuitLockString();
    fn SetQuitLockString();
    fn GetQuitLockStringWide();
    fn SetQuitLockStringWide();
    fn SetEventContextCallbacks();
}
impl ::windows::core::RuntimeName for IDebugClient6 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugClient6";
}
impl IDebugClient6Vtbl {
    pub const fn new<Impl: IDebugClient6Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugClient6Vtbl {
        unsafe extern "system" fn AttachKernel<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, connectoptions: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AttachKernel(flags, &*(&connectoptions as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetKernelConnectionOptions<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetKernelConnectionOptions(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&optionssize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetKernelConnectionOptions<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetKernelConnectionOptions(&*(&options as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartProcessServer<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, options: super::super::super::Foundation::PSTR, reserved: *const ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).StartProcessServer(flags, &*(&options as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), &*(&reserved as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ConnectProcessServer<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, remoteoptions: super::super::super::Foundation::PSTR, server: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ConnectProcessServer(&*(&remoteoptions as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&server)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DisconnectProcessServer<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).DisconnectProcessServer(server) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRunningProcessSystemIds<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetRunningProcessSystemIds(server, ::core::mem::transmute_copy(&ids), count, ::core::mem::transmute_copy(&actualcount)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableName<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, exename: super::super::super::Foundation::PSTR, flags: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetRunningProcessSystemIdByExecutableName(server, &*(&exename as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRunningProcessDescription<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetRunningProcessDescription(server, systemid, flags, ::core::mem::transmute_copy(&exename), exenamesize, ::core::mem::transmute_copy(&actualexenamesize), ::core::mem::transmute_copy(&description), descriptionsize, ::core::mem::transmute_copy(&actualdescriptionsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AttachProcess<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AttachProcess(server, processid, attachflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateProcessA<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateProcessA(server, &*(&commandline as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), createflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateProcessAndAttach<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateProcessAndAttach(server, &*(&commandline as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), createflags, processid, attachflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessOptions<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetProcessOptions(::core::mem::transmute_copy(&options)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddProcessOptions<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddProcessOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveProcessOptions<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveProcessOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetProcessOptions<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetProcessOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OpenDumpFile<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OpenDumpFile(&*(&dumpfile as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteDumpFile<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteDumpFile(&*(&dumpfile as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), qualifier) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ConnectSession<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, historylimit: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ConnectSession(flags, historylimit) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartServer<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).StartServer(&*(&options as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputServers<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, machine: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputServers(outputcontrol, &*(&machine as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn TerminateProcesses<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).TerminateProcesses() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DetachProcesses<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).DetachProcesses() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndSession<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EndSession(flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExitCode<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, code: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExitCode(::core::mem::transmute_copy(&code)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DispatchCallbacks<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).DispatchCallbacks(timeout) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ExitDispatch<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ExitDispatch(&*(&client as *const <IDebugClient as ::windows::core::Abi>::Abi as *const <IDebugClient as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateClient<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateClient(::core::mem::transmute_copy(&client)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetInputCallbacks<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetInputCallbacks(::core::mem::transmute_copy(&callbacks)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetInputCallbacks<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetInputCallbacks(&*(&callbacks as *const <IDebugInputCallbacks as ::windows::core::Abi>::Abi as *const <IDebugInputCallbacks as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOutputCallbacks<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOutputCallbacks(::core::mem::transmute_copy(&callbacks)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputCallbacks<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOutputCallbacks(&*(&callbacks as *const <IDebugOutputCallbacks as ::windows::core::Abi>::Abi as *const <IDebugOutputCallbacks as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOutputMask<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOutputMask(::core::mem::transmute_copy(&mask)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputMask<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOutputMask(mask) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOtherOutputMask<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOtherOutputMask(&*(&client as *const <IDebugClient as ::windows::core::Abi>::Abi as *const <IDebugClient as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&mask)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOtherOutputMask<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOtherOutputMask(&*(&client as *const <IDebugClient as ::windows::core::Abi>::Abi as *const <IDebugClient as ::windows::core::DefaultType>::DefaultType), mask) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOutputWidth<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, columns: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOutputWidth(::core::mem::transmute_copy(&columns)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputWidth<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, columns: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOutputWidth(columns) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOutputLinePrefix<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOutputLinePrefix(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&prefixsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputLinePrefix<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prefix: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOutputLinePrefix(&*(&prefix as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetIdentity<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetIdentity(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&identitysize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputIdentity<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputIdentity(outputcontrol, flags, &*(&format as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventCallbacks<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventCallbacks(::core::mem::transmute_copy(&callbacks)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEventCallbacks<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetEventCallbacks(&*(&callbacks as *const <IDebugEventCallbacks as ::windows::core::Abi>::Abi as *const <IDebugEventCallbacks as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FlushCallbacks<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).FlushCallbacks() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteDumpFile2<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteDumpFile2(&*(&dumpfile as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), qualifier, formatflags, &*(&comment as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddDumpInformationFile<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, infofile: super::super::super::Foundation::PSTR, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddDumpInformationFile(&*(&infofile as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), r#type) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndProcessServer<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EndProcessServer(server) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WaitForProcessServerEnd<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WaitForProcessServerEnd(timeout) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsKernelDebuggerEnabled<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).IsKernelDebuggerEnabled() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn TerminateCurrentProcess<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).TerminateCurrentProcess() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DetachCurrentProcess<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).DetachCurrentProcess() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AbandonCurrentProcess<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AbandonCurrentProcess() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableNameWide<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, exename: super::super::super::Foundation::PWSTR, flags: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetRunningProcessSystemIdByExecutableNameWide(server, &*(&exename as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRunningProcessDescriptionWide<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PWSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetRunningProcessDescriptionWide(server, systemid, flags, ::core::mem::transmute_copy(&exename), exenamesize, ::core::mem::transmute_copy(&actualexenamesize), ::core::mem::transmute_copy(&description), descriptionsize, ::core::mem::transmute_copy(&actualdescriptionsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateProcessWide<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateProcessWide(server, &*(&commandline as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), createflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateProcessAndAttachWide<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateProcessAndAttachWide(server, &*(&commandline as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), createflags, processid, attachflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OpenDumpFileWide<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, filename: super::super::super::Foundation::PWSTR, filehandle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OpenDumpFileWide(&*(&filename as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), filehandle) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteDumpFileWide<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, filename: super::super::super::Foundation::PWSTR, filehandle: u64, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteDumpFileWide(&*(&filename as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), filehandle, qualifier, formatflags, &*(&comment as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddDumpInformationFileWide<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, filename: super::super::super::Foundation::PWSTR, filehandle: u64, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddDumpInformationFileWide(&*(&filename as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), filehandle, r#type) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberDumpFiles<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberDumpFiles(::core::mem::transmute_copy(&number)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDumpFile<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDumpFile(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&r#type)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDumpFileWide<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDumpFileWide(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&r#type)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AttachKernelWide<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, connectoptions: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AttachKernelWide(flags, &*(&connectoptions as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetKernelConnectionOptionsWide<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetKernelConnectionOptionsWide(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&optionssize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetKernelConnectionOptionsWide<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetKernelConnectionOptionsWide(&*(&options as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartProcessServerWide<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, options: super::super::super::Foundation::PWSTR, reserved: *const ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).StartProcessServerWide(flags, &*(&options as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&reserved as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ConnectProcessServerWide<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, remoteoptions: super::super::super::Foundation::PWSTR, server: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ConnectProcessServerWide(&*(&remoteoptions as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&server)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartServerWide<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).StartServerWide(&*(&options as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputServersWide<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, machine: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputServersWide(outputcontrol, &*(&machine as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOutputCallbacksWide<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOutputCallbacksWide(::core::mem::transmute_copy(&callbacks)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputCallbacksWide<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOutputCallbacksWide(&*(&callbacks as *const <IDebugOutputCallbacksWide as ::windows::core::Abi>::Abi as *const <IDebugOutputCallbacksWide as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOutputLinePrefixWide<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOutputLinePrefixWide(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&prefixsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputLinePrefixWide<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prefix: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOutputLinePrefixWide(&*(&prefix as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetIdentityWide<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetIdentityWide(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&identitysize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputIdentityWide<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputIdentityWide(outputcontrol, flags, &*(&format as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventCallbacksWide<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventCallbacksWide(::core::mem::transmute_copy(&callbacks)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEventCallbacksWide<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetEventCallbacksWide(&*(&callbacks as *const <IDebugEventCallbacksWide as ::windows::core::Abi>::Abi as *const <IDebugEventCallbacksWide as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateProcess2<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PSTR, environment: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateProcess2(
                server,
                &*(&commandline as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&optionsbuffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType),
                optionsbuffersize,
                &*(&initialdirectory as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&environment as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateProcess2Wide<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PWSTR, environment: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateProcess2Wide(
                server,
                &*(&commandline as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&optionsbuffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType),
                optionsbuffersize,
                &*(&initialdirectory as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&environment as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateProcessAndAttach2<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PSTR, environment: super::super::super::Foundation::PSTR, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateProcessAndAttach2(
                server,
                &*(&commandline as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&optionsbuffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType),
                optionsbuffersize,
                &*(&initialdirectory as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&environment as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType),
                processid,
                attachflags,
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateProcessAndAttach2Wide<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PWSTR, environment: super::super::super::Foundation::PWSTR, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateProcessAndAttach2Wide(
                server,
                &*(&commandline as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&optionsbuffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType),
                optionsbuffersize,
                &*(&initialdirectory as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&environment as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                processid,
                attachflags,
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn PushOutputLinePrefix<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newprefix: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).PushOutputLinePrefix(&*(&newprefix as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn PushOutputLinePrefixWide<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newprefix: super::super::super::Foundation::PWSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).PushOutputLinePrefixWide(&*(&newprefix as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn PopOutputLinePrefix<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).PopOutputLinePrefix(handle) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberInputCallbacks<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberInputCallbacks(::core::mem::transmute_copy(&count)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberOutputCallbacks<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberOutputCallbacks(::core::mem::transmute_copy(&count)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberEventCallbacks<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, eventflags: u32, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberEventCallbacks(eventflags, ::core::mem::transmute_copy(&count)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetQuitLockString<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetQuitLockString(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&stringsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetQuitLockString<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, string: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetQuitLockString(&*(&string as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetQuitLockStringWide<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetQuitLockStringWide(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&stringsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetQuitLockStringWide<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, string: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetQuitLockStringWide(&*(&string as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEventContextCallbacks<Impl: IDebugClient6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetEventContextCallbacks(&*(&callbacks as *const <IDebugEventContextCallbacks as ::windows::core::Abi>::Abi as *const <IDebugEventContextCallbacks as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            base.0,
            base.1,
            base.2,
            base.3,
            ::windows::core::GetRuntimeClassName::<IDebugClient6>,
            base.5,
            AttachKernel::<Impl, OFFSET>,
            GetKernelConnectionOptions::<Impl, OFFSET>,
            SetKernelConnectionOptions::<Impl, OFFSET>,
            StartProcessServer::<Impl, OFFSET>,
            ConnectProcessServer::<Impl, OFFSET>,
            DisconnectProcessServer::<Impl, OFFSET>,
            GetRunningProcessSystemIds::<Impl, OFFSET>,
            GetRunningProcessSystemIdByExecutableName::<Impl, OFFSET>,
            GetRunningProcessDescription::<Impl, OFFSET>,
            AttachProcess::<Impl, OFFSET>,
            CreateProcessA::<Impl, OFFSET>,
            CreateProcessAndAttach::<Impl, OFFSET>,
            GetProcessOptions::<Impl, OFFSET>,
            AddProcessOptions::<Impl, OFFSET>,
            RemoveProcessOptions::<Impl, OFFSET>,
            SetProcessOptions::<Impl, OFFSET>,
            OpenDumpFile::<Impl, OFFSET>,
            WriteDumpFile::<Impl, OFFSET>,
            ConnectSession::<Impl, OFFSET>,
            StartServer::<Impl, OFFSET>,
            OutputServers::<Impl, OFFSET>,
            TerminateProcesses::<Impl, OFFSET>,
            DetachProcesses::<Impl, OFFSET>,
            EndSession::<Impl, OFFSET>,
            GetExitCode::<Impl, OFFSET>,
            DispatchCallbacks::<Impl, OFFSET>,
            ExitDispatch::<Impl, OFFSET>,
            CreateClient::<Impl, OFFSET>,
            GetInputCallbacks::<Impl, OFFSET>,
            SetInputCallbacks::<Impl, OFFSET>,
            GetOutputCallbacks::<Impl, OFFSET>,
            SetOutputCallbacks::<Impl, OFFSET>,
            GetOutputMask::<Impl, OFFSET>,
            SetOutputMask::<Impl, OFFSET>,
            GetOtherOutputMask::<Impl, OFFSET>,
            SetOtherOutputMask::<Impl, OFFSET>,
            GetOutputWidth::<Impl, OFFSET>,
            SetOutputWidth::<Impl, OFFSET>,
            GetOutputLinePrefix::<Impl, OFFSET>,
            SetOutputLinePrefix::<Impl, OFFSET>,
            GetIdentity::<Impl, OFFSET>,
            OutputIdentity::<Impl, OFFSET>,
            GetEventCallbacks::<Impl, OFFSET>,
            SetEventCallbacks::<Impl, OFFSET>,
            FlushCallbacks::<Impl, OFFSET>,
            WriteDumpFile2::<Impl, OFFSET>,
            AddDumpInformationFile::<Impl, OFFSET>,
            EndProcessServer::<Impl, OFFSET>,
            WaitForProcessServerEnd::<Impl, OFFSET>,
            IsKernelDebuggerEnabled::<Impl, OFFSET>,
            TerminateCurrentProcess::<Impl, OFFSET>,
            DetachCurrentProcess::<Impl, OFFSET>,
            AbandonCurrentProcess::<Impl, OFFSET>,
            GetRunningProcessSystemIdByExecutableNameWide::<Impl, OFFSET>,
            GetRunningProcessDescriptionWide::<Impl, OFFSET>,
            CreateProcessWide::<Impl, OFFSET>,
            CreateProcessAndAttachWide::<Impl, OFFSET>,
            OpenDumpFileWide::<Impl, OFFSET>,
            WriteDumpFileWide::<Impl, OFFSET>,
            AddDumpInformationFileWide::<Impl, OFFSET>,
            GetNumberDumpFiles::<Impl, OFFSET>,
            GetDumpFile::<Impl, OFFSET>,
            GetDumpFileWide::<Impl, OFFSET>,
            AttachKernelWide::<Impl, OFFSET>,
            GetKernelConnectionOptionsWide::<Impl, OFFSET>,
            SetKernelConnectionOptionsWide::<Impl, OFFSET>,
            StartProcessServerWide::<Impl, OFFSET>,
            ConnectProcessServerWide::<Impl, OFFSET>,
            StartServerWide::<Impl, OFFSET>,
            OutputServersWide::<Impl, OFFSET>,
            GetOutputCallbacksWide::<Impl, OFFSET>,
            SetOutputCallbacksWide::<Impl, OFFSET>,
            GetOutputLinePrefixWide::<Impl, OFFSET>,
            SetOutputLinePrefixWide::<Impl, OFFSET>,
            GetIdentityWide::<Impl, OFFSET>,
            OutputIdentityWide::<Impl, OFFSET>,
            GetEventCallbacksWide::<Impl, OFFSET>,
            SetEventCallbacksWide::<Impl, OFFSET>,
            CreateProcess2::<Impl, OFFSET>,
            CreateProcess2Wide::<Impl, OFFSET>,
            CreateProcessAndAttach2::<Impl, OFFSET>,
            CreateProcessAndAttach2Wide::<Impl, OFFSET>,
            PushOutputLinePrefix::<Impl, OFFSET>,
            PushOutputLinePrefixWide::<Impl, OFFSET>,
            PopOutputLinePrefix::<Impl, OFFSET>,
            GetNumberInputCallbacks::<Impl, OFFSET>,
            GetNumberOutputCallbacks::<Impl, OFFSET>,
            GetNumberEventCallbacks::<Impl, OFFSET>,
            GetQuitLockString::<Impl, OFFSET>,
            SetQuitLockString::<Impl, OFFSET>,
            GetQuitLockStringWide::<Impl, OFFSET>,
            SetQuitLockStringWide::<Impl, OFFSET>,
            SetEventContextCallbacks::<Impl, OFFSET>,
        )
    }
}
pub trait IDebugClient7Impl: Sized {
    fn AttachKernel();
    fn GetKernelConnectionOptions();
    fn SetKernelConnectionOptions();
    fn StartProcessServer();
    fn ConnectProcessServer();
    fn DisconnectProcessServer();
    fn GetRunningProcessSystemIds();
    fn GetRunningProcessSystemIdByExecutableName();
    fn GetRunningProcessDescription();
    fn AttachProcess();
    fn CreateProcessA();
    fn CreateProcessAndAttach();
    fn GetProcessOptions();
    fn AddProcessOptions();
    fn RemoveProcessOptions();
    fn SetProcessOptions();
    fn OpenDumpFile();
    fn WriteDumpFile();
    fn ConnectSession();
    fn StartServer();
    fn OutputServers();
    fn TerminateProcesses();
    fn DetachProcesses();
    fn EndSession();
    fn GetExitCode();
    fn DispatchCallbacks();
    fn ExitDispatch();
    fn CreateClient();
    fn GetInputCallbacks();
    fn SetInputCallbacks();
    fn GetOutputCallbacks();
    fn SetOutputCallbacks();
    fn GetOutputMask();
    fn SetOutputMask();
    fn GetOtherOutputMask();
    fn SetOtherOutputMask();
    fn GetOutputWidth();
    fn SetOutputWidth();
    fn GetOutputLinePrefix();
    fn SetOutputLinePrefix();
    fn GetIdentity();
    fn OutputIdentity();
    fn GetEventCallbacks();
    fn SetEventCallbacks();
    fn FlushCallbacks();
    fn WriteDumpFile2();
    fn AddDumpInformationFile();
    fn EndProcessServer();
    fn WaitForProcessServerEnd();
    fn IsKernelDebuggerEnabled();
    fn TerminateCurrentProcess();
    fn DetachCurrentProcess();
    fn AbandonCurrentProcess();
    fn GetRunningProcessSystemIdByExecutableNameWide();
    fn GetRunningProcessDescriptionWide();
    fn CreateProcessWide();
    fn CreateProcessAndAttachWide();
    fn OpenDumpFileWide();
    fn WriteDumpFileWide();
    fn AddDumpInformationFileWide();
    fn GetNumberDumpFiles();
    fn GetDumpFile();
    fn GetDumpFileWide();
    fn AttachKernelWide();
    fn GetKernelConnectionOptionsWide();
    fn SetKernelConnectionOptionsWide();
    fn StartProcessServerWide();
    fn ConnectProcessServerWide();
    fn StartServerWide();
    fn OutputServersWide();
    fn GetOutputCallbacksWide();
    fn SetOutputCallbacksWide();
    fn GetOutputLinePrefixWide();
    fn SetOutputLinePrefixWide();
    fn GetIdentityWide();
    fn OutputIdentityWide();
    fn GetEventCallbacksWide();
    fn SetEventCallbacksWide();
    fn CreateProcess2();
    fn CreateProcess2Wide();
    fn CreateProcessAndAttach2();
    fn CreateProcessAndAttach2Wide();
    fn PushOutputLinePrefix();
    fn PushOutputLinePrefixWide();
    fn PopOutputLinePrefix();
    fn GetNumberInputCallbacks();
    fn GetNumberOutputCallbacks();
    fn GetNumberEventCallbacks();
    fn GetQuitLockString();
    fn SetQuitLockString();
    fn GetQuitLockStringWide();
    fn SetQuitLockStringWide();
    fn SetEventContextCallbacks();
    fn SetClientContext();
}
impl ::windows::core::RuntimeName for IDebugClient7 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugClient7";
}
impl IDebugClient7Vtbl {
    pub const fn new<Impl: IDebugClient7Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugClient7Vtbl {
        unsafe extern "system" fn AttachKernel<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, connectoptions: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AttachKernel(flags, &*(&connectoptions as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetKernelConnectionOptions<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetKernelConnectionOptions(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&optionssize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetKernelConnectionOptions<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetKernelConnectionOptions(&*(&options as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartProcessServer<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, options: super::super::super::Foundation::PSTR, reserved: *const ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).StartProcessServer(flags, &*(&options as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), &*(&reserved as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ConnectProcessServer<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, remoteoptions: super::super::super::Foundation::PSTR, server: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ConnectProcessServer(&*(&remoteoptions as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&server)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DisconnectProcessServer<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).DisconnectProcessServer(server) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRunningProcessSystemIds<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetRunningProcessSystemIds(server, ::core::mem::transmute_copy(&ids), count, ::core::mem::transmute_copy(&actualcount)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableName<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, exename: super::super::super::Foundation::PSTR, flags: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetRunningProcessSystemIdByExecutableName(server, &*(&exename as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRunningProcessDescription<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetRunningProcessDescription(server, systemid, flags, ::core::mem::transmute_copy(&exename), exenamesize, ::core::mem::transmute_copy(&actualexenamesize), ::core::mem::transmute_copy(&description), descriptionsize, ::core::mem::transmute_copy(&actualdescriptionsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AttachProcess<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AttachProcess(server, processid, attachflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateProcessA<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateProcessA(server, &*(&commandline as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), createflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateProcessAndAttach<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateProcessAndAttach(server, &*(&commandline as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), createflags, processid, attachflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessOptions<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetProcessOptions(::core::mem::transmute_copy(&options)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddProcessOptions<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddProcessOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveProcessOptions<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveProcessOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetProcessOptions<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetProcessOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OpenDumpFile<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OpenDumpFile(&*(&dumpfile as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteDumpFile<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteDumpFile(&*(&dumpfile as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), qualifier) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ConnectSession<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, historylimit: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ConnectSession(flags, historylimit) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartServer<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).StartServer(&*(&options as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputServers<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, machine: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputServers(outputcontrol, &*(&machine as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn TerminateProcesses<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).TerminateProcesses() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DetachProcesses<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).DetachProcesses() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndSession<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EndSession(flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExitCode<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, code: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExitCode(::core::mem::transmute_copy(&code)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DispatchCallbacks<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).DispatchCallbacks(timeout) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ExitDispatch<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ExitDispatch(&*(&client as *const <IDebugClient as ::windows::core::Abi>::Abi as *const <IDebugClient as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateClient<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateClient(::core::mem::transmute_copy(&client)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetInputCallbacks<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetInputCallbacks(::core::mem::transmute_copy(&callbacks)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetInputCallbacks<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetInputCallbacks(&*(&callbacks as *const <IDebugInputCallbacks as ::windows::core::Abi>::Abi as *const <IDebugInputCallbacks as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOutputCallbacks<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOutputCallbacks(::core::mem::transmute_copy(&callbacks)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputCallbacks<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOutputCallbacks(&*(&callbacks as *const <IDebugOutputCallbacks as ::windows::core::Abi>::Abi as *const <IDebugOutputCallbacks as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOutputMask<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOutputMask(::core::mem::transmute_copy(&mask)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputMask<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOutputMask(mask) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOtherOutputMask<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOtherOutputMask(&*(&client as *const <IDebugClient as ::windows::core::Abi>::Abi as *const <IDebugClient as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&mask)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOtherOutputMask<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOtherOutputMask(&*(&client as *const <IDebugClient as ::windows::core::Abi>::Abi as *const <IDebugClient as ::windows::core::DefaultType>::DefaultType), mask) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOutputWidth<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, columns: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOutputWidth(::core::mem::transmute_copy(&columns)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputWidth<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, columns: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOutputWidth(columns) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOutputLinePrefix<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOutputLinePrefix(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&prefixsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputLinePrefix<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prefix: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOutputLinePrefix(&*(&prefix as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetIdentity<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetIdentity(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&identitysize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputIdentity<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputIdentity(outputcontrol, flags, &*(&format as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventCallbacks<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventCallbacks(::core::mem::transmute_copy(&callbacks)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEventCallbacks<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetEventCallbacks(&*(&callbacks as *const <IDebugEventCallbacks as ::windows::core::Abi>::Abi as *const <IDebugEventCallbacks as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FlushCallbacks<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).FlushCallbacks() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteDumpFile2<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteDumpFile2(&*(&dumpfile as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), qualifier, formatflags, &*(&comment as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddDumpInformationFile<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, infofile: super::super::super::Foundation::PSTR, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddDumpInformationFile(&*(&infofile as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), r#type) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndProcessServer<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EndProcessServer(server) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WaitForProcessServerEnd<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WaitForProcessServerEnd(timeout) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsKernelDebuggerEnabled<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).IsKernelDebuggerEnabled() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn TerminateCurrentProcess<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).TerminateCurrentProcess() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DetachCurrentProcess<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).DetachCurrentProcess() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AbandonCurrentProcess<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AbandonCurrentProcess() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableNameWide<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, exename: super::super::super::Foundation::PWSTR, flags: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetRunningProcessSystemIdByExecutableNameWide(server, &*(&exename as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRunningProcessDescriptionWide<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PWSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetRunningProcessDescriptionWide(server, systemid, flags, ::core::mem::transmute_copy(&exename), exenamesize, ::core::mem::transmute_copy(&actualexenamesize), ::core::mem::transmute_copy(&description), descriptionsize, ::core::mem::transmute_copy(&actualdescriptionsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateProcessWide<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateProcessWide(server, &*(&commandline as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), createflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateProcessAndAttachWide<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateProcessAndAttachWide(server, &*(&commandline as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), createflags, processid, attachflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OpenDumpFileWide<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, filename: super::super::super::Foundation::PWSTR, filehandle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OpenDumpFileWide(&*(&filename as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), filehandle) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteDumpFileWide<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, filename: super::super::super::Foundation::PWSTR, filehandle: u64, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteDumpFileWide(&*(&filename as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), filehandle, qualifier, formatflags, &*(&comment as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddDumpInformationFileWide<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, filename: super::super::super::Foundation::PWSTR, filehandle: u64, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddDumpInformationFileWide(&*(&filename as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), filehandle, r#type) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberDumpFiles<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberDumpFiles(::core::mem::transmute_copy(&number)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDumpFile<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDumpFile(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&r#type)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDumpFileWide<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDumpFileWide(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&r#type)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AttachKernelWide<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, connectoptions: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AttachKernelWide(flags, &*(&connectoptions as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetKernelConnectionOptionsWide<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetKernelConnectionOptionsWide(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&optionssize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetKernelConnectionOptionsWide<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetKernelConnectionOptionsWide(&*(&options as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartProcessServerWide<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, options: super::super::super::Foundation::PWSTR, reserved: *const ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).StartProcessServerWide(flags, &*(&options as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&reserved as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ConnectProcessServerWide<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, remoteoptions: super::super::super::Foundation::PWSTR, server: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ConnectProcessServerWide(&*(&remoteoptions as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&server)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartServerWide<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).StartServerWide(&*(&options as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputServersWide<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, machine: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputServersWide(outputcontrol, &*(&machine as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOutputCallbacksWide<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOutputCallbacksWide(::core::mem::transmute_copy(&callbacks)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputCallbacksWide<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOutputCallbacksWide(&*(&callbacks as *const <IDebugOutputCallbacksWide as ::windows::core::Abi>::Abi as *const <IDebugOutputCallbacksWide as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOutputLinePrefixWide<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOutputLinePrefixWide(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&prefixsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputLinePrefixWide<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prefix: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOutputLinePrefixWide(&*(&prefix as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetIdentityWide<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetIdentityWide(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&identitysize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputIdentityWide<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputIdentityWide(outputcontrol, flags, &*(&format as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventCallbacksWide<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventCallbacksWide(::core::mem::transmute_copy(&callbacks)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEventCallbacksWide<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetEventCallbacksWide(&*(&callbacks as *const <IDebugEventCallbacksWide as ::windows::core::Abi>::Abi as *const <IDebugEventCallbacksWide as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateProcess2<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PSTR, environment: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateProcess2(
                server,
                &*(&commandline as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&optionsbuffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType),
                optionsbuffersize,
                &*(&initialdirectory as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&environment as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateProcess2Wide<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PWSTR, environment: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateProcess2Wide(
                server,
                &*(&commandline as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&optionsbuffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType),
                optionsbuffersize,
                &*(&initialdirectory as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&environment as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateProcessAndAttach2<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PSTR, environment: super::super::super::Foundation::PSTR, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateProcessAndAttach2(
                server,
                &*(&commandline as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&optionsbuffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType),
                optionsbuffersize,
                &*(&initialdirectory as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&environment as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType),
                processid,
                attachflags,
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateProcessAndAttach2Wide<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PWSTR, environment: super::super::super::Foundation::PWSTR, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateProcessAndAttach2Wide(
                server,
                &*(&commandline as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&optionsbuffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType),
                optionsbuffersize,
                &*(&initialdirectory as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&environment as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                processid,
                attachflags,
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn PushOutputLinePrefix<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newprefix: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).PushOutputLinePrefix(&*(&newprefix as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn PushOutputLinePrefixWide<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newprefix: super::super::super::Foundation::PWSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).PushOutputLinePrefixWide(&*(&newprefix as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn PopOutputLinePrefix<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).PopOutputLinePrefix(handle) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberInputCallbacks<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberInputCallbacks(::core::mem::transmute_copy(&count)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberOutputCallbacks<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberOutputCallbacks(::core::mem::transmute_copy(&count)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberEventCallbacks<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, eventflags: u32, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberEventCallbacks(eventflags, ::core::mem::transmute_copy(&count)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetQuitLockString<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetQuitLockString(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&stringsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetQuitLockString<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, string: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetQuitLockString(&*(&string as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetQuitLockStringWide<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetQuitLockStringWide(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&stringsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetQuitLockStringWide<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, string: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetQuitLockStringWide(&*(&string as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEventContextCallbacks<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetEventContextCallbacks(&*(&callbacks as *const <IDebugEventContextCallbacks as ::windows::core::Abi>::Abi as *const <IDebugEventContextCallbacks as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetClientContext<Impl: IDebugClient7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetClientContext(&*(&context as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), contextsize) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            base.0,
            base.1,
            base.2,
            base.3,
            ::windows::core::GetRuntimeClassName::<IDebugClient7>,
            base.5,
            AttachKernel::<Impl, OFFSET>,
            GetKernelConnectionOptions::<Impl, OFFSET>,
            SetKernelConnectionOptions::<Impl, OFFSET>,
            StartProcessServer::<Impl, OFFSET>,
            ConnectProcessServer::<Impl, OFFSET>,
            DisconnectProcessServer::<Impl, OFFSET>,
            GetRunningProcessSystemIds::<Impl, OFFSET>,
            GetRunningProcessSystemIdByExecutableName::<Impl, OFFSET>,
            GetRunningProcessDescription::<Impl, OFFSET>,
            AttachProcess::<Impl, OFFSET>,
            CreateProcessA::<Impl, OFFSET>,
            CreateProcessAndAttach::<Impl, OFFSET>,
            GetProcessOptions::<Impl, OFFSET>,
            AddProcessOptions::<Impl, OFFSET>,
            RemoveProcessOptions::<Impl, OFFSET>,
            SetProcessOptions::<Impl, OFFSET>,
            OpenDumpFile::<Impl, OFFSET>,
            WriteDumpFile::<Impl, OFFSET>,
            ConnectSession::<Impl, OFFSET>,
            StartServer::<Impl, OFFSET>,
            OutputServers::<Impl, OFFSET>,
            TerminateProcesses::<Impl, OFFSET>,
            DetachProcesses::<Impl, OFFSET>,
            EndSession::<Impl, OFFSET>,
            GetExitCode::<Impl, OFFSET>,
            DispatchCallbacks::<Impl, OFFSET>,
            ExitDispatch::<Impl, OFFSET>,
            CreateClient::<Impl, OFFSET>,
            GetInputCallbacks::<Impl, OFFSET>,
            SetInputCallbacks::<Impl, OFFSET>,
            GetOutputCallbacks::<Impl, OFFSET>,
            SetOutputCallbacks::<Impl, OFFSET>,
            GetOutputMask::<Impl, OFFSET>,
            SetOutputMask::<Impl, OFFSET>,
            GetOtherOutputMask::<Impl, OFFSET>,
            SetOtherOutputMask::<Impl, OFFSET>,
            GetOutputWidth::<Impl, OFFSET>,
            SetOutputWidth::<Impl, OFFSET>,
            GetOutputLinePrefix::<Impl, OFFSET>,
            SetOutputLinePrefix::<Impl, OFFSET>,
            GetIdentity::<Impl, OFFSET>,
            OutputIdentity::<Impl, OFFSET>,
            GetEventCallbacks::<Impl, OFFSET>,
            SetEventCallbacks::<Impl, OFFSET>,
            FlushCallbacks::<Impl, OFFSET>,
            WriteDumpFile2::<Impl, OFFSET>,
            AddDumpInformationFile::<Impl, OFFSET>,
            EndProcessServer::<Impl, OFFSET>,
            WaitForProcessServerEnd::<Impl, OFFSET>,
            IsKernelDebuggerEnabled::<Impl, OFFSET>,
            TerminateCurrentProcess::<Impl, OFFSET>,
            DetachCurrentProcess::<Impl, OFFSET>,
            AbandonCurrentProcess::<Impl, OFFSET>,
            GetRunningProcessSystemIdByExecutableNameWide::<Impl, OFFSET>,
            GetRunningProcessDescriptionWide::<Impl, OFFSET>,
            CreateProcessWide::<Impl, OFFSET>,
            CreateProcessAndAttachWide::<Impl, OFFSET>,
            OpenDumpFileWide::<Impl, OFFSET>,
            WriteDumpFileWide::<Impl, OFFSET>,
            AddDumpInformationFileWide::<Impl, OFFSET>,
            GetNumberDumpFiles::<Impl, OFFSET>,
            GetDumpFile::<Impl, OFFSET>,
            GetDumpFileWide::<Impl, OFFSET>,
            AttachKernelWide::<Impl, OFFSET>,
            GetKernelConnectionOptionsWide::<Impl, OFFSET>,
            SetKernelConnectionOptionsWide::<Impl, OFFSET>,
            StartProcessServerWide::<Impl, OFFSET>,
            ConnectProcessServerWide::<Impl, OFFSET>,
            StartServerWide::<Impl, OFFSET>,
            OutputServersWide::<Impl, OFFSET>,
            GetOutputCallbacksWide::<Impl, OFFSET>,
            SetOutputCallbacksWide::<Impl, OFFSET>,
            GetOutputLinePrefixWide::<Impl, OFFSET>,
            SetOutputLinePrefixWide::<Impl, OFFSET>,
            GetIdentityWide::<Impl, OFFSET>,
            OutputIdentityWide::<Impl, OFFSET>,
            GetEventCallbacksWide::<Impl, OFFSET>,
            SetEventCallbacksWide::<Impl, OFFSET>,
            CreateProcess2::<Impl, OFFSET>,
            CreateProcess2Wide::<Impl, OFFSET>,
            CreateProcessAndAttach2::<Impl, OFFSET>,
            CreateProcessAndAttach2Wide::<Impl, OFFSET>,
            PushOutputLinePrefix::<Impl, OFFSET>,
            PushOutputLinePrefixWide::<Impl, OFFSET>,
            PopOutputLinePrefix::<Impl, OFFSET>,
            GetNumberInputCallbacks::<Impl, OFFSET>,
            GetNumberOutputCallbacks::<Impl, OFFSET>,
            GetNumberEventCallbacks::<Impl, OFFSET>,
            GetQuitLockString::<Impl, OFFSET>,
            SetQuitLockString::<Impl, OFFSET>,
            GetQuitLockStringWide::<Impl, OFFSET>,
            SetQuitLockStringWide::<Impl, OFFSET>,
            SetEventContextCallbacks::<Impl, OFFSET>,
            SetClientContext::<Impl, OFFSET>,
        )
    }
}
pub trait IDebugClient8Impl: Sized {
    fn AttachKernel();
    fn GetKernelConnectionOptions();
    fn SetKernelConnectionOptions();
    fn StartProcessServer();
    fn ConnectProcessServer();
    fn DisconnectProcessServer();
    fn GetRunningProcessSystemIds();
    fn GetRunningProcessSystemIdByExecutableName();
    fn GetRunningProcessDescription();
    fn AttachProcess();
    fn CreateProcessA();
    fn CreateProcessAndAttach();
    fn GetProcessOptions();
    fn AddProcessOptions();
    fn RemoveProcessOptions();
    fn SetProcessOptions();
    fn OpenDumpFile();
    fn WriteDumpFile();
    fn ConnectSession();
    fn StartServer();
    fn OutputServers();
    fn TerminateProcesses();
    fn DetachProcesses();
    fn EndSession();
    fn GetExitCode();
    fn DispatchCallbacks();
    fn ExitDispatch();
    fn CreateClient();
    fn GetInputCallbacks();
    fn SetInputCallbacks();
    fn GetOutputCallbacks();
    fn SetOutputCallbacks();
    fn GetOutputMask();
    fn SetOutputMask();
    fn GetOtherOutputMask();
    fn SetOtherOutputMask();
    fn GetOutputWidth();
    fn SetOutputWidth();
    fn GetOutputLinePrefix();
    fn SetOutputLinePrefix();
    fn GetIdentity();
    fn OutputIdentity();
    fn GetEventCallbacks();
    fn SetEventCallbacks();
    fn FlushCallbacks();
    fn WriteDumpFile2();
    fn AddDumpInformationFile();
    fn EndProcessServer();
    fn WaitForProcessServerEnd();
    fn IsKernelDebuggerEnabled();
    fn TerminateCurrentProcess();
    fn DetachCurrentProcess();
    fn AbandonCurrentProcess();
    fn GetRunningProcessSystemIdByExecutableNameWide();
    fn GetRunningProcessDescriptionWide();
    fn CreateProcessWide();
    fn CreateProcessAndAttachWide();
    fn OpenDumpFileWide();
    fn WriteDumpFileWide();
    fn AddDumpInformationFileWide();
    fn GetNumberDumpFiles();
    fn GetDumpFile();
    fn GetDumpFileWide();
    fn AttachKernelWide();
    fn GetKernelConnectionOptionsWide();
    fn SetKernelConnectionOptionsWide();
    fn StartProcessServerWide();
    fn ConnectProcessServerWide();
    fn StartServerWide();
    fn OutputServersWide();
    fn GetOutputCallbacksWide();
    fn SetOutputCallbacksWide();
    fn GetOutputLinePrefixWide();
    fn SetOutputLinePrefixWide();
    fn GetIdentityWide();
    fn OutputIdentityWide();
    fn GetEventCallbacksWide();
    fn SetEventCallbacksWide();
    fn CreateProcess2();
    fn CreateProcess2Wide();
    fn CreateProcessAndAttach2();
    fn CreateProcessAndAttach2Wide();
    fn PushOutputLinePrefix();
    fn PushOutputLinePrefixWide();
    fn PopOutputLinePrefix();
    fn GetNumberInputCallbacks();
    fn GetNumberOutputCallbacks();
    fn GetNumberEventCallbacks();
    fn GetQuitLockString();
    fn SetQuitLockString();
    fn GetQuitLockStringWide();
    fn SetQuitLockStringWide();
    fn SetEventContextCallbacks();
    fn SetClientContext();
    fn OpenDumpFileWide2();
}
impl ::windows::core::RuntimeName for IDebugClient8 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugClient8";
}
impl IDebugClient8Vtbl {
    pub const fn new<Impl: IDebugClient8Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugClient8Vtbl {
        unsafe extern "system" fn AttachKernel<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, connectoptions: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AttachKernel(flags, &*(&connectoptions as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetKernelConnectionOptions<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetKernelConnectionOptions(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&optionssize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetKernelConnectionOptions<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetKernelConnectionOptions(&*(&options as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartProcessServer<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, options: super::super::super::Foundation::PSTR, reserved: *const ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).StartProcessServer(flags, &*(&options as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), &*(&reserved as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ConnectProcessServer<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, remoteoptions: super::super::super::Foundation::PSTR, server: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ConnectProcessServer(&*(&remoteoptions as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&server)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DisconnectProcessServer<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).DisconnectProcessServer(server) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRunningProcessSystemIds<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetRunningProcessSystemIds(server, ::core::mem::transmute_copy(&ids), count, ::core::mem::transmute_copy(&actualcount)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableName<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, exename: super::super::super::Foundation::PSTR, flags: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetRunningProcessSystemIdByExecutableName(server, &*(&exename as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRunningProcessDescription<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetRunningProcessDescription(server, systemid, flags, ::core::mem::transmute_copy(&exename), exenamesize, ::core::mem::transmute_copy(&actualexenamesize), ::core::mem::transmute_copy(&description), descriptionsize, ::core::mem::transmute_copy(&actualdescriptionsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AttachProcess<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AttachProcess(server, processid, attachflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateProcessA<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateProcessA(server, &*(&commandline as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), createflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateProcessAndAttach<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateProcessAndAttach(server, &*(&commandline as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), createflags, processid, attachflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessOptions<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetProcessOptions(::core::mem::transmute_copy(&options)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddProcessOptions<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddProcessOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveProcessOptions<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveProcessOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetProcessOptions<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetProcessOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OpenDumpFile<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OpenDumpFile(&*(&dumpfile as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteDumpFile<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteDumpFile(&*(&dumpfile as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), qualifier) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ConnectSession<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, historylimit: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ConnectSession(flags, historylimit) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartServer<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).StartServer(&*(&options as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputServers<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, machine: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputServers(outputcontrol, &*(&machine as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn TerminateProcesses<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).TerminateProcesses() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DetachProcesses<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).DetachProcesses() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndSession<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EndSession(flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExitCode<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, code: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExitCode(::core::mem::transmute_copy(&code)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DispatchCallbacks<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).DispatchCallbacks(timeout) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ExitDispatch<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ExitDispatch(&*(&client as *const <IDebugClient as ::windows::core::Abi>::Abi as *const <IDebugClient as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateClient<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateClient(::core::mem::transmute_copy(&client)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetInputCallbacks<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetInputCallbacks(::core::mem::transmute_copy(&callbacks)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetInputCallbacks<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetInputCallbacks(&*(&callbacks as *const <IDebugInputCallbacks as ::windows::core::Abi>::Abi as *const <IDebugInputCallbacks as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOutputCallbacks<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOutputCallbacks(::core::mem::transmute_copy(&callbacks)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputCallbacks<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOutputCallbacks(&*(&callbacks as *const <IDebugOutputCallbacks as ::windows::core::Abi>::Abi as *const <IDebugOutputCallbacks as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOutputMask<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOutputMask(::core::mem::transmute_copy(&mask)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputMask<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOutputMask(mask) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOtherOutputMask<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOtherOutputMask(&*(&client as *const <IDebugClient as ::windows::core::Abi>::Abi as *const <IDebugClient as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&mask)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOtherOutputMask<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: ::windows::core::RawPtr, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOtherOutputMask(&*(&client as *const <IDebugClient as ::windows::core::Abi>::Abi as *const <IDebugClient as ::windows::core::DefaultType>::DefaultType), mask) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOutputWidth<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, columns: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOutputWidth(::core::mem::transmute_copy(&columns)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputWidth<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, columns: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOutputWidth(columns) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOutputLinePrefix<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOutputLinePrefix(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&prefixsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputLinePrefix<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prefix: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOutputLinePrefix(&*(&prefix as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetIdentity<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetIdentity(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&identitysize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputIdentity<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputIdentity(outputcontrol, flags, &*(&format as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventCallbacks<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventCallbacks(::core::mem::transmute_copy(&callbacks)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEventCallbacks<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetEventCallbacks(&*(&callbacks as *const <IDebugEventCallbacks as ::windows::core::Abi>::Abi as *const <IDebugEventCallbacks as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FlushCallbacks<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).FlushCallbacks() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteDumpFile2<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dumpfile: super::super::super::Foundation::PSTR, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteDumpFile2(&*(&dumpfile as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), qualifier, formatflags, &*(&comment as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddDumpInformationFile<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, infofile: super::super::super::Foundation::PSTR, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddDumpInformationFile(&*(&infofile as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), r#type) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndProcessServer<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EndProcessServer(server) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WaitForProcessServerEnd<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WaitForProcessServerEnd(timeout) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsKernelDebuggerEnabled<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).IsKernelDebuggerEnabled() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn TerminateCurrentProcess<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).TerminateCurrentProcess() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DetachCurrentProcess<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).DetachCurrentProcess() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AbandonCurrentProcess<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AbandonCurrentProcess() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableNameWide<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, exename: super::super::super::Foundation::PWSTR, flags: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetRunningProcessSystemIdByExecutableNameWide(server, &*(&exename as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRunningProcessDescriptionWide<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: super::super::super::Foundation::PWSTR, exenamesize: u32, actualexenamesize: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetRunningProcessDescriptionWide(server, systemid, flags, ::core::mem::transmute_copy(&exename), exenamesize, ::core::mem::transmute_copy(&actualexenamesize), ::core::mem::transmute_copy(&description), descriptionsize, ::core::mem::transmute_copy(&actualdescriptionsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateProcessWide<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateProcessWide(server, &*(&commandline as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), createflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateProcessAndAttachWide<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateProcessAndAttachWide(server, &*(&commandline as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), createflags, processid, attachflags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OpenDumpFileWide<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, filename: super::super::super::Foundation::PWSTR, filehandle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OpenDumpFileWide(&*(&filename as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), filehandle) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteDumpFileWide<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, filename: super::super::super::Foundation::PWSTR, filehandle: u64, qualifier: u32, formatflags: u32, comment: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteDumpFileWide(&*(&filename as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), filehandle, qualifier, formatflags, &*(&comment as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddDumpInformationFileWide<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, filename: super::super::super::Foundation::PWSTR, filehandle: u64, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddDumpInformationFileWide(&*(&filename as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), filehandle, r#type) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberDumpFiles<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberDumpFiles(::core::mem::transmute_copy(&number)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDumpFile<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDumpFile(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&r#type)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDumpFileWide<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDumpFileWide(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&r#type)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AttachKernelWide<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, connectoptions: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AttachKernelWide(flags, &*(&connectoptions as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetKernelConnectionOptionsWide<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, optionssize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetKernelConnectionOptionsWide(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&optionssize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetKernelConnectionOptionsWide<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetKernelConnectionOptionsWide(&*(&options as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartProcessServerWide<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, options: super::super::super::Foundation::PWSTR, reserved: *const ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).StartProcessServerWide(flags, &*(&options as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&reserved as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ConnectProcessServerWide<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, remoteoptions: super::super::super::Foundation::PWSTR, server: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ConnectProcessServerWide(&*(&remoteoptions as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&server)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartServerWide<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).StartServerWide(&*(&options as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputServersWide<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, machine: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputServersWide(outputcontrol, &*(&machine as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOutputCallbacksWide<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOutputCallbacksWide(::core::mem::transmute_copy(&callbacks)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputCallbacksWide<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOutputCallbacksWide(&*(&callbacks as *const <IDebugOutputCallbacksWide as ::windows::core::Abi>::Abi as *const <IDebugOutputCallbacksWide as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOutputLinePrefixWide<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOutputLinePrefixWide(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&prefixsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetOutputLinePrefixWide<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prefix: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetOutputLinePrefixWide(&*(&prefix as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetIdentityWide<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, identitysize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetIdentityWide(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&identitysize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputIdentityWide<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputIdentityWide(outputcontrol, flags, &*(&format as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventCallbacksWide<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventCallbacksWide(::core::mem::transmute_copy(&callbacks)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEventCallbacksWide<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetEventCallbacksWide(&*(&callbacks as *const <IDebugEventCallbacksWide as ::windows::core::Abi>::Abi as *const <IDebugEventCallbacksWide as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateProcess2<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PSTR, environment: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateProcess2(
                server,
                &*(&commandline as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&optionsbuffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType),
                optionsbuffersize,
                &*(&initialdirectory as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&environment as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateProcess2Wide<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PWSTR, environment: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateProcess2Wide(
                server,
                &*(&commandline as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&optionsbuffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType),
                optionsbuffersize,
                &*(&initialdirectory as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&environment as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateProcessAndAttach2<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PSTR, environment: super::super::super::Foundation::PSTR, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateProcessAndAttach2(
                server,
                &*(&commandline as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&optionsbuffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType),
                optionsbuffersize,
                &*(&initialdirectory as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&environment as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType),
                processid,
                attachflags,
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateProcessAndAttach2Wide<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: super::super::super::Foundation::PWSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: super::super::super::Foundation::PWSTR, environment: super::super::super::Foundation::PWSTR, processid: u32, attachflags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateProcessAndAttach2Wide(
                server,
                &*(&commandline as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&optionsbuffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType),
                optionsbuffersize,
                &*(&initialdirectory as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&environment as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                processid,
                attachflags,
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn PushOutputLinePrefix<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newprefix: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).PushOutputLinePrefix(&*(&newprefix as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn PushOutputLinePrefixWide<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newprefix: super::super::super::Foundation::PWSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).PushOutputLinePrefixWide(&*(&newprefix as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn PopOutputLinePrefix<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).PopOutputLinePrefix(handle) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberInputCallbacks<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberInputCallbacks(::core::mem::transmute_copy(&count)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberOutputCallbacks<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberOutputCallbacks(::core::mem::transmute_copy(&count)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberEventCallbacks<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, eventflags: u32, count: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberEventCallbacks(eventflags, ::core::mem::transmute_copy(&count)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetQuitLockString<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetQuitLockString(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&stringsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetQuitLockString<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, string: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetQuitLockString(&*(&string as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetQuitLockStringWide<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetQuitLockStringWide(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&stringsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetQuitLockStringWide<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, string: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetQuitLockStringWide(&*(&string as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEventContextCallbacks<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetEventContextCallbacks(&*(&callbacks as *const <IDebugEventContextCallbacks as ::windows::core::Abi>::Abi as *const <IDebugEventContextCallbacks as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetClientContext<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetClientContext(&*(&context as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), contextsize) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OpenDumpFileWide2<Impl: IDebugClient8Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, filename: super::super::super::Foundation::PWSTR, filehandle: u64, alternatearch: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OpenDumpFileWide2(&*(&filename as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), filehandle, alternatearch) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            base.0,
            base.1,
            base.2,
            base.3,
            ::windows::core::GetRuntimeClassName::<IDebugClient8>,
            base.5,
            AttachKernel::<Impl, OFFSET>,
            GetKernelConnectionOptions::<Impl, OFFSET>,
            SetKernelConnectionOptions::<Impl, OFFSET>,
            StartProcessServer::<Impl, OFFSET>,
            ConnectProcessServer::<Impl, OFFSET>,
            DisconnectProcessServer::<Impl, OFFSET>,
            GetRunningProcessSystemIds::<Impl, OFFSET>,
            GetRunningProcessSystemIdByExecutableName::<Impl, OFFSET>,
            GetRunningProcessDescription::<Impl, OFFSET>,
            AttachProcess::<Impl, OFFSET>,
            CreateProcessA::<Impl, OFFSET>,
            CreateProcessAndAttach::<Impl, OFFSET>,
            GetProcessOptions::<Impl, OFFSET>,
            AddProcessOptions::<Impl, OFFSET>,
            RemoveProcessOptions::<Impl, OFFSET>,
            SetProcessOptions::<Impl, OFFSET>,
            OpenDumpFile::<Impl, OFFSET>,
            WriteDumpFile::<Impl, OFFSET>,
            ConnectSession::<Impl, OFFSET>,
            StartServer::<Impl, OFFSET>,
            OutputServers::<Impl, OFFSET>,
            TerminateProcesses::<Impl, OFFSET>,
            DetachProcesses::<Impl, OFFSET>,
            EndSession::<Impl, OFFSET>,
            GetExitCode::<Impl, OFFSET>,
            DispatchCallbacks::<Impl, OFFSET>,
            ExitDispatch::<Impl, OFFSET>,
            CreateClient::<Impl, OFFSET>,
            GetInputCallbacks::<Impl, OFFSET>,
            SetInputCallbacks::<Impl, OFFSET>,
            GetOutputCallbacks::<Impl, OFFSET>,
            SetOutputCallbacks::<Impl, OFFSET>,
            GetOutputMask::<Impl, OFFSET>,
            SetOutputMask::<Impl, OFFSET>,
            GetOtherOutputMask::<Impl, OFFSET>,
            SetOtherOutputMask::<Impl, OFFSET>,
            GetOutputWidth::<Impl, OFFSET>,
            SetOutputWidth::<Impl, OFFSET>,
            GetOutputLinePrefix::<Impl, OFFSET>,
            SetOutputLinePrefix::<Impl, OFFSET>,
            GetIdentity::<Impl, OFFSET>,
            OutputIdentity::<Impl, OFFSET>,
            GetEventCallbacks::<Impl, OFFSET>,
            SetEventCallbacks::<Impl, OFFSET>,
            FlushCallbacks::<Impl, OFFSET>,
            WriteDumpFile2::<Impl, OFFSET>,
            AddDumpInformationFile::<Impl, OFFSET>,
            EndProcessServer::<Impl, OFFSET>,
            WaitForProcessServerEnd::<Impl, OFFSET>,
            IsKernelDebuggerEnabled::<Impl, OFFSET>,
            TerminateCurrentProcess::<Impl, OFFSET>,
            DetachCurrentProcess::<Impl, OFFSET>,
            AbandonCurrentProcess::<Impl, OFFSET>,
            GetRunningProcessSystemIdByExecutableNameWide::<Impl, OFFSET>,
            GetRunningProcessDescriptionWide::<Impl, OFFSET>,
            CreateProcessWide::<Impl, OFFSET>,
            CreateProcessAndAttachWide::<Impl, OFFSET>,
            OpenDumpFileWide::<Impl, OFFSET>,
            WriteDumpFileWide::<Impl, OFFSET>,
            AddDumpInformationFileWide::<Impl, OFFSET>,
            GetNumberDumpFiles::<Impl, OFFSET>,
            GetDumpFile::<Impl, OFFSET>,
            GetDumpFileWide::<Impl, OFFSET>,
            AttachKernelWide::<Impl, OFFSET>,
            GetKernelConnectionOptionsWide::<Impl, OFFSET>,
            SetKernelConnectionOptionsWide::<Impl, OFFSET>,
            StartProcessServerWide::<Impl, OFFSET>,
            ConnectProcessServerWide::<Impl, OFFSET>,
            StartServerWide::<Impl, OFFSET>,
            OutputServersWide::<Impl, OFFSET>,
            GetOutputCallbacksWide::<Impl, OFFSET>,
            SetOutputCallbacksWide::<Impl, OFFSET>,
            GetOutputLinePrefixWide::<Impl, OFFSET>,
            SetOutputLinePrefixWide::<Impl, OFFSET>,
            GetIdentityWide::<Impl, OFFSET>,
            OutputIdentityWide::<Impl, OFFSET>,
            GetEventCallbacksWide::<Impl, OFFSET>,
            SetEventCallbacksWide::<Impl, OFFSET>,
            CreateProcess2::<Impl, OFFSET>,
            CreateProcess2Wide::<Impl, OFFSET>,
            CreateProcessAndAttach2::<Impl, OFFSET>,
            CreateProcessAndAttach2Wide::<Impl, OFFSET>,
            PushOutputLinePrefix::<Impl, OFFSET>,
            PushOutputLinePrefixWide::<Impl, OFFSET>,
            PopOutputLinePrefix::<Impl, OFFSET>,
            GetNumberInputCallbacks::<Impl, OFFSET>,
            GetNumberOutputCallbacks::<Impl, OFFSET>,
            GetNumberEventCallbacks::<Impl, OFFSET>,
            GetQuitLockString::<Impl, OFFSET>,
            SetQuitLockString::<Impl, OFFSET>,
            GetQuitLockStringWide::<Impl, OFFSET>,
            SetQuitLockStringWide::<Impl, OFFSET>,
            SetEventContextCallbacks::<Impl, OFFSET>,
            SetClientContext::<Impl, OFFSET>,
            OpenDumpFileWide2::<Impl, OFFSET>,
        )
    }
}
pub trait IDebugCodeContextImpl: Sized {
    fn GetDocumentContext();
    fn SetBreakPoint();
}
impl ::windows::core::RuntimeName for IDebugCodeContext {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugCodeContext";
}
impl IDebugCodeContextVtbl {
    pub const fn new<Impl: IDebugCodeContextImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugCodeContextVtbl {
        unsafe extern "system" fn GetDocumentContext<Impl: IDebugCodeContextImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppsc: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDocumentContext(::core::mem::transmute_copy(&ppsc)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetBreakPoint<Impl: IDebugCodeContextImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bps: BREAKPOINT_STATE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetBreakPoint(bps) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugCodeContext>, base.5, GetDocumentContext::<Impl, OFFSET>, SetBreakPoint::<Impl, OFFSET>)
    }
}
pub trait IDebugControlImpl: Sized {
    fn GetInterrupt();
    fn SetInterrupt();
    fn GetInterruptTimeout();
    fn SetInterruptTimeout();
    fn GetLogFile();
    fn OpenLogFile();
    fn CloseLogFile();
    fn GetLogMask();
    fn SetLogMask();
    fn Input();
    fn ReturnInput();
    fn Output();
    fn OutputVaList();
    fn ControlledOutput();
    fn ControlledOutputVaList();
    fn OutputPrompt();
    fn OutputPromptVaList();
    fn GetPromptText();
    fn OutputCurrentState();
    fn OutputVersionInformation();
    fn GetNotifyEventHandle();
    fn SetNotifyEventHandle();
    fn Assemble();
    fn Disassemble();
    fn GetDisassembleEffectiveOffset();
    fn OutputDisassembly();
    fn OutputDisassemblyLines();
    fn GetNearInstruction();
    fn GetStackTrace();
    fn GetReturnOffset();
    fn OutputStackTrace();
    fn GetDebuggeeType();
    fn GetActualProcessorType();
    fn GetExecutingProcessorType();
    fn GetNumberPossibleExecutingProcessorTypes();
    fn GetPossibleExecutingProcessorTypes();
    fn GetNumberProcessors();
    fn GetSystemVersion();
    fn GetPageSize();
    fn IsPointer64Bit();
    fn ReadBugCheckData();
    fn GetNumberSupportedProcessorTypes();
    fn GetSupportedProcessorTypes();
    fn GetProcessorTypeNames();
    fn GetEffectiveProcessorType();
    fn SetEffectiveProcessorType();
    fn GetExecutionStatus();
    fn SetExecutionStatus();
    fn GetCodeLevel();
    fn SetCodeLevel();
    fn GetEngineOptions();
    fn AddEngineOptions();
    fn RemoveEngineOptions();
    fn SetEngineOptions();
    fn GetSystemErrorControl();
    fn SetSystemErrorControl();
    fn GetTextMacro();
    fn SetTextMacro();
    fn GetRadix();
    fn SetRadix();
    fn Evaluate();
    fn CoerceValue();
    fn CoerceValues();
    fn Execute();
    fn ExecuteCommandFile();
    fn GetNumberBreakpoints();
    fn GetBreakpointByIndex();
    fn GetBreakpointById();
    fn GetBreakpointParameters();
    fn AddBreakpoint();
    fn RemoveBreakpoint();
    fn AddExtension();
    fn RemoveExtension();
    fn GetExtensionByPath();
    fn CallExtension();
    fn GetExtensionFunction();
    fn GetWindbgExtensionApis32();
    fn GetWindbgExtensionApis64();
    fn GetNumberEventFilters();
    fn GetEventFilterText();
    fn GetEventFilterCommand();
    fn SetEventFilterCommand();
    fn GetSpecificFilterParameters();
    fn SetSpecificFilterParameters();
    fn GetSpecificFilterArgument();
    fn SetSpecificFilterArgument();
    fn GetExceptionFilterParameters();
    fn SetExceptionFilterParameters();
    fn GetExceptionFilterSecondCommand();
    fn SetExceptionFilterSecondCommand();
    fn WaitForEvent();
    fn GetLastEventInformation();
}
impl ::windows::core::RuntimeName for IDebugControl {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugControl";
}
impl IDebugControlVtbl {
    pub const fn new<Impl: IDebugControlImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugControlVtbl {
        unsafe extern "system" fn GetInterrupt<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetInterrupt() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetInterrupt<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetInterrupt(flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetInterruptTimeout<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, seconds: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetInterruptTimeout(::core::mem::transmute_copy(&seconds)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetInterruptTimeout<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, seconds: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetInterruptTimeout(seconds) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLogFile<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLogFile(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&append)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OpenLogFile<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PSTR, append: super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OpenLogFile(&*(&file as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), &*(&append as *const <super::super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CloseLogFile<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CloseLogFile() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLogMask<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLogMask(::core::mem::transmute_copy(&mask)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetLogMask<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetLogMask(mask) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Input<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Input(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&inputsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReturnInput<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReturnInput(&*(&buffer as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Output<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Output(mask, &*(&format as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputVaList<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputVaList(mask, &*(&format as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), args) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ControlledOutput<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ControlledOutput(outputcontrol, mask, &*(&format as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ControlledOutputVaList<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ControlledOutputVaList(outputcontrol, mask, &*(&format as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), args) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputPrompt<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputPrompt(outputcontrol, &*(&format as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputPromptVaList<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputPromptVaList(outputcontrol, &*(&format as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), args) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPromptText<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetPromptText(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&textsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputCurrentState<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputCurrentState(outputcontrol, flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputVersionInformation<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputVersionInformation(outputcontrol) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNotifyEventHandle<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNotifyEventHandle(::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetNotifyEventHandle<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetNotifyEventHandle(handle) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Assemble<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, instr: super::super::super::Foundation::PSTR, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Assemble(offset, &*(&instr as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&endoffset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Disassemble<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Disassemble(offset, flags, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&disassemblysize), ::core::mem::transmute_copy(&endoffset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDisassembleEffectiveOffset<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDisassembleEffectiveOffset(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputDisassembly<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, flags: u32, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputDisassembly(outputcontrol, offset, flags, ::core::mem::transmute_copy(&endoffset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputDisassemblyLines<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputDisassemblyLines(outputcontrol, previouslines, totallines, offset, flags, ::core::mem::transmute_copy(&offsetline), ::core::mem::transmute_copy(&startoffset), ::core::mem::transmute_copy(&endoffset), ::core::mem::transmute_copy(&lineoffsets)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNearInstruction<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, nearoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNearInstruction(offset, delta, ::core::mem::transmute_copy(&nearoffset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetStackTrace<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetStackTrace(frameoffset, stackoffset, instructionoffset, ::core::mem::transmute_copy(&frames), framessize, ::core::mem::transmute_copy(&framesfilled)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetReturnOffset<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetReturnOffset(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputStackTrace<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputStackTrace(outputcontrol, &*(&frames as *const <DEBUG_STACK_FRAME as ::windows::core::Abi>::Abi as *const <DEBUG_STACK_FRAME as ::windows::core::DefaultType>::DefaultType), framessize, flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDebuggeeType<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, class: *mut u32, qualifier: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDebuggeeType(::core::mem::transmute_copy(&class), ::core::mem::transmute_copy(&qualifier)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetActualProcessorType<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetActualProcessorType(::core::mem::transmute_copy(&r#type)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExecutingProcessorType<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExecutingProcessorType(::core::mem::transmute_copy(&r#type)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberPossibleExecutingProcessorTypes<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberPossibleExecutingProcessorTypes(::core::mem::transmute_copy(&number)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPossibleExecutingProcessorTypes<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetPossibleExecutingProcessorTypes(start, count, ::core::mem::transmute_copy(&types)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberProcessors<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberProcessors(::core::mem::transmute_copy(&number)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSystemVersion<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: super::super::super::Foundation::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: super::super::super::Foundation::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSystemVersion(::core::mem::transmute_copy(&platformid), ::core::mem::transmute_copy(&major), ::core::mem::transmute_copy(&minor), ::core::mem::transmute_copy(&servicepackstring), servicepackstringsize, ::core::mem::transmute_copy(&servicepackstringused), ::core::mem::transmute_copy(&servicepacknumber), ::core::mem::transmute_copy(&buildstring), buildstringsize, ::core::mem::transmute_copy(&buildstringused)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPageSize<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, size: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetPageSize(::core::mem::transmute_copy(&size)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsPointer64Bit<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).IsPointer64Bit() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadBugCheckData<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadBugCheckData(::core::mem::transmute_copy(&code), ::core::mem::transmute_copy(&arg1), ::core::mem::transmute_copy(&arg2), ::core::mem::transmute_copy(&arg3), ::core::mem::transmute_copy(&arg4)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberSupportedProcessorTypes<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberSupportedProcessorTypes(::core::mem::transmute_copy(&number)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSupportedProcessorTypes<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSupportedProcessorTypes(start, count, ::core::mem::transmute_copy(&types)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessorTypeNames<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetProcessorTypeNames(r#type, ::core::mem::transmute_copy(&fullnamebuffer), fullnamebuffersize, ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), abbrevnamebuffersize, ::core::mem::transmute_copy(&abbrevnamesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEffectiveProcessorType<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEffectiveProcessorType(::core::mem::transmute_copy(&r#type)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEffectiveProcessorType<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetEffectiveProcessorType(r#type) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExecutionStatus<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, status: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExecutionStatus(::core::mem::transmute_copy(&status)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetExecutionStatus<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, status: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetExecutionStatus(status) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCodeLevel<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, level: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCodeLevel(::core::mem::transmute_copy(&level)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetCodeLevel<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, level: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetCodeLevel(level) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEngineOptions<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEngineOptions(::core::mem::transmute_copy(&options)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddEngineOptions<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddEngineOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveEngineOptions<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveEngineOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEngineOptions<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetEngineOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSystemErrorControl<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSystemErrorControl(::core::mem::transmute_copy(&outputlevel), ::core::mem::transmute_copy(&breaklevel)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSystemErrorControl<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputlevel: u32, breaklevel: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetSystemErrorControl(outputlevel, breaklevel) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTextMacro<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, slot: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTextMacro(slot, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&macrosize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetTextMacro<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, slot: u32, r#macro: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetTextMacro(slot, &*(&r#macro as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRadix<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, radix: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetRadix(::core::mem::transmute_copy(&radix)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetRadix<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, radix: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetRadix(radix) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Evaluate<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, expression: super::super::super::Foundation::PSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Evaluate(&*(&expression as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), desiredtype, ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&remainderindex)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CoerceValue<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#in: *const DEBUG_VALUE, outtype: u32, out: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CoerceValue(&*(&r#in as *const <DEBUG_VALUE as ::windows::core::Abi>::Abi as *const <DEBUG_VALUE as ::windows::core::DefaultType>::DefaultType), outtype, ::core::mem::transmute_copy(&out)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CoerceValues<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CoerceValues(count, &*(&r#in as *const <DEBUG_VALUE as ::windows::core::Abi>::Abi as *const <DEBUG_VALUE as ::windows::core::DefaultType>::DefaultType), outtypes, ::core::mem::transmute_copy(&out)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Execute<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, command: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Execute(outputcontrol, &*(&command as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ExecuteCommandFile<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, commandfile: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ExecuteCommandFile(outputcontrol, &*(&commandfile as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberBreakpoints<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberBreakpoints(::core::mem::transmute_copy(&number)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointByIndex<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetBreakpointByIndex(index, ::core::mem::transmute_copy(&bp)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointById<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetBreakpointById(id, ::core::mem::transmute_copy(&bp)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointParameters<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetBreakpointParameters(count, ids, start, ::core::mem::transmute_copy(&params)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddBreakpoint<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32, desiredid: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddBreakpoint(r#type, desiredid, ::core::mem::transmute_copy(&bp)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveBreakpoint<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bp: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveBreakpoint(&*(&bp as *const <IDebugBreakpoint as ::windows::core::Abi>::Abi as *const <IDebugBreakpoint as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddExtension<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR, flags: u32, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddExtension(&*(&path as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveExtension<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveExtension(handle) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExtensionByPath<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExtensionByPath(&*(&path as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CallExtension<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, function: super::super::super::Foundation::PSTR, arguments: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CallExtension(handle, &*(&function as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), &*(&arguments as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExtensionFunction<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, funcname: super::super::super::Foundation::PSTR, function: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExtensionFunction(handle, &*(&funcname as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&function)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetWindbgExtensionApis32<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetWindbgExtensionApis32(&*(&api as *const <WINDBG_EXTENSION_APIS32 as ::windows::core::Abi>::Abi as *const <WINDBG_EXTENSION_APIS32 as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetWindbgExtensionApis64<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetWindbgExtensionApis64(&*(&api as *const <WINDBG_EXTENSION_APIS64 as ::windows::core::Abi>::Abi as *const <WINDBG_EXTENSION_APIS64 as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberEventFilters<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberEventFilters(::core::mem::transmute_copy(&specificevents), ::core::mem::transmute_copy(&specificexceptions), ::core::mem::transmute_copy(&arbitraryexceptions)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventFilterText<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventFilterText(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&textsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventFilterCommand<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventFilterCommand(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&commandsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEventFilterCommand<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetEventFilterCommand(index, &*(&command as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSpecificFilterParameters<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSpecificFilterParameters(start, count, ::core::mem::transmute_copy(&params)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSpecificFilterParameters<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetSpecificFilterParameters(start, count, &*(&params as *const <DEBUG_SPECIFIC_FILTER_PARAMETERS as ::windows::core::Abi>::Abi as *const <DEBUG_SPECIFIC_FILTER_PARAMETERS as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSpecificFilterArgument<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSpecificFilterArgument(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&argumentsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSpecificFilterArgument<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, argument: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetSpecificFilterArgument(index, &*(&argument as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExceptionFilterParameters<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExceptionFilterParameters(count, codes, start, ::core::mem::transmute_copy(&params)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetExceptionFilterParameters<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetExceptionFilterParameters(count, &*(&params as *const <DEBUG_EXCEPTION_FILTER_PARAMETERS as ::windows::core::Abi>::Abi as *const <DEBUG_EXCEPTION_FILTER_PARAMETERS as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExceptionFilterSecondCommand<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExceptionFilterSecondCommand(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&commandsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetExceptionFilterSecondCommand<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetExceptionFilterSecondCommand(index, &*(&command as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WaitForEvent<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WaitForEvent(flags, timeout) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLastEventInformation<Impl: IDebugControlImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLastEventInformation(::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid), ::core::mem::transmute_copy(&extrainformation), extrainformationsize, ::core::mem::transmute_copy(&extrainformationused), ::core::mem::transmute_copy(&description), descriptionsize, ::core::mem::transmute_copy(&descriptionused)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            base.0,
            base.1,
            base.2,
            base.3,
            ::windows::core::GetRuntimeClassName::<IDebugControl>,
            base.5,
            GetInterrupt::<Impl, OFFSET>,
            SetInterrupt::<Impl, OFFSET>,
            GetInterruptTimeout::<Impl, OFFSET>,
            SetInterruptTimeout::<Impl, OFFSET>,
            GetLogFile::<Impl, OFFSET>,
            OpenLogFile::<Impl, OFFSET>,
            CloseLogFile::<Impl, OFFSET>,
            GetLogMask::<Impl, OFFSET>,
            SetLogMask::<Impl, OFFSET>,
            Input::<Impl, OFFSET>,
            ReturnInput::<Impl, OFFSET>,
            Output::<Impl, OFFSET>,
            OutputVaList::<Impl, OFFSET>,
            ControlledOutput::<Impl, OFFSET>,
            ControlledOutputVaList::<Impl, OFFSET>,
            OutputPrompt::<Impl, OFFSET>,
            OutputPromptVaList::<Impl, OFFSET>,
            GetPromptText::<Impl, OFFSET>,
            OutputCurrentState::<Impl, OFFSET>,
            OutputVersionInformation::<Impl, OFFSET>,
            GetNotifyEventHandle::<Impl, OFFSET>,
            SetNotifyEventHandle::<Impl, OFFSET>,
            Assemble::<Impl, OFFSET>,
            Disassemble::<Impl, OFFSET>,
            GetDisassembleEffectiveOffset::<Impl, OFFSET>,
            OutputDisassembly::<Impl, OFFSET>,
            OutputDisassemblyLines::<Impl, OFFSET>,
            GetNearInstruction::<Impl, OFFSET>,
            GetStackTrace::<Impl, OFFSET>,
            GetReturnOffset::<Impl, OFFSET>,
            OutputStackTrace::<Impl, OFFSET>,
            GetDebuggeeType::<Impl, OFFSET>,
            GetActualProcessorType::<Impl, OFFSET>,
            GetExecutingProcessorType::<Impl, OFFSET>,
            GetNumberPossibleExecutingProcessorTypes::<Impl, OFFSET>,
            GetPossibleExecutingProcessorTypes::<Impl, OFFSET>,
            GetNumberProcessors::<Impl, OFFSET>,
            GetSystemVersion::<Impl, OFFSET>,
            GetPageSize::<Impl, OFFSET>,
            IsPointer64Bit::<Impl, OFFSET>,
            ReadBugCheckData::<Impl, OFFSET>,
            GetNumberSupportedProcessorTypes::<Impl, OFFSET>,
            GetSupportedProcessorTypes::<Impl, OFFSET>,
            GetProcessorTypeNames::<Impl, OFFSET>,
            GetEffectiveProcessorType::<Impl, OFFSET>,
            SetEffectiveProcessorType::<Impl, OFFSET>,
            GetExecutionStatus::<Impl, OFFSET>,
            SetExecutionStatus::<Impl, OFFSET>,
            GetCodeLevel::<Impl, OFFSET>,
            SetCodeLevel::<Impl, OFFSET>,
            GetEngineOptions::<Impl, OFFSET>,
            AddEngineOptions::<Impl, OFFSET>,
            RemoveEngineOptions::<Impl, OFFSET>,
            SetEngineOptions::<Impl, OFFSET>,
            GetSystemErrorControl::<Impl, OFFSET>,
            SetSystemErrorControl::<Impl, OFFSET>,
            GetTextMacro::<Impl, OFFSET>,
            SetTextMacro::<Impl, OFFSET>,
            GetRadix::<Impl, OFFSET>,
            SetRadix::<Impl, OFFSET>,
            Evaluate::<Impl, OFFSET>,
            CoerceValue::<Impl, OFFSET>,
            CoerceValues::<Impl, OFFSET>,
            Execute::<Impl, OFFSET>,
            ExecuteCommandFile::<Impl, OFFSET>,
            GetNumberBreakpoints::<Impl, OFFSET>,
            GetBreakpointByIndex::<Impl, OFFSET>,
            GetBreakpointById::<Impl, OFFSET>,
            GetBreakpointParameters::<Impl, OFFSET>,
            AddBreakpoint::<Impl, OFFSET>,
            RemoveBreakpoint::<Impl, OFFSET>,
            AddExtension::<Impl, OFFSET>,
            RemoveExtension::<Impl, OFFSET>,
            GetExtensionByPath::<Impl, OFFSET>,
            CallExtension::<Impl, OFFSET>,
            GetExtensionFunction::<Impl, OFFSET>,
            GetWindbgExtensionApis32::<Impl, OFFSET>,
            GetWindbgExtensionApis64::<Impl, OFFSET>,
            GetNumberEventFilters::<Impl, OFFSET>,
            GetEventFilterText::<Impl, OFFSET>,
            GetEventFilterCommand::<Impl, OFFSET>,
            SetEventFilterCommand::<Impl, OFFSET>,
            GetSpecificFilterParameters::<Impl, OFFSET>,
            SetSpecificFilterParameters::<Impl, OFFSET>,
            GetSpecificFilterArgument::<Impl, OFFSET>,
            SetSpecificFilterArgument::<Impl, OFFSET>,
            GetExceptionFilterParameters::<Impl, OFFSET>,
            SetExceptionFilterParameters::<Impl, OFFSET>,
            GetExceptionFilterSecondCommand::<Impl, OFFSET>,
            SetExceptionFilterSecondCommand::<Impl, OFFSET>,
            WaitForEvent::<Impl, OFFSET>,
            GetLastEventInformation::<Impl, OFFSET>,
        )
    }
}
pub trait IDebugControl2Impl: Sized {
    fn GetInterrupt();
    fn SetInterrupt();
    fn GetInterruptTimeout();
    fn SetInterruptTimeout();
    fn GetLogFile();
    fn OpenLogFile();
    fn CloseLogFile();
    fn GetLogMask();
    fn SetLogMask();
    fn Input();
    fn ReturnInput();
    fn Output();
    fn OutputVaList();
    fn ControlledOutput();
    fn ControlledOutputVaList();
    fn OutputPrompt();
    fn OutputPromptVaList();
    fn GetPromptText();
    fn OutputCurrentState();
    fn OutputVersionInformation();
    fn GetNotifyEventHandle();
    fn SetNotifyEventHandle();
    fn Assemble();
    fn Disassemble();
    fn GetDisassembleEffectiveOffset();
    fn OutputDisassembly();
    fn OutputDisassemblyLines();
    fn GetNearInstruction();
    fn GetStackTrace();
    fn GetReturnOffset();
    fn OutputStackTrace();
    fn GetDebuggeeType();
    fn GetActualProcessorType();
    fn GetExecutingProcessorType();
    fn GetNumberPossibleExecutingProcessorTypes();
    fn GetPossibleExecutingProcessorTypes();
    fn GetNumberProcessors();
    fn GetSystemVersion();
    fn GetPageSize();
    fn IsPointer64Bit();
    fn ReadBugCheckData();
    fn GetNumberSupportedProcessorTypes();
    fn GetSupportedProcessorTypes();
    fn GetProcessorTypeNames();
    fn GetEffectiveProcessorType();
    fn SetEffectiveProcessorType();
    fn GetExecutionStatus();
    fn SetExecutionStatus();
    fn GetCodeLevel();
    fn SetCodeLevel();
    fn GetEngineOptions();
    fn AddEngineOptions();
    fn RemoveEngineOptions();
    fn SetEngineOptions();
    fn GetSystemErrorControl();
    fn SetSystemErrorControl();
    fn GetTextMacro();
    fn SetTextMacro();
    fn GetRadix();
    fn SetRadix();
    fn Evaluate();
    fn CoerceValue();
    fn CoerceValues();
    fn Execute();
    fn ExecuteCommandFile();
    fn GetNumberBreakpoints();
    fn GetBreakpointByIndex();
    fn GetBreakpointById();
    fn GetBreakpointParameters();
    fn AddBreakpoint();
    fn RemoveBreakpoint();
    fn AddExtension();
    fn RemoveExtension();
    fn GetExtensionByPath();
    fn CallExtension();
    fn GetExtensionFunction();
    fn GetWindbgExtensionApis32();
    fn GetWindbgExtensionApis64();
    fn GetNumberEventFilters();
    fn GetEventFilterText();
    fn GetEventFilterCommand();
    fn SetEventFilterCommand();
    fn GetSpecificFilterParameters();
    fn SetSpecificFilterParameters();
    fn GetSpecificFilterArgument();
    fn SetSpecificFilterArgument();
    fn GetExceptionFilterParameters();
    fn SetExceptionFilterParameters();
    fn GetExceptionFilterSecondCommand();
    fn SetExceptionFilterSecondCommand();
    fn WaitForEvent();
    fn GetLastEventInformation();
    fn GetCurrentTimeDate();
    fn GetCurrentSystemUpTime();
    fn GetDumpFormatFlags();
    fn GetNumberTextReplacements();
    fn GetTextReplacement();
    fn SetTextReplacement();
    fn RemoveTextReplacements();
    fn OutputTextReplacements();
}
impl ::windows::core::RuntimeName for IDebugControl2 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugControl2";
}
impl IDebugControl2Vtbl {
    pub const fn new<Impl: IDebugControl2Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugControl2Vtbl {
        unsafe extern "system" fn GetInterrupt<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetInterrupt() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetInterrupt<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetInterrupt(flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetInterruptTimeout<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, seconds: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetInterruptTimeout(::core::mem::transmute_copy(&seconds)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetInterruptTimeout<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, seconds: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetInterruptTimeout(seconds) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLogFile<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLogFile(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&append)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OpenLogFile<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PSTR, append: super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OpenLogFile(&*(&file as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), &*(&append as *const <super::super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CloseLogFile<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CloseLogFile() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLogMask<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLogMask(::core::mem::transmute_copy(&mask)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetLogMask<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetLogMask(mask) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Input<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Input(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&inputsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReturnInput<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReturnInput(&*(&buffer as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Output<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Output(mask, &*(&format as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputVaList<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputVaList(mask, &*(&format as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), args) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ControlledOutput<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ControlledOutput(outputcontrol, mask, &*(&format as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ControlledOutputVaList<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ControlledOutputVaList(outputcontrol, mask, &*(&format as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), args) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputPrompt<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputPrompt(outputcontrol, &*(&format as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputPromptVaList<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputPromptVaList(outputcontrol, &*(&format as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), args) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPromptText<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetPromptText(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&textsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputCurrentState<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputCurrentState(outputcontrol, flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputVersionInformation<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputVersionInformation(outputcontrol) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNotifyEventHandle<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNotifyEventHandle(::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetNotifyEventHandle<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetNotifyEventHandle(handle) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Assemble<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, instr: super::super::super::Foundation::PSTR, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Assemble(offset, &*(&instr as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&endoffset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Disassemble<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Disassemble(offset, flags, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&disassemblysize), ::core::mem::transmute_copy(&endoffset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDisassembleEffectiveOffset<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDisassembleEffectiveOffset(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputDisassembly<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, flags: u32, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputDisassembly(outputcontrol, offset, flags, ::core::mem::transmute_copy(&endoffset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputDisassemblyLines<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputDisassemblyLines(outputcontrol, previouslines, totallines, offset, flags, ::core::mem::transmute_copy(&offsetline), ::core::mem::transmute_copy(&startoffset), ::core::mem::transmute_copy(&endoffset), ::core::mem::transmute_copy(&lineoffsets)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNearInstruction<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, nearoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNearInstruction(offset, delta, ::core::mem::transmute_copy(&nearoffset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetStackTrace<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetStackTrace(frameoffset, stackoffset, instructionoffset, ::core::mem::transmute_copy(&frames), framessize, ::core::mem::transmute_copy(&framesfilled)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetReturnOffset<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetReturnOffset(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputStackTrace<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputStackTrace(outputcontrol, &*(&frames as *const <DEBUG_STACK_FRAME as ::windows::core::Abi>::Abi as *const <DEBUG_STACK_FRAME as ::windows::core::DefaultType>::DefaultType), framessize, flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDebuggeeType<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, class: *mut u32, qualifier: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDebuggeeType(::core::mem::transmute_copy(&class), ::core::mem::transmute_copy(&qualifier)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetActualProcessorType<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetActualProcessorType(::core::mem::transmute_copy(&r#type)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExecutingProcessorType<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExecutingProcessorType(::core::mem::transmute_copy(&r#type)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberPossibleExecutingProcessorTypes<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberPossibleExecutingProcessorTypes(::core::mem::transmute_copy(&number)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPossibleExecutingProcessorTypes<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetPossibleExecutingProcessorTypes(start, count, ::core::mem::transmute_copy(&types)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberProcessors<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberProcessors(::core::mem::transmute_copy(&number)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSystemVersion<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: super::super::super::Foundation::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: super::super::super::Foundation::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSystemVersion(::core::mem::transmute_copy(&platformid), ::core::mem::transmute_copy(&major), ::core::mem::transmute_copy(&minor), ::core::mem::transmute_copy(&servicepackstring), servicepackstringsize, ::core::mem::transmute_copy(&servicepackstringused), ::core::mem::transmute_copy(&servicepacknumber), ::core::mem::transmute_copy(&buildstring), buildstringsize, ::core::mem::transmute_copy(&buildstringused)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPageSize<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, size: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetPageSize(::core::mem::transmute_copy(&size)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsPointer64Bit<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).IsPointer64Bit() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadBugCheckData<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadBugCheckData(::core::mem::transmute_copy(&code), ::core::mem::transmute_copy(&arg1), ::core::mem::transmute_copy(&arg2), ::core::mem::transmute_copy(&arg3), ::core::mem::transmute_copy(&arg4)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberSupportedProcessorTypes<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberSupportedProcessorTypes(::core::mem::transmute_copy(&number)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSupportedProcessorTypes<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSupportedProcessorTypes(start, count, ::core::mem::transmute_copy(&types)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessorTypeNames<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetProcessorTypeNames(r#type, ::core::mem::transmute_copy(&fullnamebuffer), fullnamebuffersize, ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), abbrevnamebuffersize, ::core::mem::transmute_copy(&abbrevnamesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEffectiveProcessorType<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEffectiveProcessorType(::core::mem::transmute_copy(&r#type)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEffectiveProcessorType<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetEffectiveProcessorType(r#type) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExecutionStatus<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, status: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExecutionStatus(::core::mem::transmute_copy(&status)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetExecutionStatus<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, status: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetExecutionStatus(status) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCodeLevel<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, level: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCodeLevel(::core::mem::transmute_copy(&level)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetCodeLevel<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, level: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetCodeLevel(level) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEngineOptions<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEngineOptions(::core::mem::transmute_copy(&options)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddEngineOptions<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddEngineOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveEngineOptions<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveEngineOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEngineOptions<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetEngineOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSystemErrorControl<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSystemErrorControl(::core::mem::transmute_copy(&outputlevel), ::core::mem::transmute_copy(&breaklevel)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSystemErrorControl<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputlevel: u32, breaklevel: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetSystemErrorControl(outputlevel, breaklevel) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTextMacro<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, slot: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTextMacro(slot, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&macrosize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetTextMacro<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, slot: u32, r#macro: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetTextMacro(slot, &*(&r#macro as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRadix<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, radix: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetRadix(::core::mem::transmute_copy(&radix)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetRadix<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, radix: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetRadix(radix) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Evaluate<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, expression: super::super::super::Foundation::PSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Evaluate(&*(&expression as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), desiredtype, ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&remainderindex)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CoerceValue<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#in: *const DEBUG_VALUE, outtype: u32, out: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CoerceValue(&*(&r#in as *const <DEBUG_VALUE as ::windows::core::Abi>::Abi as *const <DEBUG_VALUE as ::windows::core::DefaultType>::DefaultType), outtype, ::core::mem::transmute_copy(&out)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CoerceValues<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CoerceValues(count, &*(&r#in as *const <DEBUG_VALUE as ::windows::core::Abi>::Abi as *const <DEBUG_VALUE as ::windows::core::DefaultType>::DefaultType), outtypes, ::core::mem::transmute_copy(&out)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Execute<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, command: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Execute(outputcontrol, &*(&command as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ExecuteCommandFile<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, commandfile: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ExecuteCommandFile(outputcontrol, &*(&commandfile as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberBreakpoints<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberBreakpoints(::core::mem::transmute_copy(&number)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointByIndex<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetBreakpointByIndex(index, ::core::mem::transmute_copy(&bp)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointById<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetBreakpointById(id, ::core::mem::transmute_copy(&bp)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointParameters<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetBreakpointParameters(count, ids, start, ::core::mem::transmute_copy(&params)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddBreakpoint<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32, desiredid: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddBreakpoint(r#type, desiredid, ::core::mem::transmute_copy(&bp)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveBreakpoint<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bp: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveBreakpoint(&*(&bp as *const <IDebugBreakpoint as ::windows::core::Abi>::Abi as *const <IDebugBreakpoint as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddExtension<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR, flags: u32, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddExtension(&*(&path as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveExtension<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveExtension(handle) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExtensionByPath<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExtensionByPath(&*(&path as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CallExtension<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, function: super::super::super::Foundation::PSTR, arguments: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CallExtension(handle, &*(&function as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), &*(&arguments as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExtensionFunction<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, funcname: super::super::super::Foundation::PSTR, function: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExtensionFunction(handle, &*(&funcname as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&function)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetWindbgExtensionApis32<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetWindbgExtensionApis32(&*(&api as *const <WINDBG_EXTENSION_APIS32 as ::windows::core::Abi>::Abi as *const <WINDBG_EXTENSION_APIS32 as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetWindbgExtensionApis64<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetWindbgExtensionApis64(&*(&api as *const <WINDBG_EXTENSION_APIS64 as ::windows::core::Abi>::Abi as *const <WINDBG_EXTENSION_APIS64 as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberEventFilters<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberEventFilters(::core::mem::transmute_copy(&specificevents), ::core::mem::transmute_copy(&specificexceptions), ::core::mem::transmute_copy(&arbitraryexceptions)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventFilterText<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventFilterText(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&textsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventFilterCommand<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventFilterCommand(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&commandsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEventFilterCommand<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetEventFilterCommand(index, &*(&command as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSpecificFilterParameters<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSpecificFilterParameters(start, count, ::core::mem::transmute_copy(&params)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSpecificFilterParameters<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetSpecificFilterParameters(start, count, &*(&params as *const <DEBUG_SPECIFIC_FILTER_PARAMETERS as ::windows::core::Abi>::Abi as *const <DEBUG_SPECIFIC_FILTER_PARAMETERS as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSpecificFilterArgument<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSpecificFilterArgument(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&argumentsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSpecificFilterArgument<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, argument: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetSpecificFilterArgument(index, &*(&argument as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExceptionFilterParameters<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExceptionFilterParameters(count, codes, start, ::core::mem::transmute_copy(&params)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetExceptionFilterParameters<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetExceptionFilterParameters(count, &*(&params as *const <DEBUG_EXCEPTION_FILTER_PARAMETERS as ::windows::core::Abi>::Abi as *const <DEBUG_EXCEPTION_FILTER_PARAMETERS as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExceptionFilterSecondCommand<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExceptionFilterSecondCommand(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&commandsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetExceptionFilterSecondCommand<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetExceptionFilterSecondCommand(index, &*(&command as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WaitForEvent<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WaitForEvent(flags, timeout) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLastEventInformation<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLastEventInformation(::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid), ::core::mem::transmute_copy(&extrainformation), extrainformationsize, ::core::mem::transmute_copy(&extrainformationused), ::core::mem::transmute_copy(&description), descriptionsize, ::core::mem::transmute_copy(&descriptionused)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentTimeDate<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, timedate: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentTimeDate(::core::mem::transmute_copy(&timedate)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentSystemUpTime<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, uptime: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentSystemUpTime(::core::mem::transmute_copy(&uptime)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDumpFormatFlags<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, formatflags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDumpFormatFlags(::core::mem::transmute_copy(&formatflags)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberTextReplacements<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, numrepl: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberTextReplacements(::core::mem::transmute_copy(&numrepl)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTextReplacement<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PSTR, index: u32, srcbuffer: super::super::super::Foundation::PSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTextReplacement(&*(&srctext as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), index, ::core::mem::transmute_copy(&srcbuffer), srcbuffersize, ::core::mem::transmute_copy(&srcsize), ::core::mem::transmute_copy(&dstbuffer), dstbuffersize, ::core::mem::transmute_copy(&dstsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetTextReplacement<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PSTR, dsttext: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetTextReplacement(&*(&srctext as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), &*(&dsttext as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveTextReplacements<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveTextReplacements() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputTextReplacements<Impl: IDebugControl2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputTextReplacements(outputcontrol, flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            base.0,
            base.1,
            base.2,
            base.3,
            ::windows::core::GetRuntimeClassName::<IDebugControl2>,
            base.5,
            GetInterrupt::<Impl, OFFSET>,
            SetInterrupt::<Impl, OFFSET>,
            GetInterruptTimeout::<Impl, OFFSET>,
            SetInterruptTimeout::<Impl, OFFSET>,
            GetLogFile::<Impl, OFFSET>,
            OpenLogFile::<Impl, OFFSET>,
            CloseLogFile::<Impl, OFFSET>,
            GetLogMask::<Impl, OFFSET>,
            SetLogMask::<Impl, OFFSET>,
            Input::<Impl, OFFSET>,
            ReturnInput::<Impl, OFFSET>,
            Output::<Impl, OFFSET>,
            OutputVaList::<Impl, OFFSET>,
            ControlledOutput::<Impl, OFFSET>,
            ControlledOutputVaList::<Impl, OFFSET>,
            OutputPrompt::<Impl, OFFSET>,
            OutputPromptVaList::<Impl, OFFSET>,
            GetPromptText::<Impl, OFFSET>,
            OutputCurrentState::<Impl, OFFSET>,
            OutputVersionInformation::<Impl, OFFSET>,
            GetNotifyEventHandle::<Impl, OFFSET>,
            SetNotifyEventHandle::<Impl, OFFSET>,
            Assemble::<Impl, OFFSET>,
            Disassemble::<Impl, OFFSET>,
            GetDisassembleEffectiveOffset::<Impl, OFFSET>,
            OutputDisassembly::<Impl, OFFSET>,
            OutputDisassemblyLines::<Impl, OFFSET>,
            GetNearInstruction::<Impl, OFFSET>,
            GetStackTrace::<Impl, OFFSET>,
            GetReturnOffset::<Impl, OFFSET>,
            OutputStackTrace::<Impl, OFFSET>,
            GetDebuggeeType::<Impl, OFFSET>,
            GetActualProcessorType::<Impl, OFFSET>,
            GetExecutingProcessorType::<Impl, OFFSET>,
            GetNumberPossibleExecutingProcessorTypes::<Impl, OFFSET>,
            GetPossibleExecutingProcessorTypes::<Impl, OFFSET>,
            GetNumberProcessors::<Impl, OFFSET>,
            GetSystemVersion::<Impl, OFFSET>,
            GetPageSize::<Impl, OFFSET>,
            IsPointer64Bit::<Impl, OFFSET>,
            ReadBugCheckData::<Impl, OFFSET>,
            GetNumberSupportedProcessorTypes::<Impl, OFFSET>,
            GetSupportedProcessorTypes::<Impl, OFFSET>,
            GetProcessorTypeNames::<Impl, OFFSET>,
            GetEffectiveProcessorType::<Impl, OFFSET>,
            SetEffectiveProcessorType::<Impl, OFFSET>,
            GetExecutionStatus::<Impl, OFFSET>,
            SetExecutionStatus::<Impl, OFFSET>,
            GetCodeLevel::<Impl, OFFSET>,
            SetCodeLevel::<Impl, OFFSET>,
            GetEngineOptions::<Impl, OFFSET>,
            AddEngineOptions::<Impl, OFFSET>,
            RemoveEngineOptions::<Impl, OFFSET>,
            SetEngineOptions::<Impl, OFFSET>,
            GetSystemErrorControl::<Impl, OFFSET>,
            SetSystemErrorControl::<Impl, OFFSET>,
            GetTextMacro::<Impl, OFFSET>,
            SetTextMacro::<Impl, OFFSET>,
            GetRadix::<Impl, OFFSET>,
            SetRadix::<Impl, OFFSET>,
            Evaluate::<Impl, OFFSET>,
            CoerceValue::<Impl, OFFSET>,
            CoerceValues::<Impl, OFFSET>,
            Execute::<Impl, OFFSET>,
            ExecuteCommandFile::<Impl, OFFSET>,
            GetNumberBreakpoints::<Impl, OFFSET>,
            GetBreakpointByIndex::<Impl, OFFSET>,
            GetBreakpointById::<Impl, OFFSET>,
            GetBreakpointParameters::<Impl, OFFSET>,
            AddBreakpoint::<Impl, OFFSET>,
            RemoveBreakpoint::<Impl, OFFSET>,
            AddExtension::<Impl, OFFSET>,
            RemoveExtension::<Impl, OFFSET>,
            GetExtensionByPath::<Impl, OFFSET>,
            CallExtension::<Impl, OFFSET>,
            GetExtensionFunction::<Impl, OFFSET>,
            GetWindbgExtensionApis32::<Impl, OFFSET>,
            GetWindbgExtensionApis64::<Impl, OFFSET>,
            GetNumberEventFilters::<Impl, OFFSET>,
            GetEventFilterText::<Impl, OFFSET>,
            GetEventFilterCommand::<Impl, OFFSET>,
            SetEventFilterCommand::<Impl, OFFSET>,
            GetSpecificFilterParameters::<Impl, OFFSET>,
            SetSpecificFilterParameters::<Impl, OFFSET>,
            GetSpecificFilterArgument::<Impl, OFFSET>,
            SetSpecificFilterArgument::<Impl, OFFSET>,
            GetExceptionFilterParameters::<Impl, OFFSET>,
            SetExceptionFilterParameters::<Impl, OFFSET>,
            GetExceptionFilterSecondCommand::<Impl, OFFSET>,
            SetExceptionFilterSecondCommand::<Impl, OFFSET>,
            WaitForEvent::<Impl, OFFSET>,
            GetLastEventInformation::<Impl, OFFSET>,
            GetCurrentTimeDate::<Impl, OFFSET>,
            GetCurrentSystemUpTime::<Impl, OFFSET>,
            GetDumpFormatFlags::<Impl, OFFSET>,
            GetNumberTextReplacements::<Impl, OFFSET>,
            GetTextReplacement::<Impl, OFFSET>,
            SetTextReplacement::<Impl, OFFSET>,
            RemoveTextReplacements::<Impl, OFFSET>,
            OutputTextReplacements::<Impl, OFFSET>,
        )
    }
}
pub trait IDebugControl3Impl: Sized {
    fn GetInterrupt();
    fn SetInterrupt();
    fn GetInterruptTimeout();
    fn SetInterruptTimeout();
    fn GetLogFile();
    fn OpenLogFile();
    fn CloseLogFile();
    fn GetLogMask();
    fn SetLogMask();
    fn Input();
    fn ReturnInput();
    fn Output();
    fn OutputVaList();
    fn ControlledOutput();
    fn ControlledOutputVaList();
    fn OutputPrompt();
    fn OutputPromptVaList();
    fn GetPromptText();
    fn OutputCurrentState();
    fn OutputVersionInformation();
    fn GetNotifyEventHandle();
    fn SetNotifyEventHandle();
    fn Assemble();
    fn Disassemble();
    fn GetDisassembleEffectiveOffset();
    fn OutputDisassembly();
    fn OutputDisassemblyLines();
    fn GetNearInstruction();
    fn GetStackTrace();
    fn GetReturnOffset();
    fn OutputStackTrace();
    fn GetDebuggeeType();
    fn GetActualProcessorType();
    fn GetExecutingProcessorType();
    fn GetNumberPossibleExecutingProcessorTypes();
    fn GetPossibleExecutingProcessorTypes();
    fn GetNumberProcessors();
    fn GetSystemVersion();
    fn GetPageSize();
    fn IsPointer64Bit();
    fn ReadBugCheckData();
    fn GetNumberSupportedProcessorTypes();
    fn GetSupportedProcessorTypes();
    fn GetProcessorTypeNames();
    fn GetEffectiveProcessorType();
    fn SetEffectiveProcessorType();
    fn GetExecutionStatus();
    fn SetExecutionStatus();
    fn GetCodeLevel();
    fn SetCodeLevel();
    fn GetEngineOptions();
    fn AddEngineOptions();
    fn RemoveEngineOptions();
    fn SetEngineOptions();
    fn GetSystemErrorControl();
    fn SetSystemErrorControl();
    fn GetTextMacro();
    fn SetTextMacro();
    fn GetRadix();
    fn SetRadix();
    fn Evaluate();
    fn CoerceValue();
    fn CoerceValues();
    fn Execute();
    fn ExecuteCommandFile();
    fn GetNumberBreakpoints();
    fn GetBreakpointByIndex();
    fn GetBreakpointById();
    fn GetBreakpointParameters();
    fn AddBreakpoint();
    fn RemoveBreakpoint();
    fn AddExtension();
    fn RemoveExtension();
    fn GetExtensionByPath();
    fn CallExtension();
    fn GetExtensionFunction();
    fn GetWindbgExtensionApis32();
    fn GetWindbgExtensionApis64();
    fn GetNumberEventFilters();
    fn GetEventFilterText();
    fn GetEventFilterCommand();
    fn SetEventFilterCommand();
    fn GetSpecificFilterParameters();
    fn SetSpecificFilterParameters();
    fn GetSpecificFilterArgument();
    fn SetSpecificFilterArgument();
    fn GetExceptionFilterParameters();
    fn SetExceptionFilterParameters();
    fn GetExceptionFilterSecondCommand();
    fn SetExceptionFilterSecondCommand();
    fn WaitForEvent();
    fn GetLastEventInformation();
    fn GetCurrentTimeDate();
    fn GetCurrentSystemUpTime();
    fn GetDumpFormatFlags();
    fn GetNumberTextReplacements();
    fn GetTextReplacement();
    fn SetTextReplacement();
    fn RemoveTextReplacements();
    fn OutputTextReplacements();
    fn GetAssemblyOptions();
    fn AddAssemblyOptions();
    fn RemoveAssemblyOptions();
    fn SetAssemblyOptions();
    fn GetExpressionSyntax();
    fn SetExpressionSyntax();
    fn SetExpressionSyntaxByName();
    fn GetNumberExpressionSyntaxes();
    fn GetExpressionSyntaxNames();
    fn GetNumberEvents();
    fn GetEventIndexDescription();
    fn GetCurrentEventIndex();
    fn SetNextEventIndex();
}
impl ::windows::core::RuntimeName for IDebugControl3 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugControl3";
}
impl IDebugControl3Vtbl {
    pub const fn new<Impl: IDebugControl3Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugControl3Vtbl {
        unsafe extern "system" fn GetInterrupt<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetInterrupt() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetInterrupt<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetInterrupt(flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetInterruptTimeout<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, seconds: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetInterruptTimeout(::core::mem::transmute_copy(&seconds)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetInterruptTimeout<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, seconds: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetInterruptTimeout(seconds) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLogFile<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLogFile(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&append)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OpenLogFile<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PSTR, append: super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OpenLogFile(&*(&file as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), &*(&append as *const <super::super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CloseLogFile<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CloseLogFile() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLogMask<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLogMask(::core::mem::transmute_copy(&mask)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetLogMask<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetLogMask(mask) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Input<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Input(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&inputsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReturnInput<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReturnInput(&*(&buffer as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Output<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Output(mask, &*(&format as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputVaList<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputVaList(mask, &*(&format as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), args) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ControlledOutput<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ControlledOutput(outputcontrol, mask, &*(&format as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ControlledOutputVaList<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ControlledOutputVaList(outputcontrol, mask, &*(&format as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), args) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputPrompt<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputPrompt(outputcontrol, &*(&format as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputPromptVaList<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputPromptVaList(outputcontrol, &*(&format as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), args) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPromptText<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetPromptText(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&textsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputCurrentState<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputCurrentState(outputcontrol, flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputVersionInformation<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputVersionInformation(outputcontrol) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNotifyEventHandle<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNotifyEventHandle(::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetNotifyEventHandle<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetNotifyEventHandle(handle) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Assemble<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, instr: super::super::super::Foundation::PSTR, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Assemble(offset, &*(&instr as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&endoffset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Disassemble<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Disassemble(offset, flags, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&disassemblysize), ::core::mem::transmute_copy(&endoffset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDisassembleEffectiveOffset<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDisassembleEffectiveOffset(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputDisassembly<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, flags: u32, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputDisassembly(outputcontrol, offset, flags, ::core::mem::transmute_copy(&endoffset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputDisassemblyLines<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputDisassemblyLines(outputcontrol, previouslines, totallines, offset, flags, ::core::mem::transmute_copy(&offsetline), ::core::mem::transmute_copy(&startoffset), ::core::mem::transmute_copy(&endoffset), ::core::mem::transmute_copy(&lineoffsets)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNearInstruction<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, nearoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNearInstruction(offset, delta, ::core::mem::transmute_copy(&nearoffset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetStackTrace<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetStackTrace(frameoffset, stackoffset, instructionoffset, ::core::mem::transmute_copy(&frames), framessize, ::core::mem::transmute_copy(&framesfilled)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetReturnOffset<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetReturnOffset(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputStackTrace<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputStackTrace(outputcontrol, &*(&frames as *const <DEBUG_STACK_FRAME as ::windows::core::Abi>::Abi as *const <DEBUG_STACK_FRAME as ::windows::core::DefaultType>::DefaultType), framessize, flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDebuggeeType<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, class: *mut u32, qualifier: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDebuggeeType(::core::mem::transmute_copy(&class), ::core::mem::transmute_copy(&qualifier)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetActualProcessorType<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetActualProcessorType(::core::mem::transmute_copy(&r#type)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExecutingProcessorType<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExecutingProcessorType(::core::mem::transmute_copy(&r#type)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberPossibleExecutingProcessorTypes<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberPossibleExecutingProcessorTypes(::core::mem::transmute_copy(&number)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPossibleExecutingProcessorTypes<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetPossibleExecutingProcessorTypes(start, count, ::core::mem::transmute_copy(&types)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberProcessors<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberProcessors(::core::mem::transmute_copy(&number)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSystemVersion<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: super::super::super::Foundation::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: super::super::super::Foundation::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSystemVersion(::core::mem::transmute_copy(&platformid), ::core::mem::transmute_copy(&major), ::core::mem::transmute_copy(&minor), ::core::mem::transmute_copy(&servicepackstring), servicepackstringsize, ::core::mem::transmute_copy(&servicepackstringused), ::core::mem::transmute_copy(&servicepacknumber), ::core::mem::transmute_copy(&buildstring), buildstringsize, ::core::mem::transmute_copy(&buildstringused)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPageSize<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, size: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetPageSize(::core::mem::transmute_copy(&size)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsPointer64Bit<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).IsPointer64Bit() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadBugCheckData<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadBugCheckData(::core::mem::transmute_copy(&code), ::core::mem::transmute_copy(&arg1), ::core::mem::transmute_copy(&arg2), ::core::mem::transmute_copy(&arg3), ::core::mem::transmute_copy(&arg4)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberSupportedProcessorTypes<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberSupportedProcessorTypes(::core::mem::transmute_copy(&number)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSupportedProcessorTypes<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSupportedProcessorTypes(start, count, ::core::mem::transmute_copy(&types)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessorTypeNames<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetProcessorTypeNames(r#type, ::core::mem::transmute_copy(&fullnamebuffer), fullnamebuffersize, ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), abbrevnamebuffersize, ::core::mem::transmute_copy(&abbrevnamesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEffectiveProcessorType<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEffectiveProcessorType(::core::mem::transmute_copy(&r#type)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEffectiveProcessorType<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetEffectiveProcessorType(r#type) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExecutionStatus<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, status: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExecutionStatus(::core::mem::transmute_copy(&status)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetExecutionStatus<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, status: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetExecutionStatus(status) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCodeLevel<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, level: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCodeLevel(::core::mem::transmute_copy(&level)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetCodeLevel<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, level: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetCodeLevel(level) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEngineOptions<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEngineOptions(::core::mem::transmute_copy(&options)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddEngineOptions<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddEngineOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveEngineOptions<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveEngineOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEngineOptions<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetEngineOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSystemErrorControl<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSystemErrorControl(::core::mem::transmute_copy(&outputlevel), ::core::mem::transmute_copy(&breaklevel)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSystemErrorControl<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputlevel: u32, breaklevel: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetSystemErrorControl(outputlevel, breaklevel) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTextMacro<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, slot: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTextMacro(slot, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&macrosize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetTextMacro<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, slot: u32, r#macro: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetTextMacro(slot, &*(&r#macro as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRadix<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, radix: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetRadix(::core::mem::transmute_copy(&radix)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetRadix<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, radix: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetRadix(radix) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Evaluate<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, expression: super::super::super::Foundation::PSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Evaluate(&*(&expression as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), desiredtype, ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&remainderindex)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CoerceValue<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#in: *const DEBUG_VALUE, outtype: u32, out: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CoerceValue(&*(&r#in as *const <DEBUG_VALUE as ::windows::core::Abi>::Abi as *const <DEBUG_VALUE as ::windows::core::DefaultType>::DefaultType), outtype, ::core::mem::transmute_copy(&out)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CoerceValues<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CoerceValues(count, &*(&r#in as *const <DEBUG_VALUE as ::windows::core::Abi>::Abi as *const <DEBUG_VALUE as ::windows::core::DefaultType>::DefaultType), outtypes, ::core::mem::transmute_copy(&out)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Execute<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, command: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Execute(outputcontrol, &*(&command as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ExecuteCommandFile<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, commandfile: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ExecuteCommandFile(outputcontrol, &*(&commandfile as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberBreakpoints<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberBreakpoints(::core::mem::transmute_copy(&number)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointByIndex<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetBreakpointByIndex(index, ::core::mem::transmute_copy(&bp)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointById<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetBreakpointById(id, ::core::mem::transmute_copy(&bp)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointParameters<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetBreakpointParameters(count, ids, start, ::core::mem::transmute_copy(&params)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddBreakpoint<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32, desiredid: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddBreakpoint(r#type, desiredid, ::core::mem::transmute_copy(&bp)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveBreakpoint<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bp: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveBreakpoint(&*(&bp as *const <IDebugBreakpoint as ::windows::core::Abi>::Abi as *const <IDebugBreakpoint as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddExtension<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR, flags: u32, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddExtension(&*(&path as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveExtension<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveExtension(handle) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExtensionByPath<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExtensionByPath(&*(&path as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CallExtension<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, function: super::super::super::Foundation::PSTR, arguments: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CallExtension(handle, &*(&function as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), &*(&arguments as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExtensionFunction<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, funcname: super::super::super::Foundation::PSTR, function: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExtensionFunction(handle, &*(&funcname as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&function)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetWindbgExtensionApis32<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetWindbgExtensionApis32(&*(&api as *const <WINDBG_EXTENSION_APIS32 as ::windows::core::Abi>::Abi as *const <WINDBG_EXTENSION_APIS32 as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetWindbgExtensionApis64<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetWindbgExtensionApis64(&*(&api as *const <WINDBG_EXTENSION_APIS64 as ::windows::core::Abi>::Abi as *const <WINDBG_EXTENSION_APIS64 as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberEventFilters<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberEventFilters(::core::mem::transmute_copy(&specificevents), ::core::mem::transmute_copy(&specificexceptions), ::core::mem::transmute_copy(&arbitraryexceptions)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventFilterText<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventFilterText(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&textsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventFilterCommand<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventFilterCommand(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&commandsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEventFilterCommand<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetEventFilterCommand(index, &*(&command as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSpecificFilterParameters<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSpecificFilterParameters(start, count, ::core::mem::transmute_copy(&params)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSpecificFilterParameters<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetSpecificFilterParameters(start, count, &*(&params as *const <DEBUG_SPECIFIC_FILTER_PARAMETERS as ::windows::core::Abi>::Abi as *const <DEBUG_SPECIFIC_FILTER_PARAMETERS as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSpecificFilterArgument<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSpecificFilterArgument(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&argumentsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSpecificFilterArgument<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, argument: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetSpecificFilterArgument(index, &*(&argument as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExceptionFilterParameters<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExceptionFilterParameters(count, codes, start, ::core::mem::transmute_copy(&params)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetExceptionFilterParameters<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetExceptionFilterParameters(count, &*(&params as *const <DEBUG_EXCEPTION_FILTER_PARAMETERS as ::windows::core::Abi>::Abi as *const <DEBUG_EXCEPTION_FILTER_PARAMETERS as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExceptionFilterSecondCommand<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExceptionFilterSecondCommand(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&commandsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetExceptionFilterSecondCommand<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetExceptionFilterSecondCommand(index, &*(&command as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WaitForEvent<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WaitForEvent(flags, timeout) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLastEventInformation<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLastEventInformation(::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid), ::core::mem::transmute_copy(&extrainformation), extrainformationsize, ::core::mem::transmute_copy(&extrainformationused), ::core::mem::transmute_copy(&description), descriptionsize, ::core::mem::transmute_copy(&descriptionused)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentTimeDate<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, timedate: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentTimeDate(::core::mem::transmute_copy(&timedate)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentSystemUpTime<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, uptime: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentSystemUpTime(::core::mem::transmute_copy(&uptime)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDumpFormatFlags<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, formatflags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDumpFormatFlags(::core::mem::transmute_copy(&formatflags)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberTextReplacements<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, numrepl: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberTextReplacements(::core::mem::transmute_copy(&numrepl)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTextReplacement<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PSTR, index: u32, srcbuffer: super::super::super::Foundation::PSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTextReplacement(&*(&srctext as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), index, ::core::mem::transmute_copy(&srcbuffer), srcbuffersize, ::core::mem::transmute_copy(&srcsize), ::core::mem::transmute_copy(&dstbuffer), dstbuffersize, ::core::mem::transmute_copy(&dstsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetTextReplacement<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PSTR, dsttext: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetTextReplacement(&*(&srctext as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), &*(&dsttext as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveTextReplacements<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveTextReplacements() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputTextReplacements<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputTextReplacements(outputcontrol, flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetAssemblyOptions<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetAssemblyOptions(::core::mem::transmute_copy(&options)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddAssemblyOptions<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddAssemblyOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveAssemblyOptions<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveAssemblyOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetAssemblyOptions<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetAssemblyOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExpressionSyntax<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExpressionSyntax(::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetExpressionSyntax<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetExpressionSyntax(flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetExpressionSyntaxByName<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, abbrevname: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetExpressionSyntaxByName(&*(&abbrevname as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberExpressionSyntaxes<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberExpressionSyntaxes(::core::mem::transmute_copy(&number)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExpressionSyntaxNames<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExpressionSyntaxNames(index, ::core::mem::transmute_copy(&fullnamebuffer), fullnamebuffersize, ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), abbrevnamebuffersize, ::core::mem::transmute_copy(&abbrevnamesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberEvents<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, events: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberEvents(::core::mem::transmute_copy(&events)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventIndexDescription<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, descsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventIndexDescription(index, which, &*(&buffer as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), buffersize, ::core::mem::transmute_copy(&descsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentEventIndex<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentEventIndex(::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetNextEventIndex<Impl: IDebugControl3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, relation: u32, value: u32, nextindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetNextEventIndex(relation, value, ::core::mem::transmute_copy(&nextindex)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            base.0,
            base.1,
            base.2,
            base.3,
            ::windows::core::GetRuntimeClassName::<IDebugControl3>,
            base.5,
            GetInterrupt::<Impl, OFFSET>,
            SetInterrupt::<Impl, OFFSET>,
            GetInterruptTimeout::<Impl, OFFSET>,
            SetInterruptTimeout::<Impl, OFFSET>,
            GetLogFile::<Impl, OFFSET>,
            OpenLogFile::<Impl, OFFSET>,
            CloseLogFile::<Impl, OFFSET>,
            GetLogMask::<Impl, OFFSET>,
            SetLogMask::<Impl, OFFSET>,
            Input::<Impl, OFFSET>,
            ReturnInput::<Impl, OFFSET>,
            Output::<Impl, OFFSET>,
            OutputVaList::<Impl, OFFSET>,
            ControlledOutput::<Impl, OFFSET>,
            ControlledOutputVaList::<Impl, OFFSET>,
            OutputPrompt::<Impl, OFFSET>,
            OutputPromptVaList::<Impl, OFFSET>,
            GetPromptText::<Impl, OFFSET>,
            OutputCurrentState::<Impl, OFFSET>,
            OutputVersionInformation::<Impl, OFFSET>,
            GetNotifyEventHandle::<Impl, OFFSET>,
            SetNotifyEventHandle::<Impl, OFFSET>,
            Assemble::<Impl, OFFSET>,
            Disassemble::<Impl, OFFSET>,
            GetDisassembleEffectiveOffset::<Impl, OFFSET>,
            OutputDisassembly::<Impl, OFFSET>,
            OutputDisassemblyLines::<Impl, OFFSET>,
            GetNearInstruction::<Impl, OFFSET>,
            GetStackTrace::<Impl, OFFSET>,
            GetReturnOffset::<Impl, OFFSET>,
            OutputStackTrace::<Impl, OFFSET>,
            GetDebuggeeType::<Impl, OFFSET>,
            GetActualProcessorType::<Impl, OFFSET>,
            GetExecutingProcessorType::<Impl, OFFSET>,
            GetNumberPossibleExecutingProcessorTypes::<Impl, OFFSET>,
            GetPossibleExecutingProcessorTypes::<Impl, OFFSET>,
            GetNumberProcessors::<Impl, OFFSET>,
            GetSystemVersion::<Impl, OFFSET>,
            GetPageSize::<Impl, OFFSET>,
            IsPointer64Bit::<Impl, OFFSET>,
            ReadBugCheckData::<Impl, OFFSET>,
            GetNumberSupportedProcessorTypes::<Impl, OFFSET>,
            GetSupportedProcessorTypes::<Impl, OFFSET>,
            GetProcessorTypeNames::<Impl, OFFSET>,
            GetEffectiveProcessorType::<Impl, OFFSET>,
            SetEffectiveProcessorType::<Impl, OFFSET>,
            GetExecutionStatus::<Impl, OFFSET>,
            SetExecutionStatus::<Impl, OFFSET>,
            GetCodeLevel::<Impl, OFFSET>,
            SetCodeLevel::<Impl, OFFSET>,
            GetEngineOptions::<Impl, OFFSET>,
            AddEngineOptions::<Impl, OFFSET>,
            RemoveEngineOptions::<Impl, OFFSET>,
            SetEngineOptions::<Impl, OFFSET>,
            GetSystemErrorControl::<Impl, OFFSET>,
            SetSystemErrorControl::<Impl, OFFSET>,
            GetTextMacro::<Impl, OFFSET>,
            SetTextMacro::<Impl, OFFSET>,
            GetRadix::<Impl, OFFSET>,
            SetRadix::<Impl, OFFSET>,
            Evaluate::<Impl, OFFSET>,
            CoerceValue::<Impl, OFFSET>,
            CoerceValues::<Impl, OFFSET>,
            Execute::<Impl, OFFSET>,
            ExecuteCommandFile::<Impl, OFFSET>,
            GetNumberBreakpoints::<Impl, OFFSET>,
            GetBreakpointByIndex::<Impl, OFFSET>,
            GetBreakpointById::<Impl, OFFSET>,
            GetBreakpointParameters::<Impl, OFFSET>,
            AddBreakpoint::<Impl, OFFSET>,
            RemoveBreakpoint::<Impl, OFFSET>,
            AddExtension::<Impl, OFFSET>,
            RemoveExtension::<Impl, OFFSET>,
            GetExtensionByPath::<Impl, OFFSET>,
            CallExtension::<Impl, OFFSET>,
            GetExtensionFunction::<Impl, OFFSET>,
            GetWindbgExtensionApis32::<Impl, OFFSET>,
            GetWindbgExtensionApis64::<Impl, OFFSET>,
            GetNumberEventFilters::<Impl, OFFSET>,
            GetEventFilterText::<Impl, OFFSET>,
            GetEventFilterCommand::<Impl, OFFSET>,
            SetEventFilterCommand::<Impl, OFFSET>,
            GetSpecificFilterParameters::<Impl, OFFSET>,
            SetSpecificFilterParameters::<Impl, OFFSET>,
            GetSpecificFilterArgument::<Impl, OFFSET>,
            SetSpecificFilterArgument::<Impl, OFFSET>,
            GetExceptionFilterParameters::<Impl, OFFSET>,
            SetExceptionFilterParameters::<Impl, OFFSET>,
            GetExceptionFilterSecondCommand::<Impl, OFFSET>,
            SetExceptionFilterSecondCommand::<Impl, OFFSET>,
            WaitForEvent::<Impl, OFFSET>,
            GetLastEventInformation::<Impl, OFFSET>,
            GetCurrentTimeDate::<Impl, OFFSET>,
            GetCurrentSystemUpTime::<Impl, OFFSET>,
            GetDumpFormatFlags::<Impl, OFFSET>,
            GetNumberTextReplacements::<Impl, OFFSET>,
            GetTextReplacement::<Impl, OFFSET>,
            SetTextReplacement::<Impl, OFFSET>,
            RemoveTextReplacements::<Impl, OFFSET>,
            OutputTextReplacements::<Impl, OFFSET>,
            GetAssemblyOptions::<Impl, OFFSET>,
            AddAssemblyOptions::<Impl, OFFSET>,
            RemoveAssemblyOptions::<Impl, OFFSET>,
            SetAssemblyOptions::<Impl, OFFSET>,
            GetExpressionSyntax::<Impl, OFFSET>,
            SetExpressionSyntax::<Impl, OFFSET>,
            SetExpressionSyntaxByName::<Impl, OFFSET>,
            GetNumberExpressionSyntaxes::<Impl, OFFSET>,
            GetExpressionSyntaxNames::<Impl, OFFSET>,
            GetNumberEvents::<Impl, OFFSET>,
            GetEventIndexDescription::<Impl, OFFSET>,
            GetCurrentEventIndex::<Impl, OFFSET>,
            SetNextEventIndex::<Impl, OFFSET>,
        )
    }
}
pub trait IDebugControl4Impl: Sized {
    fn GetInterrupt();
    fn SetInterrupt();
    fn GetInterruptTimeout();
    fn SetInterruptTimeout();
    fn GetLogFile();
    fn OpenLogFile();
    fn CloseLogFile();
    fn GetLogMask();
    fn SetLogMask();
    fn Input();
    fn ReturnInput();
    fn Output();
    fn OutputVaList();
    fn ControlledOutput();
    fn ControlledOutputVaList();
    fn OutputPrompt();
    fn OutputPromptVaList();
    fn GetPromptText();
    fn OutputCurrentState();
    fn OutputVersionInformation();
    fn GetNotifyEventHandle();
    fn SetNotifyEventHandle();
    fn Assemble();
    fn Disassemble();
    fn GetDisassembleEffectiveOffset();
    fn OutputDisassembly();
    fn OutputDisassemblyLines();
    fn GetNearInstruction();
    fn GetStackTrace();
    fn GetReturnOffset();
    fn OutputStackTrace();
    fn GetDebuggeeType();
    fn GetActualProcessorType();
    fn GetExecutingProcessorType();
    fn GetNumberPossibleExecutingProcessorTypes();
    fn GetPossibleExecutingProcessorTypes();
    fn GetNumberProcessors();
    fn GetSystemVersion();
    fn GetPageSize();
    fn IsPointer64Bit();
    fn ReadBugCheckData();
    fn GetNumberSupportedProcessorTypes();
    fn GetSupportedProcessorTypes();
    fn GetProcessorTypeNames();
    fn GetEffectiveProcessorType();
    fn SetEffectiveProcessorType();
    fn GetExecutionStatus();
    fn SetExecutionStatus();
    fn GetCodeLevel();
    fn SetCodeLevel();
    fn GetEngineOptions();
    fn AddEngineOptions();
    fn RemoveEngineOptions();
    fn SetEngineOptions();
    fn GetSystemErrorControl();
    fn SetSystemErrorControl();
    fn GetTextMacro();
    fn SetTextMacro();
    fn GetRadix();
    fn SetRadix();
    fn Evaluate();
    fn CoerceValue();
    fn CoerceValues();
    fn Execute();
    fn ExecuteCommandFile();
    fn GetNumberBreakpoints();
    fn GetBreakpointByIndex();
    fn GetBreakpointById();
    fn GetBreakpointParameters();
    fn AddBreakpoint();
    fn RemoveBreakpoint();
    fn AddExtension();
    fn RemoveExtension();
    fn GetExtensionByPath();
    fn CallExtension();
    fn GetExtensionFunction();
    fn GetWindbgExtensionApis32();
    fn GetWindbgExtensionApis64();
    fn GetNumberEventFilters();
    fn GetEventFilterText();
    fn GetEventFilterCommand();
    fn SetEventFilterCommand();
    fn GetSpecificFilterParameters();
    fn SetSpecificFilterParameters();
    fn GetSpecificFilterArgument();
    fn SetSpecificFilterArgument();
    fn GetExceptionFilterParameters();
    fn SetExceptionFilterParameters();
    fn GetExceptionFilterSecondCommand();
    fn SetExceptionFilterSecondCommand();
    fn WaitForEvent();
    fn GetLastEventInformation();
    fn GetCurrentTimeDate();
    fn GetCurrentSystemUpTime();
    fn GetDumpFormatFlags();
    fn GetNumberTextReplacements();
    fn GetTextReplacement();
    fn SetTextReplacement();
    fn RemoveTextReplacements();
    fn OutputTextReplacements();
    fn GetAssemblyOptions();
    fn AddAssemblyOptions();
    fn RemoveAssemblyOptions();
    fn SetAssemblyOptions();
    fn GetExpressionSyntax();
    fn SetExpressionSyntax();
    fn SetExpressionSyntaxByName();
    fn GetNumberExpressionSyntaxes();
    fn GetExpressionSyntaxNames();
    fn GetNumberEvents();
    fn GetEventIndexDescription();
    fn GetCurrentEventIndex();
    fn SetNextEventIndex();
    fn GetLogFileWide();
    fn OpenLogFileWide();
    fn InputWide();
    fn ReturnInputWide();
    fn OutputWide();
    fn OutputVaListWide();
    fn ControlledOutputWide();
    fn ControlledOutputVaListWide();
    fn OutputPromptWide();
    fn OutputPromptVaListWide();
    fn GetPromptTextWide();
    fn AssembleWide();
    fn DisassembleWide();
    fn GetProcessorTypeNamesWide();
    fn GetTextMacroWide();
    fn SetTextMacroWide();
    fn EvaluateWide();
    fn ExecuteWide();
    fn ExecuteCommandFileWide();
    fn GetBreakpointByIndex2();
    fn GetBreakpointById2();
    fn AddBreakpoint2();
    fn RemoveBreakpoint2();
    fn AddExtensionWide();
    fn GetExtensionByPathWide();
    fn CallExtensionWide();
    fn GetExtensionFunctionWide();
    fn GetEventFilterTextWide();
    fn GetEventFilterCommandWide();
    fn SetEventFilterCommandWide();
    fn GetSpecificFilterArgumentWide();
    fn SetSpecificFilterArgumentWide();
    fn GetExceptionFilterSecondCommandWide();
    fn SetExceptionFilterSecondCommandWide();
    fn GetLastEventInformationWide();
    fn GetTextReplacementWide();
    fn SetTextReplacementWide();
    fn SetExpressionSyntaxByNameWide();
    fn GetExpressionSyntaxNamesWide();
    fn GetEventIndexDescriptionWide();
    fn GetLogFile2();
    fn OpenLogFile2();
    fn GetLogFile2Wide();
    fn OpenLogFile2Wide();
    fn GetSystemVersionValues();
    fn GetSystemVersionString();
    fn GetSystemVersionStringWide();
    fn GetContextStackTrace();
    fn OutputContextStackTrace();
    fn GetStoredEventInformation();
    fn GetManagedStatus();
    fn GetManagedStatusWide();
    fn ResetManagedStatus();
}
impl ::windows::core::RuntimeName for IDebugControl4 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugControl4";
}
impl IDebugControl4Vtbl {
    pub const fn new<Impl: IDebugControl4Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugControl4Vtbl {
        unsafe extern "system" fn GetInterrupt<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetInterrupt() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetInterrupt<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetInterrupt(flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetInterruptTimeout<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, seconds: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetInterruptTimeout(::core::mem::transmute_copy(&seconds)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetInterruptTimeout<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, seconds: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetInterruptTimeout(seconds) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLogFile<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLogFile(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&append)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OpenLogFile<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PSTR, append: super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OpenLogFile(&*(&file as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), &*(&append as *const <super::super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CloseLogFile<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CloseLogFile() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLogMask<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLogMask(::core::mem::transmute_copy(&mask)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetLogMask<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetLogMask(mask) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Input<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Input(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&inputsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReturnInput<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReturnInput(&*(&buffer as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Output<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Output(mask, &*(&format as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputVaList<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputVaList(mask, &*(&format as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), args) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ControlledOutput<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ControlledOutput(outputcontrol, mask, &*(&format as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ControlledOutputVaList<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ControlledOutputVaList(outputcontrol, mask, &*(&format as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), args) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputPrompt<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputPrompt(outputcontrol, &*(&format as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputPromptVaList<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputPromptVaList(outputcontrol, &*(&format as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), args) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPromptText<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetPromptText(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&textsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputCurrentState<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputCurrentState(outputcontrol, flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputVersionInformation<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputVersionInformation(outputcontrol) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNotifyEventHandle<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNotifyEventHandle(::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetNotifyEventHandle<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetNotifyEventHandle(handle) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Assemble<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, instr: super::super::super::Foundation::PSTR, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Assemble(offset, &*(&instr as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&endoffset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Disassemble<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Disassemble(offset, flags, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&disassemblysize), ::core::mem::transmute_copy(&endoffset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDisassembleEffectiveOffset<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDisassembleEffectiveOffset(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputDisassembly<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, flags: u32, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputDisassembly(outputcontrol, offset, flags, ::core::mem::transmute_copy(&endoffset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputDisassemblyLines<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputDisassemblyLines(outputcontrol, previouslines, totallines, offset, flags, ::core::mem::transmute_copy(&offsetline), ::core::mem::transmute_copy(&startoffset), ::core::mem::transmute_copy(&endoffset), ::core::mem::transmute_copy(&lineoffsets)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNearInstruction<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, nearoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNearInstruction(offset, delta, ::core::mem::transmute_copy(&nearoffset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetStackTrace<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetStackTrace(frameoffset, stackoffset, instructionoffset, ::core::mem::transmute_copy(&frames), framessize, ::core::mem::transmute_copy(&framesfilled)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetReturnOffset<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetReturnOffset(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputStackTrace<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputStackTrace(outputcontrol, &*(&frames as *const <DEBUG_STACK_FRAME as ::windows::core::Abi>::Abi as *const <DEBUG_STACK_FRAME as ::windows::core::DefaultType>::DefaultType), framessize, flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDebuggeeType<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, class: *mut u32, qualifier: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDebuggeeType(::core::mem::transmute_copy(&class), ::core::mem::transmute_copy(&qualifier)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetActualProcessorType<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetActualProcessorType(::core::mem::transmute_copy(&r#type)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExecutingProcessorType<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExecutingProcessorType(::core::mem::transmute_copy(&r#type)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberPossibleExecutingProcessorTypes<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberPossibleExecutingProcessorTypes(::core::mem::transmute_copy(&number)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPossibleExecutingProcessorTypes<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetPossibleExecutingProcessorTypes(start, count, ::core::mem::transmute_copy(&types)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberProcessors<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberProcessors(::core::mem::transmute_copy(&number)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSystemVersion<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: super::super::super::Foundation::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: super::super::super::Foundation::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSystemVersion(::core::mem::transmute_copy(&platformid), ::core::mem::transmute_copy(&major), ::core::mem::transmute_copy(&minor), ::core::mem::transmute_copy(&servicepackstring), servicepackstringsize, ::core::mem::transmute_copy(&servicepackstringused), ::core::mem::transmute_copy(&servicepacknumber), ::core::mem::transmute_copy(&buildstring), buildstringsize, ::core::mem::transmute_copy(&buildstringused)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPageSize<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, size: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetPageSize(::core::mem::transmute_copy(&size)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsPointer64Bit<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).IsPointer64Bit() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadBugCheckData<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadBugCheckData(::core::mem::transmute_copy(&code), ::core::mem::transmute_copy(&arg1), ::core::mem::transmute_copy(&arg2), ::core::mem::transmute_copy(&arg3), ::core::mem::transmute_copy(&arg4)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberSupportedProcessorTypes<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberSupportedProcessorTypes(::core::mem::transmute_copy(&number)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSupportedProcessorTypes<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSupportedProcessorTypes(start, count, ::core::mem::transmute_copy(&types)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessorTypeNames<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetProcessorTypeNames(r#type, ::core::mem::transmute_copy(&fullnamebuffer), fullnamebuffersize, ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), abbrevnamebuffersize, ::core::mem::transmute_copy(&abbrevnamesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEffectiveProcessorType<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEffectiveProcessorType(::core::mem::transmute_copy(&r#type)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEffectiveProcessorType<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetEffectiveProcessorType(r#type) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExecutionStatus<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, status: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExecutionStatus(::core::mem::transmute_copy(&status)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetExecutionStatus<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, status: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetExecutionStatus(status) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCodeLevel<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, level: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCodeLevel(::core::mem::transmute_copy(&level)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetCodeLevel<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, level: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetCodeLevel(level) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEngineOptions<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEngineOptions(::core::mem::transmute_copy(&options)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddEngineOptions<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddEngineOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveEngineOptions<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveEngineOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEngineOptions<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetEngineOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSystemErrorControl<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSystemErrorControl(::core::mem::transmute_copy(&outputlevel), ::core::mem::transmute_copy(&breaklevel)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSystemErrorControl<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputlevel: u32, breaklevel: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetSystemErrorControl(outputlevel, breaklevel) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTextMacro<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, slot: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTextMacro(slot, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&macrosize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetTextMacro<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, slot: u32, r#macro: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetTextMacro(slot, &*(&r#macro as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRadix<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, radix: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetRadix(::core::mem::transmute_copy(&radix)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetRadix<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, radix: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetRadix(radix) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Evaluate<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, expression: super::super::super::Foundation::PSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Evaluate(&*(&expression as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), desiredtype, ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&remainderindex)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CoerceValue<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#in: *const DEBUG_VALUE, outtype: u32, out: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CoerceValue(&*(&r#in as *const <DEBUG_VALUE as ::windows::core::Abi>::Abi as *const <DEBUG_VALUE as ::windows::core::DefaultType>::DefaultType), outtype, ::core::mem::transmute_copy(&out)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CoerceValues<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CoerceValues(count, &*(&r#in as *const <DEBUG_VALUE as ::windows::core::Abi>::Abi as *const <DEBUG_VALUE as ::windows::core::DefaultType>::DefaultType), outtypes, ::core::mem::transmute_copy(&out)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Execute<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, command: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Execute(outputcontrol, &*(&command as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ExecuteCommandFile<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, commandfile: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ExecuteCommandFile(outputcontrol, &*(&commandfile as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberBreakpoints<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberBreakpoints(::core::mem::transmute_copy(&number)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointByIndex<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetBreakpointByIndex(index, ::core::mem::transmute_copy(&bp)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointById<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetBreakpointById(id, ::core::mem::transmute_copy(&bp)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointParameters<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetBreakpointParameters(count, ids, start, ::core::mem::transmute_copy(&params)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddBreakpoint<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32, desiredid: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddBreakpoint(r#type, desiredid, ::core::mem::transmute_copy(&bp)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveBreakpoint<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bp: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveBreakpoint(&*(&bp as *const <IDebugBreakpoint as ::windows::core::Abi>::Abi as *const <IDebugBreakpoint as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddExtension<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR, flags: u32, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddExtension(&*(&path as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveExtension<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveExtension(handle) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExtensionByPath<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExtensionByPath(&*(&path as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CallExtension<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, function: super::super::super::Foundation::PSTR, arguments: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CallExtension(handle, &*(&function as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), &*(&arguments as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExtensionFunction<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, funcname: super::super::super::Foundation::PSTR, function: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExtensionFunction(handle, &*(&funcname as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&function)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetWindbgExtensionApis32<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetWindbgExtensionApis32(&*(&api as *const <WINDBG_EXTENSION_APIS32 as ::windows::core::Abi>::Abi as *const <WINDBG_EXTENSION_APIS32 as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetWindbgExtensionApis64<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetWindbgExtensionApis64(&*(&api as *const <WINDBG_EXTENSION_APIS64 as ::windows::core::Abi>::Abi as *const <WINDBG_EXTENSION_APIS64 as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberEventFilters<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberEventFilters(::core::mem::transmute_copy(&specificevents), ::core::mem::transmute_copy(&specificexceptions), ::core::mem::transmute_copy(&arbitraryexceptions)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventFilterText<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventFilterText(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&textsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventFilterCommand<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventFilterCommand(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&commandsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEventFilterCommand<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetEventFilterCommand(index, &*(&command as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSpecificFilterParameters<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSpecificFilterParameters(start, count, ::core::mem::transmute_copy(&params)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSpecificFilterParameters<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetSpecificFilterParameters(start, count, &*(&params as *const <DEBUG_SPECIFIC_FILTER_PARAMETERS as ::windows::core::Abi>::Abi as *const <DEBUG_SPECIFIC_FILTER_PARAMETERS as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSpecificFilterArgument<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSpecificFilterArgument(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&argumentsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSpecificFilterArgument<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, argument: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetSpecificFilterArgument(index, &*(&argument as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExceptionFilterParameters<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExceptionFilterParameters(count, codes, start, ::core::mem::transmute_copy(&params)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetExceptionFilterParameters<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetExceptionFilterParameters(count, &*(&params as *const <DEBUG_EXCEPTION_FILTER_PARAMETERS as ::windows::core::Abi>::Abi as *const <DEBUG_EXCEPTION_FILTER_PARAMETERS as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExceptionFilterSecondCommand<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExceptionFilterSecondCommand(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&commandsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetExceptionFilterSecondCommand<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetExceptionFilterSecondCommand(index, &*(&command as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WaitForEvent<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WaitForEvent(flags, timeout) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLastEventInformation<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLastEventInformation(::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid), ::core::mem::transmute_copy(&extrainformation), extrainformationsize, ::core::mem::transmute_copy(&extrainformationused), ::core::mem::transmute_copy(&description), descriptionsize, ::core::mem::transmute_copy(&descriptionused)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentTimeDate<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, timedate: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentTimeDate(::core::mem::transmute_copy(&timedate)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentSystemUpTime<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, uptime: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentSystemUpTime(::core::mem::transmute_copy(&uptime)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDumpFormatFlags<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, formatflags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDumpFormatFlags(::core::mem::transmute_copy(&formatflags)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberTextReplacements<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, numrepl: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberTextReplacements(::core::mem::transmute_copy(&numrepl)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTextReplacement<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PSTR, index: u32, srcbuffer: super::super::super::Foundation::PSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTextReplacement(&*(&srctext as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), index, ::core::mem::transmute_copy(&srcbuffer), srcbuffersize, ::core::mem::transmute_copy(&srcsize), ::core::mem::transmute_copy(&dstbuffer), dstbuffersize, ::core::mem::transmute_copy(&dstsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetTextReplacement<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PSTR, dsttext: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetTextReplacement(&*(&srctext as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), &*(&dsttext as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveTextReplacements<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveTextReplacements() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputTextReplacements<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputTextReplacements(outputcontrol, flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetAssemblyOptions<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetAssemblyOptions(::core::mem::transmute_copy(&options)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddAssemblyOptions<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddAssemblyOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveAssemblyOptions<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveAssemblyOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetAssemblyOptions<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetAssemblyOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExpressionSyntax<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExpressionSyntax(::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetExpressionSyntax<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetExpressionSyntax(flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetExpressionSyntaxByName<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, abbrevname: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetExpressionSyntaxByName(&*(&abbrevname as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberExpressionSyntaxes<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberExpressionSyntaxes(::core::mem::transmute_copy(&number)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExpressionSyntaxNames<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExpressionSyntaxNames(index, ::core::mem::transmute_copy(&fullnamebuffer), fullnamebuffersize, ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), abbrevnamebuffersize, ::core::mem::transmute_copy(&abbrevnamesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberEvents<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, events: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberEvents(::core::mem::transmute_copy(&events)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventIndexDescription<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, descsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventIndexDescription(index, which, &*(&buffer as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), buffersize, ::core::mem::transmute_copy(&descsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentEventIndex<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentEventIndex(::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetNextEventIndex<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, relation: u32, value: u32, nextindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetNextEventIndex(relation, value, ::core::mem::transmute_copy(&nextindex)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLogFileWide<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLogFileWide(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&append)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OpenLogFileWide<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PWSTR, append: super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OpenLogFileWide(&*(&file as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&append as *const <super::super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn InputWide<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).InputWide(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&inputsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReturnInputWide<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReturnInputWide(&*(&buffer as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputWide<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputWide(mask, &*(&format as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputVaListWide<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputVaListWide(mask, &*(&format as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), args) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ControlledOutputWide<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ControlledOutputWide(outputcontrol, mask, &*(&format as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ControlledOutputVaListWide<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ControlledOutputVaListWide(outputcontrol, mask, &*(&format as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), args) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputPromptWide<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputPromptWide(outputcontrol, &*(&format as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputPromptVaListWide<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputPromptVaListWide(outputcontrol, &*(&format as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), args) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPromptTextWide<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetPromptTextWide(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&textsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AssembleWide<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, instr: super::super::super::Foundation::PWSTR, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AssembleWide(offset, &*(&instr as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&endoffset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DisassembleWide<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).DisassembleWide(offset, flags, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&disassemblysize), ::core::mem::transmute_copy(&endoffset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessorTypeNamesWide<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32, fullnamebuffer: super::super::super::Foundation::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetProcessorTypeNamesWide(r#type, ::core::mem::transmute_copy(&fullnamebuffer), fullnamebuffersize, ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), abbrevnamebuffersize, ::core::mem::transmute_copy(&abbrevnamesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTextMacroWide<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, slot: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTextMacroWide(slot, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&macrosize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetTextMacroWide<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, slot: u32, r#macro: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetTextMacroWide(slot, &*(&r#macro as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EvaluateWide<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, expression: super::super::super::Foundation::PWSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EvaluateWide(&*(&expression as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), desiredtype, ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&remainderindex)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ExecuteWide<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, command: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ExecuteWide(outputcontrol, &*(&command as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ExecuteCommandFileWide<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, commandfile: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ExecuteCommandFileWide(outputcontrol, &*(&commandfile as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointByIndex2<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetBreakpointByIndex2(index, ::core::mem::transmute_copy(&bp)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointById2<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetBreakpointById2(id, ::core::mem::transmute_copy(&bp)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddBreakpoint2<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32, desiredid: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddBreakpoint2(r#type, desiredid, ::core::mem::transmute_copy(&bp)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveBreakpoint2<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bp: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveBreakpoint2(&*(&bp as *const <IDebugBreakpoint2 as ::windows::core::Abi>::Abi as *const <IDebugBreakpoint2 as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddExtensionWide<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PWSTR, flags: u32, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddExtensionWide(&*(&path as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExtensionByPathWide<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PWSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExtensionByPathWide(&*(&path as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CallExtensionWide<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, function: super::super::super::Foundation::PWSTR, arguments: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CallExtensionWide(handle, &*(&function as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&arguments as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExtensionFunctionWide<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, funcname: super::super::super::Foundation::PWSTR, function: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExtensionFunctionWide(handle, &*(&funcname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&function)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventFilterTextWide<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventFilterTextWide(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&textsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventFilterCommandWide<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventFilterCommandWide(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&commandsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEventFilterCommandWide<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetEventFilterCommandWide(index, &*(&command as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSpecificFilterArgumentWide<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSpecificFilterArgumentWide(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&argumentsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSpecificFilterArgumentWide<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, argument: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetSpecificFilterArgumentWide(index, &*(&argument as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExceptionFilterSecondCommandWide<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExceptionFilterSecondCommandWide(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&commandsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetExceptionFilterSecondCommandWide<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetExceptionFilterSecondCommandWide(index, &*(&command as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLastEventInformationWide<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLastEventInformationWide(::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid), ::core::mem::transmute_copy(&extrainformation), extrainformationsize, ::core::mem::transmute_copy(&extrainformationused), ::core::mem::transmute_copy(&description), descriptionsize, ::core::mem::transmute_copy(&descriptionused)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTextReplacementWide<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PWSTR, index: u32, srcbuffer: super::super::super::Foundation::PWSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PWSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTextReplacementWide(&*(&srctext as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), index, ::core::mem::transmute_copy(&srcbuffer), srcbuffersize, ::core::mem::transmute_copy(&srcsize), ::core::mem::transmute_copy(&dstbuffer), dstbuffersize, ::core::mem::transmute_copy(&dstsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetTextReplacementWide<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PWSTR, dsttext: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetTextReplacementWide(&*(&srctext as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&dsttext as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetExpressionSyntaxByNameWide<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, abbrevname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetExpressionSyntaxByNameWide(&*(&abbrevname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExpressionSyntaxNamesWide<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, fullnamebuffer: super::super::super::Foundation::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExpressionSyntaxNamesWide(index, ::core::mem::transmute_copy(&fullnamebuffer), fullnamebuffersize, ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), abbrevnamebuffersize, ::core::mem::transmute_copy(&abbrevnamesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventIndexDescriptionWide<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, descsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventIndexDescriptionWide(index, which, &*(&buffer as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), buffersize, ::core::mem::transmute_copy(&descsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLogFile2<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLogFile2(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OpenLogFile2<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OpenLogFile2(&*(&file as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLogFile2Wide<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLogFile2Wide(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OpenLogFile2Wide<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OpenLogFile2Wide(&*(&file as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSystemVersionValues<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, platformid: *mut u32, win32major: *mut u32, win32minor: *mut u32, kdmajor: *mut u32, kdminor: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSystemVersionValues(::core::mem::transmute_copy(&platformid), ::core::mem::transmute_copy(&win32major), ::core::mem::transmute_copy(&win32minor), ::core::mem::transmute_copy(&kdmajor), ::core::mem::transmute_copy(&kdminor)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSystemVersionString<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSystemVersionString(which, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&stringsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSystemVersionStringWide<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSystemVersionStringWide(which, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&stringsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetContextStackTrace<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, startcontext: *const ::core::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framecontexts: *mut ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetContextStackTrace(&*(&startcontext as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), startcontextsize, ::core::mem::transmute_copy(&frames), framessize, ::core::mem::transmute_copy(&framecontexts), framecontextssize, framecontextsentrysize, ::core::mem::transmute_copy(&framesfilled)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputContextStackTrace<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, framecontexts: *const ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputContextStackTrace(outputcontrol, &*(&frames as *const <DEBUG_STACK_FRAME as ::windows::core::Abi>::Abi as *const <DEBUG_STACK_FRAME as ::windows::core::DefaultType>::DefaultType), framessize, &*(&framecontexts as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), framecontextssize, framecontextsentrysize, flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetStoredEventInformation<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, context: *mut ::core::ffi::c_void, contextsize: u32, contextused: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetStoredEventInformation(::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid), ::core::mem::transmute_copy(&context), contextsize, ::core::mem::transmute_copy(&contextused), ::core::mem::transmute_copy(&extrainformation), extrainformationsize, ::core::mem::transmute_copy(&extrainformationused)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetManagedStatus<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: *mut u32, whichstring: u32, string: super::super::super::Foundation::PSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetManagedStatus(::core::mem::transmute_copy(&flags), whichstring, ::core::mem::transmute_copy(&string), stringsize, ::core::mem::transmute_copy(&stringneeded)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetManagedStatusWide<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: *mut u32, whichstring: u32, string: super::super::super::Foundation::PWSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetManagedStatusWide(::core::mem::transmute_copy(&flags), whichstring, ::core::mem::transmute_copy(&string), stringsize, ::core::mem::transmute_copy(&stringneeded)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ResetManagedStatus<Impl: IDebugControl4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ResetManagedStatus(flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            base.0,
            base.1,
            base.2,
            base.3,
            ::windows::core::GetRuntimeClassName::<IDebugControl4>,
            base.5,
            GetInterrupt::<Impl, OFFSET>,
            SetInterrupt::<Impl, OFFSET>,
            GetInterruptTimeout::<Impl, OFFSET>,
            SetInterruptTimeout::<Impl, OFFSET>,
            GetLogFile::<Impl, OFFSET>,
            OpenLogFile::<Impl, OFFSET>,
            CloseLogFile::<Impl, OFFSET>,
            GetLogMask::<Impl, OFFSET>,
            SetLogMask::<Impl, OFFSET>,
            Input::<Impl, OFFSET>,
            ReturnInput::<Impl, OFFSET>,
            Output::<Impl, OFFSET>,
            OutputVaList::<Impl, OFFSET>,
            ControlledOutput::<Impl, OFFSET>,
            ControlledOutputVaList::<Impl, OFFSET>,
            OutputPrompt::<Impl, OFFSET>,
            OutputPromptVaList::<Impl, OFFSET>,
            GetPromptText::<Impl, OFFSET>,
            OutputCurrentState::<Impl, OFFSET>,
            OutputVersionInformation::<Impl, OFFSET>,
            GetNotifyEventHandle::<Impl, OFFSET>,
            SetNotifyEventHandle::<Impl, OFFSET>,
            Assemble::<Impl, OFFSET>,
            Disassemble::<Impl, OFFSET>,
            GetDisassembleEffectiveOffset::<Impl, OFFSET>,
            OutputDisassembly::<Impl, OFFSET>,
            OutputDisassemblyLines::<Impl, OFFSET>,
            GetNearInstruction::<Impl, OFFSET>,
            GetStackTrace::<Impl, OFFSET>,
            GetReturnOffset::<Impl, OFFSET>,
            OutputStackTrace::<Impl, OFFSET>,
            GetDebuggeeType::<Impl, OFFSET>,
            GetActualProcessorType::<Impl, OFFSET>,
            GetExecutingProcessorType::<Impl, OFFSET>,
            GetNumberPossibleExecutingProcessorTypes::<Impl, OFFSET>,
            GetPossibleExecutingProcessorTypes::<Impl, OFFSET>,
            GetNumberProcessors::<Impl, OFFSET>,
            GetSystemVersion::<Impl, OFFSET>,
            GetPageSize::<Impl, OFFSET>,
            IsPointer64Bit::<Impl, OFFSET>,
            ReadBugCheckData::<Impl, OFFSET>,
            GetNumberSupportedProcessorTypes::<Impl, OFFSET>,
            GetSupportedProcessorTypes::<Impl, OFFSET>,
            GetProcessorTypeNames::<Impl, OFFSET>,
            GetEffectiveProcessorType::<Impl, OFFSET>,
            SetEffectiveProcessorType::<Impl, OFFSET>,
            GetExecutionStatus::<Impl, OFFSET>,
            SetExecutionStatus::<Impl, OFFSET>,
            GetCodeLevel::<Impl, OFFSET>,
            SetCodeLevel::<Impl, OFFSET>,
            GetEngineOptions::<Impl, OFFSET>,
            AddEngineOptions::<Impl, OFFSET>,
            RemoveEngineOptions::<Impl, OFFSET>,
            SetEngineOptions::<Impl, OFFSET>,
            GetSystemErrorControl::<Impl, OFFSET>,
            SetSystemErrorControl::<Impl, OFFSET>,
            GetTextMacro::<Impl, OFFSET>,
            SetTextMacro::<Impl, OFFSET>,
            GetRadix::<Impl, OFFSET>,
            SetRadix::<Impl, OFFSET>,
            Evaluate::<Impl, OFFSET>,
            CoerceValue::<Impl, OFFSET>,
            CoerceValues::<Impl, OFFSET>,
            Execute::<Impl, OFFSET>,
            ExecuteCommandFile::<Impl, OFFSET>,
            GetNumberBreakpoints::<Impl, OFFSET>,
            GetBreakpointByIndex::<Impl, OFFSET>,
            GetBreakpointById::<Impl, OFFSET>,
            GetBreakpointParameters::<Impl, OFFSET>,
            AddBreakpoint::<Impl, OFFSET>,
            RemoveBreakpoint::<Impl, OFFSET>,
            AddExtension::<Impl, OFFSET>,
            RemoveExtension::<Impl, OFFSET>,
            GetExtensionByPath::<Impl, OFFSET>,
            CallExtension::<Impl, OFFSET>,
            GetExtensionFunction::<Impl, OFFSET>,
            GetWindbgExtensionApis32::<Impl, OFFSET>,
            GetWindbgExtensionApis64::<Impl, OFFSET>,
            GetNumberEventFilters::<Impl, OFFSET>,
            GetEventFilterText::<Impl, OFFSET>,
            GetEventFilterCommand::<Impl, OFFSET>,
            SetEventFilterCommand::<Impl, OFFSET>,
            GetSpecificFilterParameters::<Impl, OFFSET>,
            SetSpecificFilterParameters::<Impl, OFFSET>,
            GetSpecificFilterArgument::<Impl, OFFSET>,
            SetSpecificFilterArgument::<Impl, OFFSET>,
            GetExceptionFilterParameters::<Impl, OFFSET>,
            SetExceptionFilterParameters::<Impl, OFFSET>,
            GetExceptionFilterSecondCommand::<Impl, OFFSET>,
            SetExceptionFilterSecondCommand::<Impl, OFFSET>,
            WaitForEvent::<Impl, OFFSET>,
            GetLastEventInformation::<Impl, OFFSET>,
            GetCurrentTimeDate::<Impl, OFFSET>,
            GetCurrentSystemUpTime::<Impl, OFFSET>,
            GetDumpFormatFlags::<Impl, OFFSET>,
            GetNumberTextReplacements::<Impl, OFFSET>,
            GetTextReplacement::<Impl, OFFSET>,
            SetTextReplacement::<Impl, OFFSET>,
            RemoveTextReplacements::<Impl, OFFSET>,
            OutputTextReplacements::<Impl, OFFSET>,
            GetAssemblyOptions::<Impl, OFFSET>,
            AddAssemblyOptions::<Impl, OFFSET>,
            RemoveAssemblyOptions::<Impl, OFFSET>,
            SetAssemblyOptions::<Impl, OFFSET>,
            GetExpressionSyntax::<Impl, OFFSET>,
            SetExpressionSyntax::<Impl, OFFSET>,
            SetExpressionSyntaxByName::<Impl, OFFSET>,
            GetNumberExpressionSyntaxes::<Impl, OFFSET>,
            GetExpressionSyntaxNames::<Impl, OFFSET>,
            GetNumberEvents::<Impl, OFFSET>,
            GetEventIndexDescription::<Impl, OFFSET>,
            GetCurrentEventIndex::<Impl, OFFSET>,
            SetNextEventIndex::<Impl, OFFSET>,
            GetLogFileWide::<Impl, OFFSET>,
            OpenLogFileWide::<Impl, OFFSET>,
            InputWide::<Impl, OFFSET>,
            ReturnInputWide::<Impl, OFFSET>,
            OutputWide::<Impl, OFFSET>,
            OutputVaListWide::<Impl, OFFSET>,
            ControlledOutputWide::<Impl, OFFSET>,
            ControlledOutputVaListWide::<Impl, OFFSET>,
            OutputPromptWide::<Impl, OFFSET>,
            OutputPromptVaListWide::<Impl, OFFSET>,
            GetPromptTextWide::<Impl, OFFSET>,
            AssembleWide::<Impl, OFFSET>,
            DisassembleWide::<Impl, OFFSET>,
            GetProcessorTypeNamesWide::<Impl, OFFSET>,
            GetTextMacroWide::<Impl, OFFSET>,
            SetTextMacroWide::<Impl, OFFSET>,
            EvaluateWide::<Impl, OFFSET>,
            ExecuteWide::<Impl, OFFSET>,
            ExecuteCommandFileWide::<Impl, OFFSET>,
            GetBreakpointByIndex2::<Impl, OFFSET>,
            GetBreakpointById2::<Impl, OFFSET>,
            AddBreakpoint2::<Impl, OFFSET>,
            RemoveBreakpoint2::<Impl, OFFSET>,
            AddExtensionWide::<Impl, OFFSET>,
            GetExtensionByPathWide::<Impl, OFFSET>,
            CallExtensionWide::<Impl, OFFSET>,
            GetExtensionFunctionWide::<Impl, OFFSET>,
            GetEventFilterTextWide::<Impl, OFFSET>,
            GetEventFilterCommandWide::<Impl, OFFSET>,
            SetEventFilterCommandWide::<Impl, OFFSET>,
            GetSpecificFilterArgumentWide::<Impl, OFFSET>,
            SetSpecificFilterArgumentWide::<Impl, OFFSET>,
            GetExceptionFilterSecondCommandWide::<Impl, OFFSET>,
            SetExceptionFilterSecondCommandWide::<Impl, OFFSET>,
            GetLastEventInformationWide::<Impl, OFFSET>,
            GetTextReplacementWide::<Impl, OFFSET>,
            SetTextReplacementWide::<Impl, OFFSET>,
            SetExpressionSyntaxByNameWide::<Impl, OFFSET>,
            GetExpressionSyntaxNamesWide::<Impl, OFFSET>,
            GetEventIndexDescriptionWide::<Impl, OFFSET>,
            GetLogFile2::<Impl, OFFSET>,
            OpenLogFile2::<Impl, OFFSET>,
            GetLogFile2Wide::<Impl, OFFSET>,
            OpenLogFile2Wide::<Impl, OFFSET>,
            GetSystemVersionValues::<Impl, OFFSET>,
            GetSystemVersionString::<Impl, OFFSET>,
            GetSystemVersionStringWide::<Impl, OFFSET>,
            GetContextStackTrace::<Impl, OFFSET>,
            OutputContextStackTrace::<Impl, OFFSET>,
            GetStoredEventInformation::<Impl, OFFSET>,
            GetManagedStatus::<Impl, OFFSET>,
            GetManagedStatusWide::<Impl, OFFSET>,
            ResetManagedStatus::<Impl, OFFSET>,
        )
    }
}
pub trait IDebugControl5Impl: Sized {
    fn GetInterrupt();
    fn SetInterrupt();
    fn GetInterruptTimeout();
    fn SetInterruptTimeout();
    fn GetLogFile();
    fn OpenLogFile();
    fn CloseLogFile();
    fn GetLogMask();
    fn SetLogMask();
    fn Input();
    fn ReturnInput();
    fn Output();
    fn OutputVaList();
    fn ControlledOutput();
    fn ControlledOutputVaList();
    fn OutputPrompt();
    fn OutputPromptVaList();
    fn GetPromptText();
    fn OutputCurrentState();
    fn OutputVersionInformation();
    fn GetNotifyEventHandle();
    fn SetNotifyEventHandle();
    fn Assemble();
    fn Disassemble();
    fn GetDisassembleEffectiveOffset();
    fn OutputDisassembly();
    fn OutputDisassemblyLines();
    fn GetNearInstruction();
    fn GetStackTrace();
    fn GetReturnOffset();
    fn OutputStackTrace();
    fn GetDebuggeeType();
    fn GetActualProcessorType();
    fn GetExecutingProcessorType();
    fn GetNumberPossibleExecutingProcessorTypes();
    fn GetPossibleExecutingProcessorTypes();
    fn GetNumberProcessors();
    fn GetSystemVersion();
    fn GetPageSize();
    fn IsPointer64Bit();
    fn ReadBugCheckData();
    fn GetNumberSupportedProcessorTypes();
    fn GetSupportedProcessorTypes();
    fn GetProcessorTypeNames();
    fn GetEffectiveProcessorType();
    fn SetEffectiveProcessorType();
    fn GetExecutionStatus();
    fn SetExecutionStatus();
    fn GetCodeLevel();
    fn SetCodeLevel();
    fn GetEngineOptions();
    fn AddEngineOptions();
    fn RemoveEngineOptions();
    fn SetEngineOptions();
    fn GetSystemErrorControl();
    fn SetSystemErrorControl();
    fn GetTextMacro();
    fn SetTextMacro();
    fn GetRadix();
    fn SetRadix();
    fn Evaluate();
    fn CoerceValue();
    fn CoerceValues();
    fn Execute();
    fn ExecuteCommandFile();
    fn GetNumberBreakpoints();
    fn GetBreakpointByIndex();
    fn GetBreakpointById();
    fn GetBreakpointParameters();
    fn AddBreakpoint();
    fn RemoveBreakpoint();
    fn AddExtension();
    fn RemoveExtension();
    fn GetExtensionByPath();
    fn CallExtension();
    fn GetExtensionFunction();
    fn GetWindbgExtensionApis32();
    fn GetWindbgExtensionApis64();
    fn GetNumberEventFilters();
    fn GetEventFilterText();
    fn GetEventFilterCommand();
    fn SetEventFilterCommand();
    fn GetSpecificFilterParameters();
    fn SetSpecificFilterParameters();
    fn GetSpecificFilterArgument();
    fn SetSpecificFilterArgument();
    fn GetExceptionFilterParameters();
    fn SetExceptionFilterParameters();
    fn GetExceptionFilterSecondCommand();
    fn SetExceptionFilterSecondCommand();
    fn WaitForEvent();
    fn GetLastEventInformation();
    fn GetCurrentTimeDate();
    fn GetCurrentSystemUpTime();
    fn GetDumpFormatFlags();
    fn GetNumberTextReplacements();
    fn GetTextReplacement();
    fn SetTextReplacement();
    fn RemoveTextReplacements();
    fn OutputTextReplacements();
    fn GetAssemblyOptions();
    fn AddAssemblyOptions();
    fn RemoveAssemblyOptions();
    fn SetAssemblyOptions();
    fn GetExpressionSyntax();
    fn SetExpressionSyntax();
    fn SetExpressionSyntaxByName();
    fn GetNumberExpressionSyntaxes();
    fn GetExpressionSyntaxNames();
    fn GetNumberEvents();
    fn GetEventIndexDescription();
    fn GetCurrentEventIndex();
    fn SetNextEventIndex();
    fn GetLogFileWide();
    fn OpenLogFileWide();
    fn InputWide();
    fn ReturnInputWide();
    fn OutputWide();
    fn OutputVaListWide();
    fn ControlledOutputWide();
    fn ControlledOutputVaListWide();
    fn OutputPromptWide();
    fn OutputPromptVaListWide();
    fn GetPromptTextWide();
    fn AssembleWide();
    fn DisassembleWide();
    fn GetProcessorTypeNamesWide();
    fn GetTextMacroWide();
    fn SetTextMacroWide();
    fn EvaluateWide();
    fn ExecuteWide();
    fn ExecuteCommandFileWide();
    fn GetBreakpointByIndex2();
    fn GetBreakpointById2();
    fn AddBreakpoint2();
    fn RemoveBreakpoint2();
    fn AddExtensionWide();
    fn GetExtensionByPathWide();
    fn CallExtensionWide();
    fn GetExtensionFunctionWide();
    fn GetEventFilterTextWide();
    fn GetEventFilterCommandWide();
    fn SetEventFilterCommandWide();
    fn GetSpecificFilterArgumentWide();
    fn SetSpecificFilterArgumentWide();
    fn GetExceptionFilterSecondCommandWide();
    fn SetExceptionFilterSecondCommandWide();
    fn GetLastEventInformationWide();
    fn GetTextReplacementWide();
    fn SetTextReplacementWide();
    fn SetExpressionSyntaxByNameWide();
    fn GetExpressionSyntaxNamesWide();
    fn GetEventIndexDescriptionWide();
    fn GetLogFile2();
    fn OpenLogFile2();
    fn GetLogFile2Wide();
    fn OpenLogFile2Wide();
    fn GetSystemVersionValues();
    fn GetSystemVersionString();
    fn GetSystemVersionStringWide();
    fn GetContextStackTrace();
    fn OutputContextStackTrace();
    fn GetStoredEventInformation();
    fn GetManagedStatus();
    fn GetManagedStatusWide();
    fn ResetManagedStatus();
    fn GetStackTraceEx();
    fn OutputStackTraceEx();
    fn GetContextStackTraceEx();
    fn OutputContextStackTraceEx();
    fn GetBreakpointByGuid();
}
impl ::windows::core::RuntimeName for IDebugControl5 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugControl5";
}
impl IDebugControl5Vtbl {
    pub const fn new<Impl: IDebugControl5Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugControl5Vtbl {
        unsafe extern "system" fn GetInterrupt<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetInterrupt() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetInterrupt<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetInterrupt(flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetInterruptTimeout<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, seconds: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetInterruptTimeout(::core::mem::transmute_copy(&seconds)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetInterruptTimeout<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, seconds: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetInterruptTimeout(seconds) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLogFile<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLogFile(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&append)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OpenLogFile<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PSTR, append: super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OpenLogFile(&*(&file as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), &*(&append as *const <super::super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CloseLogFile<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CloseLogFile() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLogMask<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLogMask(::core::mem::transmute_copy(&mask)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetLogMask<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetLogMask(mask) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Input<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Input(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&inputsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReturnInput<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReturnInput(&*(&buffer as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Output<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Output(mask, &*(&format as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputVaList<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputVaList(mask, &*(&format as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), args) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ControlledOutput<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ControlledOutput(outputcontrol, mask, &*(&format as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ControlledOutputVaList<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ControlledOutputVaList(outputcontrol, mask, &*(&format as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), args) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputPrompt<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputPrompt(outputcontrol, &*(&format as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputPromptVaList<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputPromptVaList(outputcontrol, &*(&format as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), args) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPromptText<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetPromptText(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&textsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputCurrentState<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputCurrentState(outputcontrol, flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputVersionInformation<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputVersionInformation(outputcontrol) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNotifyEventHandle<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNotifyEventHandle(::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetNotifyEventHandle<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetNotifyEventHandle(handle) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Assemble<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, instr: super::super::super::Foundation::PSTR, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Assemble(offset, &*(&instr as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&endoffset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Disassemble<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Disassemble(offset, flags, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&disassemblysize), ::core::mem::transmute_copy(&endoffset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDisassembleEffectiveOffset<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDisassembleEffectiveOffset(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputDisassembly<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, flags: u32, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputDisassembly(outputcontrol, offset, flags, ::core::mem::transmute_copy(&endoffset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputDisassemblyLines<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputDisassemblyLines(outputcontrol, previouslines, totallines, offset, flags, ::core::mem::transmute_copy(&offsetline), ::core::mem::transmute_copy(&startoffset), ::core::mem::transmute_copy(&endoffset), ::core::mem::transmute_copy(&lineoffsets)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNearInstruction<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, nearoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNearInstruction(offset, delta, ::core::mem::transmute_copy(&nearoffset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetStackTrace<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetStackTrace(frameoffset, stackoffset, instructionoffset, ::core::mem::transmute_copy(&frames), framessize, ::core::mem::transmute_copy(&framesfilled)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetReturnOffset<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetReturnOffset(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputStackTrace<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputStackTrace(outputcontrol, &*(&frames as *const <DEBUG_STACK_FRAME as ::windows::core::Abi>::Abi as *const <DEBUG_STACK_FRAME as ::windows::core::DefaultType>::DefaultType), framessize, flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDebuggeeType<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, class: *mut u32, qualifier: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDebuggeeType(::core::mem::transmute_copy(&class), ::core::mem::transmute_copy(&qualifier)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetActualProcessorType<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetActualProcessorType(::core::mem::transmute_copy(&r#type)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExecutingProcessorType<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExecutingProcessorType(::core::mem::transmute_copy(&r#type)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberPossibleExecutingProcessorTypes<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberPossibleExecutingProcessorTypes(::core::mem::transmute_copy(&number)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPossibleExecutingProcessorTypes<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetPossibleExecutingProcessorTypes(start, count, ::core::mem::transmute_copy(&types)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberProcessors<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberProcessors(::core::mem::transmute_copy(&number)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSystemVersion<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: super::super::super::Foundation::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: super::super::super::Foundation::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSystemVersion(::core::mem::transmute_copy(&platformid), ::core::mem::transmute_copy(&major), ::core::mem::transmute_copy(&minor), ::core::mem::transmute_copy(&servicepackstring), servicepackstringsize, ::core::mem::transmute_copy(&servicepackstringused), ::core::mem::transmute_copy(&servicepacknumber), ::core::mem::transmute_copy(&buildstring), buildstringsize, ::core::mem::transmute_copy(&buildstringused)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPageSize<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, size: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetPageSize(::core::mem::transmute_copy(&size)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsPointer64Bit<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).IsPointer64Bit() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadBugCheckData<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadBugCheckData(::core::mem::transmute_copy(&code), ::core::mem::transmute_copy(&arg1), ::core::mem::transmute_copy(&arg2), ::core::mem::transmute_copy(&arg3), ::core::mem::transmute_copy(&arg4)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberSupportedProcessorTypes<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberSupportedProcessorTypes(::core::mem::transmute_copy(&number)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSupportedProcessorTypes<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSupportedProcessorTypes(start, count, ::core::mem::transmute_copy(&types)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessorTypeNames<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetProcessorTypeNames(r#type, ::core::mem::transmute_copy(&fullnamebuffer), fullnamebuffersize, ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), abbrevnamebuffersize, ::core::mem::transmute_copy(&abbrevnamesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEffectiveProcessorType<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEffectiveProcessorType(::core::mem::transmute_copy(&r#type)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEffectiveProcessorType<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetEffectiveProcessorType(r#type) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExecutionStatus<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, status: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExecutionStatus(::core::mem::transmute_copy(&status)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetExecutionStatus<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, status: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetExecutionStatus(status) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCodeLevel<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, level: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCodeLevel(::core::mem::transmute_copy(&level)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetCodeLevel<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, level: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetCodeLevel(level) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEngineOptions<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEngineOptions(::core::mem::transmute_copy(&options)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddEngineOptions<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddEngineOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveEngineOptions<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveEngineOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEngineOptions<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetEngineOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSystemErrorControl<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSystemErrorControl(::core::mem::transmute_copy(&outputlevel), ::core::mem::transmute_copy(&breaklevel)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSystemErrorControl<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputlevel: u32, breaklevel: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetSystemErrorControl(outputlevel, breaklevel) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTextMacro<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, slot: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTextMacro(slot, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&macrosize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetTextMacro<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, slot: u32, r#macro: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetTextMacro(slot, &*(&r#macro as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRadix<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, radix: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetRadix(::core::mem::transmute_copy(&radix)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetRadix<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, radix: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetRadix(radix) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Evaluate<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, expression: super::super::super::Foundation::PSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Evaluate(&*(&expression as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), desiredtype, ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&remainderindex)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CoerceValue<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#in: *const DEBUG_VALUE, outtype: u32, out: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CoerceValue(&*(&r#in as *const <DEBUG_VALUE as ::windows::core::Abi>::Abi as *const <DEBUG_VALUE as ::windows::core::DefaultType>::DefaultType), outtype, ::core::mem::transmute_copy(&out)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CoerceValues<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CoerceValues(count, &*(&r#in as *const <DEBUG_VALUE as ::windows::core::Abi>::Abi as *const <DEBUG_VALUE as ::windows::core::DefaultType>::DefaultType), outtypes, ::core::mem::transmute_copy(&out)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Execute<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, command: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Execute(outputcontrol, &*(&command as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ExecuteCommandFile<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, commandfile: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ExecuteCommandFile(outputcontrol, &*(&commandfile as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberBreakpoints<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberBreakpoints(::core::mem::transmute_copy(&number)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointByIndex<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetBreakpointByIndex(index, ::core::mem::transmute_copy(&bp)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointById<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetBreakpointById(id, ::core::mem::transmute_copy(&bp)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointParameters<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetBreakpointParameters(count, ids, start, ::core::mem::transmute_copy(&params)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddBreakpoint<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32, desiredid: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddBreakpoint(r#type, desiredid, ::core::mem::transmute_copy(&bp)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveBreakpoint<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bp: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveBreakpoint(&*(&bp as *const <IDebugBreakpoint as ::windows::core::Abi>::Abi as *const <IDebugBreakpoint as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddExtension<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR, flags: u32, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddExtension(&*(&path as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveExtension<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveExtension(handle) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExtensionByPath<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExtensionByPath(&*(&path as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CallExtension<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, function: super::super::super::Foundation::PSTR, arguments: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CallExtension(handle, &*(&function as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), &*(&arguments as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExtensionFunction<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, funcname: super::super::super::Foundation::PSTR, function: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExtensionFunction(handle, &*(&funcname as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&function)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetWindbgExtensionApis32<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetWindbgExtensionApis32(&*(&api as *const <WINDBG_EXTENSION_APIS32 as ::windows::core::Abi>::Abi as *const <WINDBG_EXTENSION_APIS32 as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetWindbgExtensionApis64<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetWindbgExtensionApis64(&*(&api as *const <WINDBG_EXTENSION_APIS64 as ::windows::core::Abi>::Abi as *const <WINDBG_EXTENSION_APIS64 as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberEventFilters<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberEventFilters(::core::mem::transmute_copy(&specificevents), ::core::mem::transmute_copy(&specificexceptions), ::core::mem::transmute_copy(&arbitraryexceptions)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventFilterText<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventFilterText(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&textsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventFilterCommand<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventFilterCommand(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&commandsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEventFilterCommand<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetEventFilterCommand(index, &*(&command as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSpecificFilterParameters<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSpecificFilterParameters(start, count, ::core::mem::transmute_copy(&params)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSpecificFilterParameters<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetSpecificFilterParameters(start, count, &*(&params as *const <DEBUG_SPECIFIC_FILTER_PARAMETERS as ::windows::core::Abi>::Abi as *const <DEBUG_SPECIFIC_FILTER_PARAMETERS as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSpecificFilterArgument<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSpecificFilterArgument(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&argumentsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSpecificFilterArgument<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, argument: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetSpecificFilterArgument(index, &*(&argument as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExceptionFilterParameters<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExceptionFilterParameters(count, codes, start, ::core::mem::transmute_copy(&params)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetExceptionFilterParameters<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetExceptionFilterParameters(count, &*(&params as *const <DEBUG_EXCEPTION_FILTER_PARAMETERS as ::windows::core::Abi>::Abi as *const <DEBUG_EXCEPTION_FILTER_PARAMETERS as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExceptionFilterSecondCommand<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExceptionFilterSecondCommand(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&commandsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetExceptionFilterSecondCommand<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetExceptionFilterSecondCommand(index, &*(&command as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WaitForEvent<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WaitForEvent(flags, timeout) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLastEventInformation<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLastEventInformation(::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid), ::core::mem::transmute_copy(&extrainformation), extrainformationsize, ::core::mem::transmute_copy(&extrainformationused), ::core::mem::transmute_copy(&description), descriptionsize, ::core::mem::transmute_copy(&descriptionused)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentTimeDate<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, timedate: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentTimeDate(::core::mem::transmute_copy(&timedate)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentSystemUpTime<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, uptime: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentSystemUpTime(::core::mem::transmute_copy(&uptime)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDumpFormatFlags<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, formatflags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDumpFormatFlags(::core::mem::transmute_copy(&formatflags)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberTextReplacements<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, numrepl: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberTextReplacements(::core::mem::transmute_copy(&numrepl)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTextReplacement<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PSTR, index: u32, srcbuffer: super::super::super::Foundation::PSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTextReplacement(&*(&srctext as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), index, ::core::mem::transmute_copy(&srcbuffer), srcbuffersize, ::core::mem::transmute_copy(&srcsize), ::core::mem::transmute_copy(&dstbuffer), dstbuffersize, ::core::mem::transmute_copy(&dstsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetTextReplacement<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PSTR, dsttext: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetTextReplacement(&*(&srctext as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), &*(&dsttext as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveTextReplacements<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveTextReplacements() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputTextReplacements<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputTextReplacements(outputcontrol, flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetAssemblyOptions<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetAssemblyOptions(::core::mem::transmute_copy(&options)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddAssemblyOptions<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddAssemblyOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveAssemblyOptions<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveAssemblyOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetAssemblyOptions<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetAssemblyOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExpressionSyntax<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExpressionSyntax(::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetExpressionSyntax<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetExpressionSyntax(flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetExpressionSyntaxByName<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, abbrevname: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetExpressionSyntaxByName(&*(&abbrevname as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberExpressionSyntaxes<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberExpressionSyntaxes(::core::mem::transmute_copy(&number)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExpressionSyntaxNames<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExpressionSyntaxNames(index, ::core::mem::transmute_copy(&fullnamebuffer), fullnamebuffersize, ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), abbrevnamebuffersize, ::core::mem::transmute_copy(&abbrevnamesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberEvents<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, events: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberEvents(::core::mem::transmute_copy(&events)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventIndexDescription<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, descsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventIndexDescription(index, which, &*(&buffer as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), buffersize, ::core::mem::transmute_copy(&descsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentEventIndex<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentEventIndex(::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetNextEventIndex<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, relation: u32, value: u32, nextindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetNextEventIndex(relation, value, ::core::mem::transmute_copy(&nextindex)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLogFileWide<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLogFileWide(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&append)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OpenLogFileWide<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PWSTR, append: super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OpenLogFileWide(&*(&file as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&append as *const <super::super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn InputWide<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).InputWide(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&inputsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReturnInputWide<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReturnInputWide(&*(&buffer as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputWide<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputWide(mask, &*(&format as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputVaListWide<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputVaListWide(mask, &*(&format as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), args) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ControlledOutputWide<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ControlledOutputWide(outputcontrol, mask, &*(&format as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ControlledOutputVaListWide<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ControlledOutputVaListWide(outputcontrol, mask, &*(&format as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), args) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputPromptWide<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputPromptWide(outputcontrol, &*(&format as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputPromptVaListWide<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputPromptVaListWide(outputcontrol, &*(&format as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), args) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPromptTextWide<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetPromptTextWide(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&textsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AssembleWide<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, instr: super::super::super::Foundation::PWSTR, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AssembleWide(offset, &*(&instr as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&endoffset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DisassembleWide<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).DisassembleWide(offset, flags, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&disassemblysize), ::core::mem::transmute_copy(&endoffset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessorTypeNamesWide<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32, fullnamebuffer: super::super::super::Foundation::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetProcessorTypeNamesWide(r#type, ::core::mem::transmute_copy(&fullnamebuffer), fullnamebuffersize, ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), abbrevnamebuffersize, ::core::mem::transmute_copy(&abbrevnamesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTextMacroWide<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, slot: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTextMacroWide(slot, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&macrosize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetTextMacroWide<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, slot: u32, r#macro: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetTextMacroWide(slot, &*(&r#macro as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EvaluateWide<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, expression: super::super::super::Foundation::PWSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EvaluateWide(&*(&expression as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), desiredtype, ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&remainderindex)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ExecuteWide<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, command: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ExecuteWide(outputcontrol, &*(&command as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ExecuteCommandFileWide<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, commandfile: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ExecuteCommandFileWide(outputcontrol, &*(&commandfile as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointByIndex2<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetBreakpointByIndex2(index, ::core::mem::transmute_copy(&bp)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointById2<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetBreakpointById2(id, ::core::mem::transmute_copy(&bp)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddBreakpoint2<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32, desiredid: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddBreakpoint2(r#type, desiredid, ::core::mem::transmute_copy(&bp)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveBreakpoint2<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bp: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveBreakpoint2(&*(&bp as *const <IDebugBreakpoint2 as ::windows::core::Abi>::Abi as *const <IDebugBreakpoint2 as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddExtensionWide<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PWSTR, flags: u32, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddExtensionWide(&*(&path as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExtensionByPathWide<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PWSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExtensionByPathWide(&*(&path as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CallExtensionWide<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, function: super::super::super::Foundation::PWSTR, arguments: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CallExtensionWide(handle, &*(&function as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&arguments as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExtensionFunctionWide<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, funcname: super::super::super::Foundation::PWSTR, function: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExtensionFunctionWide(handle, &*(&funcname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&function)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventFilterTextWide<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventFilterTextWide(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&textsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventFilterCommandWide<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventFilterCommandWide(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&commandsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEventFilterCommandWide<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetEventFilterCommandWide(index, &*(&command as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSpecificFilterArgumentWide<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSpecificFilterArgumentWide(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&argumentsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSpecificFilterArgumentWide<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, argument: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetSpecificFilterArgumentWide(index, &*(&argument as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExceptionFilterSecondCommandWide<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExceptionFilterSecondCommandWide(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&commandsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetExceptionFilterSecondCommandWide<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetExceptionFilterSecondCommandWide(index, &*(&command as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLastEventInformationWide<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLastEventInformationWide(::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid), ::core::mem::transmute_copy(&extrainformation), extrainformationsize, ::core::mem::transmute_copy(&extrainformationused), ::core::mem::transmute_copy(&description), descriptionsize, ::core::mem::transmute_copy(&descriptionused)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTextReplacementWide<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PWSTR, index: u32, srcbuffer: super::super::super::Foundation::PWSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PWSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTextReplacementWide(&*(&srctext as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), index, ::core::mem::transmute_copy(&srcbuffer), srcbuffersize, ::core::mem::transmute_copy(&srcsize), ::core::mem::transmute_copy(&dstbuffer), dstbuffersize, ::core::mem::transmute_copy(&dstsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetTextReplacementWide<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PWSTR, dsttext: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetTextReplacementWide(&*(&srctext as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&dsttext as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetExpressionSyntaxByNameWide<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, abbrevname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetExpressionSyntaxByNameWide(&*(&abbrevname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExpressionSyntaxNamesWide<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, fullnamebuffer: super::super::super::Foundation::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExpressionSyntaxNamesWide(index, ::core::mem::transmute_copy(&fullnamebuffer), fullnamebuffersize, ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), abbrevnamebuffersize, ::core::mem::transmute_copy(&abbrevnamesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventIndexDescriptionWide<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, descsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventIndexDescriptionWide(index, which, &*(&buffer as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), buffersize, ::core::mem::transmute_copy(&descsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLogFile2<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLogFile2(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OpenLogFile2<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OpenLogFile2(&*(&file as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLogFile2Wide<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLogFile2Wide(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OpenLogFile2Wide<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OpenLogFile2Wide(&*(&file as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSystemVersionValues<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, platformid: *mut u32, win32major: *mut u32, win32minor: *mut u32, kdmajor: *mut u32, kdminor: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSystemVersionValues(::core::mem::transmute_copy(&platformid), ::core::mem::transmute_copy(&win32major), ::core::mem::transmute_copy(&win32minor), ::core::mem::transmute_copy(&kdmajor), ::core::mem::transmute_copy(&kdminor)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSystemVersionString<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSystemVersionString(which, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&stringsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSystemVersionStringWide<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSystemVersionStringWide(which, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&stringsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetContextStackTrace<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, startcontext: *const ::core::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framecontexts: *mut ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetContextStackTrace(&*(&startcontext as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), startcontextsize, ::core::mem::transmute_copy(&frames), framessize, ::core::mem::transmute_copy(&framecontexts), framecontextssize, framecontextsentrysize, ::core::mem::transmute_copy(&framesfilled)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputContextStackTrace<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, framecontexts: *const ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputContextStackTrace(outputcontrol, &*(&frames as *const <DEBUG_STACK_FRAME as ::windows::core::Abi>::Abi as *const <DEBUG_STACK_FRAME as ::windows::core::DefaultType>::DefaultType), framessize, &*(&framecontexts as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), framecontextssize, framecontextsentrysize, flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetStoredEventInformation<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, context: *mut ::core::ffi::c_void, contextsize: u32, contextused: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetStoredEventInformation(::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid), ::core::mem::transmute_copy(&context), contextsize, ::core::mem::transmute_copy(&contextused), ::core::mem::transmute_copy(&extrainformation), extrainformationsize, ::core::mem::transmute_copy(&extrainformationused)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetManagedStatus<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: *mut u32, whichstring: u32, string: super::super::super::Foundation::PSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetManagedStatus(::core::mem::transmute_copy(&flags), whichstring, ::core::mem::transmute_copy(&string), stringsize, ::core::mem::transmute_copy(&stringneeded)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetManagedStatusWide<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: *mut u32, whichstring: u32, string: super::super::super::Foundation::PWSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetManagedStatusWide(::core::mem::transmute_copy(&flags), whichstring, ::core::mem::transmute_copy(&string), stringsize, ::core::mem::transmute_copy(&stringneeded)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ResetManagedStatus<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ResetManagedStatus(flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetStackTraceEx<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME_EX, framessize: u32, framesfilled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetStackTraceEx(frameoffset, stackoffset, instructionoffset, ::core::mem::transmute_copy(&frames), framessize, ::core::mem::transmute_copy(&framesfilled)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputStackTraceEx<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME_EX, framessize: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputStackTraceEx(outputcontrol, &*(&frames as *const <DEBUG_STACK_FRAME_EX as ::windows::core::Abi>::Abi as *const <DEBUG_STACK_FRAME_EX as ::windows::core::DefaultType>::DefaultType), framessize, flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetContextStackTraceEx<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, startcontext: *const ::core::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME_EX, framessize: u32, framecontexts: *mut ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetContextStackTraceEx(&*(&startcontext as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), startcontextsize, ::core::mem::transmute_copy(&frames), framessize, ::core::mem::transmute_copy(&framecontexts), framecontextssize, framecontextsentrysize, ::core::mem::transmute_copy(&framesfilled)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputContextStackTraceEx<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME_EX, framessize: u32, framecontexts: *const ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputContextStackTraceEx(outputcontrol, &*(&frames as *const <DEBUG_STACK_FRAME_EX as ::windows::core::Abi>::Abi as *const <DEBUG_STACK_FRAME_EX as ::windows::core::DefaultType>::DefaultType), framessize, &*(&framecontexts as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), framecontextssize, framecontextsentrysize, flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointByGuid<Impl: IDebugControl5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guid: *const ::windows::core::GUID, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetBreakpointByGuid(&*(&guid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&bp)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            base.0,
            base.1,
            base.2,
            base.3,
            ::windows::core::GetRuntimeClassName::<IDebugControl5>,
            base.5,
            GetInterrupt::<Impl, OFFSET>,
            SetInterrupt::<Impl, OFFSET>,
            GetInterruptTimeout::<Impl, OFFSET>,
            SetInterruptTimeout::<Impl, OFFSET>,
            GetLogFile::<Impl, OFFSET>,
            OpenLogFile::<Impl, OFFSET>,
            CloseLogFile::<Impl, OFFSET>,
            GetLogMask::<Impl, OFFSET>,
            SetLogMask::<Impl, OFFSET>,
            Input::<Impl, OFFSET>,
            ReturnInput::<Impl, OFFSET>,
            Output::<Impl, OFFSET>,
            OutputVaList::<Impl, OFFSET>,
            ControlledOutput::<Impl, OFFSET>,
            ControlledOutputVaList::<Impl, OFFSET>,
            OutputPrompt::<Impl, OFFSET>,
            OutputPromptVaList::<Impl, OFFSET>,
            GetPromptText::<Impl, OFFSET>,
            OutputCurrentState::<Impl, OFFSET>,
            OutputVersionInformation::<Impl, OFFSET>,
            GetNotifyEventHandle::<Impl, OFFSET>,
            SetNotifyEventHandle::<Impl, OFFSET>,
            Assemble::<Impl, OFFSET>,
            Disassemble::<Impl, OFFSET>,
            GetDisassembleEffectiveOffset::<Impl, OFFSET>,
            OutputDisassembly::<Impl, OFFSET>,
            OutputDisassemblyLines::<Impl, OFFSET>,
            GetNearInstruction::<Impl, OFFSET>,
            GetStackTrace::<Impl, OFFSET>,
            GetReturnOffset::<Impl, OFFSET>,
            OutputStackTrace::<Impl, OFFSET>,
            GetDebuggeeType::<Impl, OFFSET>,
            GetActualProcessorType::<Impl, OFFSET>,
            GetExecutingProcessorType::<Impl, OFFSET>,
            GetNumberPossibleExecutingProcessorTypes::<Impl, OFFSET>,
            GetPossibleExecutingProcessorTypes::<Impl, OFFSET>,
            GetNumberProcessors::<Impl, OFFSET>,
            GetSystemVersion::<Impl, OFFSET>,
            GetPageSize::<Impl, OFFSET>,
            IsPointer64Bit::<Impl, OFFSET>,
            ReadBugCheckData::<Impl, OFFSET>,
            GetNumberSupportedProcessorTypes::<Impl, OFFSET>,
            GetSupportedProcessorTypes::<Impl, OFFSET>,
            GetProcessorTypeNames::<Impl, OFFSET>,
            GetEffectiveProcessorType::<Impl, OFFSET>,
            SetEffectiveProcessorType::<Impl, OFFSET>,
            GetExecutionStatus::<Impl, OFFSET>,
            SetExecutionStatus::<Impl, OFFSET>,
            GetCodeLevel::<Impl, OFFSET>,
            SetCodeLevel::<Impl, OFFSET>,
            GetEngineOptions::<Impl, OFFSET>,
            AddEngineOptions::<Impl, OFFSET>,
            RemoveEngineOptions::<Impl, OFFSET>,
            SetEngineOptions::<Impl, OFFSET>,
            GetSystemErrorControl::<Impl, OFFSET>,
            SetSystemErrorControl::<Impl, OFFSET>,
            GetTextMacro::<Impl, OFFSET>,
            SetTextMacro::<Impl, OFFSET>,
            GetRadix::<Impl, OFFSET>,
            SetRadix::<Impl, OFFSET>,
            Evaluate::<Impl, OFFSET>,
            CoerceValue::<Impl, OFFSET>,
            CoerceValues::<Impl, OFFSET>,
            Execute::<Impl, OFFSET>,
            ExecuteCommandFile::<Impl, OFFSET>,
            GetNumberBreakpoints::<Impl, OFFSET>,
            GetBreakpointByIndex::<Impl, OFFSET>,
            GetBreakpointById::<Impl, OFFSET>,
            GetBreakpointParameters::<Impl, OFFSET>,
            AddBreakpoint::<Impl, OFFSET>,
            RemoveBreakpoint::<Impl, OFFSET>,
            AddExtension::<Impl, OFFSET>,
            RemoveExtension::<Impl, OFFSET>,
            GetExtensionByPath::<Impl, OFFSET>,
            CallExtension::<Impl, OFFSET>,
            GetExtensionFunction::<Impl, OFFSET>,
            GetWindbgExtensionApis32::<Impl, OFFSET>,
            GetWindbgExtensionApis64::<Impl, OFFSET>,
            GetNumberEventFilters::<Impl, OFFSET>,
            GetEventFilterText::<Impl, OFFSET>,
            GetEventFilterCommand::<Impl, OFFSET>,
            SetEventFilterCommand::<Impl, OFFSET>,
            GetSpecificFilterParameters::<Impl, OFFSET>,
            SetSpecificFilterParameters::<Impl, OFFSET>,
            GetSpecificFilterArgument::<Impl, OFFSET>,
            SetSpecificFilterArgument::<Impl, OFFSET>,
            GetExceptionFilterParameters::<Impl, OFFSET>,
            SetExceptionFilterParameters::<Impl, OFFSET>,
            GetExceptionFilterSecondCommand::<Impl, OFFSET>,
            SetExceptionFilterSecondCommand::<Impl, OFFSET>,
            WaitForEvent::<Impl, OFFSET>,
            GetLastEventInformation::<Impl, OFFSET>,
            GetCurrentTimeDate::<Impl, OFFSET>,
            GetCurrentSystemUpTime::<Impl, OFFSET>,
            GetDumpFormatFlags::<Impl, OFFSET>,
            GetNumberTextReplacements::<Impl, OFFSET>,
            GetTextReplacement::<Impl, OFFSET>,
            SetTextReplacement::<Impl, OFFSET>,
            RemoveTextReplacements::<Impl, OFFSET>,
            OutputTextReplacements::<Impl, OFFSET>,
            GetAssemblyOptions::<Impl, OFFSET>,
            AddAssemblyOptions::<Impl, OFFSET>,
            RemoveAssemblyOptions::<Impl, OFFSET>,
            SetAssemblyOptions::<Impl, OFFSET>,
            GetExpressionSyntax::<Impl, OFFSET>,
            SetExpressionSyntax::<Impl, OFFSET>,
            SetExpressionSyntaxByName::<Impl, OFFSET>,
            GetNumberExpressionSyntaxes::<Impl, OFFSET>,
            GetExpressionSyntaxNames::<Impl, OFFSET>,
            GetNumberEvents::<Impl, OFFSET>,
            GetEventIndexDescription::<Impl, OFFSET>,
            GetCurrentEventIndex::<Impl, OFFSET>,
            SetNextEventIndex::<Impl, OFFSET>,
            GetLogFileWide::<Impl, OFFSET>,
            OpenLogFileWide::<Impl, OFFSET>,
            InputWide::<Impl, OFFSET>,
            ReturnInputWide::<Impl, OFFSET>,
            OutputWide::<Impl, OFFSET>,
            OutputVaListWide::<Impl, OFFSET>,
            ControlledOutputWide::<Impl, OFFSET>,
            ControlledOutputVaListWide::<Impl, OFFSET>,
            OutputPromptWide::<Impl, OFFSET>,
            OutputPromptVaListWide::<Impl, OFFSET>,
            GetPromptTextWide::<Impl, OFFSET>,
            AssembleWide::<Impl, OFFSET>,
            DisassembleWide::<Impl, OFFSET>,
            GetProcessorTypeNamesWide::<Impl, OFFSET>,
            GetTextMacroWide::<Impl, OFFSET>,
            SetTextMacroWide::<Impl, OFFSET>,
            EvaluateWide::<Impl, OFFSET>,
            ExecuteWide::<Impl, OFFSET>,
            ExecuteCommandFileWide::<Impl, OFFSET>,
            GetBreakpointByIndex2::<Impl, OFFSET>,
            GetBreakpointById2::<Impl, OFFSET>,
            AddBreakpoint2::<Impl, OFFSET>,
            RemoveBreakpoint2::<Impl, OFFSET>,
            AddExtensionWide::<Impl, OFFSET>,
            GetExtensionByPathWide::<Impl, OFFSET>,
            CallExtensionWide::<Impl, OFFSET>,
            GetExtensionFunctionWide::<Impl, OFFSET>,
            GetEventFilterTextWide::<Impl, OFFSET>,
            GetEventFilterCommandWide::<Impl, OFFSET>,
            SetEventFilterCommandWide::<Impl, OFFSET>,
            GetSpecificFilterArgumentWide::<Impl, OFFSET>,
            SetSpecificFilterArgumentWide::<Impl, OFFSET>,
            GetExceptionFilterSecondCommandWide::<Impl, OFFSET>,
            SetExceptionFilterSecondCommandWide::<Impl, OFFSET>,
            GetLastEventInformationWide::<Impl, OFFSET>,
            GetTextReplacementWide::<Impl, OFFSET>,
            SetTextReplacementWide::<Impl, OFFSET>,
            SetExpressionSyntaxByNameWide::<Impl, OFFSET>,
            GetExpressionSyntaxNamesWide::<Impl, OFFSET>,
            GetEventIndexDescriptionWide::<Impl, OFFSET>,
            GetLogFile2::<Impl, OFFSET>,
            OpenLogFile2::<Impl, OFFSET>,
            GetLogFile2Wide::<Impl, OFFSET>,
            OpenLogFile2Wide::<Impl, OFFSET>,
            GetSystemVersionValues::<Impl, OFFSET>,
            GetSystemVersionString::<Impl, OFFSET>,
            GetSystemVersionStringWide::<Impl, OFFSET>,
            GetContextStackTrace::<Impl, OFFSET>,
            OutputContextStackTrace::<Impl, OFFSET>,
            GetStoredEventInformation::<Impl, OFFSET>,
            GetManagedStatus::<Impl, OFFSET>,
            GetManagedStatusWide::<Impl, OFFSET>,
            ResetManagedStatus::<Impl, OFFSET>,
            GetStackTraceEx::<Impl, OFFSET>,
            OutputStackTraceEx::<Impl, OFFSET>,
            GetContextStackTraceEx::<Impl, OFFSET>,
            OutputContextStackTraceEx::<Impl, OFFSET>,
            GetBreakpointByGuid::<Impl, OFFSET>,
        )
    }
}
pub trait IDebugControl6Impl: Sized {
    fn GetInterrupt();
    fn SetInterrupt();
    fn GetInterruptTimeout();
    fn SetInterruptTimeout();
    fn GetLogFile();
    fn OpenLogFile();
    fn CloseLogFile();
    fn GetLogMask();
    fn SetLogMask();
    fn Input();
    fn ReturnInput();
    fn Output();
    fn OutputVaList();
    fn ControlledOutput();
    fn ControlledOutputVaList();
    fn OutputPrompt();
    fn OutputPromptVaList();
    fn GetPromptText();
    fn OutputCurrentState();
    fn OutputVersionInformation();
    fn GetNotifyEventHandle();
    fn SetNotifyEventHandle();
    fn Assemble();
    fn Disassemble();
    fn GetDisassembleEffectiveOffset();
    fn OutputDisassembly();
    fn OutputDisassemblyLines();
    fn GetNearInstruction();
    fn GetStackTrace();
    fn GetReturnOffset();
    fn OutputStackTrace();
    fn GetDebuggeeType();
    fn GetActualProcessorType();
    fn GetExecutingProcessorType();
    fn GetNumberPossibleExecutingProcessorTypes();
    fn GetPossibleExecutingProcessorTypes();
    fn GetNumberProcessors();
    fn GetSystemVersion();
    fn GetPageSize();
    fn IsPointer64Bit();
    fn ReadBugCheckData();
    fn GetNumberSupportedProcessorTypes();
    fn GetSupportedProcessorTypes();
    fn GetProcessorTypeNames();
    fn GetEffectiveProcessorType();
    fn SetEffectiveProcessorType();
    fn GetExecutionStatus();
    fn SetExecutionStatus();
    fn GetCodeLevel();
    fn SetCodeLevel();
    fn GetEngineOptions();
    fn AddEngineOptions();
    fn RemoveEngineOptions();
    fn SetEngineOptions();
    fn GetSystemErrorControl();
    fn SetSystemErrorControl();
    fn GetTextMacro();
    fn SetTextMacro();
    fn GetRadix();
    fn SetRadix();
    fn Evaluate();
    fn CoerceValue();
    fn CoerceValues();
    fn Execute();
    fn ExecuteCommandFile();
    fn GetNumberBreakpoints();
    fn GetBreakpointByIndex();
    fn GetBreakpointById();
    fn GetBreakpointParameters();
    fn AddBreakpoint();
    fn RemoveBreakpoint();
    fn AddExtension();
    fn RemoveExtension();
    fn GetExtensionByPath();
    fn CallExtension();
    fn GetExtensionFunction();
    fn GetWindbgExtensionApis32();
    fn GetWindbgExtensionApis64();
    fn GetNumberEventFilters();
    fn GetEventFilterText();
    fn GetEventFilterCommand();
    fn SetEventFilterCommand();
    fn GetSpecificFilterParameters();
    fn SetSpecificFilterParameters();
    fn GetSpecificFilterArgument();
    fn SetSpecificFilterArgument();
    fn GetExceptionFilterParameters();
    fn SetExceptionFilterParameters();
    fn GetExceptionFilterSecondCommand();
    fn SetExceptionFilterSecondCommand();
    fn WaitForEvent();
    fn GetLastEventInformation();
    fn GetCurrentTimeDate();
    fn GetCurrentSystemUpTime();
    fn GetDumpFormatFlags();
    fn GetNumberTextReplacements();
    fn GetTextReplacement();
    fn SetTextReplacement();
    fn RemoveTextReplacements();
    fn OutputTextReplacements();
    fn GetAssemblyOptions();
    fn AddAssemblyOptions();
    fn RemoveAssemblyOptions();
    fn SetAssemblyOptions();
    fn GetExpressionSyntax();
    fn SetExpressionSyntax();
    fn SetExpressionSyntaxByName();
    fn GetNumberExpressionSyntaxes();
    fn GetExpressionSyntaxNames();
    fn GetNumberEvents();
    fn GetEventIndexDescription();
    fn GetCurrentEventIndex();
    fn SetNextEventIndex();
    fn GetLogFileWide();
    fn OpenLogFileWide();
    fn InputWide();
    fn ReturnInputWide();
    fn OutputWide();
    fn OutputVaListWide();
    fn ControlledOutputWide();
    fn ControlledOutputVaListWide();
    fn OutputPromptWide();
    fn OutputPromptVaListWide();
    fn GetPromptTextWide();
    fn AssembleWide();
    fn DisassembleWide();
    fn GetProcessorTypeNamesWide();
    fn GetTextMacroWide();
    fn SetTextMacroWide();
    fn EvaluateWide();
    fn ExecuteWide();
    fn ExecuteCommandFileWide();
    fn GetBreakpointByIndex2();
    fn GetBreakpointById2();
    fn AddBreakpoint2();
    fn RemoveBreakpoint2();
    fn AddExtensionWide();
    fn GetExtensionByPathWide();
    fn CallExtensionWide();
    fn GetExtensionFunctionWide();
    fn GetEventFilterTextWide();
    fn GetEventFilterCommandWide();
    fn SetEventFilterCommandWide();
    fn GetSpecificFilterArgumentWide();
    fn SetSpecificFilterArgumentWide();
    fn GetExceptionFilterSecondCommandWide();
    fn SetExceptionFilterSecondCommandWide();
    fn GetLastEventInformationWide();
    fn GetTextReplacementWide();
    fn SetTextReplacementWide();
    fn SetExpressionSyntaxByNameWide();
    fn GetExpressionSyntaxNamesWide();
    fn GetEventIndexDescriptionWide();
    fn GetLogFile2();
    fn OpenLogFile2();
    fn GetLogFile2Wide();
    fn OpenLogFile2Wide();
    fn GetSystemVersionValues();
    fn GetSystemVersionString();
    fn GetSystemVersionStringWide();
    fn GetContextStackTrace();
    fn OutputContextStackTrace();
    fn GetStoredEventInformation();
    fn GetManagedStatus();
    fn GetManagedStatusWide();
    fn ResetManagedStatus();
    fn GetStackTraceEx();
    fn OutputStackTraceEx();
    fn GetContextStackTraceEx();
    fn OutputContextStackTraceEx();
    fn GetBreakpointByGuid();
    fn GetExecutionStatusEx();
    fn GetSynchronizationStatus();
}
impl ::windows::core::RuntimeName for IDebugControl6 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugControl6";
}
impl IDebugControl6Vtbl {
    pub const fn new<Impl: IDebugControl6Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugControl6Vtbl {
        unsafe extern "system" fn GetInterrupt<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetInterrupt() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetInterrupt<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetInterrupt(flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetInterruptTimeout<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, seconds: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetInterruptTimeout(::core::mem::transmute_copy(&seconds)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetInterruptTimeout<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, seconds: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetInterruptTimeout(seconds) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLogFile<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLogFile(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&append)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OpenLogFile<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PSTR, append: super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OpenLogFile(&*(&file as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), &*(&append as *const <super::super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CloseLogFile<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CloseLogFile() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLogMask<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLogMask(::core::mem::transmute_copy(&mask)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetLogMask<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetLogMask(mask) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Input<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Input(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&inputsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReturnInput<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReturnInput(&*(&buffer as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Output<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Output(mask, &*(&format as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputVaList<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputVaList(mask, &*(&format as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), args) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ControlledOutput<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ControlledOutput(outputcontrol, mask, &*(&format as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ControlledOutputVaList<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ControlledOutputVaList(outputcontrol, mask, &*(&format as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), args) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputPrompt<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputPrompt(outputcontrol, &*(&format as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputPromptVaList<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputPromptVaList(outputcontrol, &*(&format as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), args) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPromptText<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetPromptText(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&textsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputCurrentState<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputCurrentState(outputcontrol, flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputVersionInformation<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputVersionInformation(outputcontrol) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNotifyEventHandle<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNotifyEventHandle(::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetNotifyEventHandle<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetNotifyEventHandle(handle) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Assemble<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, instr: super::super::super::Foundation::PSTR, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Assemble(offset, &*(&instr as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&endoffset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Disassemble<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Disassemble(offset, flags, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&disassemblysize), ::core::mem::transmute_copy(&endoffset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDisassembleEffectiveOffset<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDisassembleEffectiveOffset(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputDisassembly<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, flags: u32, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputDisassembly(outputcontrol, offset, flags, ::core::mem::transmute_copy(&endoffset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputDisassemblyLines<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputDisassemblyLines(outputcontrol, previouslines, totallines, offset, flags, ::core::mem::transmute_copy(&offsetline), ::core::mem::transmute_copy(&startoffset), ::core::mem::transmute_copy(&endoffset), ::core::mem::transmute_copy(&lineoffsets)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNearInstruction<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, nearoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNearInstruction(offset, delta, ::core::mem::transmute_copy(&nearoffset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetStackTrace<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetStackTrace(frameoffset, stackoffset, instructionoffset, ::core::mem::transmute_copy(&frames), framessize, ::core::mem::transmute_copy(&framesfilled)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetReturnOffset<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetReturnOffset(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputStackTrace<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputStackTrace(outputcontrol, &*(&frames as *const <DEBUG_STACK_FRAME as ::windows::core::Abi>::Abi as *const <DEBUG_STACK_FRAME as ::windows::core::DefaultType>::DefaultType), framessize, flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDebuggeeType<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, class: *mut u32, qualifier: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDebuggeeType(::core::mem::transmute_copy(&class), ::core::mem::transmute_copy(&qualifier)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetActualProcessorType<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetActualProcessorType(::core::mem::transmute_copy(&r#type)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExecutingProcessorType<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExecutingProcessorType(::core::mem::transmute_copy(&r#type)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberPossibleExecutingProcessorTypes<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberPossibleExecutingProcessorTypes(::core::mem::transmute_copy(&number)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPossibleExecutingProcessorTypes<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetPossibleExecutingProcessorTypes(start, count, ::core::mem::transmute_copy(&types)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberProcessors<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberProcessors(::core::mem::transmute_copy(&number)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSystemVersion<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: super::super::super::Foundation::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: super::super::super::Foundation::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSystemVersion(::core::mem::transmute_copy(&platformid), ::core::mem::transmute_copy(&major), ::core::mem::transmute_copy(&minor), ::core::mem::transmute_copy(&servicepackstring), servicepackstringsize, ::core::mem::transmute_copy(&servicepackstringused), ::core::mem::transmute_copy(&servicepacknumber), ::core::mem::transmute_copy(&buildstring), buildstringsize, ::core::mem::transmute_copy(&buildstringused)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPageSize<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, size: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetPageSize(::core::mem::transmute_copy(&size)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsPointer64Bit<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).IsPointer64Bit() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadBugCheckData<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadBugCheckData(::core::mem::transmute_copy(&code), ::core::mem::transmute_copy(&arg1), ::core::mem::transmute_copy(&arg2), ::core::mem::transmute_copy(&arg3), ::core::mem::transmute_copy(&arg4)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberSupportedProcessorTypes<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberSupportedProcessorTypes(::core::mem::transmute_copy(&number)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSupportedProcessorTypes<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSupportedProcessorTypes(start, count, ::core::mem::transmute_copy(&types)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessorTypeNames<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetProcessorTypeNames(r#type, ::core::mem::transmute_copy(&fullnamebuffer), fullnamebuffersize, ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), abbrevnamebuffersize, ::core::mem::transmute_copy(&abbrevnamesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEffectiveProcessorType<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEffectiveProcessorType(::core::mem::transmute_copy(&r#type)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEffectiveProcessorType<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetEffectiveProcessorType(r#type) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExecutionStatus<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, status: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExecutionStatus(::core::mem::transmute_copy(&status)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetExecutionStatus<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, status: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetExecutionStatus(status) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCodeLevel<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, level: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCodeLevel(::core::mem::transmute_copy(&level)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetCodeLevel<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, level: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetCodeLevel(level) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEngineOptions<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEngineOptions(::core::mem::transmute_copy(&options)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddEngineOptions<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddEngineOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveEngineOptions<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveEngineOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEngineOptions<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetEngineOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSystemErrorControl<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSystemErrorControl(::core::mem::transmute_copy(&outputlevel), ::core::mem::transmute_copy(&breaklevel)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSystemErrorControl<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputlevel: u32, breaklevel: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetSystemErrorControl(outputlevel, breaklevel) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTextMacro<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, slot: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTextMacro(slot, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&macrosize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetTextMacro<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, slot: u32, r#macro: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetTextMacro(slot, &*(&r#macro as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRadix<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, radix: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetRadix(::core::mem::transmute_copy(&radix)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetRadix<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, radix: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetRadix(radix) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Evaluate<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, expression: super::super::super::Foundation::PSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Evaluate(&*(&expression as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), desiredtype, ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&remainderindex)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CoerceValue<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#in: *const DEBUG_VALUE, outtype: u32, out: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CoerceValue(&*(&r#in as *const <DEBUG_VALUE as ::windows::core::Abi>::Abi as *const <DEBUG_VALUE as ::windows::core::DefaultType>::DefaultType), outtype, ::core::mem::transmute_copy(&out)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CoerceValues<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CoerceValues(count, &*(&r#in as *const <DEBUG_VALUE as ::windows::core::Abi>::Abi as *const <DEBUG_VALUE as ::windows::core::DefaultType>::DefaultType), outtypes, ::core::mem::transmute_copy(&out)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Execute<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, command: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Execute(outputcontrol, &*(&command as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ExecuteCommandFile<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, commandfile: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ExecuteCommandFile(outputcontrol, &*(&commandfile as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberBreakpoints<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberBreakpoints(::core::mem::transmute_copy(&number)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointByIndex<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetBreakpointByIndex(index, ::core::mem::transmute_copy(&bp)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointById<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetBreakpointById(id, ::core::mem::transmute_copy(&bp)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointParameters<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetBreakpointParameters(count, ids, start, ::core::mem::transmute_copy(&params)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddBreakpoint<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32, desiredid: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddBreakpoint(r#type, desiredid, ::core::mem::transmute_copy(&bp)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveBreakpoint<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bp: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveBreakpoint(&*(&bp as *const <IDebugBreakpoint as ::windows::core::Abi>::Abi as *const <IDebugBreakpoint as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddExtension<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR, flags: u32, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddExtension(&*(&path as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveExtension<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveExtension(handle) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExtensionByPath<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExtensionByPath(&*(&path as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CallExtension<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, function: super::super::super::Foundation::PSTR, arguments: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CallExtension(handle, &*(&function as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), &*(&arguments as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExtensionFunction<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, funcname: super::super::super::Foundation::PSTR, function: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExtensionFunction(handle, &*(&funcname as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&function)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetWindbgExtensionApis32<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetWindbgExtensionApis32(&*(&api as *const <WINDBG_EXTENSION_APIS32 as ::windows::core::Abi>::Abi as *const <WINDBG_EXTENSION_APIS32 as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetWindbgExtensionApis64<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetWindbgExtensionApis64(&*(&api as *const <WINDBG_EXTENSION_APIS64 as ::windows::core::Abi>::Abi as *const <WINDBG_EXTENSION_APIS64 as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberEventFilters<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberEventFilters(::core::mem::transmute_copy(&specificevents), ::core::mem::transmute_copy(&specificexceptions), ::core::mem::transmute_copy(&arbitraryexceptions)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventFilterText<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventFilterText(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&textsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventFilterCommand<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventFilterCommand(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&commandsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEventFilterCommand<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetEventFilterCommand(index, &*(&command as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSpecificFilterParameters<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSpecificFilterParameters(start, count, ::core::mem::transmute_copy(&params)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSpecificFilterParameters<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetSpecificFilterParameters(start, count, &*(&params as *const <DEBUG_SPECIFIC_FILTER_PARAMETERS as ::windows::core::Abi>::Abi as *const <DEBUG_SPECIFIC_FILTER_PARAMETERS as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSpecificFilterArgument<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSpecificFilterArgument(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&argumentsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSpecificFilterArgument<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, argument: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetSpecificFilterArgument(index, &*(&argument as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExceptionFilterParameters<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExceptionFilterParameters(count, codes, start, ::core::mem::transmute_copy(&params)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetExceptionFilterParameters<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetExceptionFilterParameters(count, &*(&params as *const <DEBUG_EXCEPTION_FILTER_PARAMETERS as ::windows::core::Abi>::Abi as *const <DEBUG_EXCEPTION_FILTER_PARAMETERS as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExceptionFilterSecondCommand<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExceptionFilterSecondCommand(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&commandsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetExceptionFilterSecondCommand<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetExceptionFilterSecondCommand(index, &*(&command as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WaitForEvent<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WaitForEvent(flags, timeout) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLastEventInformation<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLastEventInformation(::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid), ::core::mem::transmute_copy(&extrainformation), extrainformationsize, ::core::mem::transmute_copy(&extrainformationused), ::core::mem::transmute_copy(&description), descriptionsize, ::core::mem::transmute_copy(&descriptionused)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentTimeDate<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, timedate: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentTimeDate(::core::mem::transmute_copy(&timedate)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentSystemUpTime<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, uptime: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentSystemUpTime(::core::mem::transmute_copy(&uptime)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDumpFormatFlags<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, formatflags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDumpFormatFlags(::core::mem::transmute_copy(&formatflags)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberTextReplacements<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, numrepl: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberTextReplacements(::core::mem::transmute_copy(&numrepl)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTextReplacement<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PSTR, index: u32, srcbuffer: super::super::super::Foundation::PSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTextReplacement(&*(&srctext as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), index, ::core::mem::transmute_copy(&srcbuffer), srcbuffersize, ::core::mem::transmute_copy(&srcsize), ::core::mem::transmute_copy(&dstbuffer), dstbuffersize, ::core::mem::transmute_copy(&dstsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetTextReplacement<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PSTR, dsttext: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetTextReplacement(&*(&srctext as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), &*(&dsttext as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveTextReplacements<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveTextReplacements() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputTextReplacements<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputTextReplacements(outputcontrol, flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetAssemblyOptions<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetAssemblyOptions(::core::mem::transmute_copy(&options)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddAssemblyOptions<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddAssemblyOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveAssemblyOptions<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveAssemblyOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetAssemblyOptions<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetAssemblyOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExpressionSyntax<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExpressionSyntax(::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetExpressionSyntax<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetExpressionSyntax(flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetExpressionSyntaxByName<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, abbrevname: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetExpressionSyntaxByName(&*(&abbrevname as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberExpressionSyntaxes<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberExpressionSyntaxes(::core::mem::transmute_copy(&number)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExpressionSyntaxNames<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExpressionSyntaxNames(index, ::core::mem::transmute_copy(&fullnamebuffer), fullnamebuffersize, ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), abbrevnamebuffersize, ::core::mem::transmute_copy(&abbrevnamesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberEvents<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, events: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberEvents(::core::mem::transmute_copy(&events)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventIndexDescription<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, descsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventIndexDescription(index, which, &*(&buffer as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), buffersize, ::core::mem::transmute_copy(&descsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentEventIndex<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentEventIndex(::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetNextEventIndex<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, relation: u32, value: u32, nextindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetNextEventIndex(relation, value, ::core::mem::transmute_copy(&nextindex)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLogFileWide<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLogFileWide(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&append)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OpenLogFileWide<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PWSTR, append: super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OpenLogFileWide(&*(&file as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&append as *const <super::super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn InputWide<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).InputWide(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&inputsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReturnInputWide<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReturnInputWide(&*(&buffer as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputWide<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputWide(mask, &*(&format as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputVaListWide<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputVaListWide(mask, &*(&format as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), args) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ControlledOutputWide<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ControlledOutputWide(outputcontrol, mask, &*(&format as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ControlledOutputVaListWide<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ControlledOutputVaListWide(outputcontrol, mask, &*(&format as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), args) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputPromptWide<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputPromptWide(outputcontrol, &*(&format as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputPromptVaListWide<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputPromptVaListWide(outputcontrol, &*(&format as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), args) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPromptTextWide<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetPromptTextWide(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&textsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AssembleWide<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, instr: super::super::super::Foundation::PWSTR, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AssembleWide(offset, &*(&instr as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&endoffset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DisassembleWide<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).DisassembleWide(offset, flags, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&disassemblysize), ::core::mem::transmute_copy(&endoffset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessorTypeNamesWide<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32, fullnamebuffer: super::super::super::Foundation::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetProcessorTypeNamesWide(r#type, ::core::mem::transmute_copy(&fullnamebuffer), fullnamebuffersize, ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), abbrevnamebuffersize, ::core::mem::transmute_copy(&abbrevnamesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTextMacroWide<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, slot: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTextMacroWide(slot, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&macrosize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetTextMacroWide<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, slot: u32, r#macro: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetTextMacroWide(slot, &*(&r#macro as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EvaluateWide<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, expression: super::super::super::Foundation::PWSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EvaluateWide(&*(&expression as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), desiredtype, ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&remainderindex)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ExecuteWide<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, command: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ExecuteWide(outputcontrol, &*(&command as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ExecuteCommandFileWide<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, commandfile: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ExecuteCommandFileWide(outputcontrol, &*(&commandfile as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointByIndex2<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetBreakpointByIndex2(index, ::core::mem::transmute_copy(&bp)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointById2<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetBreakpointById2(id, ::core::mem::transmute_copy(&bp)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddBreakpoint2<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32, desiredid: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddBreakpoint2(r#type, desiredid, ::core::mem::transmute_copy(&bp)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveBreakpoint2<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bp: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveBreakpoint2(&*(&bp as *const <IDebugBreakpoint2 as ::windows::core::Abi>::Abi as *const <IDebugBreakpoint2 as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddExtensionWide<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PWSTR, flags: u32, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddExtensionWide(&*(&path as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExtensionByPathWide<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PWSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExtensionByPathWide(&*(&path as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CallExtensionWide<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, function: super::super::super::Foundation::PWSTR, arguments: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CallExtensionWide(handle, &*(&function as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&arguments as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExtensionFunctionWide<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, funcname: super::super::super::Foundation::PWSTR, function: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExtensionFunctionWide(handle, &*(&funcname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&function)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventFilterTextWide<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventFilterTextWide(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&textsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventFilterCommandWide<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventFilterCommandWide(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&commandsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEventFilterCommandWide<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetEventFilterCommandWide(index, &*(&command as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSpecificFilterArgumentWide<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSpecificFilterArgumentWide(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&argumentsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSpecificFilterArgumentWide<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, argument: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetSpecificFilterArgumentWide(index, &*(&argument as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExceptionFilterSecondCommandWide<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExceptionFilterSecondCommandWide(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&commandsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetExceptionFilterSecondCommandWide<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetExceptionFilterSecondCommandWide(index, &*(&command as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLastEventInformationWide<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLastEventInformationWide(::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid), ::core::mem::transmute_copy(&extrainformation), extrainformationsize, ::core::mem::transmute_copy(&extrainformationused), ::core::mem::transmute_copy(&description), descriptionsize, ::core::mem::transmute_copy(&descriptionused)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTextReplacementWide<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PWSTR, index: u32, srcbuffer: super::super::super::Foundation::PWSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PWSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTextReplacementWide(&*(&srctext as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), index, ::core::mem::transmute_copy(&srcbuffer), srcbuffersize, ::core::mem::transmute_copy(&srcsize), ::core::mem::transmute_copy(&dstbuffer), dstbuffersize, ::core::mem::transmute_copy(&dstsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetTextReplacementWide<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PWSTR, dsttext: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetTextReplacementWide(&*(&srctext as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&dsttext as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetExpressionSyntaxByNameWide<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, abbrevname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetExpressionSyntaxByNameWide(&*(&abbrevname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExpressionSyntaxNamesWide<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, fullnamebuffer: super::super::super::Foundation::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExpressionSyntaxNamesWide(index, ::core::mem::transmute_copy(&fullnamebuffer), fullnamebuffersize, ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), abbrevnamebuffersize, ::core::mem::transmute_copy(&abbrevnamesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventIndexDescriptionWide<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, descsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventIndexDescriptionWide(index, which, &*(&buffer as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), buffersize, ::core::mem::transmute_copy(&descsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLogFile2<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLogFile2(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OpenLogFile2<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OpenLogFile2(&*(&file as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLogFile2Wide<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLogFile2Wide(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OpenLogFile2Wide<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OpenLogFile2Wide(&*(&file as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSystemVersionValues<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, platformid: *mut u32, win32major: *mut u32, win32minor: *mut u32, kdmajor: *mut u32, kdminor: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSystemVersionValues(::core::mem::transmute_copy(&platformid), ::core::mem::transmute_copy(&win32major), ::core::mem::transmute_copy(&win32minor), ::core::mem::transmute_copy(&kdmajor), ::core::mem::transmute_copy(&kdminor)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSystemVersionString<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSystemVersionString(which, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&stringsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSystemVersionStringWide<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSystemVersionStringWide(which, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&stringsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetContextStackTrace<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, startcontext: *const ::core::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framecontexts: *mut ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetContextStackTrace(&*(&startcontext as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), startcontextsize, ::core::mem::transmute_copy(&frames), framessize, ::core::mem::transmute_copy(&framecontexts), framecontextssize, framecontextsentrysize, ::core::mem::transmute_copy(&framesfilled)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputContextStackTrace<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, framecontexts: *const ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputContextStackTrace(outputcontrol, &*(&frames as *const <DEBUG_STACK_FRAME as ::windows::core::Abi>::Abi as *const <DEBUG_STACK_FRAME as ::windows::core::DefaultType>::DefaultType), framessize, &*(&framecontexts as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), framecontextssize, framecontextsentrysize, flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetStoredEventInformation<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, context: *mut ::core::ffi::c_void, contextsize: u32, contextused: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetStoredEventInformation(::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid), ::core::mem::transmute_copy(&context), contextsize, ::core::mem::transmute_copy(&contextused), ::core::mem::transmute_copy(&extrainformation), extrainformationsize, ::core::mem::transmute_copy(&extrainformationused)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetManagedStatus<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: *mut u32, whichstring: u32, string: super::super::super::Foundation::PSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetManagedStatus(::core::mem::transmute_copy(&flags), whichstring, ::core::mem::transmute_copy(&string), stringsize, ::core::mem::transmute_copy(&stringneeded)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetManagedStatusWide<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: *mut u32, whichstring: u32, string: super::super::super::Foundation::PWSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetManagedStatusWide(::core::mem::transmute_copy(&flags), whichstring, ::core::mem::transmute_copy(&string), stringsize, ::core::mem::transmute_copy(&stringneeded)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ResetManagedStatus<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ResetManagedStatus(flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetStackTraceEx<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME_EX, framessize: u32, framesfilled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetStackTraceEx(frameoffset, stackoffset, instructionoffset, ::core::mem::transmute_copy(&frames), framessize, ::core::mem::transmute_copy(&framesfilled)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputStackTraceEx<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME_EX, framessize: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputStackTraceEx(outputcontrol, &*(&frames as *const <DEBUG_STACK_FRAME_EX as ::windows::core::Abi>::Abi as *const <DEBUG_STACK_FRAME_EX as ::windows::core::DefaultType>::DefaultType), framessize, flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetContextStackTraceEx<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, startcontext: *const ::core::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME_EX, framessize: u32, framecontexts: *mut ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetContextStackTraceEx(&*(&startcontext as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), startcontextsize, ::core::mem::transmute_copy(&frames), framessize, ::core::mem::transmute_copy(&framecontexts), framecontextssize, framecontextsentrysize, ::core::mem::transmute_copy(&framesfilled)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputContextStackTraceEx<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME_EX, framessize: u32, framecontexts: *const ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputContextStackTraceEx(outputcontrol, &*(&frames as *const <DEBUG_STACK_FRAME_EX as ::windows::core::Abi>::Abi as *const <DEBUG_STACK_FRAME_EX as ::windows::core::DefaultType>::DefaultType), framessize, &*(&framecontexts as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), framecontextssize, framecontextsentrysize, flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointByGuid<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guid: *const ::windows::core::GUID, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetBreakpointByGuid(&*(&guid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&bp)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExecutionStatusEx<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, status: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExecutionStatusEx(::core::mem::transmute_copy(&status)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSynchronizationStatus<Impl: IDebugControl6Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sendsattempted: *mut u32, secondssincelastresponse: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSynchronizationStatus(::core::mem::transmute_copy(&sendsattempted), ::core::mem::transmute_copy(&secondssincelastresponse)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            base.0,
            base.1,
            base.2,
            base.3,
            ::windows::core::GetRuntimeClassName::<IDebugControl6>,
            base.5,
            GetInterrupt::<Impl, OFFSET>,
            SetInterrupt::<Impl, OFFSET>,
            GetInterruptTimeout::<Impl, OFFSET>,
            SetInterruptTimeout::<Impl, OFFSET>,
            GetLogFile::<Impl, OFFSET>,
            OpenLogFile::<Impl, OFFSET>,
            CloseLogFile::<Impl, OFFSET>,
            GetLogMask::<Impl, OFFSET>,
            SetLogMask::<Impl, OFFSET>,
            Input::<Impl, OFFSET>,
            ReturnInput::<Impl, OFFSET>,
            Output::<Impl, OFFSET>,
            OutputVaList::<Impl, OFFSET>,
            ControlledOutput::<Impl, OFFSET>,
            ControlledOutputVaList::<Impl, OFFSET>,
            OutputPrompt::<Impl, OFFSET>,
            OutputPromptVaList::<Impl, OFFSET>,
            GetPromptText::<Impl, OFFSET>,
            OutputCurrentState::<Impl, OFFSET>,
            OutputVersionInformation::<Impl, OFFSET>,
            GetNotifyEventHandle::<Impl, OFFSET>,
            SetNotifyEventHandle::<Impl, OFFSET>,
            Assemble::<Impl, OFFSET>,
            Disassemble::<Impl, OFFSET>,
            GetDisassembleEffectiveOffset::<Impl, OFFSET>,
            OutputDisassembly::<Impl, OFFSET>,
            OutputDisassemblyLines::<Impl, OFFSET>,
            GetNearInstruction::<Impl, OFFSET>,
            GetStackTrace::<Impl, OFFSET>,
            GetReturnOffset::<Impl, OFFSET>,
            OutputStackTrace::<Impl, OFFSET>,
            GetDebuggeeType::<Impl, OFFSET>,
            GetActualProcessorType::<Impl, OFFSET>,
            GetExecutingProcessorType::<Impl, OFFSET>,
            GetNumberPossibleExecutingProcessorTypes::<Impl, OFFSET>,
            GetPossibleExecutingProcessorTypes::<Impl, OFFSET>,
            GetNumberProcessors::<Impl, OFFSET>,
            GetSystemVersion::<Impl, OFFSET>,
            GetPageSize::<Impl, OFFSET>,
            IsPointer64Bit::<Impl, OFFSET>,
            ReadBugCheckData::<Impl, OFFSET>,
            GetNumberSupportedProcessorTypes::<Impl, OFFSET>,
            GetSupportedProcessorTypes::<Impl, OFFSET>,
            GetProcessorTypeNames::<Impl, OFFSET>,
            GetEffectiveProcessorType::<Impl, OFFSET>,
            SetEffectiveProcessorType::<Impl, OFFSET>,
            GetExecutionStatus::<Impl, OFFSET>,
            SetExecutionStatus::<Impl, OFFSET>,
            GetCodeLevel::<Impl, OFFSET>,
            SetCodeLevel::<Impl, OFFSET>,
            GetEngineOptions::<Impl, OFFSET>,
            AddEngineOptions::<Impl, OFFSET>,
            RemoveEngineOptions::<Impl, OFFSET>,
            SetEngineOptions::<Impl, OFFSET>,
            GetSystemErrorControl::<Impl, OFFSET>,
            SetSystemErrorControl::<Impl, OFFSET>,
            GetTextMacro::<Impl, OFFSET>,
            SetTextMacro::<Impl, OFFSET>,
            GetRadix::<Impl, OFFSET>,
            SetRadix::<Impl, OFFSET>,
            Evaluate::<Impl, OFFSET>,
            CoerceValue::<Impl, OFFSET>,
            CoerceValues::<Impl, OFFSET>,
            Execute::<Impl, OFFSET>,
            ExecuteCommandFile::<Impl, OFFSET>,
            GetNumberBreakpoints::<Impl, OFFSET>,
            GetBreakpointByIndex::<Impl, OFFSET>,
            GetBreakpointById::<Impl, OFFSET>,
            GetBreakpointParameters::<Impl, OFFSET>,
            AddBreakpoint::<Impl, OFFSET>,
            RemoveBreakpoint::<Impl, OFFSET>,
            AddExtension::<Impl, OFFSET>,
            RemoveExtension::<Impl, OFFSET>,
            GetExtensionByPath::<Impl, OFFSET>,
            CallExtension::<Impl, OFFSET>,
            GetExtensionFunction::<Impl, OFFSET>,
            GetWindbgExtensionApis32::<Impl, OFFSET>,
            GetWindbgExtensionApis64::<Impl, OFFSET>,
            GetNumberEventFilters::<Impl, OFFSET>,
            GetEventFilterText::<Impl, OFFSET>,
            GetEventFilterCommand::<Impl, OFFSET>,
            SetEventFilterCommand::<Impl, OFFSET>,
            GetSpecificFilterParameters::<Impl, OFFSET>,
            SetSpecificFilterParameters::<Impl, OFFSET>,
            GetSpecificFilterArgument::<Impl, OFFSET>,
            SetSpecificFilterArgument::<Impl, OFFSET>,
            GetExceptionFilterParameters::<Impl, OFFSET>,
            SetExceptionFilterParameters::<Impl, OFFSET>,
            GetExceptionFilterSecondCommand::<Impl, OFFSET>,
            SetExceptionFilterSecondCommand::<Impl, OFFSET>,
            WaitForEvent::<Impl, OFFSET>,
            GetLastEventInformation::<Impl, OFFSET>,
            GetCurrentTimeDate::<Impl, OFFSET>,
            GetCurrentSystemUpTime::<Impl, OFFSET>,
            GetDumpFormatFlags::<Impl, OFFSET>,
            GetNumberTextReplacements::<Impl, OFFSET>,
            GetTextReplacement::<Impl, OFFSET>,
            SetTextReplacement::<Impl, OFFSET>,
            RemoveTextReplacements::<Impl, OFFSET>,
            OutputTextReplacements::<Impl, OFFSET>,
            GetAssemblyOptions::<Impl, OFFSET>,
            AddAssemblyOptions::<Impl, OFFSET>,
            RemoveAssemblyOptions::<Impl, OFFSET>,
            SetAssemblyOptions::<Impl, OFFSET>,
            GetExpressionSyntax::<Impl, OFFSET>,
            SetExpressionSyntax::<Impl, OFFSET>,
            SetExpressionSyntaxByName::<Impl, OFFSET>,
            GetNumberExpressionSyntaxes::<Impl, OFFSET>,
            GetExpressionSyntaxNames::<Impl, OFFSET>,
            GetNumberEvents::<Impl, OFFSET>,
            GetEventIndexDescription::<Impl, OFFSET>,
            GetCurrentEventIndex::<Impl, OFFSET>,
            SetNextEventIndex::<Impl, OFFSET>,
            GetLogFileWide::<Impl, OFFSET>,
            OpenLogFileWide::<Impl, OFFSET>,
            InputWide::<Impl, OFFSET>,
            ReturnInputWide::<Impl, OFFSET>,
            OutputWide::<Impl, OFFSET>,
            OutputVaListWide::<Impl, OFFSET>,
            ControlledOutputWide::<Impl, OFFSET>,
            ControlledOutputVaListWide::<Impl, OFFSET>,
            OutputPromptWide::<Impl, OFFSET>,
            OutputPromptVaListWide::<Impl, OFFSET>,
            GetPromptTextWide::<Impl, OFFSET>,
            AssembleWide::<Impl, OFFSET>,
            DisassembleWide::<Impl, OFFSET>,
            GetProcessorTypeNamesWide::<Impl, OFFSET>,
            GetTextMacroWide::<Impl, OFFSET>,
            SetTextMacroWide::<Impl, OFFSET>,
            EvaluateWide::<Impl, OFFSET>,
            ExecuteWide::<Impl, OFFSET>,
            ExecuteCommandFileWide::<Impl, OFFSET>,
            GetBreakpointByIndex2::<Impl, OFFSET>,
            GetBreakpointById2::<Impl, OFFSET>,
            AddBreakpoint2::<Impl, OFFSET>,
            RemoveBreakpoint2::<Impl, OFFSET>,
            AddExtensionWide::<Impl, OFFSET>,
            GetExtensionByPathWide::<Impl, OFFSET>,
            CallExtensionWide::<Impl, OFFSET>,
            GetExtensionFunctionWide::<Impl, OFFSET>,
            GetEventFilterTextWide::<Impl, OFFSET>,
            GetEventFilterCommandWide::<Impl, OFFSET>,
            SetEventFilterCommandWide::<Impl, OFFSET>,
            GetSpecificFilterArgumentWide::<Impl, OFFSET>,
            SetSpecificFilterArgumentWide::<Impl, OFFSET>,
            GetExceptionFilterSecondCommandWide::<Impl, OFFSET>,
            SetExceptionFilterSecondCommandWide::<Impl, OFFSET>,
            GetLastEventInformationWide::<Impl, OFFSET>,
            GetTextReplacementWide::<Impl, OFFSET>,
            SetTextReplacementWide::<Impl, OFFSET>,
            SetExpressionSyntaxByNameWide::<Impl, OFFSET>,
            GetExpressionSyntaxNamesWide::<Impl, OFFSET>,
            GetEventIndexDescriptionWide::<Impl, OFFSET>,
            GetLogFile2::<Impl, OFFSET>,
            OpenLogFile2::<Impl, OFFSET>,
            GetLogFile2Wide::<Impl, OFFSET>,
            OpenLogFile2Wide::<Impl, OFFSET>,
            GetSystemVersionValues::<Impl, OFFSET>,
            GetSystemVersionString::<Impl, OFFSET>,
            GetSystemVersionStringWide::<Impl, OFFSET>,
            GetContextStackTrace::<Impl, OFFSET>,
            OutputContextStackTrace::<Impl, OFFSET>,
            GetStoredEventInformation::<Impl, OFFSET>,
            GetManagedStatus::<Impl, OFFSET>,
            GetManagedStatusWide::<Impl, OFFSET>,
            ResetManagedStatus::<Impl, OFFSET>,
            GetStackTraceEx::<Impl, OFFSET>,
            OutputStackTraceEx::<Impl, OFFSET>,
            GetContextStackTraceEx::<Impl, OFFSET>,
            OutputContextStackTraceEx::<Impl, OFFSET>,
            GetBreakpointByGuid::<Impl, OFFSET>,
            GetExecutionStatusEx::<Impl, OFFSET>,
            GetSynchronizationStatus::<Impl, OFFSET>,
        )
    }
}
pub trait IDebugControl7Impl: Sized {
    fn GetInterrupt();
    fn SetInterrupt();
    fn GetInterruptTimeout();
    fn SetInterruptTimeout();
    fn GetLogFile();
    fn OpenLogFile();
    fn CloseLogFile();
    fn GetLogMask();
    fn SetLogMask();
    fn Input();
    fn ReturnInput();
    fn Output();
    fn OutputVaList();
    fn ControlledOutput();
    fn ControlledOutputVaList();
    fn OutputPrompt();
    fn OutputPromptVaList();
    fn GetPromptText();
    fn OutputCurrentState();
    fn OutputVersionInformation();
    fn GetNotifyEventHandle();
    fn SetNotifyEventHandle();
    fn Assemble();
    fn Disassemble();
    fn GetDisassembleEffectiveOffset();
    fn OutputDisassembly();
    fn OutputDisassemblyLines();
    fn GetNearInstruction();
    fn GetStackTrace();
    fn GetReturnOffset();
    fn OutputStackTrace();
    fn GetDebuggeeType();
    fn GetActualProcessorType();
    fn GetExecutingProcessorType();
    fn GetNumberPossibleExecutingProcessorTypes();
    fn GetPossibleExecutingProcessorTypes();
    fn GetNumberProcessors();
    fn GetSystemVersion();
    fn GetPageSize();
    fn IsPointer64Bit();
    fn ReadBugCheckData();
    fn GetNumberSupportedProcessorTypes();
    fn GetSupportedProcessorTypes();
    fn GetProcessorTypeNames();
    fn GetEffectiveProcessorType();
    fn SetEffectiveProcessorType();
    fn GetExecutionStatus();
    fn SetExecutionStatus();
    fn GetCodeLevel();
    fn SetCodeLevel();
    fn GetEngineOptions();
    fn AddEngineOptions();
    fn RemoveEngineOptions();
    fn SetEngineOptions();
    fn GetSystemErrorControl();
    fn SetSystemErrorControl();
    fn GetTextMacro();
    fn SetTextMacro();
    fn GetRadix();
    fn SetRadix();
    fn Evaluate();
    fn CoerceValue();
    fn CoerceValues();
    fn Execute();
    fn ExecuteCommandFile();
    fn GetNumberBreakpoints();
    fn GetBreakpointByIndex();
    fn GetBreakpointById();
    fn GetBreakpointParameters();
    fn AddBreakpoint();
    fn RemoveBreakpoint();
    fn AddExtension();
    fn RemoveExtension();
    fn GetExtensionByPath();
    fn CallExtension();
    fn GetExtensionFunction();
    fn GetWindbgExtensionApis32();
    fn GetWindbgExtensionApis64();
    fn GetNumberEventFilters();
    fn GetEventFilterText();
    fn GetEventFilterCommand();
    fn SetEventFilterCommand();
    fn GetSpecificFilterParameters();
    fn SetSpecificFilterParameters();
    fn GetSpecificFilterArgument();
    fn SetSpecificFilterArgument();
    fn GetExceptionFilterParameters();
    fn SetExceptionFilterParameters();
    fn GetExceptionFilterSecondCommand();
    fn SetExceptionFilterSecondCommand();
    fn WaitForEvent();
    fn GetLastEventInformation();
    fn GetCurrentTimeDate();
    fn GetCurrentSystemUpTime();
    fn GetDumpFormatFlags();
    fn GetNumberTextReplacements();
    fn GetTextReplacement();
    fn SetTextReplacement();
    fn RemoveTextReplacements();
    fn OutputTextReplacements();
    fn GetAssemblyOptions();
    fn AddAssemblyOptions();
    fn RemoveAssemblyOptions();
    fn SetAssemblyOptions();
    fn GetExpressionSyntax();
    fn SetExpressionSyntax();
    fn SetExpressionSyntaxByName();
    fn GetNumberExpressionSyntaxes();
    fn GetExpressionSyntaxNames();
    fn GetNumberEvents();
    fn GetEventIndexDescription();
    fn GetCurrentEventIndex();
    fn SetNextEventIndex();
    fn GetLogFileWide();
    fn OpenLogFileWide();
    fn InputWide();
    fn ReturnInputWide();
    fn OutputWide();
    fn OutputVaListWide();
    fn ControlledOutputWide();
    fn ControlledOutputVaListWide();
    fn OutputPromptWide();
    fn OutputPromptVaListWide();
    fn GetPromptTextWide();
    fn AssembleWide();
    fn DisassembleWide();
    fn GetProcessorTypeNamesWide();
    fn GetTextMacroWide();
    fn SetTextMacroWide();
    fn EvaluateWide();
    fn ExecuteWide();
    fn ExecuteCommandFileWide();
    fn GetBreakpointByIndex2();
    fn GetBreakpointById2();
    fn AddBreakpoint2();
    fn RemoveBreakpoint2();
    fn AddExtensionWide();
    fn GetExtensionByPathWide();
    fn CallExtensionWide();
    fn GetExtensionFunctionWide();
    fn GetEventFilterTextWide();
    fn GetEventFilterCommandWide();
    fn SetEventFilterCommandWide();
    fn GetSpecificFilterArgumentWide();
    fn SetSpecificFilterArgumentWide();
    fn GetExceptionFilterSecondCommandWide();
    fn SetExceptionFilterSecondCommandWide();
    fn GetLastEventInformationWide();
    fn GetTextReplacementWide();
    fn SetTextReplacementWide();
    fn SetExpressionSyntaxByNameWide();
    fn GetExpressionSyntaxNamesWide();
    fn GetEventIndexDescriptionWide();
    fn GetLogFile2();
    fn OpenLogFile2();
    fn GetLogFile2Wide();
    fn OpenLogFile2Wide();
    fn GetSystemVersionValues();
    fn GetSystemVersionString();
    fn GetSystemVersionStringWide();
    fn GetContextStackTrace();
    fn OutputContextStackTrace();
    fn GetStoredEventInformation();
    fn GetManagedStatus();
    fn GetManagedStatusWide();
    fn ResetManagedStatus();
    fn GetStackTraceEx();
    fn OutputStackTraceEx();
    fn GetContextStackTraceEx();
    fn OutputContextStackTraceEx();
    fn GetBreakpointByGuid();
    fn GetExecutionStatusEx();
    fn GetSynchronizationStatus();
    fn GetDebuggeeType2();
}
impl ::windows::core::RuntimeName for IDebugControl7 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugControl7";
}
impl IDebugControl7Vtbl {
    pub const fn new<Impl: IDebugControl7Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugControl7Vtbl {
        unsafe extern "system" fn GetInterrupt<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetInterrupt() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetInterrupt<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetInterrupt(flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetInterruptTimeout<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, seconds: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetInterruptTimeout(::core::mem::transmute_copy(&seconds)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetInterruptTimeout<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, seconds: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetInterruptTimeout(seconds) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLogFile<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLogFile(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&append)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OpenLogFile<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PSTR, append: super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OpenLogFile(&*(&file as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), &*(&append as *const <super::super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CloseLogFile<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CloseLogFile() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLogMask<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLogMask(::core::mem::transmute_copy(&mask)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetLogMask<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetLogMask(mask) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Input<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Input(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&inputsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReturnInput<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReturnInput(&*(&buffer as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Output<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Output(mask, &*(&format as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputVaList<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputVaList(mask, &*(&format as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), args) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ControlledOutput<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ControlledOutput(outputcontrol, mask, &*(&format as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ControlledOutputVaList<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ControlledOutputVaList(outputcontrol, mask, &*(&format as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), args) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputPrompt<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputPrompt(outputcontrol, &*(&format as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputPromptVaList<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputPromptVaList(outputcontrol, &*(&format as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), args) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPromptText<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetPromptText(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&textsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputCurrentState<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputCurrentState(outputcontrol, flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputVersionInformation<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputVersionInformation(outputcontrol) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNotifyEventHandle<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNotifyEventHandle(::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetNotifyEventHandle<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetNotifyEventHandle(handle) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Assemble<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, instr: super::super::super::Foundation::PSTR, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Assemble(offset, &*(&instr as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&endoffset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Disassemble<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Disassemble(offset, flags, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&disassemblysize), ::core::mem::transmute_copy(&endoffset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDisassembleEffectiveOffset<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDisassembleEffectiveOffset(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputDisassembly<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, flags: u32, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputDisassembly(outputcontrol, offset, flags, ::core::mem::transmute_copy(&endoffset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputDisassemblyLines<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputDisassemblyLines(outputcontrol, previouslines, totallines, offset, flags, ::core::mem::transmute_copy(&offsetline), ::core::mem::transmute_copy(&startoffset), ::core::mem::transmute_copy(&endoffset), ::core::mem::transmute_copy(&lineoffsets)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNearInstruction<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, nearoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNearInstruction(offset, delta, ::core::mem::transmute_copy(&nearoffset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetStackTrace<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetStackTrace(frameoffset, stackoffset, instructionoffset, ::core::mem::transmute_copy(&frames), framessize, ::core::mem::transmute_copy(&framesfilled)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetReturnOffset<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetReturnOffset(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputStackTrace<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputStackTrace(outputcontrol, &*(&frames as *const <DEBUG_STACK_FRAME as ::windows::core::Abi>::Abi as *const <DEBUG_STACK_FRAME as ::windows::core::DefaultType>::DefaultType), framessize, flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDebuggeeType<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, class: *mut u32, qualifier: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDebuggeeType(::core::mem::transmute_copy(&class), ::core::mem::transmute_copy(&qualifier)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetActualProcessorType<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetActualProcessorType(::core::mem::transmute_copy(&r#type)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExecutingProcessorType<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExecutingProcessorType(::core::mem::transmute_copy(&r#type)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberPossibleExecutingProcessorTypes<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberPossibleExecutingProcessorTypes(::core::mem::transmute_copy(&number)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPossibleExecutingProcessorTypes<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetPossibleExecutingProcessorTypes(start, count, ::core::mem::transmute_copy(&types)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberProcessors<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberProcessors(::core::mem::transmute_copy(&number)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSystemVersion<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: super::super::super::Foundation::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: super::super::super::Foundation::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSystemVersion(::core::mem::transmute_copy(&platformid), ::core::mem::transmute_copy(&major), ::core::mem::transmute_copy(&minor), ::core::mem::transmute_copy(&servicepackstring), servicepackstringsize, ::core::mem::transmute_copy(&servicepackstringused), ::core::mem::transmute_copy(&servicepacknumber), ::core::mem::transmute_copy(&buildstring), buildstringsize, ::core::mem::transmute_copy(&buildstringused)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPageSize<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, size: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetPageSize(::core::mem::transmute_copy(&size)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsPointer64Bit<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).IsPointer64Bit() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadBugCheckData<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadBugCheckData(::core::mem::transmute_copy(&code), ::core::mem::transmute_copy(&arg1), ::core::mem::transmute_copy(&arg2), ::core::mem::transmute_copy(&arg3), ::core::mem::transmute_copy(&arg4)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberSupportedProcessorTypes<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberSupportedProcessorTypes(::core::mem::transmute_copy(&number)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSupportedProcessorTypes<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSupportedProcessorTypes(start, count, ::core::mem::transmute_copy(&types)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessorTypeNames<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetProcessorTypeNames(r#type, ::core::mem::transmute_copy(&fullnamebuffer), fullnamebuffersize, ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), abbrevnamebuffersize, ::core::mem::transmute_copy(&abbrevnamesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEffectiveProcessorType<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEffectiveProcessorType(::core::mem::transmute_copy(&r#type)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEffectiveProcessorType<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetEffectiveProcessorType(r#type) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExecutionStatus<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, status: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExecutionStatus(::core::mem::transmute_copy(&status)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetExecutionStatus<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, status: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetExecutionStatus(status) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCodeLevel<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, level: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCodeLevel(::core::mem::transmute_copy(&level)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetCodeLevel<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, level: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetCodeLevel(level) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEngineOptions<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEngineOptions(::core::mem::transmute_copy(&options)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddEngineOptions<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddEngineOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveEngineOptions<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveEngineOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEngineOptions<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetEngineOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSystemErrorControl<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSystemErrorControl(::core::mem::transmute_copy(&outputlevel), ::core::mem::transmute_copy(&breaklevel)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSystemErrorControl<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputlevel: u32, breaklevel: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetSystemErrorControl(outputlevel, breaklevel) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTextMacro<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, slot: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTextMacro(slot, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&macrosize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetTextMacro<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, slot: u32, r#macro: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetTextMacro(slot, &*(&r#macro as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRadix<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, radix: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetRadix(::core::mem::transmute_copy(&radix)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetRadix<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, radix: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetRadix(radix) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Evaluate<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, expression: super::super::super::Foundation::PSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Evaluate(&*(&expression as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), desiredtype, ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&remainderindex)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CoerceValue<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#in: *const DEBUG_VALUE, outtype: u32, out: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CoerceValue(&*(&r#in as *const <DEBUG_VALUE as ::windows::core::Abi>::Abi as *const <DEBUG_VALUE as ::windows::core::DefaultType>::DefaultType), outtype, ::core::mem::transmute_copy(&out)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CoerceValues<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CoerceValues(count, &*(&r#in as *const <DEBUG_VALUE as ::windows::core::Abi>::Abi as *const <DEBUG_VALUE as ::windows::core::DefaultType>::DefaultType), outtypes, ::core::mem::transmute_copy(&out)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Execute<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, command: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Execute(outputcontrol, &*(&command as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ExecuteCommandFile<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, commandfile: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ExecuteCommandFile(outputcontrol, &*(&commandfile as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberBreakpoints<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberBreakpoints(::core::mem::transmute_copy(&number)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointByIndex<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetBreakpointByIndex(index, ::core::mem::transmute_copy(&bp)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointById<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetBreakpointById(id, ::core::mem::transmute_copy(&bp)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointParameters<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetBreakpointParameters(count, ids, start, ::core::mem::transmute_copy(&params)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddBreakpoint<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32, desiredid: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddBreakpoint(r#type, desiredid, ::core::mem::transmute_copy(&bp)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveBreakpoint<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bp: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveBreakpoint(&*(&bp as *const <IDebugBreakpoint as ::windows::core::Abi>::Abi as *const <IDebugBreakpoint as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddExtension<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR, flags: u32, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddExtension(&*(&path as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveExtension<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveExtension(handle) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExtensionByPath<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExtensionByPath(&*(&path as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CallExtension<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, function: super::super::super::Foundation::PSTR, arguments: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CallExtension(handle, &*(&function as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), &*(&arguments as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExtensionFunction<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, funcname: super::super::super::Foundation::PSTR, function: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExtensionFunction(handle, &*(&funcname as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&function)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetWindbgExtensionApis32<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetWindbgExtensionApis32(&*(&api as *const <WINDBG_EXTENSION_APIS32 as ::windows::core::Abi>::Abi as *const <WINDBG_EXTENSION_APIS32 as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetWindbgExtensionApis64<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetWindbgExtensionApis64(&*(&api as *const <WINDBG_EXTENSION_APIS64 as ::windows::core::Abi>::Abi as *const <WINDBG_EXTENSION_APIS64 as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberEventFilters<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberEventFilters(::core::mem::transmute_copy(&specificevents), ::core::mem::transmute_copy(&specificexceptions), ::core::mem::transmute_copy(&arbitraryexceptions)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventFilterText<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventFilterText(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&textsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventFilterCommand<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventFilterCommand(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&commandsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEventFilterCommand<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetEventFilterCommand(index, &*(&command as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSpecificFilterParameters<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSpecificFilterParameters(start, count, ::core::mem::transmute_copy(&params)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSpecificFilterParameters<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetSpecificFilterParameters(start, count, &*(&params as *const <DEBUG_SPECIFIC_FILTER_PARAMETERS as ::windows::core::Abi>::Abi as *const <DEBUG_SPECIFIC_FILTER_PARAMETERS as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSpecificFilterArgument<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSpecificFilterArgument(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&argumentsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSpecificFilterArgument<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, argument: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetSpecificFilterArgument(index, &*(&argument as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExceptionFilterParameters<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExceptionFilterParameters(count, codes, start, ::core::mem::transmute_copy(&params)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetExceptionFilterParameters<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetExceptionFilterParameters(count, &*(&params as *const <DEBUG_EXCEPTION_FILTER_PARAMETERS as ::windows::core::Abi>::Abi as *const <DEBUG_EXCEPTION_FILTER_PARAMETERS as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExceptionFilterSecondCommand<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExceptionFilterSecondCommand(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&commandsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetExceptionFilterSecondCommand<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetExceptionFilterSecondCommand(index, &*(&command as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WaitForEvent<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, timeout: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WaitForEvent(flags, timeout) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLastEventInformation<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLastEventInformation(::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid), ::core::mem::transmute_copy(&extrainformation), extrainformationsize, ::core::mem::transmute_copy(&extrainformationused), ::core::mem::transmute_copy(&description), descriptionsize, ::core::mem::transmute_copy(&descriptionused)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentTimeDate<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, timedate: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentTimeDate(::core::mem::transmute_copy(&timedate)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentSystemUpTime<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, uptime: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentSystemUpTime(::core::mem::transmute_copy(&uptime)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDumpFormatFlags<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, formatflags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDumpFormatFlags(::core::mem::transmute_copy(&formatflags)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberTextReplacements<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, numrepl: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberTextReplacements(::core::mem::transmute_copy(&numrepl)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTextReplacement<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PSTR, index: u32, srcbuffer: super::super::super::Foundation::PSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTextReplacement(&*(&srctext as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), index, ::core::mem::transmute_copy(&srcbuffer), srcbuffersize, ::core::mem::transmute_copy(&srcsize), ::core::mem::transmute_copy(&dstbuffer), dstbuffersize, ::core::mem::transmute_copy(&dstsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetTextReplacement<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PSTR, dsttext: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetTextReplacement(&*(&srctext as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), &*(&dsttext as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveTextReplacements<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveTextReplacements() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputTextReplacements<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputTextReplacements(outputcontrol, flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetAssemblyOptions<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetAssemblyOptions(::core::mem::transmute_copy(&options)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddAssemblyOptions<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddAssemblyOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveAssemblyOptions<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveAssemblyOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetAssemblyOptions<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetAssemblyOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExpressionSyntax<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExpressionSyntax(::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetExpressionSyntax<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetExpressionSyntax(flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetExpressionSyntaxByName<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, abbrevname: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetExpressionSyntaxByName(&*(&abbrevname as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberExpressionSyntaxes<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberExpressionSyntaxes(::core::mem::transmute_copy(&number)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExpressionSyntaxNames<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, fullnamebuffer: super::super::super::Foundation::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExpressionSyntaxNames(index, ::core::mem::transmute_copy(&fullnamebuffer), fullnamebuffersize, ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), abbrevnamebuffersize, ::core::mem::transmute_copy(&abbrevnamesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberEvents<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, events: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberEvents(::core::mem::transmute_copy(&events)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventIndexDescription<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, descsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventIndexDescription(index, which, &*(&buffer as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), buffersize, ::core::mem::transmute_copy(&descsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentEventIndex<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentEventIndex(::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetNextEventIndex<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, relation: u32, value: u32, nextindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetNextEventIndex(relation, value, ::core::mem::transmute_copy(&nextindex)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLogFileWide<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLogFileWide(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&append)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OpenLogFileWide<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PWSTR, append: super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OpenLogFileWide(&*(&file as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&append as *const <super::super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn InputWide<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, inputsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).InputWide(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&inputsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReturnInputWide<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReturnInputWide(&*(&buffer as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputWide<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputWide(mask, &*(&format as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputVaListWide<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputVaListWide(mask, &*(&format as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), args) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ControlledOutputWide<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ControlledOutputWide(outputcontrol, mask, &*(&format as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ControlledOutputVaListWide<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ControlledOutputVaListWide(outputcontrol, mask, &*(&format as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), args) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputPromptWide<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputPromptWide(outputcontrol, &*(&format as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputPromptVaListWide<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: super::super::super::Foundation::PWSTR, args: *const i8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputPromptVaListWide(outputcontrol, &*(&format as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), args) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPromptTextWide<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetPromptTextWide(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&textsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AssembleWide<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, instr: super::super::super::Foundation::PWSTR, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AssembleWide(offset, &*(&instr as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&endoffset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DisassembleWide<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).DisassembleWide(offset, flags, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&disassemblysize), ::core::mem::transmute_copy(&endoffset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessorTypeNamesWide<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32, fullnamebuffer: super::super::super::Foundation::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetProcessorTypeNamesWide(r#type, ::core::mem::transmute_copy(&fullnamebuffer), fullnamebuffersize, ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), abbrevnamebuffersize, ::core::mem::transmute_copy(&abbrevnamesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTextMacroWide<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, slot: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, macrosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTextMacroWide(slot, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&macrosize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetTextMacroWide<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, slot: u32, r#macro: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetTextMacroWide(slot, &*(&r#macro as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EvaluateWide<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, expression: super::super::super::Foundation::PWSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EvaluateWide(&*(&expression as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), desiredtype, ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&remainderindex)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ExecuteWide<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, command: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ExecuteWide(outputcontrol, &*(&command as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ExecuteCommandFileWide<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, commandfile: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ExecuteCommandFileWide(outputcontrol, &*(&commandfile as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointByIndex2<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetBreakpointByIndex2(index, ::core::mem::transmute_copy(&bp)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointById2<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetBreakpointById2(id, ::core::mem::transmute_copy(&bp)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddBreakpoint2<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32, desiredid: u32, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddBreakpoint2(r#type, desiredid, ::core::mem::transmute_copy(&bp)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveBreakpoint2<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bp: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveBreakpoint2(&*(&bp as *const <IDebugBreakpoint2 as ::windows::core::Abi>::Abi as *const <IDebugBreakpoint2 as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddExtensionWide<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PWSTR, flags: u32, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddExtensionWide(&*(&path as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExtensionByPathWide<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PWSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExtensionByPathWide(&*(&path as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CallExtensionWide<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, function: super::super::super::Foundation::PWSTR, arguments: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CallExtensionWide(handle, &*(&function as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&arguments as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExtensionFunctionWide<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, funcname: super::super::super::Foundation::PWSTR, function: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExtensionFunctionWide(handle, &*(&funcname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&function)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventFilterTextWide<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventFilterTextWide(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&textsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventFilterCommandWide<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventFilterCommandWide(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&commandsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEventFilterCommandWide<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetEventFilterCommandWide(index, &*(&command as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSpecificFilterArgumentWide<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSpecificFilterArgumentWide(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&argumentsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSpecificFilterArgumentWide<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, argument: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetSpecificFilterArgumentWide(index, &*(&argument as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExceptionFilterSecondCommandWide<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExceptionFilterSecondCommandWide(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&commandsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetExceptionFilterSecondCommandWide<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, command: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetExceptionFilterSecondCommandWide(index, &*(&command as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLastEventInformationWide<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: super::super::super::Foundation::PWSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLastEventInformationWide(::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid), ::core::mem::transmute_copy(&extrainformation), extrainformationsize, ::core::mem::transmute_copy(&extrainformationused), ::core::mem::transmute_copy(&description), descriptionsize, ::core::mem::transmute_copy(&descriptionused)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTextReplacementWide<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PWSTR, index: u32, srcbuffer: super::super::super::Foundation::PWSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: super::super::super::Foundation::PWSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTextReplacementWide(&*(&srctext as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), index, ::core::mem::transmute_copy(&srcbuffer), srcbuffersize, ::core::mem::transmute_copy(&srcsize), ::core::mem::transmute_copy(&dstbuffer), dstbuffersize, ::core::mem::transmute_copy(&dstsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetTextReplacementWide<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, srctext: super::super::super::Foundation::PWSTR, dsttext: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetTextReplacementWide(&*(&srctext as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&dsttext as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetExpressionSyntaxByNameWide<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, abbrevname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetExpressionSyntaxByNameWide(&*(&abbrevname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExpressionSyntaxNamesWide<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, fullnamebuffer: super::super::super::Foundation::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: super::super::super::Foundation::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExpressionSyntaxNamesWide(index, ::core::mem::transmute_copy(&fullnamebuffer), fullnamebuffersize, ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), abbrevnamebuffersize, ::core::mem::transmute_copy(&abbrevnamesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventIndexDescriptionWide<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, descsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventIndexDescriptionWide(index, which, &*(&buffer as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), buffersize, ::core::mem::transmute_copy(&descsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLogFile2<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLogFile2(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OpenLogFile2<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OpenLogFile2(&*(&file as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLogFile2Wide<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLogFile2Wide(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OpenLogFile2Wide<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OpenLogFile2Wide(&*(&file as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSystemVersionValues<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, platformid: *mut u32, win32major: *mut u32, win32minor: *mut u32, kdmajor: *mut u32, kdminor: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSystemVersionValues(::core::mem::transmute_copy(&platformid), ::core::mem::transmute_copy(&win32major), ::core::mem::transmute_copy(&win32minor), ::core::mem::transmute_copy(&kdmajor), ::core::mem::transmute_copy(&kdminor)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSystemVersionString<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSystemVersionString(which, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&stringsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSystemVersionStringWide<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSystemVersionStringWide(which, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&stringsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetContextStackTrace<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, startcontext: *const ::core::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framecontexts: *mut ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetContextStackTrace(&*(&startcontext as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), startcontextsize, ::core::mem::transmute_copy(&frames), framessize, ::core::mem::transmute_copy(&framecontexts), framecontextssize, framecontextsentrysize, ::core::mem::transmute_copy(&framesfilled)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputContextStackTrace<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, framecontexts: *const ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputContextStackTrace(outputcontrol, &*(&frames as *const <DEBUG_STACK_FRAME as ::windows::core::Abi>::Abi as *const <DEBUG_STACK_FRAME as ::windows::core::DefaultType>::DefaultType), framessize, &*(&framecontexts as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), framecontextssize, framecontextsentrysize, flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetStoredEventInformation<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, context: *mut ::core::ffi::c_void, contextsize: u32, contextused: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetStoredEventInformation(::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid), ::core::mem::transmute_copy(&context), contextsize, ::core::mem::transmute_copy(&contextused), ::core::mem::transmute_copy(&extrainformation), extrainformationsize, ::core::mem::transmute_copy(&extrainformationused)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetManagedStatus<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: *mut u32, whichstring: u32, string: super::super::super::Foundation::PSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetManagedStatus(::core::mem::transmute_copy(&flags), whichstring, ::core::mem::transmute_copy(&string), stringsize, ::core::mem::transmute_copy(&stringneeded)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetManagedStatusWide<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: *mut u32, whichstring: u32, string: super::super::super::Foundation::PWSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetManagedStatusWide(::core::mem::transmute_copy(&flags), whichstring, ::core::mem::transmute_copy(&string), stringsize, ::core::mem::transmute_copy(&stringneeded)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ResetManagedStatus<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ResetManagedStatus(flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetStackTraceEx<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME_EX, framessize: u32, framesfilled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetStackTraceEx(frameoffset, stackoffset, instructionoffset, ::core::mem::transmute_copy(&frames), framessize, ::core::mem::transmute_copy(&framesfilled)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputStackTraceEx<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME_EX, framessize: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputStackTraceEx(outputcontrol, &*(&frames as *const <DEBUG_STACK_FRAME_EX as ::windows::core::Abi>::Abi as *const <DEBUG_STACK_FRAME_EX as ::windows::core::DefaultType>::DefaultType), framessize, flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetContextStackTraceEx<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, startcontext: *const ::core::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME_EX, framessize: u32, framecontexts: *mut ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetContextStackTraceEx(&*(&startcontext as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), startcontextsize, ::core::mem::transmute_copy(&frames), framessize, ::core::mem::transmute_copy(&framecontexts), framecontextssize, framecontextsentrysize, ::core::mem::transmute_copy(&framesfilled)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputContextStackTraceEx<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME_EX, framessize: u32, framecontexts: *const ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputContextStackTraceEx(outputcontrol, &*(&frames as *const <DEBUG_STACK_FRAME_EX as ::windows::core::Abi>::Abi as *const <DEBUG_STACK_FRAME_EX as ::windows::core::DefaultType>::DefaultType), framessize, &*(&framecontexts as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), framecontextssize, framecontextsentrysize, flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBreakpointByGuid<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guid: *const ::windows::core::GUID, bp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetBreakpointByGuid(&*(&guid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&bp)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExecutionStatusEx<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, status: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExecutionStatusEx(::core::mem::transmute_copy(&status)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSynchronizationStatus<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sendsattempted: *mut u32, secondssincelastresponse: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSynchronizationStatus(::core::mem::transmute_copy(&sendsattempted), ::core::mem::transmute_copy(&secondssincelastresponse)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDebuggeeType2<Impl: IDebugControl7Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, class: *mut u32, qualifier: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDebuggeeType2(flags, ::core::mem::transmute_copy(&class), ::core::mem::transmute_copy(&qualifier)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            base.0,
            base.1,
            base.2,
            base.3,
            ::windows::core::GetRuntimeClassName::<IDebugControl7>,
            base.5,
            GetInterrupt::<Impl, OFFSET>,
            SetInterrupt::<Impl, OFFSET>,
            GetInterruptTimeout::<Impl, OFFSET>,
            SetInterruptTimeout::<Impl, OFFSET>,
            GetLogFile::<Impl, OFFSET>,
            OpenLogFile::<Impl, OFFSET>,
            CloseLogFile::<Impl, OFFSET>,
            GetLogMask::<Impl, OFFSET>,
            SetLogMask::<Impl, OFFSET>,
            Input::<Impl, OFFSET>,
            ReturnInput::<Impl, OFFSET>,
            Output::<Impl, OFFSET>,
            OutputVaList::<Impl, OFFSET>,
            ControlledOutput::<Impl, OFFSET>,
            ControlledOutputVaList::<Impl, OFFSET>,
            OutputPrompt::<Impl, OFFSET>,
            OutputPromptVaList::<Impl, OFFSET>,
            GetPromptText::<Impl, OFFSET>,
            OutputCurrentState::<Impl, OFFSET>,
            OutputVersionInformation::<Impl, OFFSET>,
            GetNotifyEventHandle::<Impl, OFFSET>,
            SetNotifyEventHandle::<Impl, OFFSET>,
            Assemble::<Impl, OFFSET>,
            Disassemble::<Impl, OFFSET>,
            GetDisassembleEffectiveOffset::<Impl, OFFSET>,
            OutputDisassembly::<Impl, OFFSET>,
            OutputDisassemblyLines::<Impl, OFFSET>,
            GetNearInstruction::<Impl, OFFSET>,
            GetStackTrace::<Impl, OFFSET>,
            GetReturnOffset::<Impl, OFFSET>,
            OutputStackTrace::<Impl, OFFSET>,
            GetDebuggeeType::<Impl, OFFSET>,
            GetActualProcessorType::<Impl, OFFSET>,
            GetExecutingProcessorType::<Impl, OFFSET>,
            GetNumberPossibleExecutingProcessorTypes::<Impl, OFFSET>,
            GetPossibleExecutingProcessorTypes::<Impl, OFFSET>,
            GetNumberProcessors::<Impl, OFFSET>,
            GetSystemVersion::<Impl, OFFSET>,
            GetPageSize::<Impl, OFFSET>,
            IsPointer64Bit::<Impl, OFFSET>,
            ReadBugCheckData::<Impl, OFFSET>,
            GetNumberSupportedProcessorTypes::<Impl, OFFSET>,
            GetSupportedProcessorTypes::<Impl, OFFSET>,
            GetProcessorTypeNames::<Impl, OFFSET>,
            GetEffectiveProcessorType::<Impl, OFFSET>,
            SetEffectiveProcessorType::<Impl, OFFSET>,
            GetExecutionStatus::<Impl, OFFSET>,
            SetExecutionStatus::<Impl, OFFSET>,
            GetCodeLevel::<Impl, OFFSET>,
            SetCodeLevel::<Impl, OFFSET>,
            GetEngineOptions::<Impl, OFFSET>,
            AddEngineOptions::<Impl, OFFSET>,
            RemoveEngineOptions::<Impl, OFFSET>,
            SetEngineOptions::<Impl, OFFSET>,
            GetSystemErrorControl::<Impl, OFFSET>,
            SetSystemErrorControl::<Impl, OFFSET>,
            GetTextMacro::<Impl, OFFSET>,
            SetTextMacro::<Impl, OFFSET>,
            GetRadix::<Impl, OFFSET>,
            SetRadix::<Impl, OFFSET>,
            Evaluate::<Impl, OFFSET>,
            CoerceValue::<Impl, OFFSET>,
            CoerceValues::<Impl, OFFSET>,
            Execute::<Impl, OFFSET>,
            ExecuteCommandFile::<Impl, OFFSET>,
            GetNumberBreakpoints::<Impl, OFFSET>,
            GetBreakpointByIndex::<Impl, OFFSET>,
            GetBreakpointById::<Impl, OFFSET>,
            GetBreakpointParameters::<Impl, OFFSET>,
            AddBreakpoint::<Impl, OFFSET>,
            RemoveBreakpoint::<Impl, OFFSET>,
            AddExtension::<Impl, OFFSET>,
            RemoveExtension::<Impl, OFFSET>,
            GetExtensionByPath::<Impl, OFFSET>,
            CallExtension::<Impl, OFFSET>,
            GetExtensionFunction::<Impl, OFFSET>,
            GetWindbgExtensionApis32::<Impl, OFFSET>,
            GetWindbgExtensionApis64::<Impl, OFFSET>,
            GetNumberEventFilters::<Impl, OFFSET>,
            GetEventFilterText::<Impl, OFFSET>,
            GetEventFilterCommand::<Impl, OFFSET>,
            SetEventFilterCommand::<Impl, OFFSET>,
            GetSpecificFilterParameters::<Impl, OFFSET>,
            SetSpecificFilterParameters::<Impl, OFFSET>,
            GetSpecificFilterArgument::<Impl, OFFSET>,
            SetSpecificFilterArgument::<Impl, OFFSET>,
            GetExceptionFilterParameters::<Impl, OFFSET>,
            SetExceptionFilterParameters::<Impl, OFFSET>,
            GetExceptionFilterSecondCommand::<Impl, OFFSET>,
            SetExceptionFilterSecondCommand::<Impl, OFFSET>,
            WaitForEvent::<Impl, OFFSET>,
            GetLastEventInformation::<Impl, OFFSET>,
            GetCurrentTimeDate::<Impl, OFFSET>,
            GetCurrentSystemUpTime::<Impl, OFFSET>,
            GetDumpFormatFlags::<Impl, OFFSET>,
            GetNumberTextReplacements::<Impl, OFFSET>,
            GetTextReplacement::<Impl, OFFSET>,
            SetTextReplacement::<Impl, OFFSET>,
            RemoveTextReplacements::<Impl, OFFSET>,
            OutputTextReplacements::<Impl, OFFSET>,
            GetAssemblyOptions::<Impl, OFFSET>,
            AddAssemblyOptions::<Impl, OFFSET>,
            RemoveAssemblyOptions::<Impl, OFFSET>,
            SetAssemblyOptions::<Impl, OFFSET>,
            GetExpressionSyntax::<Impl, OFFSET>,
            SetExpressionSyntax::<Impl, OFFSET>,
            SetExpressionSyntaxByName::<Impl, OFFSET>,
            GetNumberExpressionSyntaxes::<Impl, OFFSET>,
            GetExpressionSyntaxNames::<Impl, OFFSET>,
            GetNumberEvents::<Impl, OFFSET>,
            GetEventIndexDescription::<Impl, OFFSET>,
            GetCurrentEventIndex::<Impl, OFFSET>,
            SetNextEventIndex::<Impl, OFFSET>,
            GetLogFileWide::<Impl, OFFSET>,
            OpenLogFileWide::<Impl, OFFSET>,
            InputWide::<Impl, OFFSET>,
            ReturnInputWide::<Impl, OFFSET>,
            OutputWide::<Impl, OFFSET>,
            OutputVaListWide::<Impl, OFFSET>,
            ControlledOutputWide::<Impl, OFFSET>,
            ControlledOutputVaListWide::<Impl, OFFSET>,
            OutputPromptWide::<Impl, OFFSET>,
            OutputPromptVaListWide::<Impl, OFFSET>,
            GetPromptTextWide::<Impl, OFFSET>,
            AssembleWide::<Impl, OFFSET>,
            DisassembleWide::<Impl, OFFSET>,
            GetProcessorTypeNamesWide::<Impl, OFFSET>,
            GetTextMacroWide::<Impl, OFFSET>,
            SetTextMacroWide::<Impl, OFFSET>,
            EvaluateWide::<Impl, OFFSET>,
            ExecuteWide::<Impl, OFFSET>,
            ExecuteCommandFileWide::<Impl, OFFSET>,
            GetBreakpointByIndex2::<Impl, OFFSET>,
            GetBreakpointById2::<Impl, OFFSET>,
            AddBreakpoint2::<Impl, OFFSET>,
            RemoveBreakpoint2::<Impl, OFFSET>,
            AddExtensionWide::<Impl, OFFSET>,
            GetExtensionByPathWide::<Impl, OFFSET>,
            CallExtensionWide::<Impl, OFFSET>,
            GetExtensionFunctionWide::<Impl, OFFSET>,
            GetEventFilterTextWide::<Impl, OFFSET>,
            GetEventFilterCommandWide::<Impl, OFFSET>,
            SetEventFilterCommandWide::<Impl, OFFSET>,
            GetSpecificFilterArgumentWide::<Impl, OFFSET>,
            SetSpecificFilterArgumentWide::<Impl, OFFSET>,
            GetExceptionFilterSecondCommandWide::<Impl, OFFSET>,
            SetExceptionFilterSecondCommandWide::<Impl, OFFSET>,
            GetLastEventInformationWide::<Impl, OFFSET>,
            GetTextReplacementWide::<Impl, OFFSET>,
            SetTextReplacementWide::<Impl, OFFSET>,
            SetExpressionSyntaxByNameWide::<Impl, OFFSET>,
            GetExpressionSyntaxNamesWide::<Impl, OFFSET>,
            GetEventIndexDescriptionWide::<Impl, OFFSET>,
            GetLogFile2::<Impl, OFFSET>,
            OpenLogFile2::<Impl, OFFSET>,
            GetLogFile2Wide::<Impl, OFFSET>,
            OpenLogFile2Wide::<Impl, OFFSET>,
            GetSystemVersionValues::<Impl, OFFSET>,
            GetSystemVersionString::<Impl, OFFSET>,
            GetSystemVersionStringWide::<Impl, OFFSET>,
            GetContextStackTrace::<Impl, OFFSET>,
            OutputContextStackTrace::<Impl, OFFSET>,
            GetStoredEventInformation::<Impl, OFFSET>,
            GetManagedStatus::<Impl, OFFSET>,
            GetManagedStatusWide::<Impl, OFFSET>,
            ResetManagedStatus::<Impl, OFFSET>,
            GetStackTraceEx::<Impl, OFFSET>,
            OutputStackTraceEx::<Impl, OFFSET>,
            GetContextStackTraceEx::<Impl, OFFSET>,
            OutputContextStackTraceEx::<Impl, OFFSET>,
            GetBreakpointByGuid::<Impl, OFFSET>,
            GetExecutionStatusEx::<Impl, OFFSET>,
            GetSynchronizationStatus::<Impl, OFFSET>,
            GetDebuggeeType2::<Impl, OFFSET>,
        )
    }
}
pub trait IDebugCookieImpl: Sized {
    fn SetDebugCookie();
}
impl ::windows::core::RuntimeName for IDebugCookie {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugCookie";
}
impl IDebugCookieVtbl {
    pub const fn new<Impl: IDebugCookieImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugCookieVtbl {
        unsafe extern "system" fn SetDebugCookie<Impl: IDebugCookieImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwdebugappcookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetDebugCookie(dwdebugappcookie) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugCookie>, base.5, SetDebugCookie::<Impl, OFFSET>)
    }
}
pub trait IDebugDataSpacesImpl: Sized {
    fn ReadVirtual();
    fn WriteVirtual();
    fn SearchVirtual();
    fn ReadVirtualUncached();
    fn WriteVirtualUncached();
    fn ReadPointersVirtual();
    fn WritePointersVirtual();
    fn ReadPhysical();
    fn WritePhysical();
    fn ReadControl();
    fn WriteControl();
    fn ReadIo();
    fn WriteIo();
    fn ReadMsr();
    fn WriteMsr();
    fn ReadBusData();
    fn WriteBusData();
    fn CheckLowMemory();
    fn ReadDebuggerData();
    fn ReadProcessorSystemData();
}
impl ::windows::core::RuntimeName for IDebugDataSpaces {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugDataSpaces";
}
impl IDebugDataSpacesVtbl {
    pub const fn new<Impl: IDebugDataSpacesImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugDataSpacesVtbl {
        unsafe extern "system" fn ReadVirtual<Impl: IDebugDataSpacesImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadVirtual(offset, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&bytesread)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteVirtual<Impl: IDebugDataSpacesImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteVirtual(offset, &*(&buffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), buffersize, ::core::mem::transmute_copy(&byteswritten)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SearchVirtual<Impl: IDebugDataSpacesImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, length: u64, pattern: *const ::core::ffi::c_void, patternsize: u32, patterngranularity: u32, matchoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SearchVirtual(offset, length, &*(&pattern as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), patternsize, patterngranularity, ::core::mem::transmute_copy(&matchoffset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadVirtualUncached<Impl: IDebugDataSpacesImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadVirtualUncached(offset, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&bytesread)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteVirtualUncached<Impl: IDebugDataSpacesImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteVirtualUncached(offset, &*(&buffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), buffersize, ::core::mem::transmute_copy(&byteswritten)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadPointersVirtual<Impl: IDebugDataSpacesImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, offset: u64, ptrs: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadPointersVirtual(count, offset, ::core::mem::transmute_copy(&ptrs)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WritePointersVirtual<Impl: IDebugDataSpacesImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, offset: u64, ptrs: *const u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WritePointersVirtual(count, offset, ptrs) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadPhysical<Impl: IDebugDataSpacesImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadPhysical(offset, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&bytesread)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WritePhysical<Impl: IDebugDataSpacesImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WritePhysical(offset, &*(&buffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), buffersize, ::core::mem::transmute_copy(&byteswritten)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadControl<Impl: IDebugDataSpacesImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, processor: u32, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadControl(processor, offset, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&bytesread)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteControl<Impl: IDebugDataSpacesImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, processor: u32, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteControl(processor, offset, &*(&buffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), buffersize, ::core::mem::transmute_copy(&byteswritten)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadIo<Impl: IDebugDataSpacesImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadIo(interfacetype, busnumber, addressspace, offset, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&bytesread)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteIo<Impl: IDebugDataSpacesImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteIo(interfacetype, busnumber, addressspace, offset, &*(&buffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), buffersize, ::core::mem::transmute_copy(&byteswritten)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadMsr<Impl: IDebugDataSpacesImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, msr: u32, value: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadMsr(msr, ::core::mem::transmute_copy(&value)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteMsr<Impl: IDebugDataSpacesImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, msr: u32, value: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteMsr(msr, value) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadBusData<Impl: IDebugDataSpacesImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadBusData(busdatatype, busnumber, slotnumber, offset, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&bytesread)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteBusData<Impl: IDebugDataSpacesImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteBusData(busdatatype, busnumber, slotnumber, offset, &*(&buffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), buffersize, ::core::mem::transmute_copy(&byteswritten)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CheckLowMemory<Impl: IDebugDataSpacesImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CheckLowMemory() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadDebuggerData<Impl: IDebugDataSpacesImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadDebuggerData(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&datasize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadProcessorSystemData<Impl: IDebugDataSpacesImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, processor: u32, index: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadProcessorSystemData(processor, index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&datasize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            base.0,
            base.1,
            base.2,
            base.3,
            ::windows::core::GetRuntimeClassName::<IDebugDataSpaces>,
            base.5,
            ReadVirtual::<Impl, OFFSET>,
            WriteVirtual::<Impl, OFFSET>,
            SearchVirtual::<Impl, OFFSET>,
            ReadVirtualUncached::<Impl, OFFSET>,
            WriteVirtualUncached::<Impl, OFFSET>,
            ReadPointersVirtual::<Impl, OFFSET>,
            WritePointersVirtual::<Impl, OFFSET>,
            ReadPhysical::<Impl, OFFSET>,
            WritePhysical::<Impl, OFFSET>,
            ReadControl::<Impl, OFFSET>,
            WriteControl::<Impl, OFFSET>,
            ReadIo::<Impl, OFFSET>,
            WriteIo::<Impl, OFFSET>,
            ReadMsr::<Impl, OFFSET>,
            WriteMsr::<Impl, OFFSET>,
            ReadBusData::<Impl, OFFSET>,
            WriteBusData::<Impl, OFFSET>,
            CheckLowMemory::<Impl, OFFSET>,
            ReadDebuggerData::<Impl, OFFSET>,
            ReadProcessorSystemData::<Impl, OFFSET>,
        )
    }
}
pub trait IDebugDataSpaces2Impl: Sized {
    fn ReadVirtual();
    fn WriteVirtual();
    fn SearchVirtual();
    fn ReadVirtualUncached();
    fn WriteVirtualUncached();
    fn ReadPointersVirtual();
    fn WritePointersVirtual();
    fn ReadPhysical();
    fn WritePhysical();
    fn ReadControl();
    fn WriteControl();
    fn ReadIo();
    fn WriteIo();
    fn ReadMsr();
    fn WriteMsr();
    fn ReadBusData();
    fn WriteBusData();
    fn CheckLowMemory();
    fn ReadDebuggerData();
    fn ReadProcessorSystemData();
    fn VirtualToPhysical();
    fn GetVirtualTranslationPhysicalOffsets();
    fn ReadHandleData();
    fn FillVirtual();
    fn FillPhysical();
    fn QueryVirtual();
}
impl ::windows::core::RuntimeName for IDebugDataSpaces2 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugDataSpaces2";
}
impl IDebugDataSpaces2Vtbl {
    pub const fn new<Impl: IDebugDataSpaces2Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugDataSpaces2Vtbl {
        unsafe extern "system" fn ReadVirtual<Impl: IDebugDataSpaces2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadVirtual(offset, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&bytesread)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteVirtual<Impl: IDebugDataSpaces2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteVirtual(offset, &*(&buffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), buffersize, ::core::mem::transmute_copy(&byteswritten)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SearchVirtual<Impl: IDebugDataSpaces2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, length: u64, pattern: *const ::core::ffi::c_void, patternsize: u32, patterngranularity: u32, matchoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SearchVirtual(offset, length, &*(&pattern as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), patternsize, patterngranularity, ::core::mem::transmute_copy(&matchoffset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadVirtualUncached<Impl: IDebugDataSpaces2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadVirtualUncached(offset, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&bytesread)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteVirtualUncached<Impl: IDebugDataSpaces2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteVirtualUncached(offset, &*(&buffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), buffersize, ::core::mem::transmute_copy(&byteswritten)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadPointersVirtual<Impl: IDebugDataSpaces2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, offset: u64, ptrs: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadPointersVirtual(count, offset, ::core::mem::transmute_copy(&ptrs)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WritePointersVirtual<Impl: IDebugDataSpaces2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, offset: u64, ptrs: *const u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WritePointersVirtual(count, offset, ptrs) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadPhysical<Impl: IDebugDataSpaces2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadPhysical(offset, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&bytesread)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WritePhysical<Impl: IDebugDataSpaces2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WritePhysical(offset, &*(&buffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), buffersize, ::core::mem::transmute_copy(&byteswritten)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadControl<Impl: IDebugDataSpaces2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, processor: u32, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadControl(processor, offset, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&bytesread)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteControl<Impl: IDebugDataSpaces2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, processor: u32, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteControl(processor, offset, &*(&buffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), buffersize, ::core::mem::transmute_copy(&byteswritten)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadIo<Impl: IDebugDataSpaces2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadIo(interfacetype, busnumber, addressspace, offset, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&bytesread)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteIo<Impl: IDebugDataSpaces2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteIo(interfacetype, busnumber, addressspace, offset, &*(&buffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), buffersize, ::core::mem::transmute_copy(&byteswritten)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadMsr<Impl: IDebugDataSpaces2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, msr: u32, value: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadMsr(msr, ::core::mem::transmute_copy(&value)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteMsr<Impl: IDebugDataSpaces2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, msr: u32, value: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteMsr(msr, value) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadBusData<Impl: IDebugDataSpaces2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadBusData(busdatatype, busnumber, slotnumber, offset, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&bytesread)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteBusData<Impl: IDebugDataSpaces2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteBusData(busdatatype, busnumber, slotnumber, offset, &*(&buffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), buffersize, ::core::mem::transmute_copy(&byteswritten)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CheckLowMemory<Impl: IDebugDataSpaces2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CheckLowMemory() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadDebuggerData<Impl: IDebugDataSpaces2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadDebuggerData(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&datasize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadProcessorSystemData<Impl: IDebugDataSpaces2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, processor: u32, index: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadProcessorSystemData(processor, index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&datasize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn VirtualToPhysical<Impl: IDebugDataSpaces2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#virtual: u64, physical: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).VirtualToPhysical(r#virtual, ::core::mem::transmute_copy(&physical)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetVirtualTranslationPhysicalOffsets<Impl: IDebugDataSpaces2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#virtual: u64, offsets: *mut u64, offsetssize: u32, levels: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetVirtualTranslationPhysicalOffsets(r#virtual, ::core::mem::transmute_copy(&offsets), offsetssize, ::core::mem::transmute_copy(&levels)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadHandleData<Impl: IDebugDataSpaces2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, datatype: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadHandleData(handle, datatype, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&datasize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FillVirtual<Impl: IDebugDataSpaces2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u64, size: u32, pattern: *const ::core::ffi::c_void, patternsize: u32, filled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).FillVirtual(start, size, &*(&pattern as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), patternsize, ::core::mem::transmute_copy(&filled)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FillPhysical<Impl: IDebugDataSpaces2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u64, size: u32, pattern: *const ::core::ffi::c_void, patternsize: u32, filled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).FillPhysical(start, size, &*(&pattern as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), patternsize, ::core::mem::transmute_copy(&filled)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn QueryVirtual<Impl: IDebugDataSpaces2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, info: *mut super::super::Memory::MEMORY_BASIC_INFORMATION64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).QueryVirtual(offset, ::core::mem::transmute_copy(&info)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            base.0,
            base.1,
            base.2,
            base.3,
            ::windows::core::GetRuntimeClassName::<IDebugDataSpaces2>,
            base.5,
            ReadVirtual::<Impl, OFFSET>,
            WriteVirtual::<Impl, OFFSET>,
            SearchVirtual::<Impl, OFFSET>,
            ReadVirtualUncached::<Impl, OFFSET>,
            WriteVirtualUncached::<Impl, OFFSET>,
            ReadPointersVirtual::<Impl, OFFSET>,
            WritePointersVirtual::<Impl, OFFSET>,
            ReadPhysical::<Impl, OFFSET>,
            WritePhysical::<Impl, OFFSET>,
            ReadControl::<Impl, OFFSET>,
            WriteControl::<Impl, OFFSET>,
            ReadIo::<Impl, OFFSET>,
            WriteIo::<Impl, OFFSET>,
            ReadMsr::<Impl, OFFSET>,
            WriteMsr::<Impl, OFFSET>,
            ReadBusData::<Impl, OFFSET>,
            WriteBusData::<Impl, OFFSET>,
            CheckLowMemory::<Impl, OFFSET>,
            ReadDebuggerData::<Impl, OFFSET>,
            ReadProcessorSystemData::<Impl, OFFSET>,
            VirtualToPhysical::<Impl, OFFSET>,
            GetVirtualTranslationPhysicalOffsets::<Impl, OFFSET>,
            ReadHandleData::<Impl, OFFSET>,
            FillVirtual::<Impl, OFFSET>,
            FillPhysical::<Impl, OFFSET>,
            QueryVirtual::<Impl, OFFSET>,
        )
    }
}
pub trait IDebugDataSpaces3Impl: Sized {
    fn ReadVirtual();
    fn WriteVirtual();
    fn SearchVirtual();
    fn ReadVirtualUncached();
    fn WriteVirtualUncached();
    fn ReadPointersVirtual();
    fn WritePointersVirtual();
    fn ReadPhysical();
    fn WritePhysical();
    fn ReadControl();
    fn WriteControl();
    fn ReadIo();
    fn WriteIo();
    fn ReadMsr();
    fn WriteMsr();
    fn ReadBusData();
    fn WriteBusData();
    fn CheckLowMemory();
    fn ReadDebuggerData();
    fn ReadProcessorSystemData();
    fn VirtualToPhysical();
    fn GetVirtualTranslationPhysicalOffsets();
    fn ReadHandleData();
    fn FillVirtual();
    fn FillPhysical();
    fn QueryVirtual();
    fn ReadImageNtHeaders();
    fn ReadTagged();
    fn StartEnumTagged();
    fn GetNextTagged();
    fn EndEnumTagged();
}
impl ::windows::core::RuntimeName for IDebugDataSpaces3 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugDataSpaces3";
}
impl IDebugDataSpaces3Vtbl {
    pub const fn new<Impl: IDebugDataSpaces3Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugDataSpaces3Vtbl {
        unsafe extern "system" fn ReadVirtual<Impl: IDebugDataSpaces3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadVirtual(offset, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&bytesread)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteVirtual<Impl: IDebugDataSpaces3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteVirtual(offset, &*(&buffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), buffersize, ::core::mem::transmute_copy(&byteswritten)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SearchVirtual<Impl: IDebugDataSpaces3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, length: u64, pattern: *const ::core::ffi::c_void, patternsize: u32, patterngranularity: u32, matchoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SearchVirtual(offset, length, &*(&pattern as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), patternsize, patterngranularity, ::core::mem::transmute_copy(&matchoffset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadVirtualUncached<Impl: IDebugDataSpaces3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadVirtualUncached(offset, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&bytesread)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteVirtualUncached<Impl: IDebugDataSpaces3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteVirtualUncached(offset, &*(&buffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), buffersize, ::core::mem::transmute_copy(&byteswritten)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadPointersVirtual<Impl: IDebugDataSpaces3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, offset: u64, ptrs: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadPointersVirtual(count, offset, ::core::mem::transmute_copy(&ptrs)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WritePointersVirtual<Impl: IDebugDataSpaces3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, offset: u64, ptrs: *const u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WritePointersVirtual(count, offset, ptrs) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadPhysical<Impl: IDebugDataSpaces3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadPhysical(offset, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&bytesread)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WritePhysical<Impl: IDebugDataSpaces3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WritePhysical(offset, &*(&buffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), buffersize, ::core::mem::transmute_copy(&byteswritten)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadControl<Impl: IDebugDataSpaces3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, processor: u32, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadControl(processor, offset, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&bytesread)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteControl<Impl: IDebugDataSpaces3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, processor: u32, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteControl(processor, offset, &*(&buffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), buffersize, ::core::mem::transmute_copy(&byteswritten)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadIo<Impl: IDebugDataSpaces3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadIo(interfacetype, busnumber, addressspace, offset, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&bytesread)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteIo<Impl: IDebugDataSpaces3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteIo(interfacetype, busnumber, addressspace, offset, &*(&buffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), buffersize, ::core::mem::transmute_copy(&byteswritten)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadMsr<Impl: IDebugDataSpaces3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, msr: u32, value: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadMsr(msr, ::core::mem::transmute_copy(&value)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteMsr<Impl: IDebugDataSpaces3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, msr: u32, value: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteMsr(msr, value) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadBusData<Impl: IDebugDataSpaces3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadBusData(busdatatype, busnumber, slotnumber, offset, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&bytesread)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteBusData<Impl: IDebugDataSpaces3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteBusData(busdatatype, busnumber, slotnumber, offset, &*(&buffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), buffersize, ::core::mem::transmute_copy(&byteswritten)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CheckLowMemory<Impl: IDebugDataSpaces3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CheckLowMemory() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadDebuggerData<Impl: IDebugDataSpaces3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadDebuggerData(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&datasize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadProcessorSystemData<Impl: IDebugDataSpaces3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, processor: u32, index: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadProcessorSystemData(processor, index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&datasize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn VirtualToPhysical<Impl: IDebugDataSpaces3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#virtual: u64, physical: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).VirtualToPhysical(r#virtual, ::core::mem::transmute_copy(&physical)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetVirtualTranslationPhysicalOffsets<Impl: IDebugDataSpaces3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#virtual: u64, offsets: *mut u64, offsetssize: u32, levels: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetVirtualTranslationPhysicalOffsets(r#virtual, ::core::mem::transmute_copy(&offsets), offsetssize, ::core::mem::transmute_copy(&levels)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadHandleData<Impl: IDebugDataSpaces3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, datatype: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadHandleData(handle, datatype, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&datasize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FillVirtual<Impl: IDebugDataSpaces3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u64, size: u32, pattern: *const ::core::ffi::c_void, patternsize: u32, filled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).FillVirtual(start, size, &*(&pattern as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), patternsize, ::core::mem::transmute_copy(&filled)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FillPhysical<Impl: IDebugDataSpaces3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u64, size: u32, pattern: *const ::core::ffi::c_void, patternsize: u32, filled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).FillPhysical(start, size, &*(&pattern as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), patternsize, ::core::mem::transmute_copy(&filled)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn QueryVirtual<Impl: IDebugDataSpaces3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, info: *mut super::super::Memory::MEMORY_BASIC_INFORMATION64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).QueryVirtual(offset, ::core::mem::transmute_copy(&info)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadImageNtHeaders<Impl: IDebugDataSpaces3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, imagebase: u64, headers: *mut IMAGE_NT_HEADERS64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadImageNtHeaders(imagebase, ::core::mem::transmute_copy(&headers)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadTagged<Impl: IDebugDataSpaces3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tag: *const ::windows::core::GUID, offset: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, totalsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadTagged(&*(&tag as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), offset, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&totalsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartEnumTagged<Impl: IDebugDataSpaces3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).StartEnumTagged(::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNextTagged<Impl: IDebugDataSpaces3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, tag: *mut ::windows::core::GUID, size: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNextTagged(handle, ::core::mem::transmute_copy(&tag), ::core::mem::transmute_copy(&size)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndEnumTagged<Impl: IDebugDataSpaces3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EndEnumTagged(handle) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            base.0,
            base.1,
            base.2,
            base.3,
            ::windows::core::GetRuntimeClassName::<IDebugDataSpaces3>,
            base.5,
            ReadVirtual::<Impl, OFFSET>,
            WriteVirtual::<Impl, OFFSET>,
            SearchVirtual::<Impl, OFFSET>,
            ReadVirtualUncached::<Impl, OFFSET>,
            WriteVirtualUncached::<Impl, OFFSET>,
            ReadPointersVirtual::<Impl, OFFSET>,
            WritePointersVirtual::<Impl, OFFSET>,
            ReadPhysical::<Impl, OFFSET>,
            WritePhysical::<Impl, OFFSET>,
            ReadControl::<Impl, OFFSET>,
            WriteControl::<Impl, OFFSET>,
            ReadIo::<Impl, OFFSET>,
            WriteIo::<Impl, OFFSET>,
            ReadMsr::<Impl, OFFSET>,
            WriteMsr::<Impl, OFFSET>,
            ReadBusData::<Impl, OFFSET>,
            WriteBusData::<Impl, OFFSET>,
            CheckLowMemory::<Impl, OFFSET>,
            ReadDebuggerData::<Impl, OFFSET>,
            ReadProcessorSystemData::<Impl, OFFSET>,
            VirtualToPhysical::<Impl, OFFSET>,
            GetVirtualTranslationPhysicalOffsets::<Impl, OFFSET>,
            ReadHandleData::<Impl, OFFSET>,
            FillVirtual::<Impl, OFFSET>,
            FillPhysical::<Impl, OFFSET>,
            QueryVirtual::<Impl, OFFSET>,
            ReadImageNtHeaders::<Impl, OFFSET>,
            ReadTagged::<Impl, OFFSET>,
            StartEnumTagged::<Impl, OFFSET>,
            GetNextTagged::<Impl, OFFSET>,
            EndEnumTagged::<Impl, OFFSET>,
        )
    }
}
pub trait IDebugDataSpaces4Impl: Sized {
    fn ReadVirtual();
    fn WriteVirtual();
    fn SearchVirtual();
    fn ReadVirtualUncached();
    fn WriteVirtualUncached();
    fn ReadPointersVirtual();
    fn WritePointersVirtual();
    fn ReadPhysical();
    fn WritePhysical();
    fn ReadControl();
    fn WriteControl();
    fn ReadIo();
    fn WriteIo();
    fn ReadMsr();
    fn WriteMsr();
    fn ReadBusData();
    fn WriteBusData();
    fn CheckLowMemory();
    fn ReadDebuggerData();
    fn ReadProcessorSystemData();
    fn VirtualToPhysical();
    fn GetVirtualTranslationPhysicalOffsets();
    fn ReadHandleData();
    fn FillVirtual();
    fn FillPhysical();
    fn QueryVirtual();
    fn ReadImageNtHeaders();
    fn ReadTagged();
    fn StartEnumTagged();
    fn GetNextTagged();
    fn EndEnumTagged();
    fn GetOffsetInformation();
    fn GetNextDifferentlyValidOffsetVirtual();
    fn GetValidRegionVirtual();
    fn SearchVirtual2();
    fn ReadMultiByteStringVirtual();
    fn ReadMultiByteStringVirtualWide();
    fn ReadUnicodeStringVirtual();
    fn ReadUnicodeStringVirtualWide();
    fn ReadPhysical2();
    fn WritePhysical2();
}
impl ::windows::core::RuntimeName for IDebugDataSpaces4 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugDataSpaces4";
}
impl IDebugDataSpaces4Vtbl {
    pub const fn new<Impl: IDebugDataSpaces4Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugDataSpaces4Vtbl {
        unsafe extern "system" fn ReadVirtual<Impl: IDebugDataSpaces4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadVirtual(offset, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&bytesread)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteVirtual<Impl: IDebugDataSpaces4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteVirtual(offset, &*(&buffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), buffersize, ::core::mem::transmute_copy(&byteswritten)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SearchVirtual<Impl: IDebugDataSpaces4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, length: u64, pattern: *const ::core::ffi::c_void, patternsize: u32, patterngranularity: u32, matchoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SearchVirtual(offset, length, &*(&pattern as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), patternsize, patterngranularity, ::core::mem::transmute_copy(&matchoffset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadVirtualUncached<Impl: IDebugDataSpaces4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadVirtualUncached(offset, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&bytesread)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteVirtualUncached<Impl: IDebugDataSpaces4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteVirtualUncached(offset, &*(&buffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), buffersize, ::core::mem::transmute_copy(&byteswritten)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadPointersVirtual<Impl: IDebugDataSpaces4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, offset: u64, ptrs: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadPointersVirtual(count, offset, ::core::mem::transmute_copy(&ptrs)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WritePointersVirtual<Impl: IDebugDataSpaces4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, offset: u64, ptrs: *const u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WritePointersVirtual(count, offset, ptrs) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadPhysical<Impl: IDebugDataSpaces4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadPhysical(offset, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&bytesread)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WritePhysical<Impl: IDebugDataSpaces4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WritePhysical(offset, &*(&buffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), buffersize, ::core::mem::transmute_copy(&byteswritten)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadControl<Impl: IDebugDataSpaces4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, processor: u32, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadControl(processor, offset, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&bytesread)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteControl<Impl: IDebugDataSpaces4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, processor: u32, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteControl(processor, offset, &*(&buffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), buffersize, ::core::mem::transmute_copy(&byteswritten)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadIo<Impl: IDebugDataSpaces4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadIo(interfacetype, busnumber, addressspace, offset, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&bytesread)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteIo<Impl: IDebugDataSpaces4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteIo(interfacetype, busnumber, addressspace, offset, &*(&buffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), buffersize, ::core::mem::transmute_copy(&byteswritten)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadMsr<Impl: IDebugDataSpaces4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, msr: u32, value: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadMsr(msr, ::core::mem::transmute_copy(&value)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteMsr<Impl: IDebugDataSpaces4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, msr: u32, value: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteMsr(msr, value) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadBusData<Impl: IDebugDataSpaces4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadBusData(busdatatype, busnumber, slotnumber, offset, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&bytesread)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteBusData<Impl: IDebugDataSpaces4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteBusData(busdatatype, busnumber, slotnumber, offset, &*(&buffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), buffersize, ::core::mem::transmute_copy(&byteswritten)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CheckLowMemory<Impl: IDebugDataSpaces4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CheckLowMemory() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadDebuggerData<Impl: IDebugDataSpaces4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadDebuggerData(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&datasize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadProcessorSystemData<Impl: IDebugDataSpaces4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, processor: u32, index: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadProcessorSystemData(processor, index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&datasize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn VirtualToPhysical<Impl: IDebugDataSpaces4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#virtual: u64, physical: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).VirtualToPhysical(r#virtual, ::core::mem::transmute_copy(&physical)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetVirtualTranslationPhysicalOffsets<Impl: IDebugDataSpaces4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#virtual: u64, offsets: *mut u64, offsetssize: u32, levels: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetVirtualTranslationPhysicalOffsets(r#virtual, ::core::mem::transmute_copy(&offsets), offsetssize, ::core::mem::transmute_copy(&levels)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadHandleData<Impl: IDebugDataSpaces4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, datatype: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadHandleData(handle, datatype, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&datasize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FillVirtual<Impl: IDebugDataSpaces4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u64, size: u32, pattern: *const ::core::ffi::c_void, patternsize: u32, filled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).FillVirtual(start, size, &*(&pattern as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), patternsize, ::core::mem::transmute_copy(&filled)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FillPhysical<Impl: IDebugDataSpaces4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u64, size: u32, pattern: *const ::core::ffi::c_void, patternsize: u32, filled: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).FillPhysical(start, size, &*(&pattern as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), patternsize, ::core::mem::transmute_copy(&filled)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn QueryVirtual<Impl: IDebugDataSpaces4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, info: *mut super::super::Memory::MEMORY_BASIC_INFORMATION64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).QueryVirtual(offset, ::core::mem::transmute_copy(&info)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadImageNtHeaders<Impl: IDebugDataSpaces4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, imagebase: u64, headers: *mut IMAGE_NT_HEADERS64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadImageNtHeaders(imagebase, ::core::mem::transmute_copy(&headers)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadTagged<Impl: IDebugDataSpaces4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tag: *const ::windows::core::GUID, offset: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, totalsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadTagged(&*(&tag as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), offset, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&totalsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartEnumTagged<Impl: IDebugDataSpaces4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).StartEnumTagged(::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNextTagged<Impl: IDebugDataSpaces4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, tag: *mut ::windows::core::GUID, size: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNextTagged(handle, ::core::mem::transmute_copy(&tag), ::core::mem::transmute_copy(&size)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndEnumTagged<Impl: IDebugDataSpaces4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EndEnumTagged(handle) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOffsetInformation<Impl: IDebugDataSpaces4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, space: u32, which: u32, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOffsetInformation(space, which, offset, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&infosize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNextDifferentlyValidOffsetVirtual<Impl: IDebugDataSpaces4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, nextoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNextDifferentlyValidOffsetVirtual(offset, ::core::mem::transmute_copy(&nextoffset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetValidRegionVirtual<Impl: IDebugDataSpaces4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, base: u64, size: u32, validbase: *mut u64, validsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetValidRegionVirtual(base, size, ::core::mem::transmute_copy(&validbase), ::core::mem::transmute_copy(&validsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SearchVirtual2<Impl: IDebugDataSpaces4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, length: u64, flags: u32, pattern: *const ::core::ffi::c_void, patternsize: u32, patterngranularity: u32, matchoffset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SearchVirtual2(offset, length, flags, &*(&pattern as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), patternsize, patterngranularity, ::core::mem::transmute_copy(&matchoffset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadMultiByteStringVirtual<Impl: IDebugDataSpaces4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, maxbytes: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringbytes: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadMultiByteStringVirtual(offset, maxbytes, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&stringbytes)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadMultiByteStringVirtualWide<Impl: IDebugDataSpaces4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, maxbytes: u32, codepage: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringbytes: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadMultiByteStringVirtualWide(offset, maxbytes, codepage, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&stringbytes)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadUnicodeStringVirtual<Impl: IDebugDataSpaces4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, maxbytes: u32, codepage: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringbytes: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadUnicodeStringVirtual(offset, maxbytes, codepage, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&stringbytes)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadUnicodeStringVirtualWide<Impl: IDebugDataSpaces4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, maxbytes: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringbytes: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadUnicodeStringVirtualWide(offset, maxbytes, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&stringbytes)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadPhysical2<Impl: IDebugDataSpaces4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadPhysical2(offset, flags, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&bytesread)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WritePhysical2<Impl: IDebugDataSpaces4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WritePhysical2(offset, flags, &*(&buffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), buffersize, ::core::mem::transmute_copy(&byteswritten)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            base.0,
            base.1,
            base.2,
            base.3,
            ::windows::core::GetRuntimeClassName::<IDebugDataSpaces4>,
            base.5,
            ReadVirtual::<Impl, OFFSET>,
            WriteVirtual::<Impl, OFFSET>,
            SearchVirtual::<Impl, OFFSET>,
            ReadVirtualUncached::<Impl, OFFSET>,
            WriteVirtualUncached::<Impl, OFFSET>,
            ReadPointersVirtual::<Impl, OFFSET>,
            WritePointersVirtual::<Impl, OFFSET>,
            ReadPhysical::<Impl, OFFSET>,
            WritePhysical::<Impl, OFFSET>,
            ReadControl::<Impl, OFFSET>,
            WriteControl::<Impl, OFFSET>,
            ReadIo::<Impl, OFFSET>,
            WriteIo::<Impl, OFFSET>,
            ReadMsr::<Impl, OFFSET>,
            WriteMsr::<Impl, OFFSET>,
            ReadBusData::<Impl, OFFSET>,
            WriteBusData::<Impl, OFFSET>,
            CheckLowMemory::<Impl, OFFSET>,
            ReadDebuggerData::<Impl, OFFSET>,
            ReadProcessorSystemData::<Impl, OFFSET>,
            VirtualToPhysical::<Impl, OFFSET>,
            GetVirtualTranslationPhysicalOffsets::<Impl, OFFSET>,
            ReadHandleData::<Impl, OFFSET>,
            FillVirtual::<Impl, OFFSET>,
            FillPhysical::<Impl, OFFSET>,
            QueryVirtual::<Impl, OFFSET>,
            ReadImageNtHeaders::<Impl, OFFSET>,
            ReadTagged::<Impl, OFFSET>,
            StartEnumTagged::<Impl, OFFSET>,
            GetNextTagged::<Impl, OFFSET>,
            EndEnumTagged::<Impl, OFFSET>,
            GetOffsetInformation::<Impl, OFFSET>,
            GetNextDifferentlyValidOffsetVirtual::<Impl, OFFSET>,
            GetValidRegionVirtual::<Impl, OFFSET>,
            SearchVirtual2::<Impl, OFFSET>,
            ReadMultiByteStringVirtual::<Impl, OFFSET>,
            ReadMultiByteStringVirtualWide::<Impl, OFFSET>,
            ReadUnicodeStringVirtual::<Impl, OFFSET>,
            ReadUnicodeStringVirtualWide::<Impl, OFFSET>,
            ReadPhysical2::<Impl, OFFSET>,
            WritePhysical2::<Impl, OFFSET>,
        )
    }
}
pub trait IDebugDocumentImpl: Sized + IDebugDocumentInfoImpl {}
impl ::windows::core::RuntimeName for IDebugDocument {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugDocument";
}
impl IDebugDocumentVtbl {
    pub const fn new<Impl: IDebugDocumentImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugDocumentVtbl {
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugDocument>, base.5)
    }
}
pub trait IDebugDocumentContextImpl: Sized {
    fn GetDocument();
    fn EnumCodeContexts();
}
impl ::windows::core::RuntimeName for IDebugDocumentContext {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugDocumentContext";
}
impl IDebugDocumentContextVtbl {
    pub const fn new<Impl: IDebugDocumentContextImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugDocumentContextVtbl {
        unsafe extern "system" fn GetDocument<Impl: IDebugDocumentContextImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppsd: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDocument(::core::mem::transmute_copy(&ppsd)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumCodeContexts<Impl: IDebugDocumentContextImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppescc: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EnumCodeContexts(::core::mem::transmute_copy(&ppescc)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugDocumentContext>, base.5, GetDocument::<Impl, OFFSET>, EnumCodeContexts::<Impl, OFFSET>)
    }
}
pub trait IDebugDocumentHelper32Impl: Sized {
    fn Init();
    fn Attach();
    fn Detach();
    fn AddUnicodeText();
    fn AddDBCSText();
    fn SetDebugDocumentHost();
    fn AddDeferredText();
    fn DefineScriptBlock();
    fn SetDefaultTextAttr();
    fn SetTextAttributes();
    fn SetLongName();
    fn SetShortName();
    fn SetDocumentAttr();
    fn GetDebugApplicationNode();
    fn GetScriptBlockInfo();
    fn CreateDebugDocumentContext();
    fn BringDocumentToTop();
    fn BringDocumentContextToTop();
}
impl ::windows::core::RuntimeName for IDebugDocumentHelper32 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugDocumentHelper32";
}
impl IDebugDocumentHelper32Vtbl {
    pub const fn new<Impl: IDebugDocumentHelper32Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugDocumentHelper32Vtbl {
        unsafe extern "system" fn Init<Impl: IDebugDocumentHelper32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pda: ::windows::core::RawPtr, pszshortname: super::super::super::Foundation::PWSTR, pszlongname: super::super::super::Foundation::PWSTR, docattr: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Init(
                &*(&pda as *const <IDebugApplication32 as ::windows::core::Abi>::Abi as *const <IDebugApplication32 as ::windows::core::DefaultType>::DefaultType),
                &*(&pszshortname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pszlongname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                docattr,
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Attach<Impl: IDebugDocumentHelper32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pddhparent: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Attach(&*(&pddhparent as *const <IDebugDocumentHelper32 as ::windows::core::Abi>::Abi as *const <IDebugDocumentHelper32 as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Detach<Impl: IDebugDocumentHelper32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Detach() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddUnicodeText<Impl: IDebugDocumentHelper32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psztext: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddUnicodeText(&*(&psztext as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddDBCSText<Impl: IDebugDocumentHelper32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psztext: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddDBCSText(&*(&psztext as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetDebugDocumentHost<Impl: IDebugDocumentHelper32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pddh: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetDebugDocumentHost(&*(&pddh as *const <IDebugDocumentHost as ::windows::core::Abi>::Abi as *const <IDebugDocumentHost as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddDeferredText<Impl: IDebugDocumentHelper32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, cchars: u32, dwtextstartcookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddDeferredText(cchars, dwtextstartcookie) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DefineScriptBlock<Impl: IDebugDocumentHelper32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ulcharoffset: u32, cchars: u32, pas: ::windows::core::RawPtr, fscriptlet: super::super::super::Foundation::BOOL, pdwsourcecontext: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).DefineScriptBlock(ulcharoffset, cchars, &*(&pas as *const <IActiveScript as ::windows::core::Abi>::Abi as *const <IActiveScript as ::windows::core::DefaultType>::DefaultType), &*(&fscriptlet as *const <super::super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pdwsourcecontext)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetDefaultTextAttr<Impl: IDebugDocumentHelper32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, statextattr: u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetDefaultTextAttr(statextattr) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetTextAttributes<Impl: IDebugDocumentHelper32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ulcharoffset: u32, cchars: u32, pstatextattr: *const u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetTextAttributes(ulcharoffset, cchars, pstatextattr) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetLongName<Impl: IDebugDocumentHelper32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszlongname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetLongName(&*(&pszlongname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetShortName<Impl: IDebugDocumentHelper32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszshortname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetShortName(&*(&pszshortname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetDocumentAttr<Impl: IDebugDocumentHelper32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszattributes: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetDocumentAttr(pszattributes) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDebugApplicationNode<Impl: IDebugDocumentHelper32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppdan: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDebugApplicationNode(::core::mem::transmute_copy(&ppdan)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetScriptBlockInfo<Impl: IDebugDocumentHelper32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwsourcecontext: u32, ppasd: *mut ::windows::core::RawPtr, picharpos: *mut u32, pcchars: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetScriptBlockInfo(dwsourcecontext, ::core::mem::transmute_copy(&ppasd), ::core::mem::transmute_copy(&picharpos), ::core::mem::transmute_copy(&pcchars)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateDebugDocumentContext<Impl: IDebugDocumentHelper32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, icharpos: u32, cchars: u32, ppddc: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateDebugDocumentContext(icharpos, cchars, ::core::mem::transmute_copy(&ppddc)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BringDocumentToTop<Impl: IDebugDocumentHelper32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).BringDocumentToTop() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BringDocumentContextToTop<Impl: IDebugDocumentHelper32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pddc: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).BringDocumentContextToTop(&*(&pddc as *const <IDebugDocumentContext as ::windows::core::Abi>::Abi as *const <IDebugDocumentContext as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            base.0,
            base.1,
            base.2,
            base.3,
            ::windows::core::GetRuntimeClassName::<IDebugDocumentHelper32>,
            base.5,
            Init::<Impl, OFFSET>,
            Attach::<Impl, OFFSET>,
            Detach::<Impl, OFFSET>,
            AddUnicodeText::<Impl, OFFSET>,
            AddDBCSText::<Impl, OFFSET>,
            SetDebugDocumentHost::<Impl, OFFSET>,
            AddDeferredText::<Impl, OFFSET>,
            DefineScriptBlock::<Impl, OFFSET>,
            SetDefaultTextAttr::<Impl, OFFSET>,
            SetTextAttributes::<Impl, OFFSET>,
            SetLongName::<Impl, OFFSET>,
            SetShortName::<Impl, OFFSET>,
            SetDocumentAttr::<Impl, OFFSET>,
            GetDebugApplicationNode::<Impl, OFFSET>,
            GetScriptBlockInfo::<Impl, OFFSET>,
            CreateDebugDocumentContext::<Impl, OFFSET>,
            BringDocumentToTop::<Impl, OFFSET>,
            BringDocumentContextToTop::<Impl, OFFSET>,
        )
    }
}
pub trait IDebugDocumentHelper64Impl: Sized {
    fn Init();
    fn Attach();
    fn Detach();
    fn AddUnicodeText();
    fn AddDBCSText();
    fn SetDebugDocumentHost();
    fn AddDeferredText();
    fn DefineScriptBlock();
    fn SetDefaultTextAttr();
    fn SetTextAttributes();
    fn SetLongName();
    fn SetShortName();
    fn SetDocumentAttr();
    fn GetDebugApplicationNode();
    fn GetScriptBlockInfo();
    fn CreateDebugDocumentContext();
    fn BringDocumentToTop();
    fn BringDocumentContextToTop();
}
impl ::windows::core::RuntimeName for IDebugDocumentHelper64 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugDocumentHelper64";
}
impl IDebugDocumentHelper64Vtbl {
    pub const fn new<Impl: IDebugDocumentHelper64Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugDocumentHelper64Vtbl {
        unsafe extern "system" fn Init<Impl: IDebugDocumentHelper64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pda: ::windows::core::RawPtr, pszshortname: super::super::super::Foundation::PWSTR, pszlongname: super::super::super::Foundation::PWSTR, docattr: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Init(
                &*(&pda as *const <IDebugApplication64 as ::windows::core::Abi>::Abi as *const <IDebugApplication64 as ::windows::core::DefaultType>::DefaultType),
                &*(&pszshortname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pszlongname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                docattr,
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Attach<Impl: IDebugDocumentHelper64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pddhparent: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Attach(&*(&pddhparent as *const <IDebugDocumentHelper64 as ::windows::core::Abi>::Abi as *const <IDebugDocumentHelper64 as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Detach<Impl: IDebugDocumentHelper64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Detach() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddUnicodeText<Impl: IDebugDocumentHelper64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psztext: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddUnicodeText(&*(&psztext as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddDBCSText<Impl: IDebugDocumentHelper64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psztext: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddDBCSText(&*(&psztext as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetDebugDocumentHost<Impl: IDebugDocumentHelper64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pddh: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetDebugDocumentHost(&*(&pddh as *const <IDebugDocumentHost as ::windows::core::Abi>::Abi as *const <IDebugDocumentHost as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddDeferredText<Impl: IDebugDocumentHelper64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, cchars: u32, dwtextstartcookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddDeferredText(cchars, dwtextstartcookie) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DefineScriptBlock<Impl: IDebugDocumentHelper64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ulcharoffset: u32, cchars: u32, pas: ::windows::core::RawPtr, fscriptlet: super::super::super::Foundation::BOOL, pdwsourcecontext: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).DefineScriptBlock(ulcharoffset, cchars, &*(&pas as *const <IActiveScript as ::windows::core::Abi>::Abi as *const <IActiveScript as ::windows::core::DefaultType>::DefaultType), &*(&fscriptlet as *const <super::super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pdwsourcecontext)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetDefaultTextAttr<Impl: IDebugDocumentHelper64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, statextattr: u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetDefaultTextAttr(statextattr) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetTextAttributes<Impl: IDebugDocumentHelper64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ulcharoffset: u32, cchars: u32, pstatextattr: *const u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetTextAttributes(ulcharoffset, cchars, pstatextattr) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetLongName<Impl: IDebugDocumentHelper64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszlongname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetLongName(&*(&pszlongname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetShortName<Impl: IDebugDocumentHelper64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszshortname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetShortName(&*(&pszshortname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetDocumentAttr<Impl: IDebugDocumentHelper64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszattributes: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetDocumentAttr(pszattributes) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDebugApplicationNode<Impl: IDebugDocumentHelper64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppdan: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDebugApplicationNode(::core::mem::transmute_copy(&ppdan)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetScriptBlockInfo<Impl: IDebugDocumentHelper64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwsourcecontext: u64, ppasd: *mut ::windows::core::RawPtr, picharpos: *mut u32, pcchars: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetScriptBlockInfo(dwsourcecontext, ::core::mem::transmute_copy(&ppasd), ::core::mem::transmute_copy(&picharpos), ::core::mem::transmute_copy(&pcchars)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateDebugDocumentContext<Impl: IDebugDocumentHelper64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, icharpos: u32, cchars: u32, ppddc: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateDebugDocumentContext(icharpos, cchars, ::core::mem::transmute_copy(&ppddc)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BringDocumentToTop<Impl: IDebugDocumentHelper64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).BringDocumentToTop() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BringDocumentContextToTop<Impl: IDebugDocumentHelper64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pddc: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).BringDocumentContextToTop(&*(&pddc as *const <IDebugDocumentContext as ::windows::core::Abi>::Abi as *const <IDebugDocumentContext as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            base.0,
            base.1,
            base.2,
            base.3,
            ::windows::core::GetRuntimeClassName::<IDebugDocumentHelper64>,
            base.5,
            Init::<Impl, OFFSET>,
            Attach::<Impl, OFFSET>,
            Detach::<Impl, OFFSET>,
            AddUnicodeText::<Impl, OFFSET>,
            AddDBCSText::<Impl, OFFSET>,
            SetDebugDocumentHost::<Impl, OFFSET>,
            AddDeferredText::<Impl, OFFSET>,
            DefineScriptBlock::<Impl, OFFSET>,
            SetDefaultTextAttr::<Impl, OFFSET>,
            SetTextAttributes::<Impl, OFFSET>,
            SetLongName::<Impl, OFFSET>,
            SetShortName::<Impl, OFFSET>,
            SetDocumentAttr::<Impl, OFFSET>,
            GetDebugApplicationNode::<Impl, OFFSET>,
            GetScriptBlockInfo::<Impl, OFFSET>,
            CreateDebugDocumentContext::<Impl, OFFSET>,
            BringDocumentToTop::<Impl, OFFSET>,
            BringDocumentContextToTop::<Impl, OFFSET>,
        )
    }
}
pub trait IDebugDocumentHostImpl: Sized {
    fn GetDeferredText();
    fn GetScriptTextAttributes();
    fn OnCreateDocumentContext();
    fn GetPathName();
    fn GetFileName();
    fn NotifyChanged();
}
impl ::windows::core::RuntimeName for IDebugDocumentHost {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugDocumentHost";
}
impl IDebugDocumentHostVtbl {
    pub const fn new<Impl: IDebugDocumentHostImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugDocumentHostVtbl {
        unsafe extern "system" fn GetDeferredText<Impl: IDebugDocumentHostImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwtextstartcookie: u32, pchartext: super::super::super::Foundation::PWSTR, pstatextattr: *mut u16, pcnumchars: *mut u32, cmaxchars: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDeferredText(dwtextstartcookie, ::core::mem::transmute_copy(&pchartext), ::core::mem::transmute_copy(&pstatextattr), pcnumchars, cmaxchars) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetScriptTextAttributes<Impl: IDebugDocumentHostImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstrcode: super::super::super::Foundation::PWSTR, unumcodechars: u32, pstrdelimiter: super::super::super::Foundation::PWSTR, dwflags: u32, pattr: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetScriptTextAttributes(&*(&pstrcode as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), unumcodechars, &*(&pstrdelimiter as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), dwflags, pattr) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnCreateDocumentContext<Impl: IDebugDocumentHostImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppunkouter: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OnCreateDocumentContext(::core::mem::transmute_copy(&ppunkouter)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPathName<Impl: IDebugDocumentHostImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstrlongname: *mut super::super::super::Foundation::BSTR, pfisoriginalfile: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetPathName(::core::mem::transmute_copy(&pbstrlongname), ::core::mem::transmute_copy(&pfisoriginalfile)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFileName<Impl: IDebugDocumentHostImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstrshortname: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetFileName(::core::mem::transmute_copy(&pbstrshortname)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn NotifyChanged<Impl: IDebugDocumentHostImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).NotifyChanged() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugDocumentHost>, base.5, GetDeferredText::<Impl, OFFSET>, GetScriptTextAttributes::<Impl, OFFSET>, OnCreateDocumentContext::<Impl, OFFSET>, GetPathName::<Impl, OFFSET>, GetFileName::<Impl, OFFSET>, NotifyChanged::<Impl, OFFSET>)
    }
}
pub trait IDebugDocumentInfoImpl: Sized {
    fn GetName();
    fn GetDocumentClassId();
}
impl ::windows::core::RuntimeName for IDebugDocumentInfo {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugDocumentInfo";
}
impl IDebugDocumentInfoVtbl {
    pub const fn new<Impl: IDebugDocumentInfoImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugDocumentInfoVtbl {
        unsafe extern "system" fn GetName<Impl: IDebugDocumentInfoImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dnt: DOCUMENTNAMETYPE, pbstrname: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetName(dnt, ::core::mem::transmute_copy(&pbstrname)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDocumentClassId<Impl: IDebugDocumentInfoImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pclsiddocument: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDocumentClassId(::core::mem::transmute_copy(&pclsiddocument)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugDocumentInfo>, base.5, GetName::<Impl, OFFSET>, GetDocumentClassId::<Impl, OFFSET>)
    }
}
pub trait IDebugDocumentProviderImpl: Sized + IDebugDocumentInfoImpl {
    fn GetDocument();
}
impl ::windows::core::RuntimeName for IDebugDocumentProvider {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugDocumentProvider";
}
impl IDebugDocumentProviderVtbl {
    pub const fn new<Impl: IDebugDocumentProviderImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugDocumentProviderVtbl {
        unsafe extern "system" fn GetDocument<Impl: IDebugDocumentProviderImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppssd: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDocument(::core::mem::transmute_copy(&ppssd)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugDocumentProvider>, base.5, GetDocument::<Impl, OFFSET>)
    }
}
pub trait IDebugDocumentTextImpl: Sized + IDebugDocumentImpl + IDebugDocumentInfoImpl {
    fn GetDocumentAttributes();
    fn GetSize();
    fn GetPositionOfLine();
    fn GetLineOfPosition();
    fn GetText();
    fn GetPositionOfContext();
    fn GetContextOfPosition();
}
impl ::windows::core::RuntimeName for IDebugDocumentText {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugDocumentText";
}
impl IDebugDocumentTextVtbl {
    pub const fn new<Impl: IDebugDocumentTextImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugDocumentTextVtbl {
        unsafe extern "system" fn GetDocumentAttributes<Impl: IDebugDocumentTextImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ptextdocattr: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDocumentAttributes(::core::mem::transmute_copy(&ptextdocattr)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSize<Impl: IDebugDocumentTextImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcnumlines: *mut u32, pcnumchars: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSize(::core::mem::transmute_copy(&pcnumlines), ::core::mem::transmute_copy(&pcnumchars)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPositionOfLine<Impl: IDebugDocumentTextImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, clinenumber: u32, pccharacterposition: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetPositionOfLine(clinenumber, ::core::mem::transmute_copy(&pccharacterposition)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLineOfPosition<Impl: IDebugDocumentTextImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ccharacterposition: u32, pclinenumber: *mut u32, pccharacteroffsetinline: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLineOfPosition(ccharacterposition, ::core::mem::transmute_copy(&pclinenumber), ::core::mem::transmute_copy(&pccharacteroffsetinline)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetText<Impl: IDebugDocumentTextImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ccharacterposition: u32, pchartext: super::super::super::Foundation::PWSTR, pstatextattr: *mut u16, pcnumchars: *mut u32, cmaxchars: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetText(ccharacterposition, ::core::mem::transmute_copy(&pchartext), pstatextattr, pcnumchars, cmaxchars) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPositionOfContext<Impl: IDebugDocumentTextImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psc: ::windows::core::RawPtr, pccharacterposition: *mut u32, cnumchars: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetPositionOfContext(&*(&psc as *const <IDebugDocumentContext as ::windows::core::Abi>::Abi as *const <IDebugDocumentContext as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pccharacterposition), ::core::mem::transmute_copy(&cnumchars)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetContextOfPosition<Impl: IDebugDocumentTextImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ccharacterposition: u32, cnumchars: u32, ppsc: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetContextOfPosition(ccharacterposition, cnumchars, ::core::mem::transmute_copy(&ppsc)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugDocumentText>, base.5, GetDocumentAttributes::<Impl, OFFSET>, GetSize::<Impl, OFFSET>, GetPositionOfLine::<Impl, OFFSET>, GetLineOfPosition::<Impl, OFFSET>, GetText::<Impl, OFFSET>, GetPositionOfContext::<Impl, OFFSET>, GetContextOfPosition::<Impl, OFFSET>)
    }
}
pub trait IDebugDocumentTextAuthorImpl: Sized + IDebugDocumentTextImpl + IDebugDocumentImpl + IDebugDocumentInfoImpl {
    fn InsertText();
    fn RemoveText();
    fn ReplaceText();
}
impl ::windows::core::RuntimeName for IDebugDocumentTextAuthor {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugDocumentTextAuthor";
}
impl IDebugDocumentTextAuthorVtbl {
    pub const fn new<Impl: IDebugDocumentTextAuthorImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugDocumentTextAuthorVtbl {
        unsafe extern "system" fn InsertText<Impl: IDebugDocumentTextAuthorImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ccharacterposition: u32, cnumtoinsert: u32, pchartext: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).InsertText(ccharacterposition, cnumtoinsert, &*(&pchartext as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveText<Impl: IDebugDocumentTextAuthorImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ccharacterposition: u32, cnumtoremove: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveText(ccharacterposition, cnumtoremove) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReplaceText<Impl: IDebugDocumentTextAuthorImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ccharacterposition: u32, cnumtoreplace: u32, pchartext: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReplaceText(ccharacterposition, cnumtoreplace, &*(&pchartext as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugDocumentTextAuthor>, base.5, InsertText::<Impl, OFFSET>, RemoveText::<Impl, OFFSET>, ReplaceText::<Impl, OFFSET>)
    }
}
pub trait IDebugDocumentTextEventsImpl: Sized {
    fn onDestroy();
    fn onInsertText();
    fn onRemoveText();
    fn onReplaceText();
    fn onUpdateTextAttributes();
    fn onUpdateDocumentAttributes();
}
impl ::windows::core::RuntimeName for IDebugDocumentTextEvents {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugDocumentTextEvents";
}
impl IDebugDocumentTextEventsVtbl {
    pub const fn new<Impl: IDebugDocumentTextEventsImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugDocumentTextEventsVtbl {
        unsafe extern "system" fn onDestroy<Impl: IDebugDocumentTextEventsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).onDestroy() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn onInsertText<Impl: IDebugDocumentTextEventsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ccharacterposition: u32, cnumtoinsert: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).onInsertText(ccharacterposition, cnumtoinsert) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn onRemoveText<Impl: IDebugDocumentTextEventsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ccharacterposition: u32, cnumtoremove: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).onRemoveText(ccharacterposition, cnumtoremove) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn onReplaceText<Impl: IDebugDocumentTextEventsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ccharacterposition: u32, cnumtoreplace: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).onReplaceText(ccharacterposition, cnumtoreplace) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn onUpdateTextAttributes<Impl: IDebugDocumentTextEventsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ccharacterposition: u32, cnumtoupdate: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).onUpdateTextAttributes(ccharacterposition, cnumtoupdate) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn onUpdateDocumentAttributes<Impl: IDebugDocumentTextEventsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, textdocattr: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).onUpdateDocumentAttributes(textdocattr) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugDocumentTextEvents>, base.5, onDestroy::<Impl, OFFSET>, onInsertText::<Impl, OFFSET>, onRemoveText::<Impl, OFFSET>, onReplaceText::<Impl, OFFSET>, onUpdateTextAttributes::<Impl, OFFSET>, onUpdateDocumentAttributes::<Impl, OFFSET>)
    }
}
pub trait IDebugDocumentTextExternalAuthorImpl: Sized {
    fn GetPathName();
    fn GetFileName();
    fn NotifyChanged();
}
impl ::windows::core::RuntimeName for IDebugDocumentTextExternalAuthor {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugDocumentTextExternalAuthor";
}
impl IDebugDocumentTextExternalAuthorVtbl {
    pub const fn new<Impl: IDebugDocumentTextExternalAuthorImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugDocumentTextExternalAuthorVtbl {
        unsafe extern "system" fn GetPathName<Impl: IDebugDocumentTextExternalAuthorImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstrlongname: *mut super::super::super::Foundation::BSTR, pfisoriginalfile: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetPathName(::core::mem::transmute_copy(&pbstrlongname), ::core::mem::transmute_copy(&pfisoriginalfile)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFileName<Impl: IDebugDocumentTextExternalAuthorImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstrshortname: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetFileName(::core::mem::transmute_copy(&pbstrshortname)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn NotifyChanged<Impl: IDebugDocumentTextExternalAuthorImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).NotifyChanged() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugDocumentTextExternalAuthor>, base.5, GetPathName::<Impl, OFFSET>, GetFileName::<Impl, OFFSET>, NotifyChanged::<Impl, OFFSET>)
    }
}
pub trait IDebugEventCallbacksImpl: Sized {
    fn GetInterestMask();
    fn Breakpoint();
    fn Exception();
    fn CreateThread();
    fn ExitThread();
    fn CreateProcessA();
    fn ExitProcess();
    fn LoadModule();
    fn UnloadModule();
    fn SystemError();
    fn SessionStatus();
    fn ChangeDebuggeeState();
    fn ChangeEngineState();
    fn ChangeSymbolState();
}
impl ::windows::core::RuntimeName for IDebugEventCallbacks {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugEventCallbacks";
}
impl IDebugEventCallbacksVtbl {
    pub const fn new<Impl: IDebugEventCallbacksImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugEventCallbacksVtbl {
        unsafe extern "system" fn GetInterestMask<Impl: IDebugEventCallbacksImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetInterestMask(::core::mem::transmute_copy(&mask)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Breakpoint<Impl: IDebugEventCallbacksImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bp: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Breakpoint(&*(&bp as *const <IDebugBreakpoint as ::windows::core::Abi>::Abi as *const <IDebugBreakpoint as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Exception<Impl: IDebugEventCallbacksImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, exception: *const EXCEPTION_RECORD64, firstchance: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Exception(&*(&exception as *const <EXCEPTION_RECORD64 as ::windows::core::Abi>::Abi as *const <EXCEPTION_RECORD64 as ::windows::core::DefaultType>::DefaultType), firstchance) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateThread<Impl: IDebugEventCallbacksImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, dataoffset: u64, startoffset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateThread(handle, dataoffset, startoffset) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ExitThread<Impl: IDebugEventCallbacksImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, exitcode: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ExitThread(exitcode) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateProcessA<Impl: IDebugEventCallbacksImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, imagefilehandle: u64, handle: u64, baseoffset: u64, modulesize: u32, modulename: super::super::super::Foundation::PSTR, imagename: super::super::super::Foundation::PSTR, checksum: u32, timedatestamp: u32, initialthreadhandle: u64, threaddataoffset: u64, startoffset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateProcessA(
                imagefilehandle,
                handle,
                baseoffset,
                modulesize,
                &*(&modulename as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&imagename as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType),
                checksum,
                timedatestamp,
                initialthreadhandle,
                threaddataoffset,
                startoffset,
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ExitProcess<Impl: IDebugEventCallbacksImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, exitcode: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ExitProcess(exitcode) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn LoadModule<Impl: IDebugEventCallbacksImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, imagefilehandle: u64, baseoffset: u64, modulesize: u32, modulename: super::super::super::Foundation::PSTR, imagename: super::super::super::Foundation::PSTR, checksum: u32, timedatestamp: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).LoadModule(imagefilehandle, baseoffset, modulesize, &*(&modulename as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), &*(&imagename as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), checksum, timedatestamp) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn UnloadModule<Impl: IDebugEventCallbacksImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, imagebasename: super::super::super::Foundation::PSTR, baseoffset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).UnloadModule(&*(&imagebasename as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), baseoffset) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SystemError<Impl: IDebugEventCallbacksImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, error: u32, level: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SystemError(error, level) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SessionStatus<Impl: IDebugEventCallbacksImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, status: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SessionStatus(status) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ChangeDebuggeeState<Impl: IDebugEventCallbacksImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, argument: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ChangeDebuggeeState(flags, argument) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ChangeEngineState<Impl: IDebugEventCallbacksImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, argument: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ChangeEngineState(flags, argument) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ChangeSymbolState<Impl: IDebugEventCallbacksImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, argument: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ChangeSymbolState(flags, argument) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            base.0,
            base.1,
            base.2,
            base.3,
            ::windows::core::GetRuntimeClassName::<IDebugEventCallbacks>,
            base.5,
            GetInterestMask::<Impl, OFFSET>,
            Breakpoint::<Impl, OFFSET>,
            Exception::<Impl, OFFSET>,
            CreateThread::<Impl, OFFSET>,
            ExitThread::<Impl, OFFSET>,
            CreateProcessA::<Impl, OFFSET>,
            ExitProcess::<Impl, OFFSET>,
            LoadModule::<Impl, OFFSET>,
            UnloadModule::<Impl, OFFSET>,
            SystemError::<Impl, OFFSET>,
            SessionStatus::<Impl, OFFSET>,
            ChangeDebuggeeState::<Impl, OFFSET>,
            ChangeEngineState::<Impl, OFFSET>,
            ChangeSymbolState::<Impl, OFFSET>,
        )
    }
}
pub trait IDebugEventCallbacksWideImpl: Sized {
    fn GetInterestMask();
    fn Breakpoint();
    fn Exception();
    fn CreateThread();
    fn ExitThread();
    fn CreateProcessA();
    fn ExitProcess();
    fn LoadModule();
    fn UnloadModule();
    fn SystemError();
    fn SessionStatus();
    fn ChangeDebuggeeState();
    fn ChangeEngineState();
    fn ChangeSymbolState();
}
impl ::windows::core::RuntimeName for IDebugEventCallbacksWide {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugEventCallbacksWide";
}
impl IDebugEventCallbacksWideVtbl {
    pub const fn new<Impl: IDebugEventCallbacksWideImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugEventCallbacksWideVtbl {
        unsafe extern "system" fn GetInterestMask<Impl: IDebugEventCallbacksWideImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetInterestMask(::core::mem::transmute_copy(&mask)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Breakpoint<Impl: IDebugEventCallbacksWideImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bp: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Breakpoint(&*(&bp as *const <IDebugBreakpoint2 as ::windows::core::Abi>::Abi as *const <IDebugBreakpoint2 as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Exception<Impl: IDebugEventCallbacksWideImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, exception: *const EXCEPTION_RECORD64, firstchance: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Exception(&*(&exception as *const <EXCEPTION_RECORD64 as ::windows::core::Abi>::Abi as *const <EXCEPTION_RECORD64 as ::windows::core::DefaultType>::DefaultType), firstchance) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateThread<Impl: IDebugEventCallbacksWideImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, dataoffset: u64, startoffset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateThread(handle, dataoffset, startoffset) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ExitThread<Impl: IDebugEventCallbacksWideImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, exitcode: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ExitThread(exitcode) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateProcessA<Impl: IDebugEventCallbacksWideImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, imagefilehandle: u64, handle: u64, baseoffset: u64, modulesize: u32, modulename: super::super::super::Foundation::PWSTR, imagename: super::super::super::Foundation::PWSTR, checksum: u32, timedatestamp: u32, initialthreadhandle: u64, threaddataoffset: u64, startoffset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateProcessA(
                imagefilehandle,
                handle,
                baseoffset,
                modulesize,
                &*(&modulename as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&imagename as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                checksum,
                timedatestamp,
                initialthreadhandle,
                threaddataoffset,
                startoffset,
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ExitProcess<Impl: IDebugEventCallbacksWideImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, exitcode: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ExitProcess(exitcode) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn LoadModule<Impl: IDebugEventCallbacksWideImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, imagefilehandle: u64, baseoffset: u64, modulesize: u32, modulename: super::super::super::Foundation::PWSTR, imagename: super::super::super::Foundation::PWSTR, checksum: u32, timedatestamp: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).LoadModule(imagefilehandle, baseoffset, modulesize, &*(&modulename as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&imagename as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), checksum, timedatestamp) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn UnloadModule<Impl: IDebugEventCallbacksWideImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, imagebasename: super::super::super::Foundation::PWSTR, baseoffset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).UnloadModule(&*(&imagebasename as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), baseoffset) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SystemError<Impl: IDebugEventCallbacksWideImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, error: u32, level: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SystemError(error, level) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SessionStatus<Impl: IDebugEventCallbacksWideImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, status: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SessionStatus(status) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ChangeDebuggeeState<Impl: IDebugEventCallbacksWideImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, argument: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ChangeDebuggeeState(flags, argument) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ChangeEngineState<Impl: IDebugEventCallbacksWideImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, argument: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ChangeEngineState(flags, argument) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ChangeSymbolState<Impl: IDebugEventCallbacksWideImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, argument: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ChangeSymbolState(flags, argument) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            base.0,
            base.1,
            base.2,
            base.3,
            ::windows::core::GetRuntimeClassName::<IDebugEventCallbacksWide>,
            base.5,
            GetInterestMask::<Impl, OFFSET>,
            Breakpoint::<Impl, OFFSET>,
            Exception::<Impl, OFFSET>,
            CreateThread::<Impl, OFFSET>,
            ExitThread::<Impl, OFFSET>,
            CreateProcessA::<Impl, OFFSET>,
            ExitProcess::<Impl, OFFSET>,
            LoadModule::<Impl, OFFSET>,
            UnloadModule::<Impl, OFFSET>,
            SystemError::<Impl, OFFSET>,
            SessionStatus::<Impl, OFFSET>,
            ChangeDebuggeeState::<Impl, OFFSET>,
            ChangeEngineState::<Impl, OFFSET>,
            ChangeSymbolState::<Impl, OFFSET>,
        )
    }
}
pub trait IDebugEventContextCallbacksImpl: Sized {
    fn GetInterestMask();
    fn Breakpoint();
    fn Exception();
    fn CreateThread();
    fn ExitThread();
    fn CreateProcessA();
    fn ExitProcess();
    fn LoadModule();
    fn UnloadModule();
    fn SystemError();
    fn SessionStatus();
    fn ChangeDebuggeeState();
    fn ChangeEngineState();
    fn ChangeSymbolState();
}
impl ::windows::core::RuntimeName for IDebugEventContextCallbacks {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugEventContextCallbacks";
}
impl IDebugEventContextCallbacksVtbl {
    pub const fn new<Impl: IDebugEventContextCallbacksImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugEventContextCallbacksVtbl {
        unsafe extern "system" fn GetInterestMask<Impl: IDebugEventContextCallbacksImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetInterestMask(::core::mem::transmute_copy(&mask)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Breakpoint<Impl: IDebugEventContextCallbacksImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bp: ::windows::core::RawPtr, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Breakpoint(&*(&bp as *const <IDebugBreakpoint2 as ::windows::core::Abi>::Abi as *const <IDebugBreakpoint2 as ::windows::core::DefaultType>::DefaultType), &*(&context as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), contextsize) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Exception<Impl: IDebugEventContextCallbacksImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, exception: *const EXCEPTION_RECORD64, firstchance: u32, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Exception(&*(&exception as *const <EXCEPTION_RECORD64 as ::windows::core::Abi>::Abi as *const <EXCEPTION_RECORD64 as ::windows::core::DefaultType>::DefaultType), firstchance, &*(&context as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), contextsize) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateThread<Impl: IDebugEventContextCallbacksImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, dataoffset: u64, startoffset: u64, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateThread(handle, dataoffset, startoffset, &*(&context as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), contextsize) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ExitThread<Impl: IDebugEventContextCallbacksImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, exitcode: u32, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ExitThread(exitcode, &*(&context as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), contextsize) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateProcessA<Impl: IDebugEventContextCallbacksImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, imagefilehandle: u64, handle: u64, baseoffset: u64, modulesize: u32, modulename: super::super::super::Foundation::PWSTR, imagename: super::super::super::Foundation::PWSTR, checksum: u32, timedatestamp: u32, initialthreadhandle: u64, threaddataoffset: u64, startoffset: u64, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateProcessA(
                imagefilehandle,
                handle,
                baseoffset,
                modulesize,
                &*(&modulename as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&imagename as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                checksum,
                timedatestamp,
                initialthreadhandle,
                threaddataoffset,
                startoffset,
                &*(&context as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType),
                contextsize,
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ExitProcess<Impl: IDebugEventContextCallbacksImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, exitcode: u32, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ExitProcess(exitcode, &*(&context as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), contextsize) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn LoadModule<Impl: IDebugEventContextCallbacksImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, imagefilehandle: u64, baseoffset: u64, modulesize: u32, modulename: super::super::super::Foundation::PWSTR, imagename: super::super::super::Foundation::PWSTR, checksum: u32, timedatestamp: u32, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).LoadModule(
                imagefilehandle,
                baseoffset,
                modulesize,
                &*(&modulename as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&imagename as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                checksum,
                timedatestamp,
                &*(&context as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType),
                contextsize,
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn UnloadModule<Impl: IDebugEventContextCallbacksImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, imagebasename: super::super::super::Foundation::PWSTR, baseoffset: u64, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).UnloadModule(&*(&imagebasename as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), baseoffset, &*(&context as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), contextsize) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SystemError<Impl: IDebugEventContextCallbacksImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, error: u32, level: u32, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SystemError(error, level, &*(&context as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), contextsize) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SessionStatus<Impl: IDebugEventContextCallbacksImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, status: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SessionStatus(status) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ChangeDebuggeeState<Impl: IDebugEventContextCallbacksImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, argument: u64, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ChangeDebuggeeState(flags, argument, &*(&context as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), contextsize) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ChangeEngineState<Impl: IDebugEventContextCallbacksImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, argument: u64, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ChangeEngineState(flags, argument, &*(&context as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), contextsize) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ChangeSymbolState<Impl: IDebugEventContextCallbacksImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, argument: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ChangeSymbolState(flags, argument) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            base.0,
            base.1,
            base.2,
            base.3,
            ::windows::core::GetRuntimeClassName::<IDebugEventContextCallbacks>,
            base.5,
            GetInterestMask::<Impl, OFFSET>,
            Breakpoint::<Impl, OFFSET>,
            Exception::<Impl, OFFSET>,
            CreateThread::<Impl, OFFSET>,
            ExitThread::<Impl, OFFSET>,
            CreateProcessA::<Impl, OFFSET>,
            ExitProcess::<Impl, OFFSET>,
            LoadModule::<Impl, OFFSET>,
            UnloadModule::<Impl, OFFSET>,
            SystemError::<Impl, OFFSET>,
            SessionStatus::<Impl, OFFSET>,
            ChangeDebuggeeState::<Impl, OFFSET>,
            ChangeEngineState::<Impl, OFFSET>,
            ChangeSymbolState::<Impl, OFFSET>,
        )
    }
}
pub trait IDebugExpressionImpl: Sized {
    fn Start();
    fn Abort();
    fn QueryIsComplete();
    fn GetResultAsString();
    fn GetResultAsDebugProperty();
}
impl ::windows::core::RuntimeName for IDebugExpression {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugExpression";
}
impl IDebugExpressionVtbl {
    pub const fn new<Impl: IDebugExpressionImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugExpressionVtbl {
        unsafe extern "system" fn Start<Impl: IDebugExpressionImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdecb: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Start(&*(&pdecb as *const <IDebugExpressionCallBack as ::windows::core::Abi>::Abi as *const <IDebugExpressionCallBack as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Abort<Impl: IDebugExpressionImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Abort() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn QueryIsComplete<Impl: IDebugExpressionImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).QueryIsComplete() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetResultAsString<Impl: IDebugExpressionImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, phrresult: *mut ::windows::core::HRESULT, pbstrresult: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetResultAsString(::core::mem::transmute_copy(&phrresult), ::core::mem::transmute_copy(&pbstrresult)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetResultAsDebugProperty<Impl: IDebugExpressionImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, phrresult: *mut ::windows::core::HRESULT, ppdp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetResultAsDebugProperty(::core::mem::transmute_copy(&phrresult), ::core::mem::transmute_copy(&ppdp)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugExpression>, base.5, Start::<Impl, OFFSET>, Abort::<Impl, OFFSET>, QueryIsComplete::<Impl, OFFSET>, GetResultAsString::<Impl, OFFSET>, GetResultAsDebugProperty::<Impl, OFFSET>)
    }
}
pub trait IDebugExpressionCallBackImpl: Sized {
    fn onComplete();
}
impl ::windows::core::RuntimeName for IDebugExpressionCallBack {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugExpressionCallBack";
}
impl IDebugExpressionCallBackVtbl {
    pub const fn new<Impl: IDebugExpressionCallBackImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugExpressionCallBackVtbl {
        unsafe extern "system" fn onComplete<Impl: IDebugExpressionCallBackImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).onComplete() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugExpressionCallBack>, base.5, onComplete::<Impl, OFFSET>)
    }
}
pub trait IDebugExpressionContextImpl: Sized {
    fn ParseLanguageText();
    fn GetLanguageInfo();
}
impl ::windows::core::RuntimeName for IDebugExpressionContext {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugExpressionContext";
}
impl IDebugExpressionContextVtbl {
    pub const fn new<Impl: IDebugExpressionContextImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugExpressionContextVtbl {
        unsafe extern "system" fn ParseLanguageText<Impl: IDebugExpressionContextImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstrcode: super::super::super::Foundation::PWSTR, nradix: u32, pstrdelimiter: super::super::super::Foundation::PWSTR, dwflags: u32, ppe: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ParseLanguageText(&*(&pstrcode as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), nradix, &*(&pstrdelimiter as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), dwflags, ::core::mem::transmute_copy(&ppe)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLanguageInfo<Impl: IDebugExpressionContextImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstrlanguagename: *mut super::super::super::Foundation::BSTR, planguageid: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLanguageInfo(::core::mem::transmute_copy(&pbstrlanguagename), ::core::mem::transmute_copy(&planguageid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugExpressionContext>, base.5, ParseLanguageText::<Impl, OFFSET>, GetLanguageInfo::<Impl, OFFSET>)
    }
}
pub trait IDebugExtendedPropertyImpl: Sized + IDebugPropertyImpl {
    fn GetExtendedPropertyInfo();
    fn EnumExtendedMembers();
}
impl ::windows::core::RuntimeName for IDebugExtendedProperty {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugExtendedProperty";
}
impl IDebugExtendedPropertyVtbl {
    pub const fn new<Impl: IDebugExtendedPropertyImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugExtendedPropertyVtbl {
        unsafe extern "system" fn GetExtendedPropertyInfo<Impl: IDebugExtendedPropertyImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwfieldspec: u32, nradix: u32, pextendedpropertyinfo: *mut ExtendedDebugPropertyInfo) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExtendedPropertyInfo(dwfieldspec, nradix, ::core::mem::transmute_copy(&pextendedpropertyinfo)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumExtendedMembers<Impl: IDebugExtendedPropertyImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwfieldspec: u32, nradix: u32, ppeepi: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EnumExtendedMembers(dwfieldspec, nradix, ::core::mem::transmute_copy(&ppeepi)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugExtendedProperty>, base.5, GetExtendedPropertyInfo::<Impl, OFFSET>, EnumExtendedMembers::<Impl, OFFSET>)
    }
}
pub trait IDebugFormatterImpl: Sized {
    fn GetStringForVariant();
    fn GetVariantForString();
    fn GetStringForVarType();
}
impl ::windows::core::RuntimeName for IDebugFormatter {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugFormatter";
}
impl IDebugFormatterVtbl {
    pub const fn new<Impl: IDebugFormatterImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugFormatterVtbl {
        unsafe extern "system" fn GetStringForVariant<Impl: IDebugFormatterImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvar: *const super::super::Com::VARIANT, nradix: u32, pbstrvalue: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetStringForVariant(&*(&pvar as *const <super::super::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::Com::VARIANT as ::windows::core::DefaultType>::DefaultType), nradix, ::core::mem::transmute_copy(&pbstrvalue)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetVariantForString<Impl: IDebugFormatterImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwstrvalue: super::super::super::Foundation::PWSTR, pvar: *mut super::super::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetVariantForString(&*(&pwstrvalue as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pvar)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetStringForVarType<Impl: IDebugFormatterImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, vt: u16, ptdescarraytype: *const super::super::Com::TYPEDESC, pbstr: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetStringForVarType(vt, &*(&ptdescarraytype as *const <super::super::Com::TYPEDESC as ::windows::core::Abi>::Abi as *const <super::super::Com::TYPEDESC as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pbstr)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugFormatter>, base.5, GetStringForVariant::<Impl, OFFSET>, GetVariantForString::<Impl, OFFSET>, GetStringForVarType::<Impl, OFFSET>)
    }
}
pub trait IDebugHelperImpl: Sized {
    fn CreatePropertyBrowser();
    fn CreatePropertyBrowserEx();
    fn CreateSimpleConnectionPoint();
}
impl ::windows::core::RuntimeName for IDebugHelper {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugHelper";
}
impl IDebugHelperVtbl {
    pub const fn new<Impl: IDebugHelperImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugHelperVtbl {
        unsafe extern "system" fn CreatePropertyBrowser<Impl: IDebugHelperImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvar: *const super::super::Com::VARIANT, bstrname: super::super::super::Foundation::PWSTR, pdat: ::windows::core::RawPtr, ppdob: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreatePropertyBrowser(
                &*(&pvar as *const <super::super::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::Com::VARIANT as ::windows::core::DefaultType>::DefaultType),
                &*(&bstrname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pdat as *const <IDebugApplicationThread as ::windows::core::Abi>::Abi as *const <IDebugApplicationThread as ::windows::core::DefaultType>::DefaultType),
                ::core::mem::transmute_copy(&ppdob),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreatePropertyBrowserEx<Impl: IDebugHelperImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvar: *const super::super::Com::VARIANT, bstrname: super::super::super::Foundation::PWSTR, pdat: ::windows::core::RawPtr, pdf: ::windows::core::RawPtr, ppdob: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreatePropertyBrowserEx(
                &*(&pvar as *const <super::super::Com::VARIANT as ::windows::core::Abi>::Abi as *const <super::super::Com::VARIANT as ::windows::core::DefaultType>::DefaultType),
                &*(&bstrname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pdat as *const <IDebugApplicationThread as ::windows::core::Abi>::Abi as *const <IDebugApplicationThread as ::windows::core::DefaultType>::DefaultType),
                &*(&pdf as *const <IDebugFormatter as ::windows::core::Abi>::Abi as *const <IDebugFormatter as ::windows::core::DefaultType>::DefaultType),
                ::core::mem::transmute_copy(&ppdob),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateSimpleConnectionPoint<Impl: IDebugHelperImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdisp: ::windows::core::RawPtr, ppscp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateSimpleConnectionPoint(&*(&pdisp as *const <super::super::Com::IDispatch as ::windows::core::Abi>::Abi as *const <super::super::Com::IDispatch as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppscp)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugHelper>, base.5, CreatePropertyBrowser::<Impl, OFFSET>, CreatePropertyBrowserEx::<Impl, OFFSET>, CreateSimpleConnectionPoint::<Impl, OFFSET>)
    }
}
pub trait IDebugHostImpl: Sized {
    fn GetHostDefinedInterface();
    fn GetCurrentContext();
    fn GetDefaultMetadata();
}
impl ::windows::core::RuntimeName for IDebugHost {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugHost";
}
impl IDebugHostVtbl {
    pub const fn new<Impl: IDebugHostImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugHostVtbl {
        unsafe extern "system" fn GetHostDefinedInterface<Impl: IDebugHostImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hostunk: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetHostDefinedInterface(::core::mem::transmute_copy(&hostunk)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentContext<Impl: IDebugHostImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentContext(::core::mem::transmute_copy(&context)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDefaultMetadata<Impl: IDebugHostImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, defaultmetadatastore: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDefaultMetadata(::core::mem::transmute_copy(&defaultmetadatastore)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugHost>, base.5, GetHostDefinedInterface::<Impl, OFFSET>, GetCurrentContext::<Impl, OFFSET>, GetDefaultMetadata::<Impl, OFFSET>)
    }
}
pub trait IDebugHostBaseClassImpl: Sized + IDebugHostSymbolImpl {
    fn GetOffset();
}
impl ::windows::core::RuntimeName for IDebugHostBaseClass {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugHostBaseClass";
}
impl IDebugHostBaseClassVtbl {
    pub const fn new<Impl: IDebugHostBaseClassImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugHostBaseClassVtbl {
        unsafe extern "system" fn GetOffset<Impl: IDebugHostBaseClassImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOffset(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugHostBaseClass>, base.5, GetOffset::<Impl, OFFSET>)
    }
}
pub trait IDebugHostConstantImpl: Sized + IDebugHostSymbolImpl {
    fn GetValue();
}
impl ::windows::core::RuntimeName for IDebugHostConstant {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugHostConstant";
}
impl IDebugHostConstantVtbl {
    pub const fn new<Impl: IDebugHostConstantImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugHostConstantVtbl {
        unsafe extern "system" fn GetValue<Impl: IDebugHostConstantImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: *mut super::super::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetValue(::core::mem::transmute_copy(&value)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugHostConstant>, base.5, GetValue::<Impl, OFFSET>)
    }
}
pub trait IDebugHostContextImpl: Sized {
    fn IsEqualTo();
}
impl ::windows::core::RuntimeName for IDebugHostContext {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugHostContext";
}
impl IDebugHostContextVtbl {
    pub const fn new<Impl: IDebugHostContextImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugHostContextVtbl {
        unsafe extern "system" fn IsEqualTo<Impl: IDebugHostContextImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcontext: ::windows::core::RawPtr, pisequal: *mut bool) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).IsEqualTo(&*(&pcontext as *const <IDebugHostContext as ::windows::core::Abi>::Abi as *const <IDebugHostContext as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pisequal)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugHostContext>, base.5, IsEqualTo::<Impl, OFFSET>)
    }
}
pub trait IDebugHostDataImpl: Sized + IDebugHostSymbolImpl {
    fn GetLocationKind();
    fn GetLocation();
    fn GetValue();
}
impl ::windows::core::RuntimeName for IDebugHostData {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugHostData";
}
impl IDebugHostDataVtbl {
    pub const fn new<Impl: IDebugHostDataImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugHostDataVtbl {
        unsafe extern "system" fn GetLocationKind<Impl: IDebugHostDataImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, locationkind: *mut LocationKind) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLocationKind(::core::mem::transmute_copy(&locationkind)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLocation<Impl: IDebugHostDataImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, location: *mut Location) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLocation(::core::mem::transmute_copy(&location)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetValue<Impl: IDebugHostDataImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: *mut super::super::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetValue(::core::mem::transmute_copy(&value)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugHostData>, base.5, GetLocationKind::<Impl, OFFSET>, GetLocation::<Impl, OFFSET>, GetValue::<Impl, OFFSET>)
    }
}
pub trait IDebugHostErrorSinkImpl: Sized {
    fn ReportError();
}
impl ::windows::core::RuntimeName for IDebugHostErrorSink {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugHostErrorSink";
}
impl IDebugHostErrorSinkVtbl {
    pub const fn new<Impl: IDebugHostErrorSinkImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugHostErrorSinkVtbl {
        unsafe extern "system" fn ReportError<Impl: IDebugHostErrorSinkImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, errclass: ErrorClass, hrerror: ::windows::core::HRESULT, message: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReportError(errclass, hrerror, &*(&message as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugHostErrorSink>, base.5, ReportError::<Impl, OFFSET>)
    }
}
pub trait IDebugHostEvaluatorImpl: Sized {
    fn EvaluateExpression();
    fn EvaluateExtendedExpression();
}
impl ::windows::core::RuntimeName for IDebugHostEvaluator {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugHostEvaluator";
}
impl IDebugHostEvaluatorVtbl {
    pub const fn new<Impl: IDebugHostEvaluatorImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugHostEvaluatorVtbl {
        unsafe extern "system" fn EvaluateExpression<Impl: IDebugHostEvaluatorImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: ::windows::core::RawPtr, expression: super::super::super::Foundation::PWSTR, bindingcontext: ::windows::core::RawPtr, result: *mut ::windows::core::RawPtr, metadata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EvaluateExpression(
                &*(&context as *const <IDebugHostContext as ::windows::core::Abi>::Abi as *const <IDebugHostContext as ::windows::core::DefaultType>::DefaultType),
                &*(&expression as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&bindingcontext as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType),
                ::core::mem::transmute_copy(&result),
                ::core::mem::transmute_copy(&metadata),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EvaluateExtendedExpression<Impl: IDebugHostEvaluatorImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: ::windows::core::RawPtr, expression: super::super::super::Foundation::PWSTR, bindingcontext: ::windows::core::RawPtr, result: *mut ::windows::core::RawPtr, metadata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EvaluateExtendedExpression(
                &*(&context as *const <IDebugHostContext as ::windows::core::Abi>::Abi as *const <IDebugHostContext as ::windows::core::DefaultType>::DefaultType),
                &*(&expression as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&bindingcontext as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType),
                ::core::mem::transmute_copy(&result),
                ::core::mem::transmute_copy(&metadata),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugHostEvaluator>, base.5, EvaluateExpression::<Impl, OFFSET>, EvaluateExtendedExpression::<Impl, OFFSET>)
    }
}
pub trait IDebugHostEvaluator2Impl: Sized + IDebugHostEvaluatorImpl {
    fn AssignTo();
}
impl ::windows::core::RuntimeName for IDebugHostEvaluator2 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugHostEvaluator2";
}
impl IDebugHostEvaluator2Vtbl {
    pub const fn new<Impl: IDebugHostEvaluator2Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugHostEvaluator2Vtbl {
        unsafe extern "system" fn AssignTo<Impl: IDebugHostEvaluator2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, assignmentreference: ::windows::core::RawPtr, assignmentvalue: ::windows::core::RawPtr, assignmentresult: *mut ::windows::core::RawPtr, assignmentmetadata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AssignTo(&*(&assignmentreference as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType), &*(&assignmentvalue as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&assignmentresult), ::core::mem::transmute_copy(&assignmentmetadata)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugHostEvaluator2>, base.5, AssignTo::<Impl, OFFSET>)
    }
}
pub trait IDebugHostExtensibilityImpl: Sized {
    fn CreateFunctionAlias();
    fn DestroyFunctionAlias();
}
impl ::windows::core::RuntimeName for IDebugHostExtensibility {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugHostExtensibility";
}
impl IDebugHostExtensibilityVtbl {
    pub const fn new<Impl: IDebugHostExtensibilityImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugHostExtensibilityVtbl {
        unsafe extern "system" fn CreateFunctionAlias<Impl: IDebugHostExtensibilityImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, aliasname: super::super::super::Foundation::PWSTR, functionobject: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateFunctionAlias(&*(&aliasname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&functionobject as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DestroyFunctionAlias<Impl: IDebugHostExtensibilityImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, aliasname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).DestroyFunctionAlias(&*(&aliasname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugHostExtensibility>, base.5, CreateFunctionAlias::<Impl, OFFSET>, DestroyFunctionAlias::<Impl, OFFSET>)
    }
}
pub trait IDebugHostFieldImpl: Sized + IDebugHostSymbolImpl {
    fn GetLocationKind();
    fn GetOffset();
    fn GetLocation();
    fn GetValue();
}
impl ::windows::core::RuntimeName for IDebugHostField {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugHostField";
}
impl IDebugHostFieldVtbl {
    pub const fn new<Impl: IDebugHostFieldImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugHostFieldVtbl {
        unsafe extern "system" fn GetLocationKind<Impl: IDebugHostFieldImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, locationkind: *mut LocationKind) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLocationKind(::core::mem::transmute_copy(&locationkind)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOffset<Impl: IDebugHostFieldImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOffset(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLocation<Impl: IDebugHostFieldImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, location: *mut Location) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLocation(::core::mem::transmute_copy(&location)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetValue<Impl: IDebugHostFieldImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: *mut super::super::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetValue(::core::mem::transmute_copy(&value)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugHostField>, base.5, GetLocationKind::<Impl, OFFSET>, GetOffset::<Impl, OFFSET>, GetLocation::<Impl, OFFSET>, GetValue::<Impl, OFFSET>)
    }
}
pub trait IDebugHostMemoryImpl: Sized {
    fn ReadBytes();
    fn WriteBytes();
    fn ReadPointers();
    fn WritePointers();
    fn GetDisplayStringForLocation();
}
impl ::windows::core::RuntimeName for IDebugHostMemory {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugHostMemory";
}
impl IDebugHostMemoryVtbl {
    pub const fn new<Impl: IDebugHostMemoryImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugHostMemoryVtbl {
        unsafe extern "system" fn ReadBytes<Impl: IDebugHostMemoryImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: ::windows::core::RawPtr, location: Location, buffer: *mut ::core::ffi::c_void, buffersize: u64, bytesread: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadBytes(&*(&context as *const <IDebugHostContext as ::windows::core::Abi>::Abi as *const <IDebugHostContext as ::windows::core::DefaultType>::DefaultType), &*(&location as *const <Location as ::windows::core::Abi>::Abi as *const <Location as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&bytesread)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteBytes<Impl: IDebugHostMemoryImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: ::windows::core::RawPtr, location: Location, buffer: *const ::core::ffi::c_void, buffersize: u64, byteswritten: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteBytes(
                &*(&context as *const <IDebugHostContext as ::windows::core::Abi>::Abi as *const <IDebugHostContext as ::windows::core::DefaultType>::DefaultType),
                &*(&location as *const <Location as ::windows::core::Abi>::Abi as *const <Location as ::windows::core::DefaultType>::DefaultType),
                &*(&buffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType),
                buffersize,
                ::core::mem::transmute_copy(&byteswritten),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadPointers<Impl: IDebugHostMemoryImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: ::windows::core::RawPtr, location: Location, count: u64, pointers: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadPointers(&*(&context as *const <IDebugHostContext as ::windows::core::Abi>::Abi as *const <IDebugHostContext as ::windows::core::DefaultType>::DefaultType), &*(&location as *const <Location as ::windows::core::Abi>::Abi as *const <Location as ::windows::core::DefaultType>::DefaultType), count, ::core::mem::transmute_copy(&pointers)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WritePointers<Impl: IDebugHostMemoryImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: ::windows::core::RawPtr, location: Location, count: u64, pointers: *const u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WritePointers(&*(&context as *const <IDebugHostContext as ::windows::core::Abi>::Abi as *const <IDebugHostContext as ::windows::core::DefaultType>::DefaultType), &*(&location as *const <Location as ::windows::core::Abi>::Abi as *const <Location as ::windows::core::DefaultType>::DefaultType), count, pointers) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDisplayStringForLocation<Impl: IDebugHostMemoryImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: ::windows::core::RawPtr, location: Location, verbose: u8, locationname: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDisplayStringForLocation(&*(&context as *const <IDebugHostContext as ::windows::core::Abi>::Abi as *const <IDebugHostContext as ::windows::core::DefaultType>::DefaultType), &*(&location as *const <Location as ::windows::core::Abi>::Abi as *const <Location as ::windows::core::DefaultType>::DefaultType), verbose, ::core::mem::transmute_copy(&locationname)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugHostMemory>, base.5, ReadBytes::<Impl, OFFSET>, WriteBytes::<Impl, OFFSET>, ReadPointers::<Impl, OFFSET>, WritePointers::<Impl, OFFSET>, GetDisplayStringForLocation::<Impl, OFFSET>)
    }
}
pub trait IDebugHostMemory2Impl: Sized + IDebugHostMemoryImpl {
    fn LinearizeLocation();
}
impl ::windows::core::RuntimeName for IDebugHostMemory2 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugHostMemory2";
}
impl IDebugHostMemory2Vtbl {
    pub const fn new<Impl: IDebugHostMemory2Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugHostMemory2Vtbl {
        unsafe extern "system" fn LinearizeLocation<Impl: IDebugHostMemory2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: ::windows::core::RawPtr, location: Location, plinearizedlocation: *mut Location) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).LinearizeLocation(&*(&context as *const <IDebugHostContext as ::windows::core::Abi>::Abi as *const <IDebugHostContext as ::windows::core::DefaultType>::DefaultType), &*(&location as *const <Location as ::windows::core::Abi>::Abi as *const <Location as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&plinearizedlocation)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugHostMemory2>, base.5, LinearizeLocation::<Impl, OFFSET>)
    }
}
pub trait IDebugHostModuleImpl: Sized + IDebugHostSymbolImpl {
    fn GetImageName();
    fn GetBaseLocation();
    fn GetVersion();
    fn FindTypeByName();
    fn FindSymbolByRVA();
    fn FindSymbolByName();
}
impl ::windows::core::RuntimeName for IDebugHostModule {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugHostModule";
}
impl IDebugHostModuleVtbl {
    pub const fn new<Impl: IDebugHostModuleImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugHostModuleVtbl {
        unsafe extern "system" fn GetImageName<Impl: IDebugHostModuleImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, allowpath: u8, imagename: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetImageName(allowpath, ::core::mem::transmute_copy(&imagename)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBaseLocation<Impl: IDebugHostModuleImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, modulebaselocation: *mut Location) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetBaseLocation(::core::mem::transmute_copy(&modulebaselocation)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetVersion<Impl: IDebugHostModuleImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fileversion: *mut u64, productversion: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetVersion(::core::mem::transmute_copy(&fileversion), ::core::mem::transmute_copy(&productversion)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FindTypeByName<Impl: IDebugHostModuleImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, typename: super::super::super::Foundation::PWSTR, r#type: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).FindTypeByName(&*(&typename as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&r#type)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FindSymbolByRVA<Impl: IDebugHostModuleImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, rva: u64, symbol: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).FindSymbolByRVA(rva, ::core::mem::transmute_copy(&symbol)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FindSymbolByName<Impl: IDebugHostModuleImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbolname: super::super::super::Foundation::PWSTR, symbol: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).FindSymbolByName(&*(&symbolname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&symbol)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugHostModule>, base.5, GetImageName::<Impl, OFFSET>, GetBaseLocation::<Impl, OFFSET>, GetVersion::<Impl, OFFSET>, FindTypeByName::<Impl, OFFSET>, FindSymbolByRVA::<Impl, OFFSET>, FindSymbolByName::<Impl, OFFSET>)
    }
}
pub trait IDebugHostModule2Impl: Sized + IDebugHostModuleImpl + IDebugHostSymbolImpl {
    fn FindContainingSymbolByRVA();
}
impl ::windows::core::RuntimeName for IDebugHostModule2 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugHostModule2";
}
impl IDebugHostModule2Vtbl {
    pub const fn new<Impl: IDebugHostModule2Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugHostModule2Vtbl {
        unsafe extern "system" fn FindContainingSymbolByRVA<Impl: IDebugHostModule2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, rva: u64, symbol: *mut ::windows::core::RawPtr, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).FindContainingSymbolByRVA(rva, ::core::mem::transmute_copy(&symbol), ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugHostModule2>, base.5, FindContainingSymbolByRVA::<Impl, OFFSET>)
    }
}
pub trait IDebugHostModuleSignatureImpl: Sized {
    fn IsMatch();
}
impl ::windows::core::RuntimeName for IDebugHostModuleSignature {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugHostModuleSignature";
}
impl IDebugHostModuleSignatureVtbl {
    pub const fn new<Impl: IDebugHostModuleSignatureImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugHostModuleSignatureVtbl {
        unsafe extern "system" fn IsMatch<Impl: IDebugHostModuleSignatureImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pmodule: ::windows::core::RawPtr, ismatch: *mut bool) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).IsMatch(&*(&pmodule as *const <IDebugHostModule as ::windows::core::Abi>::Abi as *const <IDebugHostModule as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ismatch)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugHostModuleSignature>, base.5, IsMatch::<Impl, OFFSET>)
    }
}
pub trait IDebugHostPublicImpl: Sized + IDebugHostSymbolImpl {
    fn GetLocationKind();
    fn GetLocation();
}
impl ::windows::core::RuntimeName for IDebugHostPublic {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugHostPublic";
}
impl IDebugHostPublicVtbl {
    pub const fn new<Impl: IDebugHostPublicImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugHostPublicVtbl {
        unsafe extern "system" fn GetLocationKind<Impl: IDebugHostPublicImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, locationkind: *mut LocationKind) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLocationKind(::core::mem::transmute_copy(&locationkind)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLocation<Impl: IDebugHostPublicImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, location: *mut Location) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLocation(::core::mem::transmute_copy(&location)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugHostPublic>, base.5, GetLocationKind::<Impl, OFFSET>, GetLocation::<Impl, OFFSET>)
    }
}
pub trait IDebugHostScriptHostImpl: Sized {
    fn CreateContext();
}
impl ::windows::core::RuntimeName for IDebugHostScriptHost {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugHostScriptHost";
}
impl IDebugHostScriptHostVtbl {
    pub const fn new<Impl: IDebugHostScriptHostImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugHostScriptHostVtbl {
        unsafe extern "system" fn CreateContext<Impl: IDebugHostScriptHostImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, script: ::windows::core::RawPtr, scriptcontext: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateContext(&*(&script as *const <IDataModelScript as ::windows::core::Abi>::Abi as *const <IDataModelScript as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&scriptcontext)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugHostScriptHost>, base.5, CreateContext::<Impl, OFFSET>)
    }
}
pub trait IDebugHostStatusImpl: Sized {
    fn PollUserInterrupt();
}
impl ::windows::core::RuntimeName for IDebugHostStatus {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugHostStatus";
}
impl IDebugHostStatusVtbl {
    pub const fn new<Impl: IDebugHostStatusImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugHostStatusVtbl {
        unsafe extern "system" fn PollUserInterrupt<Impl: IDebugHostStatusImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, interruptrequested: *mut bool) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).PollUserInterrupt(::core::mem::transmute_copy(&interruptrequested)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugHostStatus>, base.5, PollUserInterrupt::<Impl, OFFSET>)
    }
}
pub trait IDebugHostSymbolImpl: Sized {
    fn GetContext();
    fn EnumerateChildren();
    fn GetSymbolKind();
    fn GetName();
    fn GetType();
    fn GetContainingModule();
    fn CompareAgainst();
}
impl ::windows::core::RuntimeName for IDebugHostSymbol {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugHostSymbol";
}
impl IDebugHostSymbolVtbl {
    pub const fn new<Impl: IDebugHostSymbolImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugHostSymbolVtbl {
        unsafe extern "system" fn GetContext<Impl: IDebugHostSymbolImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetContext(::core::mem::transmute_copy(&context)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumerateChildren<Impl: IDebugHostSymbolImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, kind: SymbolKind, name: super::super::super::Foundation::PWSTR, ppenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EnumerateChildren(kind, &*(&name as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppenum)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolKind<Impl: IDebugHostSymbolImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, kind: *mut SymbolKind) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolKind(::core::mem::transmute_copy(&kind)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetName<Impl: IDebugHostSymbolImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbolname: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetName(::core::mem::transmute_copy(&symbolname)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetType<Impl: IDebugHostSymbolImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetType(::core::mem::transmute_copy(&r#type)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetContainingModule<Impl: IDebugHostSymbolImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, containingmodule: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetContainingModule(::core::mem::transmute_copy(&containingmodule)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CompareAgainst<Impl: IDebugHostSymbolImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcomparisonsymbol: ::windows::core::RawPtr, comparisonflags: u32, pmatches: *mut bool) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CompareAgainst(&*(&pcomparisonsymbol as *const <IDebugHostSymbol as ::windows::core::Abi>::Abi as *const <IDebugHostSymbol as ::windows::core::DefaultType>::DefaultType), comparisonflags, ::core::mem::transmute_copy(&pmatches)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugHostSymbol>, base.5, GetContext::<Impl, OFFSET>, EnumerateChildren::<Impl, OFFSET>, GetSymbolKind::<Impl, OFFSET>, GetName::<Impl, OFFSET>, GetType::<Impl, OFFSET>, GetContainingModule::<Impl, OFFSET>, CompareAgainst::<Impl, OFFSET>)
    }
}
pub trait IDebugHostSymbol2Impl: Sized + IDebugHostSymbolImpl {
    fn GetLanguage();
}
impl ::windows::core::RuntimeName for IDebugHostSymbol2 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugHostSymbol2";
}
impl IDebugHostSymbol2Vtbl {
    pub const fn new<Impl: IDebugHostSymbol2Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugHostSymbol2Vtbl {
        unsafe extern "system" fn GetLanguage<Impl: IDebugHostSymbol2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pkind: *mut LanguageKind) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLanguage(::core::mem::transmute_copy(&pkind)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugHostSymbol2>, base.5, GetLanguage::<Impl, OFFSET>)
    }
}
pub trait IDebugHostSymbolEnumeratorImpl: Sized {
    fn Reset();
    fn GetNext();
}
impl ::windows::core::RuntimeName for IDebugHostSymbolEnumerator {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugHostSymbolEnumerator";
}
impl IDebugHostSymbolEnumeratorVtbl {
    pub const fn new<Impl: IDebugHostSymbolEnumeratorImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugHostSymbolEnumeratorVtbl {
        unsafe extern "system" fn Reset<Impl: IDebugHostSymbolEnumeratorImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Reset() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNext<Impl: IDebugHostSymbolEnumeratorImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNext(::core::mem::transmute_copy(&symbol)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugHostSymbolEnumerator>, base.5, Reset::<Impl, OFFSET>, GetNext::<Impl, OFFSET>)
    }
}
pub trait IDebugHostSymbolsImpl: Sized {
    fn CreateModuleSignature();
    fn CreateTypeSignature();
    fn CreateTypeSignatureForModuleRange();
    fn EnumerateModules();
    fn FindModuleByName();
    fn FindModuleByLocation();
    fn GetMostDerivedObject();
}
impl ::windows::core::RuntimeName for IDebugHostSymbols {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugHostSymbols";
}
impl IDebugHostSymbolsVtbl {
    pub const fn new<Impl: IDebugHostSymbolsImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugHostSymbolsVtbl {
        unsafe extern "system" fn CreateModuleSignature<Impl: IDebugHostSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwszmodulename: super::super::super::Foundation::PWSTR, pwszminversion: super::super::super::Foundation::PWSTR, pwszmaxversion: super::super::super::Foundation::PWSTR, ppmodulesignature: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateModuleSignature(
                &*(&pwszmodulename as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pwszminversion as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pwszmaxversion as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                ::core::mem::transmute_copy(&ppmodulesignature),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateTypeSignature<Impl: IDebugHostSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, signaturespecification: super::super::super::Foundation::PWSTR, module: ::windows::core::RawPtr, typesignature: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateTypeSignature(&*(&signaturespecification as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&module as *const <IDebugHostModule as ::windows::core::Abi>::Abi as *const <IDebugHostModule as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&typesignature)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateTypeSignatureForModuleRange<Impl: IDebugHostSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, signaturespecification: super::super::super::Foundation::PWSTR, modulename: super::super::super::Foundation::PWSTR, minversion: super::super::super::Foundation::PWSTR, maxversion: super::super::super::Foundation::PWSTR, typesignature: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateTypeSignatureForModuleRange(
                &*(&signaturespecification as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&modulename as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&minversion as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&maxversion as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                ::core::mem::transmute_copy(&typesignature),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumerateModules<Impl: IDebugHostSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: ::windows::core::RawPtr, moduleenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EnumerateModules(&*(&context as *const <IDebugHostContext as ::windows::core::Abi>::Abi as *const <IDebugHostContext as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&moduleenum)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FindModuleByName<Impl: IDebugHostSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: ::windows::core::RawPtr, modulename: super::super::super::Foundation::PWSTR, module: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).FindModuleByName(&*(&context as *const <IDebugHostContext as ::windows::core::Abi>::Abi as *const <IDebugHostContext as ::windows::core::DefaultType>::DefaultType), &*(&modulename as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&module)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FindModuleByLocation<Impl: IDebugHostSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: ::windows::core::RawPtr, modulelocation: Location, module: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).FindModuleByLocation(&*(&context as *const <IDebugHostContext as ::windows::core::Abi>::Abi as *const <IDebugHostContext as ::windows::core::DefaultType>::DefaultType), &*(&modulelocation as *const <Location as ::windows::core::Abi>::Abi as *const <Location as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&module)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetMostDerivedObject<Impl: IDebugHostSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcontext: ::windows::core::RawPtr, location: Location, objecttype: ::windows::core::RawPtr, derivedlocation: *mut Location, derivedtype: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetMostDerivedObject(
                &*(&pcontext as *const <IDebugHostContext as ::windows::core::Abi>::Abi as *const <IDebugHostContext as ::windows::core::DefaultType>::DefaultType),
                &*(&location as *const <Location as ::windows::core::Abi>::Abi as *const <Location as ::windows::core::DefaultType>::DefaultType),
                &*(&objecttype as *const <IDebugHostType as ::windows::core::Abi>::Abi as *const <IDebugHostType as ::windows::core::DefaultType>::DefaultType),
                ::core::mem::transmute_copy(&derivedlocation),
                ::core::mem::transmute_copy(&derivedtype),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugHostSymbols>, base.5, CreateModuleSignature::<Impl, OFFSET>, CreateTypeSignature::<Impl, OFFSET>, CreateTypeSignatureForModuleRange::<Impl, OFFSET>, EnumerateModules::<Impl, OFFSET>, FindModuleByName::<Impl, OFFSET>, FindModuleByLocation::<Impl, OFFSET>, GetMostDerivedObject::<Impl, OFFSET>)
    }
}
pub trait IDebugHostTypeImpl: Sized + IDebugHostSymbolImpl {
    fn GetTypeKind();
    fn GetSize();
    fn GetBaseType();
    fn GetHashCode();
    fn GetIntrinsicType();
    fn GetBitField();
    fn GetPointerKind();
    fn GetMemberType();
    fn CreatePointerTo();
    fn GetArrayDimensionality();
    fn GetArrayDimensions();
    fn CreateArrayOf();
    fn GetFunctionCallingConvention();
    fn GetFunctionReturnType();
    fn GetFunctionParameterTypeCount();
    fn GetFunctionParameterTypeAt();
    fn IsGeneric();
    fn GetGenericArgumentCount();
    fn GetGenericArgumentAt();
}
impl ::windows::core::RuntimeName for IDebugHostType {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugHostType";
}
impl IDebugHostTypeVtbl {
    pub const fn new<Impl: IDebugHostTypeImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugHostTypeVtbl {
        unsafe extern "system" fn GetTypeKind<Impl: IDebugHostTypeImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, kind: *mut TypeKind) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTypeKind(::core::mem::transmute_copy(&kind)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSize<Impl: IDebugHostTypeImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, size: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSize(::core::mem::transmute_copy(&size)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBaseType<Impl: IDebugHostTypeImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, basetype: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetBaseType(::core::mem::transmute_copy(&basetype)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetHashCode<Impl: IDebugHostTypeImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hashcode: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetHashCode(::core::mem::transmute_copy(&hashcode)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetIntrinsicType<Impl: IDebugHostTypeImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, intrinsickind: *mut IntrinsicKind, carriertype: *mut u16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetIntrinsicType(::core::mem::transmute_copy(&intrinsickind), ::core::mem::transmute_copy(&carriertype)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBitField<Impl: IDebugHostTypeImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lsboffield: *mut u32, lengthoffield: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetBitField(::core::mem::transmute_copy(&lsboffield), ::core::mem::transmute_copy(&lengthoffield)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPointerKind<Impl: IDebugHostTypeImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pointerkind: *mut PointerKind) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetPointerKind(::core::mem::transmute_copy(&pointerkind)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetMemberType<Impl: IDebugHostTypeImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, membertype: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetMemberType(::core::mem::transmute_copy(&membertype)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreatePointerTo<Impl: IDebugHostTypeImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, kind: PointerKind, newtype: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreatePointerTo(kind, ::core::mem::transmute_copy(&newtype)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetArrayDimensionality<Impl: IDebugHostTypeImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, arraydimensionality: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetArrayDimensionality(::core::mem::transmute_copy(&arraydimensionality)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetArrayDimensions<Impl: IDebugHostTypeImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dimensions: u64, pdimensions: *mut ArrayDimension) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetArrayDimensions(dimensions, ::core::mem::transmute_copy(&pdimensions)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateArrayOf<Impl: IDebugHostTypeImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dimensions: u64, pdimensions: *const ArrayDimension, newtype: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateArrayOf(dimensions, &*(&pdimensions as *const <ArrayDimension as ::windows::core::Abi>::Abi as *const <ArrayDimension as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&newtype)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFunctionCallingConvention<Impl: IDebugHostTypeImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, conventionkind: *mut CallingConventionKind) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetFunctionCallingConvention(::core::mem::transmute_copy(&conventionkind)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFunctionReturnType<Impl: IDebugHostTypeImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, returntype: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetFunctionReturnType(::core::mem::transmute_copy(&returntype)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFunctionParameterTypeCount<Impl: IDebugHostTypeImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetFunctionParameterTypeCount(::core::mem::transmute_copy(&count)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFunctionParameterTypeAt<Impl: IDebugHostTypeImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, i: u64, parametertype: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetFunctionParameterTypeAt(i, ::core::mem::transmute_copy(&parametertype)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsGeneric<Impl: IDebugHostTypeImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, isgeneric: *mut bool) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).IsGeneric(::core::mem::transmute_copy(&isgeneric)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetGenericArgumentCount<Impl: IDebugHostTypeImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, argcount: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetGenericArgumentCount(::core::mem::transmute_copy(&argcount)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetGenericArgumentAt<Impl: IDebugHostTypeImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, i: u64, argument: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetGenericArgumentAt(i, ::core::mem::transmute_copy(&argument)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            base.0,
            base.1,
            base.2,
            base.3,
            ::windows::core::GetRuntimeClassName::<IDebugHostType>,
            base.5,
            GetTypeKind::<Impl, OFFSET>,
            GetSize::<Impl, OFFSET>,
            GetBaseType::<Impl, OFFSET>,
            GetHashCode::<Impl, OFFSET>,
            GetIntrinsicType::<Impl, OFFSET>,
            GetBitField::<Impl, OFFSET>,
            GetPointerKind::<Impl, OFFSET>,
            GetMemberType::<Impl, OFFSET>,
            CreatePointerTo::<Impl, OFFSET>,
            GetArrayDimensionality::<Impl, OFFSET>,
            GetArrayDimensions::<Impl, OFFSET>,
            CreateArrayOf::<Impl, OFFSET>,
            GetFunctionCallingConvention::<Impl, OFFSET>,
            GetFunctionReturnType::<Impl, OFFSET>,
            GetFunctionParameterTypeCount::<Impl, OFFSET>,
            GetFunctionParameterTypeAt::<Impl, OFFSET>,
            IsGeneric::<Impl, OFFSET>,
            GetGenericArgumentCount::<Impl, OFFSET>,
            GetGenericArgumentAt::<Impl, OFFSET>,
        )
    }
}
pub trait IDebugHostType2Impl: Sized + IDebugHostTypeImpl + IDebugHostSymbolImpl {
    fn IsTypedef();
    fn GetTypedefBaseType();
    fn GetTypedefFinalBaseType();
    fn GetFunctionVarArgsKind();
    fn GetFunctionInstancePointerType();
}
impl ::windows::core::RuntimeName for IDebugHostType2 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugHostType2";
}
impl IDebugHostType2Vtbl {
    pub const fn new<Impl: IDebugHostType2Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugHostType2Vtbl {
        unsafe extern "system" fn IsTypedef<Impl: IDebugHostType2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, istypedef: *mut bool) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).IsTypedef(::core::mem::transmute_copy(&istypedef)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTypedefBaseType<Impl: IDebugHostType2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, basetype: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTypedefBaseType(::core::mem::transmute_copy(&basetype)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTypedefFinalBaseType<Impl: IDebugHostType2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, finalbasetype: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTypedefFinalBaseType(::core::mem::transmute_copy(&finalbasetype)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFunctionVarArgsKind<Impl: IDebugHostType2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, varargskind: *mut VarArgsKind) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetFunctionVarArgsKind(::core::mem::transmute_copy(&varargskind)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFunctionInstancePointerType<Impl: IDebugHostType2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, instancepointertype: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetFunctionInstancePointerType(::core::mem::transmute_copy(&instancepointertype)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugHostType2>, base.5, IsTypedef::<Impl, OFFSET>, GetTypedefBaseType::<Impl, OFFSET>, GetTypedefFinalBaseType::<Impl, OFFSET>, GetFunctionVarArgsKind::<Impl, OFFSET>, GetFunctionInstancePointerType::<Impl, OFFSET>)
    }
}
pub trait IDebugHostTypeSignatureImpl: Sized {
    fn GetHashCode();
    fn IsMatch();
    fn CompareAgainst();
}
impl ::windows::core::RuntimeName for IDebugHostTypeSignature {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugHostTypeSignature";
}
impl IDebugHostTypeSignatureVtbl {
    pub const fn new<Impl: IDebugHostTypeSignatureImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugHostTypeSignatureVtbl {
        unsafe extern "system" fn GetHashCode<Impl: IDebugHostTypeSignatureImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hashcode: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetHashCode(::core::mem::transmute_copy(&hashcode)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsMatch<Impl: IDebugHostTypeSignatureImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: ::windows::core::RawPtr, ismatch: *mut bool, wildcardmatches: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).IsMatch(&*(&r#type as *const <IDebugHostType as ::windows::core::Abi>::Abi as *const <IDebugHostType as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ismatch), ::core::mem::transmute_copy(&wildcardmatches)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CompareAgainst<Impl: IDebugHostTypeSignatureImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, typesignature: ::windows::core::RawPtr, result: *mut SignatureComparison) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CompareAgainst(&*(&typesignature as *const <IDebugHostTypeSignature as ::windows::core::Abi>::Abi as *const <IDebugHostTypeSignature as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&result)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugHostTypeSignature>, base.5, GetHashCode::<Impl, OFFSET>, IsMatch::<Impl, OFFSET>, CompareAgainst::<Impl, OFFSET>)
    }
}
pub trait IDebugInputCallbacksImpl: Sized {
    fn StartInput();
    fn EndInput();
}
impl ::windows::core::RuntimeName for IDebugInputCallbacks {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugInputCallbacks";
}
impl IDebugInputCallbacksVtbl {
    pub const fn new<Impl: IDebugInputCallbacksImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugInputCallbacksVtbl {
        unsafe extern "system" fn StartInput<Impl: IDebugInputCallbacksImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffersize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).StartInput(buffersize) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndInput<Impl: IDebugInputCallbacksImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EndInput() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugInputCallbacks>, base.5, StartInput::<Impl, OFFSET>, EndInput::<Impl, OFFSET>)
    }
}
pub trait IDebugOutputCallbacksImpl: Sized {
    fn Output();
}
impl ::windows::core::RuntimeName for IDebugOutputCallbacks {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugOutputCallbacks";
}
impl IDebugOutputCallbacksVtbl {
    pub const fn new<Impl: IDebugOutputCallbacksImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugOutputCallbacksVtbl {
        unsafe extern "system" fn Output<Impl: IDebugOutputCallbacksImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32, text: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Output(mask, &*(&text as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugOutputCallbacks>, base.5, Output::<Impl, OFFSET>)
    }
}
pub trait IDebugOutputCallbacks2Impl: Sized {
    fn Output();
    fn GetInterestMask();
    fn Output2();
}
impl ::windows::core::RuntimeName for IDebugOutputCallbacks2 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugOutputCallbacks2";
}
impl IDebugOutputCallbacks2Vtbl {
    pub const fn new<Impl: IDebugOutputCallbacks2Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugOutputCallbacks2Vtbl {
        unsafe extern "system" fn Output<Impl: IDebugOutputCallbacks2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32, text: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Output(mask, &*(&text as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetInterestMask<Impl: IDebugOutputCallbacks2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetInterestMask(::core::mem::transmute_copy(&mask)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Output2<Impl: IDebugOutputCallbacks2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, flags: u32, arg: u64, text: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Output2(which, flags, arg, &*(&text as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugOutputCallbacks2>, base.5, Output::<Impl, OFFSET>, GetInterestMask::<Impl, OFFSET>, Output2::<Impl, OFFSET>)
    }
}
pub trait IDebugOutputCallbacksWideImpl: Sized {
    fn Output();
}
impl ::windows::core::RuntimeName for IDebugOutputCallbacksWide {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugOutputCallbacksWide";
}
impl IDebugOutputCallbacksWideVtbl {
    pub const fn new<Impl: IDebugOutputCallbacksWideImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugOutputCallbacksWideVtbl {
        unsafe extern "system" fn Output<Impl: IDebugOutputCallbacksWideImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32, text: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Output(mask, &*(&text as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugOutputCallbacksWide>, base.5, Output::<Impl, OFFSET>)
    }
}
pub trait IDebugOutputStreamImpl: Sized {
    fn Write();
}
impl ::windows::core::RuntimeName for IDebugOutputStream {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugOutputStream";
}
impl IDebugOutputStreamVtbl {
    pub const fn new<Impl: IDebugOutputStreamImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugOutputStreamVtbl {
        unsafe extern "system" fn Write<Impl: IDebugOutputStreamImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psz: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Write(&*(&psz as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugOutputStream>, base.5, Write::<Impl, OFFSET>)
    }
}
pub trait IDebugPlmClientImpl: Sized {
    fn LaunchPlmPackageForDebugWide();
}
impl ::windows::core::RuntimeName for IDebugPlmClient {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugPlmClient";
}
impl IDebugPlmClientVtbl {
    pub const fn new<Impl: IDebugPlmClientImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugPlmClientVtbl {
        unsafe extern "system" fn LaunchPlmPackageForDebugWide<Impl: IDebugPlmClientImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, timeout: u32, packagefullname: super::super::super::Foundation::PWSTR, appname: super::super::super::Foundation::PWSTR, arguments: super::super::super::Foundation::PWSTR, processid: *mut u32, threadid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).LaunchPlmPackageForDebugWide(
                server,
                timeout,
                &*(&packagefullname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&appname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&arguments as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                ::core::mem::transmute_copy(&processid),
                ::core::mem::transmute_copy(&threadid),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugPlmClient>, base.5, LaunchPlmPackageForDebugWide::<Impl, OFFSET>)
    }
}
pub trait IDebugPlmClient2Impl: Sized {
    fn LaunchPlmPackageForDebugWide();
    fn LaunchPlmBgTaskForDebugWide();
}
impl ::windows::core::RuntimeName for IDebugPlmClient2 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugPlmClient2";
}
impl IDebugPlmClient2Vtbl {
    pub const fn new<Impl: IDebugPlmClient2Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugPlmClient2Vtbl {
        unsafe extern "system" fn LaunchPlmPackageForDebugWide<Impl: IDebugPlmClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, timeout: u32, packagefullname: super::super::super::Foundation::PWSTR, appname: super::super::super::Foundation::PWSTR, arguments: super::super::super::Foundation::PWSTR, processid: *mut u32, threadid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).LaunchPlmPackageForDebugWide(
                server,
                timeout,
                &*(&packagefullname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&appname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&arguments as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                ::core::mem::transmute_copy(&processid),
                ::core::mem::transmute_copy(&threadid),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn LaunchPlmBgTaskForDebugWide<Impl: IDebugPlmClient2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, timeout: u32, packagefullname: super::super::super::Foundation::PWSTR, backgroundtaskid: super::super::super::Foundation::PWSTR, processid: *mut u32, threadid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).LaunchPlmBgTaskForDebugWide(
                server,
                timeout,
                &*(&packagefullname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&backgroundtaskid as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                ::core::mem::transmute_copy(&processid),
                ::core::mem::transmute_copy(&threadid),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugPlmClient2>, base.5, LaunchPlmPackageForDebugWide::<Impl, OFFSET>, LaunchPlmBgTaskForDebugWide::<Impl, OFFSET>)
    }
}
pub trait IDebugPlmClient3Impl: Sized {
    fn LaunchPlmPackageForDebugWide();
    fn LaunchPlmBgTaskForDebugWide();
    fn QueryPlmPackageWide();
    fn QueryPlmPackageList();
    fn EnablePlmPackageDebugWide();
    fn DisablePlmPackageDebugWide();
    fn SuspendPlmPackageWide();
    fn ResumePlmPackageWide();
    fn TerminatePlmPackageWide();
    fn LaunchAndDebugPlmAppWide();
    fn ActivateAndDebugPlmBgTaskWide();
}
impl ::windows::core::RuntimeName for IDebugPlmClient3 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugPlmClient3";
}
impl IDebugPlmClient3Vtbl {
    pub const fn new<Impl: IDebugPlmClient3Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugPlmClient3Vtbl {
        unsafe extern "system" fn LaunchPlmPackageForDebugWide<Impl: IDebugPlmClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, timeout: u32, packagefullname: super::super::super::Foundation::PWSTR, appname: super::super::super::Foundation::PWSTR, arguments: super::super::super::Foundation::PWSTR, processid: *mut u32, threadid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).LaunchPlmPackageForDebugWide(
                server,
                timeout,
                &*(&packagefullname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&appname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&arguments as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                ::core::mem::transmute_copy(&processid),
                ::core::mem::transmute_copy(&threadid),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn LaunchPlmBgTaskForDebugWide<Impl: IDebugPlmClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, timeout: u32, packagefullname: super::super::super::Foundation::PWSTR, backgroundtaskid: super::super::super::Foundation::PWSTR, processid: *mut u32, threadid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).LaunchPlmBgTaskForDebugWide(
                server,
                timeout,
                &*(&packagefullname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&backgroundtaskid as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                ::core::mem::transmute_copy(&processid),
                ::core::mem::transmute_copy(&threadid),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn QueryPlmPackageWide<Impl: IDebugPlmClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, packagefullname: super::super::super::Foundation::PWSTR, stream: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).QueryPlmPackageWide(server, &*(&packagefullname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&stream as *const <IDebugOutputStream as ::windows::core::Abi>::Abi as *const <IDebugOutputStream as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn QueryPlmPackageList<Impl: IDebugPlmClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, stream: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).QueryPlmPackageList(server, &*(&stream as *const <IDebugOutputStream as ::windows::core::Abi>::Abi as *const <IDebugOutputStream as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnablePlmPackageDebugWide<Impl: IDebugPlmClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, packagefullname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EnablePlmPackageDebugWide(server, &*(&packagefullname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DisablePlmPackageDebugWide<Impl: IDebugPlmClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, packagefullname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).DisablePlmPackageDebugWide(server, &*(&packagefullname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SuspendPlmPackageWide<Impl: IDebugPlmClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, packagefullname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SuspendPlmPackageWide(server, &*(&packagefullname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ResumePlmPackageWide<Impl: IDebugPlmClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, packagefullname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ResumePlmPackageWide(server, &*(&packagefullname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn TerminatePlmPackageWide<Impl: IDebugPlmClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, packagefullname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).TerminatePlmPackageWide(server, &*(&packagefullname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn LaunchAndDebugPlmAppWide<Impl: IDebugPlmClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, packagefullname: super::super::super::Foundation::PWSTR, appname: super::super::super::Foundation::PWSTR, arguments: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).LaunchAndDebugPlmAppWide(
                server,
                &*(&packagefullname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&appname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&arguments as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ActivateAndDebugPlmBgTaskWide<Impl: IDebugPlmClient3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, packagefullname: super::super::super::Foundation::PWSTR, backgroundtaskid: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ActivateAndDebugPlmBgTaskWide(server, &*(&packagefullname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&backgroundtaskid as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            base.0,
            base.1,
            base.2,
            base.3,
            ::windows::core::GetRuntimeClassName::<IDebugPlmClient3>,
            base.5,
            LaunchPlmPackageForDebugWide::<Impl, OFFSET>,
            LaunchPlmBgTaskForDebugWide::<Impl, OFFSET>,
            QueryPlmPackageWide::<Impl, OFFSET>,
            QueryPlmPackageList::<Impl, OFFSET>,
            EnablePlmPackageDebugWide::<Impl, OFFSET>,
            DisablePlmPackageDebugWide::<Impl, OFFSET>,
            SuspendPlmPackageWide::<Impl, OFFSET>,
            ResumePlmPackageWide::<Impl, OFFSET>,
            TerminatePlmPackageWide::<Impl, OFFSET>,
            LaunchAndDebugPlmAppWide::<Impl, OFFSET>,
            ActivateAndDebugPlmBgTaskWide::<Impl, OFFSET>,
        )
    }
}
pub trait IDebugPropertyImpl: Sized {
    fn GetPropertyInfo();
    fn GetExtendedInfo();
    fn SetValueAsString();
    fn EnumMembers();
    fn GetParent();
}
impl ::windows::core::RuntimeName for IDebugProperty {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugProperty";
}
impl IDebugPropertyVtbl {
    pub const fn new<Impl: IDebugPropertyImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugPropertyVtbl {
        unsafe extern "system" fn GetPropertyInfo<Impl: IDebugPropertyImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwfieldspec: u32, nradix: u32, ppropertyinfo: *mut DebugPropertyInfo) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetPropertyInfo(dwfieldspec, nradix, ::core::mem::transmute_copy(&ppropertyinfo)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExtendedInfo<Impl: IDebugPropertyImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, cinfos: u32, rgguidextendedinfo: *const ::windows::core::GUID, rgvar: *mut super::super::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExtendedInfo(cinfos, &*(&rgguidextendedinfo as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&rgvar)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetValueAsString<Impl: IDebugPropertyImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszvalue: super::super::super::Foundation::PWSTR, nradix: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetValueAsString(&*(&pszvalue as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), nradix) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumMembers<Impl: IDebugPropertyImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwfieldspec: u32, nradix: u32, refiid: *const ::windows::core::GUID, ppepi: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EnumMembers(dwfieldspec, nradix, &*(&refiid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppepi)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetParent<Impl: IDebugPropertyImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppdebugprop: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetParent(::core::mem::transmute_copy(&ppdebugprop)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugProperty>, base.5, GetPropertyInfo::<Impl, OFFSET>, GetExtendedInfo::<Impl, OFFSET>, SetValueAsString::<Impl, OFFSET>, EnumMembers::<Impl, OFFSET>, GetParent::<Impl, OFFSET>)
    }
}
pub trait IDebugPropertyEnumType_AllImpl: Sized {
    fn GetName();
}
impl ::windows::core::RuntimeName for IDebugPropertyEnumType_All {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugPropertyEnumType_All";
}
impl IDebugPropertyEnumType_AllVtbl {
    pub const fn new<Impl: IDebugPropertyEnumType_AllImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugPropertyEnumType_AllVtbl {
        unsafe extern "system" fn GetName<Impl: IDebugPropertyEnumType_AllImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, __midl__idebugpropertyenumtype_all0000: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetName(::core::mem::transmute_copy(&__midl__idebugpropertyenumtype_all0000)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugPropertyEnumType_All>, base.5, GetName::<Impl, OFFSET>)
    }
}
pub trait IDebugPropertyEnumType_ArgumentsImpl: Sized + IDebugPropertyEnumType_AllImpl {}
impl ::windows::core::RuntimeName for IDebugPropertyEnumType_Arguments {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugPropertyEnumType_Arguments";
}
impl IDebugPropertyEnumType_ArgumentsVtbl {
    pub const fn new<Impl: IDebugPropertyEnumType_ArgumentsImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugPropertyEnumType_ArgumentsVtbl {
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugPropertyEnumType_Arguments>, base.5)
    }
}
pub trait IDebugPropertyEnumType_LocalsImpl: Sized + IDebugPropertyEnumType_AllImpl {}
impl ::windows::core::RuntimeName for IDebugPropertyEnumType_Locals {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugPropertyEnumType_Locals";
}
impl IDebugPropertyEnumType_LocalsVtbl {
    pub const fn new<Impl: IDebugPropertyEnumType_LocalsImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugPropertyEnumType_LocalsVtbl {
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugPropertyEnumType_Locals>, base.5)
    }
}
pub trait IDebugPropertyEnumType_LocalsPlusArgsImpl: Sized + IDebugPropertyEnumType_AllImpl {}
impl ::windows::core::RuntimeName for IDebugPropertyEnumType_LocalsPlusArgs {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugPropertyEnumType_LocalsPlusArgs";
}
impl IDebugPropertyEnumType_LocalsPlusArgsVtbl {
    pub const fn new<Impl: IDebugPropertyEnumType_LocalsPlusArgsImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugPropertyEnumType_LocalsPlusArgsVtbl {
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugPropertyEnumType_LocalsPlusArgs>, base.5)
    }
}
pub trait IDebugPropertyEnumType_RegistersImpl: Sized + IDebugPropertyEnumType_AllImpl {}
impl ::windows::core::RuntimeName for IDebugPropertyEnumType_Registers {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugPropertyEnumType_Registers";
}
impl IDebugPropertyEnumType_RegistersVtbl {
    pub const fn new<Impl: IDebugPropertyEnumType_RegistersImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugPropertyEnumType_RegistersVtbl {
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugPropertyEnumType_Registers>, base.5)
    }
}
pub trait IDebugRegistersImpl: Sized {
    fn GetNumberRegisters();
    fn GetDescription();
    fn GetIndexByName();
    fn GetValue();
    fn SetValue();
    fn GetValues();
    fn SetValues();
    fn OutputRegisters();
    fn GetInstructionOffset();
    fn GetStackOffset();
    fn GetFrameOffset();
}
impl ::windows::core::RuntimeName for IDebugRegisters {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugRegisters";
}
impl IDebugRegistersVtbl {
    pub const fn new<Impl: IDebugRegistersImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugRegistersVtbl {
        unsafe extern "system" fn GetNumberRegisters<Impl: IDebugRegistersImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberRegisters(::core::mem::transmute_copy(&number)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDescription<Impl: IDebugRegistersImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, register: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, desc: *mut DEBUG_REGISTER_DESCRIPTION) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDescription(register, ::core::mem::transmute_copy(&namebuffer), namebuffersize, ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&desc)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetIndexByName<Impl: IDebugRegistersImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PSTR, index: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetIndexByName(&*(&name as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetValue<Impl: IDebugRegistersImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, register: u32, value: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetValue(register, ::core::mem::transmute_copy(&value)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetValue<Impl: IDebugRegistersImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, register: u32, value: *const DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetValue(register, &*(&value as *const <DEBUG_VALUE as ::windows::core::Abi>::Abi as *const <DEBUG_VALUE as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetValues<Impl: IDebugRegistersImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, indices: *const u32, start: u32, values: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetValues(count, indices, start, ::core::mem::transmute_copy(&values)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetValues<Impl: IDebugRegistersImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, indices: *const u32, start: u32, values: *const DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetValues(count, indices, start, &*(&values as *const <DEBUG_VALUE as ::windows::core::Abi>::Abi as *const <DEBUG_VALUE as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputRegisters<Impl: IDebugRegistersImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputRegisters(outputcontrol, flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetInstructionOffset<Impl: IDebugRegistersImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetInstructionOffset(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetStackOffset<Impl: IDebugRegistersImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetStackOffset(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFrameOffset<Impl: IDebugRegistersImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetFrameOffset(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugRegisters>, base.5, GetNumberRegisters::<Impl, OFFSET>, GetDescription::<Impl, OFFSET>, GetIndexByName::<Impl, OFFSET>, GetValue::<Impl, OFFSET>, SetValue::<Impl, OFFSET>, GetValues::<Impl, OFFSET>, SetValues::<Impl, OFFSET>, OutputRegisters::<Impl, OFFSET>, GetInstructionOffset::<Impl, OFFSET>, GetStackOffset::<Impl, OFFSET>, GetFrameOffset::<Impl, OFFSET>)
    }
}
pub trait IDebugRegisters2Impl: Sized {
    fn GetNumberRegisters();
    fn GetDescription();
    fn GetIndexByName();
    fn GetValue();
    fn SetValue();
    fn GetValues();
    fn SetValues();
    fn OutputRegisters();
    fn GetInstructionOffset();
    fn GetStackOffset();
    fn GetFrameOffset();
    fn GetDescriptionWide();
    fn GetIndexByNameWide();
    fn GetNumberPseudoRegisters();
    fn GetPseudoDescription();
    fn GetPseudoDescriptionWide();
    fn GetPseudoIndexByName();
    fn GetPseudoIndexByNameWide();
    fn GetPseudoValues();
    fn SetPseudoValues();
    fn GetValues2();
    fn SetValues2();
    fn OutputRegisters2();
    fn GetInstructionOffset2();
    fn GetStackOffset2();
    fn GetFrameOffset2();
}
impl ::windows::core::RuntimeName for IDebugRegisters2 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugRegisters2";
}
impl IDebugRegisters2Vtbl {
    pub const fn new<Impl: IDebugRegisters2Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugRegisters2Vtbl {
        unsafe extern "system" fn GetNumberRegisters<Impl: IDebugRegisters2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberRegisters(::core::mem::transmute_copy(&number)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDescription<Impl: IDebugRegisters2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, register: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, desc: *mut DEBUG_REGISTER_DESCRIPTION) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDescription(register, ::core::mem::transmute_copy(&namebuffer), namebuffersize, ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&desc)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetIndexByName<Impl: IDebugRegisters2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PSTR, index: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetIndexByName(&*(&name as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetValue<Impl: IDebugRegisters2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, register: u32, value: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetValue(register, ::core::mem::transmute_copy(&value)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetValue<Impl: IDebugRegisters2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, register: u32, value: *const DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetValue(register, &*(&value as *const <DEBUG_VALUE as ::windows::core::Abi>::Abi as *const <DEBUG_VALUE as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetValues<Impl: IDebugRegisters2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, indices: *const u32, start: u32, values: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetValues(count, indices, start, ::core::mem::transmute_copy(&values)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetValues<Impl: IDebugRegisters2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, indices: *const u32, start: u32, values: *const DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetValues(count, indices, start, &*(&values as *const <DEBUG_VALUE as ::windows::core::Abi>::Abi as *const <DEBUG_VALUE as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputRegisters<Impl: IDebugRegisters2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputRegisters(outputcontrol, flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetInstructionOffset<Impl: IDebugRegisters2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetInstructionOffset(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetStackOffset<Impl: IDebugRegisters2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetStackOffset(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFrameOffset<Impl: IDebugRegisters2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetFrameOffset(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDescriptionWide<Impl: IDebugRegisters2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, register: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, desc: *mut DEBUG_REGISTER_DESCRIPTION) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDescriptionWide(register, ::core::mem::transmute_copy(&namebuffer), namebuffersize, ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&desc)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetIndexByNameWide<Impl: IDebugRegisters2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PWSTR, index: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetIndexByNameWide(&*(&name as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberPseudoRegisters<Impl: IDebugRegisters2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberPseudoRegisters(::core::mem::transmute_copy(&number)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPseudoDescription<Impl: IDebugRegisters2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, register: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, typemodule: *mut u64, typeid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetPseudoDescription(register, ::core::mem::transmute_copy(&namebuffer), namebuffersize, ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&typemodule), ::core::mem::transmute_copy(&typeid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPseudoDescriptionWide<Impl: IDebugRegisters2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, register: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, typemodule: *mut u64, typeid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetPseudoDescriptionWide(register, ::core::mem::transmute_copy(&namebuffer), namebuffersize, ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&typemodule), ::core::mem::transmute_copy(&typeid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPseudoIndexByName<Impl: IDebugRegisters2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PSTR, index: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetPseudoIndexByName(&*(&name as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPseudoIndexByNameWide<Impl: IDebugRegisters2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PWSTR, index: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetPseudoIndexByNameWide(&*(&name as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPseudoValues<Impl: IDebugRegisters2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, source: u32, count: u32, indices: *const u32, start: u32, values: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetPseudoValues(source, count, indices, start, ::core::mem::transmute_copy(&values)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetPseudoValues<Impl: IDebugRegisters2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, source: u32, count: u32, indices: *const u32, start: u32, values: *const DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetPseudoValues(source, count, indices, start, &*(&values as *const <DEBUG_VALUE as ::windows::core::Abi>::Abi as *const <DEBUG_VALUE as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetValues2<Impl: IDebugRegisters2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, source: u32, count: u32, indices: *const u32, start: u32, values: *mut DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetValues2(source, count, indices, start, ::core::mem::transmute_copy(&values)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetValues2<Impl: IDebugRegisters2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, source: u32, count: u32, indices: *const u32, start: u32, values: *const DEBUG_VALUE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetValues2(source, count, indices, start, &*(&values as *const <DEBUG_VALUE as ::windows::core::Abi>::Abi as *const <DEBUG_VALUE as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputRegisters2<Impl: IDebugRegisters2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, source: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputRegisters2(outputcontrol, source, flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetInstructionOffset2<Impl: IDebugRegisters2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, source: u32, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetInstructionOffset2(source, ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetStackOffset2<Impl: IDebugRegisters2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, source: u32, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetStackOffset2(source, ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFrameOffset2<Impl: IDebugRegisters2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, source: u32, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetFrameOffset2(source, ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            base.0,
            base.1,
            base.2,
            base.3,
            ::windows::core::GetRuntimeClassName::<IDebugRegisters2>,
            base.5,
            GetNumberRegisters::<Impl, OFFSET>,
            GetDescription::<Impl, OFFSET>,
            GetIndexByName::<Impl, OFFSET>,
            GetValue::<Impl, OFFSET>,
            SetValue::<Impl, OFFSET>,
            GetValues::<Impl, OFFSET>,
            SetValues::<Impl, OFFSET>,
            OutputRegisters::<Impl, OFFSET>,
            GetInstructionOffset::<Impl, OFFSET>,
            GetStackOffset::<Impl, OFFSET>,
            GetFrameOffset::<Impl, OFFSET>,
            GetDescriptionWide::<Impl, OFFSET>,
            GetIndexByNameWide::<Impl, OFFSET>,
            GetNumberPseudoRegisters::<Impl, OFFSET>,
            GetPseudoDescription::<Impl, OFFSET>,
            GetPseudoDescriptionWide::<Impl, OFFSET>,
            GetPseudoIndexByName::<Impl, OFFSET>,
            GetPseudoIndexByNameWide::<Impl, OFFSET>,
            GetPseudoValues::<Impl, OFFSET>,
            SetPseudoValues::<Impl, OFFSET>,
            GetValues2::<Impl, OFFSET>,
            SetValues2::<Impl, OFFSET>,
            OutputRegisters2::<Impl, OFFSET>,
            GetInstructionOffset2::<Impl, OFFSET>,
            GetStackOffset2::<Impl, OFFSET>,
            GetFrameOffset2::<Impl, OFFSET>,
        )
    }
}
pub trait IDebugSessionProviderImpl: Sized {
    fn StartDebugSession();
}
impl ::windows::core::RuntimeName for IDebugSessionProvider {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugSessionProvider";
}
impl IDebugSessionProviderVtbl {
    pub const fn new<Impl: IDebugSessionProviderImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugSessionProviderVtbl {
        unsafe extern "system" fn StartDebugSession<Impl: IDebugSessionProviderImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pda: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).StartDebugSession(&*(&pda as *const <IRemoteDebugApplication as ::windows::core::Abi>::Abi as *const <IRemoteDebugApplication as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugSessionProvider>, base.5, StartDebugSession::<Impl, OFFSET>)
    }
}
pub trait IDebugStackFrameImpl: Sized {
    fn GetCodeContext();
    fn GetDescriptionString();
    fn GetLanguageString();
    fn GetThread();
    fn GetDebugProperty();
}
impl ::windows::core::RuntimeName for IDebugStackFrame {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugStackFrame";
}
impl IDebugStackFrameVtbl {
    pub const fn new<Impl: IDebugStackFrameImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugStackFrameVtbl {
        unsafe extern "system" fn GetCodeContext<Impl: IDebugStackFrameImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppcc: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCodeContext(::core::mem::transmute_copy(&ppcc)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDescriptionString<Impl: IDebugStackFrameImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flong: super::super::super::Foundation::BOOL, pbstrdescription: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDescriptionString(&*(&flong as *const <super::super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pbstrdescription)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLanguageString<Impl: IDebugStackFrameImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flong: super::super::super::Foundation::BOOL, pbstrlanguage: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLanguageString(&*(&flong as *const <super::super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pbstrlanguage)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetThread<Impl: IDebugStackFrameImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppat: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetThread(::core::mem::transmute_copy(&ppat)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDebugProperty<Impl: IDebugStackFrameImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppdebugprop: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDebugProperty(::core::mem::transmute_copy(&ppdebugprop)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugStackFrame>, base.5, GetCodeContext::<Impl, OFFSET>, GetDescriptionString::<Impl, OFFSET>, GetLanguageString::<Impl, OFFSET>, GetThread::<Impl, OFFSET>, GetDebugProperty::<Impl, OFFSET>)
    }
}
pub trait IDebugStackFrame110Impl: Sized + IDebugStackFrameImpl {
    fn GetStackFrameType();
    fn GetScriptInvocationContext();
}
impl ::windows::core::RuntimeName for IDebugStackFrame110 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugStackFrame110";
}
impl IDebugStackFrame110Vtbl {
    pub const fn new<Impl: IDebugStackFrame110Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugStackFrame110Vtbl {
        unsafe extern "system" fn GetStackFrameType<Impl: IDebugStackFrame110Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstackframekind: *mut DEBUG_STACKFRAME_TYPE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetStackFrameType(::core::mem::transmute_copy(&pstackframekind)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetScriptInvocationContext<Impl: IDebugStackFrame110Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppinvocationcontext: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetScriptInvocationContext(::core::mem::transmute_copy(&ppinvocationcontext)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugStackFrame110>, base.5, GetStackFrameType::<Impl, OFFSET>, GetScriptInvocationContext::<Impl, OFFSET>)
    }
}
pub trait IDebugStackFrameSnifferImpl: Sized {
    fn EnumStackFrames();
}
impl ::windows::core::RuntimeName for IDebugStackFrameSniffer {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugStackFrameSniffer";
}
impl IDebugStackFrameSnifferVtbl {
    pub const fn new<Impl: IDebugStackFrameSnifferImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugStackFrameSnifferVtbl {
        unsafe extern "system" fn EnumStackFrames<Impl: IDebugStackFrameSnifferImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppedsf: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EnumStackFrames(::core::mem::transmute_copy(&ppedsf)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugStackFrameSniffer>, base.5, EnumStackFrames::<Impl, OFFSET>)
    }
}
pub trait IDebugStackFrameSnifferEx32Impl: Sized + IDebugStackFrameSnifferImpl {
    fn EnumStackFramesEx32();
}
impl ::windows::core::RuntimeName for IDebugStackFrameSnifferEx32 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugStackFrameSnifferEx32";
}
impl IDebugStackFrameSnifferEx32Vtbl {
    pub const fn new<Impl: IDebugStackFrameSnifferEx32Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugStackFrameSnifferEx32Vtbl {
        unsafe extern "system" fn EnumStackFramesEx32<Impl: IDebugStackFrameSnifferEx32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwspmin: u32, ppedsf: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EnumStackFramesEx32(dwspmin, ::core::mem::transmute_copy(&ppedsf)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugStackFrameSnifferEx32>, base.5, EnumStackFramesEx32::<Impl, OFFSET>)
    }
}
pub trait IDebugStackFrameSnifferEx64Impl: Sized + IDebugStackFrameSnifferImpl {
    fn EnumStackFramesEx64();
}
impl ::windows::core::RuntimeName for IDebugStackFrameSnifferEx64 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugStackFrameSnifferEx64";
}
impl IDebugStackFrameSnifferEx64Vtbl {
    pub const fn new<Impl: IDebugStackFrameSnifferEx64Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugStackFrameSnifferEx64Vtbl {
        unsafe extern "system" fn EnumStackFramesEx64<Impl: IDebugStackFrameSnifferEx64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwspmin: u64, ppedsf: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EnumStackFramesEx64(dwspmin, ::core::mem::transmute_copy(&ppedsf)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugStackFrameSnifferEx64>, base.5, EnumStackFramesEx64::<Impl, OFFSET>)
    }
}
pub trait IDebugSymbolGroupImpl: Sized {
    fn GetNumberSymbols();
    fn AddSymbol();
    fn RemoveSymbolByName();
    fn RemoveSymbolByIndex();
    fn GetSymbolName();
    fn GetSymbolParameters();
    fn ExpandSymbol();
    fn OutputSymbols();
    fn WriteSymbol();
    fn OutputAsType();
}
impl ::windows::core::RuntimeName for IDebugSymbolGroup {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugSymbolGroup";
}
impl IDebugSymbolGroupVtbl {
    pub const fn new<Impl: IDebugSymbolGroupImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugSymbolGroupVtbl {
        unsafe extern "system" fn GetNumberSymbols<Impl: IDebugSymbolGroupImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberSymbols(::core::mem::transmute_copy(&number)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddSymbol<Impl: IDebugSymbolGroupImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PSTR, index: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddSymbol(&*(&name as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), index) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveSymbolByName<Impl: IDebugSymbolGroupImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveSymbolByName(&*(&name as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveSymbolByIndex<Impl: IDebugSymbolGroupImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveSymbolByIndex(index) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolName<Impl: IDebugSymbolGroupImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolName(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&namesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolParameters<Impl: IDebugSymbolGroupImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *mut DEBUG_SYMBOL_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolParameters(start, count, ::core::mem::transmute_copy(&params)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ExpandSymbol<Impl: IDebugSymbolGroupImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, expand: super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ExpandSymbol(index, &*(&expand as *const <super::super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputSymbols<Impl: IDebugSymbolGroupImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, start: u32, count: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputSymbols(outputcontrol, flags, start, count) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteSymbol<Impl: IDebugSymbolGroupImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, value: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteSymbol(index, &*(&value as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputAsType<Impl: IDebugSymbolGroupImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, r#type: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputAsType(index, &*(&r#type as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugSymbolGroup>, base.5, GetNumberSymbols::<Impl, OFFSET>, AddSymbol::<Impl, OFFSET>, RemoveSymbolByName::<Impl, OFFSET>, RemoveSymbolByIndex::<Impl, OFFSET>, GetSymbolName::<Impl, OFFSET>, GetSymbolParameters::<Impl, OFFSET>, ExpandSymbol::<Impl, OFFSET>, OutputSymbols::<Impl, OFFSET>, WriteSymbol::<Impl, OFFSET>, OutputAsType::<Impl, OFFSET>)
    }
}
pub trait IDebugSymbolGroup2Impl: Sized {
    fn GetNumberSymbols();
    fn AddSymbol();
    fn RemoveSymbolByName();
    fn RemoveSymbolByIndex();
    fn GetSymbolName();
    fn GetSymbolParameters();
    fn ExpandSymbol();
    fn OutputSymbols();
    fn WriteSymbol();
    fn OutputAsType();
    fn AddSymbolWide();
    fn RemoveSymbolByNameWide();
    fn GetSymbolNameWide();
    fn WriteSymbolWide();
    fn OutputAsTypeWide();
    fn GetSymbolTypeName();
    fn GetSymbolTypeNameWide();
    fn GetSymbolSize();
    fn GetSymbolOffset();
    fn GetSymbolRegister();
    fn GetSymbolValueText();
    fn GetSymbolValueTextWide();
    fn GetSymbolEntryInformation();
}
impl ::windows::core::RuntimeName for IDebugSymbolGroup2 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugSymbolGroup2";
}
impl IDebugSymbolGroup2Vtbl {
    pub const fn new<Impl: IDebugSymbolGroup2Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugSymbolGroup2Vtbl {
        unsafe extern "system" fn GetNumberSymbols<Impl: IDebugSymbolGroup2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberSymbols(::core::mem::transmute_copy(&number)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddSymbol<Impl: IDebugSymbolGroup2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PSTR, index: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddSymbol(&*(&name as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), index) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveSymbolByName<Impl: IDebugSymbolGroup2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveSymbolByName(&*(&name as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveSymbolByIndex<Impl: IDebugSymbolGroup2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveSymbolByIndex(index) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolName<Impl: IDebugSymbolGroup2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolName(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&namesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolParameters<Impl: IDebugSymbolGroup2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *mut DEBUG_SYMBOL_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolParameters(start, count, ::core::mem::transmute_copy(&params)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ExpandSymbol<Impl: IDebugSymbolGroup2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, expand: super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ExpandSymbol(index, &*(&expand as *const <super::super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputSymbols<Impl: IDebugSymbolGroup2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, start: u32, count: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputSymbols(outputcontrol, flags, start, count) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteSymbol<Impl: IDebugSymbolGroup2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, value: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteSymbol(index, &*(&value as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputAsType<Impl: IDebugSymbolGroup2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, r#type: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputAsType(index, &*(&r#type as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddSymbolWide<Impl: IDebugSymbolGroup2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PWSTR, index: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddSymbolWide(&*(&name as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), index) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveSymbolByNameWide<Impl: IDebugSymbolGroup2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveSymbolByNameWide(&*(&name as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolNameWide<Impl: IDebugSymbolGroup2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolNameWide(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&namesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteSymbolWide<Impl: IDebugSymbolGroup2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, value: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteSymbolWide(index, &*(&value as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputAsTypeWide<Impl: IDebugSymbolGroup2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, r#type: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputAsTypeWide(index, &*(&r#type as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolTypeName<Impl: IDebugSymbolGroup2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolTypeName(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&namesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolTypeNameWide<Impl: IDebugSymbolGroup2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolTypeNameWide(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&namesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolSize<Impl: IDebugSymbolGroup2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, size: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolSize(index, ::core::mem::transmute_copy(&size)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolOffset<Impl: IDebugSymbolGroup2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolOffset(index, ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolRegister<Impl: IDebugSymbolGroup2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, register: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolRegister(index, ::core::mem::transmute_copy(&register)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolValueText<Impl: IDebugSymbolGroup2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolValueText(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&namesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolValueTextWide<Impl: IDebugSymbolGroup2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolValueTextWide(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&namesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolEntryInformation<Impl: IDebugSymbolGroup2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, entry: *mut DEBUG_SYMBOL_ENTRY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolEntryInformation(index, ::core::mem::transmute_copy(&entry)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            base.0,
            base.1,
            base.2,
            base.3,
            ::windows::core::GetRuntimeClassName::<IDebugSymbolGroup2>,
            base.5,
            GetNumberSymbols::<Impl, OFFSET>,
            AddSymbol::<Impl, OFFSET>,
            RemoveSymbolByName::<Impl, OFFSET>,
            RemoveSymbolByIndex::<Impl, OFFSET>,
            GetSymbolName::<Impl, OFFSET>,
            GetSymbolParameters::<Impl, OFFSET>,
            ExpandSymbol::<Impl, OFFSET>,
            OutputSymbols::<Impl, OFFSET>,
            WriteSymbol::<Impl, OFFSET>,
            OutputAsType::<Impl, OFFSET>,
            AddSymbolWide::<Impl, OFFSET>,
            RemoveSymbolByNameWide::<Impl, OFFSET>,
            GetSymbolNameWide::<Impl, OFFSET>,
            WriteSymbolWide::<Impl, OFFSET>,
            OutputAsTypeWide::<Impl, OFFSET>,
            GetSymbolTypeName::<Impl, OFFSET>,
            GetSymbolTypeNameWide::<Impl, OFFSET>,
            GetSymbolSize::<Impl, OFFSET>,
            GetSymbolOffset::<Impl, OFFSET>,
            GetSymbolRegister::<Impl, OFFSET>,
            GetSymbolValueText::<Impl, OFFSET>,
            GetSymbolValueTextWide::<Impl, OFFSET>,
            GetSymbolEntryInformation::<Impl, OFFSET>,
        )
    }
}
pub trait IDebugSymbolsImpl: Sized {
    fn GetSymbolOptions();
    fn AddSymbolOptions();
    fn RemoveSymbolOptions();
    fn SetSymbolOptions();
    fn GetNameByOffset();
    fn GetOffsetByName();
    fn GetNearNameByOffset();
    fn GetLineByOffset();
    fn GetOffsetByLine();
    fn GetNumberModules();
    fn GetModuleByIndex();
    fn GetModuleByModuleName();
    fn GetModuleByOffset();
    fn GetModuleNames();
    fn GetModuleParameters();
    fn GetSymbolModule();
    fn GetTypeName();
    fn GetTypeId();
    fn GetTypeSize();
    fn GetFieldOffset();
    fn GetSymbolTypeId();
    fn GetOffsetTypeId();
    fn ReadTypedDataVirtual();
    fn WriteTypedDataVirtual();
    fn OutputTypedDataVirtual();
    fn ReadTypedDataPhysical();
    fn WriteTypedDataPhysical();
    fn OutputTypedDataPhysical();
    fn GetScope();
    fn SetScope();
    fn ResetScope();
    fn GetScopeSymbolGroup();
    fn CreateSymbolGroup();
    fn StartSymbolMatch();
    fn GetNextSymbolMatch();
    fn EndSymbolMatch();
    fn Reload();
    fn GetSymbolPath();
    fn SetSymbolPath();
    fn AppendSymbolPath();
    fn GetImagePath();
    fn SetImagePath();
    fn AppendImagePath();
    fn GetSourcePath();
    fn GetSourcePathElement();
    fn SetSourcePath();
    fn AppendSourcePath();
    fn FindSourceFile();
    fn GetSourceFileLineOffsets();
}
impl ::windows::core::RuntimeName for IDebugSymbols {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugSymbols";
}
impl IDebugSymbolsVtbl {
    pub const fn new<Impl: IDebugSymbolsImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugSymbolsVtbl {
        unsafe extern "system" fn GetSymbolOptions<Impl: IDebugSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolOptions(::core::mem::transmute_copy(&options)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddSymbolOptions<Impl: IDebugSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddSymbolOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveSymbolOptions<Impl: IDebugSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveSymbolOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSymbolOptions<Impl: IDebugSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetSymbolOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNameByOffset<Impl: IDebugSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNameByOffset(offset, ::core::mem::transmute_copy(&namebuffer), namebuffersize, ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOffsetByName<Impl: IDebugSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PSTR, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOffsetByName(&*(&symbol as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNearNameByOffset<Impl: IDebugSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNearNameByOffset(offset, delta, ::core::mem::transmute_copy(&namebuffer), namebuffersize, ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLineByOffset<Impl: IDebugSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, line: *mut u32, filebuffer: super::super::super::Foundation::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLineByOffset(offset, ::core::mem::transmute_copy(&line), ::core::mem::transmute_copy(&filebuffer), filebuffersize, ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&displacement)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOffsetByLine<Impl: IDebugSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, line: u32, file: super::super::super::Foundation::PSTR, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOffsetByLine(line, &*(&file as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberModules<Impl: IDebugSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, loaded: *mut u32, unloaded: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberModules(::core::mem::transmute_copy(&loaded), ::core::mem::transmute_copy(&unloaded)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleByIndex<Impl: IDebugSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetModuleByIndex(index, ::core::mem::transmute_copy(&base)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleByModuleName<Impl: IDebugSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetModuleByModuleName(&*(&name as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), startindex, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleByOffset<Impl: IDebugSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetModuleByOffset(offset, startindex, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleNames<Impl: IDebugSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, base: u64, imagenamebuffer: super::super::super::Foundation::PSTR, imagenamebuffersize: u32, imagenamesize: *mut u32, modulenamebuffer: super::super::super::Foundation::PSTR, modulenamebuffersize: u32, modulenamesize: *mut u32, loadedimagenamebuffer: super::super::super::Foundation::PSTR, loadedimagenamebuffersize: u32, loadedimagenamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetModuleNames(index, base, ::core::mem::transmute_copy(&imagenamebuffer), imagenamebuffersize, ::core::mem::transmute_copy(&imagenamesize), ::core::mem::transmute_copy(&modulenamebuffer), modulenamebuffersize, ::core::mem::transmute_copy(&modulenamesize), ::core::mem::transmute_copy(&loadedimagenamebuffer), loadedimagenamebuffersize, ::core::mem::transmute_copy(&loadedimagenamesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleParameters<Impl: IDebugSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, bases: *const u64, start: u32, params: *mut DEBUG_MODULE_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetModuleParameters(count, bases, start, ::core::mem::transmute_copy(&params)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolModule<Impl: IDebugSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PSTR, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolModule(&*(&symbol as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&base)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTypeName<Impl: IDebugSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTypeName(module, typeid, ::core::mem::transmute_copy(&namebuffer), namebuffersize, ::core::mem::transmute_copy(&namesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTypeId<Impl: IDebugSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, name: super::super::super::Foundation::PSTR, typeid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTypeId(module, &*(&name as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&typeid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTypeSize<Impl: IDebugSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, size: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTypeSize(module, typeid, ::core::mem::transmute_copy(&size)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFieldOffset<Impl: IDebugSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, field: super::super::super::Foundation::PSTR, offset: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetFieldOffset(module, typeid, &*(&field as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolTypeId<Impl: IDebugSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PSTR, typeid: *mut u32, module: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolTypeId(&*(&symbol as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&module)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOffsetTypeId<Impl: IDebugSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, typeid: *mut u32, module: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOffsetTypeId(offset, ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&module)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadTypedDataVirtual<Impl: IDebugSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadTypedDataVirtual(offset, module, typeid, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&bytesread)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteTypedDataVirtual<Impl: IDebugSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteTypedDataVirtual(offset, module, typeid, &*(&buffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), buffersize, ::core::mem::transmute_copy(&byteswritten)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputTypedDataVirtual<Impl: IDebugSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputTypedDataVirtual(outputcontrol, offset, module, typeid, flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadTypedDataPhysical<Impl: IDebugSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadTypedDataPhysical(offset, module, typeid, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&bytesread)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteTypedDataPhysical<Impl: IDebugSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteTypedDataPhysical(offset, module, typeid, &*(&buffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), buffersize, ::core::mem::transmute_copy(&byteswritten)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputTypedDataPhysical<Impl: IDebugSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputTypedDataPhysical(outputcontrol, offset, module, typeid, flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetScope<Impl: IDebugSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME, scopecontext: *mut ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetScope(::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&scopeframe), ::core::mem::transmute_copy(&scopecontext), scopecontextsize) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetScope<Impl: IDebugSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME, scopecontext: *const ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetScope(instructionoffset, &*(&scopeframe as *const <DEBUG_STACK_FRAME as ::windows::core::Abi>::Abi as *const <DEBUG_STACK_FRAME as ::windows::core::DefaultType>::DefaultType), &*(&scopecontext as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), scopecontextsize) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ResetScope<Impl: IDebugSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ResetScope() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetScopeSymbolGroup<Impl: IDebugSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, update: ::windows::core::RawPtr, symbols: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetScopeSymbolGroup(flags, &*(&update as *const <IDebugSymbolGroup as ::windows::core::Abi>::Abi as *const <IDebugSymbolGroup as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&symbols)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateSymbolGroup<Impl: IDebugSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, group: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateSymbolGroup(::core::mem::transmute_copy(&group)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartSymbolMatch<Impl: IDebugSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pattern: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).StartSymbolMatch(&*(&pattern as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNextSymbolMatch<Impl: IDebugSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, buffer: super::super::super::Foundation::PSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNextSymbolMatch(handle, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&matchsize), ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndSymbolMatch<Impl: IDebugSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EndSymbolMatch(handle) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Reload<Impl: IDebugSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Reload(&*(&module as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolPath<Impl: IDebugSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolPath(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&pathsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSymbolPath<Impl: IDebugSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetSymbolPath(&*(&path as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AppendSymbolPath<Impl: IDebugSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AppendSymbolPath(&*(&addition as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetImagePath<Impl: IDebugSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetImagePath(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&pathsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetImagePath<Impl: IDebugSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetImagePath(&*(&path as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AppendImagePath<Impl: IDebugSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AppendImagePath(&*(&addition as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourcePath<Impl: IDebugSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSourcePath(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&pathsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourcePathElement<Impl: IDebugSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, elementsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSourcePathElement(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&elementsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSourcePath<Impl: IDebugSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetSourcePath(&*(&path as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AppendSourcePath<Impl: IDebugSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AppendSourcePath(&*(&addition as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FindSourceFile<Impl: IDebugSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, startelement: u32, file: super::super::super::Foundation::PSTR, flags: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).FindSourceFile(startelement, &*(&file as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&foundelement), ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&foundsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourceFileLineOffsets<Impl: IDebugSymbolsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSourceFileLineOffsets(&*(&file as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&buffer), bufferlines, ::core::mem::transmute_copy(&filelines)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            base.0,
            base.1,
            base.2,
            base.3,
            ::windows::core::GetRuntimeClassName::<IDebugSymbols>,
            base.5,
            GetSymbolOptions::<Impl, OFFSET>,
            AddSymbolOptions::<Impl, OFFSET>,
            RemoveSymbolOptions::<Impl, OFFSET>,
            SetSymbolOptions::<Impl, OFFSET>,
            GetNameByOffset::<Impl, OFFSET>,
            GetOffsetByName::<Impl, OFFSET>,
            GetNearNameByOffset::<Impl, OFFSET>,
            GetLineByOffset::<Impl, OFFSET>,
            GetOffsetByLine::<Impl, OFFSET>,
            GetNumberModules::<Impl, OFFSET>,
            GetModuleByIndex::<Impl, OFFSET>,
            GetModuleByModuleName::<Impl, OFFSET>,
            GetModuleByOffset::<Impl, OFFSET>,
            GetModuleNames::<Impl, OFFSET>,
            GetModuleParameters::<Impl, OFFSET>,
            GetSymbolModule::<Impl, OFFSET>,
            GetTypeName::<Impl, OFFSET>,
            GetTypeId::<Impl, OFFSET>,
            GetTypeSize::<Impl, OFFSET>,
            GetFieldOffset::<Impl, OFFSET>,
            GetSymbolTypeId::<Impl, OFFSET>,
            GetOffsetTypeId::<Impl, OFFSET>,
            ReadTypedDataVirtual::<Impl, OFFSET>,
            WriteTypedDataVirtual::<Impl, OFFSET>,
            OutputTypedDataVirtual::<Impl, OFFSET>,
            ReadTypedDataPhysical::<Impl, OFFSET>,
            WriteTypedDataPhysical::<Impl, OFFSET>,
            OutputTypedDataPhysical::<Impl, OFFSET>,
            GetScope::<Impl, OFFSET>,
            SetScope::<Impl, OFFSET>,
            ResetScope::<Impl, OFFSET>,
            GetScopeSymbolGroup::<Impl, OFFSET>,
            CreateSymbolGroup::<Impl, OFFSET>,
            StartSymbolMatch::<Impl, OFFSET>,
            GetNextSymbolMatch::<Impl, OFFSET>,
            EndSymbolMatch::<Impl, OFFSET>,
            Reload::<Impl, OFFSET>,
            GetSymbolPath::<Impl, OFFSET>,
            SetSymbolPath::<Impl, OFFSET>,
            AppendSymbolPath::<Impl, OFFSET>,
            GetImagePath::<Impl, OFFSET>,
            SetImagePath::<Impl, OFFSET>,
            AppendImagePath::<Impl, OFFSET>,
            GetSourcePath::<Impl, OFFSET>,
            GetSourcePathElement::<Impl, OFFSET>,
            SetSourcePath::<Impl, OFFSET>,
            AppendSourcePath::<Impl, OFFSET>,
            FindSourceFile::<Impl, OFFSET>,
            GetSourceFileLineOffsets::<Impl, OFFSET>,
        )
    }
}
pub trait IDebugSymbols2Impl: Sized {
    fn GetSymbolOptions();
    fn AddSymbolOptions();
    fn RemoveSymbolOptions();
    fn SetSymbolOptions();
    fn GetNameByOffset();
    fn GetOffsetByName();
    fn GetNearNameByOffset();
    fn GetLineByOffset();
    fn GetOffsetByLine();
    fn GetNumberModules();
    fn GetModuleByIndex();
    fn GetModuleByModuleName();
    fn GetModuleByOffset();
    fn GetModuleNames();
    fn GetModuleParameters();
    fn GetSymbolModule();
    fn GetTypeName();
    fn GetTypeId();
    fn GetTypeSize();
    fn GetFieldOffset();
    fn GetSymbolTypeId();
    fn GetOffsetTypeId();
    fn ReadTypedDataVirtual();
    fn WriteTypedDataVirtual();
    fn OutputTypedDataVirtual();
    fn ReadTypedDataPhysical();
    fn WriteTypedDataPhysical();
    fn OutputTypedDataPhysical();
    fn GetScope();
    fn SetScope();
    fn ResetScope();
    fn GetScopeSymbolGroup();
    fn CreateSymbolGroup();
    fn StartSymbolMatch();
    fn GetNextSymbolMatch();
    fn EndSymbolMatch();
    fn Reload();
    fn GetSymbolPath();
    fn SetSymbolPath();
    fn AppendSymbolPath();
    fn GetImagePath();
    fn SetImagePath();
    fn AppendImagePath();
    fn GetSourcePath();
    fn GetSourcePathElement();
    fn SetSourcePath();
    fn AppendSourcePath();
    fn FindSourceFile();
    fn GetSourceFileLineOffsets();
    fn GetModuleVersionInformation();
    fn GetModuleNameString();
    fn GetConstantName();
    fn GetFieldName();
    fn GetTypeOptions();
    fn AddTypeOptions();
    fn RemoveTypeOptions();
    fn SetTypeOptions();
}
impl ::windows::core::RuntimeName for IDebugSymbols2 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugSymbols2";
}
impl IDebugSymbols2Vtbl {
    pub const fn new<Impl: IDebugSymbols2Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugSymbols2Vtbl {
        unsafe extern "system" fn GetSymbolOptions<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolOptions(::core::mem::transmute_copy(&options)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddSymbolOptions<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddSymbolOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveSymbolOptions<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveSymbolOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSymbolOptions<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetSymbolOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNameByOffset<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNameByOffset(offset, ::core::mem::transmute_copy(&namebuffer), namebuffersize, ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOffsetByName<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PSTR, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOffsetByName(&*(&symbol as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNearNameByOffset<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNearNameByOffset(offset, delta, ::core::mem::transmute_copy(&namebuffer), namebuffersize, ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLineByOffset<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, line: *mut u32, filebuffer: super::super::super::Foundation::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLineByOffset(offset, ::core::mem::transmute_copy(&line), ::core::mem::transmute_copy(&filebuffer), filebuffersize, ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&displacement)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOffsetByLine<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, line: u32, file: super::super::super::Foundation::PSTR, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOffsetByLine(line, &*(&file as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberModules<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, loaded: *mut u32, unloaded: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberModules(::core::mem::transmute_copy(&loaded), ::core::mem::transmute_copy(&unloaded)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleByIndex<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetModuleByIndex(index, ::core::mem::transmute_copy(&base)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleByModuleName<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetModuleByModuleName(&*(&name as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), startindex, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleByOffset<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetModuleByOffset(offset, startindex, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleNames<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, base: u64, imagenamebuffer: super::super::super::Foundation::PSTR, imagenamebuffersize: u32, imagenamesize: *mut u32, modulenamebuffer: super::super::super::Foundation::PSTR, modulenamebuffersize: u32, modulenamesize: *mut u32, loadedimagenamebuffer: super::super::super::Foundation::PSTR, loadedimagenamebuffersize: u32, loadedimagenamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetModuleNames(index, base, ::core::mem::transmute_copy(&imagenamebuffer), imagenamebuffersize, ::core::mem::transmute_copy(&imagenamesize), ::core::mem::transmute_copy(&modulenamebuffer), modulenamebuffersize, ::core::mem::transmute_copy(&modulenamesize), ::core::mem::transmute_copy(&loadedimagenamebuffer), loadedimagenamebuffersize, ::core::mem::transmute_copy(&loadedimagenamesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleParameters<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, bases: *const u64, start: u32, params: *mut DEBUG_MODULE_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetModuleParameters(count, bases, start, ::core::mem::transmute_copy(&params)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolModule<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PSTR, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolModule(&*(&symbol as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&base)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTypeName<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTypeName(module, typeid, ::core::mem::transmute_copy(&namebuffer), namebuffersize, ::core::mem::transmute_copy(&namesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTypeId<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, name: super::super::super::Foundation::PSTR, typeid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTypeId(module, &*(&name as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&typeid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTypeSize<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, size: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTypeSize(module, typeid, ::core::mem::transmute_copy(&size)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFieldOffset<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, field: super::super::super::Foundation::PSTR, offset: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetFieldOffset(module, typeid, &*(&field as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolTypeId<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PSTR, typeid: *mut u32, module: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolTypeId(&*(&symbol as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&module)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOffsetTypeId<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, typeid: *mut u32, module: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOffsetTypeId(offset, ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&module)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadTypedDataVirtual<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadTypedDataVirtual(offset, module, typeid, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&bytesread)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteTypedDataVirtual<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteTypedDataVirtual(offset, module, typeid, &*(&buffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), buffersize, ::core::mem::transmute_copy(&byteswritten)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputTypedDataVirtual<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputTypedDataVirtual(outputcontrol, offset, module, typeid, flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadTypedDataPhysical<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadTypedDataPhysical(offset, module, typeid, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&bytesread)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteTypedDataPhysical<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteTypedDataPhysical(offset, module, typeid, &*(&buffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), buffersize, ::core::mem::transmute_copy(&byteswritten)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputTypedDataPhysical<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputTypedDataPhysical(outputcontrol, offset, module, typeid, flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetScope<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME, scopecontext: *mut ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetScope(::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&scopeframe), ::core::mem::transmute_copy(&scopecontext), scopecontextsize) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetScope<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME, scopecontext: *const ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetScope(instructionoffset, &*(&scopeframe as *const <DEBUG_STACK_FRAME as ::windows::core::Abi>::Abi as *const <DEBUG_STACK_FRAME as ::windows::core::DefaultType>::DefaultType), &*(&scopecontext as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), scopecontextsize) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ResetScope<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ResetScope() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetScopeSymbolGroup<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, update: ::windows::core::RawPtr, symbols: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetScopeSymbolGroup(flags, &*(&update as *const <IDebugSymbolGroup as ::windows::core::Abi>::Abi as *const <IDebugSymbolGroup as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&symbols)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateSymbolGroup<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, group: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateSymbolGroup(::core::mem::transmute_copy(&group)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartSymbolMatch<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pattern: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).StartSymbolMatch(&*(&pattern as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNextSymbolMatch<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, buffer: super::super::super::Foundation::PSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNextSymbolMatch(handle, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&matchsize), ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndSymbolMatch<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EndSymbolMatch(handle) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Reload<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Reload(&*(&module as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolPath<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolPath(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&pathsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSymbolPath<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetSymbolPath(&*(&path as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AppendSymbolPath<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AppendSymbolPath(&*(&addition as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetImagePath<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetImagePath(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&pathsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetImagePath<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetImagePath(&*(&path as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AppendImagePath<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AppendImagePath(&*(&addition as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourcePath<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSourcePath(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&pathsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourcePathElement<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, elementsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSourcePathElement(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&elementsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSourcePath<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetSourcePath(&*(&path as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AppendSourcePath<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AppendSourcePath(&*(&addition as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FindSourceFile<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, startelement: u32, file: super::super::super::Foundation::PSTR, flags: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).FindSourceFile(startelement, &*(&file as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&foundelement), ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&foundsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourceFileLineOffsets<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSourceFileLineOffsets(&*(&file as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&buffer), bufferlines, ::core::mem::transmute_copy(&filelines)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleVersionInformation<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, base: u64, item: super::super::super::Foundation::PSTR, buffer: *mut ::core::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetModuleVersionInformation(index, base, &*(&item as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&verinfosize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleNameString<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, index: u32, base: u64, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetModuleNameString(which, index, base, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&namesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetConstantName<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, value: u64, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetConstantName(module, typeid, value, ::core::mem::transmute_copy(&namebuffer), namebuffersize, ::core::mem::transmute_copy(&namesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFieldName<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, fieldindex: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetFieldName(module, typeid, fieldindex, ::core::mem::transmute_copy(&namebuffer), namebuffersize, ::core::mem::transmute_copy(&namesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTypeOptions<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTypeOptions(::core::mem::transmute_copy(&options)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddTypeOptions<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddTypeOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveTypeOptions<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveTypeOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetTypeOptions<Impl: IDebugSymbols2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetTypeOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            base.0,
            base.1,
            base.2,
            base.3,
            ::windows::core::GetRuntimeClassName::<IDebugSymbols2>,
            base.5,
            GetSymbolOptions::<Impl, OFFSET>,
            AddSymbolOptions::<Impl, OFFSET>,
            RemoveSymbolOptions::<Impl, OFFSET>,
            SetSymbolOptions::<Impl, OFFSET>,
            GetNameByOffset::<Impl, OFFSET>,
            GetOffsetByName::<Impl, OFFSET>,
            GetNearNameByOffset::<Impl, OFFSET>,
            GetLineByOffset::<Impl, OFFSET>,
            GetOffsetByLine::<Impl, OFFSET>,
            GetNumberModules::<Impl, OFFSET>,
            GetModuleByIndex::<Impl, OFFSET>,
            GetModuleByModuleName::<Impl, OFFSET>,
            GetModuleByOffset::<Impl, OFFSET>,
            GetModuleNames::<Impl, OFFSET>,
            GetModuleParameters::<Impl, OFFSET>,
            GetSymbolModule::<Impl, OFFSET>,
            GetTypeName::<Impl, OFFSET>,
            GetTypeId::<Impl, OFFSET>,
            GetTypeSize::<Impl, OFFSET>,
            GetFieldOffset::<Impl, OFFSET>,
            GetSymbolTypeId::<Impl, OFFSET>,
            GetOffsetTypeId::<Impl, OFFSET>,
            ReadTypedDataVirtual::<Impl, OFFSET>,
            WriteTypedDataVirtual::<Impl, OFFSET>,
            OutputTypedDataVirtual::<Impl, OFFSET>,
            ReadTypedDataPhysical::<Impl, OFFSET>,
            WriteTypedDataPhysical::<Impl, OFFSET>,
            OutputTypedDataPhysical::<Impl, OFFSET>,
            GetScope::<Impl, OFFSET>,
            SetScope::<Impl, OFFSET>,
            ResetScope::<Impl, OFFSET>,
            GetScopeSymbolGroup::<Impl, OFFSET>,
            CreateSymbolGroup::<Impl, OFFSET>,
            StartSymbolMatch::<Impl, OFFSET>,
            GetNextSymbolMatch::<Impl, OFFSET>,
            EndSymbolMatch::<Impl, OFFSET>,
            Reload::<Impl, OFFSET>,
            GetSymbolPath::<Impl, OFFSET>,
            SetSymbolPath::<Impl, OFFSET>,
            AppendSymbolPath::<Impl, OFFSET>,
            GetImagePath::<Impl, OFFSET>,
            SetImagePath::<Impl, OFFSET>,
            AppendImagePath::<Impl, OFFSET>,
            GetSourcePath::<Impl, OFFSET>,
            GetSourcePathElement::<Impl, OFFSET>,
            SetSourcePath::<Impl, OFFSET>,
            AppendSourcePath::<Impl, OFFSET>,
            FindSourceFile::<Impl, OFFSET>,
            GetSourceFileLineOffsets::<Impl, OFFSET>,
            GetModuleVersionInformation::<Impl, OFFSET>,
            GetModuleNameString::<Impl, OFFSET>,
            GetConstantName::<Impl, OFFSET>,
            GetFieldName::<Impl, OFFSET>,
            GetTypeOptions::<Impl, OFFSET>,
            AddTypeOptions::<Impl, OFFSET>,
            RemoveTypeOptions::<Impl, OFFSET>,
            SetTypeOptions::<Impl, OFFSET>,
        )
    }
}
pub trait IDebugSymbols3Impl: Sized {
    fn GetSymbolOptions();
    fn AddSymbolOptions();
    fn RemoveSymbolOptions();
    fn SetSymbolOptions();
    fn GetNameByOffset();
    fn GetOffsetByName();
    fn GetNearNameByOffset();
    fn GetLineByOffset();
    fn GetOffsetByLine();
    fn GetNumberModules();
    fn GetModuleByIndex();
    fn GetModuleByModuleName();
    fn GetModuleByOffset();
    fn GetModuleNames();
    fn GetModuleParameters();
    fn GetSymbolModule();
    fn GetTypeName();
    fn GetTypeId();
    fn GetTypeSize();
    fn GetFieldOffset();
    fn GetSymbolTypeId();
    fn GetOffsetTypeId();
    fn ReadTypedDataVirtual();
    fn WriteTypedDataVirtual();
    fn OutputTypedDataVirtual();
    fn ReadTypedDataPhysical();
    fn WriteTypedDataPhysical();
    fn OutputTypedDataPhysical();
    fn GetScope();
    fn SetScope();
    fn ResetScope();
    fn GetScopeSymbolGroup();
    fn CreateSymbolGroup();
    fn StartSymbolMatch();
    fn GetNextSymbolMatch();
    fn EndSymbolMatch();
    fn Reload();
    fn GetSymbolPath();
    fn SetSymbolPath();
    fn AppendSymbolPath();
    fn GetImagePath();
    fn SetImagePath();
    fn AppendImagePath();
    fn GetSourcePath();
    fn GetSourcePathElement();
    fn SetSourcePath();
    fn AppendSourcePath();
    fn FindSourceFile();
    fn GetSourceFileLineOffsets();
    fn GetModuleVersionInformation();
    fn GetModuleNameString();
    fn GetConstantName();
    fn GetFieldName();
    fn GetTypeOptions();
    fn AddTypeOptions();
    fn RemoveTypeOptions();
    fn SetTypeOptions();
    fn GetNameByOffsetWide();
    fn GetOffsetByNameWide();
    fn GetNearNameByOffsetWide();
    fn GetLineByOffsetWide();
    fn GetOffsetByLineWide();
    fn GetModuleByModuleNameWide();
    fn GetSymbolModuleWide();
    fn GetTypeNameWide();
    fn GetTypeIdWide();
    fn GetFieldOffsetWide();
    fn GetSymbolTypeIdWide();
    fn GetScopeSymbolGroup2();
    fn CreateSymbolGroup2();
    fn StartSymbolMatchWide();
    fn GetNextSymbolMatchWide();
    fn ReloadWide();
    fn GetSymbolPathWide();
    fn SetSymbolPathWide();
    fn AppendSymbolPathWide();
    fn GetImagePathWide();
    fn SetImagePathWide();
    fn AppendImagePathWide();
    fn GetSourcePathWide();
    fn GetSourcePathElementWide();
    fn SetSourcePathWide();
    fn AppendSourcePathWide();
    fn FindSourceFileWide();
    fn GetSourceFileLineOffsetsWide();
    fn GetModuleVersionInformationWide();
    fn GetModuleNameStringWide();
    fn GetConstantNameWide();
    fn GetFieldNameWide();
    fn IsManagedModule();
    fn GetModuleByModuleName2();
    fn GetModuleByModuleName2Wide();
    fn GetModuleByOffset2();
    fn AddSyntheticModule();
    fn AddSyntheticModuleWide();
    fn RemoveSyntheticModule();
    fn GetCurrentScopeFrameIndex();
    fn SetScopeFrameByIndex();
    fn SetScopeFromJitDebugInfo();
    fn SetScopeFromStoredEvent();
    fn OutputSymbolByOffset();
    fn GetFunctionEntryByOffset();
    fn GetFieldTypeAndOffset();
    fn GetFieldTypeAndOffsetWide();
    fn AddSyntheticSymbol();
    fn AddSyntheticSymbolWide();
    fn RemoveSyntheticSymbol();
    fn GetSymbolEntriesByOffset();
    fn GetSymbolEntriesByName();
    fn GetSymbolEntriesByNameWide();
    fn GetSymbolEntryByToken();
    fn GetSymbolEntryInformation();
    fn GetSymbolEntryString();
    fn GetSymbolEntryStringWide();
    fn GetSymbolEntryOffsetRegions();
    fn GetSymbolEntryBySymbolEntry();
    fn GetSourceEntriesByOffset();
    fn GetSourceEntriesByLine();
    fn GetSourceEntriesByLineWide();
    fn GetSourceEntryString();
    fn GetSourceEntryStringWide();
    fn GetSourceEntryOffsetRegions();
    fn GetSourceEntryBySourceEntry();
}
impl ::windows::core::RuntimeName for IDebugSymbols3 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugSymbols3";
}
impl IDebugSymbols3Vtbl {
    pub const fn new<Impl: IDebugSymbols3Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugSymbols3Vtbl {
        unsafe extern "system" fn GetSymbolOptions<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolOptions(::core::mem::transmute_copy(&options)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddSymbolOptions<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddSymbolOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveSymbolOptions<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveSymbolOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSymbolOptions<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetSymbolOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNameByOffset<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNameByOffset(offset, ::core::mem::transmute_copy(&namebuffer), namebuffersize, ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOffsetByName<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PSTR, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOffsetByName(&*(&symbol as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNearNameByOffset<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNearNameByOffset(offset, delta, ::core::mem::transmute_copy(&namebuffer), namebuffersize, ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLineByOffset<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, line: *mut u32, filebuffer: super::super::super::Foundation::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLineByOffset(offset, ::core::mem::transmute_copy(&line), ::core::mem::transmute_copy(&filebuffer), filebuffersize, ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&displacement)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOffsetByLine<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, line: u32, file: super::super::super::Foundation::PSTR, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOffsetByLine(line, &*(&file as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberModules<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, loaded: *mut u32, unloaded: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberModules(::core::mem::transmute_copy(&loaded), ::core::mem::transmute_copy(&unloaded)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleByIndex<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetModuleByIndex(index, ::core::mem::transmute_copy(&base)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleByModuleName<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetModuleByModuleName(&*(&name as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), startindex, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleByOffset<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetModuleByOffset(offset, startindex, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleNames<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, base: u64, imagenamebuffer: super::super::super::Foundation::PSTR, imagenamebuffersize: u32, imagenamesize: *mut u32, modulenamebuffer: super::super::super::Foundation::PSTR, modulenamebuffersize: u32, modulenamesize: *mut u32, loadedimagenamebuffer: super::super::super::Foundation::PSTR, loadedimagenamebuffersize: u32, loadedimagenamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetModuleNames(index, base, ::core::mem::transmute_copy(&imagenamebuffer), imagenamebuffersize, ::core::mem::transmute_copy(&imagenamesize), ::core::mem::transmute_copy(&modulenamebuffer), modulenamebuffersize, ::core::mem::transmute_copy(&modulenamesize), ::core::mem::transmute_copy(&loadedimagenamebuffer), loadedimagenamebuffersize, ::core::mem::transmute_copy(&loadedimagenamesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleParameters<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, bases: *const u64, start: u32, params: *mut DEBUG_MODULE_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetModuleParameters(count, bases, start, ::core::mem::transmute_copy(&params)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolModule<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PSTR, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolModule(&*(&symbol as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&base)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTypeName<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTypeName(module, typeid, ::core::mem::transmute_copy(&namebuffer), namebuffersize, ::core::mem::transmute_copy(&namesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTypeId<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, name: super::super::super::Foundation::PSTR, typeid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTypeId(module, &*(&name as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&typeid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTypeSize<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, size: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTypeSize(module, typeid, ::core::mem::transmute_copy(&size)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFieldOffset<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, field: super::super::super::Foundation::PSTR, offset: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetFieldOffset(module, typeid, &*(&field as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolTypeId<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PSTR, typeid: *mut u32, module: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolTypeId(&*(&symbol as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&module)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOffsetTypeId<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, typeid: *mut u32, module: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOffsetTypeId(offset, ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&module)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadTypedDataVirtual<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadTypedDataVirtual(offset, module, typeid, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&bytesread)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteTypedDataVirtual<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteTypedDataVirtual(offset, module, typeid, &*(&buffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), buffersize, ::core::mem::transmute_copy(&byteswritten)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputTypedDataVirtual<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputTypedDataVirtual(outputcontrol, offset, module, typeid, flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadTypedDataPhysical<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadTypedDataPhysical(offset, module, typeid, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&bytesread)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteTypedDataPhysical<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteTypedDataPhysical(offset, module, typeid, &*(&buffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), buffersize, ::core::mem::transmute_copy(&byteswritten)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputTypedDataPhysical<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputTypedDataPhysical(outputcontrol, offset, module, typeid, flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetScope<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME, scopecontext: *mut ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetScope(::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&scopeframe), ::core::mem::transmute_copy(&scopecontext), scopecontextsize) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetScope<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME, scopecontext: *const ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetScope(instructionoffset, &*(&scopeframe as *const <DEBUG_STACK_FRAME as ::windows::core::Abi>::Abi as *const <DEBUG_STACK_FRAME as ::windows::core::DefaultType>::DefaultType), &*(&scopecontext as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), scopecontextsize) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ResetScope<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ResetScope() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetScopeSymbolGroup<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, update: ::windows::core::RawPtr, symbols: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetScopeSymbolGroup(flags, &*(&update as *const <IDebugSymbolGroup as ::windows::core::Abi>::Abi as *const <IDebugSymbolGroup as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&symbols)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateSymbolGroup<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, group: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateSymbolGroup(::core::mem::transmute_copy(&group)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartSymbolMatch<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pattern: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).StartSymbolMatch(&*(&pattern as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNextSymbolMatch<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, buffer: super::super::super::Foundation::PSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNextSymbolMatch(handle, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&matchsize), ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndSymbolMatch<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EndSymbolMatch(handle) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Reload<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Reload(&*(&module as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolPath<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolPath(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&pathsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSymbolPath<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetSymbolPath(&*(&path as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AppendSymbolPath<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AppendSymbolPath(&*(&addition as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetImagePath<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetImagePath(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&pathsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetImagePath<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetImagePath(&*(&path as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AppendImagePath<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AppendImagePath(&*(&addition as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourcePath<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSourcePath(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&pathsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourcePathElement<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, elementsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSourcePathElement(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&elementsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSourcePath<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetSourcePath(&*(&path as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AppendSourcePath<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AppendSourcePath(&*(&addition as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FindSourceFile<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, startelement: u32, file: super::super::super::Foundation::PSTR, flags: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).FindSourceFile(startelement, &*(&file as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&foundelement), ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&foundsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourceFileLineOffsets<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSourceFileLineOffsets(&*(&file as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&buffer), bufferlines, ::core::mem::transmute_copy(&filelines)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleVersionInformation<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, base: u64, item: super::super::super::Foundation::PSTR, buffer: *mut ::core::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetModuleVersionInformation(index, base, &*(&item as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&verinfosize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleNameString<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, index: u32, base: u64, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetModuleNameString(which, index, base, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&namesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetConstantName<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, value: u64, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetConstantName(module, typeid, value, ::core::mem::transmute_copy(&namebuffer), namebuffersize, ::core::mem::transmute_copy(&namesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFieldName<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, fieldindex: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetFieldName(module, typeid, fieldindex, ::core::mem::transmute_copy(&namebuffer), namebuffersize, ::core::mem::transmute_copy(&namesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTypeOptions<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTypeOptions(::core::mem::transmute_copy(&options)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddTypeOptions<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddTypeOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveTypeOptions<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveTypeOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetTypeOptions<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetTypeOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNameByOffsetWide<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNameByOffsetWide(offset, ::core::mem::transmute_copy(&namebuffer), namebuffersize, ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOffsetByNameWide<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PWSTR, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOffsetByNameWide(&*(&symbol as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNearNameByOffsetWide<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNearNameByOffsetWide(offset, delta, ::core::mem::transmute_copy(&namebuffer), namebuffersize, ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLineByOffsetWide<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, line: *mut u32, filebuffer: super::super::super::Foundation::PWSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLineByOffsetWide(offset, ::core::mem::transmute_copy(&line), ::core::mem::transmute_copy(&filebuffer), filebuffersize, ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&displacement)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOffsetByLineWide<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, line: u32, file: super::super::super::Foundation::PWSTR, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOffsetByLineWide(line, &*(&file as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleByModuleNameWide<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PWSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetModuleByModuleNameWide(&*(&name as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), startindex, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolModuleWide<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PWSTR, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolModuleWide(&*(&symbol as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&base)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTypeNameWide<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTypeNameWide(module, typeid, ::core::mem::transmute_copy(&namebuffer), namebuffersize, ::core::mem::transmute_copy(&namesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTypeIdWide<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, name: super::super::super::Foundation::PWSTR, typeid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTypeIdWide(module, &*(&name as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&typeid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFieldOffsetWide<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, field: super::super::super::Foundation::PWSTR, offset: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetFieldOffsetWide(module, typeid, &*(&field as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolTypeIdWide<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PWSTR, typeid: *mut u32, module: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolTypeIdWide(&*(&symbol as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&module)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetScopeSymbolGroup2<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, update: ::windows::core::RawPtr, symbols: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetScopeSymbolGroup2(flags, &*(&update as *const <IDebugSymbolGroup2 as ::windows::core::Abi>::Abi as *const <IDebugSymbolGroup2 as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&symbols)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateSymbolGroup2<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, group: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateSymbolGroup2(::core::mem::transmute_copy(&group)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartSymbolMatchWide<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pattern: super::super::super::Foundation::PWSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).StartSymbolMatchWide(&*(&pattern as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNextSymbolMatchWide<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNextSymbolMatchWide(handle, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&matchsize), ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReloadWide<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReloadWide(&*(&module as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolPathWide<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolPathWide(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&pathsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSymbolPathWide<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetSymbolPathWide(&*(&path as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AppendSymbolPathWide<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AppendSymbolPathWide(&*(&addition as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetImagePathWide<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetImagePathWide(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&pathsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetImagePathWide<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetImagePathWide(&*(&path as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AppendImagePathWide<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AppendImagePathWide(&*(&addition as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourcePathWide<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSourcePathWide(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&pathsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourcePathElementWide<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, elementsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSourcePathElementWide(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&elementsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSourcePathWide<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetSourcePathWide(&*(&path as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AppendSourcePathWide<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AppendSourcePathWide(&*(&addition as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FindSourceFileWide<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, startelement: u32, file: super::super::super::Foundation::PWSTR, flags: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).FindSourceFileWide(startelement, &*(&file as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&foundelement), ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&foundsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourceFileLineOffsetsWide<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PWSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSourceFileLineOffsetsWide(&*(&file as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&buffer), bufferlines, ::core::mem::transmute_copy(&filelines)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleVersionInformationWide<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, base: u64, item: super::super::super::Foundation::PWSTR, buffer: *mut ::core::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetModuleVersionInformationWide(index, base, &*(&item as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&verinfosize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleNameStringWide<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, index: u32, base: u64, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetModuleNameStringWide(which, index, base, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&namesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetConstantNameWide<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, value: u64, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetConstantNameWide(module, typeid, value, ::core::mem::transmute_copy(&namebuffer), namebuffersize, ::core::mem::transmute_copy(&namesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFieldNameWide<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, fieldindex: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetFieldNameWide(module, typeid, fieldindex, ::core::mem::transmute_copy(&namebuffer), namebuffersize, ::core::mem::transmute_copy(&namesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsManagedModule<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, base: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).IsManagedModule(index, base) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleByModuleName2<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PSTR, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetModuleByModuleName2(&*(&name as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), startindex, flags, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleByModuleName2Wide<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PWSTR, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetModuleByModuleName2Wide(&*(&name as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), startindex, flags, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleByOffset2<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetModuleByOffset2(offset, startindex, flags, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddSyntheticModule<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, base: u64, size: u32, imagepath: super::super::super::Foundation::PSTR, modulename: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddSyntheticModule(base, size, &*(&imagepath as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), &*(&modulename as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddSyntheticModuleWide<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, base: u64, size: u32, imagepath: super::super::super::Foundation::PWSTR, modulename: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddSyntheticModuleWide(base, size, &*(&imagepath as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&modulename as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveSyntheticModule<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, base: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveSyntheticModule(base) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentScopeFrameIndex<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentScopeFrameIndex(::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetScopeFrameByIndex<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetScopeFrameByIndex(index) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetScopeFromJitDebugInfo<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, infooffset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetScopeFromJitDebugInfo(outputcontrol, infooffset) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetScopeFromStoredEvent<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetScopeFromStoredEvent() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputSymbolByOffset<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, offset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputSymbolByOffset(outputcontrol, flags, offset) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFunctionEntryByOffset<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bufferneeded: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetFunctionEntryByOffset(offset, flags, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&bufferneeded)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFieldTypeAndOffset<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, containertypeid: u32, field: super::super::super::Foundation::PSTR, fieldtypeid: *mut u32, offset: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetFieldTypeAndOffset(module, containertypeid, &*(&field as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&fieldtypeid), ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFieldTypeAndOffsetWide<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, containertypeid: u32, field: super::super::super::Foundation::PWSTR, fieldtypeid: *mut u32, offset: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetFieldTypeAndOffsetWide(module, containertypeid, &*(&field as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&fieldtypeid), ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddSyntheticSymbol<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, size: u32, name: super::super::super::Foundation::PSTR, flags: u32, id: *mut DEBUG_MODULE_AND_ID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddSyntheticSymbol(offset, size, &*(&name as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddSyntheticSymbolWide<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, size: u32, name: super::super::super::Foundation::PWSTR, flags: u32, id: *mut DEBUG_MODULE_AND_ID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddSyntheticSymbolWide(offset, size, &*(&name as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveSyntheticSymbol<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveSyntheticSymbol(&*(&id as *const <DEBUG_MODULE_AND_ID as ::windows::core::Abi>::Abi as *const <DEBUG_MODULE_AND_ID as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolEntriesByOffset<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, displacements: *mut u64, idscount: u32, entries: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolEntriesByOffset(offset, flags, ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&displacements), idscount, ::core::mem::transmute_copy(&entries)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolEntriesByName<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PSTR, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, idscount: u32, entries: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolEntriesByName(&*(&symbol as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&ids), idscount, ::core::mem::transmute_copy(&entries)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolEntriesByNameWide<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PWSTR, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, idscount: u32, entries: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolEntriesByNameWide(&*(&symbol as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&ids), idscount, ::core::mem::transmute_copy(&entries)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolEntryByToken<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, modulebase: u64, token: u32, id: *mut DEBUG_MODULE_AND_ID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolEntryByToken(modulebase, token, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolEntryInformation<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID, info: *mut DEBUG_SYMBOL_ENTRY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolEntryInformation(&*(&id as *const <DEBUG_MODULE_AND_ID as ::windows::core::Abi>::Abi as *const <DEBUG_MODULE_AND_ID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&info)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolEntryString<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolEntryString(&*(&id as *const <DEBUG_MODULE_AND_ID as ::windows::core::Abi>::Abi as *const <DEBUG_MODULE_AND_ID as ::windows::core::DefaultType>::DefaultType), which, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&stringsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolEntryStringWide<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolEntryStringWide(&*(&id as *const <DEBUG_MODULE_AND_ID as ::windows::core::Abi>::Abi as *const <DEBUG_MODULE_AND_ID as ::windows::core::DefaultType>::DefaultType), which, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&stringsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolEntryOffsetRegions<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID, flags: u32, regions: *mut DEBUG_OFFSET_REGION, regionscount: u32, regionsavail: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolEntryOffsetRegions(&*(&id as *const <DEBUG_MODULE_AND_ID as ::windows::core::Abi>::Abi as *const <DEBUG_MODULE_AND_ID as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&regions), regionscount, ::core::mem::transmute_copy(&regionsavail)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolEntryBySymbolEntry<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fromid: *const DEBUG_MODULE_AND_ID, flags: u32, toid: *mut DEBUG_MODULE_AND_ID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolEntryBySymbolEntry(&*(&fromid as *const <DEBUG_MODULE_AND_ID as ::windows::core::Abi>::Abi as *const <DEBUG_MODULE_AND_ID as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&toid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourceEntriesByOffset<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSourceEntriesByOffset(offset, flags, ::core::mem::transmute_copy(&entries), entriescount, ::core::mem::transmute_copy(&entriesavail)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourceEntriesByLine<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, line: u32, file: super::super::super::Foundation::PSTR, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSourceEntriesByLine(line, &*(&file as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&entries), entriescount, ::core::mem::transmute_copy(&entriesavail)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourceEntriesByLineWide<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, line: u32, file: super::super::super::Foundation::PWSTR, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSourceEntriesByLineWide(line, &*(&file as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&entries), entriescount, ::core::mem::transmute_copy(&entriesavail)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourceEntryString<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSourceEntryString(&*(&entry as *const <DEBUG_SYMBOL_SOURCE_ENTRY as ::windows::core::Abi>::Abi as *const <DEBUG_SYMBOL_SOURCE_ENTRY as ::windows::core::DefaultType>::DefaultType), which, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&stringsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourceEntryStringWide<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSourceEntryStringWide(&*(&entry as *const <DEBUG_SYMBOL_SOURCE_ENTRY as ::windows::core::Abi>::Abi as *const <DEBUG_SYMBOL_SOURCE_ENTRY as ::windows::core::DefaultType>::DefaultType), which, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&stringsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourceEntryOffsetRegions<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, flags: u32, regions: *mut DEBUG_OFFSET_REGION, regionscount: u32, regionsavail: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSourceEntryOffsetRegions(&*(&entry as *const <DEBUG_SYMBOL_SOURCE_ENTRY as ::windows::core::Abi>::Abi as *const <DEBUG_SYMBOL_SOURCE_ENTRY as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&regions), regionscount, ::core::mem::transmute_copy(&regionsavail)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourceEntryBySourceEntry<Impl: IDebugSymbols3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fromentry: *const DEBUG_SYMBOL_SOURCE_ENTRY, flags: u32, toentry: *mut DEBUG_SYMBOL_SOURCE_ENTRY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSourceEntryBySourceEntry(&*(&fromentry as *const <DEBUG_SYMBOL_SOURCE_ENTRY as ::windows::core::Abi>::Abi as *const <DEBUG_SYMBOL_SOURCE_ENTRY as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&toentry)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            base.0,
            base.1,
            base.2,
            base.3,
            ::windows::core::GetRuntimeClassName::<IDebugSymbols3>,
            base.5,
            GetSymbolOptions::<Impl, OFFSET>,
            AddSymbolOptions::<Impl, OFFSET>,
            RemoveSymbolOptions::<Impl, OFFSET>,
            SetSymbolOptions::<Impl, OFFSET>,
            GetNameByOffset::<Impl, OFFSET>,
            GetOffsetByName::<Impl, OFFSET>,
            GetNearNameByOffset::<Impl, OFFSET>,
            GetLineByOffset::<Impl, OFFSET>,
            GetOffsetByLine::<Impl, OFFSET>,
            GetNumberModules::<Impl, OFFSET>,
            GetModuleByIndex::<Impl, OFFSET>,
            GetModuleByModuleName::<Impl, OFFSET>,
            GetModuleByOffset::<Impl, OFFSET>,
            GetModuleNames::<Impl, OFFSET>,
            GetModuleParameters::<Impl, OFFSET>,
            GetSymbolModule::<Impl, OFFSET>,
            GetTypeName::<Impl, OFFSET>,
            GetTypeId::<Impl, OFFSET>,
            GetTypeSize::<Impl, OFFSET>,
            GetFieldOffset::<Impl, OFFSET>,
            GetSymbolTypeId::<Impl, OFFSET>,
            GetOffsetTypeId::<Impl, OFFSET>,
            ReadTypedDataVirtual::<Impl, OFFSET>,
            WriteTypedDataVirtual::<Impl, OFFSET>,
            OutputTypedDataVirtual::<Impl, OFFSET>,
            ReadTypedDataPhysical::<Impl, OFFSET>,
            WriteTypedDataPhysical::<Impl, OFFSET>,
            OutputTypedDataPhysical::<Impl, OFFSET>,
            GetScope::<Impl, OFFSET>,
            SetScope::<Impl, OFFSET>,
            ResetScope::<Impl, OFFSET>,
            GetScopeSymbolGroup::<Impl, OFFSET>,
            CreateSymbolGroup::<Impl, OFFSET>,
            StartSymbolMatch::<Impl, OFFSET>,
            GetNextSymbolMatch::<Impl, OFFSET>,
            EndSymbolMatch::<Impl, OFFSET>,
            Reload::<Impl, OFFSET>,
            GetSymbolPath::<Impl, OFFSET>,
            SetSymbolPath::<Impl, OFFSET>,
            AppendSymbolPath::<Impl, OFFSET>,
            GetImagePath::<Impl, OFFSET>,
            SetImagePath::<Impl, OFFSET>,
            AppendImagePath::<Impl, OFFSET>,
            GetSourcePath::<Impl, OFFSET>,
            GetSourcePathElement::<Impl, OFFSET>,
            SetSourcePath::<Impl, OFFSET>,
            AppendSourcePath::<Impl, OFFSET>,
            FindSourceFile::<Impl, OFFSET>,
            GetSourceFileLineOffsets::<Impl, OFFSET>,
            GetModuleVersionInformation::<Impl, OFFSET>,
            GetModuleNameString::<Impl, OFFSET>,
            GetConstantName::<Impl, OFFSET>,
            GetFieldName::<Impl, OFFSET>,
            GetTypeOptions::<Impl, OFFSET>,
            AddTypeOptions::<Impl, OFFSET>,
            RemoveTypeOptions::<Impl, OFFSET>,
            SetTypeOptions::<Impl, OFFSET>,
            GetNameByOffsetWide::<Impl, OFFSET>,
            GetOffsetByNameWide::<Impl, OFFSET>,
            GetNearNameByOffsetWide::<Impl, OFFSET>,
            GetLineByOffsetWide::<Impl, OFFSET>,
            GetOffsetByLineWide::<Impl, OFFSET>,
            GetModuleByModuleNameWide::<Impl, OFFSET>,
            GetSymbolModuleWide::<Impl, OFFSET>,
            GetTypeNameWide::<Impl, OFFSET>,
            GetTypeIdWide::<Impl, OFFSET>,
            GetFieldOffsetWide::<Impl, OFFSET>,
            GetSymbolTypeIdWide::<Impl, OFFSET>,
            GetScopeSymbolGroup2::<Impl, OFFSET>,
            CreateSymbolGroup2::<Impl, OFFSET>,
            StartSymbolMatchWide::<Impl, OFFSET>,
            GetNextSymbolMatchWide::<Impl, OFFSET>,
            ReloadWide::<Impl, OFFSET>,
            GetSymbolPathWide::<Impl, OFFSET>,
            SetSymbolPathWide::<Impl, OFFSET>,
            AppendSymbolPathWide::<Impl, OFFSET>,
            GetImagePathWide::<Impl, OFFSET>,
            SetImagePathWide::<Impl, OFFSET>,
            AppendImagePathWide::<Impl, OFFSET>,
            GetSourcePathWide::<Impl, OFFSET>,
            GetSourcePathElementWide::<Impl, OFFSET>,
            SetSourcePathWide::<Impl, OFFSET>,
            AppendSourcePathWide::<Impl, OFFSET>,
            FindSourceFileWide::<Impl, OFFSET>,
            GetSourceFileLineOffsetsWide::<Impl, OFFSET>,
            GetModuleVersionInformationWide::<Impl, OFFSET>,
            GetModuleNameStringWide::<Impl, OFFSET>,
            GetConstantNameWide::<Impl, OFFSET>,
            GetFieldNameWide::<Impl, OFFSET>,
            IsManagedModule::<Impl, OFFSET>,
            GetModuleByModuleName2::<Impl, OFFSET>,
            GetModuleByModuleName2Wide::<Impl, OFFSET>,
            GetModuleByOffset2::<Impl, OFFSET>,
            AddSyntheticModule::<Impl, OFFSET>,
            AddSyntheticModuleWide::<Impl, OFFSET>,
            RemoveSyntheticModule::<Impl, OFFSET>,
            GetCurrentScopeFrameIndex::<Impl, OFFSET>,
            SetScopeFrameByIndex::<Impl, OFFSET>,
            SetScopeFromJitDebugInfo::<Impl, OFFSET>,
            SetScopeFromStoredEvent::<Impl, OFFSET>,
            OutputSymbolByOffset::<Impl, OFFSET>,
            GetFunctionEntryByOffset::<Impl, OFFSET>,
            GetFieldTypeAndOffset::<Impl, OFFSET>,
            GetFieldTypeAndOffsetWide::<Impl, OFFSET>,
            AddSyntheticSymbol::<Impl, OFFSET>,
            AddSyntheticSymbolWide::<Impl, OFFSET>,
            RemoveSyntheticSymbol::<Impl, OFFSET>,
            GetSymbolEntriesByOffset::<Impl, OFFSET>,
            GetSymbolEntriesByName::<Impl, OFFSET>,
            GetSymbolEntriesByNameWide::<Impl, OFFSET>,
            GetSymbolEntryByToken::<Impl, OFFSET>,
            GetSymbolEntryInformation::<Impl, OFFSET>,
            GetSymbolEntryString::<Impl, OFFSET>,
            GetSymbolEntryStringWide::<Impl, OFFSET>,
            GetSymbolEntryOffsetRegions::<Impl, OFFSET>,
            GetSymbolEntryBySymbolEntry::<Impl, OFFSET>,
            GetSourceEntriesByOffset::<Impl, OFFSET>,
            GetSourceEntriesByLine::<Impl, OFFSET>,
            GetSourceEntriesByLineWide::<Impl, OFFSET>,
            GetSourceEntryString::<Impl, OFFSET>,
            GetSourceEntryStringWide::<Impl, OFFSET>,
            GetSourceEntryOffsetRegions::<Impl, OFFSET>,
            GetSourceEntryBySourceEntry::<Impl, OFFSET>,
        )
    }
}
pub trait IDebugSymbols4Impl: Sized {
    fn GetSymbolOptions();
    fn AddSymbolOptions();
    fn RemoveSymbolOptions();
    fn SetSymbolOptions();
    fn GetNameByOffset();
    fn GetOffsetByName();
    fn GetNearNameByOffset();
    fn GetLineByOffset();
    fn GetOffsetByLine();
    fn GetNumberModules();
    fn GetModuleByIndex();
    fn GetModuleByModuleName();
    fn GetModuleByOffset();
    fn GetModuleNames();
    fn GetModuleParameters();
    fn GetSymbolModule();
    fn GetTypeName();
    fn GetTypeId();
    fn GetTypeSize();
    fn GetFieldOffset();
    fn GetSymbolTypeId();
    fn GetOffsetTypeId();
    fn ReadTypedDataVirtual();
    fn WriteTypedDataVirtual();
    fn OutputTypedDataVirtual();
    fn ReadTypedDataPhysical();
    fn WriteTypedDataPhysical();
    fn OutputTypedDataPhysical();
    fn GetScope();
    fn SetScope();
    fn ResetScope();
    fn GetScopeSymbolGroup();
    fn CreateSymbolGroup();
    fn StartSymbolMatch();
    fn GetNextSymbolMatch();
    fn EndSymbolMatch();
    fn Reload();
    fn GetSymbolPath();
    fn SetSymbolPath();
    fn AppendSymbolPath();
    fn GetImagePath();
    fn SetImagePath();
    fn AppendImagePath();
    fn GetSourcePath();
    fn GetSourcePathElement();
    fn SetSourcePath();
    fn AppendSourcePath();
    fn FindSourceFile();
    fn GetSourceFileLineOffsets();
    fn GetModuleVersionInformation();
    fn GetModuleNameString();
    fn GetConstantName();
    fn GetFieldName();
    fn GetTypeOptions();
    fn AddTypeOptions();
    fn RemoveTypeOptions();
    fn SetTypeOptions();
    fn GetNameByOffsetWide();
    fn GetOffsetByNameWide();
    fn GetNearNameByOffsetWide();
    fn GetLineByOffsetWide();
    fn GetOffsetByLineWide();
    fn GetModuleByModuleNameWide();
    fn GetSymbolModuleWide();
    fn GetTypeNameWide();
    fn GetTypeIdWide();
    fn GetFieldOffsetWide();
    fn GetSymbolTypeIdWide();
    fn GetScopeSymbolGroup2();
    fn CreateSymbolGroup2();
    fn StartSymbolMatchWide();
    fn GetNextSymbolMatchWide();
    fn ReloadWide();
    fn GetSymbolPathWide();
    fn SetSymbolPathWide();
    fn AppendSymbolPathWide();
    fn GetImagePathWide();
    fn SetImagePathWide();
    fn AppendImagePathWide();
    fn GetSourcePathWide();
    fn GetSourcePathElementWide();
    fn SetSourcePathWide();
    fn AppendSourcePathWide();
    fn FindSourceFileWide();
    fn GetSourceFileLineOffsetsWide();
    fn GetModuleVersionInformationWide();
    fn GetModuleNameStringWide();
    fn GetConstantNameWide();
    fn GetFieldNameWide();
    fn IsManagedModule();
    fn GetModuleByModuleName2();
    fn GetModuleByModuleName2Wide();
    fn GetModuleByOffset2();
    fn AddSyntheticModule();
    fn AddSyntheticModuleWide();
    fn RemoveSyntheticModule();
    fn GetCurrentScopeFrameIndex();
    fn SetScopeFrameByIndex();
    fn SetScopeFromJitDebugInfo();
    fn SetScopeFromStoredEvent();
    fn OutputSymbolByOffset();
    fn GetFunctionEntryByOffset();
    fn GetFieldTypeAndOffset();
    fn GetFieldTypeAndOffsetWide();
    fn AddSyntheticSymbol();
    fn AddSyntheticSymbolWide();
    fn RemoveSyntheticSymbol();
    fn GetSymbolEntriesByOffset();
    fn GetSymbolEntriesByName();
    fn GetSymbolEntriesByNameWide();
    fn GetSymbolEntryByToken();
    fn GetSymbolEntryInformation();
    fn GetSymbolEntryString();
    fn GetSymbolEntryStringWide();
    fn GetSymbolEntryOffsetRegions();
    fn GetSymbolEntryBySymbolEntry();
    fn GetSourceEntriesByOffset();
    fn GetSourceEntriesByLine();
    fn GetSourceEntriesByLineWide();
    fn GetSourceEntryString();
    fn GetSourceEntryStringWide();
    fn GetSourceEntryOffsetRegions();
    fn GetSourceEntryBySourceEntry();
    fn GetScopeEx();
    fn SetScopeEx();
    fn GetNameByInlineContext();
    fn GetNameByInlineContextWide();
    fn GetLineByInlineContext();
    fn GetLineByInlineContextWide();
    fn OutputSymbolByInlineContext();
}
impl ::windows::core::RuntimeName for IDebugSymbols4 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugSymbols4";
}
impl IDebugSymbols4Vtbl {
    pub const fn new<Impl: IDebugSymbols4Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugSymbols4Vtbl {
        unsafe extern "system" fn GetSymbolOptions<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolOptions(::core::mem::transmute_copy(&options)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddSymbolOptions<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddSymbolOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveSymbolOptions<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveSymbolOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSymbolOptions<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetSymbolOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNameByOffset<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNameByOffset(offset, ::core::mem::transmute_copy(&namebuffer), namebuffersize, ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOffsetByName<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PSTR, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOffsetByName(&*(&symbol as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNearNameByOffset<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNearNameByOffset(offset, delta, ::core::mem::transmute_copy(&namebuffer), namebuffersize, ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLineByOffset<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, line: *mut u32, filebuffer: super::super::super::Foundation::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLineByOffset(offset, ::core::mem::transmute_copy(&line), ::core::mem::transmute_copy(&filebuffer), filebuffersize, ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&displacement)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOffsetByLine<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, line: u32, file: super::super::super::Foundation::PSTR, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOffsetByLine(line, &*(&file as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberModules<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, loaded: *mut u32, unloaded: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberModules(::core::mem::transmute_copy(&loaded), ::core::mem::transmute_copy(&unloaded)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleByIndex<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetModuleByIndex(index, ::core::mem::transmute_copy(&base)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleByModuleName<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetModuleByModuleName(&*(&name as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), startindex, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleByOffset<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetModuleByOffset(offset, startindex, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleNames<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, base: u64, imagenamebuffer: super::super::super::Foundation::PSTR, imagenamebuffersize: u32, imagenamesize: *mut u32, modulenamebuffer: super::super::super::Foundation::PSTR, modulenamebuffersize: u32, modulenamesize: *mut u32, loadedimagenamebuffer: super::super::super::Foundation::PSTR, loadedimagenamebuffersize: u32, loadedimagenamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetModuleNames(index, base, ::core::mem::transmute_copy(&imagenamebuffer), imagenamebuffersize, ::core::mem::transmute_copy(&imagenamesize), ::core::mem::transmute_copy(&modulenamebuffer), modulenamebuffersize, ::core::mem::transmute_copy(&modulenamesize), ::core::mem::transmute_copy(&loadedimagenamebuffer), loadedimagenamebuffersize, ::core::mem::transmute_copy(&loadedimagenamesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleParameters<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, bases: *const u64, start: u32, params: *mut DEBUG_MODULE_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetModuleParameters(count, bases, start, ::core::mem::transmute_copy(&params)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolModule<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PSTR, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolModule(&*(&symbol as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&base)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTypeName<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTypeName(module, typeid, ::core::mem::transmute_copy(&namebuffer), namebuffersize, ::core::mem::transmute_copy(&namesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTypeId<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, name: super::super::super::Foundation::PSTR, typeid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTypeId(module, &*(&name as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&typeid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTypeSize<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, size: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTypeSize(module, typeid, ::core::mem::transmute_copy(&size)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFieldOffset<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, field: super::super::super::Foundation::PSTR, offset: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetFieldOffset(module, typeid, &*(&field as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolTypeId<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PSTR, typeid: *mut u32, module: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolTypeId(&*(&symbol as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&module)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOffsetTypeId<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, typeid: *mut u32, module: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOffsetTypeId(offset, ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&module)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadTypedDataVirtual<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadTypedDataVirtual(offset, module, typeid, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&bytesread)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteTypedDataVirtual<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteTypedDataVirtual(offset, module, typeid, &*(&buffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), buffersize, ::core::mem::transmute_copy(&byteswritten)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputTypedDataVirtual<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputTypedDataVirtual(outputcontrol, offset, module, typeid, flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadTypedDataPhysical<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadTypedDataPhysical(offset, module, typeid, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&bytesread)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteTypedDataPhysical<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteTypedDataPhysical(offset, module, typeid, &*(&buffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), buffersize, ::core::mem::transmute_copy(&byteswritten)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputTypedDataPhysical<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputTypedDataPhysical(outputcontrol, offset, module, typeid, flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetScope<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME, scopecontext: *mut ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetScope(::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&scopeframe), ::core::mem::transmute_copy(&scopecontext), scopecontextsize) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetScope<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME, scopecontext: *const ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetScope(instructionoffset, &*(&scopeframe as *const <DEBUG_STACK_FRAME as ::windows::core::Abi>::Abi as *const <DEBUG_STACK_FRAME as ::windows::core::DefaultType>::DefaultType), &*(&scopecontext as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), scopecontextsize) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ResetScope<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ResetScope() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetScopeSymbolGroup<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, update: ::windows::core::RawPtr, symbols: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetScopeSymbolGroup(flags, &*(&update as *const <IDebugSymbolGroup as ::windows::core::Abi>::Abi as *const <IDebugSymbolGroup as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&symbols)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateSymbolGroup<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, group: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateSymbolGroup(::core::mem::transmute_copy(&group)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartSymbolMatch<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pattern: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).StartSymbolMatch(&*(&pattern as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNextSymbolMatch<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, buffer: super::super::super::Foundation::PSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNextSymbolMatch(handle, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&matchsize), ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndSymbolMatch<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EndSymbolMatch(handle) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Reload<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Reload(&*(&module as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolPath<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolPath(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&pathsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSymbolPath<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetSymbolPath(&*(&path as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AppendSymbolPath<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AppendSymbolPath(&*(&addition as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetImagePath<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetImagePath(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&pathsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetImagePath<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetImagePath(&*(&path as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AppendImagePath<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AppendImagePath(&*(&addition as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourcePath<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSourcePath(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&pathsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourcePathElement<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, elementsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSourcePathElement(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&elementsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSourcePath<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetSourcePath(&*(&path as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AppendSourcePath<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AppendSourcePath(&*(&addition as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FindSourceFile<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, startelement: u32, file: super::super::super::Foundation::PSTR, flags: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).FindSourceFile(startelement, &*(&file as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&foundelement), ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&foundsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourceFileLineOffsets<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSourceFileLineOffsets(&*(&file as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&buffer), bufferlines, ::core::mem::transmute_copy(&filelines)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleVersionInformation<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, base: u64, item: super::super::super::Foundation::PSTR, buffer: *mut ::core::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetModuleVersionInformation(index, base, &*(&item as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&verinfosize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleNameString<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, index: u32, base: u64, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetModuleNameString(which, index, base, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&namesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetConstantName<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, value: u64, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetConstantName(module, typeid, value, ::core::mem::transmute_copy(&namebuffer), namebuffersize, ::core::mem::transmute_copy(&namesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFieldName<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, fieldindex: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetFieldName(module, typeid, fieldindex, ::core::mem::transmute_copy(&namebuffer), namebuffersize, ::core::mem::transmute_copy(&namesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTypeOptions<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTypeOptions(::core::mem::transmute_copy(&options)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddTypeOptions<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddTypeOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveTypeOptions<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveTypeOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetTypeOptions<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetTypeOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNameByOffsetWide<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNameByOffsetWide(offset, ::core::mem::transmute_copy(&namebuffer), namebuffersize, ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOffsetByNameWide<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PWSTR, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOffsetByNameWide(&*(&symbol as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNearNameByOffsetWide<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNearNameByOffsetWide(offset, delta, ::core::mem::transmute_copy(&namebuffer), namebuffersize, ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLineByOffsetWide<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, line: *mut u32, filebuffer: super::super::super::Foundation::PWSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLineByOffsetWide(offset, ::core::mem::transmute_copy(&line), ::core::mem::transmute_copy(&filebuffer), filebuffersize, ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&displacement)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOffsetByLineWide<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, line: u32, file: super::super::super::Foundation::PWSTR, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOffsetByLineWide(line, &*(&file as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleByModuleNameWide<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PWSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetModuleByModuleNameWide(&*(&name as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), startindex, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolModuleWide<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PWSTR, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolModuleWide(&*(&symbol as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&base)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTypeNameWide<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTypeNameWide(module, typeid, ::core::mem::transmute_copy(&namebuffer), namebuffersize, ::core::mem::transmute_copy(&namesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTypeIdWide<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, name: super::super::super::Foundation::PWSTR, typeid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTypeIdWide(module, &*(&name as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&typeid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFieldOffsetWide<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, field: super::super::super::Foundation::PWSTR, offset: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetFieldOffsetWide(module, typeid, &*(&field as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolTypeIdWide<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PWSTR, typeid: *mut u32, module: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolTypeIdWide(&*(&symbol as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&module)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetScopeSymbolGroup2<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, update: ::windows::core::RawPtr, symbols: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetScopeSymbolGroup2(flags, &*(&update as *const <IDebugSymbolGroup2 as ::windows::core::Abi>::Abi as *const <IDebugSymbolGroup2 as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&symbols)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateSymbolGroup2<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, group: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateSymbolGroup2(::core::mem::transmute_copy(&group)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartSymbolMatchWide<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pattern: super::super::super::Foundation::PWSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).StartSymbolMatchWide(&*(&pattern as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNextSymbolMatchWide<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNextSymbolMatchWide(handle, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&matchsize), ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReloadWide<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReloadWide(&*(&module as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolPathWide<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolPathWide(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&pathsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSymbolPathWide<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetSymbolPathWide(&*(&path as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AppendSymbolPathWide<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AppendSymbolPathWide(&*(&addition as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetImagePathWide<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetImagePathWide(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&pathsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetImagePathWide<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetImagePathWide(&*(&path as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AppendImagePathWide<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AppendImagePathWide(&*(&addition as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourcePathWide<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSourcePathWide(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&pathsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourcePathElementWide<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, elementsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSourcePathElementWide(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&elementsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSourcePathWide<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetSourcePathWide(&*(&path as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AppendSourcePathWide<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AppendSourcePathWide(&*(&addition as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FindSourceFileWide<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, startelement: u32, file: super::super::super::Foundation::PWSTR, flags: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).FindSourceFileWide(startelement, &*(&file as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&foundelement), ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&foundsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourceFileLineOffsetsWide<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PWSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSourceFileLineOffsetsWide(&*(&file as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&buffer), bufferlines, ::core::mem::transmute_copy(&filelines)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleVersionInformationWide<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, base: u64, item: super::super::super::Foundation::PWSTR, buffer: *mut ::core::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetModuleVersionInformationWide(index, base, &*(&item as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&verinfosize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleNameStringWide<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, index: u32, base: u64, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetModuleNameStringWide(which, index, base, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&namesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetConstantNameWide<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, value: u64, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetConstantNameWide(module, typeid, value, ::core::mem::transmute_copy(&namebuffer), namebuffersize, ::core::mem::transmute_copy(&namesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFieldNameWide<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, fieldindex: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetFieldNameWide(module, typeid, fieldindex, ::core::mem::transmute_copy(&namebuffer), namebuffersize, ::core::mem::transmute_copy(&namesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsManagedModule<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, base: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).IsManagedModule(index, base) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleByModuleName2<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PSTR, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetModuleByModuleName2(&*(&name as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), startindex, flags, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleByModuleName2Wide<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PWSTR, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetModuleByModuleName2Wide(&*(&name as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), startindex, flags, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleByOffset2<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetModuleByOffset2(offset, startindex, flags, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddSyntheticModule<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, base: u64, size: u32, imagepath: super::super::super::Foundation::PSTR, modulename: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddSyntheticModule(base, size, &*(&imagepath as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), &*(&modulename as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddSyntheticModuleWide<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, base: u64, size: u32, imagepath: super::super::super::Foundation::PWSTR, modulename: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddSyntheticModuleWide(base, size, &*(&imagepath as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&modulename as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveSyntheticModule<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, base: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveSyntheticModule(base) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentScopeFrameIndex<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentScopeFrameIndex(::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetScopeFrameByIndex<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetScopeFrameByIndex(index) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetScopeFromJitDebugInfo<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, infooffset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetScopeFromJitDebugInfo(outputcontrol, infooffset) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetScopeFromStoredEvent<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetScopeFromStoredEvent() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputSymbolByOffset<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, offset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputSymbolByOffset(outputcontrol, flags, offset) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFunctionEntryByOffset<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bufferneeded: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetFunctionEntryByOffset(offset, flags, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&bufferneeded)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFieldTypeAndOffset<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, containertypeid: u32, field: super::super::super::Foundation::PSTR, fieldtypeid: *mut u32, offset: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetFieldTypeAndOffset(module, containertypeid, &*(&field as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&fieldtypeid), ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFieldTypeAndOffsetWide<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, containertypeid: u32, field: super::super::super::Foundation::PWSTR, fieldtypeid: *mut u32, offset: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetFieldTypeAndOffsetWide(module, containertypeid, &*(&field as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&fieldtypeid), ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddSyntheticSymbol<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, size: u32, name: super::super::super::Foundation::PSTR, flags: u32, id: *mut DEBUG_MODULE_AND_ID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddSyntheticSymbol(offset, size, &*(&name as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddSyntheticSymbolWide<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, size: u32, name: super::super::super::Foundation::PWSTR, flags: u32, id: *mut DEBUG_MODULE_AND_ID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddSyntheticSymbolWide(offset, size, &*(&name as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveSyntheticSymbol<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveSyntheticSymbol(&*(&id as *const <DEBUG_MODULE_AND_ID as ::windows::core::Abi>::Abi as *const <DEBUG_MODULE_AND_ID as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolEntriesByOffset<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, displacements: *mut u64, idscount: u32, entries: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolEntriesByOffset(offset, flags, ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&displacements), idscount, ::core::mem::transmute_copy(&entries)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolEntriesByName<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PSTR, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, idscount: u32, entries: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolEntriesByName(&*(&symbol as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&ids), idscount, ::core::mem::transmute_copy(&entries)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolEntriesByNameWide<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PWSTR, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, idscount: u32, entries: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolEntriesByNameWide(&*(&symbol as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&ids), idscount, ::core::mem::transmute_copy(&entries)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolEntryByToken<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, modulebase: u64, token: u32, id: *mut DEBUG_MODULE_AND_ID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolEntryByToken(modulebase, token, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolEntryInformation<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID, info: *mut DEBUG_SYMBOL_ENTRY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolEntryInformation(&*(&id as *const <DEBUG_MODULE_AND_ID as ::windows::core::Abi>::Abi as *const <DEBUG_MODULE_AND_ID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&info)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolEntryString<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolEntryString(&*(&id as *const <DEBUG_MODULE_AND_ID as ::windows::core::Abi>::Abi as *const <DEBUG_MODULE_AND_ID as ::windows::core::DefaultType>::DefaultType), which, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&stringsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolEntryStringWide<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolEntryStringWide(&*(&id as *const <DEBUG_MODULE_AND_ID as ::windows::core::Abi>::Abi as *const <DEBUG_MODULE_AND_ID as ::windows::core::DefaultType>::DefaultType), which, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&stringsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolEntryOffsetRegions<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID, flags: u32, regions: *mut DEBUG_OFFSET_REGION, regionscount: u32, regionsavail: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolEntryOffsetRegions(&*(&id as *const <DEBUG_MODULE_AND_ID as ::windows::core::Abi>::Abi as *const <DEBUG_MODULE_AND_ID as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&regions), regionscount, ::core::mem::transmute_copy(&regionsavail)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolEntryBySymbolEntry<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fromid: *const DEBUG_MODULE_AND_ID, flags: u32, toid: *mut DEBUG_MODULE_AND_ID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolEntryBySymbolEntry(&*(&fromid as *const <DEBUG_MODULE_AND_ID as ::windows::core::Abi>::Abi as *const <DEBUG_MODULE_AND_ID as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&toid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourceEntriesByOffset<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSourceEntriesByOffset(offset, flags, ::core::mem::transmute_copy(&entries), entriescount, ::core::mem::transmute_copy(&entriesavail)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourceEntriesByLine<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, line: u32, file: super::super::super::Foundation::PSTR, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSourceEntriesByLine(line, &*(&file as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&entries), entriescount, ::core::mem::transmute_copy(&entriesavail)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourceEntriesByLineWide<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, line: u32, file: super::super::super::Foundation::PWSTR, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSourceEntriesByLineWide(line, &*(&file as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&entries), entriescount, ::core::mem::transmute_copy(&entriesavail)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourceEntryString<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSourceEntryString(&*(&entry as *const <DEBUG_SYMBOL_SOURCE_ENTRY as ::windows::core::Abi>::Abi as *const <DEBUG_SYMBOL_SOURCE_ENTRY as ::windows::core::DefaultType>::DefaultType), which, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&stringsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourceEntryStringWide<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSourceEntryStringWide(&*(&entry as *const <DEBUG_SYMBOL_SOURCE_ENTRY as ::windows::core::Abi>::Abi as *const <DEBUG_SYMBOL_SOURCE_ENTRY as ::windows::core::DefaultType>::DefaultType), which, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&stringsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourceEntryOffsetRegions<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, flags: u32, regions: *mut DEBUG_OFFSET_REGION, regionscount: u32, regionsavail: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSourceEntryOffsetRegions(&*(&entry as *const <DEBUG_SYMBOL_SOURCE_ENTRY as ::windows::core::Abi>::Abi as *const <DEBUG_SYMBOL_SOURCE_ENTRY as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&regions), regionscount, ::core::mem::transmute_copy(&regionsavail)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourceEntryBySourceEntry<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fromentry: *const DEBUG_SYMBOL_SOURCE_ENTRY, flags: u32, toentry: *mut DEBUG_SYMBOL_SOURCE_ENTRY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSourceEntryBySourceEntry(&*(&fromentry as *const <DEBUG_SYMBOL_SOURCE_ENTRY as ::windows::core::Abi>::Abi as *const <DEBUG_SYMBOL_SOURCE_ENTRY as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&toentry)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetScopeEx<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME_EX, scopecontext: *mut ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetScopeEx(::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&scopeframe), ::core::mem::transmute_copy(&scopecontext), scopecontextsize) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetScopeEx<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME_EX, scopecontext: *const ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetScopeEx(instructionoffset, &*(&scopeframe as *const <DEBUG_STACK_FRAME_EX as ::windows::core::Abi>::Abi as *const <DEBUG_STACK_FRAME_EX as ::windows::core::DefaultType>::DefaultType), &*(&scopecontext as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), scopecontextsize) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNameByInlineContext<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, inlinecontext: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNameByInlineContext(offset, inlinecontext, ::core::mem::transmute_copy(&namebuffer), namebuffersize, ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNameByInlineContextWide<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, inlinecontext: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNameByInlineContextWide(offset, inlinecontext, ::core::mem::transmute_copy(&namebuffer), namebuffersize, ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLineByInlineContext<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, inlinecontext: u32, line: *mut u32, filebuffer: super::super::super::Foundation::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLineByInlineContext(offset, inlinecontext, ::core::mem::transmute_copy(&line), ::core::mem::transmute_copy(&filebuffer), filebuffersize, ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&displacement)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLineByInlineContextWide<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, inlinecontext: u32, line: *mut u32, filebuffer: super::super::super::Foundation::PWSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLineByInlineContextWide(offset, inlinecontext, ::core::mem::transmute_copy(&line), ::core::mem::transmute_copy(&filebuffer), filebuffersize, ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&displacement)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputSymbolByInlineContext<Impl: IDebugSymbols4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, offset: u64, inlinecontext: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputSymbolByInlineContext(outputcontrol, flags, offset, inlinecontext) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            base.0,
            base.1,
            base.2,
            base.3,
            ::windows::core::GetRuntimeClassName::<IDebugSymbols4>,
            base.5,
            GetSymbolOptions::<Impl, OFFSET>,
            AddSymbolOptions::<Impl, OFFSET>,
            RemoveSymbolOptions::<Impl, OFFSET>,
            SetSymbolOptions::<Impl, OFFSET>,
            GetNameByOffset::<Impl, OFFSET>,
            GetOffsetByName::<Impl, OFFSET>,
            GetNearNameByOffset::<Impl, OFFSET>,
            GetLineByOffset::<Impl, OFFSET>,
            GetOffsetByLine::<Impl, OFFSET>,
            GetNumberModules::<Impl, OFFSET>,
            GetModuleByIndex::<Impl, OFFSET>,
            GetModuleByModuleName::<Impl, OFFSET>,
            GetModuleByOffset::<Impl, OFFSET>,
            GetModuleNames::<Impl, OFFSET>,
            GetModuleParameters::<Impl, OFFSET>,
            GetSymbolModule::<Impl, OFFSET>,
            GetTypeName::<Impl, OFFSET>,
            GetTypeId::<Impl, OFFSET>,
            GetTypeSize::<Impl, OFFSET>,
            GetFieldOffset::<Impl, OFFSET>,
            GetSymbolTypeId::<Impl, OFFSET>,
            GetOffsetTypeId::<Impl, OFFSET>,
            ReadTypedDataVirtual::<Impl, OFFSET>,
            WriteTypedDataVirtual::<Impl, OFFSET>,
            OutputTypedDataVirtual::<Impl, OFFSET>,
            ReadTypedDataPhysical::<Impl, OFFSET>,
            WriteTypedDataPhysical::<Impl, OFFSET>,
            OutputTypedDataPhysical::<Impl, OFFSET>,
            GetScope::<Impl, OFFSET>,
            SetScope::<Impl, OFFSET>,
            ResetScope::<Impl, OFFSET>,
            GetScopeSymbolGroup::<Impl, OFFSET>,
            CreateSymbolGroup::<Impl, OFFSET>,
            StartSymbolMatch::<Impl, OFFSET>,
            GetNextSymbolMatch::<Impl, OFFSET>,
            EndSymbolMatch::<Impl, OFFSET>,
            Reload::<Impl, OFFSET>,
            GetSymbolPath::<Impl, OFFSET>,
            SetSymbolPath::<Impl, OFFSET>,
            AppendSymbolPath::<Impl, OFFSET>,
            GetImagePath::<Impl, OFFSET>,
            SetImagePath::<Impl, OFFSET>,
            AppendImagePath::<Impl, OFFSET>,
            GetSourcePath::<Impl, OFFSET>,
            GetSourcePathElement::<Impl, OFFSET>,
            SetSourcePath::<Impl, OFFSET>,
            AppendSourcePath::<Impl, OFFSET>,
            FindSourceFile::<Impl, OFFSET>,
            GetSourceFileLineOffsets::<Impl, OFFSET>,
            GetModuleVersionInformation::<Impl, OFFSET>,
            GetModuleNameString::<Impl, OFFSET>,
            GetConstantName::<Impl, OFFSET>,
            GetFieldName::<Impl, OFFSET>,
            GetTypeOptions::<Impl, OFFSET>,
            AddTypeOptions::<Impl, OFFSET>,
            RemoveTypeOptions::<Impl, OFFSET>,
            SetTypeOptions::<Impl, OFFSET>,
            GetNameByOffsetWide::<Impl, OFFSET>,
            GetOffsetByNameWide::<Impl, OFFSET>,
            GetNearNameByOffsetWide::<Impl, OFFSET>,
            GetLineByOffsetWide::<Impl, OFFSET>,
            GetOffsetByLineWide::<Impl, OFFSET>,
            GetModuleByModuleNameWide::<Impl, OFFSET>,
            GetSymbolModuleWide::<Impl, OFFSET>,
            GetTypeNameWide::<Impl, OFFSET>,
            GetTypeIdWide::<Impl, OFFSET>,
            GetFieldOffsetWide::<Impl, OFFSET>,
            GetSymbolTypeIdWide::<Impl, OFFSET>,
            GetScopeSymbolGroup2::<Impl, OFFSET>,
            CreateSymbolGroup2::<Impl, OFFSET>,
            StartSymbolMatchWide::<Impl, OFFSET>,
            GetNextSymbolMatchWide::<Impl, OFFSET>,
            ReloadWide::<Impl, OFFSET>,
            GetSymbolPathWide::<Impl, OFFSET>,
            SetSymbolPathWide::<Impl, OFFSET>,
            AppendSymbolPathWide::<Impl, OFFSET>,
            GetImagePathWide::<Impl, OFFSET>,
            SetImagePathWide::<Impl, OFFSET>,
            AppendImagePathWide::<Impl, OFFSET>,
            GetSourcePathWide::<Impl, OFFSET>,
            GetSourcePathElementWide::<Impl, OFFSET>,
            SetSourcePathWide::<Impl, OFFSET>,
            AppendSourcePathWide::<Impl, OFFSET>,
            FindSourceFileWide::<Impl, OFFSET>,
            GetSourceFileLineOffsetsWide::<Impl, OFFSET>,
            GetModuleVersionInformationWide::<Impl, OFFSET>,
            GetModuleNameStringWide::<Impl, OFFSET>,
            GetConstantNameWide::<Impl, OFFSET>,
            GetFieldNameWide::<Impl, OFFSET>,
            IsManagedModule::<Impl, OFFSET>,
            GetModuleByModuleName2::<Impl, OFFSET>,
            GetModuleByModuleName2Wide::<Impl, OFFSET>,
            GetModuleByOffset2::<Impl, OFFSET>,
            AddSyntheticModule::<Impl, OFFSET>,
            AddSyntheticModuleWide::<Impl, OFFSET>,
            RemoveSyntheticModule::<Impl, OFFSET>,
            GetCurrentScopeFrameIndex::<Impl, OFFSET>,
            SetScopeFrameByIndex::<Impl, OFFSET>,
            SetScopeFromJitDebugInfo::<Impl, OFFSET>,
            SetScopeFromStoredEvent::<Impl, OFFSET>,
            OutputSymbolByOffset::<Impl, OFFSET>,
            GetFunctionEntryByOffset::<Impl, OFFSET>,
            GetFieldTypeAndOffset::<Impl, OFFSET>,
            GetFieldTypeAndOffsetWide::<Impl, OFFSET>,
            AddSyntheticSymbol::<Impl, OFFSET>,
            AddSyntheticSymbolWide::<Impl, OFFSET>,
            RemoveSyntheticSymbol::<Impl, OFFSET>,
            GetSymbolEntriesByOffset::<Impl, OFFSET>,
            GetSymbolEntriesByName::<Impl, OFFSET>,
            GetSymbolEntriesByNameWide::<Impl, OFFSET>,
            GetSymbolEntryByToken::<Impl, OFFSET>,
            GetSymbolEntryInformation::<Impl, OFFSET>,
            GetSymbolEntryString::<Impl, OFFSET>,
            GetSymbolEntryStringWide::<Impl, OFFSET>,
            GetSymbolEntryOffsetRegions::<Impl, OFFSET>,
            GetSymbolEntryBySymbolEntry::<Impl, OFFSET>,
            GetSourceEntriesByOffset::<Impl, OFFSET>,
            GetSourceEntriesByLine::<Impl, OFFSET>,
            GetSourceEntriesByLineWide::<Impl, OFFSET>,
            GetSourceEntryString::<Impl, OFFSET>,
            GetSourceEntryStringWide::<Impl, OFFSET>,
            GetSourceEntryOffsetRegions::<Impl, OFFSET>,
            GetSourceEntryBySourceEntry::<Impl, OFFSET>,
            GetScopeEx::<Impl, OFFSET>,
            SetScopeEx::<Impl, OFFSET>,
            GetNameByInlineContext::<Impl, OFFSET>,
            GetNameByInlineContextWide::<Impl, OFFSET>,
            GetLineByInlineContext::<Impl, OFFSET>,
            GetLineByInlineContextWide::<Impl, OFFSET>,
            OutputSymbolByInlineContext::<Impl, OFFSET>,
        )
    }
}
pub trait IDebugSymbols5Impl: Sized {
    fn GetSymbolOptions();
    fn AddSymbolOptions();
    fn RemoveSymbolOptions();
    fn SetSymbolOptions();
    fn GetNameByOffset();
    fn GetOffsetByName();
    fn GetNearNameByOffset();
    fn GetLineByOffset();
    fn GetOffsetByLine();
    fn GetNumberModules();
    fn GetModuleByIndex();
    fn GetModuleByModuleName();
    fn GetModuleByOffset();
    fn GetModuleNames();
    fn GetModuleParameters();
    fn GetSymbolModule();
    fn GetTypeName();
    fn GetTypeId();
    fn GetTypeSize();
    fn GetFieldOffset();
    fn GetSymbolTypeId();
    fn GetOffsetTypeId();
    fn ReadTypedDataVirtual();
    fn WriteTypedDataVirtual();
    fn OutputTypedDataVirtual();
    fn ReadTypedDataPhysical();
    fn WriteTypedDataPhysical();
    fn OutputTypedDataPhysical();
    fn GetScope();
    fn SetScope();
    fn ResetScope();
    fn GetScopeSymbolGroup();
    fn CreateSymbolGroup();
    fn StartSymbolMatch();
    fn GetNextSymbolMatch();
    fn EndSymbolMatch();
    fn Reload();
    fn GetSymbolPath();
    fn SetSymbolPath();
    fn AppendSymbolPath();
    fn GetImagePath();
    fn SetImagePath();
    fn AppendImagePath();
    fn GetSourcePath();
    fn GetSourcePathElement();
    fn SetSourcePath();
    fn AppendSourcePath();
    fn FindSourceFile();
    fn GetSourceFileLineOffsets();
    fn GetModuleVersionInformation();
    fn GetModuleNameString();
    fn GetConstantName();
    fn GetFieldName();
    fn GetTypeOptions();
    fn AddTypeOptions();
    fn RemoveTypeOptions();
    fn SetTypeOptions();
    fn GetNameByOffsetWide();
    fn GetOffsetByNameWide();
    fn GetNearNameByOffsetWide();
    fn GetLineByOffsetWide();
    fn GetOffsetByLineWide();
    fn GetModuleByModuleNameWide();
    fn GetSymbolModuleWide();
    fn GetTypeNameWide();
    fn GetTypeIdWide();
    fn GetFieldOffsetWide();
    fn GetSymbolTypeIdWide();
    fn GetScopeSymbolGroup2();
    fn CreateSymbolGroup2();
    fn StartSymbolMatchWide();
    fn GetNextSymbolMatchWide();
    fn ReloadWide();
    fn GetSymbolPathWide();
    fn SetSymbolPathWide();
    fn AppendSymbolPathWide();
    fn GetImagePathWide();
    fn SetImagePathWide();
    fn AppendImagePathWide();
    fn GetSourcePathWide();
    fn GetSourcePathElementWide();
    fn SetSourcePathWide();
    fn AppendSourcePathWide();
    fn FindSourceFileWide();
    fn GetSourceFileLineOffsetsWide();
    fn GetModuleVersionInformationWide();
    fn GetModuleNameStringWide();
    fn GetConstantNameWide();
    fn GetFieldNameWide();
    fn IsManagedModule();
    fn GetModuleByModuleName2();
    fn GetModuleByModuleName2Wide();
    fn GetModuleByOffset2();
    fn AddSyntheticModule();
    fn AddSyntheticModuleWide();
    fn RemoveSyntheticModule();
    fn GetCurrentScopeFrameIndex();
    fn SetScopeFrameByIndex();
    fn SetScopeFromJitDebugInfo();
    fn SetScopeFromStoredEvent();
    fn OutputSymbolByOffset();
    fn GetFunctionEntryByOffset();
    fn GetFieldTypeAndOffset();
    fn GetFieldTypeAndOffsetWide();
    fn AddSyntheticSymbol();
    fn AddSyntheticSymbolWide();
    fn RemoveSyntheticSymbol();
    fn GetSymbolEntriesByOffset();
    fn GetSymbolEntriesByName();
    fn GetSymbolEntriesByNameWide();
    fn GetSymbolEntryByToken();
    fn GetSymbolEntryInformation();
    fn GetSymbolEntryString();
    fn GetSymbolEntryStringWide();
    fn GetSymbolEntryOffsetRegions();
    fn GetSymbolEntryBySymbolEntry();
    fn GetSourceEntriesByOffset();
    fn GetSourceEntriesByLine();
    fn GetSourceEntriesByLineWide();
    fn GetSourceEntryString();
    fn GetSourceEntryStringWide();
    fn GetSourceEntryOffsetRegions();
    fn GetSourceEntryBySourceEntry();
    fn GetScopeEx();
    fn SetScopeEx();
    fn GetNameByInlineContext();
    fn GetNameByInlineContextWide();
    fn GetLineByInlineContext();
    fn GetLineByInlineContextWide();
    fn OutputSymbolByInlineContext();
    fn GetCurrentScopeFrameIndexEx();
    fn SetScopeFrameByIndexEx();
}
impl ::windows::core::RuntimeName for IDebugSymbols5 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugSymbols5";
}
impl IDebugSymbols5Vtbl {
    pub const fn new<Impl: IDebugSymbols5Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugSymbols5Vtbl {
        unsafe extern "system" fn GetSymbolOptions<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolOptions(::core::mem::transmute_copy(&options)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddSymbolOptions<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddSymbolOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveSymbolOptions<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveSymbolOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSymbolOptions<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetSymbolOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNameByOffset<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNameByOffset(offset, ::core::mem::transmute_copy(&namebuffer), namebuffersize, ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOffsetByName<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PSTR, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOffsetByName(&*(&symbol as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNearNameByOffset<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNearNameByOffset(offset, delta, ::core::mem::transmute_copy(&namebuffer), namebuffersize, ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLineByOffset<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, line: *mut u32, filebuffer: super::super::super::Foundation::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLineByOffset(offset, ::core::mem::transmute_copy(&line), ::core::mem::transmute_copy(&filebuffer), filebuffersize, ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&displacement)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOffsetByLine<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, line: u32, file: super::super::super::Foundation::PSTR, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOffsetByLine(line, &*(&file as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberModules<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, loaded: *mut u32, unloaded: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberModules(::core::mem::transmute_copy(&loaded), ::core::mem::transmute_copy(&unloaded)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleByIndex<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetModuleByIndex(index, ::core::mem::transmute_copy(&base)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleByModuleName<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetModuleByModuleName(&*(&name as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), startindex, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleByOffset<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetModuleByOffset(offset, startindex, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleNames<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, base: u64, imagenamebuffer: super::super::super::Foundation::PSTR, imagenamebuffersize: u32, imagenamesize: *mut u32, modulenamebuffer: super::super::super::Foundation::PSTR, modulenamebuffersize: u32, modulenamesize: *mut u32, loadedimagenamebuffer: super::super::super::Foundation::PSTR, loadedimagenamebuffersize: u32, loadedimagenamesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetModuleNames(index, base, ::core::mem::transmute_copy(&imagenamebuffer), imagenamebuffersize, ::core::mem::transmute_copy(&imagenamesize), ::core::mem::transmute_copy(&modulenamebuffer), modulenamebuffersize, ::core::mem::transmute_copy(&modulenamesize), ::core::mem::transmute_copy(&loadedimagenamebuffer), loadedimagenamebuffersize, ::core::mem::transmute_copy(&loadedimagenamesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleParameters<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, bases: *const u64, start: u32, params: *mut DEBUG_MODULE_PARAMETERS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetModuleParameters(count, bases, start, ::core::mem::transmute_copy(&params)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolModule<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PSTR, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolModule(&*(&symbol as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&base)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTypeName<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTypeName(module, typeid, ::core::mem::transmute_copy(&namebuffer), namebuffersize, ::core::mem::transmute_copy(&namesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTypeId<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, name: super::super::super::Foundation::PSTR, typeid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTypeId(module, &*(&name as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&typeid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTypeSize<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, size: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTypeSize(module, typeid, ::core::mem::transmute_copy(&size)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFieldOffset<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, field: super::super::super::Foundation::PSTR, offset: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetFieldOffset(module, typeid, &*(&field as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolTypeId<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PSTR, typeid: *mut u32, module: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolTypeId(&*(&symbol as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&module)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOffsetTypeId<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, typeid: *mut u32, module: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOffsetTypeId(offset, ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&module)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadTypedDataVirtual<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadTypedDataVirtual(offset, module, typeid, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&bytesread)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteTypedDataVirtual<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteTypedDataVirtual(offset, module, typeid, &*(&buffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), buffersize, ::core::mem::transmute_copy(&byteswritten)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputTypedDataVirtual<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputTypedDataVirtual(outputcontrol, offset, module, typeid, flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadTypedDataPhysical<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadTypedDataPhysical(offset, module, typeid, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&bytesread)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteTypedDataPhysical<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteTypedDataPhysical(offset, module, typeid, &*(&buffer as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), buffersize, ::core::mem::transmute_copy(&byteswritten)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputTypedDataPhysical<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputTypedDataPhysical(outputcontrol, offset, module, typeid, flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetScope<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME, scopecontext: *mut ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetScope(::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&scopeframe), ::core::mem::transmute_copy(&scopecontext), scopecontextsize) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetScope<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME, scopecontext: *const ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetScope(instructionoffset, &*(&scopeframe as *const <DEBUG_STACK_FRAME as ::windows::core::Abi>::Abi as *const <DEBUG_STACK_FRAME as ::windows::core::DefaultType>::DefaultType), &*(&scopecontext as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), scopecontextsize) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ResetScope<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ResetScope() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetScopeSymbolGroup<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, update: ::windows::core::RawPtr, symbols: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetScopeSymbolGroup(flags, &*(&update as *const <IDebugSymbolGroup as ::windows::core::Abi>::Abi as *const <IDebugSymbolGroup as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&symbols)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateSymbolGroup<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, group: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateSymbolGroup(::core::mem::transmute_copy(&group)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartSymbolMatch<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pattern: super::super::super::Foundation::PSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).StartSymbolMatch(&*(&pattern as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNextSymbolMatch<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, buffer: super::super::super::Foundation::PSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNextSymbolMatch(handle, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&matchsize), ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndSymbolMatch<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EndSymbolMatch(handle) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Reload<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Reload(&*(&module as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolPath<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolPath(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&pathsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSymbolPath<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetSymbolPath(&*(&path as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AppendSymbolPath<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AppendSymbolPath(&*(&addition as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetImagePath<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetImagePath(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&pathsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetImagePath<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetImagePath(&*(&path as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AppendImagePath<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AppendImagePath(&*(&addition as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourcePath<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSourcePath(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&pathsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourcePathElement<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, elementsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSourcePathElement(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&elementsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSourcePath<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetSourcePath(&*(&path as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AppendSourcePath<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AppendSourcePath(&*(&addition as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FindSourceFile<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, startelement: u32, file: super::super::super::Foundation::PSTR, flags: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).FindSourceFile(startelement, &*(&file as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&foundelement), ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&foundsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourceFileLineOffsets<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSourceFileLineOffsets(&*(&file as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&buffer), bufferlines, ::core::mem::transmute_copy(&filelines)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleVersionInformation<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, base: u64, item: super::super::super::Foundation::PSTR, buffer: *mut ::core::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetModuleVersionInformation(index, base, &*(&item as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&verinfosize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleNameString<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, index: u32, base: u64, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetModuleNameString(which, index, base, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&namesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetConstantName<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, value: u64, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetConstantName(module, typeid, value, ::core::mem::transmute_copy(&namebuffer), namebuffersize, ::core::mem::transmute_copy(&namesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFieldName<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, fieldindex: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetFieldName(module, typeid, fieldindex, ::core::mem::transmute_copy(&namebuffer), namebuffersize, ::core::mem::transmute_copy(&namesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTypeOptions<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTypeOptions(::core::mem::transmute_copy(&options)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddTypeOptions<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddTypeOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveTypeOptions<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveTypeOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetTypeOptions<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetTypeOptions(options) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNameByOffsetWide<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNameByOffsetWide(offset, ::core::mem::transmute_copy(&namebuffer), namebuffersize, ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOffsetByNameWide<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PWSTR, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOffsetByNameWide(&*(&symbol as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNearNameByOffsetWide<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNearNameByOffsetWide(offset, delta, ::core::mem::transmute_copy(&namebuffer), namebuffersize, ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLineByOffsetWide<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, line: *mut u32, filebuffer: super::super::super::Foundation::PWSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLineByOffsetWide(offset, ::core::mem::transmute_copy(&line), ::core::mem::transmute_copy(&filebuffer), filebuffersize, ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&displacement)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOffsetByLineWide<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, line: u32, file: super::super::super::Foundation::PWSTR, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOffsetByLineWide(line, &*(&file as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleByModuleNameWide<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PWSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetModuleByModuleNameWide(&*(&name as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), startindex, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolModuleWide<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PWSTR, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolModuleWide(&*(&symbol as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&base)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTypeNameWide<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTypeNameWide(module, typeid, ::core::mem::transmute_copy(&namebuffer), namebuffersize, ::core::mem::transmute_copy(&namesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTypeIdWide<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, name: super::super::super::Foundation::PWSTR, typeid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTypeIdWide(module, &*(&name as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&typeid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFieldOffsetWide<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, field: super::super::super::Foundation::PWSTR, offset: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetFieldOffsetWide(module, typeid, &*(&field as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolTypeIdWide<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PWSTR, typeid: *mut u32, module: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolTypeIdWide(&*(&symbol as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&module)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetScopeSymbolGroup2<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, update: ::windows::core::RawPtr, symbols: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetScopeSymbolGroup2(flags, &*(&update as *const <IDebugSymbolGroup2 as ::windows::core::Abi>::Abi as *const <IDebugSymbolGroup2 as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&symbols)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateSymbolGroup2<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, group: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateSymbolGroup2(::core::mem::transmute_copy(&group)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StartSymbolMatchWide<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pattern: super::super::super::Foundation::PWSTR, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).StartSymbolMatchWide(&*(&pattern as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNextSymbolMatchWide<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNextSymbolMatchWide(handle, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&matchsize), ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReloadWide<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReloadWide(&*(&module as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolPathWide<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolPathWide(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&pathsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSymbolPathWide<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetSymbolPathWide(&*(&path as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AppendSymbolPathWide<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AppendSymbolPathWide(&*(&addition as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetImagePathWide<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetImagePathWide(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&pathsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetImagePathWide<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetImagePathWide(&*(&path as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AppendImagePathWide<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AppendImagePathWide(&*(&addition as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourcePathWide<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSourcePathWide(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&pathsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourcePathElementWide<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, elementsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSourcePathElementWide(index, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&elementsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSourcePathWide<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetSourcePathWide(&*(&path as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AppendSourcePathWide<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, addition: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AppendSourcePathWide(&*(&addition as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FindSourceFileWide<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, startelement: u32, file: super::super::super::Foundation::PWSTR, flags: u32, foundelement: *mut u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, foundsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).FindSourceFileWide(startelement, &*(&file as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&foundelement), ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&foundsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourceFileLineOffsetsWide<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: super::super::super::Foundation::PWSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSourceFileLineOffsetsWide(&*(&file as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&buffer), bufferlines, ::core::mem::transmute_copy(&filelines)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleVersionInformationWide<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, base: u64, item: super::super::super::Foundation::PWSTR, buffer: *mut ::core::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetModuleVersionInformationWide(index, base, &*(&item as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&verinfosize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleNameStringWide<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, index: u32, base: u64, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetModuleNameStringWide(which, index, base, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&namesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetConstantNameWide<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, value: u64, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetConstantNameWide(module, typeid, value, ::core::mem::transmute_copy(&namebuffer), namebuffersize, ::core::mem::transmute_copy(&namesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFieldNameWide<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, fieldindex: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetFieldNameWide(module, typeid, fieldindex, ::core::mem::transmute_copy(&namebuffer), namebuffersize, ::core::mem::transmute_copy(&namesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsManagedModule<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, base: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).IsManagedModule(index, base) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleByModuleName2<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PSTR, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetModuleByModuleName2(&*(&name as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), startindex, flags, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleByModuleName2Wide<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: super::super::super::Foundation::PWSTR, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetModuleByModuleName2Wide(&*(&name as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), startindex, flags, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetModuleByOffset2<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetModuleByOffset2(offset, startindex, flags, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddSyntheticModule<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, base: u64, size: u32, imagepath: super::super::super::Foundation::PSTR, modulename: super::super::super::Foundation::PSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddSyntheticModule(base, size, &*(&imagepath as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), &*(&modulename as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddSyntheticModuleWide<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, base: u64, size: u32, imagepath: super::super::super::Foundation::PWSTR, modulename: super::super::super::Foundation::PWSTR, flags: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddSyntheticModuleWide(base, size, &*(&imagepath as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&modulename as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), flags) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveSyntheticModule<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, base: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveSyntheticModule(base) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentScopeFrameIndex<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentScopeFrameIndex(::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetScopeFrameByIndex<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetScopeFrameByIndex(index) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetScopeFromJitDebugInfo<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, infooffset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetScopeFromJitDebugInfo(outputcontrol, infooffset) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetScopeFromStoredEvent<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetScopeFromStoredEvent() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputSymbolByOffset<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, offset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputSymbolByOffset(outputcontrol, flags, offset) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFunctionEntryByOffset<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bufferneeded: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetFunctionEntryByOffset(offset, flags, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&bufferneeded)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFieldTypeAndOffset<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, containertypeid: u32, field: super::super::super::Foundation::PSTR, fieldtypeid: *mut u32, offset: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetFieldTypeAndOffset(module, containertypeid, &*(&field as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&fieldtypeid), ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetFieldTypeAndOffsetWide<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, containertypeid: u32, field: super::super::super::Foundation::PWSTR, fieldtypeid: *mut u32, offset: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetFieldTypeAndOffsetWide(module, containertypeid, &*(&field as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&fieldtypeid), ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddSyntheticSymbol<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, size: u32, name: super::super::super::Foundation::PSTR, flags: u32, id: *mut DEBUG_MODULE_AND_ID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddSyntheticSymbol(offset, size, &*(&name as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddSyntheticSymbolWide<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, size: u32, name: super::super::super::Foundation::PWSTR, flags: u32, id: *mut DEBUG_MODULE_AND_ID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddSyntheticSymbolWide(offset, size, &*(&name as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveSyntheticSymbol<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveSyntheticSymbol(&*(&id as *const <DEBUG_MODULE_AND_ID as ::windows::core::Abi>::Abi as *const <DEBUG_MODULE_AND_ID as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolEntriesByOffset<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, displacements: *mut u64, idscount: u32, entries: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolEntriesByOffset(offset, flags, ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&displacements), idscount, ::core::mem::transmute_copy(&entries)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolEntriesByName<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PSTR, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, idscount: u32, entries: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolEntriesByName(&*(&symbol as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&ids), idscount, ::core::mem::transmute_copy(&entries)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolEntriesByNameWide<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: super::super::super::Foundation::PWSTR, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, idscount: u32, entries: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolEntriesByNameWide(&*(&symbol as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&ids), idscount, ::core::mem::transmute_copy(&entries)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolEntryByToken<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, modulebase: u64, token: u32, id: *mut DEBUG_MODULE_AND_ID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolEntryByToken(modulebase, token, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolEntryInformation<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID, info: *mut DEBUG_SYMBOL_ENTRY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolEntryInformation(&*(&id as *const <DEBUG_MODULE_AND_ID as ::windows::core::Abi>::Abi as *const <DEBUG_MODULE_AND_ID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&info)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolEntryString<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolEntryString(&*(&id as *const <DEBUG_MODULE_AND_ID as ::windows::core::Abi>::Abi as *const <DEBUG_MODULE_AND_ID as ::windows::core::DefaultType>::DefaultType), which, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&stringsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolEntryStringWide<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolEntryStringWide(&*(&id as *const <DEBUG_MODULE_AND_ID as ::windows::core::Abi>::Abi as *const <DEBUG_MODULE_AND_ID as ::windows::core::DefaultType>::DefaultType), which, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&stringsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolEntryOffsetRegions<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID, flags: u32, regions: *mut DEBUG_OFFSET_REGION, regionscount: u32, regionsavail: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolEntryOffsetRegions(&*(&id as *const <DEBUG_MODULE_AND_ID as ::windows::core::Abi>::Abi as *const <DEBUG_MODULE_AND_ID as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&regions), regionscount, ::core::mem::transmute_copy(&regionsavail)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSymbolEntryBySymbolEntry<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fromid: *const DEBUG_MODULE_AND_ID, flags: u32, toid: *mut DEBUG_MODULE_AND_ID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSymbolEntryBySymbolEntry(&*(&fromid as *const <DEBUG_MODULE_AND_ID as ::windows::core::Abi>::Abi as *const <DEBUG_MODULE_AND_ID as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&toid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourceEntriesByOffset<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSourceEntriesByOffset(offset, flags, ::core::mem::transmute_copy(&entries), entriescount, ::core::mem::transmute_copy(&entriesavail)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourceEntriesByLine<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, line: u32, file: super::super::super::Foundation::PSTR, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSourceEntriesByLine(line, &*(&file as *const <super::super::super::Foundation::PSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PSTR as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&entries), entriescount, ::core::mem::transmute_copy(&entriesavail)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourceEntriesByLineWide<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, line: u32, file: super::super::super::Foundation::PWSTR, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSourceEntriesByLineWide(line, &*(&file as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&entries), entriescount, ::core::mem::transmute_copy(&entriesavail)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourceEntryString<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, which: u32, buffer: super::super::super::Foundation::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSourceEntryString(&*(&entry as *const <DEBUG_SYMBOL_SOURCE_ENTRY as ::windows::core::Abi>::Abi as *const <DEBUG_SYMBOL_SOURCE_ENTRY as ::windows::core::DefaultType>::DefaultType), which, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&stringsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourceEntryStringWide<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, which: u32, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSourceEntryStringWide(&*(&entry as *const <DEBUG_SYMBOL_SOURCE_ENTRY as ::windows::core::Abi>::Abi as *const <DEBUG_SYMBOL_SOURCE_ENTRY as ::windows::core::DefaultType>::DefaultType), which, ::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&stringsize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourceEntryOffsetRegions<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, flags: u32, regions: *mut DEBUG_OFFSET_REGION, regionscount: u32, regionsavail: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSourceEntryOffsetRegions(&*(&entry as *const <DEBUG_SYMBOL_SOURCE_ENTRY as ::windows::core::Abi>::Abi as *const <DEBUG_SYMBOL_SOURCE_ENTRY as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&regions), regionscount, ::core::mem::transmute_copy(&regionsavail)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSourceEntryBySourceEntry<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fromentry: *const DEBUG_SYMBOL_SOURCE_ENTRY, flags: u32, toentry: *mut DEBUG_SYMBOL_SOURCE_ENTRY) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSourceEntryBySourceEntry(&*(&fromentry as *const <DEBUG_SYMBOL_SOURCE_ENTRY as ::windows::core::Abi>::Abi as *const <DEBUG_SYMBOL_SOURCE_ENTRY as ::windows::core::DefaultType>::DefaultType), flags, ::core::mem::transmute_copy(&toentry)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetScopeEx<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME_EX, scopecontext: *mut ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetScopeEx(::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&scopeframe), ::core::mem::transmute_copy(&scopecontext), scopecontextsize) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetScopeEx<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME_EX, scopecontext: *const ::core::ffi::c_void, scopecontextsize: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetScopeEx(instructionoffset, &*(&scopeframe as *const <DEBUG_STACK_FRAME_EX as ::windows::core::Abi>::Abi as *const <DEBUG_STACK_FRAME_EX as ::windows::core::DefaultType>::DefaultType), &*(&scopecontext as *const <::core::ffi::c_void as ::windows::core::Abi>::Abi as *const <::core::ffi::c_void as ::windows::core::DefaultType>::DefaultType), scopecontextsize) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNameByInlineContext<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, inlinecontext: u32, namebuffer: super::super::super::Foundation::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNameByInlineContext(offset, inlinecontext, ::core::mem::transmute_copy(&namebuffer), namebuffersize, ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNameByInlineContextWide<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, inlinecontext: u32, namebuffer: super::super::super::Foundation::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNameByInlineContextWide(offset, inlinecontext, ::core::mem::transmute_copy(&namebuffer), namebuffersize, ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLineByInlineContext<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, inlinecontext: u32, line: *mut u32, filebuffer: super::super::super::Foundation::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLineByInlineContext(offset, inlinecontext, ::core::mem::transmute_copy(&line), ::core::mem::transmute_copy(&filebuffer), filebuffersize, ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&displacement)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLineByInlineContextWide<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, inlinecontext: u32, line: *mut u32, filebuffer: super::super::super::Foundation::PWSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLineByInlineContextWide(offset, inlinecontext, ::core::mem::transmute_copy(&line), ::core::mem::transmute_copy(&filebuffer), filebuffersize, ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&displacement)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OutputSymbolByInlineContext<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, offset: u64, inlinecontext: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OutputSymbolByInlineContext(outputcontrol, flags, offset, inlinecontext) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentScopeFrameIndexEx<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, index: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentScopeFrameIndexEx(flags, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetScopeFrameByIndexEx<Impl: IDebugSymbols5Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, index: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetScopeFrameByIndexEx(flags, index) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            base.0,
            base.1,
            base.2,
            base.3,
            ::windows::core::GetRuntimeClassName::<IDebugSymbols5>,
            base.5,
            GetSymbolOptions::<Impl, OFFSET>,
            AddSymbolOptions::<Impl, OFFSET>,
            RemoveSymbolOptions::<Impl, OFFSET>,
            SetSymbolOptions::<Impl, OFFSET>,
            GetNameByOffset::<Impl, OFFSET>,
            GetOffsetByName::<Impl, OFFSET>,
            GetNearNameByOffset::<Impl, OFFSET>,
            GetLineByOffset::<Impl, OFFSET>,
            GetOffsetByLine::<Impl, OFFSET>,
            GetNumberModules::<Impl, OFFSET>,
            GetModuleByIndex::<Impl, OFFSET>,
            GetModuleByModuleName::<Impl, OFFSET>,
            GetModuleByOffset::<Impl, OFFSET>,
            GetModuleNames::<Impl, OFFSET>,
            GetModuleParameters::<Impl, OFFSET>,
            GetSymbolModule::<Impl, OFFSET>,
            GetTypeName::<Impl, OFFSET>,
            GetTypeId::<Impl, OFFSET>,
            GetTypeSize::<Impl, OFFSET>,
            GetFieldOffset::<Impl, OFFSET>,
            GetSymbolTypeId::<Impl, OFFSET>,
            GetOffsetTypeId::<Impl, OFFSET>,
            ReadTypedDataVirtual::<Impl, OFFSET>,
            WriteTypedDataVirtual::<Impl, OFFSET>,
            OutputTypedDataVirtual::<Impl, OFFSET>,
            ReadTypedDataPhysical::<Impl, OFFSET>,
            WriteTypedDataPhysical::<Impl, OFFSET>,
            OutputTypedDataPhysical::<Impl, OFFSET>,
            GetScope::<Impl, OFFSET>,
            SetScope::<Impl, OFFSET>,
            ResetScope::<Impl, OFFSET>,
            GetScopeSymbolGroup::<Impl, OFFSET>,
            CreateSymbolGroup::<Impl, OFFSET>,
            StartSymbolMatch::<Impl, OFFSET>,
            GetNextSymbolMatch::<Impl, OFFSET>,
            EndSymbolMatch::<Impl, OFFSET>,
            Reload::<Impl, OFFSET>,
            GetSymbolPath::<Impl, OFFSET>,
            SetSymbolPath::<Impl, OFFSET>,
            AppendSymbolPath::<Impl, OFFSET>,
            GetImagePath::<Impl, OFFSET>,
            SetImagePath::<Impl, OFFSET>,
            AppendImagePath::<Impl, OFFSET>,
            GetSourcePath::<Impl, OFFSET>,
            GetSourcePathElement::<Impl, OFFSET>,
            SetSourcePath::<Impl, OFFSET>,
            AppendSourcePath::<Impl, OFFSET>,
            FindSourceFile::<Impl, OFFSET>,
            GetSourceFileLineOffsets::<Impl, OFFSET>,
            GetModuleVersionInformation::<Impl, OFFSET>,
            GetModuleNameString::<Impl, OFFSET>,
            GetConstantName::<Impl, OFFSET>,
            GetFieldName::<Impl, OFFSET>,
            GetTypeOptions::<Impl, OFFSET>,
            AddTypeOptions::<Impl, OFFSET>,
            RemoveTypeOptions::<Impl, OFFSET>,
            SetTypeOptions::<Impl, OFFSET>,
            GetNameByOffsetWide::<Impl, OFFSET>,
            GetOffsetByNameWide::<Impl, OFFSET>,
            GetNearNameByOffsetWide::<Impl, OFFSET>,
            GetLineByOffsetWide::<Impl, OFFSET>,
            GetOffsetByLineWide::<Impl, OFFSET>,
            GetModuleByModuleNameWide::<Impl, OFFSET>,
            GetSymbolModuleWide::<Impl, OFFSET>,
            GetTypeNameWide::<Impl, OFFSET>,
            GetTypeIdWide::<Impl, OFFSET>,
            GetFieldOffsetWide::<Impl, OFFSET>,
            GetSymbolTypeIdWide::<Impl, OFFSET>,
            GetScopeSymbolGroup2::<Impl, OFFSET>,
            CreateSymbolGroup2::<Impl, OFFSET>,
            StartSymbolMatchWide::<Impl, OFFSET>,
            GetNextSymbolMatchWide::<Impl, OFFSET>,
            ReloadWide::<Impl, OFFSET>,
            GetSymbolPathWide::<Impl, OFFSET>,
            SetSymbolPathWide::<Impl, OFFSET>,
            AppendSymbolPathWide::<Impl, OFFSET>,
            GetImagePathWide::<Impl, OFFSET>,
            SetImagePathWide::<Impl, OFFSET>,
            AppendImagePathWide::<Impl, OFFSET>,
            GetSourcePathWide::<Impl, OFFSET>,
            GetSourcePathElementWide::<Impl, OFFSET>,
            SetSourcePathWide::<Impl, OFFSET>,
            AppendSourcePathWide::<Impl, OFFSET>,
            FindSourceFileWide::<Impl, OFFSET>,
            GetSourceFileLineOffsetsWide::<Impl, OFFSET>,
            GetModuleVersionInformationWide::<Impl, OFFSET>,
            GetModuleNameStringWide::<Impl, OFFSET>,
            GetConstantNameWide::<Impl, OFFSET>,
            GetFieldNameWide::<Impl, OFFSET>,
            IsManagedModule::<Impl, OFFSET>,
            GetModuleByModuleName2::<Impl, OFFSET>,
            GetModuleByModuleName2Wide::<Impl, OFFSET>,
            GetModuleByOffset2::<Impl, OFFSET>,
            AddSyntheticModule::<Impl, OFFSET>,
            AddSyntheticModuleWide::<Impl, OFFSET>,
            RemoveSyntheticModule::<Impl, OFFSET>,
            GetCurrentScopeFrameIndex::<Impl, OFFSET>,
            SetScopeFrameByIndex::<Impl, OFFSET>,
            SetScopeFromJitDebugInfo::<Impl, OFFSET>,
            SetScopeFromStoredEvent::<Impl, OFFSET>,
            OutputSymbolByOffset::<Impl, OFFSET>,
            GetFunctionEntryByOffset::<Impl, OFFSET>,
            GetFieldTypeAndOffset::<Impl, OFFSET>,
            GetFieldTypeAndOffsetWide::<Impl, OFFSET>,
            AddSyntheticSymbol::<Impl, OFFSET>,
            AddSyntheticSymbolWide::<Impl, OFFSET>,
            RemoveSyntheticSymbol::<Impl, OFFSET>,
            GetSymbolEntriesByOffset::<Impl, OFFSET>,
            GetSymbolEntriesByName::<Impl, OFFSET>,
            GetSymbolEntriesByNameWide::<Impl, OFFSET>,
            GetSymbolEntryByToken::<Impl, OFFSET>,
            GetSymbolEntryInformation::<Impl, OFFSET>,
            GetSymbolEntryString::<Impl, OFFSET>,
            GetSymbolEntryStringWide::<Impl, OFFSET>,
            GetSymbolEntryOffsetRegions::<Impl, OFFSET>,
            GetSymbolEntryBySymbolEntry::<Impl, OFFSET>,
            GetSourceEntriesByOffset::<Impl, OFFSET>,
            GetSourceEntriesByLine::<Impl, OFFSET>,
            GetSourceEntriesByLineWide::<Impl, OFFSET>,
            GetSourceEntryString::<Impl, OFFSET>,
            GetSourceEntryStringWide::<Impl, OFFSET>,
            GetSourceEntryOffsetRegions::<Impl, OFFSET>,
            GetSourceEntryBySourceEntry::<Impl, OFFSET>,
            GetScopeEx::<Impl, OFFSET>,
            SetScopeEx::<Impl, OFFSET>,
            GetNameByInlineContext::<Impl, OFFSET>,
            GetNameByInlineContextWide::<Impl, OFFSET>,
            GetLineByInlineContext::<Impl, OFFSET>,
            GetLineByInlineContextWide::<Impl, OFFSET>,
            OutputSymbolByInlineContext::<Impl, OFFSET>,
            GetCurrentScopeFrameIndexEx::<Impl, OFFSET>,
            SetScopeFrameByIndexEx::<Impl, OFFSET>,
        )
    }
}
pub trait IDebugSyncOperationImpl: Sized {
    fn GetTargetThread();
    fn Execute();
    fn InProgressAbort();
}
impl ::windows::core::RuntimeName for IDebugSyncOperation {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugSyncOperation";
}
impl IDebugSyncOperationVtbl {
    pub const fn new<Impl: IDebugSyncOperationImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugSyncOperationVtbl {
        unsafe extern "system" fn GetTargetThread<Impl: IDebugSyncOperationImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppattarget: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTargetThread(::core::mem::transmute_copy(&ppattarget)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Execute<Impl: IDebugSyncOperationImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppunkresult: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Execute(::core::mem::transmute_copy(&ppunkresult)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn InProgressAbort<Impl: IDebugSyncOperationImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).InProgressAbort() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugSyncOperation>, base.5, GetTargetThread::<Impl, OFFSET>, Execute::<Impl, OFFSET>, InProgressAbort::<Impl, OFFSET>)
    }
}
pub trait IDebugSystemObjectsImpl: Sized {
    fn GetEventThread();
    fn GetEventProcess();
    fn GetCurrentThreadId();
    fn SetCurrentThreadId();
    fn GetCurrentProcessId();
    fn SetCurrentProcessId();
    fn GetNumberThreads();
    fn GetTotalNumberThreads();
    fn GetThreadIdsByIndex();
    fn GetThreadIdByProcessor();
    fn GetCurrentThreadDataOffset();
    fn GetThreadIdByDataOffset();
    fn GetCurrentThreadTeb();
    fn GetThreadIdByTeb();
    fn GetCurrentThreadSystemId();
    fn GetThreadIdBySystemId();
    fn GetCurrentThreadHandle();
    fn GetThreadIdByHandle();
    fn GetNumberProcesses();
    fn GetProcessIdsByIndex();
    fn GetCurrentProcessDataOffset();
    fn GetProcessIdByDataOffset();
    fn GetCurrentProcessPeb();
    fn GetProcessIdByPeb();
    fn GetCurrentProcessSystemId();
    fn GetProcessIdBySystemId();
    fn GetCurrentProcessHandle();
    fn GetProcessIdByHandle();
    fn GetCurrentProcessExecutableName();
}
impl ::windows::core::RuntimeName for IDebugSystemObjects {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugSystemObjects";
}
impl IDebugSystemObjectsVtbl {
    pub const fn new<Impl: IDebugSystemObjectsImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugSystemObjectsVtbl {
        unsafe extern "system" fn GetEventThread<Impl: IDebugSystemObjectsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventThread(::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventProcess<Impl: IDebugSystemObjectsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventProcess(::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentThreadId<Impl: IDebugSystemObjectsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentThreadId(::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetCurrentThreadId<Impl: IDebugSystemObjectsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetCurrentThreadId(id) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentProcessId<Impl: IDebugSystemObjectsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentProcessId(::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetCurrentProcessId<Impl: IDebugSystemObjectsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetCurrentProcessId(id) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberThreads<Impl: IDebugSystemObjectsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberThreads(::core::mem::transmute_copy(&number)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTotalNumberThreads<Impl: IDebugSystemObjectsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, total: *mut u32, largestprocess: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTotalNumberThreads(::core::mem::transmute_copy(&total), ::core::mem::transmute_copy(&largestprocess)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetThreadIdsByIndex<Impl: IDebugSystemObjectsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetThreadIdsByIndex(start, count, ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&sysids)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetThreadIdByProcessor<Impl: IDebugSystemObjectsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, processor: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetThreadIdByProcessor(processor, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentThreadDataOffset<Impl: IDebugSystemObjectsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentThreadDataOffset(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetThreadIdByDataOffset<Impl: IDebugSystemObjectsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetThreadIdByDataOffset(offset, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentThreadTeb<Impl: IDebugSystemObjectsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentThreadTeb(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetThreadIdByTeb<Impl: IDebugSystemObjectsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetThreadIdByTeb(offset, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentThreadSystemId<Impl: IDebugSystemObjectsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sysid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentThreadSystemId(::core::mem::transmute_copy(&sysid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetThreadIdBySystemId<Impl: IDebugSystemObjectsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sysid: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetThreadIdBySystemId(sysid, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentThreadHandle<Impl: IDebugSystemObjectsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentThreadHandle(::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetThreadIdByHandle<Impl: IDebugSystemObjectsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetThreadIdByHandle(handle, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberProcesses<Impl: IDebugSystemObjectsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberProcesses(::core::mem::transmute_copy(&number)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessIdsByIndex<Impl: IDebugSystemObjectsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetProcessIdsByIndex(start, count, ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&sysids)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentProcessDataOffset<Impl: IDebugSystemObjectsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentProcessDataOffset(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessIdByDataOffset<Impl: IDebugSystemObjectsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetProcessIdByDataOffset(offset, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentProcessPeb<Impl: IDebugSystemObjectsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentProcessPeb(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessIdByPeb<Impl: IDebugSystemObjectsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetProcessIdByPeb(offset, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentProcessSystemId<Impl: IDebugSystemObjectsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sysid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentProcessSystemId(::core::mem::transmute_copy(&sysid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessIdBySystemId<Impl: IDebugSystemObjectsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sysid: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetProcessIdBySystemId(sysid, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentProcessHandle<Impl: IDebugSystemObjectsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentProcessHandle(::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessIdByHandle<Impl: IDebugSystemObjectsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetProcessIdByHandle(handle, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentProcessExecutableName<Impl: IDebugSystemObjectsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, exesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentProcessExecutableName(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&exesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            base.0,
            base.1,
            base.2,
            base.3,
            ::windows::core::GetRuntimeClassName::<IDebugSystemObjects>,
            base.5,
            GetEventThread::<Impl, OFFSET>,
            GetEventProcess::<Impl, OFFSET>,
            GetCurrentThreadId::<Impl, OFFSET>,
            SetCurrentThreadId::<Impl, OFFSET>,
            GetCurrentProcessId::<Impl, OFFSET>,
            SetCurrentProcessId::<Impl, OFFSET>,
            GetNumberThreads::<Impl, OFFSET>,
            GetTotalNumberThreads::<Impl, OFFSET>,
            GetThreadIdsByIndex::<Impl, OFFSET>,
            GetThreadIdByProcessor::<Impl, OFFSET>,
            GetCurrentThreadDataOffset::<Impl, OFFSET>,
            GetThreadIdByDataOffset::<Impl, OFFSET>,
            GetCurrentThreadTeb::<Impl, OFFSET>,
            GetThreadIdByTeb::<Impl, OFFSET>,
            GetCurrentThreadSystemId::<Impl, OFFSET>,
            GetThreadIdBySystemId::<Impl, OFFSET>,
            GetCurrentThreadHandle::<Impl, OFFSET>,
            GetThreadIdByHandle::<Impl, OFFSET>,
            GetNumberProcesses::<Impl, OFFSET>,
            GetProcessIdsByIndex::<Impl, OFFSET>,
            GetCurrentProcessDataOffset::<Impl, OFFSET>,
            GetProcessIdByDataOffset::<Impl, OFFSET>,
            GetCurrentProcessPeb::<Impl, OFFSET>,
            GetProcessIdByPeb::<Impl, OFFSET>,
            GetCurrentProcessSystemId::<Impl, OFFSET>,
            GetProcessIdBySystemId::<Impl, OFFSET>,
            GetCurrentProcessHandle::<Impl, OFFSET>,
            GetProcessIdByHandle::<Impl, OFFSET>,
            GetCurrentProcessExecutableName::<Impl, OFFSET>,
        )
    }
}
pub trait IDebugSystemObjects2Impl: Sized {
    fn GetEventThread();
    fn GetEventProcess();
    fn GetCurrentThreadId();
    fn SetCurrentThreadId();
    fn GetCurrentProcessId();
    fn SetCurrentProcessId();
    fn GetNumberThreads();
    fn GetTotalNumberThreads();
    fn GetThreadIdsByIndex();
    fn GetThreadIdByProcessor();
    fn GetCurrentThreadDataOffset();
    fn GetThreadIdByDataOffset();
    fn GetCurrentThreadTeb();
    fn GetThreadIdByTeb();
    fn GetCurrentThreadSystemId();
    fn GetThreadIdBySystemId();
    fn GetCurrentThreadHandle();
    fn GetThreadIdByHandle();
    fn GetNumberProcesses();
    fn GetProcessIdsByIndex();
    fn GetCurrentProcessDataOffset();
    fn GetProcessIdByDataOffset();
    fn GetCurrentProcessPeb();
    fn GetProcessIdByPeb();
    fn GetCurrentProcessSystemId();
    fn GetProcessIdBySystemId();
    fn GetCurrentProcessHandle();
    fn GetProcessIdByHandle();
    fn GetCurrentProcessExecutableName();
    fn GetCurrentProcessUpTime();
    fn GetImplicitThreadDataOffset();
    fn SetImplicitThreadDataOffset();
    fn GetImplicitProcessDataOffset();
    fn SetImplicitProcessDataOffset();
}
impl ::windows::core::RuntimeName for IDebugSystemObjects2 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugSystemObjects2";
}
impl IDebugSystemObjects2Vtbl {
    pub const fn new<Impl: IDebugSystemObjects2Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugSystemObjects2Vtbl {
        unsafe extern "system" fn GetEventThread<Impl: IDebugSystemObjects2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventThread(::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventProcess<Impl: IDebugSystemObjects2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventProcess(::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentThreadId<Impl: IDebugSystemObjects2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentThreadId(::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetCurrentThreadId<Impl: IDebugSystemObjects2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetCurrentThreadId(id) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentProcessId<Impl: IDebugSystemObjects2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentProcessId(::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetCurrentProcessId<Impl: IDebugSystemObjects2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetCurrentProcessId(id) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberThreads<Impl: IDebugSystemObjects2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberThreads(::core::mem::transmute_copy(&number)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTotalNumberThreads<Impl: IDebugSystemObjects2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, total: *mut u32, largestprocess: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTotalNumberThreads(::core::mem::transmute_copy(&total), ::core::mem::transmute_copy(&largestprocess)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetThreadIdsByIndex<Impl: IDebugSystemObjects2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetThreadIdsByIndex(start, count, ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&sysids)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetThreadIdByProcessor<Impl: IDebugSystemObjects2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, processor: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetThreadIdByProcessor(processor, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentThreadDataOffset<Impl: IDebugSystemObjects2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentThreadDataOffset(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetThreadIdByDataOffset<Impl: IDebugSystemObjects2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetThreadIdByDataOffset(offset, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentThreadTeb<Impl: IDebugSystemObjects2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentThreadTeb(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetThreadIdByTeb<Impl: IDebugSystemObjects2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetThreadIdByTeb(offset, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentThreadSystemId<Impl: IDebugSystemObjects2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sysid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentThreadSystemId(::core::mem::transmute_copy(&sysid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetThreadIdBySystemId<Impl: IDebugSystemObjects2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sysid: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetThreadIdBySystemId(sysid, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentThreadHandle<Impl: IDebugSystemObjects2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentThreadHandle(::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetThreadIdByHandle<Impl: IDebugSystemObjects2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetThreadIdByHandle(handle, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberProcesses<Impl: IDebugSystemObjects2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberProcesses(::core::mem::transmute_copy(&number)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessIdsByIndex<Impl: IDebugSystemObjects2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetProcessIdsByIndex(start, count, ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&sysids)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentProcessDataOffset<Impl: IDebugSystemObjects2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentProcessDataOffset(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessIdByDataOffset<Impl: IDebugSystemObjects2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetProcessIdByDataOffset(offset, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentProcessPeb<Impl: IDebugSystemObjects2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentProcessPeb(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessIdByPeb<Impl: IDebugSystemObjects2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetProcessIdByPeb(offset, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentProcessSystemId<Impl: IDebugSystemObjects2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sysid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentProcessSystemId(::core::mem::transmute_copy(&sysid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessIdBySystemId<Impl: IDebugSystemObjects2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sysid: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetProcessIdBySystemId(sysid, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentProcessHandle<Impl: IDebugSystemObjects2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentProcessHandle(::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessIdByHandle<Impl: IDebugSystemObjects2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetProcessIdByHandle(handle, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentProcessExecutableName<Impl: IDebugSystemObjects2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, exesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentProcessExecutableName(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&exesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentProcessUpTime<Impl: IDebugSystemObjects2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, uptime: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentProcessUpTime(::core::mem::transmute_copy(&uptime)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetImplicitThreadDataOffset<Impl: IDebugSystemObjects2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetImplicitThreadDataOffset(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetImplicitThreadDataOffset<Impl: IDebugSystemObjects2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetImplicitThreadDataOffset(offset) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetImplicitProcessDataOffset<Impl: IDebugSystemObjects2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetImplicitProcessDataOffset(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetImplicitProcessDataOffset<Impl: IDebugSystemObjects2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetImplicitProcessDataOffset(offset) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            base.0,
            base.1,
            base.2,
            base.3,
            ::windows::core::GetRuntimeClassName::<IDebugSystemObjects2>,
            base.5,
            GetEventThread::<Impl, OFFSET>,
            GetEventProcess::<Impl, OFFSET>,
            GetCurrentThreadId::<Impl, OFFSET>,
            SetCurrentThreadId::<Impl, OFFSET>,
            GetCurrentProcessId::<Impl, OFFSET>,
            SetCurrentProcessId::<Impl, OFFSET>,
            GetNumberThreads::<Impl, OFFSET>,
            GetTotalNumberThreads::<Impl, OFFSET>,
            GetThreadIdsByIndex::<Impl, OFFSET>,
            GetThreadIdByProcessor::<Impl, OFFSET>,
            GetCurrentThreadDataOffset::<Impl, OFFSET>,
            GetThreadIdByDataOffset::<Impl, OFFSET>,
            GetCurrentThreadTeb::<Impl, OFFSET>,
            GetThreadIdByTeb::<Impl, OFFSET>,
            GetCurrentThreadSystemId::<Impl, OFFSET>,
            GetThreadIdBySystemId::<Impl, OFFSET>,
            GetCurrentThreadHandle::<Impl, OFFSET>,
            GetThreadIdByHandle::<Impl, OFFSET>,
            GetNumberProcesses::<Impl, OFFSET>,
            GetProcessIdsByIndex::<Impl, OFFSET>,
            GetCurrentProcessDataOffset::<Impl, OFFSET>,
            GetProcessIdByDataOffset::<Impl, OFFSET>,
            GetCurrentProcessPeb::<Impl, OFFSET>,
            GetProcessIdByPeb::<Impl, OFFSET>,
            GetCurrentProcessSystemId::<Impl, OFFSET>,
            GetProcessIdBySystemId::<Impl, OFFSET>,
            GetCurrentProcessHandle::<Impl, OFFSET>,
            GetProcessIdByHandle::<Impl, OFFSET>,
            GetCurrentProcessExecutableName::<Impl, OFFSET>,
            GetCurrentProcessUpTime::<Impl, OFFSET>,
            GetImplicitThreadDataOffset::<Impl, OFFSET>,
            SetImplicitThreadDataOffset::<Impl, OFFSET>,
            GetImplicitProcessDataOffset::<Impl, OFFSET>,
            SetImplicitProcessDataOffset::<Impl, OFFSET>,
        )
    }
}
pub trait IDebugSystemObjects3Impl: Sized {
    fn GetEventThread();
    fn GetEventProcess();
    fn GetCurrentThreadId();
    fn SetCurrentThreadId();
    fn GetCurrentProcessId();
    fn SetCurrentProcessId();
    fn GetNumberThreads();
    fn GetTotalNumberThreads();
    fn GetThreadIdsByIndex();
    fn GetThreadIdByProcessor();
    fn GetCurrentThreadDataOffset();
    fn GetThreadIdByDataOffset();
    fn GetCurrentThreadTeb();
    fn GetThreadIdByTeb();
    fn GetCurrentThreadSystemId();
    fn GetThreadIdBySystemId();
    fn GetCurrentThreadHandle();
    fn GetThreadIdByHandle();
    fn GetNumberProcesses();
    fn GetProcessIdsByIndex();
    fn GetCurrentProcessDataOffset();
    fn GetProcessIdByDataOffset();
    fn GetCurrentProcessPeb();
    fn GetProcessIdByPeb();
    fn GetCurrentProcessSystemId();
    fn GetProcessIdBySystemId();
    fn GetCurrentProcessHandle();
    fn GetProcessIdByHandle();
    fn GetCurrentProcessExecutableName();
    fn GetCurrentProcessUpTime();
    fn GetImplicitThreadDataOffset();
    fn SetImplicitThreadDataOffset();
    fn GetImplicitProcessDataOffset();
    fn SetImplicitProcessDataOffset();
    fn GetEventSystem();
    fn GetCurrentSystemId();
    fn SetCurrentSystemId();
    fn GetNumberSystems();
    fn GetSystemIdsByIndex();
    fn GetTotalNumberThreadsAndProcesses();
    fn GetCurrentSystemServer();
    fn GetSystemByServer();
    fn GetCurrentSystemServerName();
}
impl ::windows::core::RuntimeName for IDebugSystemObjects3 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugSystemObjects3";
}
impl IDebugSystemObjects3Vtbl {
    pub const fn new<Impl: IDebugSystemObjects3Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugSystemObjects3Vtbl {
        unsafe extern "system" fn GetEventThread<Impl: IDebugSystemObjects3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventThread(::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventProcess<Impl: IDebugSystemObjects3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventProcess(::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentThreadId<Impl: IDebugSystemObjects3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentThreadId(::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetCurrentThreadId<Impl: IDebugSystemObjects3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetCurrentThreadId(id) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentProcessId<Impl: IDebugSystemObjects3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentProcessId(::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetCurrentProcessId<Impl: IDebugSystemObjects3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetCurrentProcessId(id) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberThreads<Impl: IDebugSystemObjects3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberThreads(::core::mem::transmute_copy(&number)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTotalNumberThreads<Impl: IDebugSystemObjects3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, total: *mut u32, largestprocess: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTotalNumberThreads(::core::mem::transmute_copy(&total), ::core::mem::transmute_copy(&largestprocess)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetThreadIdsByIndex<Impl: IDebugSystemObjects3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetThreadIdsByIndex(start, count, ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&sysids)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetThreadIdByProcessor<Impl: IDebugSystemObjects3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, processor: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetThreadIdByProcessor(processor, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentThreadDataOffset<Impl: IDebugSystemObjects3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentThreadDataOffset(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetThreadIdByDataOffset<Impl: IDebugSystemObjects3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetThreadIdByDataOffset(offset, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentThreadTeb<Impl: IDebugSystemObjects3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentThreadTeb(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetThreadIdByTeb<Impl: IDebugSystemObjects3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetThreadIdByTeb(offset, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentThreadSystemId<Impl: IDebugSystemObjects3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sysid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentThreadSystemId(::core::mem::transmute_copy(&sysid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetThreadIdBySystemId<Impl: IDebugSystemObjects3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sysid: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetThreadIdBySystemId(sysid, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentThreadHandle<Impl: IDebugSystemObjects3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentThreadHandle(::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetThreadIdByHandle<Impl: IDebugSystemObjects3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetThreadIdByHandle(handle, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberProcesses<Impl: IDebugSystemObjects3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberProcesses(::core::mem::transmute_copy(&number)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessIdsByIndex<Impl: IDebugSystemObjects3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetProcessIdsByIndex(start, count, ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&sysids)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentProcessDataOffset<Impl: IDebugSystemObjects3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentProcessDataOffset(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessIdByDataOffset<Impl: IDebugSystemObjects3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetProcessIdByDataOffset(offset, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentProcessPeb<Impl: IDebugSystemObjects3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentProcessPeb(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessIdByPeb<Impl: IDebugSystemObjects3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetProcessIdByPeb(offset, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentProcessSystemId<Impl: IDebugSystemObjects3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sysid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentProcessSystemId(::core::mem::transmute_copy(&sysid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessIdBySystemId<Impl: IDebugSystemObjects3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sysid: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetProcessIdBySystemId(sysid, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentProcessHandle<Impl: IDebugSystemObjects3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentProcessHandle(::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessIdByHandle<Impl: IDebugSystemObjects3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetProcessIdByHandle(handle, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentProcessExecutableName<Impl: IDebugSystemObjects3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, exesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentProcessExecutableName(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&exesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentProcessUpTime<Impl: IDebugSystemObjects3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, uptime: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentProcessUpTime(::core::mem::transmute_copy(&uptime)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetImplicitThreadDataOffset<Impl: IDebugSystemObjects3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetImplicitThreadDataOffset(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetImplicitThreadDataOffset<Impl: IDebugSystemObjects3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetImplicitThreadDataOffset(offset) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetImplicitProcessDataOffset<Impl: IDebugSystemObjects3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetImplicitProcessDataOffset(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetImplicitProcessDataOffset<Impl: IDebugSystemObjects3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetImplicitProcessDataOffset(offset) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventSystem<Impl: IDebugSystemObjects3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventSystem(::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentSystemId<Impl: IDebugSystemObjects3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentSystemId(::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetCurrentSystemId<Impl: IDebugSystemObjects3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetCurrentSystemId(id) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberSystems<Impl: IDebugSystemObjects3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberSystems(::core::mem::transmute_copy(&number)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSystemIdsByIndex<Impl: IDebugSystemObjects3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, ids: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSystemIdsByIndex(start, count, ::core::mem::transmute_copy(&ids)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTotalNumberThreadsAndProcesses<Impl: IDebugSystemObjects3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, totalthreads: *mut u32, totalprocesses: *mut u32, largestprocessthreads: *mut u32, largestsystemthreads: *mut u32, largestsystemprocesses: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTotalNumberThreadsAndProcesses(::core::mem::transmute_copy(&totalthreads), ::core::mem::transmute_copy(&totalprocesses), ::core::mem::transmute_copy(&largestprocessthreads), ::core::mem::transmute_copy(&largestsystemthreads), ::core::mem::transmute_copy(&largestsystemprocesses)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentSystemServer<Impl: IDebugSystemObjects3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentSystemServer(::core::mem::transmute_copy(&server)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSystemByServer<Impl: IDebugSystemObjects3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSystemByServer(server, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentSystemServerName<Impl: IDebugSystemObjects3Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentSystemServerName(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&namesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            base.0,
            base.1,
            base.2,
            base.3,
            ::windows::core::GetRuntimeClassName::<IDebugSystemObjects3>,
            base.5,
            GetEventThread::<Impl, OFFSET>,
            GetEventProcess::<Impl, OFFSET>,
            GetCurrentThreadId::<Impl, OFFSET>,
            SetCurrentThreadId::<Impl, OFFSET>,
            GetCurrentProcessId::<Impl, OFFSET>,
            SetCurrentProcessId::<Impl, OFFSET>,
            GetNumberThreads::<Impl, OFFSET>,
            GetTotalNumberThreads::<Impl, OFFSET>,
            GetThreadIdsByIndex::<Impl, OFFSET>,
            GetThreadIdByProcessor::<Impl, OFFSET>,
            GetCurrentThreadDataOffset::<Impl, OFFSET>,
            GetThreadIdByDataOffset::<Impl, OFFSET>,
            GetCurrentThreadTeb::<Impl, OFFSET>,
            GetThreadIdByTeb::<Impl, OFFSET>,
            GetCurrentThreadSystemId::<Impl, OFFSET>,
            GetThreadIdBySystemId::<Impl, OFFSET>,
            GetCurrentThreadHandle::<Impl, OFFSET>,
            GetThreadIdByHandle::<Impl, OFFSET>,
            GetNumberProcesses::<Impl, OFFSET>,
            GetProcessIdsByIndex::<Impl, OFFSET>,
            GetCurrentProcessDataOffset::<Impl, OFFSET>,
            GetProcessIdByDataOffset::<Impl, OFFSET>,
            GetCurrentProcessPeb::<Impl, OFFSET>,
            GetProcessIdByPeb::<Impl, OFFSET>,
            GetCurrentProcessSystemId::<Impl, OFFSET>,
            GetProcessIdBySystemId::<Impl, OFFSET>,
            GetCurrentProcessHandle::<Impl, OFFSET>,
            GetProcessIdByHandle::<Impl, OFFSET>,
            GetCurrentProcessExecutableName::<Impl, OFFSET>,
            GetCurrentProcessUpTime::<Impl, OFFSET>,
            GetImplicitThreadDataOffset::<Impl, OFFSET>,
            SetImplicitThreadDataOffset::<Impl, OFFSET>,
            GetImplicitProcessDataOffset::<Impl, OFFSET>,
            SetImplicitProcessDataOffset::<Impl, OFFSET>,
            GetEventSystem::<Impl, OFFSET>,
            GetCurrentSystemId::<Impl, OFFSET>,
            SetCurrentSystemId::<Impl, OFFSET>,
            GetNumberSystems::<Impl, OFFSET>,
            GetSystemIdsByIndex::<Impl, OFFSET>,
            GetTotalNumberThreadsAndProcesses::<Impl, OFFSET>,
            GetCurrentSystemServer::<Impl, OFFSET>,
            GetSystemByServer::<Impl, OFFSET>,
            GetCurrentSystemServerName::<Impl, OFFSET>,
        )
    }
}
pub trait IDebugSystemObjects4Impl: Sized {
    fn GetEventThread();
    fn GetEventProcess();
    fn GetCurrentThreadId();
    fn SetCurrentThreadId();
    fn GetCurrentProcessId();
    fn SetCurrentProcessId();
    fn GetNumberThreads();
    fn GetTotalNumberThreads();
    fn GetThreadIdsByIndex();
    fn GetThreadIdByProcessor();
    fn GetCurrentThreadDataOffset();
    fn GetThreadIdByDataOffset();
    fn GetCurrentThreadTeb();
    fn GetThreadIdByTeb();
    fn GetCurrentThreadSystemId();
    fn GetThreadIdBySystemId();
    fn GetCurrentThreadHandle();
    fn GetThreadIdByHandle();
    fn GetNumberProcesses();
    fn GetProcessIdsByIndex();
    fn GetCurrentProcessDataOffset();
    fn GetProcessIdByDataOffset();
    fn GetCurrentProcessPeb();
    fn GetProcessIdByPeb();
    fn GetCurrentProcessSystemId();
    fn GetProcessIdBySystemId();
    fn GetCurrentProcessHandle();
    fn GetProcessIdByHandle();
    fn GetCurrentProcessExecutableName();
    fn GetCurrentProcessUpTime();
    fn GetImplicitThreadDataOffset();
    fn SetImplicitThreadDataOffset();
    fn GetImplicitProcessDataOffset();
    fn SetImplicitProcessDataOffset();
    fn GetEventSystem();
    fn GetCurrentSystemId();
    fn SetCurrentSystemId();
    fn GetNumberSystems();
    fn GetSystemIdsByIndex();
    fn GetTotalNumberThreadsAndProcesses();
    fn GetCurrentSystemServer();
    fn GetSystemByServer();
    fn GetCurrentSystemServerName();
    fn GetCurrentProcessExecutableNameWide();
    fn GetCurrentSystemServerNameWide();
}
impl ::windows::core::RuntimeName for IDebugSystemObjects4 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugSystemObjects4";
}
impl IDebugSystemObjects4Vtbl {
    pub const fn new<Impl: IDebugSystemObjects4Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugSystemObjects4Vtbl {
        unsafe extern "system" fn GetEventThread<Impl: IDebugSystemObjects4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventThread(::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventProcess<Impl: IDebugSystemObjects4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventProcess(::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentThreadId<Impl: IDebugSystemObjects4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentThreadId(::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetCurrentThreadId<Impl: IDebugSystemObjects4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetCurrentThreadId(id) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentProcessId<Impl: IDebugSystemObjects4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentProcessId(::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetCurrentProcessId<Impl: IDebugSystemObjects4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetCurrentProcessId(id) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberThreads<Impl: IDebugSystemObjects4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberThreads(::core::mem::transmute_copy(&number)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTotalNumberThreads<Impl: IDebugSystemObjects4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, total: *mut u32, largestprocess: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTotalNumberThreads(::core::mem::transmute_copy(&total), ::core::mem::transmute_copy(&largestprocess)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetThreadIdsByIndex<Impl: IDebugSystemObjects4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetThreadIdsByIndex(start, count, ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&sysids)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetThreadIdByProcessor<Impl: IDebugSystemObjects4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, processor: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetThreadIdByProcessor(processor, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentThreadDataOffset<Impl: IDebugSystemObjects4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentThreadDataOffset(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetThreadIdByDataOffset<Impl: IDebugSystemObjects4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetThreadIdByDataOffset(offset, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentThreadTeb<Impl: IDebugSystemObjects4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentThreadTeb(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetThreadIdByTeb<Impl: IDebugSystemObjects4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetThreadIdByTeb(offset, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentThreadSystemId<Impl: IDebugSystemObjects4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sysid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentThreadSystemId(::core::mem::transmute_copy(&sysid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetThreadIdBySystemId<Impl: IDebugSystemObjects4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sysid: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetThreadIdBySystemId(sysid, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentThreadHandle<Impl: IDebugSystemObjects4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentThreadHandle(::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetThreadIdByHandle<Impl: IDebugSystemObjects4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetThreadIdByHandle(handle, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberProcesses<Impl: IDebugSystemObjects4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberProcesses(::core::mem::transmute_copy(&number)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessIdsByIndex<Impl: IDebugSystemObjects4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetProcessIdsByIndex(start, count, ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&sysids)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentProcessDataOffset<Impl: IDebugSystemObjects4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentProcessDataOffset(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessIdByDataOffset<Impl: IDebugSystemObjects4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetProcessIdByDataOffset(offset, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentProcessPeb<Impl: IDebugSystemObjects4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentProcessPeb(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessIdByPeb<Impl: IDebugSystemObjects4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetProcessIdByPeb(offset, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentProcessSystemId<Impl: IDebugSystemObjects4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sysid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentProcessSystemId(::core::mem::transmute_copy(&sysid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessIdBySystemId<Impl: IDebugSystemObjects4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sysid: u32, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetProcessIdBySystemId(sysid, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentProcessHandle<Impl: IDebugSystemObjects4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentProcessHandle(::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetProcessIdByHandle<Impl: IDebugSystemObjects4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetProcessIdByHandle(handle, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentProcessExecutableName<Impl: IDebugSystemObjects4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, exesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentProcessExecutableName(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&exesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentProcessUpTime<Impl: IDebugSystemObjects4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, uptime: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentProcessUpTime(::core::mem::transmute_copy(&uptime)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetImplicitThreadDataOffset<Impl: IDebugSystemObjects4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetImplicitThreadDataOffset(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetImplicitThreadDataOffset<Impl: IDebugSystemObjects4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetImplicitThreadDataOffset(offset) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetImplicitProcessDataOffset<Impl: IDebugSystemObjects4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetImplicitProcessDataOffset(::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetImplicitProcessDataOffset<Impl: IDebugSystemObjects4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetImplicitProcessDataOffset(offset) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventSystem<Impl: IDebugSystemObjects4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventSystem(::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentSystemId<Impl: IDebugSystemObjects4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentSystemId(::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetCurrentSystemId<Impl: IDebugSystemObjects4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetCurrentSystemId(id) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberSystems<Impl: IDebugSystemObjects4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberSystems(::core::mem::transmute_copy(&number)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSystemIdsByIndex<Impl: IDebugSystemObjects4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, ids: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSystemIdsByIndex(start, count, ::core::mem::transmute_copy(&ids)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTotalNumberThreadsAndProcesses<Impl: IDebugSystemObjects4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, totalthreads: *mut u32, totalprocesses: *mut u32, largestprocessthreads: *mut u32, largestsystemthreads: *mut u32, largestsystemprocesses: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTotalNumberThreadsAndProcesses(::core::mem::transmute_copy(&totalthreads), ::core::mem::transmute_copy(&totalprocesses), ::core::mem::transmute_copy(&largestprocessthreads), ::core::mem::transmute_copy(&largestsystemthreads), ::core::mem::transmute_copy(&largestsystemprocesses)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentSystemServer<Impl: IDebugSystemObjects4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentSystemServer(::core::mem::transmute_copy(&server)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSystemByServer<Impl: IDebugSystemObjects4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, id: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSystemByServer(server, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentSystemServerName<Impl: IDebugSystemObjects4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentSystemServerName(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&namesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentProcessExecutableNameWide<Impl: IDebugSystemObjects4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, exesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentProcessExecutableNameWide(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&exesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentSystemServerNameWide<Impl: IDebugSystemObjects4Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: super::super::super::Foundation::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentSystemServerNameWide(::core::mem::transmute_copy(&buffer), buffersize, ::core::mem::transmute_copy(&namesize)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            base.0,
            base.1,
            base.2,
            base.3,
            ::windows::core::GetRuntimeClassName::<IDebugSystemObjects4>,
            base.5,
            GetEventThread::<Impl, OFFSET>,
            GetEventProcess::<Impl, OFFSET>,
            GetCurrentThreadId::<Impl, OFFSET>,
            SetCurrentThreadId::<Impl, OFFSET>,
            GetCurrentProcessId::<Impl, OFFSET>,
            SetCurrentProcessId::<Impl, OFFSET>,
            GetNumberThreads::<Impl, OFFSET>,
            GetTotalNumberThreads::<Impl, OFFSET>,
            GetThreadIdsByIndex::<Impl, OFFSET>,
            GetThreadIdByProcessor::<Impl, OFFSET>,
            GetCurrentThreadDataOffset::<Impl, OFFSET>,
            GetThreadIdByDataOffset::<Impl, OFFSET>,
            GetCurrentThreadTeb::<Impl, OFFSET>,
            GetThreadIdByTeb::<Impl, OFFSET>,
            GetCurrentThreadSystemId::<Impl, OFFSET>,
            GetThreadIdBySystemId::<Impl, OFFSET>,
            GetCurrentThreadHandle::<Impl, OFFSET>,
            GetThreadIdByHandle::<Impl, OFFSET>,
            GetNumberProcesses::<Impl, OFFSET>,
            GetProcessIdsByIndex::<Impl, OFFSET>,
            GetCurrentProcessDataOffset::<Impl, OFFSET>,
            GetProcessIdByDataOffset::<Impl, OFFSET>,
            GetCurrentProcessPeb::<Impl, OFFSET>,
            GetProcessIdByPeb::<Impl, OFFSET>,
            GetCurrentProcessSystemId::<Impl, OFFSET>,
            GetProcessIdBySystemId::<Impl, OFFSET>,
            GetCurrentProcessHandle::<Impl, OFFSET>,
            GetProcessIdByHandle::<Impl, OFFSET>,
            GetCurrentProcessExecutableName::<Impl, OFFSET>,
            GetCurrentProcessUpTime::<Impl, OFFSET>,
            GetImplicitThreadDataOffset::<Impl, OFFSET>,
            SetImplicitThreadDataOffset::<Impl, OFFSET>,
            GetImplicitProcessDataOffset::<Impl, OFFSET>,
            SetImplicitProcessDataOffset::<Impl, OFFSET>,
            GetEventSystem::<Impl, OFFSET>,
            GetCurrentSystemId::<Impl, OFFSET>,
            SetCurrentSystemId::<Impl, OFFSET>,
            GetNumberSystems::<Impl, OFFSET>,
            GetSystemIdsByIndex::<Impl, OFFSET>,
            GetTotalNumberThreadsAndProcesses::<Impl, OFFSET>,
            GetCurrentSystemServer::<Impl, OFFSET>,
            GetSystemByServer::<Impl, OFFSET>,
            GetCurrentSystemServerName::<Impl, OFFSET>,
            GetCurrentProcessExecutableNameWide::<Impl, OFFSET>,
            GetCurrentSystemServerNameWide::<Impl, OFFSET>,
        )
    }
}
pub trait IDebugThreadCall32Impl: Sized {
    fn ThreadCallHandler();
}
impl ::windows::core::RuntimeName for IDebugThreadCall32 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugThreadCall32";
}
impl IDebugThreadCall32Vtbl {
    pub const fn new<Impl: IDebugThreadCall32Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugThreadCall32Vtbl {
        unsafe extern "system" fn ThreadCallHandler<Impl: IDebugThreadCall32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwparam1: u32, dwparam2: u32, dwparam3: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ThreadCallHandler(dwparam1, dwparam2, dwparam3) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugThreadCall32>, base.5, ThreadCallHandler::<Impl, OFFSET>)
    }
}
pub trait IDebugThreadCall64Impl: Sized {
    fn ThreadCallHandler();
}
impl ::windows::core::RuntimeName for IDebugThreadCall64 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDebugThreadCall64";
}
impl IDebugThreadCall64Vtbl {
    pub const fn new<Impl: IDebugThreadCall64Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDebugThreadCall64Vtbl {
        unsafe extern "system" fn ThreadCallHandler<Impl: IDebugThreadCall64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwparam1: u64, dwparam2: u64, dwparam3: u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ThreadCallHandler(dwparam1, dwparam2, dwparam3) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDebugThreadCall64>, base.5, ThreadCallHandler::<Impl, OFFSET>)
    }
}
pub trait IDynamicConceptProviderConceptImpl: Sized {
    fn GetConcept();
    fn SetConcept();
    fn NotifyParent();
    fn NotifyParentChange();
    fn NotifyDestruct();
}
impl ::windows::core::RuntimeName for IDynamicConceptProviderConcept {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDynamicConceptProviderConcept";
}
impl IDynamicConceptProviderConceptVtbl {
    pub const fn new<Impl: IDynamicConceptProviderConceptImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDynamicConceptProviderConceptVtbl {
        unsafe extern "system" fn GetConcept<Impl: IDynamicConceptProviderConceptImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, contextobject: ::windows::core::RawPtr, conceptid: *const ::windows::core::GUID, conceptinterface: *mut *mut ::core::ffi::c_void, conceptmetadata: *mut ::windows::core::RawPtr, hasconcept: *mut bool) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetConcept(&*(&contextobject as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType), &*(&conceptid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&conceptinterface), ::core::mem::transmute_copy(&conceptmetadata), ::core::mem::transmute_copy(&hasconcept)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetConcept<Impl: IDynamicConceptProviderConceptImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, contextobject: ::windows::core::RawPtr, conceptid: *const ::windows::core::GUID, conceptinterface: *mut ::core::ffi::c_void, conceptmetadata: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetConcept(
                &*(&contextobject as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType),
                &*(&conceptid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType),
                &*(&conceptinterface as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType),
                &*(&conceptmetadata as *const <IKeyStore as ::windows::core::Abi>::Abi as *const <IKeyStore as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn NotifyParent<Impl: IDynamicConceptProviderConceptImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, parentmodel: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).NotifyParent(&*(&parentmodel as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn NotifyParentChange<Impl: IDynamicConceptProviderConceptImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, parentmodel: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).NotifyParentChange(&*(&parentmodel as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn NotifyDestruct<Impl: IDynamicConceptProviderConceptImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).NotifyDestruct() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDynamicConceptProviderConcept>, base.5, GetConcept::<Impl, OFFSET>, SetConcept::<Impl, OFFSET>, NotifyParent::<Impl, OFFSET>, NotifyParentChange::<Impl, OFFSET>, NotifyDestruct::<Impl, OFFSET>)
    }
}
pub trait IDynamicKeyProviderConceptImpl: Sized {
    fn GetKey();
    fn SetKey();
    fn EnumerateKeys();
}
impl ::windows::core::RuntimeName for IDynamicKeyProviderConcept {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IDynamicKeyProviderConcept";
}
impl IDynamicKeyProviderConceptVtbl {
    pub const fn new<Impl: IDynamicKeyProviderConceptImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IDynamicKeyProviderConceptVtbl {
        unsafe extern "system" fn GetKey<Impl: IDynamicKeyProviderConceptImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, contextobject: ::windows::core::RawPtr, key: super::super::super::Foundation::PWSTR, keyvalue: *mut ::windows::core::RawPtr, metadata: *mut ::windows::core::RawPtr, haskey: *mut bool) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetKey(&*(&contextobject as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType), &*(&key as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&keyvalue), ::core::mem::transmute_copy(&metadata), ::core::mem::transmute_copy(&haskey)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetKey<Impl: IDynamicKeyProviderConceptImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, contextobject: ::windows::core::RawPtr, key: super::super::super::Foundation::PWSTR, keyvalue: ::windows::core::RawPtr, metadata: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetKey(
                &*(&contextobject as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType),
                &*(&key as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&keyvalue as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType),
                &*(&metadata as *const <IKeyStore as ::windows::core::Abi>::Abi as *const <IKeyStore as ::windows::core::DefaultType>::DefaultType),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumerateKeys<Impl: IDynamicKeyProviderConceptImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, contextobject: ::windows::core::RawPtr, ppenumerator: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EnumerateKeys(&*(&contextobject as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppenumerator)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IDynamicKeyProviderConcept>, base.5, GetKey::<Impl, OFFSET>, SetKey::<Impl, OFFSET>, EnumerateKeys::<Impl, OFFSET>)
    }
}
pub trait IEnumDebugApplicationNodesImpl: Sized {
    fn Next();
    fn Skip();
    fn Reset();
    fn Clone();
}
impl ::windows::core::RuntimeName for IEnumDebugApplicationNodes {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IEnumDebugApplicationNodes";
}
impl IEnumDebugApplicationNodesVtbl {
    pub const fn new<Impl: IEnumDebugApplicationNodesImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IEnumDebugApplicationNodesVtbl {
        unsafe extern "system" fn Next<Impl: IEnumDebugApplicationNodesImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32, pprddp: *mut ::windows::core::RawPtr, pceltfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Next(celt, ::core::mem::transmute_copy(&pprddp), ::core::mem::transmute_copy(&pceltfetched)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Skip<Impl: IEnumDebugApplicationNodesImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Skip(celt) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Reset<Impl: IEnumDebugApplicationNodesImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Reset() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Clone<Impl: IEnumDebugApplicationNodesImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pperddp: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Clone(::core::mem::transmute_copy(&pperddp)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IEnumDebugApplicationNodes>, base.5, Next::<Impl, OFFSET>, Skip::<Impl, OFFSET>, Reset::<Impl, OFFSET>, Clone::<Impl, OFFSET>)
    }
}
pub trait IEnumDebugCodeContextsImpl: Sized {
    fn Next();
    fn Skip();
    fn Reset();
    fn Clone();
}
impl ::windows::core::RuntimeName for IEnumDebugCodeContexts {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IEnumDebugCodeContexts";
}
impl IEnumDebugCodeContextsVtbl {
    pub const fn new<Impl: IEnumDebugCodeContextsImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IEnumDebugCodeContextsVtbl {
        unsafe extern "system" fn Next<Impl: IEnumDebugCodeContextsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32, pscc: *mut ::windows::core::RawPtr, pceltfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Next(celt, ::core::mem::transmute_copy(&pscc), ::core::mem::transmute_copy(&pceltfetched)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Skip<Impl: IEnumDebugCodeContextsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Skip(celt) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Reset<Impl: IEnumDebugCodeContextsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Reset() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Clone<Impl: IEnumDebugCodeContextsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppescc: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Clone(::core::mem::transmute_copy(&ppescc)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IEnumDebugCodeContexts>, base.5, Next::<Impl, OFFSET>, Skip::<Impl, OFFSET>, Reset::<Impl, OFFSET>, Clone::<Impl, OFFSET>)
    }
}
pub trait IEnumDebugExpressionContextsImpl: Sized {
    fn Next();
    fn Skip();
    fn Reset();
    fn Clone();
}
impl ::windows::core::RuntimeName for IEnumDebugExpressionContexts {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IEnumDebugExpressionContexts";
}
impl IEnumDebugExpressionContextsVtbl {
    pub const fn new<Impl: IEnumDebugExpressionContextsImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IEnumDebugExpressionContextsVtbl {
        unsafe extern "system" fn Next<Impl: IEnumDebugExpressionContextsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32, ppdec: *mut ::windows::core::RawPtr, pceltfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Next(celt, ::core::mem::transmute_copy(&ppdec), ::core::mem::transmute_copy(&pceltfetched)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Skip<Impl: IEnumDebugExpressionContextsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Skip(celt) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Reset<Impl: IEnumDebugExpressionContextsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Reset() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Clone<Impl: IEnumDebugExpressionContextsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppedec: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Clone(::core::mem::transmute_copy(&ppedec)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IEnumDebugExpressionContexts>, base.5, Next::<Impl, OFFSET>, Skip::<Impl, OFFSET>, Reset::<Impl, OFFSET>, Clone::<Impl, OFFSET>)
    }
}
pub trait IEnumDebugExtendedPropertyInfoImpl: Sized {
    fn Next();
    fn Skip();
    fn Reset();
    fn Clone();
    fn GetCount();
}
impl ::windows::core::RuntimeName for IEnumDebugExtendedPropertyInfo {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IEnumDebugExtendedPropertyInfo";
}
impl IEnumDebugExtendedPropertyInfoVtbl {
    pub const fn new<Impl: IEnumDebugExtendedPropertyInfoImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IEnumDebugExtendedPropertyInfoVtbl {
        unsafe extern "system" fn Next<Impl: IEnumDebugExtendedPropertyInfoImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32, rgextendedpropertyinfo: *mut ExtendedDebugPropertyInfo, pceltfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Next(celt, ::core::mem::transmute_copy(&rgextendedpropertyinfo), ::core::mem::transmute_copy(&pceltfetched)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Skip<Impl: IEnumDebugExtendedPropertyInfoImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Skip(celt) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Reset<Impl: IEnumDebugExtendedPropertyInfoImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Reset() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Clone<Impl: IEnumDebugExtendedPropertyInfoImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pedpe: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Clone(::core::mem::transmute_copy(&pedpe)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCount<Impl: IEnumDebugExtendedPropertyInfoImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcelt: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCount(::core::mem::transmute_copy(&pcelt)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IEnumDebugExtendedPropertyInfo>, base.5, Next::<Impl, OFFSET>, Skip::<Impl, OFFSET>, Reset::<Impl, OFFSET>, Clone::<Impl, OFFSET>, GetCount::<Impl, OFFSET>)
    }
}
pub trait IEnumDebugPropertyInfoImpl: Sized {
    fn Next();
    fn Skip();
    fn Reset();
    fn Clone();
    fn GetCount();
}
impl ::windows::core::RuntimeName for IEnumDebugPropertyInfo {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IEnumDebugPropertyInfo";
}
impl IEnumDebugPropertyInfoVtbl {
    pub const fn new<Impl: IEnumDebugPropertyInfoImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IEnumDebugPropertyInfoVtbl {
        unsafe extern "system" fn Next<Impl: IEnumDebugPropertyInfoImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32, pi: *mut DebugPropertyInfo, pceltsfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Next(celt, ::core::mem::transmute_copy(&pi), ::core::mem::transmute_copy(&pceltsfetched)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Skip<Impl: IEnumDebugPropertyInfoImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Skip(celt) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Reset<Impl: IEnumDebugPropertyInfoImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Reset() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Clone<Impl: IEnumDebugPropertyInfoImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppepi: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Clone(::core::mem::transmute_copy(&ppepi)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCount<Impl: IEnumDebugPropertyInfoImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcelt: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCount(::core::mem::transmute_copy(&pcelt)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IEnumDebugPropertyInfo>, base.5, Next::<Impl, OFFSET>, Skip::<Impl, OFFSET>, Reset::<Impl, OFFSET>, Clone::<Impl, OFFSET>, GetCount::<Impl, OFFSET>)
    }
}
pub trait IEnumDebugStackFramesImpl: Sized {
    fn Next();
    fn Skip();
    fn Reset();
    fn Clone();
}
impl ::windows::core::RuntimeName for IEnumDebugStackFrames {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IEnumDebugStackFrames";
}
impl IEnumDebugStackFramesVtbl {
    pub const fn new<Impl: IEnumDebugStackFramesImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IEnumDebugStackFramesVtbl {
        unsafe extern "system" fn Next<Impl: IEnumDebugStackFramesImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32, prgdsfd: *mut DebugStackFrameDescriptor, pceltfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Next(celt, ::core::mem::transmute_copy(&prgdsfd), ::core::mem::transmute_copy(&pceltfetched)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Skip<Impl: IEnumDebugStackFramesImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Skip(celt) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Reset<Impl: IEnumDebugStackFramesImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Reset() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Clone<Impl: IEnumDebugStackFramesImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppedsf: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Clone(::core::mem::transmute_copy(&ppedsf)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IEnumDebugStackFrames>, base.5, Next::<Impl, OFFSET>, Skip::<Impl, OFFSET>, Reset::<Impl, OFFSET>, Clone::<Impl, OFFSET>)
    }
}
pub trait IEnumDebugStackFrames64Impl: Sized + IEnumDebugStackFramesImpl {
    fn Next64();
}
impl ::windows::core::RuntimeName for IEnumDebugStackFrames64 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IEnumDebugStackFrames64";
}
impl IEnumDebugStackFrames64Vtbl {
    pub const fn new<Impl: IEnumDebugStackFrames64Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IEnumDebugStackFrames64Vtbl {
        unsafe extern "system" fn Next64<Impl: IEnumDebugStackFrames64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32, prgdsfd: *mut DebugStackFrameDescriptor64, pceltfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Next64(celt, ::core::mem::transmute_copy(&prgdsfd), ::core::mem::transmute_copy(&pceltfetched)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IEnumDebugStackFrames64>, base.5, Next64::<Impl, OFFSET>)
    }
}
pub trait IEnumJsStackFramesImpl: Sized {
    fn Next();
    fn Reset();
}
impl ::windows::core::RuntimeName for IEnumJsStackFrames {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IEnumJsStackFrames";
}
impl IEnumJsStackFramesVtbl {
    pub const fn new<Impl: IEnumJsStackFramesImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IEnumJsStackFramesVtbl {
        unsafe extern "system" fn Next<Impl: IEnumJsStackFramesImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, cframecount: u32, pframes: *mut __MIDL___MIDL_itf_jscript9diag_0000_0007_0001, pcfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Next(cframecount, ::core::mem::transmute_copy(&pframes), ::core::mem::transmute_copy(&pcfetched)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Reset<Impl: IEnumJsStackFramesImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Reset() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IEnumJsStackFrames>, base.5, Next::<Impl, OFFSET>, Reset::<Impl, OFFSET>)
    }
}
pub trait IEnumRemoteDebugApplicationThreadsImpl: Sized {
    fn Next();
    fn Skip();
    fn Reset();
    fn Clone();
}
impl ::windows::core::RuntimeName for IEnumRemoteDebugApplicationThreads {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IEnumRemoteDebugApplicationThreads";
}
impl IEnumRemoteDebugApplicationThreadsVtbl {
    pub const fn new<Impl: IEnumRemoteDebugApplicationThreadsImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IEnumRemoteDebugApplicationThreadsVtbl {
        unsafe extern "system" fn Next<Impl: IEnumRemoteDebugApplicationThreadsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32, pprdat: *mut ::windows::core::RawPtr, pceltfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Next(celt, ::core::mem::transmute_copy(&pprdat), ::core::mem::transmute_copy(&pceltfetched)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Skip<Impl: IEnumRemoteDebugApplicationThreadsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Skip(celt) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Reset<Impl: IEnumRemoteDebugApplicationThreadsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Reset() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Clone<Impl: IEnumRemoteDebugApplicationThreadsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pperdat: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Clone(::core::mem::transmute_copy(&pperdat)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IEnumRemoteDebugApplicationThreads>, base.5, Next::<Impl, OFFSET>, Skip::<Impl, OFFSET>, Reset::<Impl, OFFSET>, Clone::<Impl, OFFSET>)
    }
}
pub trait IEnumRemoteDebugApplicationsImpl: Sized {
    fn Next();
    fn Skip();
    fn Reset();
    fn Clone();
}
impl ::windows::core::RuntimeName for IEnumRemoteDebugApplications {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IEnumRemoteDebugApplications";
}
impl IEnumRemoteDebugApplicationsVtbl {
    pub const fn new<Impl: IEnumRemoteDebugApplicationsImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IEnumRemoteDebugApplicationsVtbl {
        unsafe extern "system" fn Next<Impl: IEnumRemoteDebugApplicationsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32, ppda: *mut ::windows::core::RawPtr, pceltfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Next(celt, ::core::mem::transmute_copy(&ppda), ::core::mem::transmute_copy(&pceltfetched)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Skip<Impl: IEnumRemoteDebugApplicationsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Skip(celt) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Reset<Impl: IEnumRemoteDebugApplicationsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Reset() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Clone<Impl: IEnumRemoteDebugApplicationsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppessd: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Clone(::core::mem::transmute_copy(&ppessd)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IEnumRemoteDebugApplications>, base.5, Next::<Impl, OFFSET>, Skip::<Impl, OFFSET>, Reset::<Impl, OFFSET>, Clone::<Impl, OFFSET>)
    }
}
pub trait IEquatableConceptImpl: Sized {
    fn AreObjectsEqual();
}
impl ::windows::core::RuntimeName for IEquatableConcept {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IEquatableConcept";
}
impl IEquatableConceptVtbl {
    pub const fn new<Impl: IEquatableConceptImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IEquatableConceptVtbl {
        unsafe extern "system" fn AreObjectsEqual<Impl: IEquatableConceptImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, contextobject: ::windows::core::RawPtr, otherobject: ::windows::core::RawPtr, isequal: *mut bool) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AreObjectsEqual(&*(&contextobject as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType), &*(&otherobject as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&isequal)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IEquatableConcept>, base.5, AreObjectsEqual::<Impl, OFFSET>)
    }
}
pub trait IHostDataModelAccessImpl: Sized {
    fn GetDataModel();
}
impl ::windows::core::RuntimeName for IHostDataModelAccess {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IHostDataModelAccess";
}
impl IHostDataModelAccessVtbl {
    pub const fn new<Impl: IHostDataModelAccessImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IHostDataModelAccessVtbl {
        unsafe extern "system" fn GetDataModel<Impl: IHostDataModelAccessImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, manager: *mut ::windows::core::RawPtr, host: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDataModel(::core::mem::transmute_copy(&manager), ::core::mem::transmute_copy(&host)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IHostDataModelAccess>, base.5, GetDataModel::<Impl, OFFSET>)
    }
}
pub trait IIndexableConceptImpl: Sized {
    fn GetDimensionality();
    fn GetAt();
    fn SetAt();
}
impl ::windows::core::RuntimeName for IIndexableConcept {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IIndexableConcept";
}
impl IIndexableConceptVtbl {
    pub const fn new<Impl: IIndexableConceptImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IIndexableConceptVtbl {
        unsafe extern "system" fn GetDimensionality<Impl: IIndexableConceptImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, contextobject: ::windows::core::RawPtr, dimensionality: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDimensionality(&*(&contextobject as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&dimensionality)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetAt<Impl: IIndexableConceptImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, contextobject: ::windows::core::RawPtr, indexercount: u64, indexers: *const ::windows::core::RawPtr, object: *mut ::windows::core::RawPtr, metadata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetAt(&*(&contextobject as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType), indexercount, &*(&indexers as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&object), ::core::mem::transmute_copy(&metadata)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetAt<Impl: IIndexableConceptImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, contextobject: ::windows::core::RawPtr, indexercount: u64, indexers: *const ::windows::core::RawPtr, value: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetAt(&*(&contextobject as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType), indexercount, &*(&indexers as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType), &*(&value as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IIndexableConcept>, base.5, GetDimensionality::<Impl, OFFSET>, GetAt::<Impl, OFFSET>, SetAt::<Impl, OFFSET>)
    }
}
pub trait IIterableConceptImpl: Sized {
    fn GetDefaultIndexDimensionality();
    fn GetIterator();
}
impl ::windows::core::RuntimeName for IIterableConcept {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IIterableConcept";
}
impl IIterableConceptVtbl {
    pub const fn new<Impl: IIterableConceptImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IIterableConceptVtbl {
        unsafe extern "system" fn GetDefaultIndexDimensionality<Impl: IIterableConceptImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, contextobject: ::windows::core::RawPtr, dimensionality: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDefaultIndexDimensionality(&*(&contextobject as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&dimensionality)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetIterator<Impl: IIterableConceptImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, contextobject: ::windows::core::RawPtr, iterator: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetIterator(&*(&contextobject as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&iterator)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IIterableConcept>, base.5, GetDefaultIndexDimensionality::<Impl, OFFSET>, GetIterator::<Impl, OFFSET>)
    }
}
pub trait IJsDebugImpl: Sized {
    fn OpenVirtualProcess();
}
impl ::windows::core::RuntimeName for IJsDebug {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IJsDebug";
}
impl IJsDebugVtbl {
    pub const fn new<Impl: IJsDebugImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IJsDebugVtbl {
        unsafe extern "system" fn OpenVirtualProcess<Impl: IJsDebugImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, processid: u32, runtimejsbaseaddress: u64, pdatatarget: ::windows::core::RawPtr, ppprocess: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OpenVirtualProcess(processid, runtimejsbaseaddress, &*(&pdatatarget as *const <IJsDebugDataTarget as ::windows::core::Abi>::Abi as *const <IJsDebugDataTarget as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppprocess)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IJsDebug>, base.5, OpenVirtualProcess::<Impl, OFFSET>)
    }
}
pub trait IJsDebugBreakPointImpl: Sized {
    fn IsEnabled();
    fn Enable();
    fn Disable();
    fn Delete();
    fn GetDocumentPosition();
}
impl ::windows::core::RuntimeName for IJsDebugBreakPoint {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IJsDebugBreakPoint";
}
impl IJsDebugBreakPointVtbl {
    pub const fn new<Impl: IJsDebugBreakPointImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IJsDebugBreakPointVtbl {
        unsafe extern "system" fn IsEnabled<Impl: IJsDebugBreakPointImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pisenabled: *mut super::super::super::Foundation::BOOL) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).IsEnabled(::core::mem::transmute_copy(&pisenabled)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Enable<Impl: IJsDebugBreakPointImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Enable() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Disable<Impl: IJsDebugBreakPointImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Disable() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Delete<Impl: IJsDebugBreakPointImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Delete() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDocumentPosition<Impl: IJsDebugBreakPointImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdocumentid: *mut u64, pcharacteroffset: *mut u32, pstatementcharcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDocumentPosition(::core::mem::transmute_copy(&pdocumentid), ::core::mem::transmute_copy(&pcharacteroffset), ::core::mem::transmute_copy(&pstatementcharcount)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IJsDebugBreakPoint>, base.5, IsEnabled::<Impl, OFFSET>, Enable::<Impl, OFFSET>, Disable::<Impl, OFFSET>, Delete::<Impl, OFFSET>, GetDocumentPosition::<Impl, OFFSET>)
    }
}
pub trait IJsDebugDataTargetImpl: Sized {
    fn ReadMemory();
    fn WriteMemory();
    fn AllocateVirtualMemory();
    fn FreeVirtualMemory();
    fn GetTlsValue();
    fn ReadBSTR();
    fn ReadNullTerminatedString();
    fn CreateStackFrameEnumerator();
    fn GetThreadContext();
}
impl ::windows::core::RuntimeName for IJsDebugDataTarget {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IJsDebugDataTarget";
}
impl IJsDebugDataTargetVtbl {
    pub const fn new<Impl: IJsDebugDataTargetImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IJsDebugDataTargetVtbl {
        unsafe extern "system" fn ReadMemory<Impl: IJsDebugDataTargetImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, address: u64, flags: JsDebugReadMemoryFlags, pbuffer: *mut u8, size: u32, pbytesread: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadMemory(address, flags, ::core::mem::transmute_copy(&pbuffer), size, ::core::mem::transmute_copy(&pbytesread)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WriteMemory<Impl: IJsDebugDataTargetImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, address: u64, pmemory: *const u8, size: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).WriteMemory(address, pmemory, size) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AllocateVirtualMemory<Impl: IJsDebugDataTargetImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, address: u64, size: u32, allocationtype: u32, pageprotection: u32, pallocatedaddress: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AllocateVirtualMemory(address, size, allocationtype, pageprotection, ::core::mem::transmute_copy(&pallocatedaddress)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn FreeVirtualMemory<Impl: IJsDebugDataTargetImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, address: u64, size: u32, freetype: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).FreeVirtualMemory(address, size, freetype) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTlsValue<Impl: IJsDebugDataTargetImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, threadid: u32, tlsindex: u32, pvalue: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTlsValue(threadid, tlsindex, ::core::mem::transmute_copy(&pvalue)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadBSTR<Impl: IJsDebugDataTargetImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, address: u64, pstring: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadBSTR(address, ::core::mem::transmute_copy(&pstring)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReadNullTerminatedString<Impl: IJsDebugDataTargetImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, address: u64, charactersize: u16, maxcharacters: u32, pstring: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ReadNullTerminatedString(address, charactersize, maxcharacters, ::core::mem::transmute_copy(&pstring)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateStackFrameEnumerator<Impl: IJsDebugDataTargetImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, threadid: u32, ppenumerator: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateStackFrameEnumerator(threadid, ::core::mem::transmute_copy(&ppenumerator)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetThreadContext<Impl: IJsDebugDataTargetImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, threadid: u32, contextflags: u32, contextsize: u32, pcontext: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetThreadContext(threadid, contextflags, contextsize, ::core::mem::transmute_copy(&pcontext)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IJsDebugDataTarget>, base.5, ReadMemory::<Impl, OFFSET>, WriteMemory::<Impl, OFFSET>, AllocateVirtualMemory::<Impl, OFFSET>, FreeVirtualMemory::<Impl, OFFSET>, GetTlsValue::<Impl, OFFSET>, ReadBSTR::<Impl, OFFSET>, ReadNullTerminatedString::<Impl, OFFSET>, CreateStackFrameEnumerator::<Impl, OFFSET>, GetThreadContext::<Impl, OFFSET>)
    }
}
pub trait IJsDebugFrameImpl: Sized {
    fn GetStackRange();
    fn GetName();
    fn GetDocumentPositionWithId();
    fn GetDocumentPositionWithName();
    fn GetDebugProperty();
    fn GetReturnAddress();
    fn Evaluate();
}
impl ::windows::core::RuntimeName for IJsDebugFrame {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IJsDebugFrame";
}
impl IJsDebugFrameVtbl {
    pub const fn new<Impl: IJsDebugFrameImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IJsDebugFrameVtbl {
        unsafe extern "system" fn GetStackRange<Impl: IJsDebugFrameImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstart: *mut u64, pend: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetStackRange(::core::mem::transmute_copy(&pstart), ::core::mem::transmute_copy(&pend)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetName<Impl: IJsDebugFrameImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pname: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetName(::core::mem::transmute_copy(&pname)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDocumentPositionWithId<Impl: IJsDebugFrameImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdocumentid: *mut u64, pcharacteroffset: *mut u32, pstatementcharcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDocumentPositionWithId(::core::mem::transmute_copy(&pdocumentid), ::core::mem::transmute_copy(&pcharacteroffset), ::core::mem::transmute_copy(&pstatementcharcount)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDocumentPositionWithName<Impl: IJsDebugFrameImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdocumentname: *mut super::super::super::Foundation::BSTR, pline: *mut u32, pcolumn: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDocumentPositionWithName(::core::mem::transmute_copy(&pdocumentname), ::core::mem::transmute_copy(&pline), ::core::mem::transmute_copy(&pcolumn)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDebugProperty<Impl: IJsDebugFrameImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppdebugproperty: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDebugProperty(::core::mem::transmute_copy(&ppdebugproperty)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetReturnAddress<Impl: IJsDebugFrameImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, preturnaddress: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetReturnAddress(::core::mem::transmute_copy(&preturnaddress)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Evaluate<Impl: IJsDebugFrameImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pexpressiontext: super::super::super::Foundation::PWSTR, ppdebugproperty: *mut ::windows::core::RawPtr, perror: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Evaluate(&*(&pexpressiontext as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppdebugproperty), ::core::mem::transmute_copy(&perror)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IJsDebugFrame>, base.5, GetStackRange::<Impl, OFFSET>, GetName::<Impl, OFFSET>, GetDocumentPositionWithId::<Impl, OFFSET>, GetDocumentPositionWithName::<Impl, OFFSET>, GetDebugProperty::<Impl, OFFSET>, GetReturnAddress::<Impl, OFFSET>, Evaluate::<Impl, OFFSET>)
    }
}
pub trait IJsDebugProcessImpl: Sized {
    fn CreateStackWalker();
    fn CreateBreakPoint();
    fn PerformAsyncBreak();
    fn GetExternalStepAddress();
}
impl ::windows::core::RuntimeName for IJsDebugProcess {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IJsDebugProcess";
}
impl IJsDebugProcessVtbl {
    pub const fn new<Impl: IJsDebugProcessImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IJsDebugProcessVtbl {
        unsafe extern "system" fn CreateStackWalker<Impl: IJsDebugProcessImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, threadid: u32, ppstackwalker: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateStackWalker(threadid, ::core::mem::transmute_copy(&ppstackwalker)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateBreakPoint<Impl: IJsDebugProcessImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, documentid: u64, characteroffset: u32, charactercount: u32, isenabled: super::super::super::Foundation::BOOL, ppdebugbreakpoint: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateBreakPoint(documentid, characteroffset, charactercount, &*(&isenabled as *const <super::super::super::Foundation::BOOL as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::BOOL as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppdebugbreakpoint)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn PerformAsyncBreak<Impl: IJsDebugProcessImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, threadid: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).PerformAsyncBreak(threadid) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetExternalStepAddress<Impl: IJsDebugProcessImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcodeaddress: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetExternalStepAddress(::core::mem::transmute_copy(&pcodeaddress)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IJsDebugProcess>, base.5, CreateStackWalker::<Impl, OFFSET>, CreateBreakPoint::<Impl, OFFSET>, PerformAsyncBreak::<Impl, OFFSET>, GetExternalStepAddress::<Impl, OFFSET>)
    }
}
pub trait IJsDebugPropertyImpl: Sized {
    fn GetPropertyInfo();
    fn GetMembers();
}
impl ::windows::core::RuntimeName for IJsDebugProperty {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IJsDebugProperty";
}
impl IJsDebugPropertyVtbl {
    pub const fn new<Impl: IJsDebugPropertyImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IJsDebugPropertyVtbl {
        unsafe extern "system" fn GetPropertyInfo<Impl: IJsDebugPropertyImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, nradix: u32, ppropertyinfo: *mut JsDebugPropertyInfo) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetPropertyInfo(nradix, ::core::mem::transmute_copy(&ppropertyinfo)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetMembers<Impl: IJsDebugPropertyImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, members: JS_PROPERTY_MEMBERS, ppenum: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetMembers(members, ::core::mem::transmute_copy(&ppenum)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IJsDebugProperty>, base.5, GetPropertyInfo::<Impl, OFFSET>, GetMembers::<Impl, OFFSET>)
    }
}
pub trait IJsDebugStackWalkerImpl: Sized {
    fn GetNext();
}
impl ::windows::core::RuntimeName for IJsDebugStackWalker {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IJsDebugStackWalker";
}
impl IJsDebugStackWalkerVtbl {
    pub const fn new<Impl: IJsDebugStackWalkerImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IJsDebugStackWalkerVtbl {
        unsafe extern "system" fn GetNext<Impl: IJsDebugStackWalkerImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppframe: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNext(::core::mem::transmute_copy(&ppframe)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IJsDebugStackWalker>, base.5, GetNext::<Impl, OFFSET>)
    }
}
pub trait IJsEnumDebugPropertyImpl: Sized {
    fn Next();
    fn GetCount();
}
impl ::windows::core::RuntimeName for IJsEnumDebugProperty {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IJsEnumDebugProperty";
}
impl IJsEnumDebugPropertyVtbl {
    pub const fn new<Impl: IJsEnumDebugPropertyImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IJsEnumDebugPropertyVtbl {
        unsafe extern "system" fn Next<Impl: IJsEnumDebugPropertyImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, ppdebugproperty: *mut ::windows::core::RawPtr, pactualcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Next(count, ::core::mem::transmute_copy(&ppdebugproperty), ::core::mem::transmute_copy(&pactualcount)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCount<Impl: IJsEnumDebugPropertyImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCount(::core::mem::transmute_copy(&pcount)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IJsEnumDebugProperty>, base.5, Next::<Impl, OFFSET>, GetCount::<Impl, OFFSET>)
    }
}
pub trait IKeyEnumeratorImpl: Sized {
    fn Reset();
    fn GetNext();
}
impl ::windows::core::RuntimeName for IKeyEnumerator {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IKeyEnumerator";
}
impl IKeyEnumeratorVtbl {
    pub const fn new<Impl: IKeyEnumeratorImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IKeyEnumeratorVtbl {
        unsafe extern "system" fn Reset<Impl: IKeyEnumeratorImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Reset() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNext<Impl: IKeyEnumeratorImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, key: *mut super::super::super::Foundation::BSTR, value: *mut ::windows::core::RawPtr, metadata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNext(::core::mem::transmute_copy(&key), ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&metadata)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IKeyEnumerator>, base.5, Reset::<Impl, OFFSET>, GetNext::<Impl, OFFSET>)
    }
}
pub trait IKeyStoreImpl: Sized {
    fn GetKey();
    fn SetKey();
    fn GetKeyValue();
    fn SetKeyValue();
    fn ClearKeys();
}
impl ::windows::core::RuntimeName for IKeyStore {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IKeyStore";
}
impl IKeyStoreVtbl {
    pub const fn new<Impl: IKeyStoreImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IKeyStoreVtbl {
        unsafe extern "system" fn GetKey<Impl: IKeyStoreImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, key: super::super::super::Foundation::PWSTR, object: *mut ::windows::core::RawPtr, metadata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetKey(&*(&key as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&object), ::core::mem::transmute_copy(&metadata)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetKey<Impl: IKeyStoreImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, key: super::super::super::Foundation::PWSTR, object: ::windows::core::RawPtr, metadata: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetKey(&*(&key as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&object as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType), &*(&metadata as *const <IKeyStore as ::windows::core::Abi>::Abi as *const <IKeyStore as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetKeyValue<Impl: IKeyStoreImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, key: super::super::super::Foundation::PWSTR, object: *mut ::windows::core::RawPtr, metadata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetKeyValue(&*(&key as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&object), ::core::mem::transmute_copy(&metadata)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetKeyValue<Impl: IKeyStoreImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, key: super::super::super::Foundation::PWSTR, object: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetKeyValue(&*(&key as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&object as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ClearKeys<Impl: IKeyStoreImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ClearKeys() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IKeyStore>, base.5, GetKey::<Impl, OFFSET>, SetKey::<Impl, OFFSET>, GetKeyValue::<Impl, OFFSET>, SetKeyValue::<Impl, OFFSET>, ClearKeys::<Impl, OFFSET>)
    }
}
pub trait IMachineDebugManagerImpl: Sized {
    fn AddApplication();
    fn RemoveApplication();
    fn EnumApplications();
}
impl ::windows::core::RuntimeName for IMachineDebugManager {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IMachineDebugManager";
}
impl IMachineDebugManagerVtbl {
    pub const fn new<Impl: IMachineDebugManagerImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IMachineDebugManagerVtbl {
        unsafe extern "system" fn AddApplication<Impl: IMachineDebugManagerImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pda: ::windows::core::RawPtr, pdwappcookie: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddApplication(&*(&pda as *const <IRemoteDebugApplication as ::windows::core::Abi>::Abi as *const <IRemoteDebugApplication as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pdwappcookie)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveApplication<Impl: IMachineDebugManagerImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwappcookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveApplication(dwappcookie) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumApplications<Impl: IMachineDebugManagerImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppeda: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EnumApplications(::core::mem::transmute_copy(&ppeda)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IMachineDebugManager>, base.5, AddApplication::<Impl, OFFSET>, RemoveApplication::<Impl, OFFSET>, EnumApplications::<Impl, OFFSET>)
    }
}
pub trait IMachineDebugManagerCookieImpl: Sized {
    fn AddApplication();
    fn RemoveApplication();
    fn EnumApplications();
}
impl ::windows::core::RuntimeName for IMachineDebugManagerCookie {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IMachineDebugManagerCookie";
}
impl IMachineDebugManagerCookieVtbl {
    pub const fn new<Impl: IMachineDebugManagerCookieImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IMachineDebugManagerCookieVtbl {
        unsafe extern "system" fn AddApplication<Impl: IMachineDebugManagerCookieImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pda: ::windows::core::RawPtr, dwdebugappcookie: u32, pdwappcookie: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddApplication(&*(&pda as *const <IRemoteDebugApplication as ::windows::core::Abi>::Abi as *const <IRemoteDebugApplication as ::windows::core::DefaultType>::DefaultType), dwdebugappcookie, ::core::mem::transmute_copy(&pdwappcookie)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveApplication<Impl: IMachineDebugManagerCookieImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwdebugappcookie: u32, dwappcookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveApplication(dwdebugappcookie, dwappcookie) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumApplications<Impl: IMachineDebugManagerCookieImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppeda: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EnumApplications(::core::mem::transmute_copy(&ppeda)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IMachineDebugManagerCookie>, base.5, AddApplication::<Impl, OFFSET>, RemoveApplication::<Impl, OFFSET>, EnumApplications::<Impl, OFFSET>)
    }
}
pub trait IMachineDebugManagerEventsImpl: Sized {
    fn onAddApplication();
    fn onRemoveApplication();
}
impl ::windows::core::RuntimeName for IMachineDebugManagerEvents {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IMachineDebugManagerEvents";
}
impl IMachineDebugManagerEventsVtbl {
    pub const fn new<Impl: IMachineDebugManagerEventsImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IMachineDebugManagerEventsVtbl {
        unsafe extern "system" fn onAddApplication<Impl: IMachineDebugManagerEventsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pda: ::windows::core::RawPtr, dwappcookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).onAddApplication(&*(&pda as *const <IRemoteDebugApplication as ::windows::core::Abi>::Abi as *const <IRemoteDebugApplication as ::windows::core::DefaultType>::DefaultType), dwappcookie) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn onRemoveApplication<Impl: IMachineDebugManagerEventsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pda: ::windows::core::RawPtr, dwappcookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).onRemoveApplication(&*(&pda as *const <IRemoteDebugApplication as ::windows::core::Abi>::Abi as *const <IRemoteDebugApplication as ::windows::core::DefaultType>::DefaultType), dwappcookie) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IMachineDebugManagerEvents>, base.5, onAddApplication::<Impl, OFFSET>, onRemoveApplication::<Impl, OFFSET>)
    }
}
pub trait IModelIteratorImpl: Sized {
    fn Reset();
    fn GetNext();
}
impl ::windows::core::RuntimeName for IModelIterator {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IModelIterator";
}
impl IModelIteratorVtbl {
    pub const fn new<Impl: IModelIteratorImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IModelIteratorVtbl {
        unsafe extern "system" fn Reset<Impl: IModelIteratorImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Reset() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNext<Impl: IModelIteratorImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, object: *mut ::windows::core::RawPtr, dimensions: u64, indexers: *mut ::windows::core::RawPtr, metadata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNext(::core::mem::transmute_copy(&object), dimensions, ::core::mem::transmute_copy(&indexers), ::core::mem::transmute_copy(&metadata)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IModelIterator>, base.5, Reset::<Impl, OFFSET>, GetNext::<Impl, OFFSET>)
    }
}
pub trait IModelKeyReferenceImpl: Sized {
    fn GetKeyName();
    fn GetOriginalObject();
    fn GetContextObject();
    fn GetKey();
    fn GetKeyValue();
    fn SetKey();
    fn SetKeyValue();
}
impl ::windows::core::RuntimeName for IModelKeyReference {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IModelKeyReference";
}
impl IModelKeyReferenceVtbl {
    pub const fn new<Impl: IModelKeyReferenceImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IModelKeyReferenceVtbl {
        unsafe extern "system" fn GetKeyName<Impl: IModelKeyReferenceImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, keyname: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetKeyName(::core::mem::transmute_copy(&keyname)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetOriginalObject<Impl: IModelKeyReferenceImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, originalobject: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetOriginalObject(::core::mem::transmute_copy(&originalobject)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetContextObject<Impl: IModelKeyReferenceImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, containingobject: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetContextObject(::core::mem::transmute_copy(&containingobject)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetKey<Impl: IModelKeyReferenceImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, object: *mut ::windows::core::RawPtr, metadata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetKey(::core::mem::transmute_copy(&object), ::core::mem::transmute_copy(&metadata)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetKeyValue<Impl: IModelKeyReferenceImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, object: *mut ::windows::core::RawPtr, metadata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetKeyValue(::core::mem::transmute_copy(&object), ::core::mem::transmute_copy(&metadata)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetKey<Impl: IModelKeyReferenceImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, object: ::windows::core::RawPtr, metadata: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetKey(&*(&object as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType), &*(&metadata as *const <IKeyStore as ::windows::core::Abi>::Abi as *const <IKeyStore as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetKeyValue<Impl: IModelKeyReferenceImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, object: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetKeyValue(&*(&object as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IModelKeyReference>, base.5, GetKeyName::<Impl, OFFSET>, GetOriginalObject::<Impl, OFFSET>, GetContextObject::<Impl, OFFSET>, GetKey::<Impl, OFFSET>, GetKeyValue::<Impl, OFFSET>, SetKey::<Impl, OFFSET>, SetKeyValue::<Impl, OFFSET>)
    }
}
pub trait IModelKeyReference2Impl: Sized + IModelKeyReferenceImpl {
    fn OverrideContextObject();
}
impl ::windows::core::RuntimeName for IModelKeyReference2 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IModelKeyReference2";
}
impl IModelKeyReference2Vtbl {
    pub const fn new<Impl: IModelKeyReference2Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IModelKeyReference2Vtbl {
        unsafe extern "system" fn OverrideContextObject<Impl: IModelKeyReference2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newcontextobject: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OverrideContextObject(&*(&newcontextobject as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IModelKeyReference2>, base.5, OverrideContextObject::<Impl, OFFSET>)
    }
}
pub trait IModelMethodImpl: Sized {
    fn Call();
}
impl ::windows::core::RuntimeName for IModelMethod {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IModelMethod";
}
impl IModelMethodVtbl {
    pub const fn new<Impl: IModelMethodImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IModelMethodVtbl {
        unsafe extern "system" fn Call<Impl: IModelMethodImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcontextobject: ::windows::core::RawPtr, argcount: u64, pparguments: *const ::windows::core::RawPtr, ppresult: *mut ::windows::core::RawPtr, ppmetadata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Call(&*(&pcontextobject as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType), argcount, &*(&pparguments as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppresult), ::core::mem::transmute_copy(&ppmetadata)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IModelMethod>, base.5, Call::<Impl, OFFSET>)
    }
}
pub trait IModelObjectImpl: Sized {
    fn GetContext();
    fn GetKind();
    fn GetIntrinsicValue();
    fn GetIntrinsicValueAs();
    fn GetKeyValue();
    fn SetKeyValue();
    fn EnumerateKeyValues();
    fn GetRawValue();
    fn EnumerateRawValues();
    fn Dereference();
    fn TryCastToRuntimeType();
    fn GetConcept();
    fn GetLocation();
    fn GetTypeInfo();
    fn GetTargetInfo();
    fn GetNumberOfParentModels();
    fn GetParentModel();
    fn AddParentModel();
    fn RemoveParentModel();
    fn GetKey();
    fn GetKeyReference();
    fn SetKey();
    fn ClearKeys();
    fn EnumerateKeys();
    fn EnumerateKeyReferences();
    fn SetConcept();
    fn ClearConcepts();
    fn GetRawReference();
    fn EnumerateRawReferences();
    fn SetContextForDataModel();
    fn GetContextForDataModel();
    fn Compare();
    fn IsEqualTo();
}
impl ::windows::core::RuntimeName for IModelObject {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IModelObject";
}
impl IModelObjectVtbl {
    pub const fn new<Impl: IModelObjectImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IModelObjectVtbl {
        unsafe extern "system" fn GetContext<Impl: IModelObjectImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetContext(::core::mem::transmute_copy(&context)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetKind<Impl: IModelObjectImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, kind: *mut ModelObjectKind) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetKind(::core::mem::transmute_copy(&kind)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetIntrinsicValue<Impl: IModelObjectImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, intrinsicdata: *mut super::super::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetIntrinsicValue(::core::mem::transmute_copy(&intrinsicdata)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetIntrinsicValueAs<Impl: IModelObjectImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, vt: u16, intrinsicdata: *mut super::super::Com::VARIANT) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetIntrinsicValueAs(vt, ::core::mem::transmute_copy(&intrinsicdata)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetKeyValue<Impl: IModelObjectImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, key: super::super::super::Foundation::PWSTR, object: *mut ::windows::core::RawPtr, metadata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetKeyValue(&*(&key as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&object), ::core::mem::transmute_copy(&metadata)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetKeyValue<Impl: IModelObjectImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, key: super::super::super::Foundation::PWSTR, object: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetKeyValue(&*(&key as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&object as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumerateKeyValues<Impl: IModelObjectImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, enumerator: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EnumerateKeyValues(::core::mem::transmute_copy(&enumerator)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRawValue<Impl: IModelObjectImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, kind: SymbolKind, name: super::super::super::Foundation::PWSTR, searchflags: u32, object: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetRawValue(kind, &*(&name as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), searchflags, ::core::mem::transmute_copy(&object)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumerateRawValues<Impl: IModelObjectImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, kind: SymbolKind, searchflags: u32, enumerator: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EnumerateRawValues(kind, searchflags, ::core::mem::transmute_copy(&enumerator)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Dereference<Impl: IModelObjectImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, object: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Dereference(::core::mem::transmute_copy(&object)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn TryCastToRuntimeType<Impl: IModelObjectImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, runtimetypedobject: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).TryCastToRuntimeType(::core::mem::transmute_copy(&runtimetypedobject)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetConcept<Impl: IModelObjectImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, conceptid: *const ::windows::core::GUID, conceptinterface: *mut *mut ::core::ffi::c_void, conceptmetadata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetConcept(&*(&conceptid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&conceptinterface), ::core::mem::transmute_copy(&conceptmetadata)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLocation<Impl: IModelObjectImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, location: *mut Location) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLocation(::core::mem::transmute_copy(&location)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTypeInfo<Impl: IModelObjectImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTypeInfo(::core::mem::transmute_copy(&r#type)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetTargetInfo<Impl: IModelObjectImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, location: *mut Location, r#type: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetTargetInfo(::core::mem::transmute_copy(&location), ::core::mem::transmute_copy(&r#type)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberOfParentModels<Impl: IModelObjectImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, nummodels: *mut u64) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberOfParentModels(::core::mem::transmute_copy(&nummodels)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetParentModel<Impl: IModelObjectImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, i: u64, model: *mut ::windows::core::RawPtr, contextobject: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetParentModel(i, ::core::mem::transmute_copy(&model), ::core::mem::transmute_copy(&contextobject)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddParentModel<Impl: IModelObjectImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, model: ::windows::core::RawPtr, contextobject: ::windows::core::RawPtr, r#override: u8) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddParentModel(&*(&model as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType), &*(&contextobject as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType), r#override) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveParentModel<Impl: IModelObjectImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, model: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveParentModel(&*(&model as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetKey<Impl: IModelObjectImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, key: super::super::super::Foundation::PWSTR, object: *mut ::windows::core::RawPtr, metadata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetKey(&*(&key as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&object), ::core::mem::transmute_copy(&metadata)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetKeyReference<Impl: IModelObjectImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, key: super::super::super::Foundation::PWSTR, objectreference: *mut ::windows::core::RawPtr, metadata: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetKeyReference(&*(&key as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&objectreference), ::core::mem::transmute_copy(&metadata)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetKey<Impl: IModelObjectImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, key: super::super::super::Foundation::PWSTR, object: ::windows::core::RawPtr, metadata: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetKey(&*(&key as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&object as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType), &*(&metadata as *const <IKeyStore as ::windows::core::Abi>::Abi as *const <IKeyStore as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ClearKeys<Impl: IModelObjectImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ClearKeys() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumerateKeys<Impl: IModelObjectImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, enumerator: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EnumerateKeys(::core::mem::transmute_copy(&enumerator)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumerateKeyReferences<Impl: IModelObjectImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, enumerator: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EnumerateKeyReferences(::core::mem::transmute_copy(&enumerator)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetConcept<Impl: IModelObjectImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, conceptid: *const ::windows::core::GUID, conceptinterface: *mut ::core::ffi::c_void, conceptmetadata: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetConcept(&*(&conceptid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), &*(&conceptinterface as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType), &*(&conceptmetadata as *const <IKeyStore as ::windows::core::Abi>::Abi as *const <IKeyStore as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ClearConcepts<Impl: IModelObjectImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ClearConcepts() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRawReference<Impl: IModelObjectImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, kind: SymbolKind, name: super::super::super::Foundation::PWSTR, searchflags: u32, object: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetRawReference(kind, &*(&name as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), searchflags, ::core::mem::transmute_copy(&object)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumerateRawReferences<Impl: IModelObjectImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, kind: SymbolKind, searchflags: u32, enumerator: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EnumerateRawReferences(kind, searchflags, ::core::mem::transmute_copy(&enumerator)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetContextForDataModel<Impl: IModelObjectImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, datamodelobject: ::windows::core::RawPtr, context: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetContextForDataModel(&*(&datamodelobject as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType), &*(&context as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetContextForDataModel<Impl: IModelObjectImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, datamodelobject: ::windows::core::RawPtr, context: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetContextForDataModel(&*(&datamodelobject as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&context)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Compare<Impl: IModelObjectImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, other: ::windows::core::RawPtr, ppresult: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Compare(&*(&other as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppresult)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsEqualTo<Impl: IModelObjectImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, other: ::windows::core::RawPtr, equal: *mut bool) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).IsEqualTo(&*(&other as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&equal)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(
            base.0,
            base.1,
            base.2,
            base.3,
            ::windows::core::GetRuntimeClassName::<IModelObject>,
            base.5,
            GetContext::<Impl, OFFSET>,
            GetKind::<Impl, OFFSET>,
            GetIntrinsicValue::<Impl, OFFSET>,
            GetIntrinsicValueAs::<Impl, OFFSET>,
            GetKeyValue::<Impl, OFFSET>,
            SetKeyValue::<Impl, OFFSET>,
            EnumerateKeyValues::<Impl, OFFSET>,
            GetRawValue::<Impl, OFFSET>,
            EnumerateRawValues::<Impl, OFFSET>,
            Dereference::<Impl, OFFSET>,
            TryCastToRuntimeType::<Impl, OFFSET>,
            GetConcept::<Impl, OFFSET>,
            GetLocation::<Impl, OFFSET>,
            GetTypeInfo::<Impl, OFFSET>,
            GetTargetInfo::<Impl, OFFSET>,
            GetNumberOfParentModels::<Impl, OFFSET>,
            GetParentModel::<Impl, OFFSET>,
            AddParentModel::<Impl, OFFSET>,
            RemoveParentModel::<Impl, OFFSET>,
            GetKey::<Impl, OFFSET>,
            GetKeyReference::<Impl, OFFSET>,
            SetKey::<Impl, OFFSET>,
            ClearKeys::<Impl, OFFSET>,
            EnumerateKeys::<Impl, OFFSET>,
            EnumerateKeyReferences::<Impl, OFFSET>,
            SetConcept::<Impl, OFFSET>,
            ClearConcepts::<Impl, OFFSET>,
            GetRawReference::<Impl, OFFSET>,
            EnumerateRawReferences::<Impl, OFFSET>,
            SetContextForDataModel::<Impl, OFFSET>,
            GetContextForDataModel::<Impl, OFFSET>,
            Compare::<Impl, OFFSET>,
            IsEqualTo::<Impl, OFFSET>,
        )
    }
}
pub trait IModelPropertyAccessorImpl: Sized {
    fn GetValue();
    fn SetValue();
}
impl ::windows::core::RuntimeName for IModelPropertyAccessor {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IModelPropertyAccessor";
}
impl IModelPropertyAccessorVtbl {
    pub const fn new<Impl: IModelPropertyAccessorImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IModelPropertyAccessorVtbl {
        unsafe extern "system" fn GetValue<Impl: IModelPropertyAccessorImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, key: super::super::super::Foundation::PWSTR, contextobject: ::windows::core::RawPtr, value: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetValue(&*(&key as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&contextobject as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&value)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetValue<Impl: IModelPropertyAccessorImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, key: super::super::super::Foundation::PWSTR, contextobject: ::windows::core::RawPtr, value: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetValue(&*(&key as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&contextobject as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType), &*(&value as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IModelPropertyAccessor>, base.5, GetValue::<Impl, OFFSET>, SetValue::<Impl, OFFSET>)
    }
}
pub trait IObjectSafetyImpl: Sized {
    fn GetInterfaceSafetyOptions();
    fn SetInterfaceSafetyOptions();
}
impl ::windows::core::RuntimeName for IObjectSafety {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IObjectSafety";
}
impl IObjectSafetyVtbl {
    pub const fn new<Impl: IObjectSafetyImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IObjectSafetyVtbl {
        unsafe extern "system" fn GetInterfaceSafetyOptions<Impl: IObjectSafetyImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, riid: *const ::windows::core::GUID, pdwsupportedoptions: *mut u32, pdwenabledoptions: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetInterfaceSafetyOptions(&*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pdwsupportedoptions), ::core::mem::transmute_copy(&pdwenabledoptions)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetInterfaceSafetyOptions<Impl: IObjectSafetyImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, riid: *const ::windows::core::GUID, dwoptionsetmask: u32, dwenabledoptions: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetInterfaceSafetyOptions(&*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), dwoptionsetmask, dwenabledoptions) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IObjectSafety>, base.5, GetInterfaceSafetyOptions::<Impl, OFFSET>, SetInterfaceSafetyOptions::<Impl, OFFSET>)
    }
}
pub trait IPerPropertyBrowsing2Impl: Sized {
    fn GetDisplayString();
    fn MapPropertyToPage();
    fn GetPredefinedStrings();
    fn SetPredefinedValue();
}
impl ::windows::core::RuntimeName for IPerPropertyBrowsing2 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IPerPropertyBrowsing2";
}
impl IPerPropertyBrowsing2Vtbl {
    pub const fn new<Impl: IPerPropertyBrowsing2Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IPerPropertyBrowsing2Vtbl {
        unsafe extern "system" fn GetDisplayString<Impl: IPerPropertyBrowsing2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dispid: i32, pbstr: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDisplayString(dispid, ::core::mem::transmute_copy(&pbstr)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn MapPropertyToPage<Impl: IPerPropertyBrowsing2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dispid: i32, pclsidproppage: *mut ::windows::core::GUID) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).MapPropertyToPage(dispid, ::core::mem::transmute_copy(&pclsidproppage)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetPredefinedStrings<Impl: IPerPropertyBrowsing2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dispid: i32, pcastrings: *mut super::super::Ole::CALPOLESTR, pcacookies: *mut super::super::Ole::CADWORD) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetPredefinedStrings(dispid, ::core::mem::transmute_copy(&pcastrings), ::core::mem::transmute_copy(&pcacookies)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetPredefinedValue<Impl: IPerPropertyBrowsing2Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dispid: i32, dwcookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetPredefinedValue(dispid, dwcookie) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IPerPropertyBrowsing2>, base.5, GetDisplayString::<Impl, OFFSET>, MapPropertyToPage::<Impl, OFFSET>, GetPredefinedStrings::<Impl, OFFSET>, SetPredefinedValue::<Impl, OFFSET>)
    }
}
pub trait IPreferredRuntimeTypeConceptImpl: Sized {
    fn CastToPreferredRuntimeType();
}
impl ::windows::core::RuntimeName for IPreferredRuntimeTypeConcept {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IPreferredRuntimeTypeConcept";
}
impl IPreferredRuntimeTypeConceptVtbl {
    pub const fn new<Impl: IPreferredRuntimeTypeConceptImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IPreferredRuntimeTypeConceptVtbl {
        unsafe extern "system" fn CastToPreferredRuntimeType<Impl: IPreferredRuntimeTypeConceptImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, contextobject: ::windows::core::RawPtr, object: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CastToPreferredRuntimeType(&*(&contextobject as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&object)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IPreferredRuntimeTypeConcept>, base.5, CastToPreferredRuntimeType::<Impl, OFFSET>)
    }
}
pub trait IProcessDebugManager32Impl: Sized {
    fn CreateApplication();
    fn GetDefaultApplication();
    fn AddApplication();
    fn RemoveApplication();
    fn CreateDebugDocumentHelper();
}
impl ::windows::core::RuntimeName for IProcessDebugManager32 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IProcessDebugManager32";
}
impl IProcessDebugManager32Vtbl {
    pub const fn new<Impl: IProcessDebugManager32Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IProcessDebugManager32Vtbl {
        unsafe extern "system" fn CreateApplication<Impl: IProcessDebugManager32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppda: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateApplication(::core::mem::transmute_copy(&ppda)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDefaultApplication<Impl: IProcessDebugManager32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppda: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDefaultApplication(::core::mem::transmute_copy(&ppda)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddApplication<Impl: IProcessDebugManager32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pda: ::windows::core::RawPtr, pdwappcookie: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddApplication(&*(&pda as *const <IDebugApplication32 as ::windows::core::Abi>::Abi as *const <IDebugApplication32 as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pdwappcookie)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveApplication<Impl: IProcessDebugManager32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwappcookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveApplication(dwappcookie) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateDebugDocumentHelper<Impl: IProcessDebugManager32Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punkouter: *mut ::core::ffi::c_void, pddh: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateDebugDocumentHelper(&*(&punkouter as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pddh)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IProcessDebugManager32>, base.5, CreateApplication::<Impl, OFFSET>, GetDefaultApplication::<Impl, OFFSET>, AddApplication::<Impl, OFFSET>, RemoveApplication::<Impl, OFFSET>, CreateDebugDocumentHelper::<Impl, OFFSET>)
    }
}
pub trait IProcessDebugManager64Impl: Sized {
    fn CreateApplication();
    fn GetDefaultApplication();
    fn AddApplication();
    fn RemoveApplication();
    fn CreateDebugDocumentHelper();
}
impl ::windows::core::RuntimeName for IProcessDebugManager64 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IProcessDebugManager64";
}
impl IProcessDebugManager64Vtbl {
    pub const fn new<Impl: IProcessDebugManager64Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IProcessDebugManager64Vtbl {
        unsafe extern "system" fn CreateApplication<Impl: IProcessDebugManager64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppda: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateApplication(::core::mem::transmute_copy(&ppda)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDefaultApplication<Impl: IProcessDebugManager64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppda: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDefaultApplication(::core::mem::transmute_copy(&ppda)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn AddApplication<Impl: IProcessDebugManager64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pda: ::windows::core::RawPtr, pdwappcookie: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).AddApplication(&*(&pda as *const <IDebugApplication64 as ::windows::core::Abi>::Abi as *const <IDebugApplication64 as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pdwappcookie)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RemoveApplication<Impl: IProcessDebugManager64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwappcookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).RemoveApplication(dwappcookie) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateDebugDocumentHelper<Impl: IProcessDebugManager64Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punkouter: *mut ::core::ffi::c_void, pddh: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateDebugDocumentHelper(&*(&punkouter as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pddh)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IProcessDebugManager64>, base.5, CreateApplication::<Impl, OFFSET>, GetDefaultApplication::<Impl, OFFSET>, AddApplication::<Impl, OFFSET>, RemoveApplication::<Impl, OFFSET>, CreateDebugDocumentHelper::<Impl, OFFSET>)
    }
}
pub trait IProvideExpressionContextsImpl: Sized {
    fn EnumExpressionContexts();
}
impl ::windows::core::RuntimeName for IProvideExpressionContexts {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IProvideExpressionContexts";
}
impl IProvideExpressionContextsVtbl {
    pub const fn new<Impl: IProvideExpressionContextsImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IProvideExpressionContextsVtbl {
        unsafe extern "system" fn EnumExpressionContexts<Impl: IProvideExpressionContextsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppedec: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EnumExpressionContexts(::core::mem::transmute_copy(&ppedec)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IProvideExpressionContexts>, base.5, EnumExpressionContexts::<Impl, OFFSET>)
    }
}
pub trait IRawEnumeratorImpl: Sized {
    fn Reset();
    fn GetNext();
}
impl ::windows::core::RuntimeName for IRawEnumerator {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IRawEnumerator";
}
impl IRawEnumeratorVtbl {
    pub const fn new<Impl: IRawEnumeratorImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IRawEnumeratorVtbl {
        unsafe extern "system" fn Reset<Impl: IRawEnumeratorImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Reset() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNext<Impl: IRawEnumeratorImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: *mut super::super::super::Foundation::BSTR, kind: *mut SymbolKind, value: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNext(::core::mem::transmute_copy(&name), ::core::mem::transmute_copy(&kind), ::core::mem::transmute_copy(&value)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IRawEnumerator>, base.5, Reset::<Impl, OFFSET>, GetNext::<Impl, OFFSET>)
    }
}
pub trait IRemoteDebugApplicationImpl: Sized {
    fn ResumeFromBreakPoint();
    fn CauseBreak();
    fn ConnectDebugger();
    fn DisconnectDebugger();
    fn GetDebugger();
    fn CreateInstanceAtApplication();
    fn QueryAlive();
    fn EnumThreads();
    fn GetName();
    fn GetRootNode();
    fn EnumGlobalExpressionContexts();
}
impl ::windows::core::RuntimeName for IRemoteDebugApplication {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IRemoteDebugApplication";
}
impl IRemoteDebugApplicationVtbl {
    pub const fn new<Impl: IRemoteDebugApplicationImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IRemoteDebugApplicationVtbl {
        unsafe extern "system" fn ResumeFromBreakPoint<Impl: IRemoteDebugApplicationImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prptfocus: ::windows::core::RawPtr, bra: BREAKRESUME_ACTION, era: ERRORRESUMEACTION) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ResumeFromBreakPoint(&*(&prptfocus as *const <IRemoteDebugApplicationThread as ::windows::core::Abi>::Abi as *const <IRemoteDebugApplicationThread as ::windows::core::DefaultType>::DefaultType), bra, era) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CauseBreak<Impl: IRemoteDebugApplicationImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CauseBreak() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ConnectDebugger<Impl: IRemoteDebugApplicationImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pad: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ConnectDebugger(&*(&pad as *const <IApplicationDebugger as ::windows::core::Abi>::Abi as *const <IApplicationDebugger as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DisconnectDebugger<Impl: IRemoteDebugApplicationImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).DisconnectDebugger() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDebugger<Impl: IRemoteDebugApplicationImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pad: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDebugger(::core::mem::transmute_copy(&pad)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateInstanceAtApplication<Impl: IRemoteDebugApplicationImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, rclsid: *const ::windows::core::GUID, punkouter: *mut ::core::ffi::c_void, dwclscontext: u32, riid: *const ::windows::core::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateInstanceAtApplication(
                &*(&rclsid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType),
                &*(&punkouter as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType),
                dwclscontext,
                &*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType),
                ::core::mem::transmute_copy(&ppvobject),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn QueryAlive<Impl: IRemoteDebugApplicationImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).QueryAlive() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumThreads<Impl: IRemoteDebugApplicationImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pperdat: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EnumThreads(::core::mem::transmute_copy(&pperdat)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetName<Impl: IRemoteDebugApplicationImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstrname: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetName(::core::mem::transmute_copy(&pbstrname)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRootNode<Impl: IRemoteDebugApplicationImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppdanroot: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetRootNode(::core::mem::transmute_copy(&ppdanroot)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumGlobalExpressionContexts<Impl: IRemoteDebugApplicationImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppedec: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EnumGlobalExpressionContexts(::core::mem::transmute_copy(&ppedec)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IRemoteDebugApplication>, base.5, ResumeFromBreakPoint::<Impl, OFFSET>, CauseBreak::<Impl, OFFSET>, ConnectDebugger::<Impl, OFFSET>, DisconnectDebugger::<Impl, OFFSET>, GetDebugger::<Impl, OFFSET>, CreateInstanceAtApplication::<Impl, OFFSET>, QueryAlive::<Impl, OFFSET>, EnumThreads::<Impl, OFFSET>, GetName::<Impl, OFFSET>, GetRootNode::<Impl, OFFSET>, EnumGlobalExpressionContexts::<Impl, OFFSET>)
    }
}
pub trait IRemoteDebugApplication110Impl: Sized {
    fn SetDebuggerOptions();
    fn GetCurrentDebuggerOptions();
    fn GetMainThread();
}
impl ::windows::core::RuntimeName for IRemoteDebugApplication110 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IRemoteDebugApplication110";
}
impl IRemoteDebugApplication110Vtbl {
    pub const fn new<Impl: IRemoteDebugApplication110Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IRemoteDebugApplication110Vtbl {
        unsafe extern "system" fn SetDebuggerOptions<Impl: IRemoteDebugApplication110Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: SCRIPT_DEBUGGER_OPTIONS, value: SCRIPT_DEBUGGER_OPTIONS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetDebuggerOptions(mask, value) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCurrentDebuggerOptions<Impl: IRemoteDebugApplication110Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcurrentoptions: *mut SCRIPT_DEBUGGER_OPTIONS) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCurrentDebuggerOptions(::core::mem::transmute_copy(&pcurrentoptions)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetMainThread<Impl: IRemoteDebugApplication110Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppthread: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetMainThread(::core::mem::transmute_copy(&ppthread)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IRemoteDebugApplication110>, base.5, SetDebuggerOptions::<Impl, OFFSET>, GetCurrentDebuggerOptions::<Impl, OFFSET>, GetMainThread::<Impl, OFFSET>)
    }
}
pub trait IRemoteDebugApplicationEventsImpl: Sized {
    fn OnConnectDebugger();
    fn OnDisconnectDebugger();
    fn OnSetName();
    fn OnDebugOutput();
    fn OnClose();
    fn OnEnterBreakPoint();
    fn OnLeaveBreakPoint();
    fn OnCreateThread();
    fn OnDestroyThread();
    fn OnBreakFlagChange();
}
impl ::windows::core::RuntimeName for IRemoteDebugApplicationEvents {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IRemoteDebugApplicationEvents";
}
impl IRemoteDebugApplicationEventsVtbl {
    pub const fn new<Impl: IRemoteDebugApplicationEventsImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IRemoteDebugApplicationEventsVtbl {
        unsafe extern "system" fn OnConnectDebugger<Impl: IRemoteDebugApplicationEventsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pad: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OnConnectDebugger(&*(&pad as *const <IApplicationDebugger as ::windows::core::Abi>::Abi as *const <IApplicationDebugger as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnDisconnectDebugger<Impl: IRemoteDebugApplicationEventsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OnDisconnectDebugger() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnSetName<Impl: IRemoteDebugApplicationEventsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstrname: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OnSetName(&*(&pstrname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnDebugOutput<Impl: IRemoteDebugApplicationEventsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstr: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OnDebugOutput(&*(&pstr as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnClose<Impl: IRemoteDebugApplicationEventsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OnClose() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnEnterBreakPoint<Impl: IRemoteDebugApplicationEventsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prdat: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OnEnterBreakPoint(&*(&prdat as *const <IRemoteDebugApplicationThread as ::windows::core::Abi>::Abi as *const <IRemoteDebugApplicationThread as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnLeaveBreakPoint<Impl: IRemoteDebugApplicationEventsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prdat: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OnLeaveBreakPoint(&*(&prdat as *const <IRemoteDebugApplicationThread as ::windows::core::Abi>::Abi as *const <IRemoteDebugApplicationThread as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnCreateThread<Impl: IRemoteDebugApplicationEventsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prdat: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OnCreateThread(&*(&prdat as *const <IRemoteDebugApplicationThread as ::windows::core::Abi>::Abi as *const <IRemoteDebugApplicationThread as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnDestroyThread<Impl: IRemoteDebugApplicationEventsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prdat: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OnDestroyThread(&*(&prdat as *const <IRemoteDebugApplicationThread as ::windows::core::Abi>::Abi as *const <IRemoteDebugApplicationThread as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn OnBreakFlagChange<Impl: IRemoteDebugApplicationEventsImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, abf: u32, prdatsteppingthread: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).OnBreakFlagChange(abf, &*(&prdatsteppingthread as *const <IRemoteDebugApplicationThread as ::windows::core::Abi>::Abi as *const <IRemoteDebugApplicationThread as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IRemoteDebugApplicationEvents>, base.5, OnConnectDebugger::<Impl, OFFSET>, OnDisconnectDebugger::<Impl, OFFSET>, OnSetName::<Impl, OFFSET>, OnDebugOutput::<Impl, OFFSET>, OnClose::<Impl, OFFSET>, OnEnterBreakPoint::<Impl, OFFSET>, OnLeaveBreakPoint::<Impl, OFFSET>, OnCreateThread::<Impl, OFFSET>, OnDestroyThread::<Impl, OFFSET>, OnBreakFlagChange::<Impl, OFFSET>)
    }
}
pub trait IRemoteDebugApplicationThreadImpl: Sized {
    fn GetSystemThreadId();
    fn GetApplication();
    fn EnumStackFrames();
    fn GetDescription();
    fn SetNextStatement();
    fn GetState();
    fn Suspend();
    fn Resume();
    fn GetSuspendCount();
}
impl ::windows::core::RuntimeName for IRemoteDebugApplicationThread {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IRemoteDebugApplicationThread";
}
impl IRemoteDebugApplicationThreadVtbl {
    pub const fn new<Impl: IRemoteDebugApplicationThreadImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IRemoteDebugApplicationThreadVtbl {
        unsafe extern "system" fn GetSystemThreadId<Impl: IRemoteDebugApplicationThreadImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwthreadid: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSystemThreadId(::core::mem::transmute_copy(&dwthreadid)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetApplication<Impl: IRemoteDebugApplicationThreadImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pprda: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetApplication(::core::mem::transmute_copy(&pprda)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumStackFrames<Impl: IRemoteDebugApplicationThreadImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppedsf: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).EnumStackFrames(::core::mem::transmute_copy(&ppedsf)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDescription<Impl: IRemoteDebugApplicationThreadImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstrdescription: *mut super::super::super::Foundation::BSTR, pbstrstate: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetDescription(::core::mem::transmute_copy(&pbstrdescription), ::core::mem::transmute_copy(&pbstrstate)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetNextStatement<Impl: IRemoteDebugApplicationThreadImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstackframe: ::windows::core::RawPtr, pcodecontext: ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetNextStatement(&*(&pstackframe as *const <IDebugStackFrame as ::windows::core::Abi>::Abi as *const <IDebugStackFrame as ::windows::core::DefaultType>::DefaultType), &*(&pcodecontext as *const <IDebugCodeContext as ::windows::core::Abi>::Abi as *const <IDebugCodeContext as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetState<Impl: IRemoteDebugApplicationThreadImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstate: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetState(::core::mem::transmute_copy(&pstate)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Suspend<Impl: IRemoteDebugApplicationThreadImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Suspend(::core::mem::transmute_copy(&pdwcount)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Resume<Impl: IRemoteDebugApplicationThreadImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Resume(::core::mem::transmute_copy(&pdwcount)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSuspendCount<Impl: IRemoteDebugApplicationThreadImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSuspendCount(::core::mem::transmute_copy(&pdwcount)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IRemoteDebugApplicationThread>, base.5, GetSystemThreadId::<Impl, OFFSET>, GetApplication::<Impl, OFFSET>, EnumStackFrames::<Impl, OFFSET>, GetDescription::<Impl, OFFSET>, SetNextStatement::<Impl, OFFSET>, GetState::<Impl, OFFSET>, Suspend::<Impl, OFFSET>, Resume::<Impl, OFFSET>, GetSuspendCount::<Impl, OFFSET>)
    }
}
pub trait IRemoteDebugCriticalErrorEvent110Impl: Sized {
    fn GetErrorInfo();
}
impl ::windows::core::RuntimeName for IRemoteDebugCriticalErrorEvent110 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IRemoteDebugCriticalErrorEvent110";
}
impl IRemoteDebugCriticalErrorEvent110Vtbl {
    pub const fn new<Impl: IRemoteDebugCriticalErrorEvent110Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IRemoteDebugCriticalErrorEvent110Vtbl {
        unsafe extern "system" fn GetErrorInfo<Impl: IRemoteDebugCriticalErrorEvent110Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstrsource: *mut super::super::super::Foundation::BSTR, pmessageid: *mut i32, pbstrmessage: *mut super::super::super::Foundation::BSTR, pplocation: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetErrorInfo(::core::mem::transmute_copy(&pbstrsource), ::core::mem::transmute_copy(&pmessageid), ::core::mem::transmute_copy(&pbstrmessage), ::core::mem::transmute_copy(&pplocation)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IRemoteDebugCriticalErrorEvent110>, base.5, GetErrorInfo::<Impl, OFFSET>)
    }
}
pub trait IRemoteDebugInfoEvent110Impl: Sized {
    fn GetEventInfo();
}
impl ::windows::core::RuntimeName for IRemoteDebugInfoEvent110 {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IRemoteDebugInfoEvent110";
}
impl IRemoteDebugInfoEvent110Vtbl {
    pub const fn new<Impl: IRemoteDebugInfoEvent110Impl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IRemoteDebugInfoEvent110Vtbl {
        unsafe extern "system" fn GetEventInfo<Impl: IRemoteDebugInfoEvent110Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pmessagetype: *mut DEBUG_EVENT_INFO_TYPE, pbstrmessage: *mut super::super::super::Foundation::BSTR, pbstrurl: *mut super::super::super::Foundation::BSTR, pplocation: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventInfo(::core::mem::transmute_copy(&pmessagetype), ::core::mem::transmute_copy(&pbstrmessage), ::core::mem::transmute_copy(&pbstrurl), ::core::mem::transmute_copy(&pplocation)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IRemoteDebugInfoEvent110>, base.5, GetEventInfo::<Impl, OFFSET>)
    }
}
pub trait IScriptEntryImpl: Sized + IScriptNodeImpl {
    fn GetText();
    fn SetText();
    fn GetBody();
    fn SetBody();
    fn GetName();
    fn SetName();
    fn GetItemName();
    fn SetItemName();
    fn GetSignature();
    fn SetSignature();
    fn GetRange();
}
impl ::windows::core::RuntimeName for IScriptEntry {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IScriptEntry";
}
impl IScriptEntryVtbl {
    pub const fn new<Impl: IScriptEntryImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IScriptEntryVtbl {
        unsafe extern "system" fn GetText<Impl: IScriptEntryImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstr: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetText(::core::mem::transmute_copy(&pbstr)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetText<Impl: IScriptEntryImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psz: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetText(&*(&psz as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetBody<Impl: IScriptEntryImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstr: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetBody(::core::mem::transmute_copy(&pbstr)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetBody<Impl: IScriptEntryImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psz: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetBody(&*(&psz as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetName<Impl: IScriptEntryImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstr: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetName(::core::mem::transmute_copy(&pbstr)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetName<Impl: IScriptEntryImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psz: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetName(&*(&psz as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetItemName<Impl: IScriptEntryImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstr: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetItemName(::core::mem::transmute_copy(&pbstr)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetItemName<Impl: IScriptEntryImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psz: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetItemName(&*(&psz as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSignature<Impl: IScriptEntryImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppti: *mut ::windows::core::RawPtr, pimethod: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSignature(::core::mem::transmute_copy(&ppti), ::core::mem::transmute_copy(&pimethod)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSignature<Impl: IScriptEntryImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pti: ::windows::core::RawPtr, imethod: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetSignature(&*(&pti as *const <super::super::Com::ITypeInfo as ::windows::core::Abi>::Abi as *const <super::super::Com::ITypeInfo as ::windows::core::DefaultType>::DefaultType), imethod) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetRange<Impl: IScriptEntryImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pichmin: *mut u32, pcch: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetRange(::core::mem::transmute_copy(&pichmin), ::core::mem::transmute_copy(&pcch)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IScriptEntry>, base.5, GetText::<Impl, OFFSET>, SetText::<Impl, OFFSET>, GetBody::<Impl, OFFSET>, SetBody::<Impl, OFFSET>, GetName::<Impl, OFFSET>, SetName::<Impl, OFFSET>, GetItemName::<Impl, OFFSET>, SetItemName::<Impl, OFFSET>, GetSignature::<Impl, OFFSET>, SetSignature::<Impl, OFFSET>, GetRange::<Impl, OFFSET>)
    }
}
pub trait IScriptInvocationContextImpl: Sized {
    fn GetContextType();
    fn GetContextDescription();
    fn GetContextObject();
}
impl ::windows::core::RuntimeName for IScriptInvocationContext {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IScriptInvocationContext";
}
impl IScriptInvocationContextVtbl {
    pub const fn new<Impl: IScriptInvocationContextImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IScriptInvocationContextVtbl {
        unsafe extern "system" fn GetContextType<Impl: IScriptInvocationContextImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pinvocationcontexttype: *mut SCRIPT_INVOCATION_CONTEXT_TYPE) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetContextType(::core::mem::transmute_copy(&pinvocationcontexttype)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetContextDescription<Impl: IScriptInvocationContextImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdescription: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetContextDescription(::core::mem::transmute_copy(&pdescription)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetContextObject<Impl: IScriptInvocationContextImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppcontextobject: *mut *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetContextObject(::core::mem::transmute_copy(&ppcontextobject)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IScriptInvocationContext>, base.5, GetContextType::<Impl, OFFSET>, GetContextDescription::<Impl, OFFSET>, GetContextObject::<Impl, OFFSET>)
    }
}
pub trait IScriptNodeImpl: Sized {
    fn Alive();
    fn Delete();
    fn GetParent();
    fn GetIndexInParent();
    fn GetCookie();
    fn GetNumberOfChildren();
    fn GetChild();
    fn GetLanguage();
    fn CreateChildEntry();
    fn CreateChildHandler();
}
impl ::windows::core::RuntimeName for IScriptNode {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IScriptNode";
}
impl IScriptNodeVtbl {
    pub const fn new<Impl: IScriptNodeImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IScriptNodeVtbl {
        unsafe extern "system" fn Alive<Impl: IScriptNodeImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Alive() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Delete<Impl: IScriptNodeImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Delete() {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetParent<Impl: IScriptNodeImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppsnparent: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetParent(::core::mem::transmute_copy(&ppsnparent)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetIndexInParent<Impl: IScriptNodeImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pisn: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetIndexInParent(::core::mem::transmute_copy(&pisn)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCookie<Impl: IScriptNodeImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwcookie: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetCookie(::core::mem::transmute_copy(&pdwcookie)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetNumberOfChildren<Impl: IScriptNodeImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcsn: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetNumberOfChildren(::core::mem::transmute_copy(&pcsn)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetChild<Impl: IScriptNodeImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, isn: u32, ppsn: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetChild(isn, ::core::mem::transmute_copy(&ppsn)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetLanguage<Impl: IScriptNodeImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstr: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetLanguage(::core::mem::transmute_copy(&pbstr)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateChildEntry<Impl: IScriptNodeImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, isn: u32, dwcookie: u32, pszdelimiter: super::super::super::Foundation::PWSTR, ppse: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateChildEntry(isn, dwcookie, &*(&pszdelimiter as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&ppse)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateChildHandler<Impl: IScriptNodeImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszdefaultname: super::super::super::Foundation::PWSTR, prgpsznames: *const super::super::super::Foundation::PWSTR, cpsznames: u32, pszevent: super::super::super::Foundation::PWSTR, pszdelimiter: super::super::super::Foundation::PWSTR, ptisignature: ::windows::core::RawPtr, imethodsignature: u32, isn: u32, dwcookie: u32, ppse: *mut ::windows::core::RawPtr) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateChildHandler(
                &*(&pszdefaultname as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&prgpsznames as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                cpsznames,
                &*(&pszevent as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&pszdelimiter as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType),
                &*(&ptisignature as *const <super::super::Com::ITypeInfo as ::windows::core::Abi>::Abi as *const <super::super::Com::ITypeInfo as ::windows::core::DefaultType>::DefaultType),
                imethodsignature,
                isn,
                dwcookie,
                ::core::mem::transmute_copy(&ppse),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IScriptNode>, base.5, Alive::<Impl, OFFSET>, Delete::<Impl, OFFSET>, GetParent::<Impl, OFFSET>, GetIndexInParent::<Impl, OFFSET>, GetCookie::<Impl, OFFSET>, GetNumberOfChildren::<Impl, OFFSET>, GetChild::<Impl, OFFSET>, GetLanguage::<Impl, OFFSET>, CreateChildEntry::<Impl, OFFSET>, CreateChildHandler::<Impl, OFFSET>)
    }
}
pub trait IScriptScriptletImpl: Sized + IScriptEntryImpl + IScriptNodeImpl {
    fn GetSubItemName();
    fn SetSubItemName();
    fn GetEventName();
    fn SetEventName();
    fn GetSimpleEventName();
    fn SetSimpleEventName();
}
impl ::windows::core::RuntimeName for IScriptScriptlet {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IScriptScriptlet";
}
impl IScriptScriptletVtbl {
    pub const fn new<Impl: IScriptScriptletImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IScriptScriptletVtbl {
        unsafe extern "system" fn GetSubItemName<Impl: IScriptScriptletImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstr: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSubItemName(::core::mem::transmute_copy(&pbstr)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSubItemName<Impl: IScriptScriptletImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psz: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetSubItemName(&*(&psz as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetEventName<Impl: IScriptScriptletImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstr: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventName(::core::mem::transmute_copy(&pbstr)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetEventName<Impl: IScriptScriptletImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psz: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetEventName(&*(&psz as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetSimpleEventName<Impl: IScriptScriptletImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstr: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetSimpleEventName(::core::mem::transmute_copy(&pbstr)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSimpleEventName<Impl: IScriptScriptletImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psz: super::super::super::Foundation::PWSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).SetSimpleEventName(&*(&psz as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IScriptScriptlet>, base.5, GetSubItemName::<Impl, OFFSET>, SetSubItemName::<Impl, OFFSET>, GetEventName::<Impl, OFFSET>, SetEventName::<Impl, OFFSET>, GetSimpleEventName::<Impl, OFFSET>, SetSimpleEventName::<Impl, OFFSET>)
    }
}
pub trait ISimpleConnectionPointImpl: Sized {
    fn GetEventCount();
    fn DescribeEvents();
    fn Advise();
    fn Unadvise();
}
impl ::windows::core::RuntimeName for ISimpleConnectionPoint {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.ISimpleConnectionPoint";
}
impl ISimpleConnectionPointVtbl {
    pub const fn new<Impl: ISimpleConnectionPointImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> ISimpleConnectionPointVtbl {
        unsafe extern "system" fn GetEventCount<Impl: ISimpleConnectionPointImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pulcount: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).GetEventCount(::core::mem::transmute_copy(&pulcount)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DescribeEvents<Impl: ISimpleConnectionPointImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ievent: u32, cevents: u32, prgid: *mut i32, prgbstr: *mut super::super::super::Foundation::BSTR, pceventsfetched: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).DescribeEvents(ievent, cevents, ::core::mem::transmute_copy(&prgid), ::core::mem::transmute_copy(&prgbstr), ::core::mem::transmute_copy(&pceventsfetched)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Advise<Impl: ISimpleConnectionPointImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdisp: ::windows::core::RawPtr, pdwcookie: *mut u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Advise(&*(&pdisp as *const <super::super::Com::IDispatch as ::windows::core::Abi>::Abi as *const <super::super::Com::IDispatch as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pdwcookie)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Unadvise<Impl: ISimpleConnectionPointImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwcookie: u32) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Unadvise(dwcookie) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<ISimpleConnectionPoint>, base.5, GetEventCount::<Impl, OFFSET>, DescribeEvents::<Impl, OFFSET>, Advise::<Impl, OFFSET>, Unadvise::<Impl, OFFSET>)
    }
}
pub trait IStringDisplayableConceptImpl: Sized {
    fn ToDisplayString();
}
impl ::windows::core::RuntimeName for IStringDisplayableConcept {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IStringDisplayableConcept";
}
impl IStringDisplayableConceptVtbl {
    pub const fn new<Impl: IStringDisplayableConceptImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IStringDisplayableConceptVtbl {
        unsafe extern "system" fn ToDisplayString<Impl: IStringDisplayableConceptImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, contextobject: ::windows::core::RawPtr, metadata: ::windows::core::RawPtr, displaystring: *mut super::super::super::Foundation::BSTR) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).ToDisplayString(&*(&contextobject as *const <IModelObject as ::windows::core::Abi>::Abi as *const <IModelObject as ::windows::core::DefaultType>::DefaultType), &*(&metadata as *const <IKeyStore as ::windows::core::Abi>::Abi as *const <IKeyStore as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&displaystring)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IStringDisplayableConcept>, base.5, ToDisplayString::<Impl, OFFSET>)
    }
}
pub trait ITridentEventSinkImpl: Sized {
    fn FireEvent();
}
impl ::windows::core::RuntimeName for ITridentEventSink {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.ITridentEventSink";
}
impl ITridentEventSinkVtbl {
    pub const fn new<Impl: ITridentEventSinkImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> ITridentEventSinkVtbl {
        unsafe extern "system" fn FireEvent<Impl: ITridentEventSinkImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstrevent: super::super::super::Foundation::PWSTR, pdp: *const super::super::Com::DISPPARAMS, pvarres: *mut super::super::Com::VARIANT, pei: *mut super::super::Com::EXCEPINFO) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).FireEvent(&*(&pstrevent as *const <super::super::super::Foundation::PWSTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::PWSTR as ::windows::core::DefaultType>::DefaultType), &*(&pdp as *const <super::super::Com::DISPPARAMS as ::windows::core::Abi>::Abi as *const <super::super::Com::DISPPARAMS as ::windows::core::DefaultType>::DefaultType), ::core::mem::transmute_copy(&pvarres), ::core::mem::transmute_copy(&pei)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<ITridentEventSink>, base.5, FireEvent::<Impl, OFFSET>)
    }
}
pub trait IWebAppDiagnosticsObjectInitializationImpl: Sized {
    fn Initialize();
}
impl ::windows::core::RuntimeName for IWebAppDiagnosticsObjectInitialization {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IWebAppDiagnosticsObjectInitialization";
}
impl IWebAppDiagnosticsObjectInitializationVtbl {
    pub const fn new<Impl: IWebAppDiagnosticsObjectInitializationImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IWebAppDiagnosticsObjectInitializationVtbl {
        unsafe extern "system" fn Initialize<Impl: IWebAppDiagnosticsObjectInitializationImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hpassedhandle: super::super::super::Foundation::HANDLE_PTR, pdebugapplication: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).Initialize(&*(&hpassedhandle as *const <super::super::super::Foundation::HANDLE_PTR as ::windows::core::Abi>::Abi as *const <super::super::super::Foundation::HANDLE_PTR as ::windows::core::DefaultType>::DefaultType), &*(&pdebugapplication as *const <::windows::core::IUnknown as ::windows::core::Abi>::Abi as *const <::windows::core::IUnknown as ::windows::core::DefaultType>::DefaultType)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IWebAppDiagnosticsObjectInitialization>, base.5, Initialize::<Impl, OFFSET>)
    }
}
pub trait IWebAppDiagnosticsSetupImpl: Sized {
    fn DiagnosticsSupported();
    fn CreateObjectWithSiteAtWebApp();
}
impl ::windows::core::RuntimeName for IWebAppDiagnosticsSetup {
    const NAME: &'static str = "Windows.Win32.System.Diagnostics.Debug.IWebAppDiagnosticsSetup";
}
impl IWebAppDiagnosticsSetupVtbl {
    pub const fn new<Impl: IWebAppDiagnosticsSetupImpl, const OFFSET: usize>(base: &::windows::core::IInspectableVtbl) -> IWebAppDiagnosticsSetupVtbl {
        unsafe extern "system" fn DiagnosticsSupported<Impl: IWebAppDiagnosticsSetupImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pretval: *mut i16) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).DiagnosticsSupported(::core::mem::transmute_copy(&pretval)) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateObjectWithSiteAtWebApp<Impl: IWebAppDiagnosticsSetupImpl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, rclsid: *const ::windows::core::GUID, dwclscontext: u32, riid: *const ::windows::core::GUID, hpasstoobject: usize) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).add(OFFSET) as *mut Impl;
            match (*this).CreateObjectWithSiteAtWebApp(&*(&rclsid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), dwclscontext, &*(&riid as *const <::windows::core::GUID as ::windows::core::Abi>::Abi as *const <::windows::core::GUID as ::windows::core::DefaultType>::DefaultType), hpasstoobject) {
                ::core::result::Result::Ok(ok__) => {
                    *result__ = ::core::mem::transmute_copy(&ok__);
                    ::core::mem::forget(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self(base.0, base.1, base.2, base.3, ::windows::core::GetRuntimeClassName::<IWebAppDiagnosticsSetup>, base.5, DiagnosticsSupported::<Impl, OFFSET>, CreateObjectWithSiteAtWebApp::<Impl, OFFSET>)
    }
}
